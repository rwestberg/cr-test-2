diff a/application/org.openjdk.jmc.flightrecorder.flameview/.classpath b/application/org.openjdk.jmc.flightrecorder.flameview/.classpath
--- a/application/org.openjdk.jmc.flightrecorder.flameview/.classpath
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/.classpath
@@ -1,8 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
 	<classpathentry kind="src" path="src/main/java"/>
+	<classpathentry kind="src" path="src/main/js"/>
 	<classpathentry kind="src" path="src/main/resources"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8">
 		<attributes>
 			<attribute name="maven.pomderived" value="true"/>
 		</attributes>
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
@@ -34,12 +34,14 @@
 package org.openjdk.jmc.flightrecorder.flameview.views;
 
 import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME;
 import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME_DESC;
 
+import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.text.MessageFormat;
+import java.util.Base64;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.logging.Level;
@@ -58,10 +60,13 @@
 import org.eclipse.swt.browser.ProgressAdapter;
 import org.eclipse.swt.browser.ProgressEvent;
 import org.eclipse.swt.custom.SashForm;
 import org.eclipse.swt.events.MenuDetectEvent;
 import org.eclipse.swt.events.MenuDetectListener;
+import org.eclipse.swt.graphics.Image;
+import org.eclipse.swt.graphics.ImageLoader;
+import org.eclipse.swt.graphics.ImageData;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.ui.IMemento;
 import org.eclipse.ui.ISelectionListener;
 import org.eclipse.ui.IViewSite;
 import org.eclipse.ui.IWorkbenchPart;
@@ -72,10 +77,11 @@
 import org.openjdk.jmc.flightrecorder.flameview.tree.TraceNode;
 import org.openjdk.jmc.flightrecorder.flameview.tree.TraceTreeUtils;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;
 import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;
+import org.openjdk.jmc.flightrecorder.ui.common.ImageConstants;
 import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;
 import org.openjdk.jmc.ui.CoreImages;
 import org.openjdk.jmc.ui.common.util.AdapterUtil;
 import org.openjdk.jmc.ui.handlers.MCContextMenuManager;
 import org.openjdk.jmc.ui.misc.DisplayToolkit;
@@ -97,17 +103,23 @@
 		String jsD3Tip = "jslibs/d3-tip.min.js";
 		// from: https://cdn.jsdelivr.net/gh/spiermar/d3-flame-graph@2.0.3/dist/d3-flamegraph.min.js
 		String jsD3FlameGraph = "jslibs/d3-flamegraph.min.js";
 		// jmc flameview coloring functions
 		String jsFlameviewColoring = "flameviewColoring.js";
+		String cssFlameview = "flameview.css";
 
 		String jsIeLibraries = loadLibraries(jsHtml5shiv, jsRespond);
 		String jsD3Libraries = loadLibraries(jsD3V4, jsD3Tip, jsD3FlameGraph);
+		String styleheets = loadLibraries(cssD3Flamegraph, cssFlameview);
 
-		// formatter arguments for the template: %1 - CSSs, %2 - IE9 specific scripts, %3 - 3rd party scripts %4 - 4th Flameview Coloring
-		HTML_PAGE = String.format(fileContent("page.template"), fileContent(cssD3Flamegraph), jsIeLibraries,
-				jsD3Libraries, fileContent(jsFlameviewColoring));
+		Image image = FlightRecorderUI.getDefault().getImage(ImageConstants.ICON_MAGNIFIER);
+		String imageBase64 = getBase64Image(image);
+
+		// formatter arguments for the template: %1 - CSSs stylesheets, %2 - IE9 specific scripts, %3 - Search Icon Base64, 
+		// %4 - 3rd party scripts, %5 - Flameview Coloring,
+		HTML_PAGE = String.format(fileContent("page.template"), styleheets, jsIeLibraries, imageBase64, jsD3Libraries,
+				fileContent(jsFlameviewColoring));
 	}
 
 	private static final ExecutorService MODEL_EXECUTOR = Executors.newFixedThreadPool(1);
 	private FrameSeparator frameSeparator;
 
@@ -226,10 +238,14 @@
 		}
 	}
 
 	private void setViewerInput(TraceNode root) {
 		browser.setText(HTML_PAGE);
+		browser.addListener(SWT.Resize, event -> {
+			browser.execute("resizeFlameGraph();");
+		});
+
 		browser.addProgressListener(new ProgressAdapter() {
 			@Override
 			public void completed(ProgressEvent event) {
 				browser.removeProgressListener(this);
 				browser.execute(String.format("processGraph(%s);", toJSon(root)));
@@ -304,6 +320,18 @@
 	}
 
 	private static String getStacktraceMessage(String key) {
 		return org.openjdk.jmc.flightrecorder.stacktrace.Messages.getString(key);
 	}
+
+	private static String getBase64Image(Image image) {
+		if (image == null) {
+			return "";
+		} else {
+			ByteArrayOutputStream baos = new ByteArrayOutputStream();
+			ImageLoader loader = new ImageLoader();
+			loader.data = new ImageData[] {image.getImageData()};
+			loader.save(baos, SWT.IMAGE_PNG);
+			return Base64.getEncoder().encodeToString(baos.toByteArray());
+		}
+	}
 }
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.css b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.css
--- /dev/null
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.css
@@ -0,0 +1,9 @@
+input {
+	font-family: Helvetica, Arial, Verdana, sans-serif;
+	font-size: 12px;
+	margin-right: 2px;	
+}
+
+svg {
+	width: 100%;
+}
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js
@@ -30,11 +30,11 @@
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-String.prototype.hashCode = function () {
+String.prototype.hashCode = function() {
 	var hash = 0;
 	if (this.length === 0) return hash;
 	for (var i = 0; i < this.length; i++) {
 		var char = this.charCodeAt(i);
 		hash = ((hash << 5) - hash) + char;
@@ -58,12 +58,15 @@
 const packageMarkerComSunAndJdk = "comSunAndJdk";
 const packageMarkerRest = "rest";
 const packagesIdentifierMap = new Map().set("java.", packageMarkerJava).set("sun.", packageMarkerSun).set("com.sun.", 
 		packageMarkerComSunAndJdk).set("jdk.", packageMarkerComSunAndJdk);
 const packageColorMap = new Map().set("", rootPackageColor);
+const specialCharactersMap = new Map().set('#','\x23').set('$','\x24').set('(', '\x28').set(')','\x29')
+		.set(',','\x2c').set('-','\x2d').set('.','\x2e').set('<','\x3c').set('>','\x3e').set('[','\x5b')
+		.set(']','\x5d').set('_','\x5f').set('{','\x7b').set('|','\x7c').set('}','\x7d').set('~','\x7e');
 
-const colorByPackage = function (p) {
+const colorByPackage = function(p) {
 	if (p === undefined) {
 		return invalidPackageColor;
 	} else {
 		const packageNameStrip = stripPackageName(p);
 		const packageSelectedColor = packageColorMap.get(packageNameStrip);
@@ -90,20 +93,20 @@
 			return packageSelectedColor;
 		}
 	}
 };
 
-const getPackageMarker = function(p){
+const getPackageMarker = function(p) {
 	for(let k of packagesIdentifierMap.keys()){
 		if(p.startsWith(k)){
 			return packagesIdentifierMap.get(k);
 		}
 	}
 	return packageMarkerRest;
 };
 
-const stripPackageName = function (p) {
+const stripPackageName = function(p) {
 	const splitString = p.split("\u002E");
 	const number = Math.min(splitString.length, packageConsideredDepth);
 	return splitString.slice(0, number).join("\u002E");
 };
 
@@ -114,17 +117,38 @@
 
 const createHslColorString = function(h,s,l){
 	return "hsl\u0028" + h + "\u002c " + s + "\u0025\u002c " + l + "\u0025\u0029";
 };
 
-const colorCell = function (d) {
-	return colorByPackage(d.data.p);
+const colorCell = function(d) {
+	if (textToSearch !== "" && (evaluateSearchElement(d.data.p) || evaluateSearchElement(d.data.n))) {
+		return "magenta";
+	} else {
+		return colorByPackage(d.data.p);
+	}
+};
+
+const evaluateSearchElement = function(text) {
+	var adjustTextToSearch = removeSpecialCharacters(textToSearch);
+	return (text !== undefined && removeSpecialCharacters(text).includes(adjustTextToSearch));
+};
+
+const removeSpecialCharacters = function(text) {
+	//return text.trim().replace(/[&\/\\#,+()$~%'":*?<>{}]/g, '_').toLowerCase();
+	const map = Array.prototype.map;
+    const resultText = map.call(text.trim().toLowerCase(), element => {
+        if(specialCharactersMap.has(element)){
+            return specialCharactersMap.get(element);
+        } else {
+            return element;}
+    }).join('');
+    return resultText;
 };
 
-const adjustTip = function (d) {
+const adjustTip = function(d) {
 	var tipMessage = d.data.n + htmlTagBr;
-	if( d.data.d === undefined) {
+	if (d.data.d === undefined) {
 		tipMessage +=  "package: " + d.data.p + htmlTagBr;
 	} else {
 		tipMessage += "description: " + d.data.d + htmlTagBr;
 	}
 	tipMessage += "samples: " + d.data.v;
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/page.template b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/page.template
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/page.template
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/page.template
@@ -8,28 +8,46 @@
 	<!--[if lt IE 9]>
 		<script>%2$s</script>
 	<![endif]-->
 </head>
 
-<body onresize="resizeFlameGraph()">
+<body>
+	<div id="search" align="right">
+		<input type="text" id="searchInput" size="30" onfocusout="executeSearch()" value="">
+		<img src="data:image/png;base64, %3$s" width="12" height="12">
+	</div>
 	<div id="chart"></div>
-	<script type="text/javascript">%3$s</script>
 	<script type="text/javascript">%4$s</script>
+	<script type="text/javascript">%5$s</script>
 	<script type="text/javascript">
-	
+		
+		const minSearchTextSize = 3;
+		var textToSearch = "";
 		var flameGraph;
 		var currentJson;
 		
+		const packageInputField = document.getElementById("searchInput");
+		packageInputField.addEventListener("keyup", function(event) {
+				if (event.keyCode === 13) {
+					executeSearch();	
+				} else if (event.keyCode === 8 && packageInputField.value.length === 0) {
+					executeSearch();		
+				} else if (packageInputField.value.length > minSearchTextSize) {
+					executeSearch();
+				}
+			}
+		);
+		
 		const tip = d3.tip()
         	.direction("s")
         	.offset([8, 0])
         	.attr('class', 'd3-flame-graph-tip')
         	.html(adjustTip);
 
 		function processGraph(jsonObj) {
 			flameGraph = d3.flamegraph()
-				.width(windowSize() * 0.9)
+				.width(windowSize())
 				.cellHeight(18)
 				.transitionDuration(320)
 				.minFrameSize(5)
 				.transitionEase(d3.easeCubic)
 				.sort(true)
@@ -39,23 +57,31 @@
 				.color(colorCell);
 			currentJson = jsonObj;
 			d3.select("#chart")
 				.datum(currentJson)
 				.call(flameGraph);
-		}
+		};
+
+		function executeSearch() {
+			const inputText = removeSpecialCharacters(packageInputField.value);
+			if (textToSearch !== inputText) {
+				textToSearch = removeSpecialCharacters(inputText);
+				flameGraph.search("");
+			}		
+		};
 
 		function windowSize() {
 			return Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
-		}
+		};
 
 		function resizeFlameGraph() {
 			if (flameGraph) {
-				flameGraph.width(windowSize() * 0.9);
+				flameGraph.width(windowSize());
 				d3.select("#chart")
 					.datum(currentJson)
 					.call(flameGraph);
 			}
-		}
+		};
 
 	</script>
 </body>
 </html>
diff a/application/org.openjdk.jmc.flightrecorder.ui/icons/magnifier.png b/application/org.openjdk.jmc.flightrecorder.ui/icons/magnifier.png
Binary files /dev/null and application/org.openjdk.jmc.flightrecorder.ui/icons/magnifier.png differ
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ImageConstants.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ImageConstants.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ImageConstants.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ImageConstants.java
@@ -108,10 +108,12 @@
 
 	public static final String ICON_IO_BY_HOST = "io_by_host.png"; //$NON-NLS-1$
 	public static final String ICON_IO_BY_PORT = "io_by_port.png"; //$NON-NLS-1$
 	public static final String ICON_IO_BY_HOST_AND_PORT = "io_by_host_and_port.png"; //$NON-NLS-1$
 
+	public static final String ICON_MAGNIFIER = "magnifier.png"; //$NON-NLS-1$
+
 	public static final String PAGE_JAVA_APPLICATION = "pages/methodprofiling.png"; //$NON-NLS-1$
 	public static final String PAGE_METHOD = "pages/method.png"; //$NON-NLS-1$
 	public static final String PAGE_HEAP = "pages/objectstatistics.png"; //$NON-NLS-1$
 	public static final String PAGE_LOCKINSTANCES = "pages/locks.png"; //$NON-NLS-1$
 	public static final String PAGE_IO = "pages/io.png"; //$NON-NLS-1$
