diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/StructTypes.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/StructTypes.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/StructTypes.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/StructTypes.java
@@ -76,15 +76,11 @@
 		public Object javaName;
 		public Object group;
 
 		@Override
 		public Long getThreadId() {
-			/*
-			 * NOTE: Parser currently creates thread ID as a quantity, which it probably shouldn't
-			 * be. See TypeManager.createFieldReader(FieldElement, String).
-			 */
-			return ((Number) javaThreadId).longValue();
+			return (Long) javaThreadId;
 		}
 
 		@Override
 		public String getThreadName() {
 			return (String) ((javaName != null) ? javaName : osName);
@@ -601,15 +597,11 @@
 			return (String) descriptor;
 		}
 
 		@Override
 		public Integer getModifier() {
-			/*
-			 * NOTE: Parser currently creates method modifier as a quantity, which it probably
-			 * shouldn't be. See TypeManager.createFieldReader(FieldElement, String).
-			 */
-			return ((Number) modifiers).intValue();
+			return (Integer) modifiers;
 		}
 
 		@Override
 		public Boolean isNative() {
 			return null;
@@ -645,24 +637,16 @@
 		public Object bytecodeIndex;
 		public Object type;
 
 		@Override
 		public Integer getFrameLineNumber() {
-			/*
-			 * NOTE: Parser currently creates frame line number as a quantity, which it probably
-			 * shouldn't be. See TypeManager.createFieldReader(FieldElement, String).
-			 */
-			return ((Number) lineNumber).intValue();
+			return (Integer) lineNumber;
 		}
 
 		@Override
 		public Integer getBCI() {
-			/*
-			 * NOTE: Parser currently creates byte code index as a quantity, which it probably
-			 * shouldn't be. See TypeManager.createFieldReader(FieldElement, String).
-			 */
-			return ((Number) bytecodeIndex).intValue();
+			return (Integer) bytecodeIndex;
 		}
 
 		@Override
 		public IMCMethod getMethod() {
 			if (method == null) {
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/TypeManager.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/TypeManager.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/TypeManager.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/TypeManager.java
@@ -449,17 +449,20 @@
 			reader = new QuantityReader(typeIdentifier, f.unit, f.unsigned);
 		} else if (isNumeric) {
 			if (JfrInternalConstants.TYPE_IDENTIFIER_VALUE_INTERPRETATION.equals(valueType)) {
 				reader = new TypeIdentifierReader(typeIdentifier, f.unsigned);
 			} else {
-				IUnit unit = UnitLookup.getUnitOrNull(valueType);
-				/*
-				 * FIXME: Currently we convert all numbers to quantities. This might not be ideal,
-				 * for example for thread IDs. See multiple notes referring to this method in
-				 * StructTypes.
-				 */
-				reader = new QuantityReader(typeIdentifier, unit == null ? UnitLookup.NUMBER_UNITY : unit, f.unsigned);
+				if (JfrInternalConstants.LINE_NUMBER_ID.equals(f.fieldIdentifier)
+						|| JfrInternalConstants.BCI_ID.equals(f.fieldIdentifier)
+						|| JfrInternalConstants.MODIFIERS_ID.equals(f.fieldIdentifier)
+						|| JfrInternalConstants.JAVA_THREAD_ID_ID.equals(f.fieldIdentifier)) {
+					reader = new PrimitiveReader(typeIdentifier);
+				} else {
+					IUnit unit = UnitLookup.getUnitOrNull(valueType);
+					reader = new QuantityReader(typeIdentifier, unit == null ? UnitLookup.NUMBER_UNITY : unit,
+							f.unsigned);
+				}
 			}
 		}
 		if (f.isStoredInPool()) {
 			if (isNumeric) {
 				throw new InvalidJfrFileException("Numerics should not be put in constant pools"); //$NON-NLS-1$
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/util/JfrInternalConstants.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/util/JfrInternalConstants.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/util/JfrInternalConstants.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/util/JfrInternalConstants.java
@@ -38,6 +38,10 @@
 public final class JfrInternalConstants {
 
 	public static final String BUFFER_LOST_TYPE_ID = "org.openjdk.jmc.flightrecorder.bufferlosttypeid"; //$NON-NLS-1$
 	public static final String TYPE_IDENTIFIER_VALUE_INTERPRETATION = "org.openjdk.jmc.flightrecorder.value_interpretation.type_identifier"; //$NON-NLS-1$
 
+	public static final String LINE_NUMBER_ID = "lineNumber"; //$NON-NLS-1$
+	public static final String BCI_ID = "bytecodeIndex"; //$NON-NLS-1$
+	public static final String MODIFIERS_ID = "modifiers"; //$NON-NLS-1$
+	public static final String JAVA_THREAD_ID_ID = "javaThreadId"; //$NON-NLS-1$
 }
