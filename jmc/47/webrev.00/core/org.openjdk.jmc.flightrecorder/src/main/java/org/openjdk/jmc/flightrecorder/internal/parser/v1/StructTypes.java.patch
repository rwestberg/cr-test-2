diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/StructTypes.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/StructTypes.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/StructTypes.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/StructTypes.java
@@ -76,15 +76,11 @@
 		public Object javaName;
 		public Object group;
 
 		@Override
 		public Long getThreadId() {
-			/*
-			 * NOTE: Parser currently creates thread ID as a quantity, which it probably shouldn't
-			 * be. See TypeManager.createFieldReader(FieldElement, String).
-			 */
-			return ((Number) javaThreadId).longValue();
+			return (Long) javaThreadId;
 		}
 
 		@Override
 		public String getThreadName() {
 			return (String) ((javaName != null) ? javaName : osName);
@@ -601,15 +597,11 @@
 			return (String) descriptor;
 		}
 
 		@Override
 		public Integer getModifier() {
-			/*
-			 * NOTE: Parser currently creates method modifier as a quantity, which it probably
-			 * shouldn't be. See TypeManager.createFieldReader(FieldElement, String).
-			 */
-			return ((Number) modifiers).intValue();
+			return (Integer) modifiers;
 		}
 
 		@Override
 		public Boolean isNative() {
 			return null;
@@ -645,24 +637,16 @@
 		public Object bytecodeIndex;
 		public Object type;
 
 		@Override
 		public Integer getFrameLineNumber() {
-			/*
-			 * NOTE: Parser currently creates frame line number as a quantity, which it probably
-			 * shouldn't be. See TypeManager.createFieldReader(FieldElement, String).
-			 */
-			return ((Number) lineNumber).intValue();
+			return (Integer) lineNumber;
 		}
 
 		@Override
 		public Integer getBCI() {
-			/*
-			 * NOTE: Parser currently creates byte code index as a quantity, which it probably
-			 * shouldn't be. See TypeManager.createFieldReader(FieldElement, String).
-			 */
-			return ((Number) bytecodeIndex).intValue();
+			return (Integer) bytecodeIndex;
 		}
 
 		@Override
 		public IMCMethod getMethod() {
 			if (method == null) {
