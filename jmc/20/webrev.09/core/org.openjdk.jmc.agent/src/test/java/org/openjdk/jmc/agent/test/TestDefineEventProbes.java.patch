diff a/core/org.openjdk.jmc.agent/src/test/java/org/openjdk/jmc/agent/test/TestDefineEventProbes.java b/core/org.openjdk.jmc.agent/src/test/java/org/openjdk/jmc/agent/test/TestDefineEventProbes.java
--- a/core/org.openjdk.jmc.agent/src/test/java/org/openjdk/jmc/agent/test/TestDefineEventProbes.java
+++ b/core/org.openjdk.jmc.agent/src/test/java/org/openjdk/jmc/agent/test/TestDefineEventProbes.java
@@ -1,8 +1,8 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2019, Red Hat Inc. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Red Hat Inc. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -49,10 +49,11 @@
 import org.objectweb.asm.ClassVisitor;
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.commons.AdviceAdapter;
+import org.openjdk.jmc.agent.Field;
 import org.openjdk.jmc.agent.Method;
 import org.openjdk.jmc.agent.Parameter;
 import org.openjdk.jmc.agent.ReturnValue;
 import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;
 import org.openjdk.jmc.agent.jfrnext.impl.JFRNextEventClassGenerator;
@@ -116,17 +117,17 @@
 		assertFalse(exceptionThrown);
 	}
 
 	private void injectFailingEvent() throws Exception {
 		Method method = new Method(METHOD_NAME, METHOD_DESCRIPTOR);
-		Map<String, String> attributes = new HashMap<String, String>();
+		Map<String, String> attributes = new HashMap<>();
 		attributes.put("path", EVENT_PATH);
 		attributes.put("name", EVENT_NAME);
 		attributes.put("description", EVENT_DESCRIPTION);
-		ReturnValue retVal = new ReturnValue(null, "", null);
-		JFRTransformDescriptor eventTd = new JFRTransformDescriptor(EVENT_ID,
-				EVENT_CLASS_NAME.replace(".", "/"), method, attributes, new ArrayList<Parameter>(), retVal);
+		ReturnValue retVal = new ReturnValue(null, "", null, null, null);
+		JFRTransformDescriptor eventTd = new JFRTransformDescriptor(EVENT_ID, TypeUtils.getInternalName(EVENT_CLASS_NAME),
+				method, attributes, new ArrayList<Parameter>(), retVal, new ArrayList<Field>());
 
 		ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS);
 		ClassVisitor classVisitor = new ClassVisitor(Opcodes.ASM5, classWriter) {
 			@Override
 			public MethodVisitor visitMethod(int access, String name, String desc, String signature,
@@ -148,11 +149,11 @@
 					}
 				};
 			}
 		};
 
-		byte[] eventClass = JFRNextEventClassGenerator.generateEventClass(eventTd);
+		byte[] eventClass = JFRNextEventClassGenerator.generateEventClass(eventTd, InstrumentMe.class);
 		ClassReader reader = new ClassReader(eventClass);
 		reader.accept(classVisitor, 0);
 		byte[] modifiedEvent = classWriter.toByteArray();
 
 		TypeUtils.defineClass(eventTd.getEventClassName(), modifiedEvent, 0, modifiedEvent.length,
