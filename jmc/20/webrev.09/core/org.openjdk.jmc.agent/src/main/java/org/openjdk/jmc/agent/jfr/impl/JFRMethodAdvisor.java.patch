diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -35,36 +35,47 @@
 import org.objectweb.asm.Label;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.Type;
 import org.objectweb.asm.commons.AdviceAdapter;
+import org.openjdk.jmc.agent.Attribute;
+import org.openjdk.jmc.agent.Field;
 import org.openjdk.jmc.agent.Parameter;
 import org.openjdk.jmc.agent.ReturnValue;
 import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;
 import org.openjdk.jmc.agent.util.TypeUtils;
+import org.openjdk.jmc.agent.util.expression.IllegalSyntaxException;
+import org.openjdk.jmc.agent.util.expression.ReferenceChain;
+import org.openjdk.jmc.agent.util.expression.ReferenceChainElement;
+
+import java.lang.reflect.Modifier;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * Code emitter for JFR distributed with pre-JDK 9 releases. Probably works with JRockit too. ;)
  */
 public class JFRMethodAdvisor extends AdviceAdapter {
 	private static final String THROWABLE_BINARY_NAME = "java/lang/Throwable"; //$NON-NLS-1$
 
 	private final JFRTransformDescriptor transformDescriptor;
+	private final Class<?> inspectionClass;
 	private final Type[] argumentTypesRef;
 	private final Type returnTypeRef;
 	private final Type eventType;
 	private int eventLocal = -1;
 
 	private Label tryBegin = new Label();
 	private Label tryEnd = new Label();
 
 	private boolean shouldInstrumentThrow;
 
-	protected JFRMethodAdvisor(JFRTransformDescriptor transformDescriptor, int api, MethodVisitor mv, int access,
-			String name, String desc) {
+	protected JFRMethodAdvisor(JFRTransformDescriptor transformDescriptor, Class<?> inspectionClass, int api, 
+			MethodVisitor mv, int access, String name, String desc) {
 		super(api, mv, access, name, desc);
 		this.transformDescriptor = transformDescriptor;
+		this.inspectionClass = inspectionClass;
 		// These are not accessible from the super type (made private), so must save an extra reference. :/
 		this.argumentTypesRef = Type.getArgumentTypes(desc);
 		this.returnTypeRef = Type.getReturnType(desc);
 		this.eventType = Type.getObjectType(transformDescriptor.getEventClassName());
 
@@ -96,46 +107,126 @@
 		super.visitEnd();
     }
 
 	@Override
 	protected void onMethodEnter() {
-		createEvent();
+		try {
+			createEvent();
+		} catch (IllegalSyntaxException e) {
+			throw new RuntimeException(e);
+		}
 	}
 
-	private void createEvent() {
+	private void createEvent() throws IllegalSyntaxException {
 		mv.visitTypeInsn(NEW, transformDescriptor.getEventClassName());
 		mv.visitInsn(DUP);
 		mv.visitInsn(DUP);
 		mv.visitMethodInsn(INVOKESPECIAL, transformDescriptor.getEventClassName(), "<init>", "()V", false); //$NON-NLS-1$ //$NON-NLS-2$
 		for (Parameter param : transformDescriptor.getParameters()) {
 			Type argumentType = argumentTypesRef[param.getIndex()];
 			if (transformDescriptor.isAllowedFieldType(argumentType)) {
 				mv.visitInsn(DUP);
 				loadArg(param.getIndex());
-				writeParameter(param, argumentType);
+				writeAttribute(param, argumentType);
+			}
+		}
+
+		for (Field field : transformDescriptor.getFields()) {
+			ReferenceChain refChain = field.resolveReferenceChain(inspectionClass).normalize();
+
+			if (!refChain.isStatic() && Modifier.isStatic(getAccess())) {
+				throw new IllegalSyntaxException("Illegal non-static reference from a static context: " + field.getExpression());
+			}
+
+			if (transformDescriptor.isAllowedFieldType(refChain.getType())) {
+				mv.visitInsn(DUP);
+				loadField(refChain);
+				writeAttribute(field, refChain.getType());
 			}
 		}
 
 		mv.visitMethodInsn(INVOKEVIRTUAL, transformDescriptor.getEventClassName(), "begin", "()V", false); //$NON-NLS-1$ //$NON-NLS-2$
 		eventLocal = newLocal(eventType);
 		mv.visitVarInsn(ASTORE, eventLocal);
 	}
 
-	private void writeParameter(Parameter param, Type type) {
-		if (TypeUtils.shouldStringify(type)) {
-			TypeUtils.stringify(mv);
-			type = TypeUtils.STRING_TYPE;
+	private void loadField(ReferenceChain refChain) {
+		Type type = refChain.getType();
+		boolean isStatic = Modifier.isStatic(getAccess());
+		Label nullCase = new Label();
+		Label continueCase = new Label();
+		List<Object> localVarVerifications = new ArrayList<>();
+		if (!isStatic) {
+			localVarVerifications.add(Type.getInternalName(inspectionClass)); // "this"
 		}
-		putField(Type.getObjectType(transformDescriptor.getEventClassName()), param.getFieldName(), type);
+		for (Type argType : argumentTypesRef) {
+			localVarVerifications.add(TypeUtils.getFrameVerificationType(argType));
+		}
+
+		// Assumes the reference chain is normalized already. See ReferenceChain.normalize()
+		List<ReferenceChainElement> refs = refChain.getReferences();
+		for (int i = 0; i < refs.size(); i++) {
+			ReferenceChainElement ref = refs.get(i);
+
+			if (ref instanceof ReferenceChainElement.ThisReference) {
+				mv.visitVarInsn(ALOAD, 0); // load "this"
+				continue;
+			}
+
+			if (ref instanceof ReferenceChainElement.FieldReference) {
+				mv.visitFieldInsn(ref.isStatic() ? GETSTATIC : GETFIELD, ref.getMemberingType().getInternalName(),
+						((ReferenceChainElement.FieldReference) ref).getName(),
+						ref.getReferencedType().getDescriptor());
+
+				// null check for field references
+				if (i < refs.size() - 1) { // Skip null check for final reference. Null is acceptable here
+					mv.visitInsn(DUP);
+					mv.visitJumpInsn(IFNULL, nullCase);
+				}
+
+				continue;
+			}
+
+			if (ref instanceof ReferenceChainElement.QualifiedThisReference) {
+				int suffix = ((ReferenceChainElement.QualifiedThisReference) ref).getDepth();
+				Class<?> c = ref.getMemberingClass();
+				while (!ref.getReferencedClass().equals(c)) {
+					mv.visitFieldInsn(GETFIELD, Type.getType(c).getInternalName(), "this$" + (suffix--),
+							Type.getType(c.getEnclosingClass()).getDescriptor());
+					c = c.getEnclosingClass();
+				}
+
+				continue;
+			}
+
+			throw new UnsupportedOperationException("Unsupported reference chain element type");
+		}
+
+		// loaded a value, jump to writing attribute
+		mv.visitJumpInsn(GOTO, continueCase);
+
+		// null reference on path, load zero value
+		mv.visitLabel(nullCase);
+		mv.visitFrame(F_NEW, localVarVerifications.size(), localVarVerifications.toArray(), 4,
+				new Object[] {eventType.getInternalName(), eventType.getInternalName(), eventType.getInternalName(),
+						Type.getInternalName(Object.class)});
+		mv.visitInsn(POP);
+		mv.visitInsn(TypeUtils.getConstZeroOpcode(type));
+
+		// must verify frame for jump targets
+		mv.visitLabel(continueCase);
+		mv.visitFrame(F_NEW, localVarVerifications.size(), localVarVerifications.toArray(), 4,
+				new Object[] {eventType.getInternalName(), eventType.getInternalName(), eventType.getInternalName(),
+						TypeUtils.getFrameVerificationType(type)});
 	}
 
-	private void writeReturnValue(ReturnValue returnValue, Type type) {
+	private void writeAttribute(Attribute param, Type type) {
 		if (TypeUtils.shouldStringify(type)) {
 			TypeUtils.stringify(mv);
 			type = TypeUtils.STRING_TYPE;
 		}
-		putField(Type.getObjectType(transformDescriptor.getEventClassName()), returnValue.getFieldName(), type);
+		putField(Type.getObjectType(transformDescriptor.getEventClassName()), param.getFieldName(), type);
 	}
 
 	@Override
 	protected void onMethodExit(int opcode) {
 		if (opcode == ATHROW && !shouldInstrumentThrow) {
@@ -160,11 +251,11 @@
 			dup2();
 			mv.visitVarInsn(ALOAD, eventLocal);
 			dupX2();
 			pop();
 		}
-		writeReturnValue(returnValue, returnTypeRef);
+		writeAttribute(returnValue, returnTypeRef);
 	}
 
 	private void commitEvent() {
 		mv.visitVarInsn(ALOAD, eventLocal);
 		mv.visitInsn(DUP);
