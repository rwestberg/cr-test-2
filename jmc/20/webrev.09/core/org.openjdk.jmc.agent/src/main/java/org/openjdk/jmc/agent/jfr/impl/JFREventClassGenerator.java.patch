diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFREventClassGenerator.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFREventClassGenerator.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFREventClassGenerator.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFREventClassGenerator.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -39,14 +39,17 @@
 import org.objectweb.asm.FieldVisitor;
 import org.objectweb.asm.Label;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.Type;
+import org.openjdk.jmc.agent.Attribute;
+import org.openjdk.jmc.agent.Field;
 import org.openjdk.jmc.agent.Parameter;
 import org.openjdk.jmc.agent.ReturnValue;
 import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;
 import org.openjdk.jmc.agent.util.TypeUtils;
+import org.openjdk.jmc.agent.util.expression.IllegalSyntaxException;
 
 public class JFREventClassGenerator {
 	private static final String CLASS_NAME_INSTANT_EVENT = "com/oracle/jrockit/jfr/InstantEvent"; //$NON-NLS-1$
 	private static final String CLASS_NAME_DURATION_EVENT = "com/oracle/jrockit/jfr/DurationEvent"; //$NON-NLS-1$
 	private static final String CLASS_NAME_TIMED_EVENT = "com/oracle/jrockit/jfr/TimedEvent"; //$NON-NLS-1$
@@ -58,62 +61,66 @@
 	 *            the transform descriptor describing the transform.
 	 * @return returns the byte code for the generated class.
 	 * @throws Exception
 	 *             if the event class could not be generated.
 	 */
-	public static byte[] generateEventClass(JFRTransformDescriptor td) throws Exception {
+	public static byte[] generateEventClass(JFRTransformDescriptor td, Class<?> classBeingRedefined) throws Exception {
 		ClassWriter cw = new ClassWriter(0);
 		// TODO: Add support for different locations
 		cw.visit(Opcodes.V1_7, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER, td.getEventClassName(), null,
 				getEventTypeName(JFREventType.TIMED), null);
 
 		cw.visitSource(TypeUtils.getNamePart(td.getEventClassName()) + TypeUtils.JAVA_FILE_EXTENSION, null);
 
 		String parameterizedClassName = TypeUtils.parameterize(td.getEventClassName());
 		generateClassAnnotations(cw, td);
 		generateTokenField(cw);
-		generateAttributeFields(cw, td);
+		generateAttributeFields(cw, td, classBeingRedefined);
 		generateClinit(cw, td.getEventClassName(), parameterizedClassName);
 		generateInit(cw, td.getEventClassName(), parameterizedClassName);
 		cw.visitEnd();
 
 		return cw.toByteArray();
 	}
 
-	private static void generateAttributeFields(ClassWriter cw, JFRTransformDescriptor td) {
+	private static void generateAttributeFields(ClassWriter cw, JFRTransformDescriptor td, Class<?> classBeingRedefined) throws IllegalSyntaxException {
 		Type[] args = Type.getArgumentTypes(td.getMethod().getSignature());
 		for (Parameter param : td.getParameters()) {
 			createField(cw, td, param, args[param.getIndex()]);
 		}
 		if (td.getReturnValue() != null) {
 			createField(cw, td, Type.getReturnType(td.getMethod().getSignature()));
 		}
+
+		for (Field field : td.getFields()) {
+			createField(cw, td, field, field.resolveReferenceChain(classBeingRedefined).getType());
+		}
 	}
 
-	private static void createField(ClassWriter cw, JFRTransformDescriptor td, Parameter param, Type type) {
+	private static void createField(ClassWriter cw, JFRTransformDescriptor td, Attribute attribute, Type type) {
 		if (!td.isAllowedFieldType(type)) {
 			Logger.getLogger(JFREventClassGenerator.class.getName())
-					.warning("Skipped generating field in event class for parameter " + param + " and type " + type //$NON-NLS-1$ //$NON-NLS-2$
+					.warning("Skipped generating field in event class for parameter " + attribute + " and type " + type //$NON-NLS-1$ //$NON-NLS-2$
 							+ " because of configuration settings!"); //$NON-NLS-1$
 			return;
 		}
 
 		String fieldType = getFieldType(type);
 
-		FieldVisitor fv = cw.visitField(Opcodes.ACC_PUBLIC, param.getFieldName(), fieldType, null, null);
+		FieldVisitor fv = cw.visitField(Opcodes.ACC_PUBLIC, attribute.getFieldName(), fieldType, null, null);
 		AnnotationVisitor av = fv.visitAnnotation("Lcom/oracle/jrockit/jfr/ValueDefinition;", true); //$NON-NLS-1$
-		if (param.getName() != null) {
-			av.visit("name", param.getName()); //$NON-NLS-1$
+		if (attribute.getName() != null) {
+			av.visit("name", attribute.getName()); //$NON-NLS-1$
 		}
-		if (param.getDescription() != null) {
-			av.visit("description", param.getDescription()); //$NON-NLS-1$
+		if (attribute.getDescription() != null) {
+			av.visit("description", attribute.getDescription()); //$NON-NLS-1$
 		}
-		if (param.getContentType() != null) {
-			av.visitEnum("contentType", "Lcom/oracle/jrockit/jfr/ContentType;", param.getContentType()); //$NON-NLS-1$ //$NON-NLS-2$
+		if (attribute.getContentType() != null) {
+			av.visitEnum("contentType", "Lcom/oracle/jrockit/jfr/ContentType;", attribute.getContentType()); //$NON-NLS-1$ //$NON-NLS-2$
 		}
-		if (param.getRelationKey() != null) {
-			av.visit("relationKey", param.getRelationKey()); //$NON-NLS-1$
+		if (attribute.getRelationKey() != null) {
+			av.visit("relationKey", attribute.getRelationKey()); //$NON-NLS-1$
 		}
 		av.visitEnd();
 		fv.visitEnd();
 	}
 
