diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java
@@ -56,26 +56,26 @@
  */
 public class JFRMethodAdvisor extends AdviceAdapter {
 	private static final String THROWABLE_BINARY_NAME = "java/lang/Throwable"; //$NON-NLS-1$
 
 	private final JFRTransformDescriptor transformDescriptor;
-	private final Class<?> classBeingRedefined;
+	private final Class<?> inspectionClass;
 	private final Type[] argumentTypesRef;
 	private final Type returnTypeRef;
 	private final Type eventType;
 	private int eventLocal = -1;
 
 	private Label tryBegin = new Label();
 	private Label tryEnd = new Label();
 
 	private boolean shouldInstrumentThrow;
 
-	protected JFRMethodAdvisor(JFRTransformDescriptor transformDescriptor, Class<?> classBeingRedefined, int api, MethodVisitor mv, int access,
-			String name, String desc) {
+	protected JFRMethodAdvisor(JFRTransformDescriptor transformDescriptor, Class<?> inspectionClass, int api, 
+			MethodVisitor mv, int access, String name, String desc) {
 		super(api, mv, access, name, desc);
 		this.transformDescriptor = transformDescriptor;
-		this.classBeingRedefined = classBeingRedefined;
+		this.inspectionClass = inspectionClass;
 		// These are not accessible from the super type (made private), so must save an extra reference. :/
 		this.argumentTypesRef = Type.getArgumentTypes(desc);
 		this.returnTypeRef = Type.getReturnType(desc);
 		this.eventType = Type.getObjectType(transformDescriptor.getEventClassName());
 
@@ -129,11 +129,11 @@
 				writeAttribute(param, argumentType);
 			}
 		}
 
 		for (Field field : transformDescriptor.getFields()) {
-			ReferenceChain refChain = field.resolveReferenceChain(classBeingRedefined).normalize();
+			ReferenceChain refChain = field.resolveReferenceChain(inspectionClass).normalize();
 
 			if (!refChain.isStatic() && Modifier.isStatic(getAccess())) {
 				throw new IllegalSyntaxException("Illegal non-static reference from a static context: " + field.getExpression());
 			}
 
@@ -154,11 +154,11 @@
 		boolean isStatic = Modifier.isStatic(getAccess());
 		Label nullCase = new Label();
 		Label continueCase = new Label();
 		List<Object> localVarVerifications = new ArrayList<>();
 		if (!isStatic) {
-			localVarVerifications.add(Type.getInternalName(classBeingRedefined)); // "this"
+			localVarVerifications.add(Type.getInternalName(inspectionClass)); // "this"
 		}
 		for (Type argType : argumentTypesRef) {
 			localVarVerifications.add(TypeUtils.getFrameVerificationType(argType));
 		}
 
