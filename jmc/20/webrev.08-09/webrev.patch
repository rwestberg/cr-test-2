diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/Transformer.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/Transformer.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/Transformer.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/Transformer.java
@@ -46,11 +46,10 @@
 import org.openjdk.jmc.agent.jfr.VersionResolver;
 import org.openjdk.jmc.agent.jfr.VersionResolver.JFRVersion;
 import org.openjdk.jmc.agent.jfr.impl.JFRClassVisitor;
 import org.openjdk.jmc.agent.jfrnext.impl.JFRNextClassVisitor;
 import org.openjdk.jmc.agent.util.InspectionClassLoader;
-import org.openjdk.jmc.agent.util.TypeUtils;
 
 public class Transformer implements ClassFileTransformer {
 	private TransformRegistry registry;
 
 	public Transformer(TransformRegistry registry) {
@@ -63,56 +62,53 @@
 		byte[] classfileBuffer) throws IllegalClassFormatException {
 		if (!registry.hasPendingTransforms(className)) {
 			return registry.isRevertIntrumentation() ? classfileBuffer : null;
 		}
 
-		// load the class for reflective inspection if not loaded already
-		if (classBeingRedefined == null) {
-			try {
-				// Don't reuse this class loader instance. We want the loader and its class to unload after we're done.
-				classBeingRedefined = new InspectionClassLoader(loader)
-						.loadClass(TypeUtils.getCanonicalName(className));
-			} catch (ClassNotFoundException e) {
-				throw new IllegalStateException(e); // This should not happen
-			}
-		}
-
-		return doTransforms(registry.getTransformData(className), classfileBuffer, loader, classBeingRedefined, protectionDomain);
+		// We need a class instance for reflective inspection, so create a InspectionClassLoader if the class if not yet 
+		// loaded.
+		return doTransforms(registry.getTransformData(className), classfileBuffer, loader, classBeingRedefined,
+				protectionDomain, classBeingRedefined != null ? null : new InspectionClassLoader(loader));
 	}
 
 	private byte[] doTransforms(
 		List<TransformDescriptor> transformDataList, byte[] classfileBuffer, ClassLoader definingClassLoader,
-		Class<?> classBeingRedefined, ProtectionDomain protectionDomain) {
+			Class<?> classBeingRedefined, ProtectionDomain protectionDomain,
+			InspectionClassLoader inspectionClassLoader) {
 		for (TransformDescriptor td : transformDataList) {
 			if (td.isPendingTransforms()) {
 				// FIXME: Optimization, should do all transforms to one class in one go, instead of creating one class writer per transform.
-				classfileBuffer = doTransform(td, classfileBuffer, definingClassLoader, classBeingRedefined, protectionDomain);
+				classfileBuffer = doTransform(td, classfileBuffer, definingClassLoader, classBeingRedefined,
+						protectionDomain, inspectionClassLoader);
 				td.setPendingTransforms(false);
 			}
 		}
 		return classfileBuffer;
 	}
 
 	private byte[] doTransform(
 		TransformDescriptor td, byte[] classfileBuffer, ClassLoader definingClassLoader, Class<?> classBeingRedefined,
-		ProtectionDomain protectionDomain) {
-		return doJFRLogging((JFRTransformDescriptor) td, classfileBuffer, definingClassLoader, classBeingRedefined, protectionDomain);
+			ProtectionDomain protectionDomain, InspectionClassLoader inspectionClassLoader) {
+		return doJFRLogging((JFRTransformDescriptor) td, classfileBuffer, definingClassLoader, classBeingRedefined,
+				protectionDomain, inspectionClassLoader);
 	}
 
 	private byte[] doJFRLogging(
 		JFRTransformDescriptor td, byte[] classfileBuffer, ClassLoader definingClassLoader, Class<?> classBeingRedefined,
-		ProtectionDomain protectionDomain) {
+			ProtectionDomain protectionDomain, InspectionClassLoader inspectionClassLoader) {
 		if (VersionResolver.getAvailableJFRVersion() == JFRVersion.NONE) {
 			Logger.getLogger(getClass().getName()).log(Level.SEVERE,
 					"Could not find JFR classes. Failed to instrument " + td.getMethod().toString()); //$NON-NLS-1$
 			return classfileBuffer;
 		}
 		try {
 			ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS);
-			ClassVisitor visitor = VersionResolver.getAvailableJFRVersion() == JFRVersion.JFRNEXT
-					? new JFRNextClassVisitor(classWriter, td, definingClassLoader, classBeingRedefined, protectionDomain)
-					: new JFRClassVisitor(classWriter, td, definingClassLoader, classBeingRedefined, protectionDomain); 
+			ClassVisitor visitor = VersionResolver.getAvailableJFRVersion() == JFRVersion.JFRNEXT ?
+					new JFRNextClassVisitor(classWriter, td, definingClassLoader, classBeingRedefined, protectionDomain,
+							inspectionClassLoader) :
+					new JFRClassVisitor(classWriter, td, definingClassLoader, classBeingRedefined, protectionDomain,
+							inspectionClassLoader); 
 			ClassReader reader = new ClassReader(classfileBuffer);
 			reader.accept(visitor, 0);
 			return classWriter.toByteArray();
 		} catch (Throwable t) {
 			Logger.getLogger(getClass().getName()).log(Level.SEVERE,
diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRClassVisitor.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRClassVisitor.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRClassVisitor.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRClassVisitor.java
@@ -39,33 +39,43 @@
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 import org.openjdk.jmc.agent.Agent;
 import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;
+import org.openjdk.jmc.agent.util.InspectionClassLoader;
 import org.openjdk.jmc.agent.util.TypeUtils;
 
 public class JFRClassVisitor extends ClassVisitor implements Opcodes {
 	private final JFRTransformDescriptor transformDescriptor;
 	private final ClassLoader definingClassLoader;
-	private final Class<?> classBeingRedefined;
+	private final Class<?> inspectionClass;
 	private final ProtectionDomain protectionDomain;
 
-	public JFRClassVisitor(ClassWriter cv, JFRTransformDescriptor descriptor, ClassLoader definingLoader, 
-			Class<?> classBeingRedefined, ProtectionDomain protectionDomain) {
+	public JFRClassVisitor(ClassWriter cv, JFRTransformDescriptor descriptor, ClassLoader definingLoader,
+			Class<?> classBeingRedefined, ProtectionDomain protectionDomain,
+			InspectionClassLoader inspectionClassLoader) {
 		super(Opcodes.ASM5, cv);
 		this.transformDescriptor = descriptor;
 		this.definingClassLoader = definingLoader;
-		this.classBeingRedefined = classBeingRedefined;
 		this.protectionDomain = protectionDomain;
+
+		try {
+			this.inspectionClass =
+					classBeingRedefined != null || descriptor.getFields().isEmpty() ? classBeingRedefined :
+							inspectionClassLoader
+									.loadClass(TypeUtils.getCanonicalName(transformDescriptor.getClassName()));
+		} catch (ClassNotFoundException e) {
+			throw new IllegalStateException(e); // This should not happen
+		}
 	}
 
 	@Override
 	public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
 		MethodVisitor mv = super.visitMethod(access, name, desc, signature, exceptions);
 		if (name.equals(transformDescriptor.getMethod().getName())
 				&& desc.equals(transformDescriptor.getMethod().getSignature())) {
-			return new JFRMethodAdvisor(transformDescriptor, classBeingRedefined, Opcodes.ASM5, mv, access, name, desc);
+			return new JFRMethodAdvisor(transformDescriptor, inspectionClass, Opcodes.ASM5, mv, access, name, desc);
 		}
 		return mv;
 	}
 
 	@Override
@@ -79,11 +89,11 @@
 		}
 		super.visitEnd();
 	}
 
 	private Class<?> generateEventClass() throws Exception {
-		byte[] eventClass = JFREventClassGenerator.generateEventClass(transformDescriptor, classBeingRedefined);
+		byte[] eventClass = JFREventClassGenerator.generateEventClass(transformDescriptor, inspectionClass);
 		return TypeUtils.defineClass(transformDescriptor.getEventClassName(), eventClass, 0, eventClass.length,
 				definingClassLoader, protectionDomain);
 	}
 
 }
diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java
@@ -56,26 +56,26 @@
  */
 public class JFRMethodAdvisor extends AdviceAdapter {
 	private static final String THROWABLE_BINARY_NAME = "java/lang/Throwable"; //$NON-NLS-1$
 
 	private final JFRTransformDescriptor transformDescriptor;
-	private final Class<?> classBeingRedefined;
+	private final Class<?> inspectionClass;
 	private final Type[] argumentTypesRef;
 	private final Type returnTypeRef;
 	private final Type eventType;
 	private int eventLocal = -1;
 
 	private Label tryBegin = new Label();
 	private Label tryEnd = new Label();
 
 	private boolean shouldInstrumentThrow;
 
-	protected JFRMethodAdvisor(JFRTransformDescriptor transformDescriptor, Class<?> classBeingRedefined, int api, MethodVisitor mv, int access,
-			String name, String desc) {
+	protected JFRMethodAdvisor(JFRTransformDescriptor transformDescriptor, Class<?> inspectionClass, int api, 
+			MethodVisitor mv, int access, String name, String desc) {
 		super(api, mv, access, name, desc);
 		this.transformDescriptor = transformDescriptor;
-		this.classBeingRedefined = classBeingRedefined;
+		this.inspectionClass = inspectionClass;
 		// These are not accessible from the super type (made private), so must save an extra reference. :/
 		this.argumentTypesRef = Type.getArgumentTypes(desc);
 		this.returnTypeRef = Type.getReturnType(desc);
 		this.eventType = Type.getObjectType(transformDescriptor.getEventClassName());
 
@@ -129,11 +129,11 @@
 				writeAttribute(param, argumentType);
 			}
 		}
 
 		for (Field field : transformDescriptor.getFields()) {
-			ReferenceChain refChain = field.resolveReferenceChain(classBeingRedefined).normalize();
+			ReferenceChain refChain = field.resolveReferenceChain(inspectionClass).normalize();
 
 			if (!refChain.isStatic() && Modifier.isStatic(getAccess())) {
 				throw new IllegalSyntaxException("Illegal non-static reference from a static context: " + field.getExpression());
 			}
 
@@ -154,11 +154,11 @@
 		boolean isStatic = Modifier.isStatic(getAccess());
 		Label nullCase = new Label();
 		Label continueCase = new Label();
 		List<Object> localVarVerifications = new ArrayList<>();
 		if (!isStatic) {
-			localVarVerifications.add(Type.getInternalName(classBeingRedefined)); // "this"
+			localVarVerifications.add(Type.getInternalName(inspectionClass)); // "this"
 		}
 		for (Type argType : argumentTypesRef) {
 			localVarVerifications.add(TypeUtils.getFrameVerificationType(argType));
 		}
 
diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfrnext/impl/JFRNextClassVisitor.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfrnext/impl/JFRNextClassVisitor.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfrnext/impl/JFRNextClassVisitor.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfrnext/impl/JFRNextClassVisitor.java
@@ -40,33 +40,43 @@
 import org.objectweb.asm.ClassVisitor;
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;
+import org.openjdk.jmc.agent.util.InspectionClassLoader;
 import org.openjdk.jmc.agent.util.TypeUtils;
 
 public class JFRNextClassVisitor extends ClassVisitor {
 	private final JFRTransformDescriptor transformDescriptor;
 	private final ClassLoader definingClassLoader;
-	private final Class<?> classBeingRedefined;
+	private final Class<?> inspectionClass;
 	private final ProtectionDomain protectionDomain;
 
 	public JFRNextClassVisitor(ClassWriter cv, JFRTransformDescriptor descriptor, ClassLoader definingLoader,
-			Class<?> classBeingRedefined, ProtectionDomain protectionDomain) {
+			Class<?> classBeingRedefined, ProtectionDomain protectionDomain,
+			InspectionClassLoader inspectionClassLoader) {
 		super(Opcodes.ASM5, cv);
 		this.transformDescriptor = descriptor;
 		this.definingClassLoader = definingLoader;
-		this.classBeingRedefined = classBeingRedefined;
 		this.protectionDomain = protectionDomain;
+
+		try {
+			this.inspectionClass =
+					classBeingRedefined != null || descriptor.getFields().isEmpty() ? classBeingRedefined :
+							inspectionClassLoader
+									.loadClass(TypeUtils.getCanonicalName(transformDescriptor.getClassName()));
+		} catch (ClassNotFoundException e) {
+			throw new IllegalStateException(e); // This should not happen
+		}
 	}
 
 	@Override
 	public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
 		MethodVisitor mv = super.visitMethod(access, name, desc, signature, exceptions);
 		if (name.equals(transformDescriptor.getMethod().getName())
 				&& desc.equals(transformDescriptor.getMethod().getSignature())) {
-			return new JFRNextMethodAdvisor(transformDescriptor, classBeingRedefined, Opcodes.ASM5, mv, access, name, desc);
+			return new JFRNextMethodAdvisor(transformDescriptor, inspectionClass, Opcodes.ASM5, mv, access, name, desc);
 		}
 		return mv;
 	}
 
 	@Override
@@ -89,11 +99,11 @@
 
 	private Class<?> generateEventClass() throws Exception {
 		try {
 			return Class.forName(TypeUtils.getCanonicalName(transformDescriptor.getEventClassName()));
 		} catch (ClassNotFoundException e) {
-			byte[] eventClass = JFRNextEventClassGenerator.generateEventClass(transformDescriptor, classBeingRedefined);
+			byte[] eventClass = JFRNextEventClassGenerator.generateEventClass(transformDescriptor, inspectionClass);
 			return TypeUtils.defineClass(transformDescriptor.getEventClassName(), eventClass, 0, eventClass.length,
 					definingClassLoader, protectionDomain);
 		}
 	}
 }
diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfrnext/impl/JFRNextMethodAdvisor.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfrnext/impl/JFRNextMethodAdvisor.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfrnext/impl/JFRNextMethodAdvisor.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfrnext/impl/JFRNextMethodAdvisor.java
@@ -56,26 +56,26 @@
  */
 public class JFRNextMethodAdvisor extends AdviceAdapter {
 	private static final String THROWABLE_BINARY_NAME = "java/lang/Throwable"; //$NON-NLS-1$
 
 	private final JFRTransformDescriptor transformDescriptor;
-	private final Class<?> classBeingRedefined;
+	private final Class<?> inspectionClass;
 	private final Type[] argumentTypesRef;
 	private final Type returnTypeRef;
 	private final Type eventType;
 	private int eventLocal = -1;
 
 	private Label tryBegin = new Label();
 	private Label tryEnd = new Label();
 
 	private boolean shouldInstrumentThrow;
 
-	protected JFRNextMethodAdvisor(JFRTransformDescriptor transformDescriptor, Class<?> classBeingRedefined, int api, MethodVisitor mv, int access,
-								   String name, String desc) {
+	protected JFRNextMethodAdvisor(JFRTransformDescriptor transformDescriptor, Class<?> inspectionClass, int api, 
+			MethodVisitor mv, int access, String name, String desc) {
 		super(api, mv, access, name, desc);
 		this.transformDescriptor = transformDescriptor;
-		this.classBeingRedefined = classBeingRedefined;
+		this.inspectionClass = inspectionClass;
 		// These are not accessible from the super type (made private), so must save an extra reference. :/
 		this.argumentTypesRef = Type.getArgumentTypes(desc);
 		this.returnTypeRef = Type.getReturnType(desc);
 		this.eventType = Type.getObjectType(transformDescriptor.getEventClassName());
 
@@ -129,11 +129,11 @@
 				writeAttribute(param, argumentType);
 			}
 		}
 
 		for (Field field : transformDescriptor.getFields()) {
-			ReferenceChain refChain = field.resolveReferenceChain(classBeingRedefined).normalize();
+			ReferenceChain refChain = field.resolveReferenceChain(inspectionClass).normalize();
 
 			if (!refChain.isStatic() && Modifier.isStatic(getAccess())) {
 				throw new IllegalSyntaxException("Illegal non-static reference from a static context: " + field.getExpression());
 			}
 
@@ -154,11 +154,11 @@
 		boolean isStatic = Modifier.isStatic(getAccess());
 		Label nullCase = new Label();
 		Label continueCase = new Label();
 		List<Object> localVarVerifications = new ArrayList<>();
 		if (!isStatic) {
-			localVarVerifications.add(Type.getInternalName(classBeingRedefined)); // "this"
+			localVarVerifications.add(Type.getInternalName(inspectionClass)); // "this"
 		}
 		for (Type argType : argumentTypesRef) {
 			localVarVerifications.add(TypeUtils.getFrameVerificationType(argType));
 		}
 
