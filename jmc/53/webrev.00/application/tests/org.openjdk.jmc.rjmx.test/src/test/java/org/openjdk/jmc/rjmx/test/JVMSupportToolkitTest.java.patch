diff a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/JVMSupportToolkitTest.java b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/JVMSupportToolkitTest.java
--- a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/JVMSupportToolkitTest.java
+++ b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/JVMSupportToolkitTest.java
@@ -45,12 +45,14 @@
 import org.openjdk.jmc.ui.common.jvm.JVMDescriptor;
 import org.openjdk.jmc.ui.common.jvm.JVMType;
 
 @SuppressWarnings("nls")
 public class JVMSupportToolkitTest {
-	private static final String VENDOR_OPEN_JDK = "OpenJDK";
-	private static final String VENDOR_ORACLE = "Oracle";
+	private static final String NAME_OPEN_JDK = "OpenJDK 64-Bit Server VM";
+	private static final String NAME_ORACLE = "Java HotSpot(TM) 64-Bit Server VM";
+	private static final String VENDOR_OPEN_JDK = "Oracle Corporation";
+	private static final String VENDOR_ORACLE = "Oracle Corporation";
 	// FIXME: Add tests for the methods that take IConnectionHandle as a parameter.
 
 	private static final String SUPPORTED_MESSAGE = null;
 
 	@Test
@@ -63,99 +65,100 @@
 
 	@Test
 	public void testJfr17U40HotSpotSupported() {
 		ServerHandle server = new ServerHandle(
 				new ServerDescriptor(null, null,
-						new JVMDescriptor("1.7.0_40", JVMType.HOTSPOT, JVMArch.UNKNOWN, VENDOR_ORACLE, null, null, null,
-								false, null)),
+						new JVMDescriptor("1.7.0_40", JVMType.HOTSPOT, JVMArch.UNKNOWN, null, null, NAME_ORACLE,
+								VENDOR_ORACLE, null, false, null)),
 				new ConnectionDescriptorBuilder().hostName("localhost").port(0).build(), null);
 		String errorMessage = JVMSupportToolkit.checkFlightRecorderSupport(server, false);
 		assertEquals(SUPPORTED_MESSAGE, errorMessage);
 	}
 
 	@Test
 	public void testJfr17U4HotSpotNotFullySupported() {
 		ServerHandle server = new ServerHandle(
 				new ServerDescriptor(null, null,
-						new JVMDescriptor("1.7.0_04", JVMType.HOTSPOT, JVMArch.UNKNOWN, VENDOR_ORACLE, null, null, null,
-								false, null)),
+						new JVMDescriptor("1.7.0_04", JVMType.HOTSPOT, JVMArch.UNKNOWN, null, null, NAME_ORACLE,
+								VENDOR_ORACLE, null, false, null)),
 				new ConnectionDescriptorBuilder().hostName("localhost").port(0).build(), null);
 		String errorMessage = JVMSupportToolkit.checkFlightRecorderSupport(server, false);
 		assertEquals(Messages.JVMSupport_FLIGHT_RECORDER_NOT_FULLY_SUPPORTED_OLD_HOTSPOT, errorMessage);
 	}
 
 	@Test
 	public void testJfr17HotSpotNotSupported() {
 		ServerHandle server = new ServerHandle(
 				new ServerDescriptor(null, null,
-						new JVMDescriptor("1.7.0", JVMType.HOTSPOT, JVMArch.UNKNOWN, VENDOR_ORACLE, null, null, null,
-								false, null)),
+						new JVMDescriptor("1.7.0", JVMType.HOTSPOT, JVMArch.UNKNOWN, null, null, NAME_ORACLE,
+								VENDOR_ORACLE, null, false, null)),
 				new ConnectionDescriptorBuilder().hostName("localhost").port(0).build(), null);
 		String errorMessage = JVMSupportToolkit.checkFlightRecorderSupport(server, false);
 		assertEquals(Messages.JVMSupport_FLIGHT_RECORDER_NOT_SUPPORTED_OLD_HOTSPOT, errorMessage);
 	}
 
 	@Test
 	public void testJfrJRockitNotSupported() {
 		ServerHandle server = new ServerHandle(
 				new ServerDescriptor(null, null,
-						new JVMDescriptor("1.6", JVMType.JROCKIT, JVMArch.UNKNOWN, VENDOR_ORACLE, null, null, null,
-								false, null)),
+						new JVMDescriptor("1.6", JVMType.JROCKIT, JVMArch.UNKNOWN, null, null, NAME_ORACLE,
+								VENDOR_ORACLE, null, false, null)),
 				new ConnectionDescriptorBuilder().hostName("localhost").port(0).build(), null);
 		String errorMessage = JVMSupportToolkit.checkFlightRecorderSupport(server, false);
 		assertEquals(Messages.JVMSupport_JROCKIT_NO_LONGER_SUPPORTED, errorMessage);
 	}
 
 	@Test
 	public void testJfrOldHotSpotNotSupported() {
 		ServerHandle server = new ServerHandle(
 				new ServerDescriptor(null, null,
-						new JVMDescriptor("1.6", JVMType.HOTSPOT, JVMArch.UNKNOWN, VENDOR_ORACLE, null, null, null,
-								false, null)),
+						new JVMDescriptor("1.6", JVMType.HOTSPOT, JVMArch.UNKNOWN, null, null, NAME_ORACLE,
+								VENDOR_ORACLE, null, false, null)),
 				new ConnectionDescriptorBuilder().hostName("localhost").port(0).build(), null);
 		String errorMessage = JVMSupportToolkit.checkFlightRecorderSupport(server, false);
 		assertEquals(Messages.JVMSupport_FLIGHT_RECORDER_NOT_SUPPORTED_OLD_HOTSPOT, errorMessage);
 	}
 
 	@Test
 	public void testJfrNonHotSpotNotSupported() {
 		ServerHandle server = new ServerHandle(
-				new ServerDescriptor(null, null, new JVMDescriptor("1.7", JVMType.OTHER, JVMArch.UNKNOWN, VENDOR_ORACLE,
-						null, null, null, false, null)),
+				new ServerDescriptor(null, null,
+						new JVMDescriptor("1.7", JVMType.OTHER, JVMArch.UNKNOWN, null, null, NAME_ORACLE, VENDOR_ORACLE,
+								null, false, null)),
 				new ConnectionDescriptorBuilder().hostName("localhost").port(0).build(), null);
 		String errorMessage = JVMSupportToolkit.checkFlightRecorderSupport(server, false);
 		assertEquals(Messages.JVMSupport_FLIGHT_RECORDER_NOT_SUPPORTED_NOT_HOTSPOT, errorMessage);
 	}
 
 	@Test
 	public void testJfrUnknownNoWarning() {
 		ServerHandle server = new ServerHandle(
 				new ServerDescriptor(null, null,
-						new JVMDescriptor("1.7", JVMType.UNKNOWN, JVMArch.UNKNOWN, VENDOR_ORACLE, null, null, null,
-								false, null)),
+						new JVMDescriptor("1.7", JVMType.UNKNOWN, JVMArch.UNKNOWN, null, null, NAME_ORACLE,
+								VENDOR_ORACLE, null, false, null)),
 				new ConnectionDescriptorBuilder().hostName("localhost").port(0).build(), null);
 		String errorMessage = JVMSupportToolkit.checkFlightRecorderSupport(server, false);
 		assertEquals(SUPPORTED_MESSAGE, errorMessage);
 	}
 
 	@Test
 	public void testJfr8HotSpotOpenJDKSupported() {
 		ServerHandle server = new ServerHandle(
 				new ServerDescriptor(null, null,
-						new JVMDescriptor("1.8.0", JVMType.HOTSPOT, JVMArch.UNKNOWN, VENDOR_OPEN_JDK, null, null, null,
-								false, null)),
+						new JVMDescriptor("1.8.0", JVMType.HOTSPOT, JVMArch.UNKNOWN, null, null, NAME_OPEN_JDK,
+								VENDOR_OPEN_JDK, null, false, null)),
 				new ConnectionDescriptorBuilder().hostName("localhost").port(0).build(), null);
 		String errorMessage = JVMSupportToolkit.checkFlightRecorderSupport(server, false);
 		assertEquals(SUPPORTED_MESSAGE, errorMessage);
 	}
 
 	@Test
 	public void testJdk7HotSpotOpenJDKNotSupported() {
 		ServerHandle server = new ServerHandle(
 				new ServerDescriptor(null, null,
-						new JVMDescriptor("1.7.0", JVMType.HOTSPOT, JVMArch.UNKNOWN, VENDOR_OPEN_JDK, null, null, null,
-								false, null)),
+						new JVMDescriptor("1.7.0", JVMType.HOTSPOT, JVMArch.UNKNOWN, null, null, NAME_OPEN_JDK,
+								VENDOR_OPEN_JDK, null, false, null)),
 				new ConnectionDescriptorBuilder().hostName("localhost").port(0).build(), null);
 		String errorMessage = JVMSupportToolkit.checkFlightRecorderSupport(server, false);
 		assertNotNull(errorMessage);
 	}
 }
