diff a/application/org.openjdk.jmc.browser.attach/src/main/java/org/openjdk/jmc/browser/attach/LocalJVMToolkit.java b/application/org.openjdk.jmc.browser.attach/src/main/java/org/openjdk/jmc/browser/attach/LocalJVMToolkit.java
--- a/application/org.openjdk.jmc.browser.attach/src/main/java/org/openjdk/jmc/browser/attach/LocalJVMToolkit.java
+++ b/application/org.openjdk.jmc.browser.attach/src/main/java/org/openjdk/jmc/browser/attach/LocalJVMToolkit.java
@@ -197,10 +197,11 @@
 					JVMArch jvmArch = JVMArch.OTHER;
 					boolean isDebug = false;
 					String address = null;
 					String version = null;
 					String jvmArgs = null;
+					String jvmName = null;
 					String jvmVendor = null;
 
 					try {
 						// This used to leak one \BaseNamedObjects\hsperfdata_* Section handle on Windows
 						MonitoredVm mvm = host.getMonitoredVm(new VmIdentifier(name));
@@ -208,10 +209,11 @@
 							// use the command line as the display name
 							name = MonitoredVmUtil.commandLine(mvm);
 							jvmArgs = MonitoredVmUtil.jvmArgs(mvm);
 							StringMonitor sm = (StringMonitor) mvm.findByName("java.property.java.vm.name"); //$NON-NLS-1$
 							if (sm != null) {
+								jvmName = sm.stringValue();
 								type = getJVMType(sm.stringValue());
 							}
 
 							sm = (StringMonitor) mvm.findByName("java.property.java.version"); //$NON-NLS-1$
 							if (sm != null) {
@@ -266,12 +268,12 @@
 							mvm.detach();
 						}
 					} catch (Exception x) {
 						// ignore
 					}
-					connDesc = createDescriptor(name, jvmArgs, jvmVendor, vmid, connectable, type, jvmArch, address,
-							version, isDebug);
+					connDesc = createDescriptor(name, jvmArgs, jvmName, jvmVendor, vmid, connectable, type, jvmArch,
+							address, version, isDebug);
 					return connDesc;
 				}
 			});
 			return future.get(TIMEOUT_THRESHOLD, TimeUnit.SECONDS);
 		} catch (Exception e) {
@@ -367,10 +369,11 @@
 					String address = null;
 					String version = null;
 					String javaArgs = null;
 					String jvmArgs = null;
 					String jvmVersion = null;
+					String jvmName = null;
 					String jvmVendor = null;
 					VirtualMachine vm = null;
 					try {
 						// Attach creates one process handle on Windows.
 						// This leaks one thread handle due to Sun bug in j2se/src/windows/native/sun/tools/attach/WindowsVirtualMachine.c
@@ -384,12 +387,12 @@
 							BrowserAttachPlugin.getPluginLogger().log(Level.FINER,
 									"Got the following exception message when getting system properties from vm with PID " //$NON-NLS-1$
 											+ vmd + ": " + e.getMessage()); //$NON-NLS-1$
 						}
 						if (props != null) {
-							String vmName = props.getProperty("java.vm.name"); //$NON-NLS-1$
-							jvmType = getJVMType(vmName);
+							jvmName = props.getProperty("java.vm.name"); //$NON-NLS-1$
+							jvmType = getJVMType(jvmName);
 							version = props.getProperty("java.version"); //$NON-NLS-1$
 							jvmVersion = props.getProperty("java.vm.version"); //$NON-NLS-1$
 							jvmVendor = props.getProperty("java.vm.vendor");
 							isDebug = isDebug(jvmVersion);
 							jvmArch = JVMArch.getJVMArch(props);
@@ -406,11 +409,11 @@
 						if (vm != null) {
 							vm.detach();
 						}
 					}
 					if (connectable.isAttachable()) {
-						connDesc = createDescriptor(javaArgs, jvmArgs, jvmVendor, Integer.parseInt(vmd.id()),
+						connDesc = createDescriptor(javaArgs, jvmArgs, jvmName, jvmVendor, Integer.parseInt(vmd.id()),
 								connectable, jvmType, jvmArch, address, version, isDebug);
 					}
 					BrowserAttachPlugin.getPluginLogger().info("Done resolving PID " + vmd); //$NON-NLS-1$
 					return connDesc;
 				}
@@ -471,14 +474,14 @@
 	private static boolean isValidDisplayName(String displayName) {
 		return displayName != null && !displayName.equals("") && !displayName.equals("Unknown"); //$NON-NLS-1$ //$NON-NLS-2$
 	}
 
 	private static DiscoveryEntry createDescriptor(
-		String javaCommand, String jvmArgs, String jvmVendor, int pid, Connectable connectable, JVMType type,
-		JVMArch arch, String address, String version, boolean isDebug) {
-		JVMDescriptor jvmInfo = new JVMDescriptor(version, type, arch, javaCommand, jvmArgs, jvmVendor, pid, isDebug,
-				connectable);
+		String javaCommand, String jvmArgs, String jvmName, String jvmVendor, int pid, Connectable connectable,
+		JVMType type, JVMArch arch, String address, String version, boolean isDebug) {
+		JVMDescriptor jvmInfo = new JVMDescriptor(version, type, arch, javaCommand, jvmArgs, jvmName, jvmVendor, pid,
+				isDebug, connectable);
 		LocalConnectionDescriptor lcd = new LocalConnectionDescriptor(pid, address, connectable == ATTACHABLE);
 		String guid = "Local-[PID:" + pid + ", seq:" + (SEQ_NUMBER++) + "]"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 		IServerDescriptor sd = IServerDescriptor.create(guid, null, jvmInfo);
 		return new DiscoveryEntry(sd, lcd);
 	}
