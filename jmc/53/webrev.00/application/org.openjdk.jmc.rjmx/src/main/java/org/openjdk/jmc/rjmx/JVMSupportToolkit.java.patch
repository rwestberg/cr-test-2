diff a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/JVMSupportToolkit.java b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/JVMSupportToolkit.java
--- a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/JVMSupportToolkit.java
+++ b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/JVMSupportToolkit.java
@@ -82,10 +82,31 @@
 			return returnInfo;
 		}
 		return new String[0];
 	}
 
+	/**
+	 * Checks if Flight Recorder is available for use
+	 * 
+	 * @param connection
+	 * @return If it is an Oracle JVM or there is a FlightRecorder VM option, then return true.
+	 *         Otherwise, return false. This is used for verifying JDK 8 JVMs that are not built
+	 *         with JFR enabled, e.g., OpenJDK 8
+	 */
+	public static boolean hasFlightRecorder(IConnectionHandle connection) {
+		if (ConnectionToolkit.isOracle(connection)) {
+			return true;
+		}
+		MBeanServerConnection server = connection.getServiceOrNull(MBeanServerConnection.class);
+		try {
+			HotspotManagementToolkit.getVMOption(server, "FlightRecorder");
+			return true;
+		} catch (Exception e) { // RuntimeMBeanException thrown if FlightRecorder is not present
+			return false;
+		}
+	}
+
 	/**
 	 * Checks if Flight Recorder is disabled.
 	 *
 	 * @param connection
 	 *            the connection to check
