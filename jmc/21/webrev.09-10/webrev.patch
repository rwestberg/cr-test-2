diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemHistogram.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemHistogram.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemHistogram.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemHistogram.java
@@ -134,20 +134,23 @@
 			addPercentageColumn(colId, a, a.getName(), a.getDescription());
 		}
 
 		public void addPercentageColumn(String colId, IAggregator<?, ?> a, String name, String description) {
 			int style = a.getValueType() instanceof LinearKindOfQuantity ? SWT.RIGHT : SWT.NONE;
-			addPercentageColumn(colId, (rowItems, allItems) -> {
+
+			BiFunction<IItemCollection, IItemCollection, ?> percentageFunction = (rowItems, allItems) -> {
 				if (a.getValueType() instanceof LinearKindOfQuantity) {
 					IQuantity rowResult = (IQuantity) rowItems.getAggregate(a);
 					IQuantity allResult = (IQuantity) allItems.getAggregate(a);
 					if (rowResult != null && allResult != null) {
 						return UnitLookup.PERCENT.quantity(rowResult.ratioTo(allResult) * 100);
 					}
 				}
 				return rowItems.getAggregate(a);
-			}, name, description, style);
+			};
+
+			addPercentageColumn(colId, percentageFunction, name, description, style);
 		}
 
 		public void addColumn(
 			String colId, Function<IItemCollection, ?> valueFunction, String name, String description) {
 			addColumn(colId, valueFunction, name, description, SWT.NONE);
@@ -161,21 +164,22 @@
 
 		public void addPercentageColumn(
 			String colId, BiFunction<IItemCollection, IItemCollection, ?> valueFunction, String name,
 			String description, int style) {
 			IMemberAccessor<?, Object> column = grid.addPercentageColumn(valueFunction);
+			BackgroundFractionDrawer percentageValueDrawer = new BackgroundFractionDrawer() {
+				@Override
+				public void handleEvent(Event event) {
+					Object row = event.item.getData();
+					Object item = column.getMember(row);
+					if (item instanceof Number) {
+						draw(((Number) item).doubleValue() / 100, event);
+					}
+				}
+			};
 			columns.add(new ColumnBuilder(name, colId, column).description(description).style(style)
-					.columnDrawer(new BackgroundFractionDrawer() {
-						@Override
-						public void handleEvent(Event event) {
-							Object row = event.item.getData();
-							Object item = column.getMember(row);
-							if (item instanceof Number) {
-								draw(((Number) item).doubleValue() / 100, event);
-							}
-						}
-					}).build());
+					.columnDrawer(percentageValueDrawer).build());
 		}
 
 		public <T> void addColumn(IAttribute<T> a) {
 			// FIXME: Refactor/remove this method to avoid it being used instead of passing an IAggregator.
 			// Accessing the thread-group is quite a special case as it is a property of the key (group by attribute).
