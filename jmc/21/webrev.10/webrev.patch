diff a/application/l10n/org.openjdk.jmc.flightrecorder.ui.ja/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages_ja.properties b/application/l10n/org.openjdk.jmc.flightrecorder.ui.ja/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages_ja.properties
--- a/application/l10n/org.openjdk.jmc.flightrecorder.ui.ja/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages_ja.properties
+++ b/application/l10n/org.openjdk.jmc.flightrecorder.ui.ja/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages_ja.properties
@@ -1,7 +1,7 @@
 #
-#  Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+#  Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
 #
 #  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 #
 #  The contents of this file are subject to the terms of either the Universal Permissive License 
 #  v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -307,10 +307,12 @@
 HeapPage_ROW_MEMORY_USAGE=\u30E1\u30E2\u30EA\u30FC\u4F7F\u7528\u72B6\u6CC1
 HeapPage_ROW_MEMORY_USAGE_DESC=\u3053\u306E\u30EC\u30FC\u30F3\u306B\u306F\u3001\u30DE\u30B7\u30F3\u306E\u30D2\u30FC\u30D7\u304A\u3088\u3073\u7269\u7406\u30E1\u30E2\u30EA\u30FC\u306B\u95A2\u3059\u308B\u69D8\u3005\u306A\u30E1\u30E2\u30EA\u30FC\u4F7F\u7528\u7387\u7D71\u8A08\u3092\u8868\u793A\u3067\u304D\u307E\u3059\u3002\u8272\u30DE\u30C3\u30D4\u30F3\u30B0\u304C\u51E1\u4F8B\u306B\u8868\u793A\u3055\u308C\u3001\u7279\u5B9A\u306E\u60C5\u5831\u3092\u6709\u52B9\u5316\u3059\u308B\u304B\u3069\u3046\u304B\u3092\u305D\u3053\u3067\u5236\u5FA1\u3067\u304D\u307E\u3059\u3002
 HeapPage_SELECTED_CLASS=1\u30AF\u30E9\u30B9
 # {0} is a number
 HeapPage_SELECTED_CLASSES={0}\u30AF\u30E9\u30B9
+HeapPage_ALLOCATION_TOTAL_PERCENTAGE=\u5272\u5F53\u3066\u5408\u8A08(%)
+HeapPage_ALLOCATION_TOTAL_PERCENTAGE_DESC=\u5272\u5F53\u3066\u5408\u8A08\u306E\u898B\u7A4D\u308A\u3002\u3053\u308C\u306F\u6B63\u78BA\u306A\u5024\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3002(\u30D1\u30FC\u30BB\u30F3\u30C6\u30FC\u30B8)
 
 INFORMATION_COMPONENT_NOT_AVAILABLE=N/A
 
 N_A=N/A
 NAVIGATOR_MOVE_FORWARD_TEXT=\u9032\u3080
@@ -482,15 +484,21 @@
 ThreadDumpsPage_PAGE_NAME=\u30B9\u30EC\u30C3\u30C9\u30FB\u30C0\u30F3\u30D7
 ThreadsPage_EDIT_LANES=\u30B9\u30EC\u30C3\u30C9\u30FB\u30EC\u30FC\u30F3\u306E\u7DE8\u96C6
 ThreadsPage_NAME=\u30B9\u30EC\u30C3\u30C9
 
 TlabPage_PAGE_NAME=TLAB\u5272\u5F53\u3066
+TlabPage_THREADS_TAB_NAME=\u30B9\u30EC\u30C3\u30C9
+TlabPage_METHODS_TAB_NAME=\u30E1\u30BD\u30C3\u30C9
 TlabPage_ROW_TLAB_ALLOCATIONS=TLAB\u5272\u5F53\u3066
 TlabPage_ROW_TLAB_ALLOCATIONS_DESC=\u5272\u5F53\u3066\u30B5\u30F3\u30D7\u30EB\u304B\u3089\u751F\u6210\u3055\u308C\u305F\u30C7\u30FC\u30BF\u3002\u30B5\u30F3\u30D7\u30EB\u306F\u3001\u65B0\u3057\u3044\u30B9\u30EC\u30C3\u30C9\u30FB\u30ED\u30FC\u30AB\u30EB\u5272\u5F53\u3066\u30D0\u30C3\u30D5\u30A1(TLAB)\u3092\u53D6\u5F97\u3059\u308B\u3068\u304D\u3001\u307E\u305F\u306F\u30B9\u30EC\u30C3\u30C9\u30FB\u30ED\u30FC\u30AB\u30EB\u5272\u5F53\u3066\u30D0\u30C3\u30D5\u30A1\u306E\u5916\u90E8\u3067\u5272\u308A\u5F53\u3066\u308B\u3068\u304D\u306B\u53CE\u96C6\u3055\u308C\u307E\u3059\u3002
-TlabPage_SELECTED_THREAD=1\u30B9\u30EC\u30C3\u30C9
+TlabPage_SELECTED_THREAD=1
 # {0} is a number
-TlabPage_SELECTED_THREADS={0}\u30B9\u30EC\u30C3\u30C9
+TlabPage_SELECTED_THREADS={0}
+TlabPage_INSIDE_TLAB_SUM_PERCENTAGE=TLAB\u5272\u5F53\u3066\u306E\u898B\u7A4D\u308A(%)
+TlabPage_INSIDE_TLAB_SUM_PERCENTAGE_DESC=TLAB\u306E\u898B\u7A4D\u308A\u5272\u5F53\u3066\u30B5\u30A4\u30BA(\u30D1\u30FC\u30BB\u30F3\u30C6\u30FC\u30B8)
+TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE=TLAB\u5916\u306E\u5408\u8A08\u5272\u5F53\u3066(%)
+TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE_DESC=TLAB\u5916\u306E\u5272\u5F53\u3066\u306E\u5408\u8A08\u30B5\u30A4\u30BA(\u30D1\u30FC\u30BB\u30F3\u30C6\u30FC\u30B8)
 
 JVMInformationPage_COLUMN_VALUE=\u5024
 JVMInformationPage_PAGE_NAME=JVM\u5185\u90E8
 JVMInformationPage_SECTION_JVM_FLAGS=JVM\u30D5\u30E9\u30B0
 JVMInformationPage_SECTION_JVM_INFO=JVM\u60C5\u5831
diff a/application/l10n/org.openjdk.jmc.flightrecorder.ui.zh_CN/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages_zh_CN.properties b/application/l10n/org.openjdk.jmc.flightrecorder.ui.zh_CN/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages_zh_CN.properties
--- a/application/l10n/org.openjdk.jmc.flightrecorder.ui.zh_CN/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages_zh_CN.properties
+++ b/application/l10n/org.openjdk.jmc.flightrecorder.ui.zh_CN/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages_zh_CN.properties
@@ -1,7 +1,7 @@
 #
-#  Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+#  Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
 #
 #  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 #
 #  The contents of this file are subject to the terms of either the Universal Permissive License 
 #  v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -307,10 +307,12 @@
 HeapPage_ROW_MEMORY_USAGE=\u5185\u5B58\u4F7F\u7528\u91CF
 HeapPage_ROW_MEMORY_USAGE_DESC=\u6B64\u901A\u9053\u53EF\u4EE5\u663E\u793A\u5806\u7684\u4E0D\u540C\u5185\u5B58\u4F7F\u7528\u60C5\u51B5\u7EDF\u8BA1\u4FE1\u606F\u4EE5\u53CA\u8BA1\u7B97\u673A\u4E0A\u7684\u7269\u7406\u5185\u5B58\u3002\u989C\u8272\u6620\u5C04\u663E\u793A\u5728\u56FE\u4F8B\u4E2D, \u5728\u5176\u4E2D\u53EF\u4EE5\u63A7\u5236\u662F\u5426\u542F\u7528\u7279\u5B9A\u4FE1\u606F\u3002
 HeapPage_SELECTED_CLASS=1 \u4E2A\u7C7B
 # {0} is a number
 HeapPage_SELECTED_CLASSES={0} \u4E2A\u7C7B
+HeapPage_ALLOCATION_TOTAL_PERCENTAGE=\u603B\u5206\u914D\u91CF(%)
+HeapPage_ALLOCATION_TOTAL_PERCENTAGE_DESC=\u4F30\u8BA1\u7684\u603B\u5206\u914D\u91CF\u3002\u8FD9\u5E76\u975E\u786E\u5207\u503C\u3002(\u767E\u5206\u6BD4)
 
 INFORMATION_COMPONENT_NOT_AVAILABLE=N/A
 
 N_A=N/A
 NAVIGATOR_MOVE_FORWARD_TEXT=\u524D\u79FB
@@ -482,15 +484,21 @@
 ThreadDumpsPage_PAGE_NAME=\u7EBF\u7A0B\u8F6C\u50A8
 ThreadsPage_EDIT_LANES=\u7F16\u8F91\u7EBF\u7A0B\u901A\u9053
 ThreadsPage_NAME=\u7EBF\u7A0B
 
 TlabPage_PAGE_NAME=TLAB \u5206\u914D
+TlabPage_THREADS_TAB_NAME=\u7EBF\u7A0B
+TlabPage_METHODS_TAB_NAME=\u65B9\u6CD5
 TlabPage_ROW_TLAB_ALLOCATIONS=TLAB \u5206\u914D
 TlabPage_ROW_TLAB_ALLOCATIONS_DESC=\u4ECE\u5206\u914D\u6837\u672C\u751F\u6210\u7684\u6570\u636E\u3002\u5728\u83B7\u53D6\u65B0\u7684\u7EBF\u7A0B\u672C\u5730\u5206\u914D\u7F13\u51B2\u533A (TLAB) \u6216\u5728\u6B64\u7C7B\u7F13\u51B2\u533A\u4E4B\u5916\u5206\u914D\u65F6\u6536\u96C6\u6837\u672C\u3002
-TlabPage_SELECTED_THREAD=1 \u4E2A\u7EBF\u7A0B
+TlabPage_SELECTED_ONE=1
 # {0} is a number
-TlabPage_SELECTED_THREADS={0} \u4E2A\u7EBF\u7A0B
+TlabPage_SELECTED_MANY={0}
+TlabPage_INSIDE_TLAB_SUM_PERCENTAGE=\u4F30\u8BA1 TLAB \u5206\u914D(%)
+TlabPage_INSIDE_TLAB_SUM_PERCENTAGE_DESC=TLAB \u4E2D\u4F30\u8BA1\u7684\u5206\u914D\u5927\u5C0F(\u767E\u5206\u6BD4)
+TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE=TLAB \u5916\u90E8\u7684\u603B\u5206\u914D(%)
+TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE_DESC=TLAB \u5916\u90E8\u5206\u914D\u7684\u603B\u5927\u5C0F(\u767E\u5206\u6BD4)
 
 JVMInformationPage_COLUMN_VALUE=\u503C
 JVMInformationPage_PAGE_NAME=JVM \u5185\u90E8
 JVMInformationPage_SECTION_JVM_FLAGS=JVM \u6807\u8BB0
 JVMInformationPage_SECTION_JVM_INFO=JVM \u4FE1\u606F
diff a/application/org.openjdk.jmc.flightrecorder.ui/defaultPages.xml b/application/org.openjdk.jmc.flightrecorder.ui/defaultPages.xml
--- a/application/org.openjdk.jmc.flightrecorder.ui/defaultPages.xml
+++ b/application/org.openjdk.jmc.flightrecorder.ui/defaultPages.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!--   
-   Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+   Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
    
    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
    
    The contents of this file are subject to the terms of either the Universal Permissive License 
    v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -758,19 +758,22 @@
 		<page factory="org.openjdk.jmc.flightrecorder.ui.tlab" id="org.openjdk.jmc.flightrecorder.ui.tlaballocations">
 			<state>
 				<sash weights="2,1" />
 				<table sortColumn="totalOutsideSize">
 					<column id="itemhistogram.key" width="500" />
-					<column id="itemhistogram.count" sortAscending="false" width="120" />
 					<column id="insideCount" sortAscending="false" width="120"
 						hidden="true" />
 					<column id="outsideCount" sortAscending="false" width="120"
 						hidden="true" />
-					<column id="averageInsideSize" sortAscending="false" width="120" />
-					<column id="averageOutsideSize" sortAscending="false" width="120" />
+					<column id="averageInsideSize" sortAscending="false" width="120"
+						hidden="true" />
+					<column id="averageOutsideSize" sortAscending="false" width="120"
+						hidden="true" />
 					<column id="totalInsideSize" sortAscending="false" width="120" />
+					<column id="totalInsideSizePercent" sortAscending="false" width="120" />
 					<column id="totalOutsideSize" sortAscending="false" width="120" />
+					<column id="totalOutsideSizePercent" sortAscending="false" width="120" />
 				</table>
 				<chart>
 					<checkedAction id="insideSize" />
 					<checkedAction id="outsideSize" />
 				</chart>
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/AggregationGrid.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/AggregationGrid.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/AggregationGrid.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/AggregationGrid.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -60,15 +60,17 @@
 public class AggregationGrid {
 
 	private static class AggregationModel {
 		final Object[][] cellData;
 		AggregateRow[] aggregateItems;
+		IItemCollection modelItems;
 		int itemsCount;
 
-		AggregationModel(int columnCount, int rowCount) {
-			cellData = new Object[columnCount][];
-			aggregateItems = new AggregateRow[rowCount];
+		AggregationModel(int columnCount, int rowCount, IItemCollection modelItems) {
+			this.cellData = new Object[columnCount][];
+			this.aggregateItems = new AggregateRow[rowCount];
+			this.modelItems = modelItems;
 		}
 
 		void addRow(Object key, List<IItem[]> items, int rowIndex) {
 			AggregateRow ai = new AggregateRow(this, key, items, rowIndex);
 			aggregateItems[rowIndex] = ai;
@@ -84,13 +86,13 @@
 		final AggregationModel model;
 
 		AggregateRow(AggregationModel model, Object key, List<IItem[]> itemsByType, int rowIndex) {
 			this.model = model;
 			this.key = key;
-			items = buildItemCollection(itemsByType);
-			count = UnitLookup.NUMBER_UNITY.quantity(itemsByType.stream().mapToInt(ia -> ia.length).sum());
-			index = rowIndex;
+			this.items = buildItemCollection(itemsByType);
+			this.count = UnitLookup.NUMBER_UNITY.quantity(itemsByType.stream().mapToInt(ia -> ia.length).sum());
+			this.index = rowIndex;
 		}
 
 		@Override
 		public int hashCode() {
 			return Objects.hashCode(key);
@@ -129,10 +131,38 @@
 		private Object calculateValue(AggregateRow row) {
 			return valueFunction.apply(row.items);
 		}
 	}
 
+	private static class PercentageColumn implements IMemberAccessor<Object, Object> {
+
+		private final BiFunction<IItemCollection, IItemCollection, ?> valueFunction;
+		private final int columnIndex;
+
+		PercentageColumn(BiFunction<IItemCollection, IItemCollection, ?> valueFunction, int columnIndex) {
+			this.valueFunction = valueFunction;
+			this.columnIndex = columnIndex;
+		}
+
+		@Override
+		public Object getMember(Object inObject) {
+			if (inObject instanceof AggregateRow) {
+				AggregateRow ai = ((AggregateRow) inObject);
+				if (ai.model.cellData[columnIndex] == null) {
+					ai.model.cellData[columnIndex] = Arrays.stream(ai.model.aggregateItems).parallel()
+							.map(this::calculateValue).toArray();
+				}
+				return ai.model.cellData[columnIndex][((AggregateRow) inObject).index];
+			}
+			return null;
+		}
+
+		private Object calculateValue(AggregateRow row) {
+			return valueFunction.apply(row.items, row.model.modelItems);
+		}
+	}
+
 	private int createdColumns;
 
 	public static Object getKey(Object row) {
 		return (row instanceof AggregateRow) ? ((AggregateRow) row).key : null;
 	}
@@ -158,10 +188,16 @@
 	// All rows built before the column was added will not have the extra column
 	public IMemberAccessor<?, Object> addColumn(Function<IItemCollection, ?> valueFunction) {
 		return new AggregateColumn(valueFunction, createdColumns++);
 	}
 
+	// All rows built before the column was added will not have the extra column
+	public IMemberAccessor<?, Object> addPercentageColumn(
+		BiFunction<IItemCollection, IItemCollection, ?> valueFunction) {
+		return new PercentageColumn(valueFunction, createdColumns++);
+	}
+
 	private static <T> void addStream(HashMap<T, List<IItem[]>> map, KeyedStream<T, IItem> ks) {
 		map.computeIfAbsent(ks.getKey(), k -> new ArrayList<>()).add(ks.getStream().toArray(IItem[]::new));
 	}
 
 	private static <T, U extends HashMap<T, List<IItem[]>>> U merge(U map1, U map2) {
@@ -201,13 +237,13 @@
 	private static IItemCollection buildItemCollection(List<IItem[]> items) {
 		return ItemCollectionToolkit
 				.build(items.stream().map(ITEMS_BY_TYPE_CONSTRUCTOR).collect(Collectors.toList())::stream);
 	}
 
-	public <T> Object[] buildRows(Stream<IItemIterable> items, IAccessorFactory<T> classifier) {
-		Map<T, List<IItem[]>> itemsMap = mapItems(items, classifier);
-		AggregationModel model = new AggregationModel(createdColumns, itemsMap.size());
+	public <T> Object[] buildRows(IItemCollection items, IAccessorFactory<T> classifier) {
+		Map<T, List<IItem[]>> itemsMap = mapItems(ItemCollectionToolkit.stream(items), classifier);
+		AggregationModel model = new AggregationModel(createdColumns, itemsMap.size(), items);
 		int index = 0;
 		for (Entry<T, List<IItem[]>> e : itemsMap.entrySet()) {
 			model.addRow(e.getKey(), e.getValue(), index++);
 		}
 		return model.aggregateItems;
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemHistogram.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemHistogram.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemHistogram.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemHistogram.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -48,21 +48,24 @@
 import org.eclipse.jface.viewers.TableViewer;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.graphics.Font;
 import org.eclipse.swt.graphics.Image;
 import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Table;
 
 import org.openjdk.jmc.common.IDisplayable;
 import org.openjdk.jmc.common.item.IAccessorFactory;
 import org.openjdk.jmc.common.item.IAggregator;
 import org.openjdk.jmc.common.item.IAttribute;
 import org.openjdk.jmc.common.item.IItemCollection;
 import org.openjdk.jmc.common.item.IMemberAccessor;
 import org.openjdk.jmc.common.unit.ContentType;
+import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.common.unit.LinearKindOfQuantity;
+import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.common.util.CompositeKey;
 import org.openjdk.jmc.common.util.TypeHandling;
 import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;
 import org.openjdk.jmc.flightrecorder.ui.ItemIterableToolkit;
 import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;
@@ -125,10 +128,31 @@
 		public void addColumn(String colId, IAggregator<?, ?> a) {
 			int style = a.getValueType() instanceof LinearKindOfQuantity ? SWT.RIGHT : SWT.NONE;
 			addColumn(colId, ic -> ic.getAggregate(a), a.getName(), a.getDescription(), style);
 		}
 
+		public void addPercentageColumn(String colId, IAggregator<?, ?> a) {
+			addPercentageColumn(colId, a, a.getName(), a.getDescription());
+		}
+
+		public void addPercentageColumn(String colId, IAggregator<?, ?> a, String name, String description) {
+			int style = a.getValueType() instanceof LinearKindOfQuantity ? SWT.RIGHT : SWT.NONE;
+
+			BiFunction<IItemCollection, IItemCollection, ?> percentageFunction = (rowItems, allItems) -> {
+				if (a.getValueType() instanceof LinearKindOfQuantity) {
+					IQuantity rowResult = (IQuantity) rowItems.getAggregate(a);
+					IQuantity allResult = (IQuantity) allItems.getAggregate(a);
+					if (rowResult != null && allResult != null) {
+						return UnitLookup.PERCENT.quantity(rowResult.ratioTo(allResult) * 100);
+					}
+				}
+				return rowItems.getAggregate(a);
+			};
+
+			addPercentageColumn(colId, percentageFunction, name, description, style);
+		}
+
 		public void addColumn(
 			String colId, Function<IItemCollection, ?> valueFunction, String name, String description) {
 			addColumn(colId, valueFunction, name, description, SWT.NONE);
 		}
 
@@ -136,10 +160,28 @@
 			String colId, Function<IItemCollection, ?> valueFunction, String name, String description, int style) {
 			columns.add(new ColumnBuilder(name, colId, grid.addColumn(valueFunction)).description(description)
 					.style(style).build());
 		}
 
+		public void addPercentageColumn(
+			String colId, BiFunction<IItemCollection, IItemCollection, ?> valueFunction, String name,
+			String description, int style) {
+			IMemberAccessor<?, Object> column = grid.addPercentageColumn(valueFunction);
+			BackgroundFractionDrawer percentageValueDrawer = new BackgroundFractionDrawer() {
+				@Override
+				public void handleEvent(Event event) {
+					Object row = event.item.getData();
+					Object item = column.getMember(row);
+					if (item instanceof Number) {
+						draw(((Number) item).doubleValue() / 100, event);
+					}
+				}
+			};
+			columns.add(new ColumnBuilder(name, colId, column).description(description).style(style)
+					.columnDrawer(percentageValueDrawer).build());
+		}
+
 		public <T> void addColumn(IAttribute<T> a) {
 			// FIXME: Refactor/remove this method to avoid it being used instead of passing an IAggregator.
 			// Accessing the thread-group is quite a special case as it is a property of the key (group by attribute).
 			// The caller of this method should be responsible for passing a unique column id, as with aggregators.
 			IMemberAccessor<Object, T> anyValueAccessor = row -> ItemCollectionToolkit
@@ -251,11 +293,11 @@
 	public HistogramSelection getSelection() {
 		return new HistogramSelection(((IStructuredSelection) columnManager.getViewer().getSelection()).toList());
 	}
 
 	public void show(IItemCollection items) {
-		columnManager.getViewer().setInput(grid.buildRows(ItemCollectionToolkit.stream(items), classifier));
+		columnManager.getViewer().setInput(grid.buildRows(items, classifier));
 	}
 
 	/*
 	 * FIXME: Consider some sharing with ColumnBuilder.DEFAULT_LP.
 	 * 
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/messages/internal/Messages.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/messages/internal/Messages.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/messages/internal/Messages.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/messages/internal/Messages.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -210,10 +210,12 @@
 	public static String HeapPage_ROW_LIVE_SIZE_DESC;
 	public static String HeapPage_ROW_MEMORY_USAGE;
 	public static String HeapPage_ROW_MEMORY_USAGE_DESC;
 	public static String HeapPage_SELECTED_CLASS;
 	public static String HeapPage_SELECTED_CLASSES;
+	public static String HeapPage_ALLOCATION_TOTAL_PERCENTAGE;
+	public static String HeapPage_ALLOCATION_TOTAL_PERCENTAGE_DESC;
 	public static String INFORMATION_COMPONENT_NOT_AVAILABLE;
 	public static String IO_PAGE_DURATIONS_DESCRIPTION;
 	public static String IO_PAGE_EVENT_LOG_DESCRIPTION;
 	public static String IO_PAGE_TIMELINE_DESCRIPTION;
 	public static String IO_PAGE_SIZE_DESCRIPTION;
@@ -509,14 +511,20 @@
 	public static String ThreadsPage_HIDE_THREAD_ACTION;
 	public static String ThreadsPage_LANE_TOOLTIP_TITLE;
 	public static String ThreadsPage_NAME;
 	public static String ThreadsPage_RESET_CHART_TO_SELECTION_ACTION;
 	public static String TlabPage_PAGE_NAME;
+	public static String TlabPage_THREADS_TAB_NAME;
+	public static String TlabPage_METHODS_TAB_NAME;
 	public static String TlabPage_ROW_TLAB_ALLOCATIONS;
 	public static String TlabPage_ROW_TLAB_ALLOCATIONS_DESC;
-	public static String TlabPage_SELECTED_THREAD;
-	public static String TlabPage_SELECTED_THREADS;
+	public static String TlabPage_SELECTED_ONE;
+	public static String TlabPage_SELECTED_MANY;
+	public static String TlabPage_INSIDE_TLAB_SUM_PERCENTAGE;
+	public static String TlabPage_INSIDE_TLAB_SUM_PERCENTAGE_DESC;
+	public static String TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE;
+	public static String TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE_DESC;
 	public static String VMOPERATION_PAGE_DURATIONS_DESCRIPTION;
 	public static String VMOPERATION_PAGE_EVENT_LOG_DESCRIPTION;
 	public static String VMOPERATION_PAGE_TIMELINE_DESCRIPTION;
 	public static String VMOperationPage_DURATION_SELECTION;
 	public static String VMOperationPage_LOG_SELECTION;
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ChartAndTableUI.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ChartAndTableUI.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ChartAndTableUI.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ChartAndTableUI.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -100,19 +100,19 @@
 	protected XYChart chart;
 	protected FlavorSelector flavorSelector;
 
 	ChartAndTableUI(IItemFilter pageFilter, StreamModel model, Composite parent, FormToolkit toolkit,
 			IPageContainer pageContainer, IState state, String sectionTitle, IItemFilter tableFilter, Image icon,
-			FlavorSelectorState flavorSelectorState) {
+			FlavorSelectorState flavorSelectorState, IAttribute<?> classifier) {
 		this.pageFilter = pageFilter;
 		this.model = model;
 		this.pageContainer = pageContainer;
 		form = DataPageToolkit.createForm(parent, toolkit, sectionTitle, icon);
 		sash = new SashForm(form.getBody(), SWT.VERTICAL);
 		toolkit.adapt(sash);
 
-		table = buildHistogram(sash, state.getChild(TABLE));
+		table = buildHistogram(sash, state.getChild(TABLE), classifier);
 		MCContextMenuManager mm = MCContextMenuManager.create(table.getManager().getViewer().getControl());
 		ColumnMenusFactory.addDefaultMenus(table.getManager(), mm);
 		table.getManager().getViewer().addSelectionChangedListener(e -> buildChart());
 		table.getManager().getViewer()
 				.addSelectionChangedListener(e -> pageContainer.showSelection(table.getSelection().getItems()));
@@ -180,10 +180,14 @@
 		if (legendSelection != null) {
 			chartState.putString(SELECTED, ((IAction) legendSelection).getId());
 		}
 	}
 
+	public Form getComponent() {
+		return this.form;
+	}
+
 	private void onSetRange(Boolean useRange) {
 		IRange<IQuantity> range = useRange ? timeRange : pageContainer.getRecordingRange();
 		chart.setVisibleRange(range.getStart(), range.getEnd());
 		buildChart();
 	}
@@ -216,11 +220,11 @@
 		Optional<IAction> action = allChartSeriesActions.stream().filter(a -> attr.getIdentifier().equals(a.getId()))
 				.findAny();
 		return action.isPresent() && action.get().isChecked();
 	}
 
-	protected abstract ItemHistogram buildHistogram(Composite parent, IState state);
+	protected abstract ItemHistogram buildHistogram(Composite parent, IState state, IAttribute<?> classifier);
 
 	protected abstract IXDataRenderer getChartRenderer(IItemCollection itemsInTable, HistogramSelection selection);
 
 	protected abstract List<IAction> initializeChartConfiguration(IState state);
 }
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/HeapPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/HeapPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/HeapPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/HeapPage.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -123,10 +123,11 @@
 	private static final IItemFilter TABLE_ITEMS = ItemFilters.or(JdkFilters.OBJECT_COUNT, JdkFilters.ALLOC_ALL);
 	private static final String INSTANCES_COL = "instances"; //$NON-NLS-1$
 	private static final String SIZE_COL = "size"; //$NON-NLS-1$
 	private static final String INCREASE_COL = "increase"; //$NON-NLS-1$
 	private static final String ALLOCATION_COL = "allocation"; //$NON-NLS-1$
+	private static final String ALLOCATION_PERCENT_COL = "allocationPercent"; //$NON-NLS-1$
 	private static final String INSIDE_TLAB_COL = "insideTlabSize"; //$NON-NLS-1$
 	private static final String OUTSIDE_TLAB_COL = "outsideTlabSize"; //$NON-NLS-1$
 	private static final String GC_PAUSE_ID = "gcPause"; //$NON-NLS-1$
 
 	private static final ItemHistogramBuilder HISTOGRAM = new ItemHistogramBuilder();
@@ -134,10 +135,12 @@
 	static {
 		HISTOGRAM.addColumn(INSTANCES_COL, JdkAggregators.OBJECT_COUNT_MAX_INSTANCES);
 		HISTOGRAM.addColumn(SIZE_COL, JdkAggregators.OBJECT_COUNT_MAX_SIZE);
 		HISTOGRAM.addColumn(INCREASE_COL, ObjectStatisticsDataProvider.getIncreaseAggregator());
 		HISTOGRAM.addColumn(ALLOCATION_COL, JdkAggregators.ALLOCATION_TOTAL);
+		HISTOGRAM.addPercentageColumn(ALLOCATION_PERCENT_COL, JdkAggregators.ALLOCATION_TOTAL,
+				Messages.HeapPage_ALLOCATION_TOTAL_PERCENTAGE, Messages.HeapPage_ALLOCATION_TOTAL_PERCENTAGE_DESC);
 		HISTOGRAM.addColumn(INSIDE_TLAB_COL, JdkAggregators.ALLOC_INSIDE_TLAB_SUM);
 		HISTOGRAM.addColumn(OUTSIDE_TLAB_COL, JdkAggregators.ALLOC_OUTSIDE_TLAB_SUM);
 	}
 
 	private class ObjectStatisticsUi extends ChartAndTableUI {
@@ -148,11 +151,11 @@
 		private IAction sizeAction;
 		private IAction allocationAction;
 
 		ObjectStatisticsUi(Composite parent, FormToolkit toolkit, IPageContainer pageContainer, IState state) {
 			super(TABLE_ITEMS, getDataSource(), parent, toolkit, pageContainer, state, getName(), tableFilter,
-					getIcon(), flavorSelectorState);
+					getIcon(), flavorSelectorState, JdkAttributes.OBJECT_CLASS);
 			tableFilterComponent.loadState(state.getChild(HEAP_FILTER));
 			addResultActions(form);
 			chart.setVisibleRange(visibleRange.getStart(), visibleRange.getEnd());
 			chart.addVisibleRangeListener(r -> visibleRange = r);
 			table.getManager().setSelectionState(histogramState);
@@ -170,12 +173,12 @@
 			histogramState = table.getManager().getSelectionState();
 			flavorSelectorState = flavorSelector.getFlavorSelectorState();
 		}
 
 		@Override
-		protected ItemHistogram buildHistogram(Composite parent, IState state) {
-			return HISTOGRAM.buildWithoutBorder(parent, JdkAttributes.OBJECT_CLASS, getTableSettings(state));
+		protected ItemHistogram buildHistogram(Composite parent, IState state, IAttribute<?> classifier) {
+			return HISTOGRAM.buildWithoutBorder(parent, classifier, getTableSettings(state));
 		}
 
 		@Override
 		protected IXDataRenderer getChartRenderer(IItemCollection itemsInTable, HistogramSelection selection) {
 			List<IXDataRenderer> rows = new ArrayList<>();
@@ -258,11 +261,12 @@
 			return new TableSettings(SIZE_COL,
 					Arrays.asList(new ColumnSettings(ItemHistogram.KEY_COL_ID, false, 500, null),
 							new ColumnSettings(INSTANCES_COL, false, 120, false),
 							new ColumnSettings(SIZE_COL, false, 120, false),
 							new ColumnSettings(INCREASE_COL, false, 120, false),
-							new ColumnSettings(ALLOCATION_COL, false, 120, false)));
+							new ColumnSettings(ALLOCATION_COL, false, 120, false),
+							new ColumnSettings(ALLOCATION_PERCENT_COL, false, 120, false)));
 		} else {
 			return new TableSettings(state);
 		}
 	}
 
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/JavaApplicationPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/JavaApplicationPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/JavaApplicationPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/JavaApplicationPage.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -51,10 +51,11 @@
 import org.eclipse.ui.forms.widgets.FormToolkit;
 import org.openjdk.jmc.common.IState;
 import org.openjdk.jmc.common.IWritableState;
 import org.openjdk.jmc.common.item.Aggregators;
 import org.openjdk.jmc.common.item.IAggregator;
+import org.openjdk.jmc.common.item.IAttribute;
 import org.openjdk.jmc.common.item.IItemCollection;
 import org.openjdk.jmc.common.item.IItemFilter;
 import org.openjdk.jmc.common.item.ItemFilters;
 import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.common.unit.IRange;
@@ -218,11 +219,11 @@
 		private MCContextMenuManager mm;
 		private ThreadGraphLanes lanes;
 
 		JavaApplicationUi(Composite parent, FormToolkit toolkit, IPageContainer pageContainer, IState state) {
 			super(ALL_THREAD_EVENTS, getDataSource(), parent, toolkit, pageContainer, state, getName(), tableFilter,
-					getIcon(), flavorSelectorState);
+					getIcon(), flavorSelectorState, JfrAttributes.EVENT_THREAD);
 			mm = (MCContextMenuManager) chartCanvas.getContextMenu();
 
 			// FIXME: The lanes field is initialized by initializeChartConfiguration which is called by the super constructor. This is too indirect for SpotBugs to resolve and should be simplified.
 			lanes.updateContextMenu(mm, false);
 			lanes.updateContextMenu(MCContextMenuManager.create(chartLegend.getControl()), true);
@@ -241,13 +242,12 @@
 			chart.setVisibleRange(visibleRange.getStart(), visibleRange.getEnd());
 			table.getManager().setSelectionState(tableState);
 		}
 
 		@Override
-		protected ItemHistogram buildHistogram(Composite parent, IState state) {
-			ItemHistogram build = HISTOGRAM.buildWithoutBorder(parent, JfrAttributes.EVENT_THREAD,
-					TableSettings.forState(state));
+		protected ItemHistogram buildHistogram(Composite parent, IState state, IAttribute<?> classifier) {
+			ItemHistogram build = HISTOGRAM.buildWithoutBorder(parent, classifier, TableSettings.forState(state));
 			return build;
 		}
 
 		@Override
 		protected IXDataRenderer getChartRenderer(IItemCollection itemsInTable, HistogramSelection selection) {
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ThreadsPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ThreadsPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ThreadsPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ThreadsPage.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -50,10 +50,11 @@
 import org.openjdk.jmc.common.IMCThread;
 import org.openjdk.jmc.common.IState;
 import org.openjdk.jmc.common.IWritableState;
 import org.openjdk.jmc.common.item.Aggregators;
 import org.openjdk.jmc.common.item.IAggregator;
+import org.openjdk.jmc.common.item.IAttribute;
 import org.openjdk.jmc.common.item.IItemCollection;
 import org.openjdk.jmc.common.item.IItemFilter;
 import org.openjdk.jmc.common.item.ItemFilters;
 import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.common.unit.IRange;
@@ -166,11 +167,11 @@
 		private MCContextMenuManager mm;
 		private ThreadGraphLanes lanes;
 
 		ThreadsPageUi(Composite parent, FormToolkit toolkit, IPageContainer editor, IState state) {
 			super(pageFilter, getDataSource(), parent, toolkit, editor, state, getName(), pageFilter, getIcon(),
-					flavorSelectorState);
+					flavorSelectorState, JfrAttributes.EVENT_THREAD);
 			mm = (MCContextMenuManager) chartCanvas.getContextMenu();
 			sash.setOrientation(SWT.HORIZONTAL);
 			addActionsToContextMenu(mm);
 			// FIXME: The lanes field is initialized by initializeChartConfiguration which is called by the super constructor. This is too indirect for SpotBugs to resolve and should be simplified.
 			lanes.updateContextMenu(mm, false);
@@ -268,13 +269,12 @@
 		private void setResetChartActionEnablement(Boolean enabled) {
 			this.resetChartAction.setEnabled(enabled);
 		}
 
 		@Override
-		protected ItemHistogram buildHistogram(Composite parent, IState state) {
-			ItemHistogram build = HISTOGRAM.buildWithoutBorder(parent, JfrAttributes.EVENT_THREAD,
-					TableSettings.forState(state));
+		protected ItemHistogram buildHistogram(Composite parent, IState state, IAttribute<?> classifier) {
+			ItemHistogram build = HISTOGRAM.buildWithoutBorder(parent, classifier, TableSettings.forState(state));
 			return build;
 		}
 
 		@Override
 		protected IXDataRenderer getChartRenderer(IItemCollection itemsInTable, HistogramSelection tableSelection) {
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/TlabPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/TlabPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/TlabPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/TlabPage.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -37,22 +37,26 @@
 import java.util.List;
 
 import org.eclipse.jface.action.IAction;
 import org.eclipse.jface.resource.ImageDescriptor;
 import org.eclipse.osgi.util.NLS;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.CTabFolder;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.ui.forms.widgets.FormToolkit;
 
 import org.openjdk.jmc.common.IState;
 import org.openjdk.jmc.common.IWritableState;
+import org.openjdk.jmc.common.item.IAttribute;
 import org.openjdk.jmc.common.item.IItemCollection;
 import org.openjdk.jmc.common.item.IItemFilter;
 import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.common.unit.IRange;
 import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.flightrecorder.JfrAttributes;
 import org.openjdk.jmc.flightrecorder.jdk.JdkAggregators;
+import org.openjdk.jmc.flightrecorder.jdk.JdkAttributes;
 import org.openjdk.jmc.flightrecorder.jdk.JdkFilters;
 import org.openjdk.jmc.flightrecorder.rules.util.JfrRuleTopics;
 import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;
 import org.openjdk.jmc.flightrecorder.ui.IDataPageFactory;
 import org.openjdk.jmc.flightrecorder.ui.IDisplayablePage;
@@ -111,35 +115,73 @@
 	private static final String INSIDE_COUNT_COL = "insideCount"; //$NON-NLS-1$
 	private static final String OUTSIDE_COUNT_COL = "outsideCount"; //$NON-NLS-1$
 	private static final String AVERAGE_INSIDE_SIZE_COL = "averageInsideSize"; //$NON-NLS-1$
 	private static final String AVERAGE_OUTSIDE_SIZE_COL = "averageOutsideSize"; //$NON-NLS-1$
 	private static final String TOTAL_INSIDE_SIZE_COL = "totalInsideSize"; //$NON-NLS-1$
+	private static final String TOTAL_INSIDE_SIZE_PERCENT_COL = "totalInsideSizePercent"; //$NON-NLS-1$
 	private static final String TOTAL_OUTSIDE_SIZE_COL = "totalOutsideSize"; //$NON-NLS-1$
+	private static final String TOTAL_OUTSIDE_SIZE_PERCENT_COL = "totalOutsideSizePercent"; //$NON-NLS-1$
 
 	private static final ItemHistogramBuilder HISTOGRAM = new ItemHistogramBuilder();
 
 	static {
-		HISTOGRAM.addCountColumn();
 		HISTOGRAM.addColumn(INSIDE_COUNT_COL, JdkAggregators.INSIDE_TLAB_COUNT);
 		HISTOGRAM.addColumn(OUTSIDE_COUNT_COL, JdkAggregators.OUTSIDE_TLAB_COUNT);
 		HISTOGRAM.addColumn(AVERAGE_INSIDE_SIZE_COL, JdkAggregators.ALLOC_INSIDE_TLAB_AVG);
 		HISTOGRAM.addColumn(AVERAGE_OUTSIDE_SIZE_COL, JdkAggregators.ALLOC_OUTSIDE_TLAB_AVG);
 		HISTOGRAM.addColumn(TOTAL_INSIDE_SIZE_COL, JdkAggregators.ALLOC_INSIDE_TLAB_SUM);
+		HISTOGRAM.addPercentageColumn(TOTAL_INSIDE_SIZE_PERCENT_COL, JdkAggregators.ALLOC_INSIDE_TLAB_SUM,
+				Messages.TlabPage_INSIDE_TLAB_SUM_PERCENTAGE, Messages.TlabPage_INSIDE_TLAB_SUM_PERCENTAGE_DESC);
 		HISTOGRAM.addColumn(TOTAL_OUTSIDE_SIZE_COL, JdkAggregators.ALLOC_OUTSIDE_TLAB_SUM);
+		HISTOGRAM.addPercentageColumn(TOTAL_OUTSIDE_SIZE_PERCENT_COL, JdkAggregators.ALLOC_OUTSIDE_TLAB_SUM,
+				Messages.TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE, Messages.TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE_DESC);
 	}
 
-	private class TlabUI extends ChartAndTableUI {
+	private class TlabUI implements IPageUI {
+
+		private CTabFolder tabFolder;
+		private TlabChartTable threadsCT;
+		private TlabChartTable methodsCT;
+
+		private int tabFolderIndex = 0;
+
+		public TlabUI(Composite parent, FormToolkit toolkit, IPageContainer editor, IState state) {
+			tabFolder = new CTabFolder(parent, SWT.BOTTOM);
+
+			threadsCT = new TlabChartTable(tabFolder, toolkit, editor, state, JfrAttributes.EVENT_THREAD);
+			DataPageToolkit.addTabItem(tabFolder, threadsCT.getComponent(), Messages.TlabPage_THREADS_TAB_NAME);
+
+			methodsCT = new TlabChartTable(tabFolder, toolkit, editor, state, JdkAttributes.STACK_TRACE_TOP_METHOD);
+			DataPageToolkit.addTabItem(tabFolder, methodsCT.getComponent(), Messages.TlabPage_METHODS_TAB_NAME);
+
+			tabFolder.setSelection(tabFolderIndex);
+		}
+
+		@Override
+		public void saveTo(IWritableState state) {
+			threadsCT.saveTo(state);
+			methodsCT.saveTo(state);
+
+			this.saveToLocal();
+		}
+
+		private void saveToLocal() {
+			tabFolderIndex = tabFolder.getSelectionIndex();
+		}
+	}
+
+	private class TlabChartTable extends ChartAndTableUI {
 		private static final String TLAB_TABLE_FILTER = "tlabTableFilter"; //$NON-NLS-1$
 
 		private IAction insideSizeAction;
 		private IAction outsideSizeAction;
 
-		TlabUI(Composite parent, FormToolkit toolkit, IPageContainer pageContainer, IState state) {
+		TlabChartTable(Composite parent, FormToolkit toolkit, IPageContainer pageContainer, IState state,
+				IAttribute<?> classifier) {
 			// FIXME: This page could probably use a horizontal legend instead.
 			super(TLAB_EVENTS, getDataSource(), parent, toolkit, pageContainer, state, getName(), tableFilter,
-					getIcon(), flavorSelectorState);
-
+					getIcon(), flavorSelectorState, classifier);
 			addResultActions(form);
 
 			tableFilterComponent.loadState(state.getChild(TLAB_TABLE_FILTER));
 			chart.setVisibleRange(visibleRange.getStart(), visibleRange.getEnd());
 			chart.addVisibleRangeListener(r -> visibleRange = r);
@@ -158,18 +200,18 @@
 			tableState = table.getManager().getSelectionState();
 			flavorSelectorState = flavorSelector.getFlavorSelectorState();
 		}
 
 		@Override
-		protected ItemHistogram buildHistogram(Composite parent, IState state) {
-			return HISTOGRAM.buildWithoutBorder(parent, JfrAttributes.EVENT_THREAD, TableSettings.forState(state));
+		protected ItemHistogram buildHistogram(Composite parent, IState state, IAttribute<?> classifier) {
+			return HISTOGRAM.buildWithoutBorder(parent, classifier, TableSettings.forState(state));
 		}
 
 		@Override
 		protected IXDataRenderer getChartRenderer(IItemCollection itemsInTable, HistogramSelection selection) {
 			IItemCollection selectedItems = selection.getRowCount() == 0 ? itemsInTable : selection.getItems();
-			String threadCount = threadCount(selection.getRowCount());
+			String selectionCount = selectionCount(selection.getRowCount());
 			IItemCollection filter = selectedItems.apply(JdkFilters.ALLOC_ALL);
 			XYDataRenderer renderer = new XYDataRenderer(UnitLookup.MEMORY.getDefaultUnit().quantity(0),
 					Messages.TlabPage_ROW_TLAB_ALLOCATIONS, Messages.TlabPage_ROW_TLAB_ALLOCATIONS_DESC);
 			if (insideSizeAction.isChecked()) {
 				renderer.addBarChart(
@@ -181,11 +223,11 @@
 				renderer.addBarChart(
 						JdkAggregators.ALLOC_OUTSIDE_TLAB_SUM.getName(), BucketBuilder.aggregatorSeries(filter,
 								JdkAggregators.ALLOC_OUTSIDE_TLAB_SUM, JfrAttributes.END_TIME),
 						AWTChartToolkit.staticColor(OUTSIDE_COLOR));
 			}
-			return new ItemRow(Messages.TlabPage_ROW_TLAB_ALLOCATIONS + threadCount, null, renderer, filter);
+			return new ItemRow(Messages.TlabPage_ROW_TLAB_ALLOCATIONS + selectionCount, null, renderer, filter);
 		}
 
 		@Override
 		protected void onFilterChange(IItemFilter filter) {
 			super.onFilterChange(filter);
@@ -201,18 +243,18 @@
 
 			return Arrays.asList(insideSizeAction, outsideSizeAction);
 		}
 	}
 
-	private static String threadCount(int count) {
+	private static String selectionCount(int count) {
 		switch (count) {
 		case 0:
 			return ""; //$NON-NLS-1$
 		case 1:
-			return " (" + Messages.TlabPage_SELECTED_THREAD + ")"; //$NON-NLS-1$ //$NON-NLS-2$
+			return " (" + Messages.TlabPage_SELECTED_ONE + ")"; //$NON-NLS-1$ //$NON-NLS-2$
 		default:
-			return " (" + NLS.bind(Messages.TlabPage_SELECTED_THREADS, count) + ")"; //$NON-NLS-1$ //$NON-NLS-2$
+			return " (" + NLS.bind(Messages.TlabPage_SELECTED_MANY, count) + ")"; //$NON-NLS-1$ //$NON-NLS-2$
 		}
 	}
 
 	@Override
 	public IPageUI display(Composite parent, FormToolkit toolkit, IPageContainer editor, IState state) {
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages.properties b/application/org.openjdk.jmc.flightrecorder.ui/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages.properties
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages.properties
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages.properties
@@ -1,7 +1,7 @@
 #
-#  Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+#  Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
 #
 #  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 #
 #  The contents of this file are subject to the terms of either the Universal Permissive License 
 #  v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -312,10 +312,12 @@
 HeapPage_ROW_MEMORY_USAGE=Memory Usage
 HeapPage_ROW_MEMORY_USAGE_DESC=This lane can show various memory usage statistics for the heap and physical memory on the machine. The color mapping is shown in the legend, where the enablement of specific information can be controlled.
 HeapPage_SELECTED_CLASS=1 class
 # {0} is a number
 HeapPage_SELECTED_CLASSES={0} classes
+HeapPage_ALLOCATION_TOTAL_PERCENTAGE=Total Allocation (%)
+HeapPage_ALLOCATION_TOTAL_PERCENTAGE_DESC=An estimate of the total allocation as a percentage of all allocations. This is not an exact value.
 
 INFORMATION_COMPONENT_NOT_AVAILABLE=N/A
 
 N_A=N/A
 NativeLibraryPage_PAGE_NAME=Native Libraries
@@ -492,17 +494,22 @@
 ThreadsPage_HIDE_THREAD_ACTION=Hide Thread From The Chart
 # {0} is the thread name, {1} is the lane name
 ThreadsPage_LANE_TOOLTIP_TITLE={0} / {1} Lane
 ThreadsPage_NAME=Threads
 ThreadsPage_RESET_CHART_TO_SELECTION_ACTION=Reset The Chart To Current Selection
-
 TlabPage_PAGE_NAME=TLAB Allocations
+TlabPage_THREADS_TAB_NAME=By Threads
+TlabPage_METHODS_TAB_NAME=By Top Methods
 TlabPage_ROW_TLAB_ALLOCATIONS=TLAB Allocations
 TlabPage_ROW_TLAB_ALLOCATIONS_DESC=Data generated from allocation samples. The samples are collected either when acquiring a new thread local allocation buffer (TLAB) or when allocating outside of such buffers.
-TlabPage_SELECTED_THREAD=1 thread
+TlabPage_SELECTED_ONE=1 item
 # {0} is a number
-TlabPage_SELECTED_THREADS={0} threads
+TlabPage_SELECTED_MANY={0} items
+TlabPage_INSIDE_TLAB_SUM_PERCENTAGE=Est. TLAB Alloc. (%)
+TlabPage_INSIDE_TLAB_SUM_PERCENTAGE_DESC=The estimated allocation size in TLABs as a percentage of all allocations in TLABs
+TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE=Total Alloc. Outside TLABs (%)
+TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE_DESC=The total size of allocations outside TLABs as a percentage of all allocations outside TLABs.
 
 JVMInformationPage_COLUMN_NEW_VALUE=New Value
 JVMInformationPage_COLUMN_OLD_VALUE=Old Value
 JVMInformationPage_COLUMN_VALUE=Value
 JVMInformationPage_EMPTY_TABLE=No 'Flag Changed' events found
diff a/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages.properties b/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages.properties
--- a/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages.properties
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages.properties
@@ -1,7 +1,7 @@
 #
-#  Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+#  Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
 #
 #  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 #
 #  The contents of this file are subject to the terms of either the Universal Permissive License 
 #  v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -401,17 +401,17 @@
 AGGR_MAX_BLOCKED_TIME_DESC=The duration of the longest time a thread is blocked by a monitor.
 AGGR_AVG_BLOCKED_TIME=Average Blocked Time
 AGGR_AVG_BLOCKED_TIME_DESC=An estimate of the average time a thread is blocked by a monitor. The actual average may be lower.
 AGGR_STDDEV_BLOCKED_TIME=Std Dev Blocked Time
 AGGR_STDDEV_BLOCKED_TIME_DESC=Standard deviation for the time a thread is blocked by a monitor, based on the sample population in the recording
-AGGR_ALLOC_INSIDE_TLAB_AVG=Average TLAB Allocation
+AGGR_ALLOC_INSIDE_TLAB_AVG=Avg. TLAB Alloc.
 AGGR_ALLOC_INSIDE_TLAB_AVG_DESC=An estimate of the average size of allocations inside TLABs
-AGGR_ALLOC_OUTSIDE_TLAB_AVG=Average Allocation Outside TLABs
+AGGR_ALLOC_OUTSIDE_TLAB_AVG=Avg. Alloc. Outside TLABs
 AGGR_ALLOC_OUTSIDE_TLAB_AVG_DESC=The average size of allocations outside TLABs
-AGGR_ALLOC_INSIDE_TLAB_SUM=Est. TLAB Allocation
+AGGR_ALLOC_INSIDE_TLAB_SUM=Est. TLAB Alloc.
 AGGR_ALLOC_INSIDE_TLAB_SUM_DESC=The estimated allocation size in TLABs
-AGGR_ALLOC_OUTSIDE_TLAB_SUM=Total Allocation Outside TLABs
+AGGR_ALLOC_OUTSIDE_TLAB_SUM=Total Alloc. Outside TLABs
 AGGR_ALLOC_OUTSIDE_TLAB_SUM_DESC=The total size of allocations outside TLABs
 AGGR_SWEEP_METHOD_SUM=Methods Swept
 AGGR_SWEEP_METHOD_SUM_DESC=The total amount of swept methods
 AGGR_SWEEP_FLUSHED_SUM=Methods Flushed
 AGGR_SWEEP_FLUSHED_SUM_DESC=The total amount of methods flushed
