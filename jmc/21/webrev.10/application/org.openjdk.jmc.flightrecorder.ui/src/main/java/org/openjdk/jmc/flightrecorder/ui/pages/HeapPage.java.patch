diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/HeapPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/HeapPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/HeapPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/HeapPage.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -123,10 +123,11 @@
 	private static final IItemFilter TABLE_ITEMS = ItemFilters.or(JdkFilters.OBJECT_COUNT, JdkFilters.ALLOC_ALL);
 	private static final String INSTANCES_COL = "instances"; //$NON-NLS-1$
 	private static final String SIZE_COL = "size"; //$NON-NLS-1$
 	private static final String INCREASE_COL = "increase"; //$NON-NLS-1$
 	private static final String ALLOCATION_COL = "allocation"; //$NON-NLS-1$
+	private static final String ALLOCATION_PERCENT_COL = "allocationPercent"; //$NON-NLS-1$
 	private static final String INSIDE_TLAB_COL = "insideTlabSize"; //$NON-NLS-1$
 	private static final String OUTSIDE_TLAB_COL = "outsideTlabSize"; //$NON-NLS-1$
 	private static final String GC_PAUSE_ID = "gcPause"; //$NON-NLS-1$
 
 	private static final ItemHistogramBuilder HISTOGRAM = new ItemHistogramBuilder();
@@ -134,10 +135,12 @@
 	static {
 		HISTOGRAM.addColumn(INSTANCES_COL, JdkAggregators.OBJECT_COUNT_MAX_INSTANCES);
 		HISTOGRAM.addColumn(SIZE_COL, JdkAggregators.OBJECT_COUNT_MAX_SIZE);
 		HISTOGRAM.addColumn(INCREASE_COL, ObjectStatisticsDataProvider.getIncreaseAggregator());
 		HISTOGRAM.addColumn(ALLOCATION_COL, JdkAggregators.ALLOCATION_TOTAL);
+		HISTOGRAM.addPercentageColumn(ALLOCATION_PERCENT_COL, JdkAggregators.ALLOCATION_TOTAL,
+				Messages.HeapPage_ALLOCATION_TOTAL_PERCENTAGE, Messages.HeapPage_ALLOCATION_TOTAL_PERCENTAGE_DESC);
 		HISTOGRAM.addColumn(INSIDE_TLAB_COL, JdkAggregators.ALLOC_INSIDE_TLAB_SUM);
 		HISTOGRAM.addColumn(OUTSIDE_TLAB_COL, JdkAggregators.ALLOC_OUTSIDE_TLAB_SUM);
 	}
 
 	private class ObjectStatisticsUi extends ChartAndTableUI {
@@ -148,11 +151,11 @@
 		private IAction sizeAction;
 		private IAction allocationAction;
 
 		ObjectStatisticsUi(Composite parent, FormToolkit toolkit, IPageContainer pageContainer, IState state) {
 			super(TABLE_ITEMS, getDataSource(), parent, toolkit, pageContainer, state, getName(), tableFilter,
-					getIcon(), flavorSelectorState);
+					getIcon(), flavorSelectorState, JdkAttributes.OBJECT_CLASS);
 			tableFilterComponent.loadState(state.getChild(HEAP_FILTER));
 			addResultActions(form);
 			chart.setVisibleRange(visibleRange.getStart(), visibleRange.getEnd());
 			chart.addVisibleRangeListener(r -> visibleRange = r);
 			table.getManager().setSelectionState(histogramState);
@@ -170,12 +173,12 @@
 			histogramState = table.getManager().getSelectionState();
 			flavorSelectorState = flavorSelector.getFlavorSelectorState();
 		}
 
 		@Override
-		protected ItemHistogram buildHistogram(Composite parent, IState state) {
-			return HISTOGRAM.buildWithoutBorder(parent, JdkAttributes.OBJECT_CLASS, getTableSettings(state));
+		protected ItemHistogram buildHistogram(Composite parent, IState state, IAttribute<?> classifier) {
+			return HISTOGRAM.buildWithoutBorder(parent, classifier, getTableSettings(state));
 		}
 
 		@Override
 		protected IXDataRenderer getChartRenderer(IItemCollection itemsInTable, HistogramSelection selection) {
 			List<IXDataRenderer> rows = new ArrayList<>();
@@ -258,11 +261,12 @@
 			return new TableSettings(SIZE_COL,
 					Arrays.asList(new ColumnSettings(ItemHistogram.KEY_COL_ID, false, 500, null),
 							new ColumnSettings(INSTANCES_COL, false, 120, false),
 							new ColumnSettings(SIZE_COL, false, 120, false),
 							new ColumnSettings(INCREASE_COL, false, 120, false),
-							new ColumnSettings(ALLOCATION_COL, false, 120, false)));
+							new ColumnSettings(ALLOCATION_COL, false, 120, false),
+							new ColumnSettings(ALLOCATION_PERCENT_COL, false, 120, false)));
 		} else {
 			return new TableSettings(state);
 		}
 	}
 
