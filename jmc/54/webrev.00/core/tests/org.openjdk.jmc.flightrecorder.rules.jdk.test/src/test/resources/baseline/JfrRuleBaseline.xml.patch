diff a/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/resources/baseline/JfrRuleBaseline.xml b/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/resources/baseline/JfrRuleBaseline.xml
--- a/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/resources/baseline/JfrRuleBaseline.xml
+++ b/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/resources/baseline/JfrRuleBaseline.xml
@@ -3982,11 +3982,11 @@
             <severity>OK</severity>
             <score>11.944505390960535</score>
             <shortDescription>Approximately 17 % of the live set consists of the internal array type of strings ('char[]' for this JDK version).
 The heap is around 22 % full. There is likely no big benefit from enabling string deduplication.</shortDescription>
             <longDescription>Approximately 17 % of the live set consists of the internal array type of strings ('char[]' for this JDK version).
-The heap is around 22 % full. There is likely no big benefit from enabling string deduplication.&lt;p&gt;String deduplication is enabled using the JVM flag '-XX:+UseStringDeduplication'. This flag can be used together with the G1 garbage collector in JDK 8u20 or later.&lt;p&gt;To validate if this gives a performance improvement for your application, create flight recordings both with and without string deduplication. For the run with string deduplication enabled, also enable statistics with '-XX:+PrintStringDeduplicationStatistics' for JDK 8 or '-Xlog:stringdedup*=debug' for JDK 9. Check if the heap live set decrease in the recording with string deduplication enabled is larger than the size of the string deduplication metadata table. The size of the metadata table is printed in the statistics output as 'Table/Memory Usage: XX MB'&lt;p&gt;You can read more about string deduplication in the java options documentation or in &lt;a href="http://openjdk.java.net/jeps/192"&gt;JEP 192&lt;/a&gt;.&lt;p&gt;String deduplication is only supported when using the G1 garbage collector. If you want to use this feature you can enable G1 by using '-XX:+UseG1GC'.</longDescription>
+The heap is around 22 % full. There is likely no big benefit from enabling string deduplication.&lt;p&gt;String deduplication is enabled using the JVM flag '-XX:+UseStringDeduplication'. This flag can be used together with the G1 garbage collector in JDK 8u20 or later, or with the Shenandoah garbage collector.&lt;p&gt;To validate if this gives a performance improvement for your application, create flight recordings both with and without string deduplication. For the run with string deduplication enabled, also enable statistics with '-XX:+PrintStringDeduplicationStatistics' for JDK 8 or '-Xlog:stringdedup*=debug' for JDK 9. Check if the heap live set decrease in the recording with string deduplication enabled is larger than the size of the string deduplication metadata table. The size of the metadata table is printed in the statistics output as 'Table/Memory Usage: XX MB'&lt;p&gt;You can read more about string deduplication in the java options documentation or in &lt;a href="https://openjdk.java.net/jeps/192"&gt;JEP 192&lt;/a&gt;.&lt;p&gt;String deduplication is only supported when using the G1 (JDK 8u20+) or Shenandoah garbage collectors. If you want to use this feature you can enable G1 by using '-XX:+UseG1GC', or enable Shenandoah by using '-XX:+UseShenandoahGC'.</longDescription>
         </rule>
         <rule>
             <id>SystemGc</id>
             <severity>OK</severity>
             <score>0.0</score>
