diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/StringDeduplicationRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/StringDeduplicationRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/StringDeduplicationRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/StringDeduplicationRule.java
@@ -59,11 +59,11 @@
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;
 
 /**
  * Intent of this rule is to find out if it would be worth enabling string deduplication. String
  * deduplication is available together with the G1 GC, see
- * <a href="http://openjdk.java.net/jeps/192">JEP 192</a>. Rule looks at how much memory is used by
+ * <a href="https://openjdk.java.net/jeps/192">JEP 192</a>. Rule looks at how much memory is used by
  * the char/byte arrays used internally in strings, it also check the heap usage.
  * <p>
  * The rule can only give guidance, it is up to the user to measure changes memory consumption after
  * enabling string deduplication. It can still be that the amount of memory used to hold metadata of
  * the deduplicated strings is more than the saved heap space.
@@ -178,16 +178,14 @@
 			heapInfo = MessageFormat.format(Messages.getString(Messages.StringDeduplicationRule_RESULT_HEAP_USAGE),
 					Math.round(heapUsedRatio));
 		}
 
 		Boolean useG1GC = items.getAggregate(JdkAggregators.USE_G1_GC);
+		Boolean useShenandoahGC = items.getAggregate(JdkAggregators.USE_SHENANDOAH_GC);
 		String extraCompatInfo = ""; //$NON-NLS-1$
-		if (!Boolean.TRUE.equals(useG1GC)) {
-			extraCompatInfo += "<p>" + Messages.getString(Messages.StringDeduplicationRule_RESULT_NON_G1_LONG); //$NON-NLS-1$
-		}
-		if (!javaVersion.isGreaterOrEqualThan(JavaVersionSupport.STRING_DEDUPLICATION_SUPPORTED)) {
-			extraCompatInfo += "<p>" + Messages.getString(Messages.StringDeduplicationRule_RESULT_PRE_8_20); //$NON-NLS-1$
+		if (!(Boolean.TRUE.equals(useG1GC)) && !(Boolean.TRUE.equals(useShenandoahGC))) {
+			extraCompatInfo += "<p>" + Messages.getString(Messages.StringDeduplicationRule_RESULT_GC_LONG); //$NON-NLS-1$
 		}
 
 		// Calculate string internal array ratios depending on available event types
 		if (objectCountAvail == AVAILABLE || objectCountAfterGcAvail == AVAILABLE) {
 			String objectCountEventType = (objectCountAvail == AVAILABLE) ? JdkTypeIDs.OBJECT_COUNT
