diff a/modules/javafx.graphics/src/main/java/com/sun/scenario/effect/impl/prism/PrRenderer.java b/modules/javafx.graphics/src/main/java/com/sun/scenario/effect/impl/prism/PrRenderer.java
--- a/modules/javafx.graphics/src/main/java/com/sun/scenario/effect/impl/prism/PrRenderer.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/scenario/effect/impl/prism/PrRenderer.java
@@ -24,11 +24,10 @@
  */
 
 package com.sun.scenario.effect.impl.prism;
 
 import java.lang.reflect.Method;
-import java.util.HashSet;
 import java.util.Set;
 import com.sun.glass.ui.Screen;
 import com.sun.prism.GraphicsPipeline;
 import com.sun.prism.GraphicsPipeline.ShaderModel;
 import com.sun.prism.RTTexture;
@@ -40,18 +39,15 @@
     /**
      * Maintain a list of peers that are implemented using Prism, so that
      * we can do a fast check to see whether the given peer name is an
      * intrinsic one instead of relying on reflection to do the check.
      */
-    private static final Set<String> intrinsicPeerNames;
-    static {
-        intrinsicPeerNames = new HashSet<String>(4);
-        intrinsicPeerNames.add("Crop");
-        intrinsicPeerNames.add("Flood");
-        intrinsicPeerNames.add("Merge");
-        intrinsicPeerNames.add("Reflection");
-    }
+    private static final Set<String> INTRINSIC_PEER_NAMES = Set.of(
+        "Crop",
+        "Flood",
+        "Merge",
+        "Reflection");
 
     /**
      * Private constructor to prevent instantiation.
      */
     protected PrRenderer() {
@@ -88,8 +84,8 @@
         } catch (Throwable e) {}
         return null;
     }
 
     public static boolean isIntrinsicPeer(String name) {
-        return intrinsicPeerNames.contains(name);
+        return INTRINSIC_PEER_NAMES.contains(name);
     }
 }
