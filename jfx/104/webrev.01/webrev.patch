diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ColorPickerSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ColorPickerSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ColorPickerSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ColorPickerSkin.java
@@ -52,11 +52,10 @@
 
 import javafx.css.converter.SizeConverter;
 import javafx.css.converter.StringConverter;
 import com.sun.javafx.scene.control.behavior.ColorPickerBehavior;
 
-import java.util.HashMap;
 import java.util.Map;
 
 import javafx.scene.control.ColorPicker;
 import javafx.scene.control.TextField;
 import javafx.beans.property.BooleanProperty;
@@ -279,11 +278,11 @@
         if (!colorLabelVisible.get()) {
             return super.computePrefWidth(height, topInset, rightInset, bottomInset, leftInset);
         }
         String displayNodeText = displayNode.getText();
         double width = 0;
-        for (String name : colorNameMap.values()) {
+        for (String name : COLOR_NAME_MAP.values()) {
             displayNode.setText(name);
             width = Math.max(width, super.computePrefWidth(height, topInset, rightInset, bottomInset, leftInset));
         }
         displayNode.setText(Utils.formatHexString(Color.BLACK)); // #000000
         width = Math.max(width, super.computePrefWidth(height, topInset, rightInset, bottomInset, leftInset));
@@ -345,195 +344,193 @@
         } else if (styleClass.contains(ColorPicker.STYLE_CLASS_SPLIT_BUTTON)) {
             setMode(ComboBoxMode.SPLITBUTTON);
         }
     }
 
-    private static final Map<Color, String> colorNameMap = new HashMap<>(30);
-    private static final Map<Color, String> cssNameMap = new HashMap<>(139);
-    static {
-        // Translatable display names for the most common colors
-        colorNameMap.put(TRANSPARENT, Properties.getColorPickerString("colorName.transparent"));
-        colorNameMap.put(BLACK,       Properties.getColorPickerString("colorName.black"));
-        colorNameMap.put(BLUE,        Properties.getColorPickerString("colorName.blue"));
-        colorNameMap.put(CYAN,        Properties.getColorPickerString("colorName.cyan"));
-        colorNameMap.put(DARKBLUE,    Properties.getColorPickerString("colorName.darkblue"));
-        colorNameMap.put(DARKCYAN,    Properties.getColorPickerString("colorName.darkcyan"));
-        colorNameMap.put(DARKGRAY,    Properties.getColorPickerString("colorName.darkgray"));
-        colorNameMap.put(DARKGREEN,   Properties.getColorPickerString("colorName.darkgreen"));
-        colorNameMap.put(DARKMAGENTA, Properties.getColorPickerString("colorName.darkmagenta"));
-        colorNameMap.put(DARKRED,     Properties.getColorPickerString("colorName.darkred"));
-        colorNameMap.put(GRAY,        Properties.getColorPickerString("colorName.gray"));
-        colorNameMap.put(GREEN,       Properties.getColorPickerString("colorName.green"));
-        colorNameMap.put(LIGHTBLUE,   Properties.getColorPickerString("colorName.lightblue"));
-        colorNameMap.put(LIGHTCYAN,   Properties.getColorPickerString("colorName.lightcyan"));
-        colorNameMap.put(LIGHTGRAY,   Properties.getColorPickerString("colorName.lightgray"));
-        colorNameMap.put(LIGHTGREEN,  Properties.getColorPickerString("colorName.lightgreen"));
-        colorNameMap.put(LIGHTYELLOW, Properties.getColorPickerString("colorName.lightyellow"));
-        colorNameMap.put(LIME,        Properties.getColorPickerString("colorName.lime"));
-        colorNameMap.put(MAGENTA,     Properties.getColorPickerString("colorName.magenta"));
-        colorNameMap.put(MAROON,      Properties.getColorPickerString("colorName.maroon"));
-        colorNameMap.put(MEDIUMBLUE,  Properties.getColorPickerString("colorName.mediumblue"));
-        colorNameMap.put(NAVY,        Properties.getColorPickerString("colorName.navy"));
-        colorNameMap.put(OLIVE,       Properties.getColorPickerString("colorName.olive"));
-        colorNameMap.put(ORANGE,      Properties.getColorPickerString("colorName.orange"));
-        colorNameMap.put(PINK,        Properties.getColorPickerString("colorName.pink"));
-        colorNameMap.put(PURPLE,      Properties.getColorPickerString("colorName.purple"));
-        colorNameMap.put(RED,         Properties.getColorPickerString("colorName.red"));
-        colorNameMap.put(TEAL,        Properties.getColorPickerString("colorName.teal"));
-        colorNameMap.put(WHITE,       Properties.getColorPickerString("colorName.white"));
-        colorNameMap.put(YELLOW,      Properties.getColorPickerString("colorName.yellow"));
-
-        // CSS names.
-        // Note that synonyms (such as "grey") have been removed here,
-        // since a color can be presented with only one name in this
-        // skin. If a reverse map is created for parsing names in the
-        // future, then the synonyms should be included there. For a
-        // full list of CSS names, see Color.java.
-        cssNameMap.put(ALICEBLUE,            "aliceblue");
-        cssNameMap.put(ANTIQUEWHITE,         "antiquewhite");
-        cssNameMap.put(AQUAMARINE,           "aquamarine");
-        cssNameMap.put(AZURE,                "azure");
-        cssNameMap.put(BEIGE,                "beige");
-        cssNameMap.put(BISQUE,               "bisque");
-        cssNameMap.put(BLACK,                "black");
-        cssNameMap.put(BLANCHEDALMOND,       "blanchedalmond");
-        cssNameMap.put(BLUE,                 "blue");
-        cssNameMap.put(BLUEVIOLET,           "blueviolet");
-        cssNameMap.put(BROWN,                "brown");
-        cssNameMap.put(BURLYWOOD,            "burlywood");
-        cssNameMap.put(CADETBLUE,            "cadetblue");
-        cssNameMap.put(CHARTREUSE,           "chartreuse");
-        cssNameMap.put(CHOCOLATE,            "chocolate");
-        cssNameMap.put(CORAL,                "coral");
-        cssNameMap.put(CORNFLOWERBLUE,       "cornflowerblue");
-        cssNameMap.put(CORNSILK,             "cornsilk");
-        cssNameMap.put(CRIMSON,              "crimson");
-        cssNameMap.put(CYAN,                 "cyan");
-        cssNameMap.put(DARKBLUE,             "darkblue");
-        cssNameMap.put(DARKCYAN,             "darkcyan");
-        cssNameMap.put(DARKGOLDENROD,        "darkgoldenrod");
-        cssNameMap.put(DARKGRAY,             "darkgray");
-        cssNameMap.put(DARKGREEN,            "darkgreen");
-        cssNameMap.put(DARKKHAKI,            "darkkhaki");
-        cssNameMap.put(DARKMAGENTA,          "darkmagenta");
-        cssNameMap.put(DARKOLIVEGREEN,       "darkolivegreen");
-        cssNameMap.put(DARKORANGE,           "darkorange");
-        cssNameMap.put(DARKORCHID,           "darkorchid");
-        cssNameMap.put(DARKRED,              "darkred");
-        cssNameMap.put(DARKSALMON,           "darksalmon");
-        cssNameMap.put(DARKSEAGREEN,         "darkseagreen");
-        cssNameMap.put(DARKSLATEBLUE,        "darkslateblue");
-        cssNameMap.put(DARKSLATEGRAY,        "darkslategray");
-        cssNameMap.put(DARKTURQUOISE,        "darkturquoise");
-        cssNameMap.put(DARKVIOLET,           "darkviolet");
-        cssNameMap.put(DEEPPINK,             "deeppink");
-        cssNameMap.put(DEEPSKYBLUE,          "deepskyblue");
-        cssNameMap.put(DIMGRAY,              "dimgray");
-        cssNameMap.put(DODGERBLUE,           "dodgerblue");
-        cssNameMap.put(FIREBRICK,            "firebrick");
-        cssNameMap.put(FLORALWHITE,          "floralwhite");
-        cssNameMap.put(FORESTGREEN,          "forestgreen");
-        cssNameMap.put(GAINSBORO,            "gainsboro");
-        cssNameMap.put(GHOSTWHITE,           "ghostwhite");
-        cssNameMap.put(GOLD,                 "gold");
-        cssNameMap.put(GOLDENROD,            "goldenrod");
-        cssNameMap.put(GRAY,                 "gray");
-        cssNameMap.put(GREEN,                "green");
-        cssNameMap.put(GREENYELLOW,          "greenyellow");
-        cssNameMap.put(HONEYDEW,             "honeydew");
-        cssNameMap.put(HOTPINK,              "hotpink");
-        cssNameMap.put(INDIANRED,            "indianred");
-        cssNameMap.put(INDIGO,               "indigo");
-        cssNameMap.put(IVORY,                "ivory");
-        cssNameMap.put(KHAKI,                "khaki");
-        cssNameMap.put(LAVENDER,             "lavender");
-        cssNameMap.put(LAVENDERBLUSH,        "lavenderblush");
-        cssNameMap.put(LAWNGREEN,            "lawngreen");
-        cssNameMap.put(LEMONCHIFFON,         "lemonchiffon");
-        cssNameMap.put(LIGHTBLUE,            "lightblue");
-        cssNameMap.put(LIGHTCORAL,           "lightcoral");
-        cssNameMap.put(LIGHTCYAN,            "lightcyan");
-        cssNameMap.put(LIGHTGOLDENRODYELLOW, "lightgoldenrodyellow");
-        cssNameMap.put(LIGHTGRAY,            "lightgray");
-        cssNameMap.put(LIGHTGREEN,           "lightgreen");
-        cssNameMap.put(LIGHTPINK,            "lightpink");
-        cssNameMap.put(LIGHTSALMON,          "lightsalmon");
-        cssNameMap.put(LIGHTSEAGREEN,        "lightseagreen");
-        cssNameMap.put(LIGHTSKYBLUE,         "lightskyblue");
-        cssNameMap.put(LIGHTSLATEGRAY,       "lightslategray");
-        cssNameMap.put(LIGHTSTEELBLUE,       "lightsteelblue");
-        cssNameMap.put(LIGHTYELLOW,          "lightyellow");
-        cssNameMap.put(LIME,                 "lime");
-        cssNameMap.put(LIMEGREEN,            "limegreen");
-        cssNameMap.put(LINEN,                "linen");
-        cssNameMap.put(MAGENTA,              "magenta");
-        cssNameMap.put(MAROON,               "maroon");
-        cssNameMap.put(MEDIUMAQUAMARINE,     "mediumaquamarine");
-        cssNameMap.put(MEDIUMBLUE,           "mediumblue");
-        cssNameMap.put(MEDIUMORCHID,         "mediumorchid");
-        cssNameMap.put(MEDIUMPURPLE,         "mediumpurple");
-        cssNameMap.put(MEDIUMSEAGREEN,       "mediumseagreen");
-        cssNameMap.put(MEDIUMSLATEBLUE,      "mediumslateblue");
-        cssNameMap.put(MEDIUMSPRINGGREEN,    "mediumspringgreen");
-        cssNameMap.put(MEDIUMTURQUOISE,      "mediumturquoise");
-        cssNameMap.put(MEDIUMVIOLETRED,      "mediumvioletred");
-        cssNameMap.put(MIDNIGHTBLUE,         "midnightblue");
-        cssNameMap.put(MINTCREAM,            "mintcream");
-        cssNameMap.put(MISTYROSE,            "mistyrose");
-        cssNameMap.put(MOCCASIN,             "moccasin");
-        cssNameMap.put(NAVAJOWHITE,          "navajowhite");
-        cssNameMap.put(NAVY,                 "navy");
-        cssNameMap.put(OLDLACE,              "oldlace");
-        cssNameMap.put(OLIVE,                "olive");
-        cssNameMap.put(OLIVEDRAB,            "olivedrab");
-        cssNameMap.put(ORANGE,               "orange");
-        cssNameMap.put(ORANGERED,            "orangered");
-        cssNameMap.put(ORCHID,               "orchid");
-        cssNameMap.put(PALEGOLDENROD,        "palegoldenrod");
-        cssNameMap.put(PALEGREEN,            "palegreen");
-        cssNameMap.put(PALETURQUOISE,        "paleturquoise");
-        cssNameMap.put(PALEVIOLETRED,        "palevioletred");
-        cssNameMap.put(PAPAYAWHIP,           "papayawhip");
-        cssNameMap.put(PEACHPUFF,            "peachpuff");
-        cssNameMap.put(PERU,                 "peru");
-        cssNameMap.put(PINK,                 "pink");
-        cssNameMap.put(PLUM,                 "plum");
-        cssNameMap.put(POWDERBLUE,           "powderblue");
-        cssNameMap.put(PURPLE,               "purple");
-        cssNameMap.put(RED,                  "red");
-        cssNameMap.put(ROSYBROWN,            "rosybrown");
-        cssNameMap.put(ROYALBLUE,            "royalblue");
-        cssNameMap.put(SADDLEBROWN,          "saddlebrown");
-        cssNameMap.put(SALMON,               "salmon");
-        cssNameMap.put(SANDYBROWN,           "sandybrown");
-        cssNameMap.put(SEAGREEN,             "seagreen");
-        cssNameMap.put(SEASHELL,             "seashell");
-        cssNameMap.put(SIENNA,               "sienna");
-        cssNameMap.put(SILVER,               "silver");
-        cssNameMap.put(SKYBLUE,              "skyblue");
-        cssNameMap.put(SLATEBLUE,            "slateblue");
-        cssNameMap.put(SLATEGRAY,            "slategray");
-        cssNameMap.put(SNOW,                 "snow");
-        cssNameMap.put(SPRINGGREEN,          "springgreen");
-        cssNameMap.put(STEELBLUE,            "steelblue");
-        cssNameMap.put(TAN,                  "tan");
-        cssNameMap.put(TEAL,                 "teal");
-        cssNameMap.put(THISTLE,              "thistle");
-        cssNameMap.put(TOMATO,               "tomato");
-        cssNameMap.put(TRANSPARENT,          "transparent");
-        cssNameMap.put(TURQUOISE,            "turquoise");
-        cssNameMap.put(VIOLET,               "violet");
-        cssNameMap.put(WHEAT,                "wheat");
-        cssNameMap.put(WHITE,                "white");
-        cssNameMap.put(WHITESMOKE,           "whitesmoke");
-        cssNameMap.put(YELLOW,               "yellow");
-        cssNameMap.put(YELLOWGREEN,          "yellowgreen");
-    }
+    // Translatable display names for the most common colors
+    private static final Map<Color, String> COLOR_NAME_MAP = Map.ofEntries(
+        Map.entry(TRANSPARENT, Properties.getColorPickerString("colorName.transparent")),
+        Map.entry(BLACK,       Properties.getColorPickerString("colorName.black")),
+        Map.entry(BLUE,        Properties.getColorPickerString("colorName.blue")),
+        Map.entry(CYAN,        Properties.getColorPickerString("colorName.cyan")),
+        Map.entry(DARKBLUE,    Properties.getColorPickerString("colorName.darkblue")),
+        Map.entry(DARKCYAN,    Properties.getColorPickerString("colorName.darkcyan")),
+        Map.entry(DARKGRAY,    Properties.getColorPickerString("colorName.darkgray")),
+        Map.entry(DARKGREEN,   Properties.getColorPickerString("colorName.darkgreen")),
+        Map.entry(DARKMAGENTA, Properties.getColorPickerString("colorName.darkmagenta")),
+        Map.entry(DARKRED,     Properties.getColorPickerString("colorName.darkred")),
+        Map.entry(GRAY,        Properties.getColorPickerString("colorName.gray")),
+        Map.entry(GREEN,       Properties.getColorPickerString("colorName.green")),
+        Map.entry(LIGHTBLUE,   Properties.getColorPickerString("colorName.lightblue")),
+        Map.entry(LIGHTCYAN,   Properties.getColorPickerString("colorName.lightcyan")),
+        Map.entry(LIGHTGRAY,   Properties.getColorPickerString("colorName.lightgray")),
+        Map.entry(LIGHTGREEN,  Properties.getColorPickerString("colorName.lightgreen")),
+        Map.entry(LIGHTYELLOW, Properties.getColorPickerString("colorName.lightyellow")),
+        Map.entry(LIME,        Properties.getColorPickerString("colorName.lime")),
+        Map.entry(MAGENTA,     Properties.getColorPickerString("colorName.magenta")),
+        Map.entry(MAROON,      Properties.getColorPickerString("colorName.maroon")),
+        Map.entry(MEDIUMBLUE,  Properties.getColorPickerString("colorName.mediumblue")),
+        Map.entry(NAVY,        Properties.getColorPickerString("colorName.navy")),
+        Map.entry(OLIVE,       Properties.getColorPickerString("colorName.olive")),
+        Map.entry(ORANGE,      Properties.getColorPickerString("colorName.orange")),
+        Map.entry(PINK,        Properties.getColorPickerString("colorName.pink")),
+        Map.entry(PURPLE,      Properties.getColorPickerString("colorName.purple")),
+        Map.entry(RED,         Properties.getColorPickerString("colorName.red")),
+        Map.entry(TEAL,        Properties.getColorPickerString("colorName.teal")),
+        Map.entry(WHITE,       Properties.getColorPickerString("colorName.white")),
+        Map.entry(YELLOW,      Properties.getColorPickerString("colorName.yellow")));
+
+    // CSS names.
+    // Note that synonyms (such as "grey") have been removed here,
+    // since a color can be presented with only one name in this
+    // skin. If a reverse map is created for parsing names in the
+    // future, then the synonyms should be included there. For a
+    // full list of CSS names, see Color.java.
+    private static final Map<Color, String> CSS_NAME_MAP = Map.ofEntries(
+        Map.entry(ALICEBLUE,            "aliceblue"),
+        Map.entry(ANTIQUEWHITE,         "antiquewhite"),
+        Map.entry(AQUAMARINE,           "aquamarine"),
+        Map.entry(AZURE,                "azure"),
+        Map.entry(BEIGE,                "beige"),
+        Map.entry(BISQUE,               "bisque"),
+        Map.entry(BLACK,                "black"),
+        Map.entry(BLANCHEDALMOND,       "blanchedalmond"),
+        Map.entry(BLUE,                 "blue"),
+        Map.entry(BLUEVIOLET,           "blueviolet"),
+        Map.entry(BROWN,                "brown"),
+        Map.entry(BURLYWOOD,            "burlywood"),
+        Map.entry(CADETBLUE,            "cadetblue"),
+        Map.entry(CHARTREUSE,           "chartreuse"),
+        Map.entry(CHOCOLATE,            "chocolate"),
+        Map.entry(CORAL,                "coral"),
+        Map.entry(CORNFLOWERBLUE,       "cornflowerblue"),
+        Map.entry(CORNSILK,             "cornsilk"),
+        Map.entry(CRIMSON,              "crimson"),
+        Map.entry(CYAN,                 "cyan"),
+        Map.entry(DARKBLUE,             "darkblue"),
+        Map.entry(DARKCYAN,             "darkcyan"),
+        Map.entry(DARKGOLDENROD,        "darkgoldenrod"),
+        Map.entry(DARKGRAY,             "darkgray"),
+        Map.entry(DARKGREEN,            "darkgreen"),
+        Map.entry(DARKKHAKI,            "darkkhaki"),
+        Map.entry(DARKMAGENTA,          "darkmagenta"),
+        Map.entry(DARKOLIVEGREEN,       "darkolivegreen"),
+        Map.entry(DARKORANGE,           "darkorange"),
+        Map.entry(DARKORCHID,           "darkorchid"),
+        Map.entry(DARKRED,              "darkred"),
+        Map.entry(DARKSALMON,           "darksalmon"),
+        Map.entry(DARKSEAGREEN,         "darkseagreen"),
+        Map.entry(DARKSLATEBLUE,        "darkslateblue"),
+        Map.entry(DARKSLATEGRAY,        "darkslategray"),
+        Map.entry(DARKTURQUOISE,        "darkturquoise"),
+        Map.entry(DARKVIOLET,           "darkviolet"),
+        Map.entry(DEEPPINK,             "deeppink"),
+        Map.entry(DEEPSKYBLUE,          "deepskyblue"),
+        Map.entry(DIMGRAY,              "dimgray"),
+        Map.entry(DODGERBLUE,           "dodgerblue"),
+        Map.entry(FIREBRICK,            "firebrick"),
+        Map.entry(FLORALWHITE,          "floralwhite"),
+        Map.entry(FORESTGREEN,          "forestgreen"),
+        Map.entry(GAINSBORO,            "gainsboro"),
+        Map.entry(GHOSTWHITE,           "ghostwhite"),
+        Map.entry(GOLD,                 "gold"),
+        Map.entry(GOLDENROD,            "goldenrod"),
+        Map.entry(GRAY,                 "gray"),
+        Map.entry(GREEN,                "green"),
+        Map.entry(GREENYELLOW,          "greenyellow"),
+        Map.entry(HONEYDEW,             "honeydew"),
+        Map.entry(HOTPINK,              "hotpink"),
+        Map.entry(INDIANRED,            "indianred"),
+        Map.entry(INDIGO,               "indigo"),
+        Map.entry(IVORY,                "ivory"),
+        Map.entry(KHAKI,                "khaki"),
+        Map.entry(LAVENDER,             "lavender"),
+        Map.entry(LAVENDERBLUSH,        "lavenderblush"),
+        Map.entry(LAWNGREEN,            "lawngreen"),
+        Map.entry(LEMONCHIFFON,         "lemonchiffon"),
+        Map.entry(LIGHTBLUE,            "lightblue"),
+        Map.entry(LIGHTCORAL,           "lightcoral"),
+        Map.entry(LIGHTCYAN,            "lightcyan"),
+        Map.entry(LIGHTGOLDENRODYELLOW, "lightgoldenrodyellow"),
+        Map.entry(LIGHTGRAY,            "lightgray"),
+        Map.entry(LIGHTGREEN,           "lightgreen"),
+        Map.entry(LIGHTPINK,            "lightpink"),
+        Map.entry(LIGHTSALMON,          "lightsalmon"),
+        Map.entry(LIGHTSEAGREEN,        "lightseagreen"),
+        Map.entry(LIGHTSKYBLUE,         "lightskyblue"),
+        Map.entry(LIGHTSLATEGRAY,       "lightslategray"),
+        Map.entry(LIGHTSTEELBLUE,       "lightsteelblue"),
+        Map.entry(LIGHTYELLOW,          "lightyellow"),
+        Map.entry(LIME,                 "lime"),
+        Map.entry(LIMEGREEN,            "limegreen"),
+        Map.entry(LINEN,                "linen"),
+        Map.entry(MAGENTA,              "magenta"),
+        Map.entry(MAROON,               "maroon"),
+        Map.entry(MEDIUMAQUAMARINE,     "mediumaquamarine"),
+        Map.entry(MEDIUMBLUE,           "mediumblue"),
+        Map.entry(MEDIUMORCHID,         "mediumorchid"),
+        Map.entry(MEDIUMPURPLE,         "mediumpurple"),
+        Map.entry(MEDIUMSEAGREEN,       "mediumseagreen"),
+        Map.entry(MEDIUMSLATEBLUE,      "mediumslateblue"),
+        Map.entry(MEDIUMSPRINGGREEN,    "mediumspringgreen"),
+        Map.entry(MEDIUMTURQUOISE,      "mediumturquoise"),
+        Map.entry(MEDIUMVIOLETRED,      "mediumvioletred"),
+        Map.entry(MIDNIGHTBLUE,         "midnightblue"),
+        Map.entry(MINTCREAM,            "mintcream"),
+        Map.entry(MISTYROSE,            "mistyrose"),
+        Map.entry(MOCCASIN,             "moccasin"),
+        Map.entry(NAVAJOWHITE,          "navajowhite"),
+        Map.entry(NAVY,                 "navy"),
+        Map.entry(OLDLACE,              "oldlace"),
+        Map.entry(OLIVE,                "olive"),
+        Map.entry(OLIVEDRAB,            "olivedrab"),
+        Map.entry(ORANGE,               "orange"),
+        Map.entry(ORANGERED,            "orangered"),
+        Map.entry(ORCHID,               "orchid"),
+        Map.entry(PALEGOLDENROD,        "palegoldenrod"),
+        Map.entry(PALEGREEN,            "palegreen"),
+        Map.entry(PALETURQUOISE,        "paleturquoise"),
+        Map.entry(PALEVIOLETRED,        "palevioletred"),
+        Map.entry(PAPAYAWHIP,           "papayawhip"),
+        Map.entry(PEACHPUFF,            "peachpuff"),
+        Map.entry(PERU,                 "peru"),
+        Map.entry(PINK,                 "pink"),
+        Map.entry(PLUM,                 "plum"),
+        Map.entry(POWDERBLUE,           "powderblue"),
+        Map.entry(PURPLE,               "purple"),
+        Map.entry(RED,                  "red"),
+        Map.entry(ROSYBROWN,            "rosybrown"),
+        Map.entry(ROYALBLUE,            "royalblue"),
+        Map.entry(SADDLEBROWN,          "saddlebrown"),
+        Map.entry(SALMON,               "salmon"),
+        Map.entry(SANDYBROWN,           "sandybrown"),
+        Map.entry(SEAGREEN,             "seagreen"),
+        Map.entry(SEASHELL,             "seashell"),
+        Map.entry(SIENNA,               "sienna"),
+        Map.entry(SILVER,               "silver"),
+        Map.entry(SKYBLUE,              "skyblue"),
+        Map.entry(SLATEBLUE,            "slateblue"),
+        Map.entry(SLATEGRAY,            "slategray"),
+        Map.entry(SNOW,                 "snow"),
+        Map.entry(SPRINGGREEN,          "springgreen"),
+        Map.entry(STEELBLUE,            "steelblue"),
+        Map.entry(TAN,                  "tan"),
+        Map.entry(TEAL,                 "teal"),
+        Map.entry(THISTLE,              "thistle"),
+        Map.entry(TOMATO,               "tomato"),
+        Map.entry(TRANSPARENT,          "transparent"),
+        Map.entry(TURQUOISE,            "turquoise"),
+        Map.entry(VIOLET,               "violet"),
+        Map.entry(WHEAT,                "wheat"),
+        Map.entry(WHITE,                "white"),
+        Map.entry(WHITESMOKE,           "whitesmoke"),
+        Map.entry(YELLOW,               "yellow"),
+        Map.entry(YELLOWGREEN,          "yellowgreen"));
 
     static String colorDisplayName(Color c) {
         if (c != null) {
-            String displayName = colorNameMap.get(c);
+            String displayName = COLOR_NAME_MAP.get(c);
             if (displayName == null) {
                 displayName = Utils.formatHexString(c);
             }
             return displayName;
         } else {
@@ -542,18 +539,18 @@
     }
 
     static String tooltipString(Color c) {
         if (c != null) {
             String tooltipStr = "";
-            String displayName = colorNameMap.get(c);
+            String displayName = COLOR_NAME_MAP.get(c);
             if (displayName != null) {
                 tooltipStr += displayName + " ";
             }
 
             tooltipStr += Utils.formatHexString(c);
 
-            String cssName = cssNameMap.get(c);
+            String cssName = CSS_NAME_MAP.get(c);
             if (cssName != null) {
                 tooltipStr += " (css: " + cssName + ")";
             }
             return tooltipStr;
         } else {
diff a/modules/javafx.fxml/src/main/java/com/sun/javafx/fxml/builder/ProxyBuilder.java b/modules/javafx.fxml/src/main/java/com/sun/javafx/fxml/builder/ProxyBuilder.java
--- a/modules/javafx.fxml/src/main/java/com/sun/javafx/fxml/builder/ProxyBuilder.java
+++ b/modules/javafx.fxml/src/main/java/com/sun/javafx/fxml/builder/ProxyBuilder.java
@@ -635,24 +635,21 @@
 
         return l.toArray((Object[]) Array.newInstance(arrayType, 0));
     }
 
     private static Object getDefaultValue(Class clazz) {
-        return defaultsMap.get(clazz);
+        return DEFAULTS_MAP.get(clazz);
     }
 
-    private static final Map<Class<?>, Object> defaultsMap;
-
+    private static final Map<Class<?>, Object> DEFAULTS_MAP = new HashMap<>(9);
     static {
-        defaultsMap = new HashMap<>();
-        defaultsMap.put(byte.class, (byte) 0);
-        defaultsMap.put(short.class, (short) 0);
-        defaultsMap.put(int.class, 0);
-        defaultsMap.put(long.class, 0L);
-        defaultsMap.put(int.class, 0);
-        defaultsMap.put(float.class, 0.0f);
-        defaultsMap.put(double.class, 0.0d);
-        defaultsMap.put(char.class, '\u0000');
-        defaultsMap.put(boolean.class, false);
-        defaultsMap.put(Object.class, null);
+        DEFAULTS_MAP.put(byte.class,    (byte) 0);
+        DEFAULTS_MAP.put(short.class,   (short) 0);
+        DEFAULTS_MAP.put(int.class,     0);
+        DEFAULTS_MAP.put(long.class,    0L);
+        DEFAULTS_MAP.put(float.class,   0.0f);
+        DEFAULTS_MAP.put(double.class,  0.0d);
+        DEFAULTS_MAP.put(char.class,   '\u0000');
+        DEFAULTS_MAP.put(boolean.class, false);
+        DEFAULTS_MAP.put(Object.class,  null);
     }
 }
diff a/modules/javafx.graphics/src/jslc/java/com/sun/scenario/effect/compiler/backend/hw/ES2Backend.java b/modules/javafx.graphics/src/jslc/java/com/sun/scenario/effect/compiler/backend/hw/ES2Backend.java
--- a/modules/javafx.graphics/src/jslc/java/com/sun/scenario/effect/compiler/backend/hw/ES2Backend.java
+++ b/modules/javafx.graphics/src/jslc/java/com/sun/scenario/effect/compiler/backend/hw/ES2Backend.java
@@ -23,11 +23,10 @@
  * questions.
  */
 
 package com.sun.scenario.effect.compiler.backend.hw;
 
-import java.util.HashMap;
 import java.util.Map;
 import com.sun.scenario.effect.compiler.JSLParser;
 import com.sun.scenario.effect.compiler.model.Precision;
 import com.sun.scenario.effect.compiler.tree.FuncDef;
 import com.sun.scenario.effect.compiler.tree.JSLVisitor;
@@ -40,35 +39,31 @@
         super(parser, visitor);
     }
 
     // GLSL v1.10 no longer has gl_TexCoord*; these are now passed in
     // from vertex shader as texCoord0/1
-    private static final Map<String, String> varMap = new HashMap<String, String>();
-    static {
-        varMap.put("pos0",     "texCoord0");
-        varMap.put("pos1",     "texCoord1");
-        varMap.put("color",    "gl_FragColor");
-        varMap.put("jsl_vertexColor", "perVertexColor");
-    }
+    private static final Map<String, String> VAR_MAP = Map.of(
+        "pos0",            "texCoord0",
+        "pos1",            "texCoord1",
+        "color",           "gl_FragColor",
+        "jsl_vertexColor", "perVertexColor");
 
-    private static final Map<String, String> funcMap = new HashMap<String, String>();
-    static {
-        funcMap.put("sample", "texture2D");
-        funcMap.put("ddx", "dFdx");
-        funcMap.put("ddy", "dFdy");
-        funcMap.put("intcast", "int");
-    }
+    private static final Map<String, String> FUNC_MAP = Map.of(
+        "sample",  "texture2D",
+        "ddx",     "dFdx",
+        "ddy",     "dFdy",
+        "intcast", "int");
 
     @Override
     protected String getVar(String v) {
-        String s = varMap.get(v);
+        String s = VAR_MAP.get(v);
         return (s != null) ? s : v;
     }
 
     @Override
     protected String getFuncName(String f) {
-        String s = funcMap.get(f);
+        String s = FUNC_MAP.get(f);
         return (s != null) ? s : f;
     }
 
     @Override
     protected String getPrecision(Precision p) {
diff a/modules/javafx.graphics/src/jslc/java/com/sun/scenario/effect/compiler/backend/hw/GLSLBackend.java b/modules/javafx.graphics/src/jslc/java/com/sun/scenario/effect/compiler/backend/hw/GLSLBackend.java
--- a/modules/javafx.graphics/src/jslc/java/com/sun/scenario/effect/compiler/backend/hw/GLSLBackend.java
+++ b/modules/javafx.graphics/src/jslc/java/com/sun/scenario/effect/compiler/backend/hw/GLSLBackend.java
@@ -23,11 +23,10 @@
  * questions.
  */
 
 package com.sun.scenario.effect.compiler.backend.hw;
 
-import java.util.HashMap;
 import java.util.Map;
 import com.sun.scenario.effect.compiler.JSLParser;
 import com.sun.scenario.effect.compiler.model.Qualifier;
 import com.sun.scenario.effect.compiler.model.Type;
 import com.sun.scenario.effect.compiler.tree.JSLVisitor;
@@ -38,53 +37,45 @@
 
     public GLSLBackend(JSLParser parser, JSLVisitor visitor) {
         super(parser, visitor);
     }
 
-    private static final Map<String, String> qualMap = new HashMap<String, String>();
-    static {
-        qualMap.put("const", "const");
-        qualMap.put("param", "uniform");
-    }
-
-    private static final Map<String, String> typeMap = new HashMap<String, String>();
-    static {
-        typeMap.put("void",    "void");
-        typeMap.put("float",   "float");
-        typeMap.put("float2",  "vec2");
-        typeMap.put("float3",  "vec3");
-        typeMap.put("float4",  "vec4");
-        typeMap.put("int",     "int");
-        typeMap.put("int2",    "ivec2");
-        typeMap.put("int3",    "ivec3");
-        typeMap.put("int4",    "ivec4");
-        typeMap.put("bool",    "bool");
-        typeMap.put("bool2",   "bvec2");
-        typeMap.put("bool3",   "bvec3");
-        typeMap.put("bool4",   "bvec4");
-        typeMap.put("sampler", "sampler2D");
-        typeMap.put("lsampler","sampler2D");
-        typeMap.put("fsampler","sampler2D");
-    }
-
-    private static final Map<String, String> varMap = new HashMap<String, String>();
-    static {
-        varMap.put("pos0", "gl_TexCoord[0].st");
-        varMap.put("pos1", "gl_TexCoord[1].st");
-        varMap.put("color", "gl_FragColor");
-        varMap.put("jsl_vertexColor", "gl_Color");
-    }
-
-    private static final Map<String, String> funcMap = new HashMap<String, String>();
-    static {
-        funcMap.put("sample", "jsl_sample");
-        funcMap.put("ddx", "dFdx");
-        funcMap.put("ddy", "dFdy");
-        funcMap.put("intcast", "int");
-        funcMap.put("any", "any");
-        funcMap.put("length", "length");
-    }
+    private static final Map<String, String> QUAL_MAP = Map.of(
+        "const", "const",
+        "param", "uniform");
+
+    private static final Map<String, String> TYPE_MAP = Map.ofEntries(
+        Map.entry("void",     "void"),
+        Map.entry("float",    "float"),
+        Map.entry("float2",   "vec2"),
+        Map.entry("float3",   "vec3"),
+        Map.entry("float4",   "vec4"),
+        Map.entry("int",      "int"),
+        Map.entry("int2",     "ivec2"),
+        Map.entry("int3",     "ivec3"),
+        Map.entry("int4",     "ivec4"),
+        Map.entry("bool",     "bool"),
+        Map.entry("bool2",    "bvec2"),
+        Map.entry("bool3",    "bvec3"),
+        Map.entry("bool4",    "bvec4"),
+        Map.entry("sampler",  "sampler2D"),
+        Map.entry("lsampler", "sampler2D"),
+        Map.entry("fsampler", "sampler2D"));
+
+    private static final Map<String, String> VAR_MAP = Map.of(
+        "pos0",            "gl_TexCoord[0].st",
+        "pos1",            "gl_TexCoord[1].st",
+        "color",           "gl_FragColor",
+        "jsl_vertexColor", "gl_Color");
+
+    private static final Map<String, String> FUNC_MAP = Map.of(
+        "sample",  "jsl_sample",
+        "ddx",     "dFdx",
+        "ddy",     "dFdy",
+        "intcast", "int",
+        "any",     "any",
+        "length",  "length");
 
 
     static String PIXCOORD = "vec2 pixcoord = vec2(\n"+
         "    gl_FragCoord.x-jsl_pixCoordOffset.x,\n" +
         "    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);\n";
@@ -92,27 +83,27 @@
     static String MAIN = "void main() {\n";
 
 
     @Override
     protected String getType(Type t) {
-        return typeMap.get(t.toString());
+        return TYPE_MAP.get(t.toString());
     }
 
     @Override
     protected String getQualifier(Qualifier q) {
-        return qualMap.get(q.toString());
+        return QUAL_MAP.get(q.toString());
     }
 
     @Override
     protected String getVar(String v) {
-        String s = varMap.get(v);
+        String s = VAR_MAP.get(v);
         return (s != null) ? s : v;
     }
 
     @Override
     protected String getFuncName(String f) {
-        String s = funcMap.get(f);
+        String s = FUNC_MAP.get(f);
         return (s != null) ? s : f;
     }
 
     @Override
     protected String getHeader() {
diff a/modules/javafx.graphics/src/jslc/java/com/sun/scenario/effect/compiler/backend/hw/HLSLBackend.java b/modules/javafx.graphics/src/jslc/java/com/sun/scenario/effect/compiler/backend/hw/HLSLBackend.java
--- a/modules/javafx.graphics/src/jslc/java/com/sun/scenario/effect/compiler/backend/hw/HLSLBackend.java
+++ b/modules/javafx.graphics/src/jslc/java/com/sun/scenario/effect/compiler/backend/hw/HLSLBackend.java
@@ -23,11 +23,10 @@
  * questions.
  */
 
 package com.sun.scenario.effect.compiler.backend.hw;
 
-import java.util.HashMap;
 import java.util.Map;
 import com.sun.scenario.effect.compiler.JSLParser;
 import com.sun.scenario.effect.compiler.model.BaseType;
 import com.sun.scenario.effect.compiler.model.Function;
 import com.sun.scenario.effect.compiler.model.Qualifier;
@@ -44,70 +43,62 @@
 
     public HLSLBackend(JSLParser parser, JSLVisitor visitor) {
         super(parser, visitor);
     }
 
-    private static final Map<String, String> qualMap = new HashMap<String, String>();
-    static {
-        qualMap.put("const", "");
-        qualMap.put("param", "");
-    }
+    private static final Map<String, String> QUAL_MAP = Map.of(
+        "const", "",
+        "param", "");
 
-    private static final Map<String, String> typeMap = new HashMap<String, String>();
-    static {
-        typeMap.put("void",    "void");
-        typeMap.put("float",   "float");
-        typeMap.put("float2",  "float2");
-        typeMap.put("float3",  "float3");
-        typeMap.put("float4",  "float4");
-        typeMap.put("int",     "int");
-        typeMap.put("int2",    "int2");
-        typeMap.put("int3",    "int3");
-        typeMap.put("int4",    "int4");
-        typeMap.put("bool",    "bool");
-        typeMap.put("bool2",   "bool2");
-        typeMap.put("bool3",   "bool3");
-        typeMap.put("bool4",   "bool4");
-        typeMap.put("sampler", "sampler2D");
-        typeMap.put("lsampler","sampler2D");
-        typeMap.put("fsampler","sampler2D");
-    }
+    private static final Map<String, String> TYPE_MAP = Map.ofEntries(
+        Map.entry("void",     "void"),
+        Map.entry("float",    "float"),
+        Map.entry("float2",   "float2"),
+        Map.entry("float3",   "float3"),
+        Map.entry("float4",   "float4"),
+        Map.entry("int",      "int"),
+        Map.entry("int2",     "int2"),
+        Map.entry("int3",     "int3"),
+        Map.entry("int4",     "int4"),
+        Map.entry("bool",     "bool"),
+        Map.entry("bool2",    "bool2"),
+        Map.entry("bool3",    "bool3"),
+        Map.entry("bool4",    "bool4"),
+        Map.entry("sampler",  "sampler2D"),
+        Map.entry("lsampler", "sampler2D"),
+        Map.entry("fsampler", "sampler2D"));
 
-    private static final Map<String, String> varMap = new HashMap<String, String>();
-    static {
-    }
+    private static final Map<String, String> VAR_MAP = Map.of();
 
-    private static final Map<String, String> funcMap = new HashMap<String, String>();
-    static {
-        funcMap.put("sample", "tex2D");
-        funcMap.put("fract", "frac");
-        funcMap.put("mix", "lerp");
-        funcMap.put("mod", "fmod");
-        funcMap.put("intcast", "int");
-        funcMap.put("any", "any");
-        funcMap.put("length", "length");
-    }
+    private static final Map<String, String> FUNC_MAP = Map.of(
+        "sample",  "tex2D",
+        "fract",   "frac",
+        "mix",     "lerp",
+        "mod",     "fmod",
+        "intcast", "int",
+        "any",     "any",
+        "length",  "length");
 
     @Override
     protected String getType(Type t) {
-        return typeMap.get(t.toString());
+        return TYPE_MAP.get(t.toString());
     }
 
     @Override
     protected String getQualifier(Qualifier q) {
-        return qualMap.get(q.toString());
+        return QUAL_MAP.get(q.toString());
     }
 
     @Override
     protected String getVar(String v) {
-        String s = varMap.get(v);
+        String s = VAR_MAP.get(v);
         return (s != null) ? s : v;
     }
 
     @Override
     protected String getFuncName(String f) {
-        String s = funcMap.get(f);
+        String s = FUNC_MAP.get(f);
         return (s != null) ? s : f;
     }
 
     @Override
     public void visitFuncDef(FuncDef d) {
diff a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/mac/MacAccessible.java b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/mac/MacAccessible.java
--- a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/mac/MacAccessible.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/mac/MacAccessible.java
@@ -597,11 +597,11 @@
 
     /*
      * Do not access the following lists directly from the Mac enums.
      * It can cause the static initialization to happen in an unexpected order.
      */
-    private static final List<MacAttribute> baseAttributes = Arrays.asList(
+    private static final List<MacAttribute> BASE_ATTRIBUTES = List.of(
         MacAttribute.NSAccessibilityRoleAttribute,
         MacAttribute.NSAccessibilityRoleDescriptionAttribute,
         MacAttribute.NSAccessibilityHelpAttribute,
         MacAttribute.NSAccessibilityFocusedAttribute,
         MacAttribute.NSAccessibilityParentAttribute,
@@ -611,21 +611,21 @@
         MacAttribute.NSAccessibilityWindowAttribute,
         MacAttribute.NSAccessibilityTopLevelUIElementAttribute,
         MacAttribute.NSAccessibilityTitleUIElementAttribute
     );
 
-    private static final List<MacAttribute> textAttributes = Arrays.asList(
+    private static final List<MacAttribute> TEXT_ATTRIBUTES = List.of(
         MacAttribute.NSAccessibilityEnabledAttribute,
         MacAttribute.NSAccessibilityValueAttribute,
         MacAttribute.NSAccessibilityNumberOfCharactersAttribute,
         MacAttribute.NSAccessibilitySelectedTextAttribute,
         MacAttribute.NSAccessibilitySelectedTextRangeAttribute,
         MacAttribute.NSAccessibilityInsertionPointLineNumberAttribute,
         MacAttribute.NSAccessibilityVisibleCharacterRangeAttribute
     );
 
-    private static final List<MacAttribute> textParameterizedAttributes = Arrays.asList(
+    private static final List<MacAttribute> TEXT_PARAMETRIZED_ATTRIBUTES = List.of(
         MacAttribute.NSAccessibilityLineForIndexParameterizedAttribute,
         MacAttribute.NSAccessibilityRangeForLineParameterizedAttribute,
         MacAttribute.NSAccessibilityAttributedStringForRangeParameterizedAttribute,
         MacAttribute.NSAccessibilityStringForRangeParameterizedAttribute
     );
@@ -966,11 +966,11 @@
     /* NSAccessibility Protocol - JNI entry points */
     private long[] accessibilityAttributeNames() {
         if (getView() != null) return null; /* Let NSView answer for the Scene */
         AccessibleRole role = (AccessibleRole)getAttribute(ROLE);
         if (role != null) {
-            List<MacAttribute> attrs = new ArrayList<>(baseAttributes);
+            List<MacAttribute> attrs = new ArrayList<>(BASE_ATTRIBUTES);
             MacRole macRole = getRole(role);
             if (macRole != null && macRole.macAttributes != null) {
                 attrs.addAll(macRole.macAttributes);
             }
 
@@ -999,11 +999,11 @@
                 case TEXT:
                 case TEXT_FIELD:
                 case TEXT_AREA:
                 case PASSWORD_FIELD:
                 case COMBO_BOX:
-                    attrs.addAll(textAttributes);
+                    attrs.addAll(TEXT_ATTRIBUTES);
                     break;
                 default:
             }
             return attrs.stream().mapToLong(a -> a.ptr).toArray();
         }
@@ -1702,11 +1702,11 @@
                 case TEXT:
                 case TEXT_FIELD:
                 case TEXT_AREA:
                 case PASSWORD_FIELD:
                 case COMBO_BOX:
-                    attrs.addAll(textParameterizedAttributes);
+                    attrs.addAll(TEXT_PARAMETRIZED_ATTRIBUTES);
                     break;
                 default:
             }
             return attrs.stream().mapToLong(a -> a.ptr).toArray();
         }
diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/iio/ios/IosImageLoader.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/iio/ios/IosImageLoader.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/iio/ios/IosImageLoader.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/iio/ios/IosImageLoader.java
@@ -38,11 +38,10 @@
 import java.nio.ByteBuffer;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 
 import java.util.Map;
-import java.util.HashMap;
 
 import java.net.URL;
 import java.net.MalformedURLException;
 
 /**
@@ -60,11 +59,11 @@
     public static final int PALETTE_TRANS = 6;
     public static final int RGB = 7;
     public static final int RGBA = 8;
     public static final int RGBA_PRE = 9;
 
-    private static final Map<Integer, ImageType> colorSpaceMapping = new HashMap<Integer, ImageType>();
+    private static final Map<Integer, ImageType> COLOR_SPACE_MAPPING;
 
     /** Pointer to the native loader */
     private long structPointer;
 
     /** Set by native code */
@@ -113,20 +112,21 @@
         AccessController.doPrivileged((PrivilegedAction<Object>) () -> {
             NativeLibLoader.loadLibrary("nativeiio");
             return null;
         });
 
-        colorSpaceMapping.put(GRAY, ImageType.GRAY);
-        colorSpaceMapping.put(GRAY_ALPHA, ImageType.GRAY_ALPHA);
-        colorSpaceMapping.put(GRAY_ALPHA_PRE, ImageType.GRAY_ALPHA_PRE);
-        colorSpaceMapping.put(PALETTE, ImageType.PALETTE);
-        colorSpaceMapping.put(PALETTE_ALPHA, ImageType.PALETTE_ALPHA);
-        colorSpaceMapping.put(PALETTE_ALPHA_PRE, ImageType.PALETTE_ALPHA_PRE);
-        colorSpaceMapping.put(PALETTE_TRANS, ImageType.PALETTE_TRANS);
-        colorSpaceMapping.put(RGB, ImageType.RGB);
-        colorSpaceMapping.put(RGBA, ImageType.RGBA);
-        colorSpaceMapping.put(RGBA_PRE, ImageType.RGBA_PRE);
+        COLOR_SPACE_MAPPING = Map.of(
+            GRAY,              ImageType.GRAY,
+            GRAY_ALPHA,        ImageType.GRAY_ALPHA,
+            GRAY_ALPHA_PRE,    ImageType.GRAY_ALPHA_PRE,
+            PALETTE,           ImageType.PALETTE,
+            PALETTE_ALPHA,     ImageType.PALETTE_ALPHA,
+            PALETTE_ALPHA_PRE, ImageType.PALETTE_ALPHA_PRE,
+            PALETTE_TRANS,     ImageType.PALETTE_TRANS,
+            RGB,               ImageType.RGB,
+            RGBA,              ImageType.RGBA,
+            RGBA_PRE,          ImageType.RGBA_PRE);
 
         initNativeLoading();
     }
 
     /** Called by the native code when input parameters are known. */
@@ -247,11 +247,11 @@
         resizeImage(structPointer, width, height);
 
         // the color model and the number of components can change when resizing
         final int nComponents = getNumberOfComponents(structPointer);
         final int colorSpaceCode = getColorSpaceCode(structPointer);
-        final ImageType imageType = colorSpaceMapping.get(colorSpaceCode);
+        final ImageType imageType = COLOR_SPACE_MAPPING.get(colorSpaceCode);
 
         final byte[] pixels = getImageBuffer(structPointer, imageIndex);
 
         return new ImageFrame(imageType,
                 ByteBuffer.wrap(pixels),
diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/scene/input/InputEventUtils.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/scene/input/InputEventUtils.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/scene/input/InputEventUtils.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/scene/input/InputEventUtils.java
@@ -30,11 +30,10 @@
 import com.sun.javafx.scene.SceneHelper;
 import com.sun.javafx.scene.SceneUtils;
 import com.sun.javafx.scene.SubSceneHelper;
 import java.util.Arrays;
 import java.util.List;
-import java.util.Collections;
 import javafx.geometry.Point2D;
 import javafx.geometry.Point3D;
 import javafx.scene.Node;
 import javafx.scene.SubScene;
 import javafx.scene.input.PickResult;
@@ -109,22 +108,18 @@
         }
 
         return coordinates;
     }
 
-    private static final List<TransferMode> TM_ANY =
-            Collections.unmodifiableList(Arrays.asList(
-                TransferMode.COPY,
-                TransferMode.MOVE,
-                TransferMode.LINK
-            ));
+    private static final List<TransferMode> TM_ANY = List.of(
+        TransferMode.COPY,
+        TransferMode.MOVE,
+        TransferMode.LINK);
 
-    private static final List<TransferMode> TM_COPY_OR_MOVE =
-            Collections.unmodifiableList(Arrays.asList(
-                TransferMode.COPY,
-                TransferMode.MOVE
-            ));
+    private static final List<TransferMode> TM_COPY_OR_MOVE = List.of(
+        TransferMode.COPY,
+        TransferMode.MOVE);
 
     /**
      * Makes sure changes to the static arrays specified in TransferMode
      * don't have any effect on the transfer modes used.
      * @param modes Modes passed in by user
diff a/modules/javafx.graphics/src/main/java/com/sun/prism/impl/PrismSettings.java b/modules/javafx.graphics/src/main/java/com/sun/prism/impl/PrismSettings.java
--- a/modules/javafx.graphics/src/main/java/com/sun/prism/impl/PrismSettings.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/prism/impl/PrismSettings.java
@@ -25,12 +25,10 @@
 
 package com.sun.prism.impl;
 
 import java.security.AccessController;
 import java.security.PrivilegedAction;
-import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import java.util.Properties;
 import java.util.StringTokenizer;
 import com.sun.javafx.PlatformUtil;
 import com.sun.javafx.util.Utils;
@@ -224,11 +222,11 @@
             } else {
                 tryOrderArr = new String[] { "sw" };
             }
         }
 
-        tryOrder = Collections.unmodifiableList(Arrays.asList(tryOrderArr));
+        tryOrder = List.of(tryOrderArr);
 
         RasterizerType rSpec = null;
         String rOrder = systemProperties.getProperty("prism.rasterizerorder");
         if (rOrder != null) {
             for (String s : split(rOrder.toLowerCase(), ",")) {
diff a/modules/javafx.graphics/src/main/java/com/sun/prism/j2d/print/J2DPrinter.java b/modules/javafx.graphics/src/main/java/com/sun/prism/j2d/print/J2DPrinter.java
--- a/modules/javafx.graphics/src/main/java/com/sun/prism/j2d/print/J2DPrinter.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/prism/j2d/print/J2DPrinter.java
@@ -627,69 +627,58 @@
             populateMedia();
         }
         return paperSet;
     }
 
-    private static Map<MediaTray, PaperSource> preDefinedTrayMap = null;
-    private static Map<MediaSizeName, Paper> predefinedPaperMap = null;
-    private static void initPrefinedMediaMaps() {
+    private static Map<MediaSizeName, Paper> predefinedPaperMap;
+    private static Map<MediaTray, PaperSource> predefinedTrayMap;
 
+    private static void initPredefinedMediaMaps() {
         if (predefinedPaperMap == null) {
             // North American papers
-            HashMap<MediaSizeName, Paper> map =
-                new HashMap<MediaSizeName, Paper>();
-            map.put(MediaSizeName.NA_LETTER, Paper.NA_LETTER);
-            map.put(MediaSizeName.TABLOID, Paper.TABLOID);
-            map.put(MediaSizeName.NA_LEGAL, Paper.LEGAL);
-            map.put(MediaSizeName.EXECUTIVE, Paper.EXECUTIVE);
-            map.put(MediaSizeName.NA_8X10, Paper.NA_8X10);
-            // Envelopes
-            map.put(MediaSizeName.MONARCH_ENVELOPE,
-                    Paper.MONARCH_ENVELOPE);
-
-            map.put(MediaSizeName.NA_NUMBER_10_ENVELOPE,
-                    Paper.NA_NUMBER_10_ENVELOPE);
-            // ISO sizes.
-            map.put(MediaSizeName.ISO_A0, Paper.A0);
-            map.put(MediaSizeName.ISO_A1, Paper.A1);
-            map.put(MediaSizeName.ISO_A2, Paper.A2);
-            map.put(MediaSizeName.ISO_A3, Paper.A3);
-            map.put(MediaSizeName.ISO_A4, Paper.A4);
-            map.put(MediaSizeName.ISO_A5, Paper.A5);
-            map.put(MediaSizeName.ISO_A6, Paper.A6);
-            map.put(MediaSizeName.C, Paper.C); // Eng. size
-            // I've seen this as "Envelope DL" on HP inkjet drivers
-            // for OS X and WIndows.
-            map.put(MediaSizeName.ISO_DESIGNATED_LONG,
-                    Paper.DESIGNATED_LONG);
-            // Common Japanese sizes.
-            map.put(MediaSizeName.JIS_B4, Paper.JIS_B4);
-            map.put(MediaSizeName.JIS_B5, Paper.JIS_B5);
-            map.put(MediaSizeName.JIS_B6, Paper.JIS_B6);
-            map.put(MediaSizeName.JAPANESE_POSTCARD,
-                    Paper.JAPANESE_POSTCARD);
-
-            predefinedPaperMap = map;
-        }
-
-        if (preDefinedTrayMap == null) {
-            HashMap<MediaTray, PaperSource> map =
-                new HashMap<MediaTray, PaperSource>();
-            map.put(MediaTray.MAIN, PaperSource.MAIN);
-            map.put(MediaTray.MANUAL, PaperSource.MANUAL);
-            map.put(MediaTray.BOTTOM, PaperSource.BOTTOM);
-            map.put(MediaTray.MIDDLE, PaperSource.MIDDLE);
-            map.put(MediaTray.TOP, PaperSource.TOP);
-            map.put(MediaTray.SIDE, PaperSource.SIDE);
-            map.put(MediaTray.ENVELOPE, PaperSource.ENVELOPE);
-            map.put(MediaTray.LARGE_CAPACITY, PaperSource.LARGE_CAPACITY);
-            preDefinedTrayMap = map;
+            predefinedPaperMap = Map.ofEntries(
+                Map.entry(MediaSizeName.NA_LETTER,             Paper.NA_LETTER),
+                Map.entry(MediaSizeName.TABLOID,               Paper.TABLOID),
+                Map.entry(MediaSizeName.NA_LEGAL,              Paper.LEGAL),
+                Map.entry(MediaSizeName.EXECUTIVE,             Paper.EXECUTIVE),
+                Map.entry(MediaSizeName.NA_8X10,               Paper.NA_8X10),
+                // Envelopes
+                Map.entry(MediaSizeName.MONARCH_ENVELOPE,      Paper.MONARCH_ENVELOPE),
+                Map.entry(MediaSizeName.NA_NUMBER_10_ENVELOPE, Paper.NA_NUMBER_10_ENVELOPE),
+                // ISO sizes.
+                Map.entry(MediaSizeName.ISO_A0,                Paper.A0),
+                Map.entry(MediaSizeName.ISO_A1,                Paper.A1),
+                Map.entry(MediaSizeName.ISO_A2,                Paper.A2),
+                Map.entry(MediaSizeName.ISO_A3,                Paper.A3),
+                Map.entry(MediaSizeName.ISO_A4,                Paper.A4),
+                Map.entry(MediaSizeName.ISO_A5,                Paper.A5),
+                Map.entry(MediaSizeName.ISO_A6,                Paper.A6),
+                Map.entry(MediaSizeName.C,                     Paper.C), // Eng. size
+                // I've seen this as "Envelope DL" on HP inkjet drivers for OS X and WIndows.
+                Map.entry(MediaSizeName.ISO_DESIGNATED_LONG,   Paper.DESIGNATED_LONG),
+                // Common Japanese sizes.
+                Map.entry(MediaSizeName.JIS_B4,                Paper.JIS_B4),
+                Map.entry(MediaSizeName.JIS_B5,                Paper.JIS_B5),
+                Map.entry(MediaSizeName.JIS_B6,                Paper.JIS_B6),
+                Map.entry(MediaSizeName.JAPANESE_POSTCARD,     Paper.JAPANESE_POSTCARD));
+        }
+
+        if (predefinedTrayMap == null) {
+            predefinedTrayMap = Map.of(
+                MediaTray.MAIN,           PaperSource.MAIN,
+                MediaTray.MANUAL,         PaperSource.MANUAL,
+                MediaTray.BOTTOM,         PaperSource.BOTTOM,
+                MediaTray.MIDDLE,         PaperSource.MIDDLE,
+                MediaTray.TOP,            PaperSource.TOP,
+                MediaTray.SIDE,           PaperSource.SIDE,
+                MediaTray.ENVELOPE,       PaperSource.ENVELOPE,
+                MediaTray.LARGE_CAPACITY, PaperSource.LARGE_CAPACITY);
         }
     }
 
     private void populateMedia() {
-        initPrefinedMediaMaps();
+        initPredefinedMediaMaps();
 
         if (paperSet != null) {
             return; // already inited
         }
         Media[] media =
@@ -763,11 +752,11 @@
         return sourceToTrayMap.get(source);
     }
 
     private synchronized final PaperSource addPaperSource(MediaTray tray) {
 
-        PaperSource source = preDefinedTrayMap.get(tray);
+        PaperSource source = predefinedTrayMap.get(tray);
 
         if (source == null) {
             source = PrintHelper.createPaperSource(tray.toString());
         }
 
diff a/modules/javafx.graphics/src/main/java/com/sun/scenario/effect/impl/prism/PrRenderer.java b/modules/javafx.graphics/src/main/java/com/sun/scenario/effect/impl/prism/PrRenderer.java
--- a/modules/javafx.graphics/src/main/java/com/sun/scenario/effect/impl/prism/PrRenderer.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/scenario/effect/impl/prism/PrRenderer.java
@@ -24,11 +24,10 @@
  */
 
 package com.sun.scenario.effect.impl.prism;
 
 import java.lang.reflect.Method;
-import java.util.HashSet;
 import java.util.Set;
 import com.sun.glass.ui.Screen;
 import com.sun.prism.GraphicsPipeline;
 import com.sun.prism.GraphicsPipeline.ShaderModel;
 import com.sun.prism.RTTexture;
@@ -40,18 +39,15 @@
     /**
      * Maintain a list of peers that are implemented using Prism, so that
      * we can do a fast check to see whether the given peer name is an
      * intrinsic one instead of relying on reflection to do the check.
      */
-    private static final Set<String> intrinsicPeerNames;
-    static {
-        intrinsicPeerNames = new HashSet<String>(4);
-        intrinsicPeerNames.add("Crop");
-        intrinsicPeerNames.add("Flood");
-        intrinsicPeerNames.add("Merge");
-        intrinsicPeerNames.add("Reflection");
-    }
+    private static final Set<String> INTRINSIC_PEER_NAMES = Set.of(
+        "Crop",
+        "Flood",
+        "Merge",
+        "Reflection");
 
     /**
      * Private constructor to prevent instantiation.
      */
     protected PrRenderer() {
@@ -88,8 +84,8 @@
         } catch (Throwable e) {}
         return null;
     }
 
     public static boolean isIntrinsicPeer(String name) {
-        return intrinsicPeerNames.contains(name);
+        return INTRINSIC_PEER_NAMES.contains(name);
     }
 }
diff a/modules/javafx.graphics/src/main/java/javafx/scene/paint/Color.java b/modules/javafx.graphics/src/main/java/javafx/scene/paint/Color.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/paint/Color.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/paint/Color.java
@@ -24,11 +24,10 @@
  */
 
 package javafx.scene.paint;
 
 import javafx.animation.Interpolatable;
-import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
 import com.sun.javafx.util.Utils;
 import com.sun.javafx.tk.Toolkit;
 import javafx.beans.NamedArg;
@@ -1679,174 +1678,164 @@
     /*
      * Named colors moved to nested class to initialize them only when they
      * are needed.
      */
     private static final class NamedColors {
-        private static final Map<String, Color> namedColors =
-                createNamedColors();
-
-        private NamedColors() {
-        }
 
         private static Color get(String name) {
-            return namedColors.get(name);
+            return NAMED_COLORS.get(name);
         }
 
-        private static Map<String, Color> createNamedColors() {
-            Map<String, Color> colors = new HashMap<String,Color>(256);
-
-            colors.put("aliceblue",            ALICEBLUE);
-            colors.put("antiquewhite",         ANTIQUEWHITE);
-            colors.put("aqua",                 AQUA);
-            colors.put("aquamarine",           AQUAMARINE);
-            colors.put("azure",                AZURE);
-            colors.put("beige",                BEIGE);
-            colors.put("bisque",               BISQUE);
-            colors.put("black",                BLACK);
-            colors.put("blanchedalmond",       BLANCHEDALMOND);
-            colors.put("blue",                 BLUE);
-            colors.put("blueviolet",           BLUEVIOLET);
-            colors.put("brown",                BROWN);
-            colors.put("burlywood",            BURLYWOOD);
-            colors.put("cadetblue",            CADETBLUE);
-            colors.put("chartreuse",           CHARTREUSE);
-            colors.put("chocolate",            CHOCOLATE);
-            colors.put("coral",                CORAL);
-            colors.put("cornflowerblue",       CORNFLOWERBLUE);
-            colors.put("cornsilk",             CORNSILK);
-            colors.put("crimson",              CRIMSON);
-            colors.put("cyan",                 CYAN);
-            colors.put("darkblue",             DARKBLUE);
-            colors.put("darkcyan",             DARKCYAN);
-            colors.put("darkgoldenrod",        DARKGOLDENROD);
-            colors.put("darkgray",             DARKGRAY);
-            colors.put("darkgreen",            DARKGREEN);
-            colors.put("darkgrey",             DARKGREY);
-            colors.put("darkkhaki",            DARKKHAKI);
-            colors.put("darkmagenta",          DARKMAGENTA);
-            colors.put("darkolivegreen",       DARKOLIVEGREEN);
-            colors.put("darkorange",           DARKORANGE);
-            colors.put("darkorchid",           DARKORCHID);
-            colors.put("darkred",              DARKRED);
-            colors.put("darksalmon",           DARKSALMON);
-            colors.put("darkseagreen",         DARKSEAGREEN);
-            colors.put("darkslateblue",        DARKSLATEBLUE);
-            colors.put("darkslategray",        DARKSLATEGRAY);
-            colors.put("darkslategrey",        DARKSLATEGREY);
-            colors.put("darkturquoise",        DARKTURQUOISE);
-            colors.put("darkviolet",           DARKVIOLET);
-            colors.put("deeppink",             DEEPPINK);
-            colors.put("deepskyblue",          DEEPSKYBLUE);
-            colors.put("dimgray",              DIMGRAY);
-            colors.put("dimgrey",              DIMGREY);
-            colors.put("dodgerblue",           DODGERBLUE);
-            colors.put("firebrick",            FIREBRICK);
-            colors.put("floralwhite",          FLORALWHITE);
-            colors.put("forestgreen",          FORESTGREEN);
-            colors.put("fuchsia",              FUCHSIA);
-            colors.put("gainsboro",            GAINSBORO);
-            colors.put("ghostwhite",           GHOSTWHITE);
-            colors.put("gold",                 GOLD);
-            colors.put("goldenrod",            GOLDENROD);
-            colors.put("gray",                 GRAY);
-            colors.put("green",                GREEN);
-            colors.put("greenyellow",          GREENYELLOW);
-            colors.put("grey",                 GREY);
-            colors.put("honeydew",             HONEYDEW);
-            colors.put("hotpink",              HOTPINK);
-            colors.put("indianred",            INDIANRED);
-            colors.put("indigo",               INDIGO);
-            colors.put("ivory",                IVORY);
-            colors.put("khaki",                KHAKI);
-            colors.put("lavender",             LAVENDER);
-            colors.put("lavenderblush",        LAVENDERBLUSH);
-            colors.put("lawngreen",            LAWNGREEN);
-            colors.put("lemonchiffon",         LEMONCHIFFON);
-            colors.put("lightblue",            LIGHTBLUE);
-            colors.put("lightcoral",           LIGHTCORAL);
-            colors.put("lightcyan",            LIGHTCYAN);
-            colors.put("lightgoldenrodyellow", LIGHTGOLDENRODYELLOW);
-            colors.put("lightgray",            LIGHTGRAY);
-            colors.put("lightgreen",           LIGHTGREEN);
-            colors.put("lightgrey",            LIGHTGREY);
-            colors.put("lightpink",            LIGHTPINK);
-            colors.put("lightsalmon",          LIGHTSALMON);
-            colors.put("lightseagreen",        LIGHTSEAGREEN);
-            colors.put("lightskyblue",         LIGHTSKYBLUE);
-            colors.put("lightslategray",       LIGHTSLATEGRAY);
-            colors.put("lightslategrey",       LIGHTSLATEGREY);
-            colors.put("lightsteelblue",       LIGHTSTEELBLUE);
-            colors.put("lightyellow",          LIGHTYELLOW);
-            colors.put("lime",                 LIME);
-            colors.put("limegreen",            LIMEGREEN);
-            colors.put("linen",                LINEN);
-            colors.put("magenta",              MAGENTA);
-            colors.put("maroon",               MAROON);
-            colors.put("mediumaquamarine",     MEDIUMAQUAMARINE);
-            colors.put("mediumblue",           MEDIUMBLUE);
-            colors.put("mediumorchid",         MEDIUMORCHID);
-            colors.put("mediumpurple",         MEDIUMPURPLE);
-            colors.put("mediumseagreen",       MEDIUMSEAGREEN);
-            colors.put("mediumslateblue",      MEDIUMSLATEBLUE);
-            colors.put("mediumspringgreen",    MEDIUMSPRINGGREEN);
-            colors.put("mediumturquoise",      MEDIUMTURQUOISE);
-            colors.put("mediumvioletred",      MEDIUMVIOLETRED);
-            colors.put("midnightblue",         MIDNIGHTBLUE);
-            colors.put("mintcream",            MINTCREAM);
-            colors.put("mistyrose",            MISTYROSE);
-            colors.put("moccasin",             MOCCASIN);
-            colors.put("navajowhite",          NAVAJOWHITE);
-            colors.put("navy",                 NAVY);
-            colors.put("oldlace",              OLDLACE);
-            colors.put("olive",                OLIVE);
-            colors.put("olivedrab",            OLIVEDRAB);
-            colors.put("orange",               ORANGE);
-            colors.put("orangered",            ORANGERED);
-            colors.put("orchid",               ORCHID);
-            colors.put("palegoldenrod",        PALEGOLDENROD);
-            colors.put("palegreen",            PALEGREEN);
-            colors.put("paleturquoise",        PALETURQUOISE);
-            colors.put("palevioletred",        PALEVIOLETRED);
-            colors.put("papayawhip",           PAPAYAWHIP);
-            colors.put("peachpuff",            PEACHPUFF);
-            colors.put("peru",                 PERU);
-            colors.put("pink",                 PINK);
-            colors.put("plum",                 PLUM);
-            colors.put("powderblue",           POWDERBLUE);
-            colors.put("purple",               PURPLE);
-            colors.put("red",                  RED);
-            colors.put("rosybrown",            ROSYBROWN);
-            colors.put("royalblue",            ROYALBLUE);
-            colors.put("saddlebrown",          SADDLEBROWN);
-            colors.put("salmon",               SALMON);
-            colors.put("sandybrown",           SANDYBROWN);
-            colors.put("seagreen",             SEAGREEN);
-            colors.put("seashell",             SEASHELL);
-            colors.put("sienna",               SIENNA);
-            colors.put("silver",               SILVER);
-            colors.put("skyblue",              SKYBLUE);
-            colors.put("slateblue",            SLATEBLUE);
-            colors.put("slategray",            SLATEGRAY);
-            colors.put("slategrey",            SLATEGREY);
-            colors.put("snow",                 SNOW);
-            colors.put("springgreen",          SPRINGGREEN);
-            colors.put("steelblue",            STEELBLUE);
-            colors.put("tan",                  TAN);
-            colors.put("teal",                 TEAL);
-            colors.put("thistle",              THISTLE);
-            colors.put("tomato",               TOMATO);
-            colors.put("transparent",          TRANSPARENT);
-            colors.put("turquoise",            TURQUOISE);
-            colors.put("violet",               VIOLET);
-            colors.put("wheat",                WHEAT);
-            colors.put("white",                WHITE);
-            colors.put("whitesmoke",           WHITESMOKE);
-            colors.put("yellow",               YELLOW);
-            colors.put("yellowgreen",          YELLOWGREEN);
-
-            return colors;
-        }
+        private static final Map<String, Color> NAMED_COLORS = Map.ofEntries(
+            Map.entry("aliceblue",            ALICEBLUE),
+            Map.entry("antiquewhite",         ANTIQUEWHITE),
+            Map.entry("aqua",                 AQUA),
+            Map.entry("aquamarine",           AQUAMARINE),
+            Map.entry("azure",                AZURE),
+            Map.entry("beige",                BEIGE),
+            Map.entry("bisque",               BISQUE),
+            Map.entry("black",                BLACK),
+            Map.entry("blanchedalmond",       BLANCHEDALMOND),
+            Map.entry("blue",                 BLUE),
+            Map.entry("blueviolet",           BLUEVIOLET),
+            Map.entry("brown",                BROWN),
+            Map.entry("burlywood",            BURLYWOOD),
+            Map.entry("cadetblue",            CADETBLUE),
+            Map.entry("chartreuse",           CHARTREUSE),
+            Map.entry("chocolate",            CHOCOLATE),
+            Map.entry("coral",                CORAL),
+            Map.entry("cornflowerblue",       CORNFLOWERBLUE),
+            Map.entry("cornsilk",             CORNSILK),
+            Map.entry("crimson",              CRIMSON),
+            Map.entry("cyan",                 CYAN),
+            Map.entry("darkblue",             DARKBLUE),
+            Map.entry("darkcyan",             DARKCYAN),
+            Map.entry("darkgoldenrod",        DARKGOLDENROD),
+            Map.entry("darkgray",             DARKGRAY),
+            Map.entry("darkgreen",            DARKGREEN),
+            Map.entry("darkgrey",             DARKGREY),
+            Map.entry("darkkhaki",            DARKKHAKI),
+            Map.entry("darkmagenta",          DARKMAGENTA),
+            Map.entry("darkolivegreen",       DARKOLIVEGREEN),
+            Map.entry("darkorange",           DARKORANGE),
+            Map.entry("darkorchid",           DARKORCHID),
+            Map.entry("darkred",              DARKRED),
+            Map.entry("darksalmon",           DARKSALMON),
+            Map.entry("darkseagreen",         DARKSEAGREEN),
+            Map.entry("darkslateblue",        DARKSLATEBLUE),
+            Map.entry("darkslategray",        DARKSLATEGRAY),
+            Map.entry("darkslategrey",        DARKSLATEGREY),
+            Map.entry("darkturquoise",        DARKTURQUOISE),
+            Map.entry("darkviolet",           DARKVIOLET),
+            Map.entry("deeppink",             DEEPPINK),
+            Map.entry("deepskyblue",          DEEPSKYBLUE),
+            Map.entry("dimgray",              DIMGRAY),
+            Map.entry("dimgrey",              DIMGREY),
+            Map.entry("dodgerblue",           DODGERBLUE),
+            Map.entry("firebrick",            FIREBRICK),
+            Map.entry("floralwhite",          FLORALWHITE),
+            Map.entry("forestgreen",          FORESTGREEN),
+            Map.entry("fuchsia",              FUCHSIA),
+            Map.entry("gainsboro",            GAINSBORO),
+            Map.entry("ghostwhite",           GHOSTWHITE),
+            Map.entry("gold",                 GOLD),
+            Map.entry("goldenrod",            GOLDENROD),
+            Map.entry("gray",                 GRAY),
+            Map.entry("green",                GREEN),
+            Map.entry("greenyellow",          GREENYELLOW),
+            Map.entry("grey",                 GREY),
+            Map.entry("honeydew",             HONEYDEW),
+            Map.entry("hotpink",              HOTPINK),
+            Map.entry("indianred",            INDIANRED),
+            Map.entry("indigo",               INDIGO),
+            Map.entry("ivory",                IVORY),
+            Map.entry("khaki",                KHAKI),
+            Map.entry("lavender",             LAVENDER),
+            Map.entry("lavenderblush",        LAVENDERBLUSH),
+            Map.entry("lawngreen",            LAWNGREEN),
+            Map.entry("lemonchiffon",         LEMONCHIFFON),
+            Map.entry("lightblue",            LIGHTBLUE),
+            Map.entry("lightcoral",           LIGHTCORAL),
+            Map.entry("lightcyan",            LIGHTCYAN),
+            Map.entry("lightgoldenrodyellow", LIGHTGOLDENRODYELLOW),
+            Map.entry("lightgray",            LIGHTGRAY),
+            Map.entry("lightgreen",           LIGHTGREEN),
+            Map.entry("lightgrey",            LIGHTGREY),
+            Map.entry("lightpink",            LIGHTPINK),
+            Map.entry("lightsalmon",          LIGHTSALMON),
+            Map.entry("lightseagreen",        LIGHTSEAGREEN),
+            Map.entry("lightskyblue",         LIGHTSKYBLUE),
+            Map.entry("lightslategray",       LIGHTSLATEGRAY),
+            Map.entry("lightslategrey",       LIGHTSLATEGREY),
+            Map.entry("lightsteelblue",       LIGHTSTEELBLUE),
+            Map.entry("lightyellow",          LIGHTYELLOW),
+            Map.entry("lime",                 LIME),
+            Map.entry("limegreen",            LIMEGREEN),
+            Map.entry("linen",                LINEN),
+            Map.entry("magenta",              MAGENTA),
+            Map.entry("maroon",               MAROON),
+            Map.entry("mediumaquamarine",     MEDIUMAQUAMARINE),
+            Map.entry("mediumblue",           MEDIUMBLUE),
+            Map.entry("mediumorchid",         MEDIUMORCHID),
+            Map.entry("mediumpurple",         MEDIUMPURPLE),
+            Map.entry("mediumseagreen",       MEDIUMSEAGREEN),
+            Map.entry("mediumslateblue",      MEDIUMSLATEBLUE),
+            Map.entry("mediumspringgreen",    MEDIUMSPRINGGREEN),
+            Map.entry("mediumturquoise",      MEDIUMTURQUOISE),
+            Map.entry("mediumvioletred",      MEDIUMVIOLETRED),
+            Map.entry("midnightblue",         MIDNIGHTBLUE),
+            Map.entry("mintcream",            MINTCREAM),
+            Map.entry("mistyrose",            MISTYROSE),
+            Map.entry("moccasin",             MOCCASIN),
+            Map.entry("navajowhite",          NAVAJOWHITE),
+            Map.entry("navy",                 NAVY),
+            Map.entry("oldlace",              OLDLACE),
+            Map.entry("olive",                OLIVE),
+            Map.entry("olivedrab",            OLIVEDRAB),
+            Map.entry("orange",               ORANGE),
+            Map.entry("orangered",            ORANGERED),
+            Map.entry("orchid",               ORCHID),
+            Map.entry("palegoldenrod",        PALEGOLDENROD),
+            Map.entry("palegreen",            PALEGREEN),
+            Map.entry("paleturquoise",        PALETURQUOISE),
+            Map.entry("palevioletred",        PALEVIOLETRED),
+            Map.entry("papayawhip",           PAPAYAWHIP),
+            Map.entry("peachpuff",            PEACHPUFF),
+            Map.entry("peru",                 PERU),
+            Map.entry("pink",                 PINK),
+            Map.entry("plum",                 PLUM),
+            Map.entry("powderblue",           POWDERBLUE),
+            Map.entry("purple",               PURPLE),
+            Map.entry("red",                  RED),
+            Map.entry("rosybrown",            ROSYBROWN),
+            Map.entry("royalblue",            ROYALBLUE),
+            Map.entry("saddlebrown",          SADDLEBROWN),
+            Map.entry("salmon",               SALMON),
+            Map.entry("sandybrown",           SANDYBROWN),
+            Map.entry("seagreen",             SEAGREEN),
+            Map.entry("seashell",             SEASHELL),
+            Map.entry("sienna",               SIENNA),
+            Map.entry("silver",               SILVER),
+            Map.entry("skyblue",              SKYBLUE),
+            Map.entry("slateblue",            SLATEBLUE),
+            Map.entry("slategray",            SLATEGRAY),
+            Map.entry("slategrey",            SLATEGREY),
+            Map.entry("snow",                 SNOW),
+            Map.entry("springgreen",          SPRINGGREEN),
+            Map.entry("steelblue",            STEELBLUE),
+            Map.entry("tan",                  TAN),
+            Map.entry("teal",                 TEAL),
+            Map.entry("thistle",              THISTLE),
+            Map.entry("tomato",               TOMATO),
+            Map.entry("transparent",          TRANSPARENT),
+            Map.entry("turquoise",            TURQUOISE),
+            Map.entry("violet",               VIOLET),
+            Map.entry("wheat",                WHEAT),
+            Map.entry("white",                WHITE),
+            Map.entry("whitesmoke",           WHITESMOKE),
+            Map.entry("yellow",               YELLOW),
+            Map.entry("yellowgreen",          YELLOWGREEN));
     }
 
     /**
      * The red component of the {@code Color}, in the range {@code 0.0-1.0}.
      *
diff a/modules/javafx.graphics/src/main/java/javafx/scene/paint/Stop.java b/modules/javafx.graphics/src/main/java/javafx/scene/paint/Stop.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/paint/Stop.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/paint/Stop.java
@@ -23,11 +23,10 @@
  * questions.
  */
 
 package javafx.scene.paint;
 
-
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import javafx.beans.NamedArg;
@@ -47,15 +46,13 @@
  * }</pre>
  * @since JavaFX 2.0
  */
 public final class Stop {
 
-    static final List<Stop> NO_STOPS =
-        Collections.unmodifiableList(Arrays.asList(
-            new Stop(0.0, Color.TRANSPARENT),
-            new Stop(1.0, Color.TRANSPARENT)
-        ));
+    static final List<Stop> NO_STOPS = List.of(
+        new Stop(0.0, Color.TRANSPARENT),
+        new Stop(1.0, Color.TRANSPARENT));
 
     static List<Stop> normalize(Stop stops[]) {
         List<Stop> stoplist = (stops == null ? null : Arrays.asList(stops));
         return normalize(stoplist);
     }
diff a/modules/javafx.web/src/main/java/com/sun/javafx/webkit/KeyCodeMap.java b/modules/javafx.web/src/main/java/com/sun/javafx/webkit/KeyCodeMap.java
--- a/modules/javafx.web/src/main/java/com/sun/javafx/webkit/KeyCodeMap.java
+++ b/modules/javafx.web/src/main/java/com/sun/javafx/webkit/KeyCodeMap.java
@@ -24,12 +24,10 @@
  */
 
 package com.sun.javafx.webkit;
 
 import com.sun.webkit.event.WCKeyEvent;
-import java.util.Collections;
-import java.util.HashMap;
 import java.util.Map;
 import javafx.scene.input.KeyCode;
 
 /**
  * The static mapping from JavaFX {@code KeyCode}s to Windows virtual key
@@ -61,181 +59,169 @@
         public String getKeyIdentifier() {
             return keyIdentifier;
         }
     };
 
+    private static final Map<KeyCode, Entry> MAP = Map.ofEntries(
+        put(KeyCode.ENTER,             WCKeyEvent.VK_RETURN, "Enter"),
+        put(KeyCode.BACK_SPACE,        WCKeyEvent.VK_BACK),
+        put(KeyCode.TAB,               WCKeyEvent.VK_TAB),
+        put(KeyCode.CANCEL,            0x03),
+        put(KeyCode.CLEAR,             0x0C, "Clear"),
+        put(KeyCode.SHIFT,             0x10, "Shift"),
+        put(KeyCode.CONTROL,           0x11, "Control"),
+        put(KeyCode.ALT,               0x12, "Alt"),
+        put(KeyCode.PAUSE,             0x13, "Pause"),
+        put(KeyCode.CAPS,              0x14, "CapsLock"),
+        put(KeyCode.ESCAPE,            WCKeyEvent.VK_ESCAPE),
+        put(KeyCode.SPACE,             0x20),
+        put(KeyCode.PAGE_UP,           WCKeyEvent.VK_PRIOR, "PageUp"),
+        put(KeyCode.PAGE_DOWN,         WCKeyEvent.VK_NEXT, "PageDown"),
+        put(KeyCode.END,               WCKeyEvent.VK_END, "End"),
+        put(KeyCode.HOME,              WCKeyEvent.VK_HOME, "Home"),
+        put(KeyCode.LEFT,              WCKeyEvent.VK_LEFT, "Left"),
+        put(KeyCode.UP,                WCKeyEvent.VK_UP, "Up"),
+        put(KeyCode.RIGHT,             WCKeyEvent.VK_RIGHT, "Right"),
+        put(KeyCode.DOWN,              WCKeyEvent.VK_DOWN, "Down"),
+        put(KeyCode.COMMA,             0xBC),
+        put(KeyCode.MINUS,             0xBD),
+        put(KeyCode.PERIOD,            WCKeyEvent.VK_OEM_PERIOD),
+        put(KeyCode.SLASH,             0xBF),
+        put(KeyCode.DIGIT0,            0x30),
+        put(KeyCode.DIGIT1,            0x31),
+        put(KeyCode.DIGIT2,            0x32),
+        put(KeyCode.DIGIT3,            0x33),
+        put(KeyCode.DIGIT4,            0x34),
+        put(KeyCode.DIGIT5,            0x35),
+        put(KeyCode.DIGIT6,            0x36),
+        put(KeyCode.DIGIT7,            0x37),
+        put(KeyCode.DIGIT8,            0x38),
+        put(KeyCode.DIGIT9,            0x39),
+        put(KeyCode.SEMICOLON,         0xBA),
+        put(KeyCode.EQUALS,            0xBB),
+        put(KeyCode.A,                 0x41),
+        put(KeyCode.B,                 0x42),
+        put(KeyCode.C,                 0x43),
+        put(KeyCode.D,                 0x44),
+        put(KeyCode.E,                 0x45),
+        put(KeyCode.F,                 0x46),
+        put(KeyCode.G,                 0x47),
+        put(KeyCode.H,                 0x48),
+        put(KeyCode.I,                 0x49),
+        put(KeyCode.J,                 0x4A),
+        put(KeyCode.K,                 0x4B),
+        put(KeyCode.L,                 0x4C),
+        put(KeyCode.M,                 0x4D),
+        put(KeyCode.N,                 0x4E),
+        put(KeyCode.O,                 0x4F),
+        put(KeyCode.P,                 0x50),
+        put(KeyCode.Q,                 0x51),
+        put(KeyCode.R,                 0x52),
+        put(KeyCode.S,                 0x53),
+        put(KeyCode.T,                 0x54),
+        put(KeyCode.U,                 0x55),
+        put(KeyCode.V,                 0x56),
+        put(KeyCode.W,                 0x57),
+        put(KeyCode.X,                 0x58),
+        put(KeyCode.Y,                 0x59),
+        put(KeyCode.Z,                 0x5A),
+        put(KeyCode.OPEN_BRACKET,      0xDB),
+        put(KeyCode.BACK_SLASH,        0xDC),
+        put(KeyCode.CLOSE_BRACKET,     0xDD),
+        put(KeyCode.NUMPAD0,           0x60),
+        put(KeyCode.NUMPAD1,           0x61),
+        put(KeyCode.NUMPAD2,           0x62),
+        put(KeyCode.NUMPAD3,           0x63),
+        put(KeyCode.NUMPAD4,           0x64),
+        put(KeyCode.NUMPAD5,           0x65),
+        put(KeyCode.NUMPAD6,           0x66),
+        put(KeyCode.NUMPAD7,           0x67),
+        put(KeyCode.NUMPAD8,           0x68),
+        put(KeyCode.NUMPAD9,           0x69),
+        put(KeyCode.MULTIPLY,          0x6A),
+        put(KeyCode.ADD,               0x6B),
+        put(KeyCode.SEPARATOR,         0x6C),
+        put(KeyCode.SUBTRACT,          0x6D),
+        put(KeyCode.DECIMAL,           0x6E),
+        put(KeyCode.DIVIDE,            0x6F),
+        put(KeyCode.DELETE,            WCKeyEvent.VK_DELETE, "U+007F"),
+        put(KeyCode.NUM_LOCK,          0x90),
+        put(KeyCode.SCROLL_LOCK,       0x91, "Scroll"),
+        put(KeyCode.F1,                0x70, "F1"),
+        put(KeyCode.F2,                0x71, "F2"),
+        put(KeyCode.F3,                0x72, "F3"),
+        put(KeyCode.F4,                0x73, "F4"),
+        put(KeyCode.F5,                0x74, "F5"),
+        put(KeyCode.F6,                0x75, "F6"),
+        put(KeyCode.F7,                0x76, "F7"),
+        put(KeyCode.F8,                0x77, "F8"),
+        put(KeyCode.F9,                0x78, "F9"),
+        put(KeyCode.F10,               0x79, "F10"),
+        put(KeyCode.F11,               0x7A, "F11"),
+        put(KeyCode.F12,               0x7B, "F12"),
+        put(KeyCode.F13,               0x7C, "F13"),
+        put(KeyCode.F14,               0x7D, "F14"),
+        put(KeyCode.F15,               0x7E, "F15"),
+        put(KeyCode.F16,               0x7F, "F16"),
+        put(KeyCode.F17,               0x80, "F17"),
+        put(KeyCode.F18,               0x81, "F18"),
+        put(KeyCode.F19,               0x82, "F19"),
+        put(KeyCode.F20,               0x83, "F20"),
+        put(KeyCode.F21,               0x84, "F21"),
+        put(KeyCode.F22,               0x85, "F22"),
+        put(KeyCode.F23,               0x86, "F23"),
+        put(KeyCode.F24,               0x87, "F24"),
+        put(KeyCode.PRINTSCREEN,       0x2C, "PrintScreen"),
+        put(KeyCode.INSERT,            WCKeyEvent.VK_INSERT, "Insert"),
+        put(KeyCode.HELP,              0x2F, "Help"),
+        put(KeyCode.META,              0x00, "Meta"),
+        put(KeyCode.BACK_QUOTE,        0xC0),
+        put(KeyCode.QUOTE,             0xDE),
+        put(KeyCode.KP_UP,             WCKeyEvent.VK_UP, "Up"),
+        put(KeyCode.KP_DOWN,           WCKeyEvent.VK_DOWN, "Down"),
+        put(KeyCode.KP_LEFT,           WCKeyEvent.VK_LEFT, "Left"),
+        put(KeyCode.KP_RIGHT,          WCKeyEvent.VK_RIGHT, "Right"),
+        put(KeyCode.AMPERSAND,         0x37),
+        put(KeyCode.ASTERISK,          0x38),
+        put(KeyCode.QUOTEDBL,          0xDE),
+        put(KeyCode.LESS,              0xBC),
+        put(KeyCode.GREATER,           WCKeyEvent.VK_OEM_PERIOD),
+        put(KeyCode.BRACELEFT,         0xDB),
+        put(KeyCode.BRACERIGHT,        0xDD),
+        put(KeyCode.AT,                0x32),
+        put(KeyCode.COLON,             0xBA),
+        put(KeyCode.CIRCUMFLEX,        0x36),
+        put(KeyCode.DOLLAR,            0x34),
+        put(KeyCode.EXCLAMATION_MARK,  0x31),
+        put(KeyCode.LEFT_PARENTHESIS,  0x39),
+        put(KeyCode.NUMBER_SIGN,       0x33),
+        put(KeyCode.PLUS,              0xBB),
+        put(KeyCode.RIGHT_PARENTHESIS, 0x30),
+        put(KeyCode.UNDERSCORE,        0xBD),
+        put(KeyCode.WINDOWS,           0x5B, "Win"),
+        put(KeyCode.CONTEXT_MENU,      0x5D),
+        put(KeyCode.FINAL,             0x18),
+        put(KeyCode.CONVERT,           0x1C),
+        put(KeyCode.NONCONVERT,        0x1D),
+        put(KeyCode.ACCEPT,            0x1E),
+        put(KeyCode.MODECHANGE,        0x1F),
+        put(KeyCode.KANA,              0x15),
+        put(KeyCode.KANJI,             0x19),
+        put(KeyCode.ALT_GRAPH,         0xA5),
+        put(KeyCode.PLAY,              0xFA),
+        put(KeyCode.TRACK_PREV,        0xB1),
+        put(KeyCode.TRACK_NEXT,        0xB0),
+        put(KeyCode.VOLUME_UP,         0xAF),
+        put(KeyCode.VOLUME_DOWN,       0xAE),
+        put(KeyCode.MUTE,              0xAD));
 
-    private static final Map<KeyCode,Entry> MAP;
-    static {
-        Map<KeyCode,Entry> map = new HashMap<KeyCode,Entry>();
-
-        put(map, KeyCode.ENTER, WCKeyEvent.VK_RETURN, "Enter");
-        put(map, KeyCode.BACK_SPACE, WCKeyEvent.VK_BACK);
-        put(map, KeyCode.TAB, WCKeyEvent.VK_TAB);
-        put(map, KeyCode.CANCEL, 0x03);
-        put(map, KeyCode.CLEAR, 0x0C, "Clear");
-        put(map, KeyCode.SHIFT, 0x10, "Shift");
-        put(map, KeyCode.CONTROL, 0x11, "Control");
-        put(map, KeyCode.ALT, 0x12, "Alt");
-        put(map, KeyCode.PAUSE, 0x13, "Pause");
-        put(map, KeyCode.CAPS, 0x14, "CapsLock");
-        put(map, KeyCode.ESCAPE, WCKeyEvent.VK_ESCAPE);
-        put(map, KeyCode.SPACE, 0x20);
-        put(map, KeyCode.PAGE_UP, WCKeyEvent.VK_PRIOR, "PageUp");
-        put(map, KeyCode.PAGE_DOWN, WCKeyEvent.VK_NEXT, "PageDown");
-        put(map, KeyCode.END, WCKeyEvent.VK_END, "End");
-        put(map, KeyCode.HOME, WCKeyEvent.VK_HOME, "Home");
-        put(map, KeyCode.LEFT, WCKeyEvent.VK_LEFT, "Left");
-        put(map, KeyCode.UP, WCKeyEvent.VK_UP, "Up");
-        put(map, KeyCode.RIGHT, WCKeyEvent.VK_RIGHT, "Right");
-        put(map, KeyCode.DOWN, WCKeyEvent.VK_DOWN, "Down");
-        put(map, KeyCode.COMMA, 0xBC);
-        put(map, KeyCode.MINUS, 0xBD);
-        put(map, KeyCode.PERIOD, WCKeyEvent.VK_OEM_PERIOD);
-        put(map, KeyCode.SLASH, 0xBF);
-        put(map, KeyCode.DIGIT0, 0x30);
-        put(map, KeyCode.DIGIT1, 0x31);
-        put(map, KeyCode.DIGIT2, 0x32);
-        put(map, KeyCode.DIGIT3, 0x33);
-        put(map, KeyCode.DIGIT4, 0x34);
-        put(map, KeyCode.DIGIT5, 0x35);
-        put(map, KeyCode.DIGIT6, 0x36);
-        put(map, KeyCode.DIGIT7, 0x37);
-        put(map, KeyCode.DIGIT8, 0x38);
-        put(map, KeyCode.DIGIT9, 0x39);
-        put(map, KeyCode.SEMICOLON, 0xBA);
-        put(map, KeyCode.EQUALS, 0xBB);
-        put(map, KeyCode.A, 0x41);
-        put(map, KeyCode.B, 0x42);
-        put(map, KeyCode.C, 0x43);
-        put(map, KeyCode.D, 0x44);
-        put(map, KeyCode.E, 0x45);
-        put(map, KeyCode.F, 0x46);
-        put(map, KeyCode.G, 0x47);
-        put(map, KeyCode.H, 0x48);
-        put(map, KeyCode.I, 0x49);
-        put(map, KeyCode.J, 0x4A);
-        put(map, KeyCode.K, 0x4B);
-        put(map, KeyCode.L, 0x4C);
-        put(map, KeyCode.M, 0x4D);
-        put(map, KeyCode.N, 0x4E);
-        put(map, KeyCode.O, 0x4F);
-        put(map, KeyCode.P, 0x50);
-        put(map, KeyCode.Q, 0x51);
-        put(map, KeyCode.R, 0x52);
-        put(map, KeyCode.S, 0x53);
-        put(map, KeyCode.T, 0x54);
-        put(map, KeyCode.U, 0x55);
-        put(map, KeyCode.V, 0x56);
-        put(map, KeyCode.W, 0x57);
-        put(map, KeyCode.X, 0x58);
-        put(map, KeyCode.Y, 0x59);
-        put(map, KeyCode.Z, 0x5A);
-        put(map, KeyCode.OPEN_BRACKET, 0xDB);
-        put(map, KeyCode.BACK_SLASH, 0xDC);
-        put(map, KeyCode.CLOSE_BRACKET, 0xDD);
-        put(map, KeyCode.NUMPAD0, 0x60);
-        put(map, KeyCode.NUMPAD1, 0x61);
-        put(map, KeyCode.NUMPAD2, 0x62);
-        put(map, KeyCode.NUMPAD3, 0x63);
-        put(map, KeyCode.NUMPAD4, 0x64);
-        put(map, KeyCode.NUMPAD5, 0x65);
-        put(map, KeyCode.NUMPAD6, 0x66);
-        put(map, KeyCode.NUMPAD7, 0x67);
-        put(map, KeyCode.NUMPAD8, 0x68);
-        put(map, KeyCode.NUMPAD9, 0x69);
-        put(map, KeyCode.MULTIPLY, 0x6A);
-        put(map, KeyCode.ADD, 0x6B);
-        put(map, KeyCode.SEPARATOR, 0x6C);
-        put(map, KeyCode.SUBTRACT, 0x6D);
-        put(map, KeyCode.DECIMAL, 0x6E);
-        put(map, KeyCode.DIVIDE, 0x6F);
-        put(map, KeyCode.DELETE, WCKeyEvent.VK_DELETE, "U+007F");
-        put(map, KeyCode.NUM_LOCK, 0x90);
-        put(map, KeyCode.SCROLL_LOCK, 0x91, "Scroll");
-        put(map, KeyCode.F1, 0x70, "F1");
-        put(map, KeyCode.F2, 0x71, "F2");
-        put(map, KeyCode.F3, 0x72, "F3");
-        put(map, KeyCode.F4, 0x73, "F4");
-        put(map, KeyCode.F5, 0x74, "F5");
-        put(map, KeyCode.F6, 0x75, "F6");
-        put(map, KeyCode.F7, 0x76, "F7");
-        put(map, KeyCode.F8, 0x77, "F8");
-        put(map, KeyCode.F9, 0x78, "F9");
-        put(map, KeyCode.F10, 0x79, "F10");
-        put(map, KeyCode.F11, 0x7A, "F11");
-        put(map, KeyCode.F12, 0x7B, "F12");
-        put(map, KeyCode.F13, 0x7C, "F13");
-        put(map, KeyCode.F14, 0x7D, "F14");
-        put(map, KeyCode.F15, 0x7E, "F15");
-        put(map, KeyCode.F16, 0x7F, "F16");
-        put(map, KeyCode.F17, 0x80, "F17");
-        put(map, KeyCode.F18, 0x81, "F18");
-        put(map, KeyCode.F19, 0x82, "F19");
-        put(map, KeyCode.F20, 0x83, "F20");
-        put(map, KeyCode.F21, 0x84, "F21");
-        put(map, KeyCode.F22, 0x85, "F22");
-        put(map, KeyCode.F23, 0x86, "F23");
-        put(map, KeyCode.F24, 0x87, "F24");
-        put(map, KeyCode.PRINTSCREEN, 0x2C, "PrintScreen");
-        put(map, KeyCode.INSERT, WCKeyEvent.VK_INSERT, "Insert");
-        put(map, KeyCode.HELP, 0x2F, "Help");
-        put(map, KeyCode.META, 0x00, "Meta");
-        put(map, KeyCode.BACK_QUOTE, 0xC0);
-        put(map, KeyCode.QUOTE, 0xDE);
-        put(map, KeyCode.KP_UP, WCKeyEvent.VK_UP, "Up");
-        put(map, KeyCode.KP_DOWN, WCKeyEvent.VK_DOWN, "Down");
-        put(map, KeyCode.KP_LEFT, WCKeyEvent.VK_LEFT, "Left");
-        put(map, KeyCode.KP_RIGHT, WCKeyEvent.VK_RIGHT, "Right");
-        put(map, KeyCode.AMPERSAND, 0x37);
-        put(map, KeyCode.ASTERISK, 0x38);
-        put(map, KeyCode.QUOTEDBL, 0xDE);
-        put(map, KeyCode.LESS, 0xBC);
-        put(map, KeyCode.GREATER, WCKeyEvent.VK_OEM_PERIOD);
-        put(map, KeyCode.BRACELEFT, 0xDB);
-        put(map, KeyCode.BRACERIGHT, 0xDD);
-        put(map, KeyCode.AT, 0x32);
-        put(map, KeyCode.COLON, 0xBA);
-        put(map, KeyCode.CIRCUMFLEX, 0x36);
-        put(map, KeyCode.DOLLAR, 0x34);
-        put(map, KeyCode.EXCLAMATION_MARK, 0x31);
-        put(map, KeyCode.LEFT_PARENTHESIS, 0x39);
-        put(map, KeyCode.NUMBER_SIGN, 0x33);
-        put(map, KeyCode.PLUS, 0xBB);
-        put(map, KeyCode.RIGHT_PARENTHESIS, 0x30);
-        put(map, KeyCode.UNDERSCORE, 0xBD);
-        put(map, KeyCode.WINDOWS, 0x5B, "Win");
-        put(map, KeyCode.CONTEXT_MENU, 0x5D);
-        put(map, KeyCode.FINAL, 0x18);
-        put(map, KeyCode.CONVERT, 0x1C);
-        put(map, KeyCode.NONCONVERT, 0x1D);
-        put(map, KeyCode.ACCEPT, 0x1E);
-        put(map, KeyCode.MODECHANGE, 0x1F);
-        put(map, KeyCode.KANA, 0x15);
-        put(map, KeyCode.KANJI, 0x19);
-        put(map, KeyCode.ALT_GRAPH, 0xA5);
-        put(map, KeyCode.PLAY, 0xFA);
-        put(map, KeyCode.TRACK_PREV, 0xB1);
-        put(map, KeyCode.TRACK_NEXT, 0xB0);
-        put(map, KeyCode.VOLUME_UP, 0xAF);
-        put(map, KeyCode.VOLUME_DOWN, 0xAE);
-        put(map, KeyCode.MUTE, 0xAD);
-
-        MAP = Collections.unmodifiableMap(map);
-    }
-
-
-    private static void put(Map<KeyCode,Entry> map, KeyCode keyCode,
-                            int windowsVirtualKeyCode, String keyIdentifier)
-    {
-        map.put(keyCode, new Entry(windowsVirtualKeyCode, keyIdentifier));
+    private static Map.Entry<KeyCode, Entry> put(KeyCode keyCode, int windowsVirtualKeyCode, String keyIdentifier) {
+        return Map.entry(keyCode, new Entry(windowsVirtualKeyCode, keyIdentifier));
     }
 
-    private static void put(Map<KeyCode,Entry> map, KeyCode keyCode,
-                            int windowsVirtualKeyCode)
-    {
-        put(map, keyCode, windowsVirtualKeyCode, null);
+    private static Map.Entry<KeyCode, Entry> put(KeyCode keyCode, int windowsVirtualKeyCode) {
+        return put(keyCode, windowsVirtualKeyCode, null);
     }
 
     /**
      * Returns an {@link Entry} object containing the Windows
      * virtual key code and the key identifier associated with
diff a/modules/javafx.web/src/main/java/com/sun/webkit/network/DateParser.java b/modules/javafx.web/src/main/java/com/sun/webkit/network/DateParser.java
--- a/modules/javafx.web/src/main/java/com/sun/webkit/network/DateParser.java
+++ b/modules/javafx.web/src/main/java/com/sun/webkit/network/DateParser.java
@@ -28,13 +28,11 @@
 import com.sun.javafx.logging.PlatformLogger;
 import com.sun.javafx.logging.PlatformLogger.Level;
 
 import java.text.ParseException;
 import java.util.Calendar;
-import java.util.Collections;
 import java.util.Date;
-import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
 import java.util.TimeZone;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -53,28 +51,24 @@
             "(\\d{1,2}):(\\d{1,2}):(\\d{1,2})(?:[^\\d].*)*");
     private static final Pattern DAY_OF_MONTH_PATTERN = Pattern.compile(
             "(\\d{1,2})(?:[^\\d].*)*");
     private static final Pattern YEAR_PATTERN = Pattern.compile(
             "(\\d{2,4})(?:[^\\d].*)*");
-    private static final Map<String,Integer> MONTH_MAP;
-    static {
-        Map<String,Integer> map = new HashMap<String,Integer>(12);
-        map.put("jan", 0);
-        map.put("feb", 1);
-        map.put("mar", 2);
-        map.put("apr", 3);
-        map.put("may", 4);
-        map.put("jun", 5);
-        map.put("jul", 6);
-        map.put("aug", 7);
-        map.put("sep", 8);
-        map.put("oct", 9);
-        map.put("nov", 10);
-        map.put("dec", 11);
-        MONTH_MAP = Collections.unmodifiableMap(map);
-    }
 
+    private static final Map<String, Integer> MONTH_MAP = Map.ofEntries(
+        Map.entry("jan", 0),
+        Map.entry("feb", 1),
+        Map.entry("mar", 2),
+        Map.entry("apr", 3),
+        Map.entry("may", 4),
+        Map.entry("jun", 5),
+        Map.entry("jul", 6),
+        Map.entry("aug", 7),
+        Map.entry("sep", 8),
+        Map.entry("oct", 9),
+        Map.entry("nov", 10),
+        Map.entry("dec", 11));
 
     /**
      * The private default constructor. Ensures non-instantiability.
      */
     private DateParser() {
diff a/modules/javafx.web/src/main/java/com/sun/webkit/network/URLs.java b/modules/javafx.web/src/main/java/com/sun/webkit/network/URLs.java
--- a/modules/javafx.web/src/main/java/com/sun/webkit/network/URLs.java
+++ b/modules/javafx.web/src/main/java/com/sun/webkit/network/URLs.java
@@ -30,12 +30,10 @@
 import java.net.URL;
 import java.net.URLStreamHandler;
 import java.security.AccessController;
 import java.security.Permission;
 import java.security.PrivilegedAction;
-import java.util.Collections;
-import java.util.HashMap;
 import java.util.Map;
 
 /**
  * A collection of static methods for URL creation.
  */
@@ -43,18 +41,13 @@
 
     /**
      * The mapping between WebPane-specific protocol names and their
      * respective handlers.
      */
-    private static final Map<String,URLStreamHandler> handlerMap;
-    static {
-        Map<String,URLStreamHandler> map =
-                new HashMap<String,URLStreamHandler>(2);
-        map.put("about", new com.sun.webkit.network.about.Handler());
-        map.put("data", new com.sun.webkit.network.data.Handler());
-        handlerMap = Collections.unmodifiableMap(map);
-    }
+    private static final Map<String,URLStreamHandler> HANDLER_MAP = Map.of(
+        "about", new com.sun.webkit.network.about.Handler(),
+        "data", new com.sun.webkit.network.data.Handler());
 
     private static final Permission streamHandlerPermission =
         new NetPermission("specifyStreamHandler");
 
     /**
@@ -96,11 +89,11 @@
         } catch (MalformedURLException ex) {
 
             // Try WebPane-specific protocol handler, if any
             int colonPosition = spec.indexOf(':');
             final URLStreamHandler handler = (colonPosition != -1) ?
-                handlerMap.get(spec.substring(0, colonPosition).toLowerCase()) :
+                HANDLER_MAP.get(spec.substring(0, colonPosition).toLowerCase()) :
                 null;
 
             if (handler == null) throw ex;
 
             try {
diff a/modules/javafx.web/src/main/java/com/sun/webkit/text/TextCodec.java b/modules/javafx.web/src/main/java/com/sun/webkit/text/TextCodec.java
--- a/modules/javafx.web/src/main/java/com/sun/webkit/text/TextCodec.java
+++ b/modules/javafx.web/src/main/java/com/sun/webkit/text/TextCodec.java
@@ -27,23 +27,19 @@
 
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
 final class TextCodec {
     private final Charset charset;
 
     // The list of aliases where Java mappings are not compatible with WebKit.
-    private static final Map<String, String> reMap =
-            new HashMap<String, String>();
-    static {
-        reMap.put("ISO-10646-UCS-2", "UTF-16");
-    }
+    private static final Map<String, String> RE_MAP = Map.of(
+        "ISO-10646-UCS-2", "UTF-16");
 
     /**
      * This could throw a runtime exception (see the documentation for the
      * Charset.forName.)  JNI code should handle the exception.
      */
@@ -85,11 +81,11 @@
                 // 8859_1 is blacklisted in TextEncodingRegistry.cpp:isUndesiredAlias()
                 // See also https://bugs.webkit.org/show_bug.cgi?id=43554
                 if (a.equals("8859_1")) continue;
 
                 encodings.add(a);
-                String r = reMap.get(a);
+                String r = RE_MAP.get(a);
                 encodings.add(r == null ? e : r);
             }
         }
         return encodings.toArray(new String[0]);
     }
diff a/modules/javafx.web/src/main/java/javafx/scene/web/WebView.java b/modules/javafx.web/src/main/java/javafx/scene/web/WebView.java
--- a/modules/javafx.web/src/main/java/javafx/scene/web/WebView.java
+++ b/modules/javafx.web/src/main/java/javafx/scene/web/WebView.java
@@ -42,11 +42,10 @@
 import javafx.event.EventType;
 import javafx.geometry.NodeOrientation;
 import javafx.geometry.Point2D;
 import javafx.scene.Node;
 import javafx.scene.Parent;
-import javafx.scene.Scene;
 import javafx.scene.input.DataFormat;
 import javafx.scene.input.DragEvent;
 import javafx.scene.input.Dragboard;
 import javafx.scene.input.InputMethodEvent;
 import javafx.scene.input.KeyEvent;
@@ -57,11 +56,10 @@
 import javafx.scene.text.FontSmoothingType;
 import javafx.stage.Stage;
 import javafx.stage.Window;
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import javafx.css.converter.BooleanConverter;
 import javafx.css.converter.EnumConverter;
@@ -98,11 +96,24 @@
  * FX thread.
  * @since JavaFX 2.0
  */
 final public class WebView extends Parent {
 
-    private static final Map<Object, Integer> idMap = new HashMap<Object, Integer>();
+    private static final Map<Object, Integer> ID_MAP = Map.ofEntries(
+        Map.entry(MouseButton.NONE, WCMouseEvent.NOBUTTON),
+        Map.entry(MouseButton.PRIMARY, WCMouseEvent.BUTTON1),
+        Map.entry(MouseButton.MIDDLE, WCMouseEvent.BUTTON2),
+        Map.entry(MouseButton.SECONDARY, WCMouseEvent.BUTTON3),
+
+        Map.entry(MouseEvent.MOUSE_PRESSED, WCMouseEvent.MOUSE_PRESSED),
+        Map.entry(MouseEvent.MOUSE_RELEASED, WCMouseEvent.MOUSE_RELEASED),
+        Map.entry(MouseEvent.MOUSE_MOVED, WCMouseEvent.MOUSE_MOVED),
+        Map.entry(MouseEvent.MOUSE_DRAGGED, WCMouseEvent.MOUSE_DRAGGED),
+
+        Map.entry(KeyEvent.KEY_PRESSED, WCKeyEvent.KEY_PRESSED),
+        Map.entry(KeyEvent.KEY_RELEASED, WCKeyEvent.KEY_RELEASED),
+        Map.entry(KeyEvent.KEY_TYPED, WCKeyEvent.KEY_TYPED));
 
     private static final boolean DEFAULT_CONTEXT_MENU_ENABLED = true;
     private static final FontSmoothingType DEFAULT_FONT_SMOOTHING_TYPE = FontSmoothingType.LCD;
     private static final double DEFAULT_ZOOM = 1.0;
     private static final double DEFAULT_FONT_SCALE = 1.0;
@@ -991,12 +1002,12 @@
             }
             screenX = screenPoint.getX();
             screenY = screenPoint.getY();
         }
 
-        final Integer id = idMap.get(type);
-        final Integer button = idMap.get(ev.getButton());
+        final Integer id = ID_MAP.get(type);
+        final Integer button = ID_MAP.get(ev.getButton());
         if (id == null || button == null) {
             // not supported by webkit
             return;
         }
         WCMouseEvent mouseEvent =
@@ -1039,11 +1050,11 @@
             keyIdentifier = keyCodeEntry.getKeyIdentifier();
             windowsVirtualKeyCode = keyCodeEntry.getWindowsVirtualKeyCode();
         }
 
         WCKeyEvent keyEvent = new WCKeyEvent(
-                idMap.get(ev.getEventType()),
+                ID_MAP.get(ev.getEventType()),
                 text,
                 keyIdentifier,
                 windowsVirtualKeyCode,
                 ev.isShiftDown(), ev.isControlDown(),
                 ev.isAltDown(), ev.isMetaDown(), System.currentTimeMillis());
@@ -1300,21 +1311,7 @@
             public void doPickNodeLocal(Node node, PickRay localPickRay,
                     PickResultChooser result) {
                 ((WebView) node).doPickNodeLocal(localPickRay, result);
             }
         });
-
-        idMap.put(MouseButton.NONE, WCMouseEvent.NOBUTTON);
-        idMap.put(MouseButton.PRIMARY, WCMouseEvent.BUTTON1);
-        idMap.put(MouseButton.MIDDLE, WCMouseEvent.BUTTON2);
-        idMap.put(MouseButton.SECONDARY, WCMouseEvent.BUTTON3);
-
-        idMap.put(MouseEvent.MOUSE_PRESSED, WCMouseEvent.MOUSE_PRESSED);
-        idMap.put(MouseEvent.MOUSE_RELEASED, WCMouseEvent.MOUSE_RELEASED);
-        idMap.put(MouseEvent.MOUSE_MOVED, WCMouseEvent.MOUSE_MOVED);
-        idMap.put(MouseEvent.MOUSE_DRAGGED, WCMouseEvent.MOUSE_DRAGGED);
-
-        idMap.put(KeyEvent.KEY_PRESSED, WCKeyEvent.KEY_PRESSED);
-        idMap.put(KeyEvent.KEY_RELEASED, WCKeyEvent.KEY_RELEASED);
-        idMap.put(KeyEvent.KEY_TYPED, WCKeyEvent.KEY_TYPED);
     }
 }
