diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_general.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/glass_general.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_general.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_general.cpp
@@ -503,21 +503,18 @@
     return result;
 }
 
 //***************************************************************************
 
-typedef struct _DeviceGrabContext {
-    GdkWindow * window;
-    gboolean grabbed;
-} DeviceGrabContext;
 
 gboolean disableGrab = FALSE;
 static gboolean configure_transparent_window(GtkWidget *window);
 static void configure_opaque_window(GtkWidget *window);
 
-static void grab_mouse_device(GdkDevice *device, DeviceGrabContext *context);
-static void ungrab_mouse_device(GdkDevice *device);
+gboolean is_grab_disabled() {
+    return disableGrab;
+}
 
 gint glass_gdk_visual_get_depth (GdkVisual * visual)
 {
     // gdk_visual_get_depth is GTK 2.2 +
     return gdk_visual_get_depth(visual);
@@ -531,71 +528,10 @@
 #else
         return gdk_window_get_screen(gdkWindow);
 #endif
 }
 
-gboolean
-glass_gdk_mouse_devices_grab(GdkWindow *gdkWindow) {
-#ifdef GLASS_GTK3_DISABLED
-//this GTK 3 approach has synchronization issues covered in JDK-8176844
-// As the approach is also deprecated in GTK 3.20+, revert back to using GTK 2 mechanism
-
-        if (disableGrab) {
-            return TRUE;
-        }
-        DeviceGrabContext context;
-        GList *devices = gdk_device_manager_list_devices (
-                             gdk_display_get_device_manager(
-                                 gdk_display_get_default()),
-                                 GDK_DEVICE_TYPE_MASTER);
-
-        context.window = gdkWindow;
-        context.grabbed = FALSE;
-        g_list_foreach(devices, (GFunc) grab_mouse_device, &context);
-        g_list_free(devices);
-
-        return context.grabbed;
-#else
-    return glass_gdk_mouse_devices_grab_with_cursor(gdkWindow, NULL, TRUE);
-#endif
-}
-
-gboolean
-glass_gdk_mouse_devices_grab_with_cursor(GdkWindow *gdkWindow, GdkCursor *cursor, gboolean owner_events) {
-    if (disableGrab) {
-        return TRUE;
-    }
-    GdkGrabStatus status = gdk_pointer_grab(gdkWindow, owner_events, (GdkEventMask)
-                                            (GDK_POINTER_MOTION_MASK
-                                                | GDK_POINTER_MOTION_HINT_MASK
-                                                | GDK_BUTTON_MOTION_MASK
-                                                | GDK_BUTTON1_MOTION_MASK
-                                                | GDK_BUTTON2_MOTION_MASK
-                                                | GDK_BUTTON3_MOTION_MASK
-                                                | GDK_BUTTON_PRESS_MASK
-                                                | GDK_BUTTON_RELEASE_MASK),
-                                            NULL, cursor, GDK_CURRENT_TIME);
-
-    return (status == GDK_GRAB_SUCCESS) ? TRUE : FALSE;
-}
-
-void
-glass_gdk_mouse_devices_ungrab() {
-#ifdef GLASS_GTK3_DISABLED
-//this GTK 3 approach has synchronization issues covered in JDK-8176844
-// As the approach is also deprecated in GTK 3.20+, revert back to using GTK 2 mechanism
-        GList *devices = gdk_device_manager_list_devices(
-                             gdk_display_get_device_manager(
-                                 gdk_display_get_default()),
-                                 GDK_DEVICE_TYPE_MASTER);
-        g_list_foreach(devices, (GFunc) ungrab_mouse_device, NULL);
-        g_list_free(devices);
-#else
-        gdk_pointer_ungrab(GDK_CURRENT_TIME);
-#endif
-}
-
 void
 glass_gdk_master_pointer_get_position(gint *x, gint *y) {
 #ifdef GLASS_GTK3
         gdk_device_get_position(gdk_device_manager_get_client_pointer(
                                     gdk_display_get_device_manager(
@@ -603,30 +539,10 @@
 #else
         gdk_display_get_pointer(gdk_display_get_default(), NULL, x, y, NULL);
 #endif
 }
 
-gboolean
-glass_gdk_device_is_grabbed(GdkDevice *device) {
-#ifdef GLASS_GTK3
-        return gdk_display_device_is_grabbed(gdk_display_get_default(), device);
-#else
-        (void) device;
-        return gdk_display_pointer_is_grabbed(gdk_display_get_default());
-#endif
-}
-
-void
-glass_gdk_device_ungrab(GdkDevice *device) {
-#ifdef GLASS_GTK3
-        gdk_device_ungrab(device, GDK_CURRENT_TIME);
-#else
-        (void) device;
-        gdk_pointer_ungrab(GDK_CURRENT_TIME);
-#endif
-}
-
 GdkWindow *
 glass_gdk_device_get_window_at_position(GdkDevice *device, gint *x, gint *y) {
 #ifdef GLASS_GTK3
         return gdk_device_get_window_at_position(device, x, y);
 #else
@@ -731,53 +647,10 @@
 
     configure_opaque_window(window);
     return FALSE;
 }
 
-static void
-grab_mouse_device(GdkDevice *device, DeviceGrabContext *context) {
-    GdkInputSource source = gdk_device_get_source(device);
-    if (source == GDK_SOURCE_MOUSE) {
-#ifdef GLASS_GTK3
-        GdkGrabStatus status = gdk_device_grab(device,
-                                               context->window,
-                                               GDK_OWNERSHIP_NONE,
-                                               TRUE,
-                                               GDK_ALL_EVENTS_MASK,
-                                               NULL,
-                                               GDK_CURRENT_TIME);
-#else
-        GdkGrabStatus status = GDK_GRAB_SUCCESS;
-/* FIXME reachable by 2?
-        GdkGrabStatus status = gdk_device_grab(device,
-                                               context->window,
-                                               GDK_OWNERSHIP_NONE,
-                                               TRUE,
-                                               GDK_ALL_EVENTS_MASK,
-                                               NULL,
-                                               GDK_CURRENT_TIME);
-                                       */
-#endif
-        if (status == GDK_GRAB_SUCCESS) {
-            context->grabbed = TRUE;
-        }
-    }
-}
-
-static void
-ungrab_mouse_device(GdkDevice *device) {
-#ifdef GLASS_GTK3
-    GdkInputSource source = gdk_device_get_source(device);
-    if (source == GDK_SOURCE_MOUSE) {
-        gdk_device_ungrab(device, GDK_CURRENT_TIME);
-    }
-#else
-    (void) device;
-    // not used on the GTK2 path
-#endif
-}
-
 GdkPixbuf *
 glass_pixbuf_from_window(GdkWindow *window,
     gint srcx, gint srcy,
     gint width, gint height)
 {
