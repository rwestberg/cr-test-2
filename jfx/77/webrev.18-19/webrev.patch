diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
@@ -167,10 +167,11 @@
 
 static GdkAtom atom_net_wm_state = gdk_atom_intern_static_string("_NET_WM_STATE");
 static GdkAtom atom_net_wm_frame_extents = gdk_atom_intern_static_string("_NET_FRAME_EXTENTS");
 
 WindowContext * WindowContext::sm_mouse_drag_window = NULL;
+WindowContext * WindowContext::sm_grab_window = NULL;
 
 WindowContext::WindowContext(jobject _jwindow, WindowContext *_owner, long _screen,
                                    WindowFrameType _frame_type, WindowType type, GdkWMFunction wmf) :
         screen(_screen),
         frame_type(_frame_type),
@@ -184,21 +185,16 @@
         is_iconified(false),
         is_maximized(false),
         is_mouse_entered(false),
         can_be_deleted(false),
         events_processing_cnt(0),
-        win_group(NULL),
         pointer_device(NULL) {
 
     jwindow = mainEnv->NewGlobalRef(_jwindow);
 
     gtk_widget = gtk_window_new(type == POPUP ? GTK_WINDOW_POPUP : GTK_WINDOW_TOPLEVEL);
 
-    if (type != POPUP && owner == NULL) {
-        win_group = gtk_window_group_new();
-    }
-
     if (gchar * app_name = get_application_name()) {
         gtk_window_set_wmclass(GTK_WINDOW(gtk_widget), app_name, app_name);
         g_free(app_name);
     }
 
@@ -334,11 +330,11 @@
 void WindowContext::process_focus(GdkEventFocus *event) {
     if (!event->in && WindowContext::sm_mouse_drag_window == this) {
         ungrab_mouse_drag_focus();
     }
 
-    if (!event->in) {
+    if (!event->in && WindowContext::sm_grab_window == this) {
         ungrab_focus();
     }
 
     if (xim.enabled && xim.ic) {
         if (event->in) {
@@ -425,11 +421,13 @@
 
     if (WindowContext::sm_mouse_drag_window == this) {
         ungrab_mouse_drag_focus();
     }
 
-    ungrab_focus();
+    if (WindowContext::sm_grab_window == this) {
+        ungrab_focus();
+    }
 
     std::set<WindowContext *>::iterator it;
     for (it = children.begin(); it != children.end(); ++it) {
         // FIX JDK-8226537: this method calls set_owner(NULL) which prevents
         // WindowContext::process_destroy() to call remove_child() (because children
@@ -512,11 +510,11 @@
     // Upper layers expects from us Windows behavior:
     // all mouse events should be delivered to window where drag begins
     // and no exit/enter event should be reported during this drag.
     // We can grab mouse pointer for these needs.
     if (press) {
-        grab_mouse_drag_focus();
+        grab_mouse_drag_focus(NULL, true);
     } else {
         if ((event->state & MOUSE_BUTTONS_MASK)
             && !(state & MOUSE_BUTTONS_MASK)) { // all buttons released
             ungrab_mouse_drag_focus();
         } else if (event->button == 8 || event->button == 9) {
@@ -902,10 +900,18 @@
         CHECK_JNI_EXCEPTION(mainEnv);
     }
 }
 
 void WindowContext::set_cursor(GdkCursor *cursor) {
+    if (!is_in_drag()) {
+        if (WindowContext::sm_mouse_drag_window) {
+            grab_mouse_drag_focus(cursor, false);
+        } else if (WindowContext::sm_grab_window) {
+            grab_mouse_drag_focus(cursor, true);
+        }
+    }
+
     gdk_window_set_cursor(gdk_window, cursor);
 }
 
 void WindowContext::set_level(int level) {
     if (level == com_sun_glass_ui_Window_Level_NORMAL) {
@@ -1086,23 +1092,15 @@
 }
 
 void WindowContext::add_child(WindowContext *child) {
     children.insert(child);
     gtk_window_set_transient_for(child->get_gtk_window(), this->get_gtk_window());
-
-    if (win_group != NULL) {
-        gtk_window_group_add_window(win_group, GTK_WINDOW(child->get_gtk_widget()));
-    }
 }
 
 void WindowContext::remove_child(WindowContext *child) {
     children.erase(child);
     gtk_window_set_transient_for(child->get_gtk_window(), NULL);
-
-    if (win_group != NULL) {
-        gtk_window_group_remove_window(win_group, GTK_WINDOW(child->get_gtk_widget()));
-    }
 }
 
 void WindowContext::show_or_hide_children(bool show) {
     std::set<WindowContext *>::iterator it;
     for (it = children.begin(); it != children.end(); ++it) {
@@ -1118,39 +1116,29 @@
 bool WindowContext::is_dead() {
     return can_be_deleted;
 }
 
 bool WindowContext::grab_focus() {
-    if (win_group == NULL) {
-        return FALSE;
-    }
-
-    if (!gtk_widget_has_grab(gtk_widget)) {
-        GtkWidget *current_grab = gtk_grab_get_current();
-
-        if (current_grab != NULL) {
-            gtk_grab_remove(current_grab);
-        }
-
-        gtk_grab_add(gtk_widget);
+    if (WindowContext::sm_mouse_drag_window
+            || grab_mouse_drag_focus(NULL, true)) {
+        WindowContext::sm_grab_window = this;
+        return true;
+    } else {
+        return false;
     }
-
-    return TRUE;
 }
 
 void WindowContext::ungrab_focus() {
-    if (win_group == NULL) {
-        return;
+    if (!WindowContext::sm_mouse_drag_window) {
+        ungrab_mouse_drag_focus();
     }
 
-    if (gtk_widget_has_grab(gtk_widget)) {
-        gtk_grab_remove(gtk_widget);
+    WindowContext::sm_grab_window = NULL;
 
-        if (jwindow) {
-            mainEnv->CallVoidMethod(jwindow, jWindowNotifyFocusUngrab);
-            CHECK_JNI_EXCEPTION(mainEnv)
-        }
+    if (jwindow) {
+        mainEnv->CallVoidMethod(jwindow, jWindowNotifyFocusUngrab);
+        CHECK_JNI_EXCEPTION(mainEnv)
     }
 }
 
 void WindowContext::restack(bool restack) {
     gdk_window_restack(gdk_window, NULL, restack ? TRUE : FALSE);
@@ -1423,31 +1411,32 @@
 #endif
 
     return device;
 }
 
-void WindowContext::grab_mouse_drag_focus() {
+bool WindowContext::grab_mouse_drag_focus(GdkCursor *cursor, bool owner_events) {
     if (is_grab_disabled()) {
-        return;
+        return false;
     }
 
     ungrab_mouse_drag_focus();
 
     pointer_device = get_pointer_device();
 #ifdef GLASS_GTK3
 #if GTK_CHECK_VERSION(3, 20, 0)
-    gdk_seat_grab(gdk_device_get_seat(pointer_device),
-                  gdk_window, GDK_SEAT_CAPABILITY_ALL, TRUE, NULL, NULL, NULL, NULL);
+    GdkGrabStatus status = gdk_seat_grab(gdk_device_get_seat(pointer_device),
+                                        gdk_window, GDK_SEAT_CAPABILITY_ALL, owner_events, cursor, NULL, NULL, NULL);
 #else
-    gdk_device_grab(pointer_device, gdk_window, GDK_OWNERSHIP_WINDOW, TRUE, GDK_ALL_EVENTS_MASK,
-                    NULL, GDK_CURRENT_TIME);
+    GdkGrabStatus status = gdk_device_grab(pointer_device, gdk_window, GDK_OWNERSHIP_WINDOW, owner_events, GDK_ALL_EVENTS_MASK,
+                                            cursor, GDK_CURRENT_TIME);
 #endif
 #else
-    gdk_pointer_grab(gdk_window, TRUE, GDK_ALL_EVENTS_MASK, NULL, NULL, GDK_CURRENT_TIME);
+    GdkGrabStatus status = gdk_pointer_grab(gdk_window, owner_events, GDK_ALL_EVENTS_MASK, NULL, cursor, GDK_CURRENT_TIME);
 #endif
-
     WindowContext::sm_mouse_drag_window = this;
+
+    return (status == GDK_GRAB_SUCCESS) ? true : false;
 }
 
 void WindowContext::ungrab_mouse_drag_focus() {
     if (!pointer_device) {
         return;
@@ -1463,10 +1452,14 @@
     gdk_pointer_ungrab(GDK_CURRENT_TIME);
 #endif
     pointer_device = NULL;
 
     WindowContext::sm_mouse_drag_window = NULL;
+
+    if (WindowContext::sm_grab_window) {
+        WindowContext::sm_grab_window->grab_focus();
+    }
 }
 
 WindowContext::~WindowContext() {
     if (xim.ic) {
         XDestroyIC(xim.ic);
diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
@@ -169,11 +169,11 @@
     GdkWindow *gdk_window;
     BgColor bg_color;
     GdkDevice *pointer_device;
 
     static WindowContext* sm_mouse_drag_window;
-
+    static WindowContext* sm_grab_window;
 public:
     WindowContext(jobject, WindowContext *, long, WindowFrameType, WindowType, GdkWMFunction);
 
     bool hasIME();
     bool filterIME(GdkEvent *);
@@ -259,11 +259,11 @@
     void size_position_notify(bool, bool);
     void update_ontop_tree(bool);
     bool on_top_inherited();
     bool effective_on_top();
     GdkDevice * get_pointer_device();
-    void grab_mouse_drag_focus();
+    bool grab_mouse_drag_focus(GdkCursor *cursor, bool owner_events);
     void ungrab_mouse_drag_focus();
 };
 
 void destroy_and_delete_ctx(WindowContext *ctx);
 
