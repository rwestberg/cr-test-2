diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/DatasetDOMStringMap.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/DatasetDOMStringMap.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/DatasetDOMStringMap.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/DatasetDOMStringMap.cpp
@@ -26,15 +26,18 @@
 #include "config.h"
 #include "DatasetDOMStringMap.h"
 
 #include "Element.h"
 #include <wtf/ASCIICType.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/IsoMallocInlines.h>
+#include <wtf/text/AtomString.h>
 #include <wtf/text/StringBuilder.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(DatasetDOMStringMap);
+
 static bool isValidAttributeName(const String& name)
 {
     if (!name.startsWith("data-"))
         return false;
 
@@ -104,11 +107,11 @@
     }
     return true;
 }
 
 template<typename CharacterType>
-static inline AtomicString convertPropertyNameToAttributeName(const StringImpl& name)
+static inline AtomString convertPropertyNameToAttributeName(const StringImpl& name)
 {
     const CharacterType dataPrefix[] = { 'd', 'a', 't', 'a', '-' };
 
     Vector<CharacterType, 32> buffer;
 
@@ -124,14 +127,14 @@
             buffer.append('-');
             buffer.append(toASCIILower(character));
         } else
             buffer.append(character);
     }
-    return AtomicString(buffer.data(), buffer.size());
+    return AtomString(buffer.data(), buffer.size());
 }
 
-static AtomicString convertPropertyNameToAttributeName(const String& name)
+static AtomString convertPropertyNameToAttributeName(const String& name)
 {
     if (name.isNull())
         return nullAtom();
 
     StringImpl* nameImpl = name.impl();
@@ -156,11 +159,11 @@
         return false;
 
     auto attributeIteratorAccessor = m_element.attributesIterator();
     if (attributeIteratorAccessor.attributeCount() == 1) {
         // If the node has a single attribute, it is the dataset member accessed in most cases.
-        // Building a new AtomicString in that case is overkill so we do a direct character comparison.
+        // Building a new AtomString in that case is overkill so we do a direct character comparison.
         const auto& attribute = *attributeIteratorAccessor.begin();
         if (propertyNameMatchesAttributeName(propertyName, attribute.localName()))
             return true;
     } else {
         auto attributeName = convertPropertyNameToAttributeName(propertyName);
@@ -186,34 +189,34 @@
     }
 
     return names;
 }
 
-const AtomicString* DatasetDOMStringMap::item(const String& propertyName) const
+const AtomString* DatasetDOMStringMap::item(const String& propertyName) const
 {
     if (m_element.hasAttributes()) {
         AttributeIteratorAccessor attributeIteratorAccessor = m_element.attributesIterator();
 
         if (attributeIteratorAccessor.attributeCount() == 1) {
             // If the node has a single attribute, it is the dataset member accessed in most cases.
-            // Building a new AtomicString in that case is overkill so we do a direct character comparison.
+            // Building a new AtomString in that case is overkill so we do a direct character comparison.
             const Attribute& attribute = *attributeIteratorAccessor.begin();
             if (propertyNameMatchesAttributeName(propertyName, attribute.localName()))
                 return &attribute.value();
         } else {
-            AtomicString attributeName = convertPropertyNameToAttributeName(propertyName);
+            AtomString attributeName = convertPropertyNameToAttributeName(propertyName);
             for (const Attribute& attribute : attributeIteratorAccessor) {
                 if (attribute.localName() == attributeName)
                     return &attribute.value();
             }
         }
     }
 
     return nullptr;
 }
 
-String DatasetDOMStringMap::namedItem(const AtomicString& name) const
+String DatasetDOMStringMap::namedItem(const AtomString& name) const
 {
     if (const auto* value = item(name))
         return *value;
     return String { };
 }
