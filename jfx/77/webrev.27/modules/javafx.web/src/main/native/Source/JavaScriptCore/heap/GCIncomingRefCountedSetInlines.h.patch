diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/GCIncomingRefCountedSetInlines.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/GCIncomingRefCountedSetInlines.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/GCIncomingRefCountedSetInlines.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/GCIncomingRefCountedSetInlines.h
@@ -38,11 +38,11 @@
 
 template<typename T>
 void GCIncomingRefCountedSet<T>::lastChanceToFinalize()
 {
     for (size_t i = m_vector.size(); i--;)
-        m_vector[i]->filterIncomingReferences(removeAll);
+        m_vector[i]->filterIncomingReferences([] (JSCell*) { return false; });
 }
 
 template<typename T>
 bool GCIncomingRefCountedSet<T>::addReference(JSCell* cell, T* object)
 {
@@ -57,33 +57,21 @@
     ASSERT(object->numberOfIncomingReferences());
     return true;
 }
 
 template<typename T>
-void GCIncomingRefCountedSet<T>::sweep()
+void GCIncomingRefCountedSet<T>::sweep(VM& vm)
 {
     for (size_t i = 0; i < m_vector.size(); ++i) {
         T* object = m_vector[i];
         size_t size = object->gcSizeEstimateInBytes();
         ASSERT(object->isDeferred());
         ASSERT(object->numberOfIncomingReferences());
-        if (!object->filterIncomingReferences(removeDead))
+        if (!object->filterIncomingReferences([&] (JSCell* cell) { return vm.heap.isMarked(cell); }))
             continue;
         m_bytes -= size;
         m_vector[i--] = m_vector.last();
         m_vector.removeLast();
     }
 }
 
-template<typename T>
-bool GCIncomingRefCountedSet<T>::removeAll(JSCell*)
-{
-    return false;
-}
-
-template<typename T>
-bool GCIncomingRefCountedSet<T>::removeDead(JSCell* cell)
-{
-    return Heap::isMarked(cell);
-}
-
 } // namespace JSC
