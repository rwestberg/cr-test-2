diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSPrimitiveValue.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSPrimitiveValue.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSPrimitiveValue.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSPrimitiveValue.cpp
@@ -43,15 +43,10 @@
 #include <wtf/NeverDestroyed.h>
 #include <wtf/StdLibExtras.h>
 #include <wtf/text/StringBuilder.h>
 #include <wtf/text/StringConcatenateNumbers.h>
 
-#if ENABLE(DASHBOARD_SUPPORT)
-#include "DashboardRegion.h"
-#endif
-
-
 namespace WebCore {
 
 static inline bool isValidCSSUnitTypeForDoubleConversion(CSSPrimitiveValue::UnitType unitType)
 {
     switch (unitType) {
@@ -108,13 +103,10 @@
     case CSSPrimitiveValue::CSS_STRING:
     case CSSPrimitiveValue::CSS_UNICODE_RANGE:
     case CSSPrimitiveValue::CSS_UNKNOWN:
     case CSSPrimitiveValue::CSS_URI:
     case CSSPrimitiveValue::CSS_VALUE_ID:
-#if ENABLE(DASHBOARD_SUPPORT)
-    case CSSPrimitiveValue::CSS_DASHBOARD_REGION:
-#endif
         return false;
     }
 
     ASSERT_NOT_REACHED();
     return false;
@@ -173,13 +165,10 @@
     case CSSPrimitiveValue::CSS_VALUE_ID:
     case CSSPrimitiveValue::CSS_VH:
     case CSSPrimitiveValue::CSS_VMAX:
     case CSSPrimitiveValue::CSS_VMIN:
     case CSSPrimitiveValue::CSS_VW:
-#if ENABLE(DASHBOARD_SUPPORT)
-    case CSSPrimitiveValue::CSS_DASHBOARD_REGION:
-#endif
         return false;
     }
 
     ASSERT_NOT_REACHED();
     return false;
@@ -264,22 +253,22 @@
         return CSSPrimitiveValue::CSS_UNKNOWN;
     }
     return CSSPrimitiveValue::CSS_UNKNOWN;
 }
 
-static const AtomicString& propertyName(CSSPropertyID propertyID)
+static const AtomString& propertyName(CSSPropertyID propertyID)
 {
     ASSERT_ARG(propertyID, (propertyID >= firstCSSProperty && propertyID < firstCSSProperty + numCSSProperties));
 
-    return getPropertyNameAtomicString(propertyID);
+    return getPropertyNameAtomString(propertyID);
 }
 
-static const AtomicString& valueName(CSSValueID valueID)
+static const AtomString& valueName(CSSValueID valueID)
 {
     ASSERT_ARG(valueID, (valueID >= firstCSSValueKeyword && valueID <= lastCSSValueKeyword));
 
-    return getValueNameAtomicString(valueID);
+    return getValueNameAtomString(valueID);
 }
 
 CSSPrimitiveValue::CSSPrimitiveValue(CSSValueID valueID)
     : CSSValue(PrimitiveClass)
 {
@@ -435,19 +424,10 @@
     m_primitiveUnitType = CSS_QUAD;
     m_hasCachedCSSText = false;
     m_value.quad = &quad.leakRef();
 }
 
-#if ENABLE(DASHBOARD_SUPPORT)
-void CSSPrimitiveValue::init(RefPtr<DashboardRegion>&& r)
-{
-    m_primitiveUnitType = CSS_DASHBOARD_REGION;
-    m_hasCachedCSSText = false;
-    m_value.region = r.leakRef();
-}
-#endif
-
 void CSSPrimitiveValue::init(Ref<Pair>&& p)
 {
     m_primitiveUnitType = CSS_PAIR;
     m_hasCachedCSSText = false;
     m_value.pair = &p.leakRef();
@@ -494,16 +474,10 @@
         m_value.quad->deref();
         break;
     case CSS_PAIR:
         m_value.pair->deref();
         break;
-#if ENABLE(DASHBOARD_SUPPORT)
-    case CSS_DASHBOARD_REGION:
-        if (m_value.region)
-            m_value.region->deref();
-        break;
-#endif
     case CSS_CALC:
         m_value.calc->deref();
         break;
     case CSS_CALC_PERCENTAGE_WITH_NUMBER:
     case CSS_CALC_PERCENTAGE_WITH_LENGTH:
@@ -1027,14 +1001,12 @@
         if (!separator.isEmpty()) {
             result.appendLiteral(", ");
             serializeString(separator, result);
         }
         String listStyle = m_value.counter->listStyle();
-        if (!listStyle.isEmpty()) {
-            result.appendLiteral(", ");
-            result.append(listStyle);
-        }
+        if (!listStyle.isEmpty())
+            result.append(", ", listStyle);
         result.append(')');
 
         return result.toString();
     }
     case CSS_RECT:
@@ -1043,46 +1015,10 @@
         return quadValue()->cssText();
     case CSS_RGBCOLOR:
         return color().cssText();
     case CSS_PAIR:
         return pairValue()->cssText();
-#if ENABLE(DASHBOARD_SUPPORT)
-    case CSS_DASHBOARD_REGION: {
-        StringBuilder result;
-        for (DashboardRegion* region = dashboardRegionValue(); region; region = region->m_next.get()) {
-            if (!result.isEmpty())
-                result.append(' ');
-            result.appendLiteral("dashboard-region(");
-            result.append(region->m_label);
-            if (region->m_isCircle)
-                result.appendLiteral(" circle");
-            else if (region->m_isRectangle)
-                result.appendLiteral(" rectangle");
-            else
-                break;
-            if (region->top()->m_primitiveUnitType == CSS_VALUE_ID && region->top()->valueID() == CSSValueInvalid) {
-                ASSERT(region->right()->m_primitiveUnitType == CSS_VALUE_ID);
-                ASSERT(region->bottom()->m_primitiveUnitType == CSS_VALUE_ID);
-                ASSERT(region->left()->m_primitiveUnitType == CSS_VALUE_ID);
-                ASSERT(region->right()->valueID() == CSSValueInvalid);
-                ASSERT(region->bottom()->valueID() == CSSValueInvalid);
-                ASSERT(region->left()->valueID() == CSSValueInvalid);
-            } else {
-                result.append(' ');
-                result.append(region->top()->cssText());
-                result.append(' ');
-                result.append(region->right()->cssText());
-                result.append(' ');
-                result.append(region->bottom()->cssText());
-                result.append(' ');
-                result.append(region->left()->cssText());
-            }
-            result.append(')');
-        }
-        return result.toString();
-    }
-#endif
     case CSS_CALC:
         return m_value.calc->cssText();
     case CSS_SHAPE:
         return m_value.shape->cssText();
     case CSS_VW:
@@ -1173,14 +1109,10 @@
         return m_value.quad && other.m_value.quad && m_value.quad->equals(*other.m_value.quad);
     case CSS_RGBCOLOR:
         return color() == other.color();
     case CSS_PAIR:
         return m_value.pair && other.m_value.pair && m_value.pair->equals(*other.m_value.pair);
-#if ENABLE(DASHBOARD_SUPPORT)
-    case CSS_DASHBOARD_REGION:
-        return m_value.region && other.m_value.region && m_value.region->equals(*other.m_value.region);
-#endif
     case CSS_CALC:
         return m_value.calc && other.m_value.calc && m_value.calc->equals(*other.m_value.calc);
     case CSS_SHAPE:
         return m_value.shape && other.m_value.shape && m_value.shape->equals(*other.m_value.shape);
     case CSS_FONT_FAMILY:
