diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/MIMETypeRegistry.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/MIMETypeRegistry.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/MIMETypeRegistry.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/MIMETypeRegistry.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2006-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2006-2019 Apple Inc. All rights reserved.
  * Copyright (C) 2008, 2009 Torch Mobile Inc. All rights reserved. (http://www.torchmobile.com/)
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
@@ -51,10 +51,20 @@
 #if HAVE(AVASSETREADER)
 #include "ContentType.h"
 #include "ImageDecoderAVFObjC.h"
 #endif
 
+#if USE(QUICK_LOOK)
+#include "PreviewConverter.h"
+#endif
+
+#if USE(APPLE_INTERNAL_SDK)
+#include <WebKitAdditions/AdditionalSystemPreviewTypes.h>
+#else
+#define ADDITIONAL_SYSTEM_PREVIEW_TYPES
+#endif
+
 namespace WebCore {
 
 const HashSet<String, ASCIICaseInsensitiveHash>& MIMETypeRegistry::supportedImageMIMETypes()
 {
     static NeverDestroyed<HashSet<String, ASCIICaseInsensitiveHash>> supportedImageMIMETypes = std::initializer_list<String> {
@@ -171,11 +181,11 @@
         }
         return supportedImageMIMETypesForEncoding;
     }());
 #else
     static NeverDestroyed<HashSet<String, ASCIICaseInsensitiveHash>> supportedImageMIMETypesForEncoding =std::initializer_list<String> {
-#if USE(CG)
+#if USE(CG) || USE(DIRECT2D)
         // FIXME: Add Windows support for all the supported UTI's when a way to convert from MIMEType to UTI reliably is found.
         // For now, only support PNG, JPEG and GIF. See <rdar://problem/6095286>.
         "image/png"_s,
         "image/jpeg"_s,
         "image/gif"_s,
@@ -645,10 +655,15 @@
         return true;
 
     if (isSupportedJavaScriptMIMEType(mimeType) || isSupportedJSONMIMEType(mimeType))
         return true;
 
+#if USE(QUICK_LOOK)
+    if (PreviewConverter::supportsMIMEType(mimeType))
+        return true;
+#endif
+
     if (startsWithLettersIgnoringASCIICase(mimeType, "text/"))
         return !isUnsupportedTextMIMEType(mimeType);
 
     return false;
 }
@@ -664,11 +679,12 @@
     static NeverDestroyed<HashSet<String, ASCIICaseInsensitiveHash>> systemPreviewMIMETypes = std::initializer_list<String> {
         // The official type: https://www.iana.org/assignments/media-types/model/vnd.usdz+zip
         "model/vnd.usdz+zip",
         // Unofficial, but supported because we documented them.
         "model/usd",
-        "model/vnd.pixar.usd"
+        "model/vnd.pixar.usd",
+        ADDITIONAL_SYSTEM_PREVIEW_TYPES
     };
     return systemPreviewMIMETypes;
 }
 
 bool MIMETypeRegistry::isSystemPreviewMIMEType(const String& mimeType)
