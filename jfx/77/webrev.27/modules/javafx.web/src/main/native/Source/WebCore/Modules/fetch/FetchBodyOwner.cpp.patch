diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBodyOwner.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBodyOwner.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBodyOwner.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBodyOwner.cpp
@@ -122,11 +122,13 @@
         promise->reject(*exception);
         return;
     }
 
     if (isBodyNullOrOpaque()) {
-        promise->resolve<IDLInterface<Blob>>(Blob::create(Vector<uint8_t> { }, Blob::normalizedContentType(extractMIMETypeFromMediaType(m_contentType))));
+        promise->resolveCallbackValueWithNewlyCreated<IDLInterface<Blob>>([this](auto& context) {
+            return Blob::create(context.sessionID(), Vector<uint8_t> { }, Blob::normalizedContentType(extractMIMETypeFromMediaType(m_contentType)));
+        });
         return;
     }
     if (isDisturbedOrLocked()) {
         promise->reject(Exception { TypeError, "Body is disturbed or locked"_s });
         return;
@@ -143,13 +145,17 @@
     if (owner.isBodyNull())
         return;
     m_body = owner.m_body->clone();
 }
 
-void FetchBodyOwner::extractBody(ScriptExecutionContext& context, FetchBody::Init&& value)
+ExceptionOr<void> FetchBodyOwner::extractBody(FetchBody::Init&& value)
 {
-    m_body = FetchBody::extract(context, WTFMove(value), m_contentType);
+    auto result = FetchBody::extract(WTFMove(value), m_contentType);
+    if (result.hasException())
+        return result.releaseException();
+    m_body = result.releaseReturnValue();
+    return { };
 }
 
 void FetchBodyOwner::updateContentType()
 {
     String contentType = m_headers->fastGet(HTTPHeaderName::ContentType);
@@ -238,11 +244,11 @@
         m_body->loadingFailed(Exception { TypeError, "Blob loading failed"_s});
         return;
     }
 
     m_blobLoader.emplace(*this);
-    m_blobLoader->loader = std::make_unique<FetchLoader>(*m_blobLoader, consumer);
+    m_blobLoader->loader = makeUnique<FetchLoader>(*m_blobLoader, consumer);
 
     m_blobLoader->loader->start(*scriptExecutionContext(), blob);
     if (!m_blobLoader->loader->isStarted()) {
         m_body->loadingFailed(Exception { TypeError, "Blob loading failed"_s});
         m_blobLoader = WTF::nullopt;
