diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLKeygenElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLKeygenElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLKeygenElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLKeygenElement.cpp
@@ -55,11 +55,11 @@
 
 protected:
     KeygenSelectElement(Document& document)
         : HTMLSelectElement(selectTag, document, 0)
     {
-        static NeverDestroyed<AtomicString> pseudoId("-webkit-keygen-select", AtomicString::ConstructFromLiteral);
+        static NeverDestroyed<AtomString> pseudoId("-webkit-keygen-select", AtomString::ConstructFromLiteral);
         setPseudo(pseudoId);
     }
 
 private:
     Ref<Element> cloneElementWithoutAttributesAndChildren(Document& targetDocument) override
@@ -90,11 +90,11 @@
 Ref<HTMLKeygenElement> HTMLKeygenElement::create(const QualifiedName& tagName, Document& document, HTMLFormElement* form)
 {
     return adoptRef(*new HTMLKeygenElement(tagName, document, form));
 }
 
-void HTMLKeygenElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLKeygenElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     // Reflect disabled attribute on the shadow select element
     if (name == disabledAttr)
         shadowSelect()->setAttribute(name, value);
 
@@ -105,11 +105,11 @@
 {
     const auto& keyType = attributeWithoutSynchronization(keytypeAttr);
     return keyType.isNull() || equalLettersIgnoringASCIICase(keyType, "rsa");
 }
 
-void HTMLKeygenElement::setKeytype(const AtomicString& value)
+void HTMLKeygenElement::setKeytype(const AtomString& value)
 {
     setAttributeWithoutSynchronization(keytypeAttr, value);
 }
 
 String HTMLKeygenElement::keytype() const
@@ -127,16 +127,21 @@
         return false;
     formData.append(name(), value);
     return true;
 }
 
-const AtomicString& HTMLKeygenElement::formControlType() const
+const AtomString& HTMLKeygenElement::formControlType() const
 {
-    static NeverDestroyed<const AtomicString> keygen("keygen", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> keygen("keygen", AtomString::ConstructFromLiteral);
     return keygen;
 }
 
+int HTMLKeygenElement::defaultTabIndex() const
+{
+    return 0;
+}
+
 void HTMLKeygenElement::reset()
 {
     static_cast<HTMLFormControlElement*>(shadowSelect())->reset();
 }
 
