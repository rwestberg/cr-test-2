diff a/modules/javafx.web/src/main/native/Source/WebCore/html/Autofill.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/Autofill.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/Autofill.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/Autofill.cpp
@@ -29,12 +29,12 @@
 #include "HTMLFormControlElement.h"
 #include "HTMLFormElement.h"
 #include "HTMLNames.h"
 #include <wtf/HashMap.h>
 #include <wtf/NeverDestroyed.h>
-#include <wtf/text/AtomicString.h>
-#include <wtf/text/AtomicStringHash.h>
+#include <wtf/text/AtomString.h>
+#include <wtf/text/AtomStringHash.h>
 
 namespace WebCore {
 
 enum class AutofillCategory {
     Off,
@@ -46,11 +46,11 @@
 struct AutofillInfo {
     AutofillFieldName fieldName;
     AutofillCategory category;
 };
 
-static const HashMap<AtomicString, AutofillInfo>& fieldNameMap()
+static const HashMap<AtomString, AutofillInfo>& fieldNameMap()
 {
     static const auto map = makeNeverDestroyed([] {
         struct MapEntry {
             const char* name;
             AutofillInfo value;
@@ -111,34 +111,34 @@
             { "tel-local-suffix", { AutofillFieldName::TelLocalSuffix, AutofillCategory::Contact } },
             { "tel-extension", { AutofillFieldName::TelExtension, AutofillCategory::Contact } },
             { "email", { AutofillFieldName::Email, AutofillCategory::Contact } },
             { "impp", { AutofillFieldName::Impp, AutofillCategory::Contact } },
         };
-        HashMap<AtomicString, AutofillInfo> map;
+        HashMap<AtomString, AutofillInfo> map;
         for (auto& entry : entries)
             map.add(entry.name, entry.value);
         return map;
     }());
     return map;
 }
 
-AutofillFieldName toAutofillFieldName(const AtomicString& value)
+AutofillFieldName toAutofillFieldName(const AtomString& value)
 {
     auto map = fieldNameMap();
     auto it = map.find(value);
     if (it == map.end())
         return AutofillFieldName::None;
     return it->value.fieldName;
 }
 
-static inline bool isContactToken(const AtomicString& token)
+static inline bool isContactToken(const AtomString& token)
 {
-    static NeverDestroyed<AtomicString> home("home", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<AtomicString> work("work", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<AtomicString> mobile("mobile", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<AtomicString> fax("fax", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<AtomicString> pager("pager", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> home("home", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> work("work", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> mobile("mobile", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> fax("fax", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> pager("pager", AtomString::ConstructFromLiteral);
 
     return token == home || token == work || token == mobile || token == fax || token == pager;
 }
 
 static unsigned maxTokensForAutofillFieldCategory(AutofillCategory category)
@@ -159,12 +159,12 @@
 }
 
 // https://html.spec.whatwg.org/multipage/forms.html#processing-model-3
 AutofillData AutofillData::createFromHTMLFormControlElement(const HTMLFormControlElement& element)
 {
-    static NeverDestroyed<AtomicString> on("on", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<AtomicString> off("off", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> on("on", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> off("off", AtomString::ConstructFromLiteral);
 
     // Label: Default
     // 26. Let the element's IDL-exposed autofill value be the empty string, and its autofill hint set and autofill scope be empty.
     // 27. If the element's autocomplete attribute is wearing the autofill anchor mantle, then let the element's autofill field name be the empty string and abort these steps.
     // 28. Let form be the element's form owner, if any, or null otherwise.
@@ -178,11 +178,11 @@
             return { off, emptyString() };
         return { on, emptyString() };
     };
 
 
-    const AtomicString& attributeValue = element.attributeWithoutSynchronization(HTMLNames::autocompleteAttr);
+    const AtomString& attributeValue = element.attributeWithoutSynchronization(HTMLNames::autocompleteAttr);
 
     // 1. If the element has no autocomplete attribute, then jump to the step labeled default.
     if (attributeValue.isNull())
         return defaultLabel();
 
