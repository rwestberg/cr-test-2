diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAltGlyphElement.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAltGlyphElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAltGlyphElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAltGlyphElement.h
@@ -1,9 +1,9 @@
 /*
  * Copyright (C) 2004, 2005, 2008 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005, 2006 Rob Buis <buis@kde.org>
- * Copyright (C) 2008-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2008-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -33,27 +33,27 @@
 class SVGAltGlyphElement final : public SVGTextPositioningElement, public SVGURIReference {
     WTF_MAKE_ISO_ALLOCATED(SVGAltGlyphElement);
 public:
     static Ref<SVGAltGlyphElement> create(const QualifiedName&, Document&);
 
-    const AtomicString& glyphRef() const;
-    ExceptionOr<void> setGlyphRef(const AtomicString&);
-    const AtomicString& format() const;
-    ExceptionOr<void> setFormat(const AtomicString&);
+    const AtomString& glyphRef() const;
+    ExceptionOr<void> setGlyphRef(const AtomString&);
+    const AtomString& format() const;
+    ExceptionOr<void> setFormat(const AtomString&);
 
     bool hasValidGlyphElements(Vector<String>& glyphNames) const;
 
 private:
     SVGAltGlyphElement(const QualifiedName&, Document&);
 
-    using AttributeOwnerProxy = SVGAttributeOwnerProxyImpl<SVGAltGlyphElement, SVGTextPositioningElement, SVGURIReference>;
-    const SVGAttributeOwnerProxy& attributeOwnerProxy() const final { return m_attributeOwnerProxy; }
+    using PropertyRegistry = SVGPropertyOwnerRegistry<SVGAltGlyphElement, SVGTextPositioningElement, SVGURIReference>;
+    const SVGPropertyRegistry& propertyRegistry() const final { return m_propertyRegistry; }
 
     RenderPtr<RenderElement> createElementRenderer(RenderStyle&&, const RenderTreePosition&) override;
     bool childShouldCreateRenderer(const Node&) const override;
 
-    AttributeOwnerProxy m_attributeOwnerProxy { *this };
+    PropertyRegistry m_propertyRegistry { *this };
 };
 
 } // namespace WebCore
 
 #endif
