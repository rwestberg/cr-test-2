diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDatabaseAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDatabaseAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDatabaseAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDatabaseAgent.cpp
@@ -29,10 +29,12 @@
 
 #include "config.h"
 #include "InspectorDatabaseAgent.h"
 
 #include "Database.h"
+#include "DatabaseTracker.h"
+#include "Document.h"
 #include "InspectorDatabaseResource.h"
 #include "InstrumentingAgents.h"
 #include "SQLError.h"
 #include "SQLResultSet.h"
 #include "SQLResultSetRowList.h"
@@ -45,11 +47,10 @@
 #include "VoidCallback.h"
 #include <JavaScriptCore/InspectorFrontendRouter.h>
 #include <wtf/JSONValues.h>
 #include <wtf/Vector.h>
 
-
 namespace WebCore {
 
 using namespace Inspector;
 
 using ExecuteSQLCallback = Inspector::DatabaseBackendDispatcherHandler::ExecuteSQLCallback;
@@ -57,11 +58,11 @@
 namespace {
 
 void reportTransactionFailed(ExecuteSQLCallback& requestCallback, SQLError& error)
 {
     auto errorObject = Inspector::Protocol::Database::Error::create()
-        .setMessage(error.message())
+        .setMessage(error.messageIsolatedCopy())
         .setCode(error.code())
         .release();
     requestCallback.sendSuccess(nullptr, nullptr, WTFMove(errorObject));
 }
 
@@ -195,73 +196,75 @@
     }
 };
 
 } // namespace
 
-void InspectorDatabaseAgent::didOpenDatabase(RefPtr<Database>&& database, const String& domain, const String& name, const String& version)
+void InspectorDatabaseAgent::didCommitLoad()
+{
+    m_resources.clear();
+}
+
+void InspectorDatabaseAgent::didOpenDatabase(Database& database)
 {
-    if (auto* resource = findByFileName(database->fileName())) {
-        resource->setDatabase(WTFMove(database));
+    if (auto resource = findByFileName(database.fileNameIsolatedCopy())) {
+        resource->setDatabase(database);
         return;
     }
 
-    auto resource = InspectorDatabaseResource::create(WTFMove(database), domain, name, version);
+    auto resource = InspectorDatabaseResource::create(database, database.securityOrigin().host, database.stringIdentifierIsolatedCopy(), database.expectedVersionIsolatedCopy());
     m_resources.add(resource->id(), resource.ptr());
-    // Resources are only bound while visible.
-    if (m_enabled)
-        resource->bind(m_frontendDispatcher.get());
-}
-
-void InspectorDatabaseAgent::clearResources()
-{
-    m_resources.clear();
+    resource->bind(*m_frontendDispatcher);
 }
 
 InspectorDatabaseAgent::InspectorDatabaseAgent(WebAgentContext& context)
     : InspectorAgentBase("Database"_s, context)
-    , m_frontendDispatcher(std::make_unique<Inspector::DatabaseFrontendDispatcher>(context.frontendRouter))
+    , m_frontendDispatcher(makeUnique<Inspector::DatabaseFrontendDispatcher>(context.frontendRouter))
     , m_backendDispatcher(Inspector::DatabaseBackendDispatcher::create(context.backendDispatcher, this))
 {
-    m_instrumentingAgents.setInspectorDatabaseAgent(this);
 }
 
-InspectorDatabaseAgent::~InspectorDatabaseAgent()
-{
-    m_instrumentingAgents.setInspectorDatabaseAgent(nullptr);
-}
+InspectorDatabaseAgent::~InspectorDatabaseAgent() = default;
 
 void InspectorDatabaseAgent::didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*)
 {
 }
 
 void InspectorDatabaseAgent::willDestroyFrontendAndBackend(Inspector::DisconnectReason)
 {
-    ErrorString unused;
-    disable(unused);
+    ErrorString ignored;
+    disable(ignored);
 }
 
-void InspectorDatabaseAgent::enable(ErrorString&)
+void InspectorDatabaseAgent::enable(ErrorString& errorString)
 {
-    if (m_enabled)
+    if (m_instrumentingAgents.inspectorDatabaseAgent() == this) {
+        errorString = "Database domain already enabled"_s;
         return;
-    m_enabled = true;
+    }
 
-    for (auto& resource : m_resources.values())
-        resource->bind(m_frontendDispatcher.get());
+    m_instrumentingAgents.setInspectorDatabaseAgent(this);
+
+    for (auto& database : DatabaseTracker::singleton().openDatabases())
+        didOpenDatabase(database.get());
 }
 
-void InspectorDatabaseAgent::disable(ErrorString&)
+void InspectorDatabaseAgent::disable(ErrorString& errorString)
 {
-    if (!m_enabled)
+    if (m_instrumentingAgents.inspectorDatabaseAgent() != this) {
+        errorString = "Database domain already disabled"_s;
         return;
-    m_enabled = false;
+    }
+
+    m_instrumentingAgents.setInspectorDatabaseAgent(nullptr);
+
+    m_resources.clear();
 }
 
-void InspectorDatabaseAgent::getDatabaseTableNames(ErrorString& error, const String& databaseId, RefPtr<JSON::ArrayOf<String>>& names)
+void InspectorDatabaseAgent::getDatabaseTableNames(ErrorString& errorString, const String& databaseId, RefPtr<JSON::ArrayOf<String>>& names)
 {
-    if (!m_enabled) {
-        error = "Database agent is not enabled"_s;
+    if (m_instrumentingAgents.inspectorDatabaseAgent() != this) {
+        errorString = "Database domain must be enabled"_s;
         return;
     }
 
     names = JSON::ArrayOf<String>::create();
 
@@ -271,48 +274,47 @@
     }
 }
 
 void InspectorDatabaseAgent::executeSQL(const String& databaseId, const String& query, Ref<ExecuteSQLCallback>&& requestCallback)
 {
-    if (!m_enabled) {
-        requestCallback->sendFailure("Database agent is not enabled");
+    if (m_instrumentingAgents.inspectorDatabaseAgent() != this) {
+        requestCallback->sendFailure("Database domain must be enabled"_s);
         return;
     }
 
     auto* database = databaseForId(databaseId);
     if (!database) {
-        requestCallback->sendFailure("Database not found");
+        requestCallback->sendFailure("Missing database for given databaseId");
         return;
     }
 
-    database->transaction(TransactionCallback::create(&database->scriptExecutionContext(), query, requestCallback.copyRef()),
-        TransactionErrorCallback::create(&database->scriptExecutionContext(), requestCallback.copyRef()),
-        TransactionSuccessCallback::create(&database->scriptExecutionContext()));
+    database->transaction(TransactionCallback::create(&database->document(), query, requestCallback.copyRef()),
+        TransactionErrorCallback::create(&database->document(), requestCallback.copyRef()),
+        TransactionSuccessCallback::create(&database->document()));
 }
 
 String InspectorDatabaseAgent::databaseId(Database& database)
 {
     for (auto& resource : m_resources) {
-        if (resource.value->database() == &database)
+        if (&resource.value->database() == &database)
             return resource.key;
     }
     return String();
 }
 
 InspectorDatabaseResource* InspectorDatabaseAgent::findByFileName(const String& fileName)
 {
     for (auto& resource : m_resources.values()) {
-        if (resource->database()->fileName() == fileName)
+        if (resource->database().fileNameIsolatedCopy() == fileName)
             return resource.get();
     }
     return nullptr;
 }
 
 Database* InspectorDatabaseAgent::databaseForId(const String& databaseId)
 {
-    auto* resource = m_resources.get(databaseId);
-    if (!resource)
-        return nullptr;
-    return resource->database();
+    if (auto resource = m_resources.get(databaseId))
+        return &resource->database();
+    return nullptr;
 }
 
 } // namespace WebCore
