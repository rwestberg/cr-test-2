diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCascadeDescription.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCascadeDescription.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCascadeDescription.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCascadeDescription.cpp
@@ -39,11 +39,11 @@
 #if ENABLE(VARIATION_FONTS)
     Vector<void*> vector2;
 #else
     char c;
 #endif
-    AtomicString string;
+    AtomString string;
     int16_t fontSelectionRequest[3];
     float size;
     unsigned bitfields1;
     unsigned bitfields2 : 22;
     void* array;
@@ -60,20 +60,22 @@
     , m_fontSmoothing(static_cast<unsigned>(FontSmoothingMode::AutoSmoothing))
     , m_isSpecifiedFont(false)
 {
 }
 
-#if !USE_PLATFORM_SYSTEM_FALLBACK_LIST
+#if !USE(PLATFORM_SYSTEM_FALLBACK_LIST)
+
 unsigned FontCascadeDescription::effectiveFamilyCount() const
 {
     return familyCount();
 }
 
 FontFamilySpecification FontCascadeDescription::effectiveFamilyAt(unsigned i) const
 {
     return familyAt(i);
 }
+
 #endif
 
 FontSelectionValue FontCascadeDescription::lighterWeight(FontSelectionValue weight)
 {
     if (weight < FontSelectionValue(100))
@@ -105,42 +107,42 @@
 
     if (thisFamilyCount != otherFamilyCount)
         return false;
 
     for (unsigned i = 0; i < thisFamilyCount; ++i) {
-        if (!equalIgnoringASCIICase(familyAt(i), other.familyAt(i)))
+        if (!familyNamesAreEqual(familyAt(i), other.familyAt(i)))
             return false;
     }
 
     return true;
 }
 
 #endif // ENABLE(TEXT_AUTOSIZING)
 
-bool FontCascadeDescription::familyNamesAreEqual(const AtomicString& family1, const AtomicString& family2)
+bool FontCascadeDescription::familyNamesAreEqual(const AtomString& family1, const AtomString& family2)
 {
-    // FIXME: <rdar://problem/33594253> CoreText matches dot-prefixed font names case sensitively. We should
-    // always take the case insensitive patch once this radar is fixed.
+#if PLATFORM(COCOA)
     if (family1.startsWith('.'))
-        return StringHash::equal(family1.string(), family2.string());
+        return family1 == family2;
+#endif
     return ASCIICaseInsensitiveHash::equal(family1, family2);
 }
 
-unsigned FontCascadeDescription::familyNameHash(const AtomicString& family)
+unsigned FontCascadeDescription::familyNameHash(const AtomString& family)
 {
-    // FIXME: <rdar://problem/33594253> CoreText matches dot-prefixed font names case sensitively. We should
-    // always take the case insensitive patch once this radar is fixed.
+#if PLATFORM(COCOA)
     if (family.startsWith('.'))
-        return StringHash::hash(family.string());
+        return family.existingHash();
+#endif
     return ASCIICaseInsensitiveHash::hash(family);
 }
 
-String FontCascadeDescription::foldedFamilyName(const AtomicString& family)
+String FontCascadeDescription::foldedFamilyName(const String& family)
 {
-    // FIXME: <rdar://problem/33594253> CoreText matches dot-prefixed font names case sensitively. We should
-    // always take the case insensitive patch once this radar is fixed.
+#if PLATFORM(COCOA)
     if (family.startsWith('.'))
-        return family.string();
-    return family.string().foldCase();
+        return family;
+#endif
+    return family.convertToASCIILowercase();
 }
 
 } // namespace WebCore
