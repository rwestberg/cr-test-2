diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmCallingConvention.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmCallingConvention.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmCallingConvention.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmCallingConvention.h
@@ -69,19 +69,21 @@
         return result;
     }
 
     B3::ValueRep marshallArgument(B3::Type type, size_t& gpArgumentCount, size_t& fpArgumentCount, size_t& stackOffset) const
     {
-        switch (type) {
+        switch (type.kind()) {
         case B3::Int32:
         case B3::Int64:
             return marshallArgumentImpl(m_gprArgs, gpArgumentCount, stackOffset);
         case B3::Float:
         case B3::Double:
             return marshallArgumentImpl(m_fprArgs, fpArgumentCount, stackOffset);
         case B3::Void:
+        case B3::Tuple:
             break;
+
         }
         RELEASE_ASSERT_NOT_REACHED();
     }
 
 public:
@@ -90,11 +92,11 @@
     {
         static_assert(CallFrameSlot::callee * sizeof(Register) < headerSize, "We rely on this here for now.");
         static_assert(CallFrameSlot::codeBlock * sizeof(Register) < headerSize, "We rely on this here for now.");
 
         B3::PatchpointValue* getCalleePatchpoint = block->appendNew<B3::PatchpointValue>(proc, B3::Int64, origin);
-        getCalleePatchpoint->resultConstraint = B3::ValueRep::SomeRegister;
+        getCalleePatchpoint->resultConstraints = { B3::ValueRep::SomeRegister };
         getCalleePatchpoint->effects = B3::Effects::none();
         getCalleePatchpoint->setGenerator(
             [=] (CCallHelpers& jit, const B3::StackmapGenerationParams& params) {
                 GPRReg result = params[0].gpr();
                 MacroAssembler::DataLabelPtr moveLocation = jit.moveWithPatch(MacroAssembler::TrustedImmPtr(nullptr), result);
@@ -167,20 +169,23 @@
         patchpoint->clobberEarly(RegisterSet::macroScratchRegisters());
         patchpoint->clobberLate(RegisterSet::volatileRegistersForJSCall());
         patchpointFunctor(patchpoint);
         patchpoint->appendVector(constrainedArguments);
 
-        switch (returnType) {
+        switch (returnType.kind()) {
         case B3::Void:
             return nullptr;
         case B3::Float:
         case B3::Double:
-            patchpoint->resultConstraint = B3::ValueRep::reg(FPRInfo::returnValueFPR);
+            patchpoint->resultConstraints = { B3::ValueRep::reg(FPRInfo::returnValueFPR) };
             break;
         case B3::Int32:
         case B3::Int64:
-            patchpoint->resultConstraint = B3::ValueRep::reg(GPRInfo::returnValueGPR);
+            patchpoint->resultConstraints = { B3::ValueRep::reg(GPRInfo::returnValueGPR) };
+            break;
+        case B3::Tuple:
+            RELEASE_ASSERT_NOT_REACHED();
             break;
         }
         return patchpoint;
     }
 
@@ -233,10 +238,12 @@
     void marshallArgument(Type type, size_t& gpArgumentCount, size_t& fpArgumentCount, size_t& stackOffset, const RegFunc& regFunc, const StackFunc& stackFunc) const
     {
         switch (type) {
         case Type::I32:
         case Type::I64:
+        case Type::Anyref:
+        case Wasm::Funcref:
             marshallArgumentImpl(m_gprArgs, gpArgumentCount, stackOffset, regFunc, stackFunc);
             break;
         case Type::F32:
         case Type::F64:
             marshallArgumentImpl(m_fprArgs, fpArgumentCount, stackOffset, regFunc, stackFunc);
@@ -293,15 +300,17 @@
         switch (returnType) {
         case Type::Void:
             break;
         case Type::F32:
         case Type::F64:
-            patchpoint->resultConstraint = B3::ValueRep::reg(FPRInfo::returnValueFPR);
+            patchpoint->resultConstraints = { B3::ValueRep::reg(FPRInfo::returnValueFPR) };
             break;
         case Type::I32:
         case Type::I64:
-            patchpoint->resultConstraint = B3::ValueRep::reg(GPRInfo::returnValueGPR);
+        case Type::Anyref:
+        case Wasm::Funcref:
+            patchpoint->resultConstraints = { B3::ValueRep::reg(GPRInfo::returnValueGPR) };
             break;
         default:
             RELEASE_ASSERT_NOT_REACHED();
         }
     }
