diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUDevice.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUDevice.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUDevice.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUDevice.cpp
@@ -26,67 +26,101 @@
 #include "config.h"
 #include "GPUDevice.h"
 
 #if ENABLE(WEBGPU)
 
+#include "GPUBindGroup.h"
+#include "GPUBindGroupAllocator.h"
+#include "GPUBindGroupDescriptor.h"
 #include "GPUBindGroupLayout.h"
 #include "GPUBindGroupLayoutDescriptor.h"
 #include "GPUBuffer.h"
 #include "GPUBufferDescriptor.h"
 #include "GPUCommandBuffer.h"
+#include "GPUComputePipeline.h"
+#include "GPUComputePipelineDescriptor.h"
+#include "GPUErrorScopes.h"
 #include "GPUPipelineLayout.h"
 #include "GPUPipelineLayoutDescriptor.h"
 #include "GPURenderPipeline.h"
 #include "GPURenderPipelineDescriptor.h"
+#include "GPUSampler.h"
+#include "GPUSamplerDescriptor.h"
 #include "GPUShaderModule.h"
 #include "GPUShaderModuleDescriptor.h"
+#include "GPUSwapChainDescriptor.h"
 #include "GPUTexture.h"
 #include "GPUTextureDescriptor.h"
+#include <algorithm>
+#include <wtf/Optional.h>
 
 namespace WebCore {
 
-RefPtr<GPUBuffer> GPUDevice::createBuffer(GPUBufferDescriptor&& descriptor) const
+RefPtr<GPUBuffer> GPUDevice::tryCreateBuffer(const GPUBufferDescriptor& descriptor, GPUBufferMappedOption isMapped, GPUErrorScopes& errorScopes)
 {
-    return GPUBuffer::create(*this, WTFMove(descriptor));
+    return GPUBuffer::tryCreate(*this, descriptor, isMapped, errorScopes);
 }
 
-RefPtr<GPUTexture> GPUDevice::tryCreateTexture(GPUTextureDescriptor&& descriptor) const
+RefPtr<GPUTexture> GPUDevice::tryCreateTexture(const GPUTextureDescriptor& descriptor) const
 {
-    return GPUTexture::tryCreate(*this, WTFMove(descriptor));
+    return GPUTexture::tryCreate(*this, descriptor);
 }
 
-RefPtr<GPUBindGroupLayout> GPUDevice::tryCreateBindGroupLayout(GPUBindGroupLayoutDescriptor&& descriptor) const
+RefPtr<GPUSampler> GPUDevice::tryCreateSampler(const GPUSamplerDescriptor& descriptor) const
 {
-    return GPUBindGroupLayout::tryCreate(*this, WTFMove(descriptor));
+    return GPUSampler::tryCreate(*this, descriptor);
+}
+
+RefPtr<GPUBindGroupLayout> GPUDevice::tryCreateBindGroupLayout(const GPUBindGroupLayoutDescriptor& descriptor) const
+{
+    return GPUBindGroupLayout::tryCreate(*this, descriptor);
 }
 
 Ref<GPUPipelineLayout> GPUDevice::createPipelineLayout(GPUPipelineLayoutDescriptor&& descriptor) const
 {
     return GPUPipelineLayout::create(WTFMove(descriptor));
 }
 
-RefPtr<GPUShaderModule> GPUDevice::createShaderModule(GPUShaderModuleDescriptor&& descriptor) const
+RefPtr<GPUShaderModule> GPUDevice::tryCreateShaderModule(const GPUShaderModuleDescriptor& descriptor) const
 {
-    return GPUShaderModule::create(*this, WTFMove(descriptor));
+    return GPUShaderModule::tryCreate(*this, descriptor);
 }
 
-RefPtr<GPURenderPipeline> GPUDevice::createRenderPipeline(GPURenderPipelineDescriptor&& descriptor) const
+RefPtr<GPURenderPipeline> GPUDevice::tryCreateRenderPipeline(const GPURenderPipelineDescriptor& descriptor, GPUErrorScopes& errorScopes) const
 {
-    return GPURenderPipeline::create(*this, WTFMove(descriptor));
+    return GPURenderPipeline::tryCreate(*this, descriptor, errorScopes);
 }
 
-RefPtr<GPUCommandBuffer> GPUDevice::createCommandBuffer()
+RefPtr<GPUComputePipeline> GPUDevice::tryCreateComputePipeline(const GPUComputePipelineDescriptor& descriptor, GPUErrorScopes& errorScopes) const
 {
-    return GPUCommandBuffer::create(*this);
+    return GPUComputePipeline::tryCreate(*this, descriptor, errorScopes);
+}
+
+RefPtr<GPUBindGroup> GPUDevice::tryCreateBindGroup(const GPUBindGroupDescriptor& descriptor, GPUErrorScopes& errorScopes) const
+{
+    if (!m_bindGroupAllocator)
+        m_bindGroupAllocator = GPUBindGroupAllocator::create(errorScopes);
+
+    return GPUBindGroup::tryCreate(descriptor, *m_bindGroupAllocator);
 }
 
-RefPtr<GPUQueue> GPUDevice::getQueue()
+RefPtr<GPUCommandBuffer> GPUDevice::tryCreateCommandBuffer() const
+{
+    return GPUCommandBuffer::tryCreate(*this);
+}
+
+RefPtr<GPUQueue> GPUDevice::tryGetQueue() const
 {
     if (!m_queue)
-        m_queue = GPUQueue::create(*this);
+        m_queue = GPUQueue::tryCreate(*this);
 
     return m_queue;
 }
 
+void GPUDevice::setSwapChain(RefPtr<GPUSwapChain>&& swapChain)
+{
+    m_swapChain = WTFMove(swapChain);
+}
+
 } // namespace WebCore
 
 #endif // ENABLE(WEBGPU)
