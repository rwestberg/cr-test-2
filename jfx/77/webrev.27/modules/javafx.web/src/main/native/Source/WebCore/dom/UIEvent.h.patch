diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/UIEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/UIEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/UIEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/UIEvent.h
@@ -32,25 +32,25 @@
 // FIXME: Remove this when no one is depending on it anymore.
 typedef WindowProxy AbstractView;
 
 class UIEvent : public Event {
 public:
-    static Ref<UIEvent> create(const AtomicString& type, CanBubble canBubble, IsCancelable isCancelable, IsComposed isComposed, RefPtr<WindowProxy>&& view, int detail)
+    static Ref<UIEvent> create(const AtomString& type, CanBubble canBubble, IsCancelable isCancelable, IsComposed isComposed, RefPtr<WindowProxy>&& view, int detail)
     {
         return adoptRef(*new UIEvent(type, canBubble, isCancelable, isComposed, WTFMove(view), detail));
     }
     static Ref<UIEvent> createForBindings()
     {
         return adoptRef(*new UIEvent);
     }
-    static Ref<UIEvent> create(const AtomicString& type, const UIEventInit& initializer)
+    static Ref<UIEvent> create(const AtomString& type, const UIEventInit& initializer)
     {
         return adoptRef(*new UIEvent(type, initializer));
     }
     virtual ~UIEvent();
 
-    WEBCORE_EXPORT void initUIEvent(const AtomicString& type, bool canBubble, bool cancelable, RefPtr<WindowProxy>&&, int detail);
+    WEBCORE_EXPORT void initUIEvent(const AtomString& type, bool canBubble, bool cancelable, RefPtr<WindowProxy>&&, int detail);
 
     WindowProxy* view() const { return m_view.get(); }
     int detail() const { return m_detail; }
 
     EventInterface eventInterface() const override;
@@ -64,13 +64,13 @@
     virtual int which() const;
 
 protected:
     UIEvent();
 
-    UIEvent(const AtomicString& type, CanBubble, IsCancelable, IsComposed, RefPtr<WindowProxy>&&, int detail);
-    UIEvent(const AtomicString& type, CanBubble, IsCancelable, IsComposed, MonotonicTime timestamp, RefPtr<WindowProxy>&&, int detail, IsTrusted = IsTrusted::Yes);
-    UIEvent(const AtomicString&, const UIEventInit&);
+    UIEvent(const AtomString& type, CanBubble, IsCancelable, IsComposed, RefPtr<WindowProxy>&&, int detail);
+    UIEvent(const AtomString& type, CanBubble, IsCancelable, IsComposed, MonotonicTime timestamp, RefPtr<WindowProxy>&&, int detail, IsTrusted = IsTrusted::Yes);
+    UIEvent(const AtomString&, const UIEventInit&);
 
 private:
     bool isUIEvent() const final;
 
     RefPtr<WindowProxy> m_view;
