diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/Liveness.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/Liveness.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/Liveness.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/Liveness.h
@@ -51,10 +51,11 @@
     {
     }
 
     // This calculator has to be run in reverse.
     class LocalCalc {
+        WTF_MAKE_FAST_ALLOCATED;
     public:
         LocalCalc(Liveness& liveness, typename CFG::Node block)
             : m_liveness(liveness)
             , m_block(block)
         {
@@ -64,17 +65,19 @@
             for (unsigned index : liveAtTail)
                 workset.add(index);
         }
 
         class Iterable {
+            WTF_MAKE_FAST_ALLOCATED;
         public:
             Iterable(Liveness& liveness)
                 : m_liveness(liveness)
             {
             }
 
             class iterator {
+                WTF_MAKE_FAST_ALLOCATED;
             public:
                 iterator(Adapter& adapter, Workset::const_iterator sparceSetIterator)
                     : m_adapter(adapter)
                     , m_sparceSetIterator(sparceSetIterator)
                 {
@@ -154,18 +157,20 @@
         return m_liveAtHead[block];
     }
 
     template<typename UnderlyingIterable>
     class Iterable {
+        WTF_MAKE_FAST_ALLOCATED;
     public:
         Iterable(Liveness& liveness, const UnderlyingIterable& iterable)
             : m_liveness(liveness)
             , m_iterable(iterable)
         {
         }
 
         class iterator {
+            WTF_MAKE_FAST_ALLOCATED;
         public:
             iterator()
                 : m_liveness(nullptr)
                 , m_iter()
             {
@@ -228,10 +233,11 @@
     }
 
     Workset& workset() { return m_workset; }
 
     class LiveAtHead {
+        WTF_MAKE_FAST_ALLOCATED;
     public:
         LiveAtHead(Liveness& liveness)
             : m_liveness(liveness)
         {
             for (unsigned blockIndex = m_liveness.m_cfg.numNodes(); blockIndex--;) {
