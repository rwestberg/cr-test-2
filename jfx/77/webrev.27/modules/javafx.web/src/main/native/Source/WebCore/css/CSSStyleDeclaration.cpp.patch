diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSStyleDeclaration.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSStyleDeclaration.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSStyleDeclaration.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSStyleDeclaration.cpp
@@ -29,13 +29,18 @@
 #include "CSSPropertyNames.h"
 #include "CSSPropertyParser.h"
 #include "DeprecatedGlobalSettings.h"
 #include "HashTools.h"
 #include "RuntimeEnabledFeatures.h"
+#include <wtf/IsoMallocInlines.h>
+#include <wtf/Optional.h>
+#include <wtf/Variant.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(CSSStyleDeclaration);
+
 namespace {
 
 enum class PropertyNamePrefix {
     None, Epub, CSS, Pixel, Pos, WebKit,
 #if ENABLE(LEGACY_CSS_VENDOR_PREFIXES)
@@ -142,11 +147,11 @@
 struct CSSPropertyInfo {
     CSSPropertyID propertyID;
     bool hadPixelOrPosPrefix;
 };
 
-static CSSPropertyInfo parseJavaScriptCSSPropertyName(const AtomicString& propertyName)
+static CSSPropertyInfo parseJavaScriptCSSPropertyName(const AtomString& propertyName)
 {
     using CSSPropertyInfoMap = HashMap<String, CSSPropertyInfo>;
     static NeverDestroyed<CSSPropertyInfoMap> propertyInfoCache;
 
     CSSPropertyInfo propertyInfo = { CSSPropertyInvalid, false };
@@ -251,16 +256,16 @@
     return propertyInfo;
 }
 
 }
 
-CSSPropertyID CSSStyleDeclaration::getCSSPropertyIDFromJavaScriptPropertyName(const AtomicString& propertyName)
+CSSPropertyID CSSStyleDeclaration::getCSSPropertyIDFromJavaScriptPropertyName(const AtomString& propertyName)
 {
     return parseJavaScriptCSSPropertyName(propertyName).propertyID;
 }
 
-Optional<Variant<String, double>> CSSStyleDeclaration::namedItem(const AtomicString& propertyName)
+Optional<Variant<String, double>> CSSStyleDeclaration::namedItem(const AtomString& propertyName)
 {
     auto propertyInfo = parseJavaScriptCSSPropertyName(propertyName);
     if (!propertyInfo.propertyID)
         return WTF::nullopt;
 
@@ -278,11 +283,11 @@
     }
 
     return Variant<String, double> { value->cssText() };
 }
 
-ExceptionOr<void> CSSStyleDeclaration::setNamedItem(const AtomicString& propertyName, String value, bool& propertySupported)
+ExceptionOr<void> CSSStyleDeclaration::setNamedItem(const AtomString& propertyName, String value, bool& propertySupported)
 {
     auto propertyInfo = parseJavaScriptCSSPropertyName(propertyName);
     if (!propertyInfo.propertyID) {
         propertySupported = false;
         return { };
@@ -307,28 +312,28 @@
         return setPropertyInternalResult.releaseException();
 
     return { };
 }
 
-Vector<AtomicString> CSSStyleDeclaration::supportedPropertyNames() const
+Vector<AtomString> CSSStyleDeclaration::supportedPropertyNames() const
 {
     static unsigned numNames = 0;
-    static const AtomicString* const cssPropertyNames = [] {
+    static const AtomString* const cssPropertyNames = [] {
         String names[numCSSProperties];
         for (int i = 0; i < numCSSProperties; ++i) {
             CSSPropertyID id = static_cast<CSSPropertyID>(firstCSSProperty + i);
             if (isEnabledCSSProperty(id))
                 names[numNames++] = getJSPropertyName(id);
         }
         std::sort(&names[0], &names[numNames], WTF::codePointCompareLessThan);
-        auto* identifiers = new AtomicString[numNames];
+        auto* identifiers = new AtomString[numNames];
         for (unsigned i = 0; i < numNames; ++i)
             identifiers[i] = names[i];
         return identifiers;
     }();
 
-    Vector<AtomicString> result;
+    Vector<AtomString> result;
     result.reserveInitialCapacity(numNames);
 
     for (unsigned i = 0; i < numNames; ++i)
         result.uncheckedAppend(cssPropertyNames[i]);
 
