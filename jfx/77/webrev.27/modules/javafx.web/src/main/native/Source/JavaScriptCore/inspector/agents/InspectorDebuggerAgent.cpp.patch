diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorDebuggerAgent.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorDebuggerAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorDebuggerAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorDebuggerAgent.cpp
@@ -60,66 +60,64 @@
     return makeString("breakpoint-action-", action.identifier);
 }
 
 InspectorDebuggerAgent::InspectorDebuggerAgent(AgentContext& context)
     : InspectorAgentBase("Debugger"_s)
-    , m_injectedScriptManager(context.injectedScriptManager)
-    , m_frontendDispatcher(std::make_unique<DebuggerFrontendDispatcher>(context.frontendRouter))
+    , m_frontendDispatcher(makeUnique<DebuggerFrontendDispatcher>(context.frontendRouter))
     , m_backendDispatcher(DebuggerBackendDispatcher::create(context.backendDispatcher, this))
     , m_scriptDebugServer(context.environment.scriptDebugServer())
-    , m_continueToLocationBreakpointID(JSC::noBreakpointID)
+    , m_injectedScriptManager(context.injectedScriptManager)
 {
     // FIXME: make breakReason optional so that there was no need to init it with "other".
     clearBreakDetails();
 }
 
-InspectorDebuggerAgent::~InspectorDebuggerAgent()
-{
-}
+InspectorDebuggerAgent::~InspectorDebuggerAgent() = default;
 
 void InspectorDebuggerAgent::didCreateFrontendAndBackend(FrontendRouter*, BackendDispatcher*)
 {
 }
 
 void InspectorDebuggerAgent::willDestroyFrontendAndBackend(DisconnectReason reason)
 {
-    bool skipRecompile = reason == DisconnectReason::InspectedTargetDestroyed;
-    disable(skipRecompile);
+    disable(reason == DisconnectReason::InspectedTargetDestroyed);
 }
 
 void InspectorDebuggerAgent::enable()
 {
     if (m_enabled)
         return;
 
-    m_scriptDebugServer.addListener(this);
+    m_enabled = true;
 
-    if (m_listener)
-        m_listener->debuggerWasEnabled();
+    m_scriptDebugServer.addListener(this);
 
-    m_enabled = true;
+    for (auto* listener : copyToVector(m_listeners))
+        listener->debuggerWasEnabled();
 }
 
 void InspectorDebuggerAgent::disable(bool isBeingDestroyed)
 {
     if (!m_enabled)
         return;
 
+    for (auto* listener : copyToVector(m_listeners))
+        listener->debuggerWasDisabled();
+
     m_scriptDebugServer.removeListener(this, isBeingDestroyed);
+
     clearInspectorBreakpointState();
 
     if (!isBeingDestroyed)
         m_scriptDebugServer.deactivateBreakpoints();
 
     ASSERT(m_javaScriptBreakpoints.isEmpty());
 
-    if (m_listener)
-        m_listener->debuggerWasDisabled();
-
     clearAsyncStackTraceData();
 
     m_pauseOnAssertionFailures = false;
+    m_pauseOnMicrotasks = false;
 
     m_enabled = false;
 }
 
 void InspectorDebuggerAgent::enable(ErrorString&)
@@ -141,11 +139,11 @@
 {
     if (m_asyncStackTraceDepth == depth)
         return;
 
     if (depth < 0) {
-        errorString = "depth must be a positive number."_s;
+        errorString = "Unexpected negative depth"_s;
         return;
     }
 
     m_asyncStackTraceDepth = depth;
 
@@ -374,23 +372,23 @@
     result->reserveCapacity(actionsLength);
     for (unsigned i = 0; i < actionsLength; ++i) {
         RefPtr<JSON::Value> value = actions->get(i);
         RefPtr<JSON::Object> object;
         if (!value->asObject(object)) {
-            errorString = "BreakpointAction of incorrect type, expected object"_s;
+            errorString = "Unexpected non-object item in given actions"_s;
             return false;
         }
 
         String typeString;
         if (!object->getString("type"_s, typeString)) {
-            errorString = "BreakpointAction had type missing"_s;
+            errorString = "Missing type for item in given actions"_s;
             return false;
         }
 
         ScriptBreakpointActionType type;
         if (!breakpointActionTypeForString(typeString, &type)) {
-            errorString = "BreakpointAction had unknown type"_s;
+            errorString = "Non-string type for item in given actions"_s;
             return false;
         }
 
         // Specifying an identifier is optional. They are used to correlate probe samples
         // in the frontend across multiple backend probe actions and segregate object groups.
@@ -414,19 +412,25 @@
         .setScriptId(String::number(breakpoint.sourceID))
         .setLineNumber(breakpoint.line)
         .release();
     location->setColumnNumber(breakpoint.column);
 
-    return WTFMove(location);
+    return location;
 }
 
 static bool parseLocation(ErrorString& errorString, const JSON::Object& location, JSC::SourceID& sourceID, unsigned& lineNumber, unsigned& columnNumber)
 {
+    if (!location.getInteger("lineNumber"_s, lineNumber)) {
+        errorString = "Unexpected non-integer lineNumber in given location"_s;
+        sourceID = JSC::noSourceID;
+        return false;
+    }
+
     String scriptIDStr;
-    if (!location.getString("scriptId"_s, scriptIDStr) || !location.getInteger("lineNumber"_s, lineNumber)) {
+    if (!location.getString("scriptId"_s, scriptIDStr)) {
         sourceID = JSC::noSourceID;
-        errorString = "scriptId and lineNumber are required."_s;
+        errorString = "Unexepcted non-string scriptId in given location"_s;
         return false;
     }
 
     sourceID = scriptIDStr.toIntPtr();
     columnNumber = 0;
@@ -436,21 +440,21 @@
 
 void InspectorDebuggerAgent::setBreakpointByUrl(ErrorString& errorString, int lineNumber, const String* optionalURL, const String* optionalURLRegex, const int* optionalColumnNumber, const JSON::Object* options, Protocol::Debugger::BreakpointId* outBreakpointIdentifier, RefPtr<JSON::ArrayOf<Protocol::Debugger::Location>>& locations)
 {
     locations = JSON::ArrayOf<Protocol::Debugger::Location>::create();
     if (!optionalURL == !optionalURLRegex) {
-        errorString = "Either url or urlRegex must be specified."_s;
+        errorString = "Either url or urlRegex must be specified"_s;
         return;
     }
 
     String url = optionalURL ? *optionalURL : *optionalURLRegex;
     int columnNumber = optionalColumnNumber ? *optionalColumnNumber : 0;
     bool isRegex = optionalURLRegex;
 
     String breakpointIdentifier = makeString(isRegex ? "/" : "", url, isRegex ? "/:" : ":", lineNumber, ':', columnNumber);
     if (m_javaScriptBreakpoints.contains(breakpointIdentifier)) {
-        errorString = "Breakpoint at specified location already exists."_s;
+        errorString = "Breakpoint for given location already exists."_s;
         return;
     }
 
     String condition = emptyString();
     bool autoContinue = false;
@@ -518,11 +522,11 @@
     if (!breakpointActionsFromProtocol(errorString, actions, &breakpointActions))
         return;
 
     auto scriptIterator = m_scripts.find(sourceID);
     if (scriptIterator == m_scripts.end()) {
-        errorString = makeString("No script for id: "_s, sourceID);
+        errorString = "Missing script for scriptId in given location"_s;
         return;
     }
 
     Script& script = scriptIterator->value;
     JSC::Breakpoint breakpoint(sourceID, lineNumber, columnNumber, condition, autoContinue, ignoreCount);
@@ -533,11 +537,11 @@
     }
 
     bool existing;
     setBreakpoint(breakpoint, existing);
     if (existing) {
-        errorString = "Breakpoint at specified location already exists"_s;
+        errorString = "Breakpoint for given location already exists"_s;
         return;
     }
 
     String breakpointIdentifier = makeString(sourceID, ':', breakpoint.line, ':', breakpoint.column);
     ScriptBreakpoint scriptBreakpoint(breakpoint.line, breakpoint.column, condition, breakpointActions, autoContinue, ignoreCount);
@@ -621,11 +625,11 @@
 
     auto scriptIterator = m_scripts.find(sourceID);
     if (scriptIterator == m_scripts.end()) {
         m_scriptDebugServer.continueProgram();
         m_frontendDispatcher->resumed();
-        errorString = makeString("No script for id: "_s, sourceID);
+        errorString = "Missing script for scriptId in given location"_s;
         return;
     }
 
     String condition;
     bool autoContinue = false;
@@ -657,39 +661,39 @@
     // So don't issue a resumed event unless we exit the VM without pausing.
     willStepAndMayBecomeIdle();
     m_scriptDebugServer.continueProgram();
 }
 
-void InspectorDebuggerAgent::searchInContent(ErrorString& error, const String& scriptIDStr, const String& query, const bool* optionalCaseSensitive, const bool* optionalIsRegex, RefPtr<JSON::ArrayOf<Protocol::GenericTypes::SearchMatch>>& results)
+void InspectorDebuggerAgent::searchInContent(ErrorString& errorString, const String& scriptIDStr, const String& query, const bool* optionalCaseSensitive, const bool* optionalIsRegex, RefPtr<JSON::ArrayOf<Protocol::GenericTypes::SearchMatch>>& results)
 {
     JSC::SourceID sourceID = scriptIDStr.toIntPtr();
     auto it = m_scripts.find(sourceID);
     if (it == m_scripts.end()) {
-        error = makeString("No script for id: "_s, scriptIDStr);
+        errorString = "Missing script for given scriptId";
         return;
     }
 
     bool isRegex = optionalIsRegex ? *optionalIsRegex : false;
     bool caseSensitive = optionalCaseSensitive ? *optionalCaseSensitive : false;
     results = ContentSearchUtilities::searchInTextByLines(it->value.source, query, caseSensitive, isRegex);
 }
 
-void InspectorDebuggerAgent::getScriptSource(ErrorString& error, const String& scriptIDStr, String* scriptSource)
+void InspectorDebuggerAgent::getScriptSource(ErrorString& errorString, const String& scriptIDStr, String* scriptSource)
 {
     JSC::SourceID sourceID = scriptIDStr.toIntPtr();
-    ScriptsMap::iterator it = m_scripts.find(sourceID);
+    auto it = m_scripts.find(sourceID);
     if (it != m_scripts.end())
         *scriptSource = it->value.source;
     else
-        error = makeString("No script for id: "_s, scriptIDStr);
+        errorString = "Missing script for given scriptId";
 }
 
 void InspectorDebuggerAgent::getFunctionDetails(ErrorString& errorString, const String& functionId, RefPtr<Protocol::Debugger::FunctionDetails>& details)
 {
     InjectedScript injectedScript = m_injectedScriptManager.injectedScriptForObjectId(functionId);
     if (injectedScript.hasNoValue()) {
-        errorString = "Function object id is obsolete"_s;
+        errorString = "Missing injected script for given functionId"_s;
         return;
     }
 
     injectedScript.getFunctionDetails(errorString, functionId, details);
 }
@@ -700,11 +704,11 @@
         return;
 
     m_javaScriptPauseScheduled = true;
 
     m_breakReason = breakReason;
-    m_breakAuxData = WTFMove(data);
+    m_breakData = WTFMove(data);
 
     JSC::JSLockHolder locker(m_scriptDebugServer.vm());
     m_scriptDebugServer.setPauseOnNextStatement(true);
 }
 
@@ -726,11 +730,11 @@
 }
 
 void InspectorDebuggerAgent::resume(ErrorString& errorString)
 {
     if (!m_pausedScriptState && !m_javaScriptPauseScheduled) {
-        errorString = "Was not paused or waiting to pause"_s;
+        errorString = "Must be paused or waiting to pause"_s;
         return;
     }
 
     cancelPauseOnNextStatement();
     m_scriptDebugServer.continueProgram();
@@ -810,11 +814,11 @@
     else if (stringPauseState == "all")
         pauseState = JSC::Debugger::PauseOnAllExceptions;
     else if (stringPauseState == "uncaught")
         pauseState = JSC::Debugger::PauseOnUncaughtExceptions;
     else {
-        errorString = makeString("Unknown pause on exceptions mode: "_s, stringPauseState);
+        errorString = makeString("Unknown state: "_s, stringPauseState);
         return;
     }
 
     m_scriptDebugServer.setPauseOnExceptionsState(static_cast<JSC::Debugger::PauseOnExceptionsState>(pauseState));
     if (m_scriptDebugServer.pauseOnExceptionsState() != pauseState)
@@ -824,20 +828,23 @@
 void InspectorDebuggerAgent::setPauseOnAssertions(ErrorString&, bool enabled)
 {
     m_pauseOnAssertionFailures = enabled;
 }
 
-void InspectorDebuggerAgent::evaluateOnCallFrame(ErrorString& errorString, const String& callFrameId, const String& expression, const String* objectGroup, const bool* includeCommandLineAPI, const bool* doNotPauseOnExceptionsAndMuteConsole, const bool* returnByValue, const bool* generatePreview, const bool* saveResult, RefPtr<Protocol::Runtime::RemoteObject>& result, Optional<bool>& wasThrown, Optional<int>& savedResultIndex)
+void InspectorDebuggerAgent::setPauseOnMicrotasks(ErrorString&, bool enabled)
+{
+    m_pauseOnMicrotasks = enabled;
+}
+
+void InspectorDebuggerAgent::evaluateOnCallFrame(ErrorString& errorString, const String& callFrameId, const String& expression, const String* objectGroup, const bool* includeCommandLineAPI, const bool* doNotPauseOnExceptionsAndMuteConsole, const bool* returnByValue, const bool* generatePreview, const bool* saveResult, const bool* /* emulateUserGesture */, RefPtr<Protocol::Runtime::RemoteObject>& result, Optional<bool>& wasThrown, Optional<int>& savedResultIndex)
 {
-    if (!m_currentCallStack) {
-        errorString = "Not paused"_s;
+    if (!assertPaused(errorString))
         return;
-    }
 
     InjectedScript injectedScript = m_injectedScriptManager.injectedScriptForObjectId(callFrameId);
     if (injectedScript.hasNoValue()) {
-        errorString = "Could not find InjectedScript for callFrameId"_s;
+        errorString = "Missing injected script for given callFrameId"_s;
         return;
     }
 
     auto pauseState = m_scriptDebugServer.pauseOnExceptionsState();
     bool pauseAndMute = doNotPauseOnExceptionsAndMuteConsole && *doNotPauseOnExceptionsAndMuteConsole;
@@ -855,14 +862,10 @@
         unmuteConsole();
         m_scriptDebugServer.setPauseOnExceptionsState(pauseState);
     }
 }
 
-void InspectorDebuggerAgent::setOverlayMessage(ErrorString&, const String*)
-{
-}
-
 void InspectorDebuggerAgent::scriptExecutionBlockedByCSP(const String& directiveText)
 {
     if (m_scriptDebugServer.pauseOnExceptionsState() != JSC::Debugger::DontPauseOnExceptions)
         breakProgram(DebuggerFrontendDispatcher::Reason::CSPViolation, buildCSPViolationPauseReason(directiveText));
 }
@@ -964,10 +967,28 @@
 void InspectorDebuggerAgent::failedToParseSource(const String& url, const String& data, int firstLine, int errorLine, const String& errorMessage)
 {
     m_frontendDispatcher->scriptFailedToParse(url, data, firstLine, errorLine, errorMessage);
 }
 
+void InspectorDebuggerAgent::willRunMicrotask()
+{
+    if (!m_scriptDebugServer.breakpointsActive())
+        return;
+
+    if (m_pauseOnMicrotasks)
+        schedulePauseOnNextStatement(DebuggerFrontendDispatcher::Reason::Microtask, nullptr);
+}
+
+void InspectorDebuggerAgent::didRunMicrotask()
+{
+    if (!m_scriptDebugServer.breakpointsActive())
+        return;
+
+    if (m_pauseOnMicrotasks)
+        cancelPauseOnNextStatement();
+}
+
 void InspectorDebuggerAgent::didPause(JSC::ExecState& scriptState, JSC::JSValue callFrames, JSC::JSValue exceptionOrCaughtValue)
 {
     ASSERT(!m_pausedScriptState);
     m_pausedScriptState = &scriptState;
     m_currentCallStack = { scriptState.vm(), callFrames };
@@ -979,21 +1000,21 @@
         switch (m_scriptDebugServer.reasonForPause()) {
         case JSC::Debugger::PausedForBreakpoint: {
             JSC::BreakpointID debuggerBreakpointId = m_scriptDebugServer.pausingBreakpointID();
             if (debuggerBreakpointId != m_continueToLocationBreakpointID) {
                 m_breakReason = DebuggerFrontendDispatcher::Reason::Breakpoint;
-                m_breakAuxData = buildBreakpointPauseReason(debuggerBreakpointId);
+                m_breakData = buildBreakpointPauseReason(debuggerBreakpointId);
             }
             break;
         }
         case JSC::Debugger::PausedForDebuggerStatement:
             m_breakReason = DebuggerFrontendDispatcher::Reason::DebuggerStatement;
-            m_breakAuxData = nullptr;
+            m_breakData = nullptr;
             break;
         case JSC::Debugger::PausedForException:
             m_breakReason = DebuggerFrontendDispatcher::Reason::Exception;
-            m_breakAuxData = buildExceptionPauseReason(exceptionOrCaughtValue, injectedScript);
+            m_breakData = buildExceptionPauseReason(exceptionOrCaughtValue, injectedScript);
             break;
         case JSC::Debugger::PausedAtStatement:
         case JSC::Debugger::PausedAtExpression:
         case JSC::Debugger::PausedBeforeReturn:
         case JSC::Debugger::PausedAtEndOfProgram:
@@ -1019,11 +1040,11 @@
         auto it = m_pendingAsyncCalls.find(m_currentAsyncCallIdentifier.value());
         if (it != m_pendingAsyncCalls.end())
             asyncStackTrace = it->value->buildInspectorObject();
     }
 
-    m_frontendDispatcher->paused(currentCallFrames(injectedScript), m_breakReason, m_breakAuxData, asyncStackTrace);
+    m_frontendDispatcher->paused(currentCallFrames(injectedScript), m_breakReason, m_breakData, asyncStackTrace);
 
     m_javaScriptPauseScheduled = false;
 
     if (m_continueToLocationBreakpointID != JSC::noBreakpointID) {
         m_scriptDebugServer.removeBreakpoint(m_continueToLocationBreakpointID);
@@ -1074,19 +1095,19 @@
 }
 
 void InspectorDebuggerAgent::breakProgram(DebuggerFrontendDispatcher::Reason breakReason, RefPtr<JSON::Object>&& data)
 {
     m_breakReason = breakReason;
-    m_breakAuxData = WTFMove(data);
+    m_breakData = WTFMove(data);
     m_scriptDebugServer.breakProgram();
 }
 
 void InspectorDebuggerAgent::clearInspectorBreakpointState()
 {
-    ErrorString dummyError;
+    ErrorString ignored;
     for (const String& identifier : copyToVector(m_breakpointIdentifierToDebugServerBreakpointIDs.keys()))
-        removeBreakpoint(dummyError, identifier);
+        removeBreakpoint(ignored, identifier);
 
     m_javaScriptBreakpoints.clear();
 
     clearDebuggerBreakpointState();
 }
@@ -1128,21 +1149,21 @@
 }
 
 bool InspectorDebuggerAgent::assertPaused(ErrorString& errorString)
 {
     if (!m_pausedScriptState) {
-        errorString = "Can only perform operation while paused."_s;
+        errorString = "Must be paused"_s;
         return false;
     }
 
     return true;
 }
 
 void InspectorDebuggerAgent::clearBreakDetails()
 {
     m_breakReason = DebuggerFrontendDispatcher::Reason::Other;
-    m_breakAuxData = nullptr;
+    m_breakData = nullptr;
 }
 
 void InspectorDebuggerAgent::clearExceptionValue()
 {
     if (m_hasExceptionValue) {
