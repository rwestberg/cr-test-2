diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/disassembler/ARM64/A64DOpcode.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/disassembler/ARM64/A64DOpcode.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/disassembler/ARM64/A64DOpcode.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/disassembler/ARM64/A64DOpcode.h
@@ -31,10 +31,11 @@
 namespace JSC { namespace ARM64Disassembler {
 
 class A64DOpcode {
 private:
     class OpcodeGroup {
+        WTF_MAKE_FAST_ALLOCATED;
     public:
         OpcodeGroup(uint32_t opcodeMask, uint32_t opcodePattern, const char* (*format)(A64DOpcode*))
             : m_opcodeMask(opcodeMask)
             , m_opcodePattern(opcodePattern)
             , m_format(format)
@@ -338,10 +339,11 @@
 };
 
 class A64DOpcodeDataProcessing1Source : public A64DOpcode {
 private:
     static const char* const s_opNames[8];
+    static const char* const s_pacAutOpNames[18];
 
 public:
     static const uint32_t mask = 0x5fe00000;
     static const uint32_t pattern = 0x5ac00000;
 
@@ -356,11 +358,11 @@
     unsigned opNameIndex() { return (opCode() & 0x7); }
 };
 
 class A64DOpcodeDataProcessing2Source : public A64DOpcode {
 private:
-    static const char* const s_opNames[8];
+    static const char* const s_opNames[16];
 
 public:
     static const uint32_t mask = 0x5fe00000;
     static const uint32_t pattern = 0x1ac00000;
 
@@ -369,11 +371,11 @@
     const char* format();
 
     const char* opName() { return s_opNames[opNameIndex()]; }
     unsigned sBit() { return (m_opcode >> 29) & 0x1; }
     unsigned opCode() { return (m_opcode >> 10) & 0x3f; }
-    unsigned opNameIndex() { return ((m_opcode >> 11) & 0x4) | ((m_opcode >> 10) & 0x3); }
+    unsigned opNameIndex() { return (m_opcode >> 10) & 0xf; }
 };
 
 class A64DOpcodeDataProcessing3Source : public A64DOpcode {
 private:
     static const char* const s_opNames[16];
@@ -569,21 +571,21 @@
     unsigned systemRegister() { return ((op0() << 14) | (op1() << 11) | (crN() << 7) | (crM() << 3) | op2()); }
 };
 
 class A64DOpcodeHint : public A64DOpcodeSystem {
 private:
-    static const char* const s_opNames[6];
+    static const char* const s_opNames[32];
 
 public:
     static const uint32_t mask = 0xfffff01f;
     static const uint32_t pattern = 0xd503201f;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeHint, thisObj);
 
     const char* format();
 
-    const char* opName() { return immediate7() <= 5 ? s_opNames[immediate7()] : "hint"; }
+    const char* opName();
     unsigned immediate7() { return (m_opcode >> 5) & 0x7f; }
 };
 
 class A64DOpcodeSystemSync : public A64DOpcodeSystem {
     static const char* const s_opNames[8];
@@ -681,10 +683,36 @@
 
     unsigned option() { return (m_opcode >> 13) & 0x7; }
     int sBit() { return (m_opcode >> 12) & 0x1; }
 };
 
+class A64DOpcodeLoadStoreAuthenticated : public A64DOpcodeLoadStore {
+private:
+    static const char* const s_opNames[2];
+
+protected:
+    const char* opName()
+    {
+        return s_opNames[opNumber()];
+    }
+
+public:
+    static const uint32_t mask = 0xff200400;
+    static const uint32_t pattern = 0xf8200400;
+
+    DEFINE_STATIC_FORMAT(A64DOpcodeLoadStoreAuthenticated, thisObj);
+
+    const char* format();
+
+    unsigned opNum() { return mBit(); }
+    unsigned mBit() { return (m_opcode >> 23) & 0x1; }
+    unsigned sBit() { return (m_opcode >> 22) & 0x1; }
+    unsigned wBit() { return (m_opcode >> 11) & 0x1; }
+    int immediate10() { return (sBit() << 9) | ((m_opcode >> 12) & 0x1ff); }
+
+};
+
 class A64DOpcodeLoadStoreRegisterPair : public A64DOpcodeLoadStore {
 public:
     static const uint32_t mask = 0x3a000000;
     static const uint32_t pattern = 0x28000000;
 
@@ -804,21 +832,29 @@
 };
 
 class A64DOpcodeUnconditionalBranchRegister : public A64DOpcode {
 private:
     static const char* const s_opNames[8];
+    static const char* const s_AuthOpNames[20];
 
 public:
-    static const uint32_t mask = 0xfe1ffc1f;
+    static const uint32_t mask = 0xfe1f0000;
     static const uint32_t pattern = 0xd61f0000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeUnconditionalBranchRegister, thisObj);
 
     const char* format();
 
     const char* opName() { return s_opNames[opc()]; }
+    const char* authOpName();
     unsigned opc() { return (m_opcode >> 21) & 0xf; }
+    unsigned authOpCode() {return (opc() << 1) | mBit(); }
+    unsigned op2() { return (m_opcode >> 16) & 0x1f; }
+    unsigned op3() { return (m_opcode >> 10) & 0x3f; }
+    unsigned op4() { return m_opcode & 0xf; }
+    unsigned mBit() { return (m_opcode >> 10) & 1; }
+    unsigned rm() { return rd(); }
 };
 
 } } // namespace JSC::ARM64Disassembler
 
 using JSC::ARM64Disassembler::A64DOpcode;
