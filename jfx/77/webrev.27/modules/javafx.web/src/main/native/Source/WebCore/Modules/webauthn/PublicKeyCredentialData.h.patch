diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/PublicKeyCredentialData.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/PublicKeyCredentialData.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/PublicKeyCredentialData.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/PublicKeyCredentialData.h
@@ -47,10 +47,13 @@
     // AuthenticatorAssertionResponse
     mutable RefPtr<ArrayBuffer> authenticatorData;
     mutable RefPtr<ArrayBuffer> signature;
     mutable RefPtr<ArrayBuffer> userHandle;
 
+    // Extensions
+    Optional<bool> appid;
+
     template<class Encoder> void encode(Encoder&) const;
     template<class Decoder> static Optional<PublicKeyCredentialData> decode(Decoder&);
 };
 
 // Noted: clientDataJSON is never encoded or decoded as it is never sent across different processes.
@@ -79,10 +82,13 @@
     encoder << static_cast<uint64_t>(authenticatorData->byteLength());
     encoder.encodeFixedLengthData(reinterpret_cast<const uint8_t*>(authenticatorData->data()), authenticatorData->byteLength(), 1);
     encoder << static_cast<uint64_t>(signature->byteLength());
     encoder.encodeFixedLengthData(reinterpret_cast<const uint8_t*>(signature->data()), signature->byteLength(), 1);
 
+    // Encode AppID before user handle to avoid the userHandle flag.
+    encoder << appid;
+
     if (!userHandle) {
         encoder << false;
         return;
     }
     encoder << true;
@@ -146,10 +152,16 @@
 
     result.signature = ArrayBuffer::create(signatureLength.value(), sizeof(uint8_t));
     if (!decoder.decodeFixedLengthData(reinterpret_cast<uint8_t*>(result.signature->data()), signatureLength.value(), 1))
         return WTF::nullopt;
 
+    Optional<Optional<bool>> appid;
+    decoder >> appid;
+    if (!appid)
+        return WTF::nullopt;
+    result.appid = WTFMove(*appid);
+
     Optional<bool> hasUserHandle;
     decoder >> hasUserHandle;
     if (!hasUserHandle)
         return WTF::nullopt;
     if (!*hasUserHandle)
