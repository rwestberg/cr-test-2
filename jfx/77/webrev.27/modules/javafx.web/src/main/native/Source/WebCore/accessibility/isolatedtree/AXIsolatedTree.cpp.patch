diff a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/isolatedtree/AXIsolatedTree.cpp b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/isolatedtree/AXIsolatedTree.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/isolatedtree/AXIsolatedTree.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/isolatedtree/AXIsolatedTree.cpp
@@ -21,13 +21,13 @@
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-#if ENABLE(ACCESSIBILITY_ISOLATED_TREE)
-
 #include "config.h"
+
+#if ENABLE(ACCESSIBILITY_ISOLATED_TREE)
 #include "AXIsolatedTree.h"
 
 #include "AXIsolatedTreeNode.h"
 #include "Page.h"
 #include <wtf/NeverDestroyed.h>
@@ -40,13 +40,13 @@
 {
     static unsigned s_currentTreeID = 0;
     return ++s_currentTreeID;
 }
 
-HashMap<AXIsolatedTreeID, Ref<AXIsolatedTree>>& AXIsolatedTree::treePageCache()
+HashMap<uint64_t, Ref<AXIsolatedTree>>& AXIsolatedTree::treePageCache()
 {
-    static NeverDestroyed<HashMap<AXIsolatedTreeID, Ref<AXIsolatedTree>>> map;
+    static NeverDestroyed<HashMap<uint64_t, Ref<AXIsolatedTree>>> map;
     return map;
 }
 
 HashMap<AXIsolatedTreeID, Ref<AXIsolatedTree>>& AXIsolatedTree::treeIDCache()
 {
@@ -65,26 +65,41 @@
 {
     ASSERT(isMainThread());
     return adoptRef(*new AXIsolatedTree());
 }
 
+Ref<AXIsolatedTree> AXIsolatedTree::initializePageTreeForID(PageIdentifier pageID, AXObjectCache& cache)
+{
+    RELEASE_ASSERT(isMainThread());
+    auto tree = cache->generateIsolatedAccessibilityTree();
+    tree->setInitialRequestInProgress(true);
+    tree->applyPendingChanges();
+    tree->setInitialRequestInProgress(false);
+    return tree;
+}
+
+RefPtr<AXIsolatedTreeNode> AXIsolatedTree::nodeInTreeForID(AXIsolatedTreeID treeID, AXID axID)
+{
+    return treeForID(treeID)->nodeForID(axID);
+}
+
 RefPtr<AXIsolatedTree> AXIsolatedTree::treeForID(AXIsolatedTreeID treeID)
 {
     return treeIDCache().get(treeID);
 }
 
-Ref<AXIsolatedTree> AXIsolatedTree::createTreeForPageID(uint64_t pageID)
+Ref<AXIsolatedTree> AXIsolatedTree::createTreeForPageID(PageIdentifier pageID)
 {
     LockHolder locker(s_cacheLock);
 
     auto newTree = AXIsolatedTree::create();
     treePageCache().set(pageID, newTree.copyRef());
     treeIDCache().set(newTree->treeIdentifier(), newTree.copyRef());
     return newTree;
 }
 
-RefPtr<AXIsolatedTree> AXIsolatedTree::treeForPageID(uint64_t pageID)
+RefPtr<AXIsolatedTree> AXIsolatedTree::treeForPageID(PageIdentifier pageID)
 {
     LockHolder locker(s_cacheLock);
 
     if (auto tree = treePageCache().get(pageID))
         return makeRefPtr(tree);
@@ -92,48 +107,73 @@
     return nullptr;
 }
 
 RefPtr<AXIsolatedTreeNode> AXIsolatedTree::nodeForID(AXID axID) const
 {
-    ASSERT(!isMainThread());
+    RELEASE_ASSERT(!isMainThread() || initialRequest);
     if (!axID)
         return nullptr;
     return m_readerThreadNodeMap.get(axID);
 }
 
+RefPtr<AXIsolatedTreeNode> AXIsolatedTree::focusedUIElement()
+{
+    return nodeForID(m_focusedNodeID);
+}
+
 RefPtr<AXIsolatedTreeNode> AXIsolatedTree::rootNode()
 {
     return nodeForID(m_rootNodeID);
 }
 
+void AXIsolatedTree::setRootNodeID(AXID axID)
+{
+    LockHolder locker { m_changeLogLock };
+    m_pendingRootNodeID = axID;
+}
+
+void AXIsolatedTree::setFocusedNodeID(AXID axID)
+{
+    LockHolder locker { m_changeLogLock };
+    m_pendingFocusedNodeID = axID;
+}
+
 void AXIsolatedTree::removeNode(AXID axID)
 {
-    LockHolder locker(m_changeLogLock);
+    LockHolder locker { m_changeLogLock };
     m_pendingRemovals.append(axID);
 }
 
 void AXIsolatedTree::appendNodeChanges(Vector<Ref<AXIsolatedTreeNode>>& log)
 {
-    LockHolder locker(m_changeLogLock);
+    LockHolder locker { m_changeLogLock };
     for (auto& node : log)
         m_pendingAppends.append(node.copyRef());
 }
 
-void AXIsolatedTree::applyPendingChanges()
+void AXIsolatedTree::setInitialRequestInProgress(bool initialRequestInProgress)
 {
-    RELEASE_ASSERT(!isMainThread());
+    m_initialRequestInProgress = initialRequestInProgress;
+}
 
-    LockHolder locker(m_changeLogLock);
+void AXIsolatedTree::applyPendingChanges()
+{
+    RELEASE_ASSERT(!isMainThread() || initialRequest);
+    LockHolder locker { m_changeLogLock };
     Vector<Ref<AXIsolatedTreeNode>> appendCopy;
     std::swap(appendCopy, m_pendingAppends);
     Vector<AXID> removeCopy({ WTFMove(m_pendingRemovals) });
     locker.unlockEarly();
 
+    // We don't clear the pending IDs beacause if the next round of updates does not modify them, then they stay the same
+    // value without extra bookkeeping.
+    m_rootNodeID = m_pendingRootNodeID;
+    m_focusedNodeID = m_pendingFocusedNodeID;
+
     for (auto& item : appendCopy) {
-        m_readerThreadNodeMap.add(item->identifier(), item.copyRef());
-        if (item->isRootNode())
-            m_rootNodeID = item->identifier();
+        item->setTreeIdentifier(m_treeID);
+        m_readerThreadNodeMap.add(item->identifier(), WTFMove(item));
     }
 
     for (auto item : removeCopy)
         m_readerThreadNodeMap.remove(item);
 }
