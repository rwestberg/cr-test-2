diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ThrowScope.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ThrowScope.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ThrowScope.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ThrowScope.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -68,31 +68,29 @@
 
     if (!willBeHandleByLLIntOrJIT)
         simulateThrow();
 }
 
-void ThrowScope::throwException(ExecState* exec, Exception* exception)
+Exception* ThrowScope::throwException(ExecState* exec, Exception* exception)
 {
     if (m_vm.exception() && m_vm.exception() != exception)
         m_vm.verifyExceptionCheckNeedIsSatisfied(m_recursionDepth, m_location);
 
-    m_vm.throwException(exec, exception);
+    return m_vm.throwException(exec, exception);
 }
 
-JSValue ThrowScope::throwException(ExecState* exec, JSValue error)
+Exception* ThrowScope::throwException(ExecState* exec, JSValue error)
 {
     if (!error.isCell() || !jsDynamicCast<Exception*>(m_vm, error.asCell()))
         m_vm.verifyExceptionCheckNeedIsSatisfied(m_recursionDepth, m_location);
 
     return m_vm.throwException(exec, error);
 }
 
-JSObject* ThrowScope::throwException(ExecState* exec, JSObject* obj)
+Exception* ThrowScope::throwException(ExecState* exec, JSObject* obj)
 {
-    if (!jsDynamicCast<Exception*>(m_vm, obj))
-        m_vm.verifyExceptionCheckNeedIsSatisfied(m_recursionDepth, m_location);
-
+    m_vm.verifyExceptionCheckNeedIsSatisfied(m_recursionDepth, m_location);
     return m_vm.throwException(exec, obj);
 }
 
 void ThrowScope::simulateThrow()
 {
