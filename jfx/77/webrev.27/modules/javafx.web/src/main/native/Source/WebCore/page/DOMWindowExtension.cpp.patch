diff a/modules/javafx.web/src/main/native/Source/WebCore/page/DOMWindowExtension.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/DOMWindowExtension.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/DOMWindowExtension.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/DOMWindowExtension.cpp
@@ -26,23 +26,37 @@
 #include "config.h"
 #include "DOMWindowExtension.h"
 
 #include "DOMWindow.h"
 #include "DOMWrapperWorld.h"
+#include "Document.h"
 #include "Frame.h"
 #include "FrameLoader.h"
 #include "FrameLoaderClient.h"
 #include <wtf/Ref.h>
 
 namespace WebCore {
 
 DOMWindowExtension::DOMWindowExtension(DOMWindow* window, DOMWrapperWorld& world)
-    : DOMWindowProperty(window)
+    : m_window(makeWeakPtr(window))
     , m_world(world)
     , m_wasDetached(false)
 {
     ASSERT(this->frame());
+    if (m_window)
+        m_window->registerObserver(*this);
+}
+
+DOMWindowExtension::~DOMWindowExtension()
+{
+    if (m_window)
+        m_window->unregisterObserver(*this);
+}
+
+Frame* DOMWindowExtension::frame() const
+{
+    return m_window ? m_window->frame() : nullptr;
 }
 
 void DOMWindowExtension::suspendForPageCache()
 {
     // Calling out to the client might result in this DOMWindowExtension being destroyed
@@ -51,36 +65,41 @@
 
     auto frame = makeRef(*this->frame());
     frame->loader().client().dispatchWillDisconnectDOMWindowExtensionFromGlobalObject(this);
 
     m_disconnectedFrame = WTFMove(frame);
-
-    DOMWindowProperty::suspendForPageCache();
 }
 
 void DOMWindowExtension::resumeFromPageCache()
 {
+    ASSERT(frame());
     ASSERT(m_disconnectedFrame == frame());
+    ASSERT(frame()->document()->domWindow() == m_window);
 
-    DOMWindowProperty::resumeFromPageCache();
     m_disconnectedFrame = nullptr;
 
     frame()->loader().client().dispatchDidReconnectDOMWindowExtensionToGlobalObject(this);
 }
 
 void DOMWindowExtension::willDestroyGlobalObjectInCachedFrame()
 {
-    ASSERT(m_disconnectedFrame);
+    ASSERT(m_disconnectedFrame); // Somehow m_disconnectedFrame can be null here. See <rdar://problem/49613448>.
 
     // Calling out to the client might result in this DOMWindowExtension being destroyed
     // while there is still work to do.
     Ref<DOMWindowExtension> protectedThis(*this);
 
-    m_disconnectedFrame->loader().client().dispatchWillDestroyGlobalObjectForDOMWindowExtension(this);
+    if (m_disconnectedFrame)
+        m_disconnectedFrame->loader().client().dispatchWillDestroyGlobalObjectForDOMWindowExtension(this);
     m_disconnectedFrame = nullptr;
 
-    DOMWindowProperty::willDestroyGlobalObjectInCachedFrame();
+    // DOMWindowExtension lifetime isn't tied directly to the DOMWindow itself so it is important that it unregister
+    // itself from any DOMWindow it is associated with if that DOMWindow is going away.
+    ASSERT(m_window);
+    if (m_window)
+        m_window->unregisterObserver(*this);
+    m_window = nullptr;
 }
 
 void DOMWindowExtension::willDestroyGlobalObjectInFrame()
 {
     ASSERT(!m_disconnectedFrame);
@@ -93,11 +112,16 @@
         Frame* frame = this->frame();
         ASSERT(frame);
         frame->loader().client().dispatchWillDestroyGlobalObjectForDOMWindowExtension(this);
     }
 
-    DOMWindowProperty::willDestroyGlobalObjectInFrame();
+    // DOMWindowExtension lifetime isn't tied directly to the DOMWindow itself so it is important that it unregister
+    // itself from any DOMWindow it is associated with if that DOMWindow is going away.
+    ASSERT(m_window);
+    if (m_window)
+        m_window->unregisterObserver(*this);
+    m_window = nullptr;
 }
 
 void DOMWindowExtension::willDetachGlobalObjectFromFrame()
 {
     ASSERT(!m_disconnectedFrame);
@@ -110,9 +134,8 @@
     Frame* frame = this->frame();
     ASSERT(frame);
     frame->loader().client().dispatchWillDestroyGlobalObjectForDOMWindowExtension(this);
 
     m_wasDetached = true;
-    DOMWindowProperty::willDetachGlobalObjectFromFrame();
 }
 
 } // namespace WebCore
