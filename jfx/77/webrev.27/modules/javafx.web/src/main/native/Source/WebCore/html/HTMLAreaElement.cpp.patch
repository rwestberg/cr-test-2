diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLAreaElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLAreaElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLAreaElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLAreaElement.cpp
@@ -50,11 +50,11 @@
 Ref<HTMLAreaElement> HTMLAreaElement::create(const QualifiedName& tagName, Document& document)
 {
     return adoptRef(*new HTMLAreaElement(tagName, document));
 }
 
-void HTMLAreaElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLAreaElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == shapeAttr) {
         if (equalLettersIgnoringASCIICase(value, "default"))
             m_shape = Default;
         else if (equalLettersIgnoringASCIICase(value, "circle") || equalLettersIgnoringASCIICase(value, "circ"))
@@ -81,11 +81,11 @@
 }
 
 bool HTMLAreaElement::mapMouseEvent(LayoutPoint location, const LayoutSize& size, HitTestResult& result)
 {
     if (m_lastSize != size) {
-        m_region = std::make_unique<Path>(getRegion(size));
+        m_region = makeUnique<Path>(getRegion(size));
         m_lastSize = size;
     }
 
     if (!m_region->contains(location))
         return false;
@@ -211,11 +211,11 @@
 {
     RefPtr<HTMLImageElement> image = imageElement();
     if (!image || !image->renderer() || image->renderer()->style().visibility() != Visibility::Visible)
         return false;
 
-    return supportsFocus() && Element::tabIndex() >= 0;
+    return supportsFocus() && tabIndexSetExplicitly().valueOr(0) >= 0;
 }
 
 void HTMLAreaElement::setFocus(bool shouldBeFocused)
 {
     if (focused() == shouldBeFocused)
