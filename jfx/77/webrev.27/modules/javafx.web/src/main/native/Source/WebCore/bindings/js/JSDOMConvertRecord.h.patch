diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConvertRecord.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConvertRecord.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConvertRecord.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConvertRecord.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -83,12 +83,12 @@
         JSC::JSObject* object = JSC::asObject(value);
 
         ReturnType result;
 
         // 4. Let keys be ? O.[[OwnPropertyKeys]]().
-        JSC::PropertyNameArray keys(&vm, JSC::PropertyNameMode::Strings, JSC::PrivateSymbolMode::Exclude);
-        object->methodTable(vm)->getOwnPropertyNames(object, &state, keys, JSC::EnumerationMode());
+        JSC::PropertyNameArray keys(vm, JSC::PropertyNameMode::Strings, JSC::PrivateSymbolMode::Exclude);
+        object->methodTable(vm)->getOwnPropertyNames(object, &state, keys, JSC::EnumerationMode(JSC::DontEnumPropertiesMode::Include));
 
         RETURN_IF_EXCEPTION(scope, { });
 
         // 5. Repeat, for each element key of keys in List order:
         for (auto& key : keys) {
@@ -97,13 +97,12 @@
             bool didGetDescriptor = object->getOwnPropertyDescriptor(&state, key, descriptor);
             RETURN_IF_EXCEPTION(scope, { });
 
             // 2. If desc is not undefined and desc.[[Enumerable]] is true:
 
-            // FIXME: Do we need to check for enumerable / undefined, or is this handled by the default
-            // enumeration mode?
-
+            // It's necessary to filter enumerable here rather than using the default EnumerationMode,
+            // to prevent an observable extra [[GetOwnProperty]] operation in the case of ProxyObject records.
             if (didGetDescriptor && descriptor.enumerable()) {
                 // 1. Let typedKey be key converted to an IDL value of type K.
                 auto typedKey = Detail::IdentifierConverter<K>::convert(state, key);
                 RETURN_IF_EXCEPTION(scope, { });
 
@@ -149,11 +148,11 @@
 
             // 2. Let esValue be value converted to an ECMAScript value.
             auto esValue = toJS<V>(state, globalObject, keyValuePair.value);
 
             // 3. Let created be ! CreateDataProperty(result, esKey, esValue).
-            bool created = result->putDirect(vm, JSC::Identifier::fromString(&vm, keyValuePair.key), esValue);
+            bool created = result->putDirect(vm, JSC::Identifier::fromString(vm, keyValuePair.key), esValue);
 
             // 4. Assert: created is true.
             ASSERT_UNUSED(created, created);
         }
 
