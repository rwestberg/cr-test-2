diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/UnlinkedMetadataTableInlines.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/UnlinkedMetadataTableInlines.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/UnlinkedMetadataTableInlines.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/UnlinkedMetadataTableInlines.h
@@ -33,11 +33,30 @@
 
 ALWAYS_INLINE UnlinkedMetadataTable::UnlinkedMetadataTable()
     : m_hasMetadata(false)
     , m_isFinalized(false)
     , m_isLinked(false)
-    , m_rawBuffer(fastZeroedMalloc(sizeof(LinkingData) + s_offsetTableSize))
+    , m_is32Bit(false)
+    , m_rawBuffer(static_cast<uint8_t*>(fastZeroedMalloc(sizeof(LinkingData) + s_offset32TableSize)))
+{
+}
+
+ALWAYS_INLINE UnlinkedMetadataTable::UnlinkedMetadataTable(bool is32Bit)
+    : m_hasMetadata(false)
+    , m_isFinalized(false)
+    , m_isLinked(false)
+    , m_is32Bit(is32Bit)
+    , m_rawBuffer(static_cast<uint8_t*>(fastZeroedMalloc(sizeof(LinkingData) + (is32Bit ? s_offset16TableSize + s_offset32TableSize : s_offset16TableSize))))
+{
+}
+
+ALWAYS_INLINE UnlinkedMetadataTable::UnlinkedMetadataTable(EmptyTag)
+    : m_hasMetadata(false)
+    , m_isFinalized(true)
+    , m_isLinked(false)
+    , m_is32Bit(false)
+    , m_rawBuffer(nullptr)
 {
 }
 
 ALWAYS_INLINE UnlinkedMetadataTable::~UnlinkedMetadataTable()
 {
@@ -48,76 +67,57 @@
 
 ALWAYS_INLINE unsigned UnlinkedMetadataTable::addEntry(OpcodeID opcodeID)
 {
     ASSERT(!m_isFinalized && opcodeID < s_offsetTableEntries - 1);
     m_hasMetadata = true;
-    return buffer()[opcodeID]++;
+    return preprocessBuffer()[opcodeID]++;
 }
 
 ALWAYS_INLINE size_t UnlinkedMetadataTable::sizeInBytes()
 {
     if (m_isFinalized && !m_hasMetadata)
         return 0;
 
-    return s_offsetTableSize;
+    if (m_is32Bit)
+        return s_offset16TableSize + s_offset32TableSize;
+    return s_offset16TableSize;
 }
 
 ALWAYS_INLINE size_t UnlinkedMetadataTable::sizeInBytes(MetadataTable& metadataTable)
 {
     ASSERT(m_isFinalized);
 
     // In this case, we return the size of the table minus the offset table,
     // which was already accounted for in the UnlinkedCodeBlock.
+    size_t result = totalSize();
     if (metadataTable.buffer() == buffer()) {
         ASSERT(m_isLinked);
-        return buffer()[s_offsetTableEntries - 1] - s_offsetTableSize;
-    }
-
-    return metadataTable.buffer()[s_offsetTableEntries - 1];
-}
-
-ALWAYS_INLINE void UnlinkedMetadataTable::finalize()
-{
-    ASSERT(!m_isFinalized);
-    m_isFinalized = true;
-    if (!m_hasMetadata) {
-        fastFree(m_rawBuffer);
-        m_rawBuffer = nullptr;
-        return;
-    }
-
-    unsigned offset = s_offsetTableSize;
-    for (unsigned i = 0; i < s_offsetTableEntries - 1; i++) {
-        unsigned numberOfEntries = buffer()[i];
-
-        if (numberOfEntries > 0) {
-            offset = roundUpToMultipleOf(metadataAlignment(static_cast<OpcodeID>(i)), offset);
-            buffer()[i] = offset;
-            offset += numberOfEntries * metadataSize(static_cast<OpcodeID>(i));
-        } else
-            buffer()[i] = offset;
+        if (m_is32Bit)
+            return result - (s_offset16TableSize + s_offset32TableSize);
+        return result - s_offset16TableSize;
     }
-    buffer()[s_offsetTableEntries - 1] = offset;
+    return result;
 }
 
 ALWAYS_INLINE RefPtr<MetadataTable> UnlinkedMetadataTable::link()
 {
     ASSERT(m_isFinalized);
 
     if (!m_hasMetadata)
         return nullptr;
 
-    unsigned totalSize = buffer()[s_offsetTableEntries - 1];
+    unsigned totalSize = this->totalSize();
+    unsigned offsetTableSize = this->offsetTableSize();
     uint8_t* buffer;
     if (!m_isLinked) {
         m_isLinked = true;
         m_rawBuffer = buffer = reinterpret_cast<uint8_t*>(fastRealloc(m_rawBuffer, sizeof(LinkingData) + totalSize));
     } else {
         buffer = reinterpret_cast<uint8_t*>(fastMalloc(sizeof(LinkingData) + totalSize));
-        memcpy(buffer, m_rawBuffer, sizeof(LinkingData) + s_offsetTableSize);
+        memcpy(buffer, m_rawBuffer, sizeof(LinkingData) + offsetTableSize);
     }
-    memset(buffer + sizeof(LinkingData) + s_offsetTableSize, 0, totalSize - s_offsetTableSize);
+    memset(buffer + sizeof(LinkingData) + offsetTableSize, 0, totalSize - offsetTableSize);
     return adoptRef(*new (buffer + sizeof(LinkingData)) MetadataTable(*this));
 }
 
 ALWAYS_INLINE void UnlinkedMetadataTable::unlink(MetadataTable& metadataTable)
 {
@@ -126,11 +126,11 @@
         return;
 
     if (metadataTable.buffer() == buffer()) {
         ASSERT(m_isLinked);
         m_isLinked = false;
-        m_rawBuffer = fastRealloc(m_rawBuffer, sizeof(LinkingData) + s_offsetTableSize);
+        m_rawBuffer = static_cast<uint8_t*>(fastRealloc(m_rawBuffer, sizeof(LinkingData) + offsetTableSize()));
         return;
     }
     fastFree(&metadataTable.linkingData());
 }
 
