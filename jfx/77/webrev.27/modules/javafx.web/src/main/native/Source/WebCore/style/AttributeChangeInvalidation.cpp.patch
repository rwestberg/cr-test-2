diff a/modules/javafx.web/src/main/native/Source/WebCore/style/AttributeChangeInvalidation.cpp b/modules/javafx.web/src/main/native/Source/WebCore/style/AttributeChangeInvalidation.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/style/AttributeChangeInvalidation.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/style/AttributeChangeInvalidation.cpp
@@ -27,21 +27,22 @@
 #include "AttributeChangeInvalidation.h"
 
 #include "ElementIterator.h"
 #include "StyleInvalidationFunctions.h"
 #include "StyleInvalidator.h"
+#include <wtf/SetForScope.h>
 
 namespace WebCore {
 namespace Style {
 
 static bool mayBeAffectedByAttributeChange(const RuleFeatureSet& features, bool isHTML, const QualifiedName& attributeName)
 {
     auto& nameSet = isHTML ? features.attributeCanonicalLocalNamesInRules : features.attributeLocalNamesInRules;
     return nameSet.contains(attributeName.localName());
 }
 
-void AttributeChangeInvalidation::invalidateStyle(const QualifiedName& attributeName, const AtomicString& oldValue, const AtomicString& newValue)
+void AttributeChangeInvalidation::invalidateStyle(const QualifiedName& attributeName, const AtomString& oldValue, const AtomString& newValue)
 {
     if (newValue == oldValue)
         return;
 
     bool isHTML = m_element.isHTMLElement();
@@ -86,10 +87,12 @@
     }
 }
 
 void AttributeChangeInvalidation::invalidateStyleWithRuleSets()
 {
+    SetForScope<bool> isInvalidating(DocumentRuleSets::s_isInvalidatingStyleWithRuleSets, true);
+
     for (auto* invalidationRuleSet : m_invalidationRuleSets) {
         Invalidator invalidator(*invalidationRuleSet->ruleSet);
         invalidator.invalidateStyleWithMatchElement(m_element, invalidationRuleSet->matchElement);
     }
 }
