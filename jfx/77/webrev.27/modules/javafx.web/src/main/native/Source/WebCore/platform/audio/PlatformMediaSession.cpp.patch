diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSession.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSession.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSession.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSession.cpp
@@ -29,23 +29,16 @@
 #if ENABLE(VIDEO) || ENABLE(WEB_AUDIO)
 #include "HTMLMediaElement.h"
 #include "Logging.h"
 #include "MediaPlayer.h"
 #include "PlatformMediaSessionManager.h"
-#include <wtf/CryptographicallyRandomNumber.h>
 
 namespace WebCore {
 
 static const Seconds clientDataBufferingTimerThrottleDelay { 100_ms };
 
 #if !RELEASE_LOG_DISABLED
-static uint64_t nextLogIdentifier()
-{
-    static uint64_t logIdentifier = cryptographicallyRandomNumber();
-    return ++logIdentifier;
-}
-
 String convertEnumerationToString(PlatformMediaSession::State state)
 {
     static const NeverDestroyed<String> values[] = {
         MAKE_STATIC_STRING_IMPL("Idle"),
         MAKE_STATIC_STRING_IMPL("Autoplaying"),
@@ -114,21 +107,21 @@
 
 #endif
 
 std::unique_ptr<PlatformMediaSession> PlatformMediaSession::create(PlatformMediaSessionClient& client)
 {
-    return std::make_unique<PlatformMediaSession>(client);
+    return makeUnique<PlatformMediaSession>(client);
 }
 
 PlatformMediaSession::PlatformMediaSession(PlatformMediaSessionClient& client)
     : m_client(client)
     , m_state(Idle)
     , m_stateToRestore(Idle)
     , m_notifyingClient(false)
 #if !RELEASE_LOG_DISABLED
     , m_logger(client.hostingDocument()->logger())
-    , m_logIdentifier(nextLogIdentifier())
+    , m_logIdentifier(uniqueLogIdentifier())
 #endif
 {
     ASSERT(m_client.mediaType() >= None && m_client.mediaType() <= MediaStreamCapturingAudio);
     PlatformMediaSessionManager::sharedManager().addSession(*this);
 }
@@ -347,11 +340,11 @@
 PlatformMediaSession::DisplayType PlatformMediaSession::displayType() const
 {
     return m_client.displayType();
 }
 
-bool PlatformMediaSession::activeAudioSessionRequired()
+bool PlatformMediaSession::activeAudioSessionRequired() const
 {
     if (mediaType() == PlatformMediaSession::None)
         return false;
     if (state() != PlatformMediaSession::State::Playing)
         return false;
@@ -393,10 +386,20 @@
 void PlatformMediaSession::clientCharacteristicsChanged()
 {
     PlatformMediaSessionManager::sharedManager().clientCharacteristicsChanged(*this);
 }
 
+bool PlatformMediaSession::canPlayConcurrently(const PlatformMediaSession& otherSession) const
+{
+    return m_client.hasMediaStreamSource() && otherSession.m_client.hasMediaStreamSource();
+}
+
+bool PlatformMediaSession::shouldOverridePauseDuringRouteChange() const
+{
+    return m_client.shouldOverridePauseDuringRouteChange();
+}
+
 #if !RELEASE_LOG_DISABLED
 WTFLogChannel& PlatformMediaSession::logChannel() const
 {
     return LogMedia;
 }
