diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLVisitor.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLVisitor.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLVisitor.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLVisitor.h
@@ -25,13 +25,15 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
+#include "WHLSLError.h"
 #include "WHLSLFunctionAttribute.h"
 #include "WHLSLSemantic.h"
 #include "WHLSLTypeArgument.h"
+#include <wtf/Expected.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
@@ -64,26 +66,27 @@
 class NullLiteral;
 class BooleanLiteral;
 class EnumerationMemberLiteral;
 class NumThreadsFunctionAttribute;
 class Block;
+class StatementList;
 class Statement;
 class Break;
 class Continue;
 class DoWhileLoop;
 class Expression;
 class DotExpression;
+class GlobalVariableReference;
 class IndexExpression;
 class PropertyAccessExpression;
 class EffectfulExpressionStatement;
 class Fallthrough;
 class ForLoop;
 class IfStatement;
 class Return;
 class SwitchCase;
 class SwitchStatement;
-class Trap;
 class VariableDeclarationsStatement;
 class WhileLoop;
 class VariableDeclaration;
 class AssignmentExpression;
 class CallExpression;
@@ -103,11 +106,11 @@
 
 class Visitor {
 public:
     virtual ~Visitor() = default;
 
-    // FIXME: Add a way to visit a const Program
+    // FIXME: https://bugs.webkit.org/show_bug.cgi?id=198171 Add a way to visit a const Program
 
     virtual void visit(Program&);
     virtual void visit(AST::UnnamedType&);
     virtual void visit(AST::NamedType&);
     virtual void visit(AST::TypeDefinition&);
@@ -143,26 +146,27 @@
     virtual void visit(AST::NullLiteralType&);
     virtual void visit(AST::EnumerationMemberLiteral&);
     virtual void visit(AST::FunctionAttribute&);
     virtual void visit(AST::NumThreadsFunctionAttribute&);
     virtual void visit(AST::Block&);
+    virtual void visit(AST::StatementList&);
     virtual void visit(AST::Statement&);
     virtual void visit(AST::Break&);
     virtual void visit(AST::Continue&);
     virtual void visit(AST::DoWhileLoop&);
     virtual void visit(AST::Expression&);
     virtual void visit(AST::DotExpression&);
+    virtual void visit(AST::GlobalVariableReference&);
     virtual void visit(AST::IndexExpression&);
     virtual void visit(AST::PropertyAccessExpression&);
     virtual void visit(AST::EffectfulExpressionStatement&);
     virtual void visit(AST::Fallthrough&);
     virtual void visit(AST::ForLoop&);
     virtual void visit(AST::IfStatement&);
     virtual void visit(AST::Return&);
     virtual void visit(AST::SwitchCase&);
     virtual void visit(AST::SwitchStatement&);
-    virtual void visit(AST::Trap&);
     virtual void visit(AST::VariableDeclarationsStatement&);
     virtual void visit(AST::WhileLoop&);
     virtual void visit(AST::VariableDeclaration&);
     virtual void visit(AST::AssignmentExpression&);
     virtual void visit(AST::CallExpression&);
@@ -174,27 +178,28 @@
     virtual void visit(AST::MakePointerExpression&);
     virtual void visit(AST::ReadModifyWriteExpression&);
     virtual void visit(AST::TernaryExpression&);
     virtual void visit(AST::VariableReference&);
 
-    bool error() const { return m_error; }
+    bool hasError() const { return !m_expectedError; }
+    Expected<void, Error> result() { return m_expectedError; }
 
     template<typename T> void checkErrorAndVisit(T& x)
     {
-        if (!m_error)
+        if (!hasError())
             visit(x);
     }
 
 protected:
-    void setError()
+    void setError(Error error)
     {
-        ASSERT(!m_error);
-        m_error = true;
+        ASSERT(!hasError());
+        m_expectedError = makeUnexpected(error);
     }
 
 private:
-    bool m_error { false }; // FIXME: Migrate this to be some sort of descriptive string.
+    Expected<void, Error> m_expectedError;
 };
 
 } // namespace WHLSL
 
 } // namespace WebCore
