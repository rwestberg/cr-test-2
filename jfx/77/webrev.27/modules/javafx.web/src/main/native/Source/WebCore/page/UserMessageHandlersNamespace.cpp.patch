diff a/modules/javafx.web/src/main/native/Source/WebCore/page/UserMessageHandlersNamespace.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/UserMessageHandlersNamespace.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/UserMessageHandlersNamespace.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/UserMessageHandlersNamespace.cpp
@@ -62,28 +62,28 @@
 
     for (auto& userMessageHandler : oldMap.values())
         userMessageHandler->invalidateDescriptor();
 }
 
-Vector<AtomicString> UserMessageHandlersNamespace::supportedPropertyNames() const
+Vector<AtomString> UserMessageHandlersNamespace::supportedPropertyNames() const
 {
     // FIXME: Consider adding support for iterating the registered UserMessageHandlers. This would
     // require adding support for passing the DOMWrapperWorld to supportedPropertyNames.
     return { };
 }
 
-UserMessageHandler* UserMessageHandlersNamespace::namedItem(DOMWrapperWorld& world, const AtomicString& name)
+UserMessageHandler* UserMessageHandlersNamespace::namedItem(DOMWrapperWorld& world, const AtomString& name)
 {
     Frame* frame = this->frame();
     if (!frame)
         return nullptr;
 
     Page* page = frame->page();
     if (!page)
         return nullptr;
 
-    UserMessageHandler* handler = m_messageHandlers.get(std::pair<AtomicString, RefPtr<DOMWrapperWorld>>(name, &world));
+    UserMessageHandler* handler = m_messageHandlers.get(std::pair<AtomString, RefPtr<DOMWrapperWorld>>(name, &world));
     if (handler)
         return handler;
 
     page->userContentProvider().forEachUserMessageHandler([&](const UserMessageHandlerDescriptor& descriptor) {
         if (descriptor.name() != name || &descriptor.world() != &world)
