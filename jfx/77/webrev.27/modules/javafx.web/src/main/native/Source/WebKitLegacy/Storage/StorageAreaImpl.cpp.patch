diff a/modules/javafx.web/src/main/native/Source/WebKitLegacy/Storage/StorageAreaImpl.cpp b/modules/javafx.web/src/main/native/Source/WebKitLegacy/Storage/StorageAreaImpl.cpp
--- a/modules/javafx.web/src/main/native/Source/WebKitLegacy/Storage/StorageAreaImpl.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebKitLegacy/Storage/StorageAreaImpl.cpp
@@ -192,15 +192,15 @@
     blockUntilImportComplete();
 
     return m_storageMap->contains(key);
 }
 
-void StorageAreaImpl::importItems(const HashMap<String, String>& items)
+void StorageAreaImpl::importItems(HashMap<String, String>&& items)
 {
     ASSERT(!m_isShutdown);
 
-    m_storageMap->importItems(items);
+    m_storageMap->importItems(WTFMove(items));
 }
 
 void StorageAreaImpl::close()
 {
     if (m_storageAreaSync)
@@ -290,6 +290,24 @@
         StorageEventDispatcher::dispatchLocalStorageEvents(key, oldValue, newValue, m_securityOrigin, sourceFrame);
     else
         StorageEventDispatcher::dispatchSessionStorageEvents(key, oldValue, newValue, m_securityOrigin, sourceFrame);
 }
 
+void StorageAreaImpl::sessionChanged(bool isNewSessionPersistent)
+{
+    ASSERT(isMainThread());
+
+    unsigned quota = m_storageMap->quota();
+    m_storageMap = StorageMap::create(quota);
+
+    if (isNewSessionPersistent && !m_storageAreaSync && m_storageSyncManager) {
+        m_storageAreaSync = StorageAreaSync::create(m_storageSyncManager.get(), *this, m_securityOrigin.databaseIdentifier());
+        return;
+    }
+
+    if (!isNewSessionPersistent && m_storageAreaSync) {
+        m_storageAreaSync->scheduleFinalSync();
+        m_storageAreaSync = nullptr;
+    }
+}
+
 } // namespace WebCore
