diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLResourceSemantic.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLResourceSemantic.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLResourceSemantic.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLResourceSemantic.h
@@ -26,29 +26,31 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "WHLSLBaseSemantic.h"
-#include "WHLSLLexer.h"
+#include "WHLSLCodeLocation.h"
+#include <wtf/FastMalloc.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
 class ResourceSemantic : public BaseSemantic {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     enum class Mode : uint8_t {
         UnorderedAccessView,
         Texture,
         Buffer,
         Sampler
     };
 
-    ResourceSemantic(Lexer::Token&& origin, Mode mode, unsigned index, unsigned space)
-        : BaseSemantic(WTFMove(origin))
+    ResourceSemantic(CodeLocation location, Mode mode, unsigned index, unsigned space)
+        : BaseSemantic(location)
         , m_mode(mode)
         , m_index(index)
         , m_space(space)
     {
     }
@@ -56,10 +58,24 @@
     virtual ~ResourceSemantic() = default;
 
     ResourceSemantic(const ResourceSemantic&) = delete;
     ResourceSemantic(ResourceSemantic&&) = default;
 
+    StringView toString()
+    {
+        switch (m_mode) {
+        case Mode::UnorderedAccessView:
+            return "UnorderedAccessView";
+        case Mode::Texture:
+            return "Texture";
+        case Mode::Buffer:
+            return "Buffer";
+        case Mode::Sampler:
+            return "Sampler";
+        }
+    }
+
     Mode mode() const { return m_mode; }
     unsigned index() const { return m_index; }
     unsigned space() const { return m_space; }
 
     bool operator==(const ResourceSemantic& other) const
