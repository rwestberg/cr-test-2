diff a/modules/javafx.web/src/main/native/Source/WebCore/html/track/LoadableTextTrack.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/track/LoadableTextTrack.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/track/LoadableTextTrack.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/track/LoadableTextTrack.cpp
@@ -31,13 +31,16 @@
 
 #include "HTMLTrackElement.h"
 #include "TextTrackCueList.h"
 #include "VTTCue.h"
 #include "VTTRegionList.h"
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(LoadableTextTrack);
+
 LoadableTextTrack::LoadableTextTrack(HTMLTrackElement& track, const String& kind, const String& label, const String& language)
     : TextTrack(&track.document(), &track, kind, emptyString(), label, language, TrackElement)
     , m_trackElement(&track)
     , m_loadTimer(*this, &LoadableTextTrack::loadTimerFired)
     , m_isDefault(false)
@@ -79,11 +82,11 @@
     // 4.8.10.12.3 Sourcing out-of-band text tracks (continued)
 
     // 4. Download: If URL is not the empty string, perform a potentially CORS-enabled fetch of URL, with the
     // mode being the state of the media element's crossorigin content attribute, the origin being the
     // origin of the media element's Document, and the default origin behaviour set to fail.
-    m_loader = std::make_unique<TextTrackLoader>(static_cast<TextTrackLoaderClient&>(*this), static_cast<ScriptExecutionContext*>(&m_trackElement->document()));
+    m_loader = makeUnique<TextTrackLoader>(static_cast<TextTrackLoaderClient&>(*this), static_cast<ScriptExecutionContext*>(&m_trackElement->document()));
     if (!m_loader->load(m_url, *m_trackElement))
         m_trackElement->didCompleteLoad(HTMLTrackElement::Failure);
 }
 
 void LoadableTextTrack::newCuesAvailable(TextTrackLoader& loader)
@@ -96,11 +99,11 @@
     if (!m_cues)
         m_cues = TextTrackCueList::create();
 
     for (auto& newCue : newCues) {
         newCue->setTrack(this);
-        DEBUG_LOG(LOGIDENTIFIER, *toVTTCue(newCue.get()));
+        INFO_LOG(LOGIDENTIFIER, *toVTTCue(newCue.get()));
         m_cues->add(newCue.releaseNonNull());
     }
 
     if (client())
         client()->textTrackAddCues(*this, *m_cues);
@@ -135,11 +138,11 @@
 {
     ASSERT_UNUSED(loader, m_loader.get() == &loader);
     m_styleSheets = m_loader->getNewStyleSheets();
 }
 
-AtomicString LoadableTextTrack::id() const
+AtomString LoadableTextTrack::id() const
 {
     if (!m_trackElement)
         return emptyAtom();
     return m_trackElement->attributeWithoutSynchronization(idAttr);
 }
