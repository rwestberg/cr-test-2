diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ClonedArguments.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ClonedArguments.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ClonedArguments.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ClonedArguments.cpp
@@ -149,13 +149,16 @@
 }
 
 Structure* ClonedArguments::createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype, IndexingType indexingType)
 {
     Structure* structure = Structure::create(vm, globalObject, prototype, TypeInfo(ClonedArgumentsType, StructureFlags), info(), indexingType);
-    PropertyOffset offset;
-    structure = structure->addPropertyTransition(vm, structure, vm.propertyNames->length, static_cast<unsigned>(PropertyAttribute::DontEnum), offset);
-    ASSERT(offset == clonedArgumentsLengthPropertyOffset);
+    structure->addPropertyWithoutTransition(
+        vm, vm.propertyNames->length, static_cast<unsigned>(PropertyAttribute::DontEnum),
+        [&] (const GCSafeConcurrentJSLocker&, PropertyOffset offset, PropertyOffset newLastOffset) {
+            RELEASE_ASSERT(offset == clonedArgumentsLengthPropertyOffset);
+            structure->setLastOffset(newLastOffset);
+        });
     return structure;
 }
 
 Structure* ClonedArguments::createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
 {
