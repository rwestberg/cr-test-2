diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/FormattingState.h b/modules/javafx.web/src/main/native/Source/WebCore/layout/FormattingState.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/FormattingState.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/FormattingState.h
@@ -31,10 +31,11 @@
 #include "FormattingContext.h"
 #include "LayoutBox.h"
 #include "LayoutState.h"
 #include "LayoutUnit.h"
 #include <wtf/IsoMalloc.h>
+#include <wtf/WeakPtr.h>
 
 namespace WebCore {
 
 namespace Layout {
 
@@ -49,47 +50,61 @@
     FloatingState& floatingState() const { return m_floatingState; }
 
     void markNeedsLayout(const Box&, StyleDiff);
     bool needsLayout(const Box&);
 
-    void setIntrinsicWidthConstraints(const Box&,  FormattingContext::IntrinsicWidthConstraints);
+    void setIntrinsicWidthConstraintsForBox(const Box&,  FormattingContext::IntrinsicWidthConstraints);
+    Optional<FormattingContext::IntrinsicWidthConstraints> intrinsicWidthConstraintsForBox(const Box&) const;
     void clearIntrinsicWidthConstraints(const Box&);
-    Optional<FormattingContext::IntrinsicWidthConstraints> intrinsicWidthConstraints(const Box&) const;
+
+    void setIntrinsicWidthConstraints(FormattingContext::IntrinsicWidthConstraints intrinsicWidthConstraints) { m_intrinsicWidthConstraints = intrinsicWidthConstraints; }
+    Optional<FormattingContext::IntrinsicWidthConstraints> intrinsicWidthConstraints() const { return m_intrinsicWidthConstraints; }
 
     bool isBlockFormattingState() const { return m_type == Type::Block; }
     bool isInlineFormattingState() const { return m_type == Type::Inline; }
+    bool isTableFormattingState() const { return m_type == Type::Table; }
 
     LayoutState& layoutState() const { return m_layoutState; }
 
+    // Since we layout the out-of-flow boxes at the end of the formatting context layout, it's okay to store them in the formatting state -as opposed to the containing block level.
+    using OutOfFlowBoxList = Vector<WeakPtr<const Box>>;
+    void addOutOfFlowBox(const Box& outOfFlowBox) { m_outOfFlowBoxes.append(makeWeakPtr(outOfFlowBox)); }
+    void removeOutOfFlowBox(const Box&);
+    const OutOfFlowBoxList& outOfFlowBoxes() const { return m_outOfFlowBoxes; }
+
 protected:
-    enum class Type { Block, Inline };
+    enum class Type { Block, Inline, Table };
     FormattingState(Ref<FloatingState>&&, Type, LayoutState&);
 
 private:
     LayoutState& m_layoutState;
     Ref<FloatingState> m_floatingState;
-    HashMap<const Box*, FormattingContext::IntrinsicWidthConstraints> m_intrinsicWidthConstraints;
+    HashMap<const Box*, FormattingContext::IntrinsicWidthConstraints> m_intrinsicWidthConstraintsForBoxes;
+    Optional<FormattingContext::IntrinsicWidthConstraints> m_intrinsicWidthConstraints;
+    // FIXME: This needs WeakListHashSet
+    OutOfFlowBoxList m_outOfFlowBoxes;
     Type m_type;
 };
 
-inline void FormattingState::setIntrinsicWidthConstraints(const Box& layoutBox, FormattingContext::IntrinsicWidthConstraints intrinsicWidthConstraints)
+inline void FormattingState::setIntrinsicWidthConstraintsForBox(const Box& layoutBox, FormattingContext::IntrinsicWidthConstraints intrinsicWidthConstraints)
 {
-    ASSERT(!m_intrinsicWidthConstraints.contains(&layoutBox));
+    ASSERT(!m_intrinsicWidthConstraintsForBoxes.contains(&layoutBox));
     ASSERT(&m_layoutState.formattingStateForBox(layoutBox) == this);
-    m_intrinsicWidthConstraints.set(&layoutBox, intrinsicWidthConstraints);
+    m_intrinsicWidthConstraintsForBoxes.set(&layoutBox, intrinsicWidthConstraints);
 }
 
 inline void FormattingState::clearIntrinsicWidthConstraints(const Box& layoutBox)
 {
-    m_intrinsicWidthConstraints.remove(&layoutBox);
+    m_intrinsicWidthConstraints = { };
+    m_intrinsicWidthConstraintsForBoxes.remove(&layoutBox);
 }
 
-inline Optional<FormattingContext::IntrinsicWidthConstraints> FormattingState::intrinsicWidthConstraints(const Box& layoutBox) const
+inline Optional<FormattingContext::IntrinsicWidthConstraints> FormattingState::intrinsicWidthConstraintsForBox(const Box& layoutBox) const
 {
     ASSERT(&m_layoutState.formattingStateForBox(layoutBox) == this);
-    auto iterator = m_intrinsicWidthConstraints.find(&layoutBox);
-    if (iterator == m_intrinsicWidthConstraints.end())
+    auto iterator = m_intrinsicWidthConstraintsForBoxes.find(&layoutBox);
+    if (iterator == m_intrinsicWidthConstraintsForBoxes.end())
         return { };
     return iterator->value;
 }
 
 }
