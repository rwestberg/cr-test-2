diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/cv/VideoTextureCopierCV.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/cv/VideoTextureCopierCV.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/cv/VideoTextureCopierCV.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/cv/VideoTextureCopierCV.cpp
@@ -59,22 +59,10 @@
     kDCI_P3,
     kP3_D65,
     kITU_R_2020,
 };
 
-#if PLATFORM(MAC) && __MAC_OS_X_VERSION_MIN_REQUIRED < 101300
-enum {
-    kCVPixelFormatType_ARGB2101010LEPacked = 'l10r',
-    kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange = 'x420',
-    kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange = 'x422',
-    kCVPixelFormatType_444YpCbCr10BiPlanarVideoRange = 'x444',
-    kCVPixelFormatType_420YpCbCr10BiPlanarFullRange  = 'xf20',
-    kCVPixelFormatType_422YpCbCr10BiPlanarFullRange  = 'xf22',
-    kCVPixelFormatType_444YpCbCr10BiPlanarFullRange  = 'xf44',
-};
-#endif
-
 static PixelRange pixelRangeFromPixelFormat(OSType pixelFormat)
 {
     switch (pixelFormat) {
     case kCVPixelFormatType_4444AYpCbCr8:
     case kCVPixelFormatType_4444AYpCbCr16:
@@ -97,10 +85,12 @@
     }
 }
 
 static TransferFunction transferFunctionFromString(CFStringRef string)
 {
+    if (!string || CFGetTypeID(string) != CFStringGetTypeID())
+        return TransferFunction::Unknown;
     if (CFEqual(string, kCVImageBufferYCbCrMatrix_ITU_R_709_2))
         return TransferFunction::kITU_R_709_2;
     if (CFEqual(string, kCVImageBufferYCbCrMatrix_ITU_R_601_4))
         return TransferFunction::kITU_R_601_4;
     if (CFEqual(string, kCVImageBufferYCbCrMatrix_SMPTE_240M_1995))
@@ -399,66 +389,66 @@
 static StringMap& enumToStringMap()
 {
     static NeverDestroyed<StringMap> map;
     if (map.get().empty()) {
         StringMap stringMap;
-        map.get().emplace(STRINGIFY_PAIR(GL_RGB));
-        map.get().emplace(STRINGIFY_PAIR(GL_RGBA));
-        map.get().emplace(STRINGIFY_PAIR(GL_LUMINANCE_ALPHA));
-        map.get().emplace(STRINGIFY_PAIR(GL_LUMINANCE));
-        map.get().emplace(STRINGIFY_PAIR(GL_ALPHA));
-        map.get().emplace(STRINGIFY_PAIR(GL_R8));
-        map.get().emplace(STRINGIFY_PAIR(GL_R16F));
-        map.get().emplace(STRINGIFY_PAIR(GL_R32F));
-        map.get().emplace(STRINGIFY_PAIR(GL_R8UI));
-        map.get().emplace(STRINGIFY_PAIR(GL_R8I));
-        map.get().emplace(STRINGIFY_PAIR(GL_R16UI));
-        map.get().emplace(STRINGIFY_PAIR(GL_R16I));
-        map.get().emplace(STRINGIFY_PAIR(GL_R32UI));
-        map.get().emplace(STRINGIFY_PAIR(GL_R32I));
-        map.get().emplace(STRINGIFY_PAIR(GL_RG8));
-        map.get().emplace(STRINGIFY_PAIR(GL_RG16F));
-        map.get().emplace(STRINGIFY_PAIR(GL_RG32F));
-        map.get().emplace(STRINGIFY_PAIR(GL_RG8UI));
-        map.get().emplace(STRINGIFY_PAIR(GL_RG8I));
-        map.get().emplace(STRINGIFY_PAIR(GL_RG16UI));
-        map.get().emplace(STRINGIFY_PAIR(GL_RG16I));
-        map.get().emplace(STRINGIFY_PAIR(GL_RG32UI));
-        map.get().emplace(STRINGIFY_PAIR(GL_RG32I));
-        map.get().emplace(STRINGIFY_PAIR(GL_RGB8));
-        map.get().emplace(STRINGIFY_PAIR(GL_SRGB8));
-        map.get().emplace(STRINGIFY_PAIR(GL_RGBA8));
-        map.get().emplace(STRINGIFY_PAIR(GL_SRGB8_ALPHA8));
-        map.get().emplace(STRINGIFY_PAIR(GL_RGBA4));
-        map.get().emplace(STRINGIFY_PAIR(GL_RGB10_A2));
-        map.get().emplace(STRINGIFY_PAIR(GL_DEPTH_COMPONENT16));
-        map.get().emplace(STRINGIFY_PAIR(GL_DEPTH_COMPONENT24));
-        map.get().emplace(STRINGIFY_PAIR(GL_DEPTH_COMPONENT32F));
-        map.get().emplace(STRINGIFY_PAIR(GL_DEPTH24_STENCIL8));
-        map.get().emplace(STRINGIFY_PAIR(GL_DEPTH32F_STENCIL8));
-        map.get().emplace(STRINGIFY_PAIR(GL_RGB));
-        map.get().emplace(STRINGIFY_PAIR(GL_RGBA));
-        map.get().emplace(STRINGIFY_PAIR(GL_LUMINANCE_ALPHA));
-        map.get().emplace(STRINGIFY_PAIR(GL_LUMINANCE));
-        map.get().emplace(STRINGIFY_PAIR(GL_ALPHA));
-        map.get().emplace(STRINGIFY_PAIR(GL_RED));
-        map.get().emplace(STRINGIFY_PAIR(GL_RG_INTEGER));
-        map.get().emplace(STRINGIFY_PAIR(GL_DEPTH_STENCIL));
-        map.get().emplace(STRINGIFY_PAIR(GL_UNSIGNED_BYTE));
-        map.get().emplace(STRINGIFY_PAIR(GL_UNSIGNED_SHORT_5_6_5));
-        map.get().emplace(STRINGIFY_PAIR(GL_UNSIGNED_SHORT_4_4_4_4));
-        map.get().emplace(STRINGIFY_PAIR(GL_UNSIGNED_SHORT_5_5_5_1));
-        map.get().emplace(STRINGIFY_PAIR(GL_BYTE));
-        map.get().emplace(STRINGIFY_PAIR(GL_HALF_FLOAT));
-        map.get().emplace(STRINGIFY_PAIR(GL_FLOAT));
-        map.get().emplace(STRINGIFY_PAIR(GL_UNSIGNED_SHORT));
-        map.get().emplace(STRINGIFY_PAIR(GL_SHORT));
-        map.get().emplace(STRINGIFY_PAIR(GL_UNSIGNED_INT));
-        map.get().emplace(STRINGIFY_PAIR(GL_INT));
-        map.get().emplace(STRINGIFY_PAIR(GL_UNSIGNED_INT_2_10_10_10_REV));
-        map.get().emplace(STRINGIFY_PAIR(GL_UNSIGNED_INT_24_8));
-        map.get().emplace(STRINGIFY_PAIR(GL_FLOAT_32_UNSIGNED_INT_24_8_REV));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RGB));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RGBA));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::LUMINANCE_ALPHA));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::LUMINANCE));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::ALPHA));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::R8));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::R16F));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::R32F));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::R8UI));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::R8I));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::R16UI));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::R16I));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::R32UI));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::R32I));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RG8));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RG16F));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RG32F));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RG8UI));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RG8I));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RG16UI));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RG16I));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RG32UI));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RG32I));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RGB8));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::SRGB8));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RGBA8));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::SRGB8_ALPHA8));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RGBA4));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RGB10_A2));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::DEPTH_COMPONENT16));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::DEPTH_COMPONENT24));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::DEPTH_COMPONENT32F));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::DEPTH24_STENCIL8));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::DEPTH32F_STENCIL8));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RGB));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RGBA));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::LUMINANCE_ALPHA));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::LUMINANCE));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::ALPHA));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RED));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::RG_INTEGER));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::DEPTH_STENCIL));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::UNSIGNED_BYTE));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::UNSIGNED_SHORT_5_6_5));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::UNSIGNED_SHORT_4_4_4_4));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::UNSIGNED_SHORT_5_5_5_1));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::BYTE));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::HALF_FLOAT));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::FLOAT));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::UNSIGNED_SHORT));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::SHORT));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::UNSIGNED_INT));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::INT));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::UNSIGNED_INT_2_10_10_10_REV));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::UNSIGNED_INT_24_8));
+        map.get().emplace(STRINGIFY_PAIR(GraphicsContext3D::FLOAT_32_UNSIGNED_INT_24_8_REV));
 
 #if USE(OPENGL_ES)
         map.get().emplace(STRINGIFY_PAIR(GL_RED_INTEGER));
         map.get().emplace(STRINGIFY_PAIR(GL_RGB_INTEGER));
         map.get().emplace(STRINGIFY_PAIR(GL_RG8_SNORM));
@@ -526,23 +516,33 @@
     StringBuilder fragmentShaderSource;
 
 #if USE(OPENGL_ES)
     fragmentShaderSource.appendLiteral("precision mediump float;\n");
     fragmentShaderSource.appendLiteral("uniform sampler2D u_texture;\n");
-#else
+#elif USE(OPENGL)
     fragmentShaderSource.appendLiteral("uniform sampler2DRect u_texture;\n");
+#elif USE(ANGLE)
+    // FIXME: determine how to access rectangular textures via ANGLE.
+    ASSERT_NOT_REACHED();
+#else
+#error Unsupported configuration
 #endif
     fragmentShaderSource.appendLiteral("varying vec2 v_texturePosition;\n");
     fragmentShaderSource.appendLiteral("uniform int u_premultiply;\n");
     fragmentShaderSource.appendLiteral("uniform vec2 u_textureDimensions;\n");
     fragmentShaderSource.appendLiteral("uniform int u_swapColorChannels;\n");
     fragmentShaderSource.appendLiteral("void main() {\n");
     fragmentShaderSource.appendLiteral("    vec2 texPos = vec2(v_texturePosition.x * u_textureDimensions.x, v_texturePosition.y * u_textureDimensions.y);\n");
 #if USE(OPENGL_ES)
     fragmentShaderSource.appendLiteral("    vec4 color = texture2D(u_texture, texPos);\n");
-#else
+#elif USE(OPENGL)
     fragmentShaderSource.appendLiteral("    vec4 color = texture2DRect(u_texture, texPos);\n");
+#elif USE(ANGLE)
+    // FIXME: determine how to access rectangular textures via ANGLE.
+    ASSERT_NOT_REACHED();
+#else
+#error Unsupported configuration
 #endif
     fragmentShaderSource.appendLiteral("    if (u_swapColorChannels == 1) {\n");
     fragmentShaderSource.appendLiteral("        color.rgba = color.bgra;\n");
     fragmentShaderSource.appendLiteral("    }\n");
     fragmentShaderSource.appendLiteral("    if (u_premultiply == 1) {\n");
@@ -619,13 +619,17 @@
         "       normalizedPosition.y = 1.0 - normalizedPosition.y;\n"
         "   }\n"
 #if USE(OPENGL_ES)
         "   v_yTextureCoordinate = normalizedPosition;\n"
         "   v_uvTextureCoordinate = normalizedPosition;\n"
-#else
+#elif USE(OPENGL)
         "   v_yTextureCoordinate = normalizedPosition * u_yTextureSize;\n"
         "   v_uvTextureCoordinate = normalizedPosition * u_uvTextureSize;\n"
+#elif USE(ANGLE)
+        // FIXME: determine how to access rectangular textures via ANGLE.
+#else
+#error Unsupported configuration
 #endif
         "}\n"_s
     };
 
     Platform3DObject vertexShader = m_context->createShader(GraphicsContext3D::VERTEX_SHADER);
@@ -643,13 +647,17 @@
     String fragmentShaderSource {
 #if USE(OPENGL_ES)
         "precision mediump float;\n"
         "#define SAMPLERTYPE sampler2D\n"
         "#define TEXTUREFUNC texture2D\n"
-#else
+#elif USE(OPENGL)
         "#define SAMPLERTYPE sampler2DRect\n"
         "#define TEXTUREFUNC texture2DRect\n"
+#elif USE(ANGLE)
+        // FIXME: determine how to access rectangular textures via ANGLE.
+#else
+#error Unsupported configuration
 #endif
         "uniform SAMPLERTYPE u_yTexture;\n"
         "uniform SAMPLERTYPE u_uvTexture;\n"
         "uniform mat4 u_colorMatrix;\n"
         "varying vec2 v_yTextureCoordinate;\n"
@@ -786,21 +794,26 @@
     auto uvPlaneWidth = IOSurfaceGetWidthOfPlane(surface, 1);
     auto uvPlaneHeight = IOSurfaceGetHeightOfPlane(surface, 1);
 
 #if USE(OPENGL_ES)
     GC3Denum videoTextureTarget = GraphicsContext3D::TEXTURE_2D;
-#else
+#elif USE(OPENGL)
     GC3Denum videoTextureTarget = GL_TEXTURE_RECTANGLE_ARB;
+#elif USE(ANGLE)
+    // FIXME: determine how to access rectangular textures via ANGLE.
+    GC3Denum videoTextureTarget = GraphicsContext3D::TEXTURE_2D;
+#else
+#error Unsupported configuration
 #endif
     auto uvTexture = m_context->createTexture();
     m_context->activeTexture(GraphicsContext3D::TEXTURE1);
     m_context->bindTexture(videoTextureTarget, uvTexture);
     m_context->texParameteri(videoTextureTarget, GraphicsContext3D::TEXTURE_MAG_FILTER, GraphicsContext3D::LINEAR);
     m_context->texParameteri(videoTextureTarget, GraphicsContext3D::TEXTURE_MIN_FILTER, GraphicsContext3D::LINEAR);
     m_context->texParameteri(videoTextureTarget, GraphicsContext3D::TEXTURE_WRAP_S, GraphicsContext3D::CLAMP_TO_EDGE);
     m_context->texParameteri(videoTextureTarget, GraphicsContext3D::TEXTURE_WRAP_T, GraphicsContext3D::CLAMP_TO_EDGE);
-    if (!m_context->texImageIOSurface2D(videoTextureTarget, GL_RG, uvPlaneWidth, uvPlaneHeight, GL_RG, GL_UNSIGNED_BYTE, surface, 1)) {
+    if (!m_context->texImageIOSurface2D(videoTextureTarget, GraphicsContext3D::RG, uvPlaneWidth, uvPlaneHeight, GraphicsContext3D::RG, GraphicsContext3D::UNSIGNED_BYTE, surface, 1)) {
         m_context->deleteTexture(uvTexture);
         return false;
     }
 
     auto yTexture = m_context->createTexture();
@@ -808,11 +821,11 @@
     m_context->bindTexture(videoTextureTarget, yTexture);
     m_context->texParameteri(videoTextureTarget, GraphicsContext3D::TEXTURE_MAG_FILTER, GraphicsContext3D::LINEAR);
     m_context->texParameteri(videoTextureTarget, GraphicsContext3D::TEXTURE_MIN_FILTER, GraphicsContext3D::LINEAR);
     m_context->texParameteri(videoTextureTarget, GraphicsContext3D::TEXTURE_WRAP_S, GraphicsContext3D::CLAMP_TO_EDGE);
     m_context->texParameteri(videoTextureTarget, GraphicsContext3D::TEXTURE_WRAP_T, GraphicsContext3D::CLAMP_TO_EDGE);
-    if (!m_context->texImageIOSurface2D(videoTextureTarget, GL_LUMINANCE, yPlaneWidth, yPlaneHeight, GL_LUMINANCE, GL_UNSIGNED_BYTE, surface, 0)) {
+    if (!m_context->texImageIOSurface2D(videoTextureTarget, GraphicsContext3D::LUMINANCE, yPlaneWidth, yPlaneHeight, GraphicsContext3D::LUMINANCE, GraphicsContext3D::UNSIGNED_BYTE, surface, 0)) {
         m_context->deleteTexture(yTexture);
         m_context->deleteTexture(uvTexture);
         return false;
     }
 
@@ -863,14 +876,20 @@
     GLfloat upperLeft[2] = { 0, 0 };
 #if USE(OPENGL_ES)
     Platform3DObject videoTextureName = CVOpenGLESTextureGetName(inputVideoTexture);
     GC3Denum videoTextureTarget = CVOpenGLESTextureGetTarget(inputVideoTexture);
     CVOpenGLESTextureGetCleanTexCoords(inputVideoTexture, lowerLeft, lowerRight, upperRight, upperLeft);
-#else
+#elif USE(OPENGL)
+    Platform3DObject videoTextureName = CVOpenGLTextureGetName(inputVideoTexture);
+    GC3Denum videoTextureTarget = CVOpenGLTextureGetTarget(inputVideoTexture);
+    CVOpenGLTextureGetCleanTexCoords(inputVideoTexture, lowerLeft, lowerRight, upperRight, upperLeft);
+#elif USE(ANGLE)
     Platform3DObject videoTextureName = CVOpenGLTextureGetName(inputVideoTexture);
     GC3Denum videoTextureTarget = CVOpenGLTextureGetTarget(inputVideoTexture);
     CVOpenGLTextureGetCleanTexCoords(inputVideoTexture, lowerLeft, lowerRight, upperRight, upperLeft);
+    // FIXME: determine how to access rectangular textures via ANGLE.
+    ASSERT_NOT_REACHED();
 #endif
 
     if (lowerLeft[1] < upperRight[1])
         flipY = !flipY;
 
