diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/airplay/WebKitPlaybackTargetAvailabilityEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/airplay/WebKitPlaybackTargetAvailabilityEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/airplay/WebKitPlaybackTargetAvailabilityEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/airplay/WebKitPlaybackTargetAvailabilityEvent.h
@@ -32,31 +32,31 @@
 namespace WebCore {
 
 class WebKitPlaybackTargetAvailabilityEvent : public Event {
 public:
 
-    static Ref<WebKitPlaybackTargetAvailabilityEvent> create(const AtomicString& eventType, bool available)
+    static Ref<WebKitPlaybackTargetAvailabilityEvent> create(const AtomString& eventType, bool available)
     {
         return adoptRef(*new WebKitPlaybackTargetAvailabilityEvent(eventType, available));
     }
 
     struct Init : EventInit {
         String availability;
     };
 
-    static Ref<WebKitPlaybackTargetAvailabilityEvent> create(const AtomicString& eventType, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
+    static Ref<WebKitPlaybackTargetAvailabilityEvent> create(const AtomString& eventType, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
     {
         return adoptRef(*new WebKitPlaybackTargetAvailabilityEvent(eventType, initializer, isTrusted));
     }
 
     String availability() const { return m_availability; }
 
     EventInterface eventInterface() const override { return WebKitPlaybackTargetAvailabilityEventInterfaceType; }
 
 private:
-    explicit WebKitPlaybackTargetAvailabilityEvent(const AtomicString& eventType, bool available);
-    WebKitPlaybackTargetAvailabilityEvent(const AtomicString& eventType, const Init&, IsTrusted);
+    explicit WebKitPlaybackTargetAvailabilityEvent(const AtomString& eventType, bool available);
+    WebKitPlaybackTargetAvailabilityEvent(const AtomString& eventType, const Init&, IsTrusted);
 
     String m_availability;
 };
 
 } // namespace WebCore
