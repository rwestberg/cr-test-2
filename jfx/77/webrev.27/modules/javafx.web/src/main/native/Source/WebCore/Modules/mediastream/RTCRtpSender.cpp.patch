diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCRtpSender.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCRtpSender.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCRtpSender.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCRtpSender.cpp
@@ -31,15 +31,21 @@
 #include "config.h"
 #include "RTCRtpSender.h"
 
 #if ENABLE(WEB_RTC)
 
+#include "RTCDTMFSender.h"
+#include "RTCDTMFSenderBackend.h"
 #include "RTCRtpCapabilities.h"
+#include "RTCRtpTransceiver.h"
 #include "RuntimeEnabledFeatures.h"
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(RTCRtpSender);
+
 Ref<RTCRtpSender> RTCRtpSender::create(PeerConnectionBackend& connection, Ref<MediaStreamTrack>&& track, Vector<String>&& mediaStreamIds, std::unique_ptr<RTCRtpSenderBackend>&& backend)
 {
     auto sender = adoptRef(*new RTCRtpSender(connection, String(track->kind()), WTFMove(mediaStreamIds), WTFMove(backend)));
     sender->setTrack(WTFMove(track));
     return sender;
@@ -57,10 +63,12 @@
     , m_connection(makeWeakPtr(&connection))
 {
     ASSERT(!RuntimeEnabledFeatures::sharedFeatures().webRTCUnifiedPlanEnabled() || m_backend);
 }
 
+RTCRtpSender::~RTCRtpSender() = default;
+
 void RTCRtpSender::setTrackToNull()
 {
     ASSERT(m_track);
     m_trackId = { };
     m_track = nullptr;
@@ -130,8 +138,28 @@
 Optional<RTCRtpCapabilities> RTCRtpSender::getCapabilities(ScriptExecutionContext& context, const String& kind)
 {
     return PeerConnectionBackend::senderCapabilities(context, kind);
 }
 
+RTCDTMFSender* RTCRtpSender::dtmf()
+{
+    if (!m_dtmfSender && m_connection && m_connection->context() && m_backend)
+        m_dtmfSender = RTCDTMFSender::create(*m_connection->context(), *this, m_backend->createDTMFBackend());
+
+    return m_dtmfSender.get();
+}
+
+Optional<RTCRtpTransceiverDirection> RTCRtpSender::currentTransceiverDirection() const
+{
+    if (!m_connection)
+        return { };
+
+    auto* transceiver = m_connection->transceiverFromSender(*this);
+    if (!transceiver)
+        return { };
+
+    return transceiver->currentDirection();
+}
+
 } // namespace WebCore
 
 #endif // ENABLE(WEB_RTC)
