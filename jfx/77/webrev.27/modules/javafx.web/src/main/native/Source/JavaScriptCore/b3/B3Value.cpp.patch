diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Value.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Value.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Value.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Value.cpp
@@ -45,45 +45,42 @@
 #include "B3VariableValue.h"
 #include "B3WasmBoundsCheckValue.h"
 #include <wtf/CommaPrinter.h>
 #include <wtf/ListDump.h>
 #include <wtf/StringPrintStream.h>
+#include <wtf/Vector.h>
 
 namespace JSC { namespace B3 {
 
 const char* const Value::dumpPrefix = "@";
+void DeepValueDump::dump(PrintStream& out) const
+{
+    if (m_value)
+        m_value->deepDump(m_proc, out);
+    else
+        out.print("<null>");
+}
 
 Value::~Value()
 {
+    if (m_numChildren == VarArgs)
+        bitwise_cast<Vector<Value*, 3> *>(childrenAlloc())->Vector<Value*, 3>::~Vector();
 }
 
 void Value::replaceWithIdentity(Value* value)
 {
     // This is a bit crazy. It does an in-place replacement of whatever Value subclass this is with
     // a plain Identity Value. We first collect all of the information we need, then we destruct the
     // previous value in place, and then we construct the Identity Value in place.
 
-    ASSERT(m_type == value->m_type);
+    RELEASE_ASSERT(m_type == value->m_type);
+    ASSERT(value != this);
 
-    if (m_type == Void) {
+    if (m_type == Void)
         replaceWithNopIgnoringType();
-        return;
-    }
-
-    unsigned index = m_index;
-    Type type = m_type;
-    Origin origin = m_origin;
-    BasicBlock* owner = this->owner;
-
-    RELEASE_ASSERT(type == value->type());
-
-    this->~Value();
-
-    new (this) Value(Identity, type, origin, value);
-
-    this->owner = owner;
-    this->m_index = index;
+    else
+        replaceWith(Identity, m_type, this->owner, value);
 }
 
 void Value::replaceWithBottom(InsertionSet& insertionSet, size_t index)
 {
     replaceWithBottom(BottomProvider(insertionSet, index));
@@ -95,73 +92,34 @@
     replaceWithNopIgnoringType();
 }
 
 void Value::replaceWithNopIgnoringType()
 {
-    unsigned index = m_index;
-    Origin origin = m_origin;
-    BasicBlock* owner = this->owner;
-
-    this->~Value();
-
-    new (this) Value(Nop, Void, origin);
-
-    this->owner = owner;
-    this->m_index = index;
+    replaceWith(Nop, Void, this->owner);
 }
 
 void Value::replaceWithPhi()
 {
     if (m_type == Void) {
         replaceWithNop();
         return;
     }
 
-    unsigned index = m_index;
-    Origin origin = m_origin;
-    BasicBlock* owner = this->owner;
-    Type type = m_type;
-
-    this->~Value();
-
-    new (this) Value(Phi, type, origin);
-
-    this->owner = owner;
-    this->m_index = index;
+    replaceWith(Phi, m_type, this->owner);
 }
 
 void Value::replaceWithJump(BasicBlock* owner, FrequentedBlock target)
 {
     RELEASE_ASSERT(owner->last() == this);
-
-    unsigned index = m_index;
-    Origin origin = m_origin;
-
-    this->~Value();
-
-    new (this) Value(Jump, Void, origin);
-
-    this->owner = owner;
-    this->m_index = index;
-
+    replaceWith(Jump, Void, this->owner);
     owner->setSuccessors(target);
 }
 
 void Value::replaceWithOops(BasicBlock* owner)
 {
     RELEASE_ASSERT(owner->last() == this);
-
-    unsigned index = m_index;
-    Origin origin = m_origin;
-
-    this->~Value();
-
-    new (this) Value(Oops, Void, origin);
-
-    this->owner = owner;
-    this->m_index = index;
-
+    replaceWith(Oops, Void, this->owner);
     owner->clearSuccessors();
 }
 
 void Value::replaceWithJump(FrequentedBlock target)
 {
@@ -171,10 +129,34 @@
 void Value::replaceWithOops()
 {
     replaceWithOops(owner);
 }
 
+void Value::replaceWith(Kind kind, Type type, BasicBlock* owner)
+{
+    unsigned index = m_index;
+
+    this->~Value();
+
+    new (this) Value(kind, type, m_origin);
+
+    this->m_index = index;
+    this->owner = owner;
+}
+
+void Value::replaceWith(Kind kind, Type type, BasicBlock* owner, Value* value)
+{
+    unsigned index = m_index;
+
+    this->~Value();
+
+    new (this) Value(kind, type, m_origin, value);
+
+    this->m_index = index;
+    this->owner = owner;
+}
+
 void Value::dump(PrintStream& out) const
 {
     bool isConstant = false;
 
     switch (opcode()) {
@@ -202,15 +184,10 @@
 
     if (isConstant)
         out.print(")");
 }
 
-Value* Value::cloneImpl() const
-{
-    return new Value(*this);
-}
-
 void Value::dumpChildren(CommaPrinter& comma, PrintStream& out) const
 {
     for (Value* child : children())
         out.print(comma, pointerDump(child));
 }
@@ -455,22 +432,22 @@
     return MixedTriState;
 }
 
 Value* Value::invertedCompare(Procedure& proc) const
 {
-    if (!numChildren())
+    if (numChildren() != 2)
         return nullptr;
     if (Optional<Opcode> invertedOpcode = B3::invertedCompare(opcode(), child(0)->type())) {
         ASSERT(!kind().hasExtraBits());
-        return proc.add<Value>(*invertedOpcode, type(), origin(), children());
+        return proc.add<Value>(*invertedOpcode, type(), origin(), child(0), child(1));
     }
     return nullptr;
 }
 
 bool Value::isRounded() const
 {
-    ASSERT(isFloat(type()));
+    ASSERT(type().isFloat());
     switch (opcode()) {
     case Floor:
     case Ceil:
     case IToD:
     case IToF:
@@ -493,10 +470,11 @@
 
 bool Value::returnsBool() const
 {
     if (type() != Int32)
         return false;
+
     switch (opcode()) {
     case Const32:
         return asInt32() == 0 || asInt32() == 1;
     case BitAnd:
         return child(0)->returnsBool() || child(1)->returnsBool();
@@ -598,10 +576,11 @@
     case AboveEqual:
     case BelowEqual:
     case EqualOrUnordered:
     case Select:
     case Depend:
+    case Extract:
         break;
     case Div:
     case UDiv:
     case Mod:
     case UMod:
@@ -881,20 +860,21 @@
         return Double;
     case DoubleToFloat:
     case IToF:
         return Float;
     case BitwiseCast:
-        switch (firstChild->type()) {
+        switch (firstChild->type().kind()) {
         case Int64:
             return Double;
         case Double:
             return Int64;
         case Int32:
             return Float;
         case Float:
             return Int32;
         case Void:
+        case Tuple:
             ASSERT_NOT_REACHED();
         }
         return Void;
     case Nop:
     case Jump:
