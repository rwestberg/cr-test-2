diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/yarr/generateYarrUnicodePropertyTables.py b/modules/javafx.web/src/main/native/Source/JavaScriptCore/yarr/generateYarrUnicodePropertyTables.py
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/yarr/generateYarrUnicodePropertyTables.py
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/yarr/generateYarrUnicodePropertyTables.py
@@ -33,11 +33,11 @@
 import os
 import re
 from hasher import stringHash
 
 header = """/*
-* Copyright (C) 2017-2018 Apple Inc. All rights reserved.
+* Copyright (C) 2017-2019 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
@@ -223,10 +223,11 @@
 
     def __init__(self, name):
         self.name = name
         self.aliases = []
         self.index = len(PropertyData.allPropertyData)
+        self.hasBMPCharacters = False
         self.hasNonBMPCharacters = False
         self.matches = []
         self.ranges = []
         self.unicodeMatches = []
         self.unicodeRanges = []
@@ -247,11 +248,13 @@
 
     def getCreateFuncName(self):
         return "createCharacterClass{}".format(self.index)
 
     def addMatch(self, codePoint):
-        if codePoint > MaxBMP:
+        if codePoint <= MaxBMP:
+            self.hasBMPCharacters = True
+        else:
             self.hasNonBMPCharacters = True
         if codePoint <= lastASCIICodePoint:
             if (len(self.matches) and self.matches[-1] > codePoint) or (len(self.ranges) and self.ranges[-1][1] > codePoint):
                 self.addMatchUnordered(codePoint)
                 return
@@ -279,10 +282,12 @@
                 self.unicodeRanges.append((priorRange[0], codePoint))
             else:
                 self.unicodeMatches.append(codePoint)
 
     def addRange(self, lowCodePoint, highCodePoint):
+        if lowCodePoint <= MaxBMP:
+            self.hasBMPCharacters = True
         if highCodePoint > MaxBMP:
             self.hasNonBMPCharacters = True
         if highCodePoint <= lastASCIICodePoint:
             if (len(self.matches) and self.matches[-1] > lowCodePoint) or (len(self.ranges) and self.ranges[-1][1] > lowCodePoint):
                 self.addRangeUnordered(lowCodePoint, highCodePoint)
@@ -522,11 +527,11 @@
         file.write("}")
 
     def dump(self, file, commaAfter):
         file.write("static std::unique_ptr<CharacterClass> {}()\n{{\n".format(self.getCreateFuncName()))
         file.write("    // Name = {}, number of codePoints: {}\n".format(self.name, self.codePointCount))
-        file.write("    auto characterClass = std::make_unique<CharacterClass>(\n")
+        file.write("    auto characterClass = makeUnique<CharacterClass>(\n")
         file.write("        std::initializer_list<UChar32>(")
         self.dumpMatchData(file, 8, self.matches, lambda file, match: (file.write("{0:0=#4x}".format(match))))
         file.write("),\n")
         file.write("        std::initializer_list<CharacterRange>(")
         self.dumpMatchData(file, 4, self.ranges, lambda file, range: (file.write("{{{0:0=#4x}, {1:0=#4x}}}".format(range[0], range[1]))))
@@ -534,13 +539,13 @@
         file.write("        std::initializer_list<UChar32>(")
         self.dumpMatchData(file, 8, self.unicodeMatches, lambda file, match: (file.write("{0:0=#6x}".format(match))))
         file.write("),\n")
         file.write("        std::initializer_list<CharacterRange>(")
         self.dumpMatchData(file, 4, self.unicodeRanges, lambda file, range: (file.write("{{{0:0=#6x}, {1:0=#6x}}}".format(range[0], range[1]))))
-        file.write("));\n")
+        file.write("),\n")
 
-        file.write("    characterClass->m_hasNonBMPCharacters = {};\n".format(("false", "true")[self.hasNonBMPCharacters]))
+        file.write("        CharacterClassWidths::{});\n".format(("Unknown", "HasBMPChars", "HasNonBMPChars", "HasBothBMPAndNonBMP")[int(self.hasNonBMPCharacters) * 2 + int(self.hasBMPCharacters)]))
         file.write("    return characterClass;\n}\n\n")
 
     @classmethod
     def dumpAll(cls, file):
         for propertyData in cls.allPropertyData:
