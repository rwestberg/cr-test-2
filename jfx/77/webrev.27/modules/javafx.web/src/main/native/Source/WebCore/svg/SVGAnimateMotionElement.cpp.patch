diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimateMotionElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimateMotionElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimateMotionElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimateMotionElement.cpp
@@ -55,11 +55,11 @@
 Ref<SVGAnimateMotionElement> SVGAnimateMotionElement::create(const QualifiedName& tagName, Document& document)
 {
     return adoptRef(*new SVGAnimateMotionElement(tagName, document));
 }
 
-bool SVGAnimateMotionElement::hasValidAttributeType()
+bool SVGAnimateMotionElement::hasValidAttributeType() const
 {
     auto targetElement = makeRefPtr(this->targetElement());
     if (!targetElement)
         return false;
 
@@ -88,17 +88,17 @@
         )
         return true;
     return false;
 }
 
-bool SVGAnimateMotionElement::hasValidAttributeName()
+bool SVGAnimateMotionElement::hasValidAttributeName() const
 {
     // AnimateMotion does not use attributeName so it is always valid.
     return true;
 }
 
-void SVGAnimateMotionElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void SVGAnimateMotionElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == SVGNames::pathAttr) {
         m_path = buildPathFromString(value);
         updateAnimationPath();
         return;
@@ -107,13 +107,13 @@
     SVGAnimationElement::parseAttribute(name, value);
 }
 
 SVGAnimateMotionElement::RotateMode SVGAnimateMotionElement::rotateMode() const
 {
-    static NeverDestroyed<const AtomicString> autoVal("auto", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<const AtomicString> autoReverse("auto-reverse", AtomicString::ConstructFromLiteral);
-    const AtomicString& rotate = getAttribute(SVGNames::rotateAttr);
+    static NeverDestroyed<const AtomString> autoVal("auto", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> autoReverse("auto-reverse", AtomString::ConstructFromLiteral);
+    const AtomString& rotate = getAttribute(SVGNames::rotateAttr);
     if (rotate == autoVal)
         return RotateAuto;
     if (rotate == autoReverse)
         return RotateAutoReverse;
     return RotateAngle;
@@ -174,11 +174,11 @@
 }
 
 bool SVGAnimateMotionElement::calculateFromAndByValues(const String& fromString, const String& byString)
 {
     m_hasToPointAtEndOfDuration = false;
-    if (animationMode() == ByAnimation && !isAdditive())
+    if (animationMode() == AnimationMode::By && !isAdditive())
         return false;
     parsePoint(fromString, m_fromPoint);
     FloatPoint byPoint;
     parsePoint(byString, byPoint);
     m_toPoint = FloatPoint(m_fromPoint.x() + byPoint.x(), m_fromPoint.y() + byPoint.y());
@@ -220,11 +220,11 @@
         targetRenderer->setNeedsTransformUpdate();
 
     if (!isAdditive())
         transform->makeIdentity();
 
-    if (animationMode() != PathAnimation) {
+    if (animationMode() != AnimationMode::Path) {
         FloatPoint toPointAtEndOfDuration = m_toPoint;
         if (isAccumulated() && repeatCount && m_hasToPointAtEndOfDuration)
             toPointAtEndOfDuration = m_toPointAtEndOfDuration;
 
         float animatedX = 0;
@@ -271,26 +271,26 @@
             RenderSVGResource::markForLayoutAndParentResourceInvalidation(*renderer);
         }
     }
 }
 
-float SVGAnimateMotionElement::calculateDistance(const String& fromString, const String& toString)
+Optional<float> SVGAnimateMotionElement::calculateDistance(const String& fromString, const String& toString)
 {
     FloatPoint from;
     FloatPoint to;
     if (!parsePoint(fromString, from))
-        return -1;
+        return { };
     if (!parsePoint(toString, to))
-        return -1;
+        return { };
     FloatSize diff = to - from;
     return sqrtf(diff.width() * diff.width() + diff.height() * diff.height());
 }
 
 void SVGAnimateMotionElement::updateAnimationMode()
 {
     if (!m_animationPath.isEmpty())
-        setAnimationMode(PathAnimation);
+        setAnimationMode(AnimationMode::Path);
     else
         SVGAnimationElement::updateAnimationMode();
 }
 
 }
