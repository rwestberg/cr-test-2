diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/airplay/WebKitPlaybackTargetAvailabilityEvent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/airplay/WebKitPlaybackTargetAvailabilityEvent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/airplay/WebKitPlaybackTargetAvailabilityEvent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/airplay/WebKitPlaybackTargetAvailabilityEvent.cpp
@@ -30,25 +30,25 @@
 
 #if ENABLE(WIRELESS_PLAYBACK_TARGET)
 
 namespace WebCore {
 
-static const AtomicString& stringForPlaybackTargetAvailability(bool available)
+static const AtomString& stringForPlaybackTargetAvailability(bool available)
 {
-    static NeverDestroyed<AtomicString> availableString("available", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<AtomicString> notAvailableString("not-available", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> availableString("available", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> notAvailableString("not-available", AtomString::ConstructFromLiteral);
 
     return available ? availableString : notAvailableString;
 }
 
-WebKitPlaybackTargetAvailabilityEvent::WebKitPlaybackTargetAvailabilityEvent(const AtomicString& eventType, bool available)
+WebKitPlaybackTargetAvailabilityEvent::WebKitPlaybackTargetAvailabilityEvent(const AtomString& eventType, bool available)
     : Event(eventType, CanBubble::No, IsCancelable::No)
     , m_availability(stringForPlaybackTargetAvailability(available))
 {
 }
 
-WebKitPlaybackTargetAvailabilityEvent::WebKitPlaybackTargetAvailabilityEvent(const AtomicString& eventType, const Init& initializer, IsTrusted isTrusted)
+WebKitPlaybackTargetAvailabilityEvent::WebKitPlaybackTargetAvailabilityEvent(const AtomString& eventType, const Init& initializer, IsTrusted isTrusted)
     : Event(eventType, initializer, isTrusted)
     , m_availability(initializer.availability)
 {
 }
 
