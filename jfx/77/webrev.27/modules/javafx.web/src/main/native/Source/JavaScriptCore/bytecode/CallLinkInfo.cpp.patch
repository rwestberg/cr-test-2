diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CallLinkInfo.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CallLinkInfo.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CallLinkInfo.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CallLinkInfo.cpp
@@ -29,11 +29,10 @@
 #include "CallFrameShuffleData.h"
 #include "DFGOperations.h"
 #include "DFGThunks.h"
 #include "FunctionCodeBlock.h"
 #include "JSCInlines.h"
-#include "MacroAssembler.h"
 #include "Opcode.h"
 #include "Repatch.h"
 #include <wtf/ListDump.h>
 
 #if ENABLE(JIT)
@@ -59,15 +58,12 @@
     : m_hasSeenShouldRepatch(false)
     , m_hasSeenClosure(false)
     , m_clearedByGC(false)
     , m_clearedByVirtual(false)
     , m_allowStubs(true)
-    , m_isLinked(false)
+    , m_clearedByJettison(false)
     , m_callType(None)
-    , m_calleeGPR(255)
-    , m_maxNumArguments(0)
-    , m_slowPathCount(0)
 {
 }
 
 CallLinkInfo::~CallLinkInfo()
 {
@@ -99,11 +95,11 @@
 }
 
 CodeLocationNearCall<JSInternalPtrTag> CallLinkInfo::callReturnLocation()
 {
     RELEASE_ASSERT(!isDirect());
-    return CodeLocationNearCall<JSInternalPtrTag>(m_callReturnLocationOrPatchableJump, Regular);
+    return CodeLocationNearCall<JSInternalPtrTag>(m_callReturnLocationOrPatchableJump, NearCallMode::Regular);
 }
 
 CodeLocationJump<JSInternalPtrTag> CallLinkInfo::patchableJump()
 {
     RELEASE_ASSERT(callType() == DirectTailCall);
@@ -123,21 +119,17 @@
 }
 
 void CallLinkInfo::setCallee(VM& vm, JSCell* owner, JSObject* callee)
 {
     RELEASE_ASSERT(!isDirect());
-    MacroAssembler::repatchPointer(hotPathBegin(), callee);
     m_calleeOrCodeBlock.set(vm, owner, callee);
-    m_isLinked = true;
 }
 
 void CallLinkInfo::clearCallee()
 {
     RELEASE_ASSERT(!isDirect());
-    MacroAssembler::repatchPointer(hotPathBegin(), nullptr);
     m_calleeOrCodeBlock.clear();
-    m_isLinked = false;
 }
 
 JSObject* CallLinkInfo::callee()
 {
     RELEASE_ASSERT(!isDirect());
@@ -146,18 +138,16 @@
 
 void CallLinkInfo::setCodeBlock(VM& vm, JSCell* owner, FunctionCodeBlock* codeBlock)
 {
     RELEASE_ASSERT(isDirect());
     m_calleeOrCodeBlock.setMayBeNull(vm, owner, codeBlock);
-    m_isLinked = true;
 }
 
 void CallLinkInfo::clearCodeBlock()
 {
     RELEASE_ASSERT(isDirect());
     m_calleeOrCodeBlock.clear();
-    m_isLinked = false;
 }
 
 FunctionCodeBlock* CallLinkInfo::codeBlock()
 {
     RELEASE_ASSERT(isDirect());
@@ -208,11 +198,11 @@
 }
 
 void CallLinkInfo::visitWeak(VM& vm)
 {
     auto handleSpecificCallee = [&] (JSFunction* callee) {
-        if (Heap::isMarked(callee->executable()))
+        if (vm.heap.isMarked(callee->executable()))
             m_hasSeenClosure = true;
         else
             m_clearedByGC = true;
     };
 
@@ -226,11 +216,11 @@
                         ".\n");
                 }
                 unlink(vm);
                 m_clearedByGC = true;
             }
-        } else if (!Heap::isMarked(m_calleeOrCodeBlock.get())) {
+        } else if (!vm.heap.isMarked(m_calleeOrCodeBlock.get())) {
             if (isDirect()) {
                 if (Options::verboseOSR()) {
                     dataLog(
                         "Clearing call to ", RawPointer(codeBlock()), " (",
                         pointerDump(codeBlock()), ").\n");
@@ -250,11 +240,11 @@
                         dataLog("Clearing call to ", RawPointer(callee()), ".\n");
                     m_clearedByGC = true;
                 }
             }
             unlink(vm);
-        } else if (isDirect() && !Heap::isMarked(m_lastSeenCalleeOrExecutable.get())) {
+        } else if (isDirect() && !vm.heap.isMarked(m_lastSeenCalleeOrExecutable.get())) {
             if (Options::verboseOSR()) {
                 dataLog(
                     "Clearing call to ", RawPointer(executable()),
                     " because the executable is dead.\n");
             }
@@ -262,22 +252,22 @@
             // We should only get here once the owning CodeBlock is dying, since the executable must
             // already be in the owner's weak references.
             m_lastSeenCalleeOrExecutable.clear();
         }
     }
-    if (!isDirect() && haveLastSeenCallee() && !Heap::isMarked(lastSeenCallee())) {
+    if (!isDirect() && haveLastSeenCallee() && !vm.heap.isMarked(lastSeenCallee())) {
         if (lastSeenCallee()->type() == JSFunctionType)
             handleSpecificCallee(jsCast<JSFunction*>(lastSeenCallee()));
         else
             m_clearedByGC = true;
         clearLastSeenCallee();
     }
 }
 
 void CallLinkInfo::setFrameShuffleData(const CallFrameShuffleData& shuffleData)
 {
-    m_frameShuffleData = std::make_unique<CallFrameShuffleData>(shuffleData);
+    m_frameShuffleData = makeUnique<CallFrameShuffleData>(shuffleData);
 }
 
 } // namespace JSC
 #endif // ENABLE(JIT)
 
