diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/EventListenerMap.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/EventListenerMap.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/EventListenerMap.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/EventListenerMap.cpp
@@ -51,11 +51,11 @@
 
 EventListenerMap::EventListenerMap()
 {
 }
 
-bool EventListenerMap::containsCapturing(const AtomicString& eventType) const
+bool EventListenerMap::containsCapturing(const AtomString& eventType) const
 {
     auto* listeners = find(eventType);
     if (!listeners)
         return false;
 
@@ -64,11 +64,11 @@
             return true;
     }
     return false;
 }
 
-bool EventListenerMap::containsActive(const AtomicString& eventType) const
+bool EventListenerMap::containsActive(const AtomString& eventType) const
 {
     auto* listeners = find(eventType);
     if (!listeners)
         return false;
 
@@ -91,13 +91,13 @@
     }
 
     m_entries.clear();
 }
 
-Vector<AtomicString> EventListenerMap::eventTypes() const
+Vector<AtomString> EventListenerMap::eventTypes() const
 {
-    Vector<AtomicString> types;
+    Vector<AtomString> types;
     types.reserveInitialCapacity(m_entries.size());
 
     for (auto& entry : m_entries)
         types.uncheckedAppend(entry.first);
 
@@ -112,11 +112,11 @@
             return i;
     }
     return notFound;
 }
 
-void EventListenerMap::replace(const AtomicString& eventType, EventListener& oldListener, Ref<EventListener>&& newListener, const RegisteredEventListener::Options& options)
+void EventListenerMap::replace(const AtomString& eventType, EventListener& oldListener, Ref<EventListener>&& newListener, const RegisteredEventListener::Options& options)
 {
     auto locker = holdLock(m_lock);
 
     assertNoActiveIterators();
 
@@ -127,11 +127,11 @@
     auto& registeredListener = listeners->at(index);
     registeredListener->markAsRemoved();
     registeredListener = RegisteredEventListener::create(WTFMove(newListener), options);
 }
 
-bool EventListenerMap::add(const AtomicString& eventType, Ref<EventListener>&& listener, const RegisteredEventListener::Options& options)
+bool EventListenerMap::add(const AtomString& eventType, Ref<EventListener>&& listener, const RegisteredEventListener::Options& options)
 {
     auto locker = holdLock(m_lock);
 
     assertNoActiveIterators();
 
@@ -140,11 +140,11 @@
             return false; // Duplicate listener.
         listeners->append(RegisteredEventListener::create(WTFMove(listener), options));
         return true;
     }
 
-    auto listeners = std::make_unique<EventListenerVector>();
+    auto listeners = makeUnique<EventListenerVector>();
     listeners->uncheckedAppend(RegisteredEventListener::create(WTFMove(listener), options));
     m_entries.append({ eventType, WTFMove(listeners) });
     return true;
 }
 
@@ -157,11 +157,11 @@
     listeners[indexOfRemovedListener]->markAsRemoved();
     listeners.remove(indexOfRemovedListener);
     return true;
 }
 
-bool EventListenerMap::remove(const AtomicString& eventType, EventListener& listener, bool useCapture)
+bool EventListenerMap::remove(const AtomString& eventType, EventListener& listener, bool useCapture)
 {
     auto locker = holdLock(m_lock);
 
     assertNoActiveIterators();
 
@@ -175,11 +175,11 @@
     }
 
     return false;
 }
 
-EventListenerVector* EventListenerMap::find(const AtomicString& eventType) const
+EventListenerVector* EventListenerMap::find(const AtomString& eventType) const
 {
     for (auto& entry : m_entries) {
         if (entry.first == eventType)
             return entry.second.get();
     }
@@ -197,11 +197,11 @@
         return false;
     });
     ASSERT_UNUSED(foundListener, foundListener);
 }
 
-void EventListenerMap::removeFirstEventListenerCreatedFromMarkup(const AtomicString& eventType)
+void EventListenerMap::removeFirstEventListenerCreatedFromMarkup(const AtomString& eventType)
 {
     auto locker = holdLock(m_lock);
 
     assertNoActiveIterators();
 
@@ -213,11 +213,11 @@
             return;
         }
     }
 }
 
-static void copyListenersNotCreatedFromMarkupToTarget(const AtomicString& eventType, EventListenerVector& listenerVector, EventTarget* target)
+static void copyListenersNotCreatedFromMarkupToTarget(const AtomString& eventType, EventListenerVector& listenerVector, EventTarget* target)
 {
     for (auto& registeredListener : listenerVector) {
         // Event listeners created from markup have already been transfered to the shadow tree during cloning.
         if (registeredListener->callback().wasCreatedFromMarkup())
             continue;
