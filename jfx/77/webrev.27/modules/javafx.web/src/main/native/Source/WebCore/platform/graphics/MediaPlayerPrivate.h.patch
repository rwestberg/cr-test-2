diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/MediaPlayerPrivate.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/MediaPlayerPrivate.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/MediaPlayerPrivate.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/MediaPlayerPrivate.h
@@ -66,11 +66,11 @@
 #endif
     virtual long platformErrorCode() const { return 0; }
 
     virtual void play() = 0;
     virtual void pause() = 0;
-    virtual void setShouldBufferData(bool) { }
+    virtual void setBufferingPolicy(MediaPlayer::BufferingPolicy) { }
 
     virtual bool supportsPictureInPicture() const { return false; }
     virtual bool supportsFullscreen() const { return false; }
     virtual bool supportsScanning() const { return false; }
     virtual bool requiresImmediateCompositing() const { return false; }
@@ -116,11 +116,10 @@
     virtual void setVolumeDouble(double volume) { return setVolume(volume); }
 #if PLATFORM(IOS_FAMILY) || USE(GSTREAMER)
     virtual float volume() const { return 1; }
 #endif
 
-    virtual bool supportsMuting() const { return false; }
     virtual void setMuted(bool) { }
 
     virtual bool hasClosedCaptions() const { return false; }
     virtual void setClosedCaptionsVisible(bool) { }
 
@@ -128,11 +127,11 @@
     virtual double minFastReverseRate() const { return -std::numeric_limits<double>::infinity(); }
 
     virtual MediaPlayer::NetworkState networkState() const = 0;
     virtual MediaPlayer::ReadyState readyState() const = 0;
 
-    virtual std::unique_ptr<PlatformTimeRanges> seekable() const { return maxMediaTimeSeekable() == MediaTime::zeroTime() ? std::make_unique<PlatformTimeRanges>() : std::make_unique<PlatformTimeRanges>(minMediaTimeSeekable(), maxMediaTimeSeekable()); }
+    virtual std::unique_ptr<PlatformTimeRanges> seekable() const { return maxMediaTimeSeekable() == MediaTime::zeroTime() ? makeUnique<PlatformTimeRanges>() : makeUnique<PlatformTimeRanges>(minMediaTimeSeekable(), maxMediaTimeSeekable()); }
     virtual float maxTimeSeekable() const { return 0; }
     virtual MediaTime maxMediaTimeSeekable() const { return MediaTime::createWithDouble(maxTimeSeekable()); }
     virtual double minTimeSeekable() const { return 0; }
     virtual MediaTime minMediaTimeSeekable() const { return MediaTime::createWithDouble(minTimeSeekable()); }
     virtual std::unique_ptr<PlatformTimeRanges> buffered() const = 0;
