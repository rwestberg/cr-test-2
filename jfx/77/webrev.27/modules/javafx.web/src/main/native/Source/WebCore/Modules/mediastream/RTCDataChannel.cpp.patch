diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCDataChannel.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCDataChannel.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCDataChannel.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCDataChannel.cpp
@@ -32,25 +32,29 @@
 #include "Event.h"
 #include "EventNames.h"
 #include "MessageEvent.h"
 #include "RTCDataChannelHandler.h"
 #include "ScriptExecutionContext.h"
+#include "SharedBuffer.h"
 #include <JavaScriptCore/ArrayBuffer.h>
 #include <JavaScriptCore/ArrayBufferView.h>
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/NeverDestroyed.h>
 
 namespace WebCore {
 
-static const AtomicString& blobKeyword()
+WTF_MAKE_ISO_ALLOCATED_IMPL(RTCDataChannel);
+
+static const AtomString& blobKeyword()
 {
-    static NeverDestroyed<AtomicString> blob("blob", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> blob("blob", AtomString::ConstructFromLiteral);
     return blob;
 }
 
-static const AtomicString& arraybufferKeyword()
+static const AtomString& arraybufferKeyword()
 {
-    static NeverDestroyed<AtomicString> arraybuffer("arraybuffer", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> arraybuffer("arraybuffer", AtomString::ConstructFromLiteral);
     return arraybuffer;
 }
 
 Ref<RTCDataChannel> RTCDataChannel::create(ScriptExecutionContext& context, std::unique_ptr<RTCDataChannelHandler>&& handler, String&& label, RTCDataChannelInit&& options)
 {
@@ -77,11 +81,11 @@
     if (m_stopped)
         return 0;
     return m_handler->bufferedAmount();
 }
 
-const AtomicString& RTCDataChannel::binaryType() const
+const AtomString& RTCDataChannel::binaryType() const
 {
     switch (m_binaryType) {
     case BinaryType::Blob:
         return blobKeyword();
     case BinaryType::ArrayBuffer:
@@ -90,14 +94,16 @@
 
     ASSERT_NOT_REACHED();
     return emptyAtom();
 }
 
-ExceptionOr<void> RTCDataChannel::setBinaryType(const AtomicString& binaryType)
+ExceptionOr<void> RTCDataChannel::setBinaryType(const AtomString& binaryType)
 {
-    if (binaryType == blobKeyword())
-        return Exception { NotSupportedError };
+    if (binaryType == blobKeyword()) {
+        m_binaryType = BinaryType::Blob;
+        return { };
+    }
     if (binaryType == arraybufferKeyword()) {
         m_binaryType = BinaryType::ArrayBuffer;
         return { };
     }
     return Exception { TypeMismatchError };
@@ -192,16 +198,15 @@
 void RTCDataChannel::didReceiveRawData(const char* data, size_t dataLength)
 {
     if (m_stopped)
         return;
 
-    if (m_binaryType == BinaryType::Blob) {
-        // FIXME: Implement.
+    switch (m_binaryType) {
+    case BinaryType::Blob:
+        scheduleDispatchEvent(MessageEvent::create(Blob::create(scriptExecutionContext()->sessionID(), SharedBuffer::create(data, dataLength), emptyString()), { }));
         return;
-    }
-
-    if (m_binaryType == BinaryType::ArrayBuffer) {
+    case BinaryType::ArrayBuffer:
         scheduleDispatchEvent(MessageEvent::create(ArrayBuffer::create(data, dataLength)));
         return;
     }
     ASSERT_NOT_REACHED();
 }
