diff a/modules/javafx.web/src/main/native/Source/WebCore/editing/MarkupAccumulator.h b/modules/javafx.web/src/main/native/Source/WebCore/editing/MarkupAccumulator.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/editing/MarkupAccumulator.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/editing/MarkupAccumulator.h
@@ -36,11 +36,11 @@
 class DocumentType;
 class Element;
 class Node;
 class Range;
 
-typedef HashMap<AtomicString, AtomicStringImpl*> Namespaces;
+typedef HashMap<AtomString, AtomStringImpl*> Namespaces;
 
 enum EntityMask {
     EntityAmp = 0x0001,
     EntityLt = 0x0002,
     EntityGt = 0x0004,
@@ -92,11 +92,11 @@
 
     void appendNonElementNode(StringBuilder&, const Node&, Namespaces*);
     void appendEndMarkup(StringBuilder&, const Element&);
 
     void appendAttributeValue(StringBuilder&, const String&, bool isSerializingHTML);
-    void appendNamespace(StringBuilder&, const AtomicString& prefix, const AtomicString& namespaceURI, Namespaces&, bool allowEmptyDefaultNS = false);
+    void appendNamespace(StringBuilder&, const AtomString& prefix, const AtomString& namespaceURI, Namespaces&, bool allowEmptyDefaultNS = false);
     void appendXMLDeclaration(StringBuilder&, const Document&);
     void appendDocumentType(StringBuilder&, const DocumentType&);
     void appendProcessingInstruction(StringBuilder&, const String& target, const String& data);
     void appendAttribute(StringBuilder&, const Element&, const Attribute&, Namespaces*);
     void appendCDATASection(StringBuilder&, const String&);
@@ -111,10 +111,11 @@
     String resolveURLIfNeeded(const Element&, const String&) const;
     void appendQuotedURLAttributeValue(StringBuilder&, const Element&, const Attribute&);
     void serializeNodesWithNamespaces(Node& targetNode, SerializedNodes, const Namespaces*, Vector<QualifiedName>* tagNamesToSkip);
     bool inXMLFragmentSerialization() const { return m_serializationSyntax == SerializationSyntax::XML; }
     void generateUniquePrefix(QualifiedName&, const Namespaces&);
+    QualifiedName xmlAttributeSerialization(const Attribute&, Namespaces*);
 
     StringBuilder m_markup;
     const ResolveURLs m_resolveURLs;
     SerializationSyntax m_serializationSyntax;
     unsigned m_prefixLevel { 0 };
