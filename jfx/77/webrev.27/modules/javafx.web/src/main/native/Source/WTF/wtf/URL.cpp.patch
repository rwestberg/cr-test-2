diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/URL.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/URL.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/URL.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/URL.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2004, 2007-2008, 2011-2013, 2015-2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2004-2019 Apple Inc. All rights reserved.
  * Copyright (C) 2012 Research In Motion Limited. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
@@ -38,15 +38,10 @@
 #include <wtf/text/StringBuilder.h>
 #include <wtf/text/StringConcatenateNumbers.h>
 #include <wtf/text/StringHash.h>
 #include <wtf/text/TextStream.h>
 
-// FIXME: This file makes too much use of the + operator on String.
-// We either have to optimize that operator so it doesn't involve
-// so many allocations, or change this to use StringBuffer instead.
-
-
 namespace WTF {
 
 typedef Vector<char, 512> CharBuffer;
 typedef Vector<UChar, 512> UCharBuffer;
 
@@ -317,11 +312,11 @@
     return defaultPortForProtocol(protocol) == port;
 }
 
 bool URL::protocolIs(const char* protocol) const
 {
-    assertProtocolIsGood(StringView(reinterpret_cast<const LChar*>(protocol), strlen(protocol)));
+    assertProtocolIsGood(StringView { protocol });
 
     // JavaScript URLs are "valid" and should be executed even if URL decides they are invalid.
     // The free function protocolIsJavaScript() should be used instead.
     ASSERT(!equalLettersIgnoringASCIICase(StringView(protocol), "javascript"));
 
@@ -773,11 +768,11 @@
 
 template<typename StringClass>
 bool protocolIsInternal(const StringClass& url, const char* protocol)
 {
     // Do the comparison without making a new string object.
-    assertProtocolIsGood(StringView(reinterpret_cast<const LChar*>(protocol), strlen(protocol)));
+    assertProtocolIsGood(StringView { protocol });
     bool isLeading = true;
     for (unsigned i = 0, j = 0; url[i]; ++i) {
         // Skip leading whitespace and control characters.
         if (isLeading && shouldTrimFromURL(url[i]))
             continue;
