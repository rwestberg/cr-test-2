diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/DebugHeap.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/DebugHeap.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/DebugHeap.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/DebugHeap.h
@@ -25,21 +25,21 @@
 
 #pragma once
 
 #include "Environment.h"
 #include "Mutex.h"
-#include "PerProcess.h"
+#include "StaticPerProcess.h"
 #include <mutex>
 #include <unordered_map>
 
 #if BOS(DARWIN)
 #include <malloc/malloc.h>
 #endif
 
 namespace bmalloc {
 
-class DebugHeap {
+class DebugHeap : private StaticPerProcess<DebugHeap> {
 public:
     DebugHeap(std::lock_guard<Mutex>&);
 
     void* malloc(size_t, bool crashOnFailure);
     void* memalign(size_t alignment, size_t, bool crashOnFailure);
@@ -47,30 +47,33 @@
     void free(void*);
 
     void* memalignLarge(size_t alignment, size_t);
     void freeLarge(void* base);
 
+    void scavenge();
+    void dump();
+
     static DebugHeap* tryGet();
 
 private:
 #if BOS(DARWIN)
     malloc_zone_t* m_zone;
 #endif
 
     // This is the debug heap. We can use whatever data structures we like. It doesn't matter.
     size_t m_pageSize { 0 };
-    std::mutex m_lock;
     std::unordered_map<void*, size_t> m_sizeMap;
 };
+DECLARE_STATIC_PER_PROCESS_STORAGE(DebugHeap);
 
 extern BEXPORT DebugHeap* debugHeapCache;
 BINLINE DebugHeap* DebugHeap::tryGet()
 {
     if (debugHeapCache)
         return debugHeapCache;
-    if (PerProcess<Environment>::get()->isDebugHeapEnabled()) {
-        debugHeapCache = PerProcess<DebugHeap>::get();
+    if (Environment::get()->isDebugHeapEnabled()) {
+        debugHeapCache = DebugHeap::get();
         return debugHeapCache;
     }
     return nullptr;
 }
 
