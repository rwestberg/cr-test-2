diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/PeerConnectionBackend.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/PeerConnectionBackend.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/PeerConnectionBackend.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/PeerConnectionBackend.h
@@ -167,10 +167,13 @@
     };
     static void generateCertificate(Document&, const CertificateInformation&, DOMPromiseDeferred<IDLInterface<RTCCertificate>>&&);
 
     virtual void collectTransceivers() { };
 
+    ScriptExecutionContext* context() const;
+    RTCRtpTransceiver* transceiverFromSender(const RTCRtpSender&);
+
 protected:
     void fireICECandidateEvent(RefPtr<RTCIceCandidate>&&, String&& url);
     void doneGatheringCandidates();
 
     void updateSignalingState(RTCSignalingState);
@@ -190,10 +193,18 @@
     void addIceCandidateSucceeded();
     void addIceCandidateFailed(Exception&&);
 
     String filterSDP(String&&) const;
 
+    struct PendingTrackEvent {
+        Ref<RTCRtpReceiver> receiver;
+        Ref<MediaStreamTrack> track;
+        Vector<RefPtr<MediaStream>> streams;
+        RefPtr<RTCRtpTransceiver> transceiver;
+    };
+    void addPendingTrackEvent(PendingTrackEvent&&);
+
 private:
     virtual void doCreateOffer(RTCOfferOptions&&) = 0;
     virtual void doCreateAnswer(RTCAnswerOptions&&) = 0;
     virtual void doSetLocalDescription(RTCSessionDescription&) = 0;
     virtual void doSetRemoteDescription(RTCSessionDescription&) = 0;
@@ -208,11 +219,10 @@
 
 private:
     Optional<PeerConnection::SessionDescriptionPromise> m_offerAnswerPromise;
     Optional<DOMPromiseDeferred<void>> m_setDescriptionPromise;
     Optional<DOMPromiseDeferred<void>> m_addIceCandidatePromise;
-    Optional<DOMPromiseDeferred<void>> m_endOfIceCandidatePromise;
 
     bool m_shouldFilterICECandidates { true };
     struct PendingICECandidate {
         // Fields described in https://www.w3.org/TR/webrtc/#idl-def-rtcicecandidateinit.
         String sdp;
@@ -220,22 +230,19 @@
         unsigned short sdpMLineIndex;
         String serverURL;
     };
     Vector<PendingICECandidate> m_pendingICECandidates;
 
+    Vector<PendingTrackEvent> m_pendingTrackEvents;
+
 #if !RELEASE_LOG_DISABLED
     Ref<const Logger> m_logger;
     const void* m_logIdentifier;
 #endif
     bool m_negotiationNeeded { false };
     bool m_finishedGatheringCandidates { false };
     uint64_t m_waitingForMDNSRegistration { 0 };
-
-    bool m_finishedReceivingCandidates { false };
-    uint64_t m_waitingForMDNSResolution { 0 };
-
-    HashMap<String, String> m_mdnsMapping;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(WEB_RTC)
