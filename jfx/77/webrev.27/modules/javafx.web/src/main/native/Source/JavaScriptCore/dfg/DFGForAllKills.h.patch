diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGForAllKills.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGForAllKills.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGForAllKills.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGForAllKills.h
@@ -66,16 +66,17 @@
     if (before == after)
         return;
 
     // It's easier to do this if the inline call frames are the same. This is way faster than the
     // other loop, below.
-    if (before.inlineCallFrame == after.inlineCallFrame) {
-        int stackOffset = before.inlineCallFrame ? before.inlineCallFrame->stackOffset : 0;
-        CodeBlock* codeBlock = graph.baselineCodeBlockFor(before.inlineCallFrame);
+    auto* beforeInlineCallFrame = before.inlineCallFrame();
+    if (beforeInlineCallFrame == after.inlineCallFrame()) {
+        int stackOffset = beforeInlineCallFrame ? beforeInlineCallFrame->stackOffset : 0;
+        CodeBlock* codeBlock = graph.baselineCodeBlockFor(beforeInlineCallFrame);
         FullBytecodeLiveness& fullLiveness = graph.livenessFor(codeBlock);
-        const FastBitVector& liveBefore = fullLiveness.getLiveness(before.bytecodeIndex);
-        const FastBitVector& liveAfter = fullLiveness.getLiveness(after.bytecodeIndex);
+        const FastBitVector& liveBefore = fullLiveness.getLiveness(before.bytecodeIndex());
+        const FastBitVector& liveAfter = fullLiveness.getLiveness(after.bytecodeIndex());
 
         (liveBefore & ~liveAfter).forEachSetBit(
             [&] (size_t relativeLocal) {
                 functor(virtualRegisterForLocal(relativeLocal) + stackOffset);
             });
