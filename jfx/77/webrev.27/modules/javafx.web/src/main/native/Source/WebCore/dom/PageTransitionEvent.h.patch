diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/PageTransitionEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/PageTransitionEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/PageTransitionEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/PageTransitionEvent.h
@@ -29,20 +29,20 @@
 
 namespace WebCore {
 
 class PageTransitionEvent final : public Event {
 public:
-    static Ref<PageTransitionEvent> create(const AtomicString& type, bool persisted)
+    static Ref<PageTransitionEvent> create(const AtomString& type, bool persisted)
     {
         return adoptRef(*new PageTransitionEvent(type, persisted));
     }
 
     struct Init : EventInit {
         bool persisted { false };
     };
 
-    static Ref<PageTransitionEvent> create(const AtomicString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
+    static Ref<PageTransitionEvent> create(const AtomString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
     {
         return adoptRef(*new PageTransitionEvent(type, initializer, isTrusted));
     }
 
     virtual ~PageTransitionEvent();
@@ -50,12 +50,12 @@
     EventInterface eventInterface() const override;
 
     bool persisted() const { return m_persisted; }
 
 private:
-    PageTransitionEvent(const AtomicString& type, bool persisted);
-    PageTransitionEvent(const AtomicString&, const Init&, IsTrusted);
+    PageTransitionEvent(const AtomString& type, bool persisted);
+    PageTransitionEvent(const AtomString&, const Init&, IsTrusted);
 
     bool m_persisted;
 };
 
 } // namespace WebCore
