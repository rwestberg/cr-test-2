diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/LoggerHelper.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/LoggerHelper.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/LoggerHelper.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/LoggerHelper.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -23,10 +23,11 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include <wtf/CryptographicallyRandomNumber.h>
 #include <wtf/Logger.h>
 
 namespace WTF {
 
 class LoggerHelper {
@@ -43,21 +44,33 @@
 #define LOGIDENTIFIER WTF::Logger::LogSiteIdentifier(logClassName(), __func__, logIdentifier())
 
 #define ALWAYS_LOG(...)     logger().logAlways(logChannel(), __VA_ARGS__)
 #define ERROR_LOG(...)      logger().error(logChannel(), __VA_ARGS__)
 #define WARNING_LOG(...)    logger().warning(logChannel(), __VA_ARGS__)
-#define NOTICE_LOG(...)     logger().notice(logChannel(), __VA_ARGS__)
 #define INFO_LOG(...)       logger().info(logChannel(), __VA_ARGS__)
 #define DEBUG_LOG(...)      logger().debug(logChannel(), __VA_ARGS__)
 #define WILL_LOG(_level_)   logger().willLog(logChannel(), _level_)
 
+#define ALWAYS_LOG_IF(condition, ...)     if (condition) logger().logAlways(logChannel(), __VA_ARGS__)
+#define ERROR_LOG_IF(condition, ...)      if (condition) logger().error(logChannel(), __VA_ARGS__)
+#define WARNING_LOG_IF(condition, ...)    if (condition) logger().warning(logChannel(), __VA_ARGS__)
+#define INFO_LOG_IF(condition, ...)       if (condition) logger().info(logChannel(), __VA_ARGS__)
+#define DEBUG_LOG_IF(condition, ...)      if (condition) logger().debug(logChannel(), __VA_ARGS__)
+
     const void* childLogIdentifier(uint64_t identifier) const
     {
-        static const int64_t parentMask = 0xffffffffffff0000l;
-        static const int64_t maskLowerWord = 0xffffl;
+        static const uint64_t parentMask = 0xffffffffffff0000ull;
+        static const uint64_t maskLowerWord = 0xffffull;
         return reinterpret_cast<const void*>((reinterpret_cast<uint64_t>(logIdentifier()) & parentMask) | (identifier & maskLowerWord));
     }
+
+    static const void* uniqueLogIdentifier()
+    {
+        static uint64_t highWord = cryptographicallyRandomNumber();
+        static uint64_t lowWord = cryptographicallyRandomNumber();
+        return reinterpret_cast<const void*>((highWord << 32) + lowWord);
+    }
 #else
 
 #define LOGIDENTIFIER (WTF::nullopt)
 
 #define ALWAYS_LOG(...)     ((void)0)
@@ -67,10 +80,16 @@
 #define NOTICE_LOG(...)     ((void)0)
 #define INFO_LOG(...)       ((void)0)
 #define DEBUG_LOG(...)      ((void)0)
 #define WILL_LOG(_level_)   false
 
+#define ALWAYS_LOG_IF(condition, ...)     ((void)0)
+#define ERROR_LOG_IF(condition, ...)      ((void)0)
+#define WARNING_LOG_IF(condition, ...)    ((void)0)
+#define INFO_LOG_IF(condition, ...)       ((void)0)
+#define DEBUG_LOG_IF(condition, ...)      ((void)0)
+
 #endif
 
 };
 
 } // namespace WTF
