diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGScriptElement.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGScriptElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGScriptElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGScriptElement.h
@@ -19,12 +19,10 @@
  * Boston, MA 02110-1301, USA.
  */
 
 #pragma once
 
-#include "SVGAnimatedBoolean.h"
-#include "SVGAnimatedString.h"
 #include "SVGElement.h"
 #include "SVGExternalResourcesRequired.h"
 #include "SVGURIReference.h"
 #include "ScriptElement.h"
 #include "XLinkNames.h"
@@ -40,14 +38,14 @@
     using SVGElement::deref;
 
 private:
     SVGScriptElement(const QualifiedName&, Document&, bool wasInsertedByParser, bool alreadyStarted);
 
-    using AttributeOwnerProxy = SVGAttributeOwnerProxyImpl<SVGScriptElement, SVGElement, SVGExternalResourcesRequired, SVGURIReference>;
+    using PropertyRegistry = SVGPropertyOwnerRegistry<SVGScriptElement, SVGElement, SVGExternalResourcesRequired, SVGURIReference>;
+    const SVGPropertyRegistry& propertyRegistry() const final { return m_propertyRegistry; }
 
-    const SVGAttributeOwnerProxy& attributeOwnerProxy() const final { return m_attributeOwnerProxy; }
-    void parseAttribute(const QualifiedName&, const AtomicString&) final;
+    void parseAttribute(const QualifiedName&, const AtomString&) final;
     void svgAttributeChanged(const QualifiedName&) final;
 
     InsertedIntoAncestorResult insertedIntoAncestor(InsertionType, ContainerNode&) final;
     void didFinishInsertingNode() final;
     void childrenChanged(const ChildChange&) final;
@@ -65,10 +63,11 @@
     String forAttributeValue() const final { return String(); }
     String eventAttributeValue() const final { return String(); }
     bool hasAsyncAttribute() const final { return false; }
     bool hasDeferAttribute() const final { return false; }
     bool hasNoModuleAttribute() const final { return false; }
+    ReferrerPolicy referrerPolicy() const final { return ReferrerPolicy::EmptyString; }
     bool hasSourceAttribute() const final { return hasAttribute(SVGNames::hrefAttr) || hasAttribute(XLinkNames::hrefAttr); }
 
     void dispatchLoadEvent() final { SVGExternalResourcesRequired::dispatchLoadEvent(); }
 
     Ref<Element> cloneElementWithoutAttributesAndChildren(Document&) final;
@@ -82,10 +81,10 @@
 
 #ifndef NDEBUG
     bool filterOutAnimatableAttribute(const QualifiedName& name) const final { return name == SVGNames::typeAttr; }
 #endif
 
-    AttributeOwnerProxy m_attributeOwnerProxy { *this };
+    PropertyRegistry m_propertyRegistry { *this };
     Timer m_svgLoadEventTimer;
 };
 
 } // namespace WebCore
