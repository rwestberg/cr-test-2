diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/RegistrationStore.h b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/RegistrationStore.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/RegistrationStore.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/RegistrationStore.h
@@ -43,37 +43,44 @@
 class SWServerRegistration;
 
 class RegistrationStore : public CanMakeWeakPtr<RegistrationStore> {
 WTF_MAKE_FAST_ALLOCATED;
 public:
-    explicit RegistrationStore(SWServer&, String&& databaseDirectory);
+    RegistrationStore(SWServer&, String&& databaseDirectory);
     ~RegistrationStore();
 
-    void clearAll(WTF::CompletionHandler<void()>&&);
-    void flushChanges(WTF::CompletionHandler<void()>&&);
+    void clearAll(CompletionHandler<void()>&&);
+    void flushChanges(CompletionHandler<void()>&&);
+
+    void closeDatabase(CompletionHandler<void()>&&);
+    void startSuspension(CompletionHandler<void()>&&);
+    void endSuspension();
 
     // Callbacks from the SWServer
     void updateRegistration(const ServiceWorkerContextData&);
-    void removeRegistration(SWServerRegistration&);
+    void removeRegistration(const ServiceWorkerRegistrationKey&);
 
     // Callbacks from the database
     void addRegistrationFromDatabase(ServiceWorkerContextData&&);
     void databaseFailedToOpen();
     void databaseOpenedAndRecordsImported();
 
     SWServer& server() { return m_server; };
 
 private:
     void scheduleDatabasePushIfNecessary();
-    void pushChangesToDatabase(WTF::CompletionHandler<void()>&&);
+    void pushChangesToDatabase(CompletionHandler<void()>&&);
     void pushChangesToDatabase() { pushChangesToDatabase({ }); }
 
     SWServer& m_server;
     Ref<RegistrationDatabase> m_database;
 
-    HashMap<ServiceWorkerRegistrationKey, ServiceWorkerContextData> m_updatedRegistrations;
+    HashMap<ServiceWorkerRegistrationKey, Optional<ServiceWorkerContextData>> m_updatedRegistrations;
     Timer m_databasePushTimer;
+
+    bool m_isSuspended { false };
+    bool m_needsPushingChanges { false };
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(SERVICE_WORKER)
