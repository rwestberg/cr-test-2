diff a/modules/javafx.web/src/main/native/Source/WebCore/bridge/c/c_instance.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bridge/c/c_instance.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bridge/c/c_instance.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bridge/c/c_instance.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2003, 2006, 2016 Apple Inc.  All rights reserved.
+ * Copyright (C) 2003-2019 Apple Inc.  All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -293,11 +293,11 @@
     JSValue value;
     if (toJSPrimitive(exec, "toString", value))
         return value;
 
     // Fallback to default implementation.
-    return jsNontrivialString(exec, "NPObject"_s);
+    return jsNontrivialString(exec->vm(), "NPObject"_s);
 }
 
 JSValue CInstance::numberValue(ExecState*) const
 {
     // FIXME: Implement something sensible.
@@ -364,17 +364,18 @@
         moveGlobalExceptionToExecState(exec);
         if (!ok)
             return;
     }
 
+    VM& vm = exec->vm();
     for (uint32_t i = 0; i < count; i++) {
         IdentifierRep* identifier = static_cast<IdentifierRep*>(identifiers[i]);
 
         if (identifier->isString())
             nameArray.add(identifierFromNPIdentifier(exec, identifier->string()));
         else
-            nameArray.add(Identifier::from(exec, identifier->number()));
+            nameArray.add(Identifier::from(vm, identifier->number()));
     }
 
     // FIXME: This should really call NPN_MemFree but that's in WebKit
     free(identifiers);
 }
