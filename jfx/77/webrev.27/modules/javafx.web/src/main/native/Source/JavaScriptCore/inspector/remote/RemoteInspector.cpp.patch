diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/remote/RemoteInspector.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/remote/RemoteInspector.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/remote/RemoteInspector.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/remote/RemoteInspector.cpp
@@ -42,26 +42,26 @@
 void RemoteInspector::startDisabled()
 {
     RemoteInspector::startEnabled = false;
 }
 
-unsigned RemoteInspector::nextAvailableTargetIdentifier()
+TargetID RemoteInspector::nextAvailableTargetIdentifier()
 {
-    unsigned nextValidTargetIdentifier;
+    TargetID nextValidTargetIdentifier;
     do {
         nextValidTargetIdentifier = m_nextAvailableTargetIdentifier++;
-    } while (!nextValidTargetIdentifier || nextValidTargetIdentifier == std::numeric_limits<unsigned>::max() || m_targetMap.contains(nextValidTargetIdentifier));
+    } while (!nextValidTargetIdentifier || nextValidTargetIdentifier == std::numeric_limits<TargetID>::max() || m_targetMap.contains(nextValidTargetIdentifier));
     return nextValidTargetIdentifier;
 }
 
 void RemoteInspector::registerTarget(RemoteControllableTarget* target)
 {
     ASSERT_ARG(target, target);
 
-    std::lock_guard<Lock> lock(m_mutex);
+    LockHolder lock(m_mutex);
 
-    unsigned targetIdentifier = nextAvailableTargetIdentifier();
+    auto targetIdentifier = nextAvailableTargetIdentifier();
     target->setTargetIdentifier(targetIdentifier);
 
     {
         auto result = m_targetMap.set(targetIdentifier, target);
         ASSERT_UNUSED(result, result.isNewEntry);
@@ -78,13 +78,13 @@
 
 void RemoteInspector::unregisterTarget(RemoteControllableTarget* target)
 {
     ASSERT_ARG(target, target);
 
-    std::lock_guard<Lock> lock(m_mutex);
+    LockHolder lock(m_mutex);
 
-    unsigned targetIdentifier = target->targetIdentifier();
+    auto targetIdentifier = target->targetIdentifier();
     if (!targetIdentifier)
         return;
 
     bool wasRemoved = m_targetMap.remove(targetIdentifier);
     ASSERT_UNUSED(wasRemoved, wasRemoved);
@@ -100,36 +100,52 @@
 
 void RemoteInspector::updateTarget(RemoteControllableTarget* target)
 {
     ASSERT_ARG(target, target);
 
-    std::lock_guard<Lock> lock(m_mutex);
+    LockHolder lock(m_mutex);
 
-    unsigned targetIdentifier = target->targetIdentifier();
-    if (!targetIdentifier)
+    if (!updateTargetMap(target))
         return;
 
-    {
-        auto result = m_targetMap.set(targetIdentifier, target);
-        ASSERT_UNUSED(result, !result.isNewEntry);
-    }
+    pushListingsSoon();
+}
+
+bool RemoteInspector::updateTargetMap(RemoteControllableTarget* target)
+{
+    ASSERT(m_mutex.isLocked());
+
+    auto targetIdentifier = target->targetIdentifier();
+    if (!targetIdentifier)
+        return false;
+
+    auto result = m_targetMap.set(targetIdentifier, target);
+    ASSERT_UNUSED(result, !result.isNewEntry);
 
     // If the target has just allowed remote control, then the listing won't exist yet.
     // If the target has no identifier remove the old listing.
     if (auto targetListing = listingForTarget(*target))
         m_targetListingMap.set(targetIdentifier, targetListing);
     else
         m_targetListingMap.remove(targetIdentifier);
 
-    pushListingsSoon();
+    return true;
+}
+
+#if !PLATFORM(COCOA)
+void RemoteInspector::updateAutomaticInspectionCandidate(RemoteInspectionTarget* target)
+{
+    // FIXME: Implement automatic inspection.
+    updateTarget(target);
 }
+#endif
 
 void RemoteInspector::updateClientCapabilities()
 {
     ASSERT(isMainThread());
 
-    std::lock_guard<Lock> lock(m_mutex);
+    LockHolder lock(m_mutex);
 
     if (!m_client)
         m_clientCapabilities = WTF::nullopt;
     else {
         RemoteInspector::Client::Capabilities updatedCapabilities = {
@@ -145,22 +161,22 @@
 void RemoteInspector::setClient(RemoteInspector::Client* client)
 {
     ASSERT((m_client && !client) || (!m_client && client));
 
     {
-        std::lock_guard<Lock> lock(m_mutex);
+        LockHolder lock(m_mutex);
         m_client = client;
     }
 
     // Send an updated listing that includes whether the client allows remote automation.
     updateClientCapabilities();
     pushListingsSoon();
 }
 
-void RemoteInspector::setupFailed(unsigned targetIdentifier)
+void RemoteInspector::setupFailed(TargetID targetIdentifier)
 {
-    std::lock_guard<Lock> lock(m_mutex);
+    LockHolder lock(m_mutex);
 
     m_targetConnectionMap.remove(targetIdentifier);
 
     if (targetIdentifier == m_automaticInspectionCandidateTargetIdentifier)
         m_automaticInspectionPaused = false;
@@ -168,19 +184,19 @@
     updateHasActiveDebugSession();
     updateTargetListing(targetIdentifier);
     pushListingsSoon();
 }
 
-void RemoteInspector::setupCompleted(unsigned targetIdentifier)
+void RemoteInspector::setupCompleted(TargetID targetIdentifier)
 {
-    std::lock_guard<Lock> lock(m_mutex);
+    LockHolder lock(m_mutex);
 
     if (targetIdentifier == m_automaticInspectionCandidateTargetIdentifier)
         m_automaticInspectionPaused = false;
 }
 
-bool RemoteInspector::waitingForAutomaticInspection(unsigned)
+bool RemoteInspector::waitingForAutomaticInspection(TargetID)
 {
     // We don't take the lock to check this because we assume it will be checked repeatedly.
     return m_automaticInspectionPaused;
 }
 
@@ -190,11 +206,11 @@
     pushListingsSoon();
 }
 
 void RemoteInspector::stop()
 {
-    std::lock_guard<Lock> lock(m_mutex);
+    LockHolder lock(m_mutex);
 
     stopInternal(StopSource::API);
 }
 
 TargetListing RemoteInspector::listingForTarget(const RemoteControllableTarget& target) const
@@ -206,11 +222,11 @@
 
     ASSERT_NOT_REACHED();
     return nullptr;
 }
 
-void RemoteInspector::updateTargetListing(unsigned targetIdentifier)
+void RemoteInspector::updateTargetListing(TargetID targetIdentifier)
 {
     auto target = m_targetMap.get(targetIdentifier);
     if (!target)
         return;
 
