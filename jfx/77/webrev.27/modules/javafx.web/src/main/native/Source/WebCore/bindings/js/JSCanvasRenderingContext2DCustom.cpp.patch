diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCanvasRenderingContext2DCustom.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCanvasRenderingContext2DCustom.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCanvasRenderingContext2DCustom.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCanvasRenderingContext2DCustom.cpp
@@ -16,24 +16,22 @@
  * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
  * Boston, MA 02110-1301, USA.
  */
 
 #include "config.h"
+#include "JSCanvasRenderingContext2D.h"
 
 #include "JSNodeCustom.h"
-#include "JSCanvasRenderingContext2D.h"
 
 namespace WebCore {
 
-using namespace JSC;
-
 bool JSCanvasRenderingContext2DOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, JSC::SlotVisitor& visitor, const char** reason)
 {
     if (UNLIKELY(reason))
         *reason = "Canvas is opaque root";
 
-    JSCanvasRenderingContext2D* jsCanvasRenderingContext = jsCast<JSCanvasRenderingContext2D*>(handle.slot()->asCell());
+    JSCanvasRenderingContext2D* jsCanvasRenderingContext = JSC::jsCast<JSCanvasRenderingContext2D*>(handle.slot()->asCell());
     void* root = WebCore::root(jsCanvasRenderingContext->wrapped().canvas());
     return visitor.containsOpaqueRoot(root);
 }
 
 void JSCanvasRenderingContext2D::visitAdditionalChildren(JSC::SlotVisitor& visitor)
