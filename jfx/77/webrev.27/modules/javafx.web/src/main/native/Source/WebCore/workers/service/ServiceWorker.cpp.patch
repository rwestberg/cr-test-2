diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorker.cpp b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorker.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorker.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorker.cpp
@@ -34,20 +34,25 @@
 #include "MessagePort.h"
 #include "SWClientConnection.h"
 #include "ScriptExecutionContext.h"
 #include "SerializedScriptValue.h"
 #include "ServiceWorkerClientData.h"
+#include "ServiceWorkerContainer.h"
 #include "ServiceWorkerGlobalScope.h"
 #include "ServiceWorkerProvider.h"
+#include "ServiceWorkerThread.h"
 #include <JavaScriptCore/JSCJSValueInlines.h>
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/NeverDestroyed.h>
 
 #define WORKER_RELEASE_LOG_IF_ALLOWED(fmt, ...) RELEASE_LOG_IF(isAlwaysOnLoggingAllowed(), ServiceWorker, "%p - ServiceWorker::" fmt, this, ##__VA_ARGS__)
 #define WORKER_RELEASE_LOG_ERROR_IF_ALLOWED(fmt, ...) RELEASE_LOG_ERROR_IF(isAlwaysOnLoggingAllowed(), ServiceWorker, "%p - ServiceWorker::" fmt, this, ##__VA_ARGS__)
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(ServiceWorker);
+
 Ref<ServiceWorker> ServiceWorker::getOrCreate(ScriptExecutionContext& context, ServiceWorkerData&& data)
 {
     if (auto existingServiceWorker = context.serviceWorker(data.identifier))
         return *existingServiceWorker;
     return adoptRef(*new ServiceWorker(context, WTFMove(data)));
@@ -71,28 +76,20 @@
 {
     if (auto* context = scriptExecutionContext())
         context->unregisterServiceWorker(*this);
 }
 
-void ServiceWorker::scheduleTaskToUpdateState(State state)
+void ServiceWorker::updateState(State state)
 {
-    auto* context = scriptExecutionContext();
-    if (!context)
-        return;
-
-    context->postTask([this, protectedThis = makeRef(*this), state](ScriptExecutionContext&) {
-        ASSERT(this->state() != state);
-
-        WORKER_RELEASE_LOG_IF_ALLOWED("scheduleTaskToUpdateState: Updating service worker %llu state from %hhu to %hhu. Registration ID: %llu", identifier().toUInt64(), m_data.state, state, registrationIdentifier().toUInt64());
-        m_data.state = state;
-        if (state != State::Installing && !m_isStopped) {
-            ASSERT(m_pendingActivityForEventDispatch);
-            dispatchEvent(Event::create(eventNames().statechangeEvent, Event::CanBubble::No, Event::IsCancelable::No));
-        }
-
-        updatePendingActivityForEventDispatch();
-    });
+    WORKER_RELEASE_LOG_IF_ALLOWED("updateState: Updating service worker %llu state from %hhu to %hhu. Registration ID: %llu", identifier().toUInt64(), m_data.state, state, registrationIdentifier().toUInt64());
+    m_data.state = state;
+    if (state != State::Installing && !m_isStopped) {
+        ASSERT(m_pendingActivityForEventDispatch);
+        dispatchEvent(Event::create(eventNames().statechangeEvent, Event::CanBubble::No, Event::IsCancelable::No));
+    }
+
+    updatePendingActivityForEventDispatch();
 }
 
 ExceptionOr<void> ServiceWorker::postMessage(ScriptExecutionContext& context, JSC::JSValue messageValue, Vector<JSC::Strong<JSC::JSObject>>&& transfer)
 {
     if (m_isStopped || !context.sessionID().isValid())
