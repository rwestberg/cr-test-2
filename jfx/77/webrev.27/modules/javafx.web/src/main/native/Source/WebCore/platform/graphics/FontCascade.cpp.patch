diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCascade.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCascade.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCascade.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCascade.cpp
@@ -36,32 +36,32 @@
 #include "TextRun.h"
 #include "WidthIterator.h"
 #include <wtf/MainThread.h>
 #include <wtf/MathExtras.h>
 #include <wtf/NeverDestroyed.h>
-#include <wtf/text/AtomicStringHash.h>
+#include <wtf/text/AtomStringHash.h>
 #include <wtf/text/StringBuilder.h>
 
 #if PLATFORM(WIN)
 #include "UniscribeController.h"
 #endif
 
 namespace WebCore {
 
 using namespace WTF::Unicode;
 
-static bool useBackslashAsYenSignForFamily(const AtomicString& family)
+static bool useBackslashAsYenSignForFamily(const AtomString& family)
 {
     if (family.isEmpty())
         return false;
     static const auto set = makeNeverDestroyed([] {
-        HashSet<AtomicString> set;
+        HashSet<AtomString> set;
         auto add = [&set] (const char* name, std::initializer_list<UChar> unicodeName) {
             unsigned nameLength = strlen(name);
-            set.add(AtomicString { name, nameLength, AtomicString::ConstructFromLiteral });
+            set.add(AtomString { name, nameLength, AtomString::ConstructFromLiteral });
             unsigned unicodeNameLength = unicodeName.size();
-            set.add(AtomicString { unicodeName.begin(), unicodeNameLength });
+            set.add(AtomString { unicodeName.begin(), unicodeNameLength });
         };
         add("MS PGothic", { 0xFF2D, 0xFF33, 0x0020, 0xFF30, 0x30B4, 0x30B7, 0x30C3, 0x30AF });
         add("MS PMincho", { 0xFF2D, 0xFF33, 0x0020, 0xFF30, 0x660E, 0x671D });
         add("MS Gothic", { 0xFF2D, 0xFF33, 0x0020, 0x30B4, 0x30B7, 0x30C3, 0x30AF });
         add("MS Mincho", { 0xFF2D, 0xFF33, 0x0020, 0x660E, 0x671D });
@@ -150,11 +150,11 @@
     return true;
 }
 
 struct FontCascadeCacheKey {
     FontDescriptionKey fontDescriptionKey; // Shared with the lower level FontCache (caching Font objects)
-    Vector<AtomicString, 3> families;
+    Vector<AtomString, 3> families;
     unsigned fontSelectorId;
     unsigned fontSelectorVersion;
 };
 
 struct FontCascadeCacheEntry {
@@ -252,11 +252,11 @@
     auto addResult = fontCascadeCache().add(hash, nullptr);
     if (!addResult.isNewEntry && keysMatch(addResult.iterator->value->key, key))
         return addResult.iterator->value->fonts.get();
 
     auto& newEntry = addResult.iterator->value;
-    newEntry = std::make_unique<FontCascadeCacheEntry>(WTFMove(key), FontCascadeFonts::create(WTFMove(fontSelector)));
+    newEntry = makeUnique<FontCascadeCacheEntry>(WTFMove(key), FontCascadeFonts::create(WTFMove(fontSelector)));
     Ref<FontCascadeFonts> glyphs = newEntry->fonts.get();
 
     static const unsigned unreferencedPruneInterval = 50;
     static const int maximumEntries = 400;
     static unsigned pruneCounter;
@@ -296,11 +296,11 @@
     FloatPoint startPoint(startX, point.y());
     drawGlyphBuffer(context, glyphBuffer, startPoint, customFontNotReadyAction);
     return startPoint.x() - startX;
 }
 
-void FontCascade::drawEmphasisMarks(GraphicsContext& context, const TextRun& run, const AtomicString& mark, const FloatPoint& point, unsigned from, Optional<unsigned> to) const
+void FontCascade::drawEmphasisMarks(GraphicsContext& context, const TextRun& run, const AtomString& mark, const FloatPoint& point, unsigned from, Optional<unsigned> to) const
 {
     if (isLoadingCustomFonts())
         return;
 
     unsigned destination = to.valueOr(run.length());
@@ -324,13 +324,13 @@
     float startX = glyphBufferForTextRun(codePathToUse, run, from, destination, glyphBuffer);
     // We couldn't generate any glyphs for the run. Give up.
     if (glyphBuffer.isEmpty())
         return nullptr;
 
-    std::unique_ptr<DisplayList::DisplayList> displayList = std::make_unique<DisplayList::DisplayList>();
+    std::unique_ptr<DisplayList::DisplayList> displayList = makeUnique<DisplayList::DisplayList>();
     GraphicsContext recordingContext([&](GraphicsContext& displayListContext) {
-        return std::make_unique<DisplayList::Recorder>(displayListContext, *displayList, context.state(), FloatRect(), AffineTransform());
+        return makeUnique<DisplayList::Recorder>(displayListContext, *displayList, context.state(), FloatRect(), AffineTransform());
     });
 
     FloatPoint startPoint(startX, 0);
     drawGlyphBuffer(recordingContext, glyphBuffer, startPoint, customFontNotReadyAction);
     return displayList;
@@ -364,11 +364,10 @@
         offsetBeforeRange = complexIterator.runWidthSoFar();
         complexIterator.advance(to, nullptr, IncludePartialGlyphs, fallbackFonts);
         offsetAfterRange = complexIterator.runWidthSoFar();
         complexIterator.advance(run.length(), nullptr, IncludePartialGlyphs, fallbackFonts);
         totalWidth = complexIterator.runWidthSoFar();
-        fprintf(stderr, "totalWidth:%f\n", totalWidth);
 #endif
     } else {
         WidthIterator simpleIterator(this, run, fallbackFonts);
         simpleIterator.advance(from, nullptr);
         offsetBeforeRange = simpleIterator.runWidthSoFar();
@@ -485,21 +484,21 @@
 // from the width of a '0'. This only seems to apply to a fixed number of Mac fonts,
 // but, in order to get similar rendering across platforms, we do this check for
 // all platforms.
 bool FontCascade::hasValidAverageCharWidth() const
 {
-    const AtomicString& family = firstFamily();
+    const AtomString& family = firstFamily();
     if (family.isEmpty())
         return false;
 
 #if PLATFORM(COCOA)
     // Internal fonts on macOS and iOS also have an invalid entry in the table for avgCharWidth.
     if (primaryFontIsSystemFont())
         return false;
 #endif
 
-    static const auto map = makeNeverDestroyed(HashSet<AtomicString> {
+    static const auto map = makeNeverDestroyed(HashSet<AtomString> {
         "American Typewriter",
         "Arial Hebrew",
         "Chalkboard",
         "Cochin",
         "Corsiva Hebrew",
@@ -1306,11 +1305,11 @@
     }
 }
 
 // FIXME: This function may not work if the emphasis mark uses a complex script, but none of the
 // standard emphasis marks do so.
-Optional<GlyphData> FontCascade::getEmphasisMarkGlyphData(const AtomicString& mark) const
+Optional<GlyphData> FontCascade::getEmphasisMarkGlyphData(const AtomString& mark) const
 {
     if (mark.isEmpty())
         return WTF::nullopt;
 
     UChar32 character;
@@ -1324,11 +1323,11 @@
 
     Optional<GlyphData> glyphData(glyphDataForCharacter(character, false, EmphasisMarkVariant));
     return glyphData.value().isValid() ? glyphData : WTF::nullopt;
 }
 
-int FontCascade::emphasisMarkAscent(const AtomicString& mark) const
+int FontCascade::emphasisMarkAscent(const AtomString& mark) const
 {
     Optional<GlyphData> markGlyphData = getEmphasisMarkGlyphData(mark);
     if (!markGlyphData)
         return 0;
 
@@ -1338,11 +1337,11 @@
         return 0;
 
     return markFontData->fontMetrics().ascent();
 }
 
-int FontCascade::emphasisMarkDescent(const AtomicString& mark) const
+int FontCascade::emphasisMarkDescent(const AtomString& mark) const
 {
     Optional<GlyphData> markGlyphData = getEmphasisMarkGlyphData(mark);
     if (!markGlyphData)
         return 0;
 
@@ -1352,11 +1351,11 @@
         return 0;
 
     return markFontData->fontMetrics().descent();
 }
 
-int FontCascade::emphasisMarkHeight(const AtomicString& mark) const
+int FontCascade::emphasisMarkHeight(const AtomString& mark) const
 {
     Optional<GlyphData> markGlyphData = getEmphasisMarkGlyphData(mark);
     if (!markGlyphData)
         return 0;
 
@@ -1428,11 +1427,11 @@
 
     return initialAdvance;
 }
 #endif
 
-void FontCascade::drawEmphasisMarksForSimpleText(GraphicsContext& context, const TextRun& run, const AtomicString& mark, const FloatPoint& point, unsigned from, unsigned to) const
+void FontCascade::drawEmphasisMarksForSimpleText(GraphicsContext& context, const TextRun& run, const AtomString& mark, const FloatPoint& point, unsigned from, unsigned to) const
 {
     GlyphBuffer glyphBuffer;
     float initialAdvance = getGlyphsAndAdvancesForSimpleText(run, from, to, glyphBuffer, ForTextEmphasis);
 
     if (glyphBuffer.isEmpty())
@@ -1499,11 +1498,11 @@
 inline static float offsetToMiddleOfGlyphAtIndex(const GlyphBuffer& glyphBuffer, unsigned i)
 {
     return offsetToMiddleOfGlyph(glyphBuffer.fontAt(i), glyphBuffer.glyphAt(i));
 }
 
-void FontCascade::drawEmphasisMarks(GraphicsContext& context, const GlyphBuffer& glyphBuffer, const AtomicString& mark, const FloatPoint& point) const
+void FontCascade::drawEmphasisMarks(GraphicsContext& context, const GlyphBuffer& glyphBuffer, const AtomString& mark, const FloatPoint& point) const
 {
     Optional<GlyphData> markGlyphData = getEmphasisMarkGlyphData(mark);
     if (!markGlyphData)
         return;
 
@@ -1660,11 +1659,11 @@
         return nullptr;
     return baseCharacterGlyphData.font;
 }
 #endif
 
-void FontCascade::drawEmphasisMarksForComplexText(GraphicsContext& context, const TextRun& run, const AtomicString& mark, const FloatPoint& point, unsigned from, unsigned to) const
+void FontCascade::drawEmphasisMarksForComplexText(GraphicsContext& context, const TextRun& run, const AtomString& mark, const FloatPoint& point, unsigned from, unsigned to) const
 {
     GlyphBuffer glyphBuffer;
     float initialAdvance = getGlyphsAndAdvancesForComplexText(run, from, to, glyphBuffer, ForTextEmphasis);
 
     if (glyphBuffer.isEmpty())
