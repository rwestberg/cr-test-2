diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/ViewportArguments.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/ViewportArguments.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/ViewportArguments.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/ViewportArguments.cpp
@@ -36,10 +36,12 @@
 #include "Settings.h"
 #include <wtf/text/TextStream.h>
 
 namespace WebCore {
 
+typedef WTF::Function<void(ViewportErrorCode, StringView, StringView)> InternalViewportErrorHandler;
+
 #if PLATFORM(GTK)
 const float ViewportArguments::deprecatedTargetDPI = 160;
 #endif
 
 static const float& compareIgnoringAuto(const float& value1, const float& value2, const float& (*compare) (const float&, const float&))
@@ -286,34 +288,32 @@
 {
     if (!result.userScalable)
         result.maximumScale = result.minimumScale = result.initialScale;
 }
 
-static void reportViewportWarning(Document&, ViewportErrorCode, StringView replacement1 = { }, StringView replacement2 = { });
-
-static float numericPrefix(Document& document, StringView key, StringView value, bool* ok = nullptr)
+static float numericPrefix(StringView key, StringView value, const InternalViewportErrorHandler& errorHandler, bool* ok = nullptr)
 {
     size_t parsedLength;
     float numericValue;
     if (value.is8Bit())
         numericValue = charactersToFloat(value.characters8(), value.length(), parsedLength);
     else
         numericValue = charactersToFloat(value.characters16(), value.length(), parsedLength);
     if (!parsedLength) {
-        reportViewportWarning(document, UnrecognizedViewportArgumentValueError, value, key);
+        errorHandler(UnrecognizedViewportArgumentValueError, value, key);
         if (ok)
             *ok = false;
         return 0;
     }
     if (parsedLength < value.length())
-        reportViewportWarning(document, TruncatedViewportArgumentValueError, value, key);
+        errorHandler(TruncatedViewportArgumentValueError, value, key);
     if (ok)
         *ok = true;
     return numericValue;
 }
 
-static float findSizeValue(Document& document, StringView key, StringView value, bool* valueWasExplicit = nullptr)
+static float findSizeValue(StringView key, StringView value, const InternalViewportErrorHandler& errorHandler, bool* valueWasExplicit = nullptr)
 {
     // 1) Non-negative number values are translated to px lengths.
     // 2) Negative number values are translated to auto.
     // 3) device-width and device-height are used as keywords.
     // 4) Other keywords and unknown values translate to 0.0.
@@ -325,22 +325,22 @@
         return ViewportArguments::ValueDeviceWidth;
 
     if (equalLettersIgnoringASCIICase(value, "device-height"))
         return ViewportArguments::ValueDeviceHeight;
 
-    float sizeValue = numericPrefix(document, key, value);
+    float sizeValue = numericPrefix(key, value, errorHandler);
 
     if (sizeValue < 0) {
         if (valueWasExplicit)
             *valueWasExplicit = false;
         return ViewportArguments::ValueAuto;
     }
 
     return sizeValue;
 }
 
-static float findScaleValue(Document& document, StringView key, StringView value)
+static float findScaleValue(StringView key, StringView value, const InternalViewportErrorHandler& errorHandler)
 {
     // 1) Non-negative number values are translated to <number> values.
     // 2) Negative number values are translated to auto.
     // 3) yes is translated to 1.0.
     // 4) device-width and device-height are translated to 10.0.
@@ -353,22 +353,22 @@
     if (equalLettersIgnoringASCIICase(value, "device-width"))
         return 10;
     if (equalLettersIgnoringASCIICase(value, "device-height"))
         return 10;
 
-    float numericValue = numericPrefix(document, key, value);
+    float numericValue = numericPrefix(key, value, errorHandler);
 
     if (numericValue < 0)
         return ViewportArguments::ValueAuto;
 
     if (numericValue > 10.0)
-        reportViewportWarning(document, MaximumScaleTooLargeError);
+        errorHandler(MaximumScaleTooLargeError, { }, { });
 
     return numericValue;
 }
 
-static bool findBooleanValue(Document& document, StringView key, StringView value)
+static bool findBooleanValue(StringView key, StringView value, const InternalViewportErrorHandler& errorHandler)
 {
     // yes and no are used as keywords.
     // Numbers >= 1, numbers <= -1, device-width and device-height are mapped to yes.
     // Numbers in the range <-1, 1>, and unknown values, are mapped to no.
 
@@ -378,55 +378,27 @@
         return false;
     if (equalLettersIgnoringASCIICase(value, "device-width"))
         return true;
     if (equalLettersIgnoringASCIICase(value, "device-height"))
         return true;
-    return std::abs(numericPrefix(document, key, value)) >= 1;
+    return std::abs(numericPrefix(key, value, errorHandler)) >= 1;
 }
 
-static ViewportFit parseViewportFitValue(Document& document, StringView key, StringView value)
+static ViewportFit parseViewportFitValue(StringView key, StringView value, const InternalViewportErrorHandler& errorHandler)
 {
     if (equalLettersIgnoringASCIICase(value, "auto"))
         return ViewportFit::Auto;
     if (equalLettersIgnoringASCIICase(value, "contain"))
         return ViewportFit::Contain;
     if (equalLettersIgnoringASCIICase(value, "cover"))
         return ViewportFit::Cover;
 
-    reportViewportWarning(document, UnrecognizedViewportArgumentValueError, value, key);
+    errorHandler(UnrecognizedViewportArgumentValueError, value, key);
 
     return ViewportFit::Auto;
 }
 
-void setViewportFeature(ViewportArguments& arguments, Document& document, StringView key, StringView value)
-{
-    if (equalLettersIgnoringASCIICase(key, "width"))
-        arguments.width = findSizeValue(document, key, value, &arguments.widthWasExplicit);
-    else if (equalLettersIgnoringASCIICase(key, "height"))
-        arguments.height = findSizeValue(document, key, value);
-    else if (equalLettersIgnoringASCIICase(key, "initial-scale"))
-        arguments.zoom = findScaleValue(document, key, value);
-    else if (equalLettersIgnoringASCIICase(key, "minimum-scale"))
-        arguments.minZoom = findScaleValue(document, key, value);
-    else if (equalLettersIgnoringASCIICase(key, "maximum-scale"))
-        arguments.maxZoom = findScaleValue(document, key, value);
-    else if (equalLettersIgnoringASCIICase(key, "user-scalable"))
-        arguments.userZoom = findBooleanValue(document, key, value);
-#if PLATFORM(IOS_FAMILY)
-    else if (equalLettersIgnoringASCIICase(key, "minimal-ui")) {
-        // FIXME: Ignore silently for now. This code should eventually be removed
-        // so we start giving the warning in the web inspector as for other unimplemented keys.
-    }
-#endif
-    else if (equalLettersIgnoringASCIICase(key, "shrink-to-fit"))
-        arguments.shrinkToFit = findBooleanValue(document, key, value);
-    else if (equalLettersIgnoringASCIICase(key, "viewport-fit") && document.settings().viewportFitEnabled())
-        arguments.viewportFit = parseViewportFitValue(document, key, value);
-    else
-        reportViewportWarning(document, UnrecognizedViewportArgumentKeyError, key);
-}
-
 static const char* viewportErrorMessageTemplate(ViewportErrorCode errorCode)
 {
     static const char* const errors[] = {
         "Viewport argument key \"%replacement1\" not recognized and ignored.",
         "Viewport argument value \"%replacement1\" for key \"%replacement2\" is invalid, and has been ignored.",
@@ -450,30 +422,74 @@
 
     ASSERT_NOT_REACHED();
     return MessageLevel::Error;
 }
 
-void reportViewportWarning(Document& document, ViewportErrorCode errorCode, StringView replacement1, StringView replacement2)
+static String viewportErrorMessage(ViewportErrorCode errorCode, StringView replacement1, StringView replacement2)
 {
-    // FIXME: Why is this null check needed? Can't addConsoleMessage deal with this?
-    if (!document.frame())
-        return;
-
     String message = viewportErrorMessageTemplate(errorCode);
     if (!replacement1.isNull())
         message.replace("%replacement1", replacement1.toStringWithoutCopying());
     // FIXME: This will do the wrong thing if replacement1 contains the substring "%replacement2".
     if (!replacement2.isNull())
         message.replace("%replacement2", replacement2.toStringWithoutCopying());
 
     if ((errorCode == UnrecognizedViewportArgumentValueError || errorCode == TruncatedViewportArgumentValueError) && replacement1.contains(';'))
         message.append(" Note that ';' is not a separator in viewport values. The list should be comma-separated.");
 
+    return message;
+}
+
+static void reportViewportWarning(Document& document, ViewportErrorCode errorCode, const String& message)
+{
+    // FIXME: Why is this null check needed? Can't addConsoleMessage deal with this?
+    if (!document.frame())
+        return;
+
     // FIXME: This message should be moved off the console once a solution to https://bugs.webkit.org/show_bug.cgi?id=103274 exists.
     document.addConsoleMessage(MessageSource::Rendering, viewportErrorMessageLevel(errorCode), message);
 }
 
+void setViewportFeature(ViewportArguments& arguments, StringView key, StringView value, bool viewportFitEnabled, const ViewportErrorHandler& errorHandler)
+{
+    InternalViewportErrorHandler internalErrorHandler = [&errorHandler] (ViewportErrorCode errorCode, StringView replacement1, StringView replacement2) {
+        errorHandler(errorCode, viewportErrorMessage(errorCode, replacement1, replacement2));
+    };
+
+    if (equalLettersIgnoringASCIICase(key, "width"))
+        arguments.width = findSizeValue(key, value, internalErrorHandler, &arguments.widthWasExplicit);
+    else if (equalLettersIgnoringASCIICase(key, "height"))
+        arguments.height = findSizeValue(key, value, internalErrorHandler);
+    else if (equalLettersIgnoringASCIICase(key, "initial-scale"))
+        arguments.zoom = findScaleValue(key, value, internalErrorHandler);
+    else if (equalLettersIgnoringASCIICase(key, "minimum-scale"))
+        arguments.minZoom = findScaleValue(key, value, internalErrorHandler);
+    else if (equalLettersIgnoringASCIICase(key, "maximum-scale"))
+        arguments.maxZoom = findScaleValue(key, value, internalErrorHandler);
+    else if (equalLettersIgnoringASCIICase(key, "user-scalable"))
+        arguments.userZoom = findBooleanValue(key, value, internalErrorHandler);
+#if PLATFORM(IOS_FAMILY)
+    else if (equalLettersIgnoringASCIICase(key, "minimal-ui")) {
+        // FIXME: Ignore silently for now. This code should eventually be removed
+        // so we start giving the warning in the web inspector as for other unimplemented keys.
+    }
+#endif
+    else if (equalLettersIgnoringASCIICase(key, "shrink-to-fit"))
+        arguments.shrinkToFit = findBooleanValue(key, value, internalErrorHandler);
+    else if (equalLettersIgnoringASCIICase(key, "viewport-fit") && viewportFitEnabled)
+        arguments.viewportFit = parseViewportFitValue(key, value, internalErrorHandler);
+    else
+        internalErrorHandler(UnrecognizedViewportArgumentKeyError, key, { });
+}
+
+void setViewportFeature(ViewportArguments& arguments, Document& document, StringView key, StringView value)
+{
+    setViewportFeature(arguments, key, value, document.settings().viewportFitEnabled(), [&](ViewportErrorCode errorCode, const String& message) {
+        reportViewportWarning(document, errorCode, message);
+    });
+}
+
 TextStream& operator<<(TextStream& ts, const ViewportArguments& viewportArguments)
 {
     TextStream::IndentScope indentScope(ts);
 
     ts << "\n" << indent << "(width " << viewportArguments.width << ", minWidth " << viewportArguments.minWidth << ", maxWidth " << viewportArguments.maxWidth << ")";
