diff a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/isolatedtree/AXIsolatedTreeNode.h b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/isolatedtree/AXIsolatedTreeNode.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/isolatedtree/AXIsolatedTreeNode.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/isolatedtree/AXIsolatedTreeNode.h
@@ -25,89 +25,115 @@
 
 #pragma once
 
 #if ENABLE(ACCESSIBILITY_ISOLATED_TREE)
 
+#include "AXIsolatedTree.h"
 #include "AccessibilityObjectInterface.h"
+#include "FloatRect.h"
+#include "IntPoint.h"
 #include <wtf/Forward.h>
 #include <wtf/HashMap.h>
 #include <wtf/RefPtr.h>
 #include <wtf/RetainPtr.h>
 #include <wtf/ThreadSafeRefCounted.h>
 #include <wtf/Variant.h>
 #include <wtf/Vector.h>
 #include <wtf/WeakPtr.h>
 
-#if PLATFORM(COCOA)
-OBJC_CLASS WebAccessibilityObjectWrapper;
-#endif
-
 namespace WebCore {
 
+class AXIsolatedTree;
 class AccessibilityObject;
 
 class AXIsolatedTreeNode final : public AccessibilityObjectInterface, public ThreadSafeRefCounted<AXIsolatedTreeNode>, public CanMakeWeakPtr<AXIsolatedTreeNode> {
 
 public:
     enum class AXPropertyName : uint8_t {
         None = 0,
-        RoleValue = 1,
+        HelpText,
+        IsAccessibilityIgnored,
         IsAttachment,
+        IsFileUploadButton,
+        IsImage,
+        IsImageMapLink,
+        IsLink,
         IsMediaControlLabel,
+        IsScrollbar,
+        IsTree,
+        IsTreeItem,
+        Description,
+        RelativeFrame,
+        RoleValue,
+        SpeechHint,
+        Title,
     };
 
     static Ref<AXIsolatedTreeNode> create(const AccessibilityObject&);
     virtual ~AXIsolatedTreeNode();
 
     AXID identifier() const { return m_identifier; }
 
-    bool isRootNode() const { return m_isRootNode; }
-    void setIsRootNode(bool value)
-    {
-        ASSERT(isMainThread());
-        m_isRootNode = value;
-    }
-
-    void setParent(AXID parent)
-    {
-        ASSERT(isMainThread());
-        m_parent = parent;
-    }
+    void setParent(AXID);
     AXID parent() const { return m_parent; }
 
     void appendChild(AXID);
     const Vector<AXID>& children() const { return m_children; };
 
+    AXIsolatedTree* tree() const;
+    AXIsolatedTreeID treeIdentifier() const { return m_treeIdentifier; }
+    void setTreeIdentifier(AXIsolatedTreeID);
+
 #if PLATFORM(COCOA)
-    WebAccessibilityObjectWrapper* wrapper() const { return m_wrapper.get(); }
-    void setWrapper(WebAccessibilityObjectWrapper* wrapper) { m_wrapper = wrapper; }
+    AccessibilityObjectWrapper* wrapper() const override { return m_wrapper.get(); }
+    void setWrapper(AccessibilityObjectWrapper* wrapper) { m_wrapper = wrapper; }
 #endif
 
 protected:
     AXIsolatedTreeNode() = default;
 
 private:
     AXIsolatedTreeNode(const AccessibilityObject&);
     void initializeAttributeData(const AccessibilityObject&);
 
+    AccessibilityObjectInterface* accessibilityHitTest(const IntPoint&) const override;
+    void updateChildrenIfNecessary() override { }
+
     bool isMediaControlLabel() const override { return boolAttributeValue(AXPropertyName::IsMediaControlLabel); }
     bool isAttachment() const override { return boolAttributeValue(AXPropertyName::IsAttachment); }
     AccessibilityRole roleValue() const override { return static_cast<AccessibilityRole>(intAttributeValue(AXPropertyName::RoleValue)); }
-
-    using AttributeValueVariant = Variant<std::nullptr_t, String, bool, int, unsigned, double>;
+    bool isLink() const override { return boolAttributeValue(AXPropertyName::IsLink); }
+    bool isImageMapLink() const override { return boolAttributeValue(AXPropertyName::IsImageMapLink); }
+    bool isImage() const override { return boolAttributeValue(AXPropertyName::IsImage); }
+    bool isFileUploadButton() const override { return boolAttributeValue(AXPropertyName::IsFileUploadButton); }
+    bool accessibilityIsIgnored() const override { return boolAttributeValue(AXPropertyName::IsAccessibilityIgnored); }
+    AccessibilityObjectInterface* parentObjectInterfaceUnignored() const override;
+    bool isTree() const override { return boolAttributeValue(AXPropertyName::IsTree); }
+    bool isTreeItem() const override { return boolAttributeValue(AXPropertyName::IsTreeItem); }
+    bool isScrollbar() const override { return boolAttributeValue(AXPropertyName::IsScrollbar); }
+    FloatRect relativeFrame() const override { return rectAttributeValue(AXPropertyName::RelativeFrame); }
+    String speechHintAttributeValue() const override { return stringAttributeValue(AXPropertyName::SpeechHint); }
+    String descriptionAttributeValue() const override { return stringAttributeValue(AXPropertyName::Description); }
+    String helpTextAttributeValue() const override { return stringAttributeValue(AXPropertyName::HelpText); }
+    String titleAttributeValue() const override { return stringAttributeValue(AXPropertyName::Title); }
+    AccessibilityObjectInterface* focusedUIElement() const override;
+
+    using AttributeValueVariant = Variant<std::nullptr_t, String, bool, int, unsigned, double, Optional<FloatRect>>;
     void setProperty(AXPropertyName, AttributeValueVariant&&, bool shouldRemove = false);
 
     bool boolAttributeValue(AXPropertyName) const;
-    const String& stringAttributeValue(AXPropertyName) const;
+    const String stringAttributeValue(AXPropertyName) const;
     int intAttributeValue(AXPropertyName) const;
     unsigned unsignedAttributeValue(AXPropertyName) const;
     double doubleAttributeValue(AXPropertyName) const;
+    FloatRect rectAttributeValue(AXPropertyName) const;
 
     AXID m_parent;
     AXID m_identifier;
-    bool m_isRootNode;
-    bool m_initialized;
+    bool m_initialized { false };
+    AXIsolatedTreeID m_treeIdentifier;
+    WeakPtr<AXIsolatedTree> m_cachedTree;
     Vector<AXID> m_children;
 
 #if PLATFORM(COCOA)
     RetainPtr<WebAccessibilityObjectWrapper> m_wrapper;
 #endif
