diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedImage.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedImage.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedImage.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedImage.cpp
@@ -103,11 +103,11 @@
     m_imageObserver = image.m_imageObserver;
     if (m_imageObserver)
         m_imageObserver->cachedImages().add(this);
 
     if (m_image && is<SVGImage>(*m_image))
-        m_svgImageCache = std::make_unique<SVGImageCache>(&downcast<SVGImage>(*m_image));
+        m_svgImageCache = makeUnique<SVGImageCache>(&downcast<SVGImage>(*m_image));
 }
 
 void CachedImage::didAddClient(CachedResourceClient& client)
 {
     if (m_data && !m_image && !errorOccurred()) {
@@ -273,25 +273,28 @@
     }
 
     m_svgImageCache->setContainerContextForClient(client, containerSize, containerZoom, imageURL);
 }
 
-LayoutSize CachedImage::imageSizeForRenderer(const RenderElement* renderer, float multiplier, SizeType sizeType)
+FloatSize CachedImage::imageSizeForRenderer(const RenderElement* renderer, SizeType sizeType) const
 {
     if (!m_image)
-        return LayoutSize();
+        return { };
 
-    LayoutSize imageSize;
+    if (is<BitmapImage>(*m_image) && renderer && renderer->imageOrientation() == ImageOrientation::FromImage)
+        return downcast<BitmapImage>(*m_image).sizeRespectingOrientation();
 
-    if (is<BitmapImage>(*m_image) && renderer && renderer->shouldRespectImageOrientation() == RespectImageOrientation)
-        imageSize = LayoutSize(downcast<BitmapImage>(*m_image).sizeRespectingOrientation());
-    else if (is<SVGImage>(*m_image) && sizeType == UsedSize)
-        imageSize = LayoutSize(m_svgImageCache->imageSizeForRenderer(renderer));
-    else
-        imageSize = LayoutSize(m_image->size());
+    if (is<SVGImage>(*m_image) && sizeType == UsedSize)
+        return m_svgImageCache->imageSizeForRenderer(renderer);
+
+    return m_image->size();
+}
 
-    if (multiplier == 1.0f)
+LayoutSize CachedImage::imageSizeForRenderer(const RenderElement* renderer, float multiplier, SizeType sizeType) const
+{
+    LayoutSize imageSize = LayoutSize(imageSizeForRenderer(renderer, sizeType));
+    if (imageSize.isEmpty() || multiplier == 1.0f)
         return imageSize;
 
     // Don't let images that have a width/height >= 1 shrink below 1 when zoomed.
     float widthScale = m_image->hasRelativeWidth() ? 1.0f : multiplier;
     float heightScale = m_image->hasRelativeHeight() ? 1.0f : multiplier;
@@ -352,11 +355,11 @@
 
     m_image = Image::create(*m_imageObserver);
 
     if (m_image) {
         if (is<SVGImage>(*m_image))
-            m_svgImageCache = std::make_unique<SVGImageCache>(&downcast<SVGImage>(*m_image));
+            m_svgImageCache = makeUnique<SVGImageCache>(&downcast<SVGImage>(*m_image));
 
         // Send queued container size requests.
         if (m_image->usesContainerSize()) {
             for (auto& request : m_pendingContainerContextRequests)
                 setContainerContextForClient(*request.key, request.value.containerSize, request.value.containerZoom, request.value.imageURL);
