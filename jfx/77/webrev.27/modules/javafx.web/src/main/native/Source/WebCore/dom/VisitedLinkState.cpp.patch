diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/VisitedLinkState.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/VisitedLinkState.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/VisitedLinkState.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/VisitedLinkState.cpp
@@ -31,27 +31,28 @@
 
 #include "ElementIterator.h"
 #include "Frame.h"
 #include "HTMLAnchorElement.h"
 #include "Page.h"
+#include "SVGAElement.h"
 #include "SVGNames.h"
 #include "VisitedLinkStore.h"
 #include "XLinkNames.h"
 
 namespace WebCore {
 
 using namespace HTMLNames;
 
-inline static const AtomicString* linkAttribute(const Element& element)
+inline static const AtomString* linkAttribute(const Element& element)
 {
     if (!element.isLink())
-        return 0;
+        return nullptr;
     if (element.isHTMLElement())
         return &element.attributeWithoutSynchronization(HTMLNames::hrefAttr);
     if (element.isSVGElement())
         return &element.getAttribute(SVGNames::hrefAttr, XLinkNames::hrefAttr);
-    return 0;
+    return nullptr;
 }
 
 VisitedLinkState::VisitedLinkState(Document& document)
     : m_document(document)
 {
@@ -65,50 +66,48 @@
         if (element.isLink())
             element.invalidateStyleForSubtree();
     }
 }
 
-inline static SharedStringHash linkHashForElement(Document& document, const Element& element)
+inline static Optional<SharedStringHash> linkHashForElement(const Element& element)
 {
     if (is<HTMLAnchorElement>(element))
         return downcast<HTMLAnchorElement>(element).visitedLinkHash();
-    if (const AtomicString* attribute = linkAttribute(element))
-        return computeVisitedLinkHash(document.baseURL(), *attribute);
-    return 0;
+    if (is<SVGAElement>(element))
+        return downcast<SVGAElement>(element).visitedLinkHash();
+    return WTF::nullopt;
 }
 
 void VisitedLinkState::invalidateStyleForLink(SharedStringHash linkHash)
 {
     if (!m_linksCheckedForVisitedState.contains(linkHash))
         return;
     for (auto& element : descendantsOfType<Element>(m_document)) {
-        if (linkHashForElement(m_document, element) == linkHash)
+        if (element.isLink() && linkHashForElement(element) == linkHash)
             element.invalidateStyleForSubtree();
     }
 }
 
 InsideLink VisitedLinkState::determineLinkStateSlowCase(const Element& element)
 {
     ASSERT(element.isLink());
 
-    const AtomicString* attribute = linkAttribute(element);
+    const AtomString* attribute = linkAttribute(element);
     if (!attribute || attribute->isNull())
         return InsideLink::NotInside;
 
-    // An empty href refers to the document itself which is always visited. It is useful to check this explicitly so
-    // that visited links can be tested in platform independent manner, without explicit support in the test harness.
-    if (attribute->isEmpty())
-        return InsideLink::InsideVisited;
+    auto hashIfFound = linkHashForElement(element);
 
-    SharedStringHash hash;
-    if (is<HTMLAnchorElement>(element))
-        hash = downcast<HTMLAnchorElement>(element).visitedLinkHash();
-    else
-        hash = computeVisitedLinkHash(element.document().baseURL(), *attribute);
+    if (!hashIfFound)
+        return attribute->isEmpty() ? InsideLink::InsideVisited : InsideLink::InsideUnvisited;
+
+    auto hash = *hashIfFound;
 
+    // An empty href (hash==0) refers to the document itself which is always visited. It is useful to check this explicitly so
+    // that visited links can be tested in platform independent manner, without explicit support in the test harness.
     if (!hash)
-        return InsideLink::InsideUnvisited;
+        return InsideLink::InsideVisited;
 
     Frame* frame = element.document().frame();
     if (!frame)
         return InsideLink::InsideUnvisited;
 
