diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/websockets/WebSocketHandshake.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/websockets/WebSocketHandshake.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/websockets/WebSocketHandshake.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/websockets/WebSocketHandshake.cpp
@@ -33,11 +33,10 @@
 #include "config.h"
 #include "WebSocketHandshake.h"
 
 #include "Cookie.h"
 #include "CookieJar.h"
-#include "Document.h"
 #include "HTTPHeaderMap.h"
 #include "HTTPHeaderNames.h"
 #include "HTTPParsers.h"
 #include "InspectorInstrumentation.h"
 #include "Logging.h"
@@ -117,16 +116,17 @@
     SHA1::Digest hash;
     sha1.computeHash(hash);
     return base64Encode(hash.data(), SHA1::hashSize);
 }
 
-WebSocketHandshake::WebSocketHandshake(const URL& url, const String& protocol, Document* document, bool allowCookies)
+WebSocketHandshake::WebSocketHandshake(const URL& url, const String& protocol, const String& userAgent, const String& clientOrigin, bool allowCookies)
     : m_url(url)
     , m_clientProtocol(protocol)
     , m_secure(m_url.protocolIs("wss"))
-    , m_document(document)
     , m_mode(Incomplete)
+    , m_userAgent(userAgent)
+    , m_clientOrigin(clientOrigin)
     , m_allowCookies(allowCookies)
 {
     m_secWebSocketKey = generateSecWebSocketKey();
     m_expectedAccept = getExpectedWebSocketAccept(m_secWebSocketKey);
 }
@@ -162,23 +162,13 @@
 bool WebSocketHandshake::secure() const
 {
     return m_secure;
 }
 
-String WebSocketHandshake::clientOrigin() const
-{
-    return m_document->securityOrigin().toString();
-}
-
 String WebSocketHandshake::clientLocation() const
 {
-    StringBuilder builder;
-    builder.append(m_secure ? "wss" : "ws");
-    builder.appendLiteral("://");
-    builder.append(hostName(m_url, m_secure));
-    builder.append(resourceName(m_url));
-    return builder.toString();
+    return makeString(m_secure ? "wss" : "ws", "://", hostName(m_url, m_secure), resourceName(m_url));
 }
 
 CString WebSocketHandshake::clientHandshakeMessage() const
 {
     // Keep the following consistent with clientHandshakeRequest().
@@ -190,11 +180,11 @@
 
     Vector<String> fields;
     fields.append("Upgrade: websocket");
     fields.append("Connection: Upgrade");
     fields.append("Host: " + hostName(m_url, m_secure));
-    fields.append("Origin: " + clientOrigin());
+    fields.append("Origin: " + m_clientOrigin);
     if (!m_clientProtocol.isEmpty())
         fields.append("Sec-WebSocket-Protocol: " + m_clientProtocol);
 
     // Note: Cookies are not retrieved in the WebContent process. Instead, a proxy object is
     // added in the handshake, and is exchanged for actual cookies in the Network process.
@@ -211,11 +201,11 @@
     const String extensionValue = m_extensionDispatcher.createHeaderValue();
     if (extensionValue.length())
         fields.append("Sec-WebSocket-Extensions: " + extensionValue);
 
     // Add a User-Agent header.
-    fields.append("User-Agent: " + m_document->userAgent(m_document->url()));
+    fields.append(makeString("User-Agent: ", m_userAgent));
 
     // Fields in the handshake are sent by the client in a random order; the
     // order is not meaningful.  Thus, it's ok to send the order we constructed
     // the fields.
 
@@ -227,26 +217,25 @@
     builder.appendLiteral("\r\n");
 
     return builder.toString().utf8();
 }
 
-ResourceRequest WebSocketHandshake::clientHandshakeRequest() const
+ResourceRequest WebSocketHandshake::clientHandshakeRequest(Function<String(const URL&)>&& cookieRequestHeaderFieldValue) const
 {
     // Keep the following consistent with clientHandshakeMessage().
     ResourceRequest request(m_url);
     request.setHTTPMethod("GET");
 
     request.setHTTPHeaderField(HTTPHeaderName::Connection, "Upgrade");
     request.setHTTPHeaderField(HTTPHeaderName::Host, hostName(m_url, m_secure));
-    request.setHTTPHeaderField(HTTPHeaderName::Origin, clientOrigin());
+    request.setHTTPHeaderField(HTTPHeaderName::Origin, m_clientOrigin);
     if (!m_clientProtocol.isEmpty())
         request.setHTTPHeaderField(HTTPHeaderName::SecWebSocketProtocol, m_clientProtocol);
 
     URL url = httpURLForAuthenticationAndCookies();
-    if (m_allowCookies && m_document && m_document->page()) {
-        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(InspectorInstrumentation::hasFrontends());
-        String cookie = m_document->page()->cookieJar().cookieRequestHeaderFieldValue(*m_document, url);
+    if (m_allowCookies) {
+        String cookie = cookieRequestHeaderFieldValue(url);
         if (!cookie.isEmpty())
             request.setHTTPHeaderField(HTTPHeaderName::Cookie, cookie);
     }
 
     request.setHTTPHeaderField(HTTPHeaderName::Pragma, "no-cache");
@@ -257,33 +246,21 @@
     const String extensionValue = m_extensionDispatcher.createHeaderValue();
     if (extensionValue.length())
         request.setHTTPHeaderField(HTTPHeaderName::SecWebSocketExtensions, extensionValue);
 
     // Add a User-Agent header.
-    request.setHTTPUserAgent(m_document->userAgent(m_document->url()));
+    request.setHTTPUserAgent(m_userAgent);
 
     return request;
 }
 
-Optional<CookieRequestHeaderFieldProxy> WebSocketHandshake::clientHandshakeCookieRequestHeaderFieldProxy() const
-{
-    if (!m_document || !m_allowCookies)
-        return WTF::nullopt;
-    return CookieJar::cookieRequestHeaderFieldProxy(*m_document, httpURLForAuthenticationAndCookies());
-}
-
 void WebSocketHandshake::reset()
 {
     m_mode = Incomplete;
     m_extensionDispatcher.reset();
 }
 
-void WebSocketHandshake::clearDocument()
-{
-    m_document = nullptr;
-}
-
 int WebSocketHandshake::readServerHandshake(const char* header, size_t len)
 {
     m_mode = Incomplete;
     int statusCode;
     String statusText;
