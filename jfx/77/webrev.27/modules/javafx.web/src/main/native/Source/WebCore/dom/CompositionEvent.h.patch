diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/CompositionEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/CompositionEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/CompositionEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/CompositionEvent.h
@@ -30,11 +30,11 @@
 
 namespace WebCore {
 
 class CompositionEvent final : public UIEvent {
 public:
-    static Ref<CompositionEvent> create(const AtomicString& type, RefPtr<WindowProxy>&& view, const String& data)
+    static Ref<CompositionEvent> create(const AtomString& type, RefPtr<WindowProxy>&& view, const String& data)
     {
         return adoptRef(*new CompositionEvent(type, WTFMove(view), data));
     }
 
     static Ref<CompositionEvent> createForBindings()
@@ -44,27 +44,27 @@
 
     struct Init : UIEventInit {
         String data;
     };
 
-    static Ref<CompositionEvent> create(const AtomicString& type, const Init& initializer)
+    static Ref<CompositionEvent> create(const AtomString& type, const Init& initializer)
     {
         return adoptRef(*new CompositionEvent(type, initializer));
     }
 
     virtual ~CompositionEvent();
 
-    void initCompositionEvent(const AtomicString& type, bool canBubble, bool cancelable, RefPtr<WindowProxy>&&, const String& data);
+    void initCompositionEvent(const AtomString& type, bool canBubble, bool cancelable, RefPtr<WindowProxy>&&, const String& data);
 
     String data() const { return m_data; }
 
     EventInterface eventInterface() const override;
 
 private:
     CompositionEvent();
-    CompositionEvent(const AtomicString& type, RefPtr<WindowProxy>&&, const String&);
-    CompositionEvent(const AtomicString& type, const Init&);
+    CompositionEvent(const AtomString& type, RefPtr<WindowProxy>&&, const String&);
+    CompositionEvent(const AtomString& type, const Init&);
 
     bool isCompositionEvent() const override;
 
     String m_data;
 };
