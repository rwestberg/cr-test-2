diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Operations.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Operations.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Operations.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Operations.h
@@ -1,8 +1,8 @@
 /*
  *  Copyright (C) 1999-2000 Harri Porten (porten@kde.org)
- *  Copyright (C) 2002-2018 Apple Inc. All rights reserved.
+ *  Copyright (C) 2002-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Library General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -22,11 +22,11 @@
 #pragma once
 
 #include "CallFrame.h"
 #include "ExceptionHelpers.h"
 #include "JSBigInt.h"
-#include "JSCJSValue.h"
+#include "JSCJSValueInlines.h"
 #include <wtf/Variant.h>
 
 namespace JSC {
 
 #define InvalidPrototypeChain (std::numeric_limits<size_t>::max())
@@ -45,11 +45,11 @@
     unsigned length1 = u1.length();
     if (!length1)
         return s2;
     unsigned length2 = s2->length();
     if (!length2)
-        return jsString(&vm, u1);
+        return jsString(vm, u1);
     static_assert(JSString::MaxLength == std::numeric_limits<int32_t>::max(), "");
     if (sumOverflows<int32_t>(length1, length2)) {
         throwOutOfMemoryError(exec, scope);
         return nullptr;
     }
@@ -58,11 +58,11 @@
     // (2) Cost of making JSRopeString: sizeof(JSString) (for u1) + sizeof(JSRopeString)
     // We do not account u1 cost in (2) since u1 may be shared StringImpl, and it may not introduce additional cost.
     // We conservatively consider the cost of u1. Currently, we are not considering about is8Bit() case because 16-bit
     // strings are relatively rare. But we can do that if we need to consider it.
     if (s2->isRope() || (StringImpl::headerSize<LChar>() + length1 + length2) >= sizeof(JSRopeString))
-        return JSRopeString::create(vm, jsString(&vm, u1), s2);
+        return JSRopeString::create(vm, jsString(vm, u1), s2);
 
     ASSERT(!s2->isRope());
     const String& u2 = s2->value(exec);
     scope.assertNoException();
     String newString = tryMakeString(u1, u2);
@@ -78,11 +78,11 @@
     VM& vm = exec->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     unsigned length1 = s1->length();
     if (!length1)
-        return jsString(&vm, u2);
+        return jsString(vm, u2);
     unsigned length2 = u2.length();
     if (!length2)
         return s1;
     static_assert(JSString::MaxLength == std::numeric_limits<int32_t>::max(), "");
     if (sumOverflows<int32_t>(length1, length2)) {
@@ -91,11 +91,11 @@
     }
 
     // (1) Cost of making JSString    : sizeof(JSString) (for new string) + sizeof(StringImpl header) + length1 + length2
     // (2) Cost of making JSRopeString: sizeof(JSString) (for u2) + sizeof(JSRopeString)
     if (s1->isRope() || (StringImpl::headerSize<LChar>() + length1 + length2) >= sizeof(JSRopeString))
-        return JSRopeString::create(vm, s1, jsString(&vm, u2));
+        return JSRopeString::create(vm, s1, jsString(vm, u2));
 
     ASSERT(!s1->isRope());
     const String& u1 = s1->value(exec);
     scope.assertNoException();
     String newString = tryMakeString(u1, u2);
@@ -157,24 +157,24 @@
     VM& vm = exec->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     unsigned length1 = u1.length();
     if (!length1)
-        return jsString(&vm, u2);
+        return jsString(vm, u2);
     unsigned length2 = u2.length();
     if (!length2)
-        return jsString(&vm, u1);
+        return jsString(vm, u1);
     static_assert(JSString::MaxLength == std::numeric_limits<int32_t>::max(), "");
     if (sumOverflows<int32_t>(length1, length2)) {
         throwOutOfMemoryError(exec, scope);
         return nullptr;
     }
 
     // (1) Cost of making JSString    : sizeof(JSString) (for new string) + sizeof(StringImpl header) + length1 + length2
     // (2) Cost of making JSRopeString: sizeof(JSString) (for u1) + sizeof(JSString) (for u2) + sizeof(JSRopeString)
     if ((StringImpl::headerSize<LChar>() + length1 + length2) >= (sizeof(JSRopeString) + sizeof(JSString)))
-        return JSRopeString::create(vm, jsString(&vm, u1), jsString(&vm, u2));
+        return JSRopeString::create(vm, jsString(vm, u1), jsString(vm, u2));
 
     String newString = tryMakeString(u1, u2);
     if (!newString) {
         throwOutOfMemoryError(exec, scope);
         return nullptr;
@@ -182,12 +182,12 @@
     return JSString::create(vm, newString.releaseImpl().releaseNonNull());
 }
 
 ALWAYS_INLINE JSString* jsString(ExecState* exec, const String& u1, const String& u2, const String& u3)
 {
-    VM* vm = &exec->vm();
-    auto scope = DECLARE_THROW_SCOPE(*vm);
+    VM& vm = exec->vm();
+    auto scope = DECLARE_THROW_SCOPE(vm);
 
     unsigned length1 = u1.length();
     unsigned length2 = u2.length();
     unsigned length3 = u3.length();
     ASSERT(length1 <= JSString::MaxLength);
@@ -210,25 +210,25 @@
     }
 
     // (1) Cost of making JSString    : sizeof(JSString) (for new string) + sizeof(StringImpl header) + length1 + length2 + length3
     // (2) Cost of making JSRopeString: sizeof(JSString) (for u1) + sizeof(JSString) (for u2) + sizeof(JSString) (for u3) + sizeof(JSRopeString)
     if ((StringImpl::headerSize<LChar>() + length1 + length2 + length3) >= (sizeof(JSRopeString) + sizeof(JSString) * 2))
-        return JSRopeString::create(*vm, jsString(vm, u1), jsString(vm, u2), jsString(vm, u3));
+        return JSRopeString::create(vm, jsString(vm, u1), jsString(vm, u2), jsString(vm, u3));
 
     String newString = tryMakeString(u1, u2, u3);
     if (!newString) {
         throwOutOfMemoryError(exec, scope);
         return nullptr;
     }
-    return JSString::create(*vm, newString.releaseImpl().releaseNonNull());
+    return JSString::create(vm, newString.releaseImpl().releaseNonNull());
 }
 
 ALWAYS_INLINE JSValue jsStringFromRegisterArray(ExecState* exec, Register* strings, unsigned count)
 {
-    VM* vm = &exec->vm();
-    auto scope = DECLARE_THROW_SCOPE(*vm);
-    JSRopeString::RopeBuilder<RecordOverflow> ropeBuilder(*vm);
+    VM& vm = exec->vm();
+    auto scope = DECLARE_THROW_SCOPE(vm);
+    JSRopeString::RopeBuilder<RecordOverflow> ropeBuilder(vm);
 
     for (unsigned i = 0; i < count; ++i) {
         JSValue v = strings[-static_cast<int>(i)].jsValue();
         JSString* string = v.toString(exec);
         RETURN_IF_EXCEPTION(scope, { });
@@ -239,13 +239,13 @@
     return ropeBuilder.release();
 }
 
 ALWAYS_INLINE JSValue jsStringFromArguments(ExecState* exec, JSValue thisValue)
 {
-    VM* vm = &exec->vm();
-    auto scope = DECLARE_THROW_SCOPE(*vm);
-    JSRopeString::RopeBuilder<RecordOverflow> ropeBuilder(*vm);
+    VM& vm = exec->vm();
+    auto scope = DECLARE_THROW_SCOPE(vm);
+    JSRopeString::RopeBuilder<RecordOverflow> ropeBuilder(vm);
     JSString* str = thisValue.toString(exec);
     RETURN_IF_EXCEPTION(scope, { });
     ropeBuilder.append(str);
 
     for (unsigned i = 0; i < exec->argumentCount(); ++i) {
@@ -350,12 +350,17 @@
         return v1.asInt32() < v2.asInt32();
 
     if (v1.isNumber() && v2.isNumber())
         return v1.asNumber() < v2.asNumber();
 
-    if (isJSString(v1) && isJSString(v2))
-        return codePointCompareLessThan(asString(v1)->value(callFrame), asString(v2)->value(callFrame));
+    if (isJSString(v1) && isJSString(v2)) {
+        String s1 = asString(v1)->value(callFrame);
+        RETURN_IF_EXCEPTION(scope, false);
+        String s2 = asString(v2)->value(callFrame);
+        RETURN_IF_EXCEPTION(scope, false);
+        return codePointCompareLessThan(s1, s2);
+    }
 
     double n1;
     double n2;
     JSValue p1;
     JSValue p2;
@@ -395,12 +400,17 @@
         return v1.asInt32() <= v2.asInt32();
 
     if (v1.isNumber() && v2.isNumber())
         return v1.asNumber() <= v2.asNumber();
 
-    if (isJSString(v1) && isJSString(v2))
-        return !codePointCompareLessThan(asString(v2)->value(callFrame), asString(v1)->value(callFrame));
+    if (isJSString(v1) && isJSString(v2)) {
+        String s1 = asString(v1)->value(callFrame);
+        RETURN_IF_EXCEPTION(scope, false);
+        String s2 = asString(v2)->value(callFrame);
+        RETURN_IF_EXCEPTION(scope, false);
+        return !codePointCompareLessThan(s2, s1);
+    }
 
     double n1;
     double n2;
     JSValue p1;
     JSValue p2;
