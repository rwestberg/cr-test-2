diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLDocument.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLDocument.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLDocument.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLDocument.cpp
@@ -54,10 +54,11 @@
 #include "HTMLDocument.h"
 
 #include "CSSPropertyNames.h"
 #include "CommonVM.h"
 #include "CookieJar.h"
+#include "CustomHeaderFields.h"
 #include "DOMWindow.h"
 #include "DocumentLoader.h"
 #include "DocumentType.h"
 #include "ElementChildIterator.h"
 #include "FocusController.h"
@@ -84,12 +85,17 @@
 
 WTF_MAKE_ISO_ALLOCATED_IMPL(HTMLDocument);
 
 using namespace HTMLNames;
 
-HTMLDocument::HTMLDocument(Frame* frame, const URL& url, DocumentClassFlags documentClasses, unsigned constructionFlags)
-    : Document(frame, url, documentClasses | HTMLDocumentClass, constructionFlags)
+Ref<HTMLDocument> HTMLDocument::createSynthesizedDocument(Frame& frame, const URL& url)
+{
+    return adoptRef(*new HTMLDocument(frame.sessionID(), &frame, url, HTMLDocumentClass, Synthesized));
+}
+
+HTMLDocument::HTMLDocument(PAL::SessionID sessionID, Frame* frame, const URL& url, DocumentClassFlags documentClasses, unsigned constructionFlags)
+    : Document(sessionID, frame, url, documentClasses | HTMLDocumentClass, constructionFlags)
 {
     clearXMLVersion();
 }
 
 HTMLDocument::~HTMLDocument() = default;
@@ -112,11 +118,11 @@
 {
     return HTMLDocumentParser::create(*this);
 }
 
 // https://html.spec.whatwg.org/multipage/dom.html#dom-document-nameditem
-Optional<Variant<RefPtr<WindowProxy>, RefPtr<Element>, RefPtr<HTMLCollection>>> HTMLDocument::namedItem(const AtomicString& name)
+Optional<Variant<RefPtr<WindowProxy>, RefPtr<Element>, RefPtr<HTMLCollection>>> HTMLDocument::namedItem(const AtomString& name)
 {
     if (name.isNull() || !hasDocumentNamedItem(*name.impl()))
         return WTF::nullopt;
 
     if (UNLIKELY(documentNamedItemContainsMultipleElements(*name.impl()))) {
@@ -132,11 +138,11 @@
     }
 
     return Variant<RefPtr<WindowProxy>, RefPtr<Element>, RefPtr<HTMLCollection>> { RefPtr<Element> { &element } };
 }
 
-Vector<AtomicString> HTMLDocument::supportedPropertyNames() const
+Vector<AtomString> HTMLDocument::supportedPropertyNames() const
 {
     // https://html.spec.whatwg.org/multipage/dom.html#dom-document-namedItem-which
     //
     // ... The supported property names of a Document object document at any moment consist of the following, in
     // tree order according to the element that contributed them, ignoring later duplicates, and with values from
@@ -152,27 +158,27 @@
 
     // FIXME: Implement.
     return { };
 }
 
-void HTMLDocument::addDocumentNamedItem(const AtomicStringImpl& name, Element& item)
+void HTMLDocument::addDocumentNamedItem(const AtomStringImpl& name, Element& item)
 {
     m_documentNamedItem.add(name, item, *this);
-    addImpureProperty(AtomicString(const_cast<AtomicStringImpl*>(&name)));
+    addImpureProperty(AtomString(const_cast<AtomStringImpl*>(&name)));
 }
 
-void HTMLDocument::removeDocumentNamedItem(const AtomicStringImpl& name, Element& item)
+void HTMLDocument::removeDocumentNamedItem(const AtomStringImpl& name, Element& item)
 {
     m_documentNamedItem.remove(name, item);
 }
 
-void HTMLDocument::addWindowNamedItem(const AtomicStringImpl& name, Element& item)
+void HTMLDocument::addWindowNamedItem(const AtomStringImpl& name, Element& item)
 {
     m_windowNamedItem.add(name, item, *this);
 }
 
-void HTMLDocument::removeWindowNamedItem(const AtomicStringImpl& name, Element& item)
+void HTMLDocument::removeWindowNamedItem(const AtomStringImpl& name, Element& item)
 {
     m_windowNamedItem.remove(name, item);
 }
 
 bool HTMLDocument::isCaseSensitiveAttribute(const QualifiedName& attributeName)
@@ -225,11 +231,11 @@
             &typeAttr.get(),
             &valignAttr.get(),
             &valuetypeAttr.get(),
             &vlinkAttr.get(),
         };
-        HashSet<AtomicString> set;
+        HashSet<AtomString> set;
         for (auto* name : names)
             set.add(name->localName());
         return set;
     }());
 
@@ -244,9 +250,9 @@
     return !!childrenOfType<HTMLFrameSetElement>(*documentElement()).first();
 }
 
 Ref<Document> HTMLDocument::cloneDocumentWithoutChildren() const
 {
-    return create(nullptr, url());
+    return create(sessionID(), nullptr, url());
 }
 
 }
