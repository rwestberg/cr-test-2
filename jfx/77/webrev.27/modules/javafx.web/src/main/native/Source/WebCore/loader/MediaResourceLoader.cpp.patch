diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/MediaResourceLoader.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/MediaResourceLoader.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/MediaResourceLoader.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/MediaResourceLoader.cpp
@@ -41,11 +41,11 @@
 
 namespace WebCore {
 
 MediaResourceLoader::MediaResourceLoader(Document& document, HTMLMediaElement& mediaElement, const String& crossOriginMode)
     : ContextDestructionObserver(&document)
-    , m_document(&document)
+    , m_document(makeWeakPtr(document))
     , m_mediaElement(makeWeakPtr(mediaElement))
     , m_crossOriginMode(crossOriginMode)
 {
 }
 
@@ -95,20 +95,20 @@
         DefersLoadingPolicy::AllowDefersLoading,
         cachingPolicy };
     loaderOptions.destination = m_mediaElement && !m_mediaElement->isVideo() ? FetchOptions::Destination::Audio : FetchOptions::Destination::Video;
     auto cachedRequest = createPotentialAccessControlRequest(WTFMove(request), *m_document, m_crossOriginMode, WTFMove(loaderOptions));
     if (m_mediaElement)
-        cachedRequest.setInitiator(*m_mediaElement.get());
+        cachedRequest.setInitiator(*m_mediaElement);
 
     auto resource = m_document->cachedResourceLoader().requestMedia(WTFMove(cachedRequest)).value_or(nullptr);
     if (!resource)
         return nullptr;
 
     Ref<MediaResource> mediaResource = MediaResource::create(*this, resource);
     m_resources.add(mediaResource.ptr());
 
-    return WTFMove(mediaResource);
+    return mediaResource;
 }
 
 void MediaResourceLoader::removeResource(MediaResource& mediaResource)
 {
     ASSERT(m_resources.contains(&mediaResource));
