diff a/modules/javafx.web/src/main/native/Source/WebCore/css/DOMMatrixReadOnly.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/DOMMatrixReadOnly.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/DOMMatrixReadOnly.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/DOMMatrixReadOnly.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -34,14 +34,17 @@
 #include "StyleProperties.h"
 #include "TransformFunctions.h"
 #include <JavaScriptCore/GenericTypedArrayViewInlines.h>
 #include <JavaScriptCore/HeapInlines.h>
 #include <JavaScriptCore/JSGenericTypedArrayViewInlines.h>
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/text/StringBuilder.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(DOMMatrixReadOnly);
+
 // https://drafts.fxtf.org/geometry/#dom-dommatrixreadonly-dommatrixreadonly
 ExceptionOr<Ref<DOMMatrixReadOnly>> DOMMatrixReadOnly::create(ScriptExecutionContext& scriptExecutionContext, Optional<Variant<String, Vector<double>>>&& init)
 {
     if (!init)
         return adoptRef(*new DOMMatrixReadOnly);
@@ -243,11 +246,11 @@
             return Exception { SyntaxError };
         if (operation->is3DOperation())
             matrix.is2D = false;
     }
 
-    return WTFMove(matrix);
+    return matrix;
 }
 
 // https://drafts.fxtf.org/geometry/#dom-dommatrix-setmatrixvalue
 ExceptionOr<void> DOMMatrixReadOnly::setMatrixValue(const String& string)
 {
@@ -399,58 +402,12 @@
 ExceptionOr<String> DOMMatrixReadOnly::toString() const
 {
     if (!m_matrix.containsOnlyFiniteValues())
         return Exception { InvalidStateError, "Matrix contains non-finite values"_s };
 
-    StringBuilder builder;
-    if (is2D()) {
-        builder.appendLiteral("matrix(");
-        builder.appendECMAScriptNumber(m_matrix.a());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.b());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.c());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.d());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.e());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.f());
-    } else {
-        builder.appendLiteral("matrix3d(");
-        builder.appendECMAScriptNumber(m_matrix.m11());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.m12());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.m13());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.m14());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.m21());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.m22());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.m23());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.m24());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.m31());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.m32());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.m33());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.m34());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.m41());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.m42());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.m43());
-        builder.appendLiteral(", ");
-        builder.appendECMAScriptNumber(m_matrix.m44());
-    }
-    builder.append(')');
-    return builder.toString();
+    if (is2D())
+        return makeString("matrix(", m_matrix.a(), ", ", m_matrix.b(), ", ", m_matrix.c(), ", ", m_matrix.d(), ", ", m_matrix.e(), ", ", m_matrix.f(), ')');
+
+    return makeString("matrix3d(", m_matrix.m11(), ", ", m_matrix.m12(), ", ", m_matrix.m13(), ", ", m_matrix.m14(), ", ", m_matrix.m21(), ", ", m_matrix.m22(), ", ", m_matrix.m23(), ", ", m_matrix.m24(), ", ", m_matrix.m31(), ", ", m_matrix.m32(), ", ", m_matrix.m33(), ", ", m_matrix.m34(), ", ", m_matrix.m41(), ", ", m_matrix.m42(), ", ", m_matrix.m43(), ", ", m_matrix.m44(), ')');
 }
 
 } // namespace WebCore
