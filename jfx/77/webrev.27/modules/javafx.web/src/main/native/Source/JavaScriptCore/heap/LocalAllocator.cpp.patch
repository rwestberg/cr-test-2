diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/LocalAllocator.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/LocalAllocator.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/LocalAllocator.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/LocalAllocator.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -25,12 +25,16 @@
 
 #include "config.h"
 #include "LocalAllocator.h"
 
 #include "AllocatingScope.h"
+#include "FreeListInlines.h"
+#include "GCDeferralContext.h"
+#include "JSCInlines.h"
 #include "LocalAllocatorInlines.h"
 #include "Options.h"
+#include "SuperSampler.h"
 
 namespace JSC {
 
 LocalAllocator::LocalAllocator(BlockDirectory* directory)
     : m_directory(directory)
@@ -108,11 +112,11 @@
 
 void* LocalAllocator::allocateSlowCase(GCDeferralContext* deferralContext, AllocationFailureMode failureMode)
 {
     SuperSamplerScope superSamplerScope(false);
     Heap& heap = *m_directory->m_heap;
-    ASSERT(heap.vm()->currentThreadIsHoldingAPILock());
+    ASSERT(heap.vm().currentThreadIsHoldingAPILock());
     doTestCollectionsIfNeeded(deferralContext);
 
     ASSERT(!m_directory->markedSpace().isIterating());
     heap.didAllocate(m_freeList.originalSize());
 
@@ -182,12 +186,11 @@
 
         if (void* result = tryAllocateIn(block))
             return result;
     }
 
-    if (Options::stealEmptyBlocksFromOtherAllocators()
-        && (Options::tradeDestructorBlocks() || !m_directory->needsDestruction())) {
+    if (Options::stealEmptyBlocksFromOtherAllocators()) {
         if (MarkedBlock::Handle* block = m_directory->m_subspace->findEmptyBlockToSteal()) {
             RELEASE_ASSERT(block->alignedMemoryAllocator() == m_directory->m_subspace->alignedMemoryAllocator());
 
             block->sweep(nullptr);
 
