diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionRareData.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionRareData.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionRareData.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionRareData.h
@@ -26,10 +26,11 @@
 #pragma once
 
 #include "InternalFunctionAllocationProfile.h"
 #include "JSCast.h"
 #include "ObjectAllocationProfile.h"
+#include "PackedCellPtr.h"
 #include "Watchpoint.h"
 
 namespace JSC {
 
 class JSGlobalObject;
@@ -58,16 +59,19 @@
 
     static void visitChildren(JSCell*, SlotVisitor&);
 
     DECLARE_INFO;
 
-    static inline ptrdiff_t offsetOfObjectAllocationProfile()
-    {
-        return OBJECT_OFFSETOF(FunctionRareData, m_objectAllocationProfile);
-    }
+    static inline ptrdiff_t offsetOfObjectAllocationProfile() { return OBJECT_OFFSETOF(FunctionRareData, m_objectAllocationProfile); }
+    static inline ptrdiff_t offsetOfObjectAllocationProfileWatchpoint() { return OBJECT_OFFSETOF(FunctionRareData, m_objectAllocationProfileWatchpoint); }
+    static inline ptrdiff_t offsetOfInternalFunctionAllocationProfile() { return OBJECT_OFFSETOF(FunctionRareData, m_internalFunctionAllocationProfile); }
+    static inline ptrdiff_t offsetOfBoundFunctionStructure() { return OBJECT_OFFSETOF(FunctionRareData, m_boundFunctionStructure); }
+    static inline ptrdiff_t offsetOfAllocationProfileClearingWatchpoint() { return OBJECT_OFFSETOF(FunctionRareData, m_allocationProfileClearingWatchpoint); }
+    static inline ptrdiff_t offsetOfHasReifiedLength() { return OBJECT_OFFSETOF(FunctionRareData, m_hasReifiedLength); }
+    static inline ptrdiff_t offsetOfHasReifiedName() { return OBJECT_OFFSETOF(FunctionRareData, m_hasReifiedName); }
 
-    ObjectAllocationProfile* objectAllocationProfile()
+    ObjectAllocationProfileWithPrototype* objectAllocationProfile()
     {
         return &m_objectAllocationProfile;
     }
 
     Structure* objectAllocationStructure() { return m_objectAllocationProfile.structure(); }
@@ -101,34 +105,18 @@
     void setHasReifiedLength() { m_hasReifiedLength = true; }
     bool hasReifiedName() const { return m_hasReifiedName; }
     void setHasReifiedName() { m_hasReifiedName = true; }
 
     bool hasAllocationProfileClearingWatchpoint() const { return !!m_allocationProfileClearingWatchpoint; }
-    Watchpoint* createAllocationProfileClearingWatchpoint()
-    {
-        RELEASE_ASSERT(!hasAllocationProfileClearingWatchpoint());
-        m_allocationProfileClearingWatchpoint = std::make_unique<AllocationProfileClearingWatchpoint>(this);
-        return m_allocationProfileClearingWatchpoint.get();
-    }
+    Watchpoint* createAllocationProfileClearingWatchpoint();
+    class AllocationProfileClearingWatchpoint;
 
 protected:
     FunctionRareData(VM&);
     ~FunctionRareData();
 
 private:
-
-    class AllocationProfileClearingWatchpoint : public Watchpoint {
-    public:
-        AllocationProfileClearingWatchpoint(FunctionRareData* rareData)
-            : m_rareData(rareData)
-        { }
-    protected:
-        void fireInternal(VM&, const FireDetail&) override;
-    private:
-        FunctionRareData* m_rareData;
-    };
-
     friend class LLIntOffsetsExtractor;
 
     // Ideally, there would only be one allocation profile for subclassing but due to Reflect.construct we
     // have two. There are some pros and cons in comparison to our current system to using the same profile
     // for both JS constructors and subclasses of builtin constructors:
@@ -140,15 +128,36 @@
     //      `Reflect.construct(Array, args, myConstructor)` since myConstructor will be the new.target of Array
     //      the Array constructor will set the allocation profile of myConstructor to hold an Array structure
     //
     // We don't really care about 1) since this memory is rare and small in total. 2) is unfortunate but is
     // probably outweighed by the cost of 3).
-    ObjectAllocationProfile m_objectAllocationProfile;
+    ObjectAllocationProfileWithPrototype m_objectAllocationProfile;
     InlineWatchpointSet m_objectAllocationProfileWatchpoint;
     InternalFunctionAllocationProfile m_internalFunctionAllocationProfile;
     WriteBarrier<Structure> m_boundFunctionStructure;
     std::unique_ptr<AllocationProfileClearingWatchpoint> m_allocationProfileClearingWatchpoint;
     bool m_hasReifiedLength { false };
     bool m_hasReifiedName { false };
 };
 
+class FunctionRareData::AllocationProfileClearingWatchpoint final : public Watchpoint {
+public:
+    AllocationProfileClearingWatchpoint(FunctionRareData* rareData)
+        : Watchpoint(Watchpoint::Type::FunctionRareDataAllocationProfileClearing)
+        , m_rareData(rareData)
+    { }
+
+    void fireInternal(VM&, const FireDetail&);
+
+private:
+    // Own destructor may not be called. Keep members trivially destructible.
+    JSC_WATCHPOINT_FIELD(PackedCellPtr<FunctionRareData>, m_rareData);
+};
+
+inline Watchpoint* FunctionRareData::createAllocationProfileClearingWatchpoint()
+{
+    RELEASE_ASSERT(!hasAllocationProfileClearingWatchpoint());
+    m_allocationProfileClearingWatchpoint = makeUnique<AllocationProfileClearingWatchpoint>(this);
+    return m_allocationProfileClearingWatchpoint.get();
+}
+
 } // namespace JSC
