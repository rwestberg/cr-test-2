diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/DebugHeap.cpp b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/DebugHeap.cpp
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/DebugHeap.cpp
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/DebugHeap.cpp
@@ -34,10 +34,12 @@
 
 namespace bmalloc {
 
 DebugHeap* debugHeapCache { nullptr };
 
+DEFINE_STATIC_PER_PROCESS_STORAGE(DebugHeap);
+
 #if BOS(DARWIN)
 
 DebugHeap::DebugHeap(std::lock_guard<Mutex>&)
     : m_zone(malloc_create_zone(0, 0))
     , m_pageSize(vmPageSize())
@@ -72,10 +74,23 @@
 void DebugHeap::free(void* object)
 {
     malloc_zone_free(m_zone, object);
 }
 
+void DebugHeap::scavenge()
+{
+    // Currently |goal| does not affect on the behavior of malloc_zone_pressure_relief if (1) we only scavenge one zone and (2) it is not nanomalloc.
+    constexpr size_t goal = 0;
+    malloc_zone_pressure_relief(m_zone, goal);
+}
+
+void DebugHeap::dump()
+{
+    constexpr bool verbose = true;
+    malloc_zone_print(m_zone, verbose);
+}
+
 #else
 
 DebugHeap::DebugHeap(std::lock_guard<Mutex>&)
     : m_pageSize(vmPageSize())
 {
@@ -111,10 +126,18 @@
 void DebugHeap::free(void* object)
 {
     ::free(object);
 }
 
+void DebugHeap::scavenge()
+{
+}
+
+void DebugHeap::dump()
+{
+}
+
 #endif
 
 // FIXME: This looks an awful lot like the code in wtf/Gigacage.cpp for large allocation.
 // https://bugs.webkit.org/show_bug.cgi?id=175086
 
@@ -124,11 +147,11 @@
     size = roundUpToMultipleOf(m_pageSize, size);
     void* result = tryVMAllocate(alignment, size);
     if (!result)
         return nullptr;
     {
-        std::lock_guard<std::mutex> locker(m_lock);
+        std::lock_guard<Mutex> locker(mutex());
         m_sizeMap[result] = size;
     }
     return result;
 }
 
@@ -137,11 +160,11 @@
     if (!base)
         return;
 
     size_t size;
     {
-        std::lock_guard<std::mutex> locker(m_lock);
+        std::lock_guard<Mutex> locker(mutex());
         size = m_sizeMap[base];
         size_t numErased = m_sizeMap.erase(base);
         RELEASE_BASSERT(numErased == 1);
     }
 
