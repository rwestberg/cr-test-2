diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUShaderModule.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUShaderModule.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUShaderModule.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUShaderModule.h
@@ -25,10 +25,11 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
+#include "WHLSLPrepare.h"
 #include <wtf/RefCounted.h>
 #include <wtf/RefPtr.h>
 #include <wtf/RetainPtr.h>
 
 OBJC_PROTOCOL(MTLLibrary);
@@ -42,18 +43,21 @@
 using PlatformShaderModule = MTLLibrary;
 using PlatformShaderModuleSmartPtr = RetainPtr<MTLLibrary>;
 
 class GPUShaderModule : public RefCounted<GPUShaderModule> {
 public:
-    static RefPtr<GPUShaderModule> create(const GPUDevice&, GPUShaderModuleDescriptor&&);
+    static RefPtr<GPUShaderModule> tryCreate(const GPUDevice&, const GPUShaderModuleDescriptor&);
 
-    PlatformShaderModule* platformShaderModule() const { return m_platformShaderModule.get(); }
+    PlatformShaderModule* platformShaderModule() const { return m_whlslModule ? nullptr : m_platformShaderModule.get(); }
+    const WHLSL::ShaderModule* whlslModule() const { return m_whlslModule.get(); }
 
 private:
     GPUShaderModule(PlatformShaderModuleSmartPtr&&);
+    GPUShaderModule(UniqueRef<WHLSL::ShaderModule>&& whlslModule);
 
     PlatformShaderModuleSmartPtr m_platformShaderModule;
+    std::unique_ptr<WHLSL::ShaderModule> m_whlslModule;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(WEBGPU)
