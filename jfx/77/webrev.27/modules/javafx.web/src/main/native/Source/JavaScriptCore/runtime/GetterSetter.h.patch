diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GetterSetter.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GetterSetter.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GetterSetter.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GetterSetter.h
@@ -1,9 +1,9 @@
 /*
  *  Copyright (C) 1999-2001 Harri Porten (porten@kde.org)
  *  Copyright (C) 2001 Peter Kelly (pmk@post.com)
- *  Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2014 Apple Inc. All rights reserved.
+ *  Copyright (C) 2003-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Library General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -85,12 +85,12 @@
         JSObject* result = getter();
         WTF::loadLoadFence();
         return result;
     }
 
-    bool isGetterNull() const { return !!jsDynamicCast<NullGetterFunction*>(*m_getter.get()->vm(), m_getter.get()); }
-    bool isSetterNull() const { return !!jsDynamicCast<NullSetterFunction*>(*m_setter.get()->vm(), m_setter.get()); }
+    bool isGetterNull() const { return !!jsDynamicCast<NullGetterFunction*>(m_getter.get()->vm(), m_getter.get()); }
+    bool isSetterNull() const { return !!jsDynamicCast<NullSetterFunction*>(m_setter.get()->vm(), m_setter.get()); }
 
     JSObject* setter() const { return m_setter.get(); }
 
     JSObject* setterConcurrently() const
     {
