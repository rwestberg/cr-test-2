diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_generate_combined_header.py b/modules/javafx.web/src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_generate_combined_header.py
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_generate_combined_header.py
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_generate_combined_header.py
@@ -31,12 +31,18 @@
 from string import Template
 
 from builtins_generator import BuiltinsGenerator
 from builtins_templates import BuiltinsGeneratorTemplates as Templates
 
-log = logging.getLogger('global')
 
+def get_var_name(function):
+    var_name = function.function_name
+    if function.is_constructor:
+        return var_name[:1].lower() + var_name[1:] + 'Constructor'
+    return var_name
+
+log = logging.getLogger('global')
 
 class BuiltinsCombinedHeaderGenerator(BuiltinsGenerator):
     def __init__(self, model):
         BuiltinsGenerator.__init__(self, model)
 
@@ -162,12 +168,13 @@
         lines.append("#define %(macroPrefix)s_FOREACH_BUILTIN_FUNCTION_PRIVATE_GLOBAL_NAME(macro) \\" % args)
         functions = [function for function in self.model().all_functions() if function.is_global_private]
         functions.sort(key=lambda x: x.function_name)
         for function in functions:
             function_args = {
+                'varName': get_var_name(function),
                 'funcName': function.function_name,
                 'codeName': BuiltinsGenerator.mangledNameForFunction(function),
             }
 
-            lines.append("    macro(%(funcName)s, %(codeName)s) \\" % function_args)
+            lines.append("    macro(%(varName)s, %(funcName)s, %(codeName)s) \\" % function_args)
 
         return '\n'.join(lines)
