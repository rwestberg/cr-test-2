diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/LargeAllocation.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/LargeAllocation.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/LargeAllocation.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/LargeAllocation.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -37,11 +37,13 @@
 // objects directly using malloc, and put the LargeAllocation header just before them. We can detect
 // when a HeapCell* is a LargeAllocation because it will have the MarkedBlock::atomSize / 2 bit set.
 
 class LargeAllocation : public BasicRawSentinelNode<LargeAllocation> {
 public:
-    static LargeAllocation* tryCreate(Heap&, size_t, Subspace*);
+    static LargeAllocation* tryCreate(Heap&, size_t, Subspace*, unsigned indexInSpace);
+
+    LargeAllocation* tryReallocate(size_t, Subspace*);
 
     ~LargeAllocation();
 
     static LargeAllocation* fromCell(const void* cell)
     {
@@ -61,13 +63,16 @@
     Subspace* subspace() const { return m_subspace; }
 
     void lastChanceToFinalize();
 
     Heap* heap() const { return m_weakSet.heap(); }
-    VM* vm() const { return m_weakSet.vm(); }
+    VM& vm() const { return m_weakSet.vm(); }
     WeakSet& weakSet() { return m_weakSet; }
 
+    unsigned indexInSpace() { return m_indexInSpace; }
+    void setIndexInSpace(unsigned indexInSpace) { m_indexInSpace = indexInSpace; }
+
     void shrink();
 
     void visitWeakSet(SlotVisitor&);
     void reapWeakSet();
 
@@ -138,21 +143,25 @@
 
     void destroy();
 
     void dump(PrintStream&) const;
 
-private:
-    LargeAllocation(Heap&, size_t, Subspace*);
-
     static const unsigned alignment = MarkedBlock::atomSize;
     static const unsigned halfAlignment = alignment / 2;
 
+private:
+    LargeAllocation(Heap&, size_t, Subspace*, unsigned indexInSpace, bool adjustedAlignment);
+
     static unsigned headerSize();
 
+    void* basePointer() const;
+
     size_t m_cellSize;
-    bool m_isNewlyAllocated;
-    bool m_hasValidCell;
+    unsigned m_indexInSpace { 0 };
+    bool m_isNewlyAllocated : 1;
+    bool m_hasValidCell : 1;
+    bool m_adjustedAlignment : 1;
     Atomic<bool> m_isMarked;
     CellAttributes m_attributes;
     Subspace* m_subspace;
     WeakSet m_weakSet;
 };
@@ -160,7 +169,14 @@
 inline unsigned LargeAllocation::headerSize()
 {
     return ((sizeof(LargeAllocation) + halfAlignment - 1) & ~(halfAlignment - 1)) | halfAlignment;
 }
 
+inline void* LargeAllocation::basePointer() const
+{
+    if (m_adjustedAlignment)
+        return bitwise_cast<char*>(this) - halfAlignment;
+    return bitwise_cast<void*>(this);
+}
+
 } // namespace JSC
 
