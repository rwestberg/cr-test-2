diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/generateWasmOpsHeader.py b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/generateWasmOpsHeader.py
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/generateWasmOpsHeader.py
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/generateWasmOpsHeader.py
@@ -53,21 +53,21 @@
 type_definitions = ["#define FOR_EACH_WASM_TYPE(macro)"]
 type_definitions.extend([t for t in typeMacroizer()])
 type_definitions = "".join(type_definitions)
 
 
-def opcodeMacroizer(filter):
+def opcodeMacroizer(filter, opcodeField="value"):
     inc = 0
     for op in wasm.opcodeIterator(filter):
         b3op = "Oops"
         if isSimple(op["opcode"]):
             b3op = op["opcode"]["b3op"]
-        yield cppMacro(op["name"], op["opcode"]["value"], b3op, inc)
+        yield cppMacro(op["name"], op["opcode"][opcodeField], b3op, inc)
         inc += 1
 
 defines = ["#define FOR_EACH_WASM_SPECIAL_OP(macro)"]
-defines.extend([op for op in opcodeMacroizer(lambda op: not (isUnary(op) or isBinary(op) or op["category"] == "control" or op["category"] == "memory"))])
+defines.extend([op for op in opcodeMacroizer(lambda op: not (isUnary(op) or isBinary(op) or op["category"] == "control" or op["category"] == "memory" or op["category"] == "exttable"))])
 defines.append("\n\n#define FOR_EACH_WASM_CONTROL_FLOW_OP(macro)")
 defines.extend([op for op in opcodeMacroizer(lambda op: op["category"] == "control")])
 defines.append("\n\n#define FOR_EACH_WASM_SIMPLE_UNARY_OP(macro)")
 defines.extend([op for op in opcodeMacroizer(lambda op: isUnary(op) and isSimple(op))])
 defines.append("\n\n#define FOR_EACH_WASM_UNARY_OP(macro) \\\n    FOR_EACH_WASM_SIMPLE_UNARY_OP(macro)")
@@ -78,10 +78,12 @@
 defines.extend([op for op in opcodeMacroizer(lambda op: isBinary(op) and not (isSimple(op)))])
 defines.append("\n\n#define FOR_EACH_WASM_MEMORY_LOAD_OP(macro)")
 defines.extend([op for op in opcodeMacroizer(lambda op: (op["category"] == "memory" and len(op["return"]) == 1))])
 defines.append("\n\n#define FOR_EACH_WASM_MEMORY_STORE_OP(macro)")
 defines.extend([op for op in opcodeMacroizer(lambda op: (op["category"] == "memory" and len(op["return"]) == 0))])
+defines.append("\n\n#define FOR_EACH_WASM_EXT_TABLE_OP(macro)")
+defines.extend([op for op in opcodeMacroizer(lambda op: (op["category"] == "exttable"), "extendedOp")])
 defines.append("\n\n")
 
 defines = "".join(defines)
 
 opValueSet = set([op for op in wasm.opcodeIterator(lambda op: True, lambda op: opcodes[op]["value"])])
@@ -93,11 +95,11 @@
     return -(-a // b)
 
 
 def bitSet():
     v = ""
-    for i in range(ceilDiv(maxOpValue, 8)):
+    for i in range(ceilDiv(maxOpValue + 1, 8)):
         entry = 0
         for j in range(8):
             if i * 8 + j in opValueSet:
                 entry |= 1 << j
         v += (", " if i else "") + hex(entry)
@@ -200,11 +202,12 @@
     FOR_EACH_WASM_SPECIAL_OP(macro) \\
     FOR_EACH_WASM_CONTROL_FLOW_OP(macro) \\
     FOR_EACH_WASM_UNARY_OP(macro) \\
     FOR_EACH_WASM_BINARY_OP(macro) \\
     FOR_EACH_WASM_MEMORY_LOAD_OP(macro) \\
-    FOR_EACH_WASM_MEMORY_STORE_OP(macro)
+    FOR_EACH_WASM_MEMORY_STORE_OP(macro) \\
+    macro(ExtTable, 0xFC, Oops, 0)
 
 #define CREATE_ENUM_VALUE(name, id, b3op, inc) name = id,
 
 enum OpType : uint8_t {
     FOR_EACH_WASM_OP(CREATE_ENUM_VALUE)
@@ -232,10 +235,14 @@
 
 enum class StoreOpType : uint8_t {
     FOR_EACH_WASM_MEMORY_STORE_OP(CREATE_ENUM_VALUE)
 };
 
+enum class ExtTableOpType : uint8_t {
+    FOR_EACH_WASM_EXT_TABLE_OP(CREATE_ENUM_VALUE)
+};
+
 #undef CREATE_ENUM_VALUE
 
 inline bool isControlOp(OpType op)
 {
     switch (op) {
