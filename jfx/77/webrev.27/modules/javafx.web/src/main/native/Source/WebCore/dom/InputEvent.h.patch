diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/InputEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/InputEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/InputEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/InputEvent.h
@@ -37,14 +37,14 @@
 public:
     struct Init : UIEventInit {
         String data;
     };
 
-    static Ref<InputEvent> create(const AtomicString& eventType, const String& inputType, IsCancelable, RefPtr<WindowProxy>&& view,
+    static Ref<InputEvent> create(const AtomString& eventType, const String& inputType, IsCancelable, RefPtr<WindowProxy>&& view,
         const String& data, RefPtr<DataTransfer>&&, const Vector<RefPtr<StaticRange>>& targetRanges, int detail);
 
-    static Ref<InputEvent> create(const AtomicString& type, const Init& initializer)
+    static Ref<InputEvent> create(const AtomString& type, const Init& initializer)
     {
         return adoptRef(*new InputEvent(type, initializer));
     }
 
     bool isInputEvent() const override { return true; }
@@ -53,12 +53,12 @@
     const String& data() const { return m_data; }
     RefPtr<DataTransfer> dataTransfer() const;
     const Vector<RefPtr<StaticRange>>& getTargetRanges() { return m_targetRanges; }
 
 private:
-    InputEvent(const AtomicString& eventType, const String& inputType, IsCancelable, RefPtr<WindowProxy>&&, const String& data, RefPtr<DataTransfer>&&, const Vector<RefPtr<StaticRange>>& targetRanges, int detail);
-    InputEvent(const AtomicString& eventType, const Init&);
+    InputEvent(const AtomString& eventType, const String& inputType, IsCancelable, RefPtr<WindowProxy>&&, const String& data, RefPtr<DataTransfer>&&, const Vector<RefPtr<StaticRange>>& targetRanges, int detail);
+    InputEvent(const AtomString& eventType, const Init&);
 
     String m_inputType;
     String m_data;
     RefPtr<DataTransfer> m_dataTransfer;
     Vector<RefPtr<StaticRange>> m_targetRanges;
