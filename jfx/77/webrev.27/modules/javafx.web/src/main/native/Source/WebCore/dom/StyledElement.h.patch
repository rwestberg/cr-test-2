diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/StyledElement.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/StyledElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/StyledElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/StyledElement.h
@@ -61,34 +61,34 @@
 #if ENABLE(CSS_TYPED_OM)
     StylePropertyMap& ensureAttributeStyleMap();
 #endif
 
     const StyleProperties* presentationAttributeStyle() const;
-    virtual void collectStyleForPresentationAttribute(const QualifiedName&, const AtomicString&, MutableStyleProperties&) { }
+    virtual void collectStyleForPresentationAttribute(const QualifiedName&, const AtomString&, MutableStyleProperties&) { }
 
 protected:
     StyledElement(const QualifiedName& name, Document& document, ConstructionType type)
         : Element(name, document, type)
     {
     }
 
-    void attributeChanged(const QualifiedName&, const AtomicString& oldValue, const AtomicString& newValue, AttributeModificationReason = ModifiedDirectly) override;
+    void attributeChanged(const QualifiedName&, const AtomString& oldValue, const AtomString& newValue, AttributeModificationReason = ModifiedDirectly) override;
 
     virtual bool isPresentationAttribute(const QualifiedName&) const { return false; }
 
     void addPropertyToPresentationAttributeStyle(MutableStyleProperties&, CSSPropertyID, CSSValueID identifier);
     void addPropertyToPresentationAttributeStyle(MutableStyleProperties&, CSSPropertyID, double value, CSSPrimitiveValue::UnitType);
     void addPropertyToPresentationAttributeStyle(MutableStyleProperties&, CSSPropertyID, const String& value);
 
     void addSubresourceAttributeURLs(ListHashSet<URL>&) const override;
 
 private:
-    void styleAttributeChanged(const AtomicString& newStyleString, AttributeModificationReason);
+    void styleAttributeChanged(const AtomString& newStyleString, AttributeModificationReason);
 
     void inlineStyleChanged();
     PropertySetCSSStyleDeclaration* inlineStyleCSSOMWrapper();
-    void setInlineStyleFromString(const AtomicString&);
+    void setInlineStyleFromString(const AtomString&);
     MutableStyleProperties& ensureMutableInlineStyle();
 
     void rebuildPresentationAttributeStyle();
 };
 
