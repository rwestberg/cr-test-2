diff a/modules/javafx.web/src/main/native/Source/WebCore/css/RuleFeature.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/RuleFeature.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/RuleFeature.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/RuleFeature.cpp
@@ -172,20 +172,20 @@
     if (ruleData.containsUncommonAttributeSelector())
         uncommonAttributeRules.append(RuleFeature(ruleData.rule(), ruleData.selectorIndex(), ruleData.selectorListIndex()));
 
     for (auto& nameAndMatch : selectorFeatures.classes) {
         classRules.ensure(nameAndMatch.first, [] {
-            return std::make_unique<Vector<RuleFeature>>();
+            return makeUnique<Vector<RuleFeature>>();
         }).iterator->value->append(RuleFeature(ruleData.rule(), ruleData.selectorIndex(), ruleData.selectorListIndex(), nameAndMatch.second));
         if (nameAndMatch.second == MatchElement::Host)
             classesAffectingHost.add(nameAndMatch.first);
     }
     for (auto& selectorAndMatch : selectorFeatures.attributes) {
         auto* selector = selectorAndMatch.first;
         auto matchElement = selectorAndMatch.second;
         attributeRules.ensure(selector->attribute().localName().convertToASCIILowercase(), [] {
-            return std::make_unique<Vector<RuleFeature>>();
+            return makeUnique<Vector<RuleFeature>>();
         }).iterator->value->append(RuleFeature(ruleData.rule(), ruleData.selectorIndex(), ruleData.selectorListIndex(), matchElement, selector));
         if (matchElement == MatchElement::Host)
             attributesAffectingHost.add(selector->attribute().localName().convertToASCIILowercase());
     }
 }
@@ -199,27 +199,27 @@
     contentAttributeNamesInRules.add(other.contentAttributeNamesInRules.begin(), other.contentAttributeNamesInRules.end());
     siblingRules.appendVector(other.siblingRules);
     uncommonAttributeRules.appendVector(other.uncommonAttributeRules);
     for (auto& keyValuePair : other.classRules) {
         classRules.ensure(keyValuePair.key, [] {
-            return std::make_unique<Vector<RuleFeature>>();
+            return makeUnique<Vector<RuleFeature>>();
         }).iterator->value->appendVector(*keyValuePair.value);
     }
     classesAffectingHost.add(other.classesAffectingHost.begin(), other.classesAffectingHost.end());
 
     for (auto& keyValuePair : other.attributeRules) {
         attributeRules.ensure(keyValuePair.key, [] {
-            return std::make_unique<Vector<RuleFeature>>();
+            return makeUnique<Vector<RuleFeature>>();
         }).iterator->value->appendVector(*keyValuePair.value);
     }
     attributesAffectingHost.add(other.attributesAffectingHost.begin(), other.attributesAffectingHost.end());
 
     usesFirstLineRules = usesFirstLineRules || other.usesFirstLineRules;
     usesFirstLetterRules = usesFirstLetterRules || other.usesFirstLetterRules;
 }
 
-void RuleFeatureSet::registerContentAttribute(const AtomicString& attributeName)
+void RuleFeatureSet::registerContentAttribute(const AtomString& attributeName)
 {
     contentAttributeNamesInRules.add(attributeName.convertToASCIILowercase());
     attributeCanonicalLocalNamesInRules.add(attributeName);
     attributeLocalNamesInRules.add(attributeName);
 }
