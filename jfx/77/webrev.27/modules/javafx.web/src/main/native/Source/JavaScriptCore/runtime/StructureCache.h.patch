diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StructureCache.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StructureCache.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StructureCache.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StructureCache.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -27,10 +27,11 @@
 
 #include "IndexingType.h"
 #include "JSTypeInfo.h"
 #include "PrototypeKey.h"
 #include "WeakGCMap.h"
+#include <wtf/Lock.h>
 #include <wtf/TriState.h>
 
 namespace JSC {
 
 class FunctionExecutable;
@@ -49,14 +50,16 @@
 
     void clear() { m_structures.clear(); }
 
     JS_EXPORT_PRIVATE Structure* emptyObjectStructureForPrototype(JSGlobalObject*, JSObject*, unsigned inlineCapacity, bool makePolyProtoStructure = false, FunctionExecutable* = nullptr);
     JS_EXPORT_PRIVATE Structure* emptyStructureForPrototypeFromBaseStructure(JSGlobalObject*, JSObject*, Structure*);
+    JS_EXPORT_PRIVATE Structure* emptyObjectStructureConcurrently(JSGlobalObject*, JSObject* prototype, unsigned inlineCapacity);
 
 private:
     Structure* createEmptyStructure(JSGlobalObject*, JSObject* prototype, const TypeInfo&, const ClassInfo*, IndexingType, unsigned inlineCapacity, bool makePolyProtoStructure, FunctionExecutable*);
 
     using StructureMap = WeakGCMap<PrototypeKey, Structure>;
     StructureMap m_structures;
+    Lock m_lock;
 };
 
 } // namespace JSC
