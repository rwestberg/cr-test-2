diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ArrayBufferView.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ArrayBufferView.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ArrayBufferView.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ArrayBufferView.h
@@ -69,12 +69,12 @@
     }
 
     void* baseAddress() const
     {
         if (isNeutered())
-            return 0;
-        return m_baseAddress.getMayBeNull();
+            return nullptr;
+        return m_baseAddress.getMayBeNull(byteLength());
     }
 
     void* data() const { return baseAddress(); }
 
     unsigned byteOffset() const
@@ -82,11 +82,11 @@
         if (isNeutered())
             return 0;
         return m_byteOffset;
     }
 
-    virtual unsigned byteLength() const = 0;
+    unsigned byteLength() const { return m_byteLength; }
 
     JS_EXPORT_PRIVATE void setNeuterable(bool flag);
     bool isNeuterable() const { return m_isNeuterable; }
 
     JS_EXPORT_PRIVATE virtual ~ArrayBufferView();
@@ -111,17 +111,16 @@
     }
 
     virtual JSArrayBufferView* wrap(ExecState*, JSGlobalObject*) = 0;
 
 protected:
-    JS_EXPORT_PRIVATE ArrayBufferView(RefPtr<ArrayBuffer>&&, unsigned byteOffset);
+    JS_EXPORT_PRIVATE ArrayBufferView(RefPtr<ArrayBuffer>&&, unsigned byteOffset, unsigned byteLength);
 
     inline bool setImpl(ArrayBufferView*, unsigned byteOffset);
 
-    // Caller passes in bufferByteLength to avoid a virtual function call.
-    inline bool setRangeImpl(const void* data, size_t dataByteLength, unsigned byteOffset, unsigned bufferByteLength);
-    inline bool getRangeImpl(void* destination, size_t dataByteLength, unsigned byteOffset, unsigned bufferByteLength);
+    inline bool setRangeImpl(const void* data, size_t dataByteLength, unsigned byteOffset);
+    inline bool getRangeImpl(void* destination, size_t dataByteLength, unsigned byteOffset);
 
     inline bool zeroRangeImpl(unsigned byteOffset, size_t rangeByteLength);
 
     static inline void calculateOffsetAndLength(
         int start, int end, unsigned arraySize,
@@ -146,15 +145,17 @@
         *offset = std::min(buffer.byteLength(), *offset);
         unsigned remainingElements = (buffer.byteLength() - *offset) / sizeof(T);
         *numElements = std::min(remainingElements, *numElements);
     }
 
-    // This is the address of the ArrayBuffer's storage, plus the byte offset.
-    CagedPtr<Gigacage::Primitive, void> m_baseAddress;
-
     unsigned m_byteOffset : 31;
     bool m_isNeuterable : 1;
+    unsigned m_byteLength;
+
+    using BaseAddress = CagedPtr<Gigacage::Primitive, void, tagCagedPtr>;
+    // This is the address of the ArrayBuffer's storage, plus the byte offset.
+    BaseAddress m_baseAddress;
 
 private:
     friend class ArrayBuffer;
     RefPtr<ArrayBuffer> m_buffer;
 };
@@ -171,32 +172,28 @@
     uint8_t* base = static_cast<uint8_t*>(baseAddress());
     memmove(base + byteOffset, array->baseAddress(), array->byteLength());
     return true;
 }
 
-bool ArrayBufferView::setRangeImpl(const void* data, size_t dataByteLength, unsigned byteOffset, unsigned bufferByteLength)
+bool ArrayBufferView::setRangeImpl(const void* data, size_t dataByteLength, unsigned byteOffset)
 {
-    // Do not replace with RELEASE_ASSERT; we want to avoid the virtual byteLength() function call in release.
-    ASSERT_WITH_SECURITY_IMPLICATION(bufferByteLength == byteLength());
-    if (byteOffset > bufferByteLength
-        || byteOffset + dataByteLength > bufferByteLength
+    if (byteOffset > byteLength()
+        || byteOffset + dataByteLength > byteLength()
         || byteOffset + dataByteLength < byteOffset) {
         // Out of range offset or overflow
         return false;
     }
 
     uint8_t* base = static_cast<uint8_t*>(baseAddress());
     memmove(base + byteOffset, data, dataByteLength);
     return true;
 }
 
-bool ArrayBufferView::getRangeImpl(void* destination, size_t dataByteLength, unsigned byteOffset, unsigned bufferByteLength)
+bool ArrayBufferView::getRangeImpl(void* destination, size_t dataByteLength, unsigned byteOffset)
 {
-    // Do not replace with RELEASE_ASSERT; we want to avoid the virtual byteLength() function call in release.
-    ASSERT_WITH_SECURITY_IMPLICATION(bufferByteLength == byteLength());
-    if (byteOffset > bufferByteLength
-        || byteOffset + dataByteLength > bufferByteLength
+    if (byteOffset > byteLength()
+        || byteOffset + dataByteLength > byteLength()
         || byteOffset + dataByteLength < byteOffset) {
         // Out of range offset or overflow
         return false;
     }
 
