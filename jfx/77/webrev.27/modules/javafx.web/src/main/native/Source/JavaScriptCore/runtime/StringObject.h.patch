diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StringObject.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StringObject.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StringObject.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StringObject.h
@@ -1,8 +1,8 @@
 /*
  *  Copyright (C) 1999-2000 Harri Porten (porten@kde.org)
- *  Copyright (C) 2007-2008, 2016 Apple Inc. All rights reserved.
+ *  Copyright (C) 2007-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Lesser General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -30,11 +30,11 @@
     using Base = JSWrapperObject;
     static const unsigned StructureFlags = Base::StructureFlags | OverridesGetOwnPropertySlot | InterceptsGetOwnPropertySlotByIndexEvenWhenLengthIsNotZero | OverridesGetPropertyNames;
 
     static StringObject* create(VM& vm, Structure* structure)
     {
-        JSString* string = jsEmptyString(&vm);
+        JSString* string = jsEmptyString(vm);
         StringObject* object = new (NotNull, allocateCell<StringObject>(vm.heap)) StringObject(vm, structure);
         object->finishCreation(vm, string);
         return object;
     }
     static StringObject* create(VM& vm, Structure* structure, JSString* string)
@@ -83,11 +83,11 @@
 {
     if (originalValue.isString()) {
         ASSERT(asString(originalValue)->value(exec) == string);
         return asString(originalValue);
     }
-    return jsString(exec, string);
+    return jsString(exec->vm(), string);
 }
 
 // Helper that tries to use the JSString substring sharing mechanism if 'originalValue' is a JSString.
 // FIXME: Basically any use of this is bad. toString() returns a JSString* so we don't need to
 // pass around the originalValue; we could just pass around the JSString*. And since we've
@@ -97,9 +97,9 @@
 {
     if (originalValue.isString()) {
         ASSERT(asString(originalValue)->value(exec) == string);
         return jsSubstring(exec, asString(originalValue), offset, length);
     }
-    return jsSubstring(exec, string, offset, length);
+    return jsSubstring(exec->vm(), string, offset, length);
 }
 
 } // namespace JSC
