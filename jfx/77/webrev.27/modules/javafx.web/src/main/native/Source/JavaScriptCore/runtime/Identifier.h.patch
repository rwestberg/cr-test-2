diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Identifier.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Identifier.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Identifier.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Identifier.h
@@ -1,7 +1,7 @@
 /*
- *  Copyright (C) 2003, 2006, 2007, 2008, 2009, 2012 Apple Inc. All rights reserved.
+ *  Copyright (C) 2003-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Library General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -86,11 +86,11 @@
 class Identifier {
     friend class Structure;
 public:
     Identifier() { }
     enum EmptyIdentifierFlag { EmptyIdentifier };
-    Identifier(EmptyIdentifierFlag) : m_string(StringImpl::empty()) { ASSERT(m_string.impl()->isAtomic()); }
+    Identifier(EmptyIdentifierFlag) : m_string(StringImpl::empty()) { ASSERT(m_string.impl()->isAtom()); }
 
     const String& string() const { return m_string; }
     UniquedStringImpl* impl() const { return static_cast<UniquedStringImpl*>(m_string.impl()); }
 
     int length() const { return m_string.length(); }
@@ -109,35 +109,30 @@
     // fromUid keeps symbol-ness of provided StringImpl* while fromString discards it.
     // Use fromUid when constructing Identifier from StringImpl* which may represent symbols.
 
     // Only to be used with string literals.
     template<unsigned charactersCount>
-    static Identifier fromString(VM*, const char (&characters)[charactersCount]);
-    template<unsigned charactersCount>
-    static Identifier fromString(ExecState*, const char (&characters)[charactersCount]);
-    static Identifier fromString(VM*, const LChar*, int length);
-    static Identifier fromString(VM*, const UChar*, int length);
-    static Identifier fromString(VM*, const String&);
-    static Identifier fromString(ExecState*, AtomicStringImpl*);
-    static Identifier fromString(ExecState*, const AtomicString&);
-    static Identifier fromString(ExecState*, const String&);
-    static Identifier fromString(ExecState*, const char*);
-    static Identifier fromString(VM* vm, const Vector<LChar>& characters) { return fromString(vm, characters.data(), characters.size()); }
-
-    static Identifier fromUid(VM*, UniquedStringImpl* uid);
-    static Identifier fromUid(ExecState*, UniquedStringImpl* uid);
+    static Identifier fromString(VM&, const char (&characters)[charactersCount]);
+    static Identifier fromString(VM&, ASCIILiteral);
+    static Identifier fromString(VM&, const LChar*, int length);
+    static Identifier fromString(VM&, const UChar*, int length);
+    static Identifier fromString(VM&, const String&);
+    static Identifier fromString(VM&, AtomStringImpl*);
+    static Identifier fromString(VM&, const AtomString&);
+    static Identifier fromString(VM& vm, SymbolImpl*);
+    static Identifier fromString(VM&, const char*);
+    static Identifier fromString(VM& vm, const Vector<LChar>& characters) { return fromString(vm, characters.data(), characters.size()); }
+
+    static Identifier fromUid(VM&, UniquedStringImpl* uid);
     static Identifier fromUid(const PrivateName&);
     static Identifier fromUid(SymbolImpl&);
 
-    static Identifier createLCharFromUChar(VM* vm, const UChar* s, int length) { return Identifier(vm, add8(vm, s, length)); }
+    static Identifier createLCharFromUChar(VM& vm, const UChar* s, int length) { return Identifier(vm, add8(vm, s, length)); }
 
-    JS_EXPORT_PRIVATE static Identifier from(ExecState*, unsigned y);
-    JS_EXPORT_PRIVATE static Identifier from(ExecState*, int y);
-    static Identifier from(ExecState*, double y);
-    static Identifier from(VM*, unsigned y);
-    static Identifier from(VM*, int y);
-    static Identifier from(VM*, double y);
+    JS_EXPORT_PRIVATE static Identifier from(VM&, unsigned y);
+    JS_EXPORT_PRIVATE static Identifier from(VM&, int y);
+    static Identifier from(VM&, double y);
 
     bool isNull() const { return m_string.isNull(); }
     bool isEmpty() const { return m_string.isEmpty(); }
     bool isSymbol() const { return !isNull() && impl()->isSymbol(); }
     bool isPrivateName() const { return isSymbol() && static_cast<const SymbolImpl*>(impl())->isPrivate(); }
@@ -155,28 +150,27 @@
     static bool equal(const StringImpl*, const LChar*, unsigned length);
     static bool equal(const StringImpl*, const UChar*, unsigned length);
     static bool equal(const StringImpl* a, const StringImpl* b) { return ::equal(a, b); }
 
     // Only to be used with string literals.
-    JS_EXPORT_PRIVATE static Ref<StringImpl> add(VM*, const char*);
-    JS_EXPORT_PRIVATE static Ref<StringImpl> add(ExecState*, const char*);
+    JS_EXPORT_PRIVATE static Ref<StringImpl> add(VM&, const char*);
 
     void dump(PrintStream&) const;
 
 private:
     String m_string;
 
     // Only to be used with string literals.
     template<unsigned charactersCount>
-    Identifier(VM* vm, const char (&characters)[charactersCount]) : m_string(add(vm, characters)) { ASSERT(m_string.impl()->isAtomic()); }
+    Identifier(VM& vm, const char (&characters)[charactersCount]) : m_string(add(vm, characters)) { ASSERT(m_string.impl()->isAtom()); }
 
-    Identifier(VM* vm, const LChar* s, int length) : m_string(add(vm, s, length)) { ASSERT(m_string.impl()->isAtomic()); }
-    Identifier(VM* vm, const UChar* s, int length) : m_string(add(vm, s, length)) { ASSERT(m_string.impl()->isAtomic()); }
-    Identifier(ExecState*, AtomicStringImpl*);
-    Identifier(ExecState*, const AtomicString&);
-    Identifier(VM* vm, const String& string) : m_string(add(vm, string.impl())) { ASSERT(m_string.impl()->isAtomic()); }
-    Identifier(VM* vm, StringImpl* rep) : m_string(add(vm, rep)) { ASSERT(m_string.impl()->isAtomic()); }
+    Identifier(VM& vm, const LChar* s, int length) : m_string(add(vm, s, length)) { ASSERT(m_string.impl()->isAtom()); }
+    Identifier(VM& vm, const UChar* s, int length) : m_string(add(vm, s, length)) { ASSERT(m_string.impl()->isAtom()); }
+    Identifier(VM&, AtomStringImpl*);
+    Identifier(VM&, const AtomString&);
+    Identifier(VM& vm, const String& string) : m_string(add(vm, string.impl())) { ASSERT(m_string.impl()->isAtom()); }
+    Identifier(VM& vm, StringImpl* rep) : m_string(add(vm, rep)) { ASSERT(m_string.impl()->isAtom()); }
 
     Identifier(SymbolImpl& uid)
         : m_string(&uid)
     {
     }
@@ -185,23 +179,20 @@
     ALWAYS_INLINE static uint32_t toUInt32FromCharacters(const CharType* characters, unsigned length, bool& ok);
 
     static bool equal(const Identifier& a, const Identifier& b) { return a.m_string.impl() == b.m_string.impl(); }
     static bool equal(const Identifier& a, const LChar* b) { return equal(a.m_string.impl(), b); }
 
-    template <typename T> static Ref<StringImpl> add(VM*, const T*, int length);
-    static Ref<StringImpl> add8(VM*, const UChar*, int length);
+    template <typename T> static Ref<StringImpl> add(VM&, const T*, int length);
+    static Ref<StringImpl> add8(VM&, const UChar*, int length);
     template <typename T> ALWAYS_INLINE static bool canUseSingleCharacterString(T);
 
-    static Ref<StringImpl> add(ExecState*, StringImpl*);
-    static Ref<StringImpl> add(VM*, StringImpl*);
+    static Ref<StringImpl> add(VM&, StringImpl*);
 
 #ifndef NDEBUG
-    JS_EXPORT_PRIVATE static void checkCurrentAtomicStringTable(ExecState*);
-    JS_EXPORT_PRIVATE static void checkCurrentAtomicStringTable(VM*);
+    JS_EXPORT_PRIVATE static void checkCurrentAtomStringTable(VM&);
 #else
-    JS_EXPORT_PRIVATE NO_RETURN_DUE_TO_CRASH static void checkCurrentAtomicStringTable(ExecState*);
-    JS_EXPORT_PRIVATE NO_RETURN_DUE_TO_CRASH static void checkCurrentAtomicStringTable(VM*);
+    JS_EXPORT_PRIVATE NO_RETURN_DUE_TO_CRASH static void checkCurrentAtomStringTable(VM&);
 #endif
 };
 
 template <> ALWAYS_INLINE bool Identifier::canUseSingleCharacterString(LChar)
 {
@@ -213,21 +204,21 @@
 {
     return (c <= maxSingleCharacterString);
 }
 
 template <typename T>
-Ref<StringImpl> Identifier::add(VM* vm, const T* s, int length)
+Ref<StringImpl> Identifier::add(VM& vm, const T* s, int length)
 {
     if (length == 1) {
         T c = s[0];
         if (canUseSingleCharacterString(c))
-            return vm->smallStrings.singleCharacterStringRep(c);
+            return vm.smallStrings.singleCharacterStringRep(c);
     }
     if (!length)
         return *StringImpl::empty();
 
-    return *AtomicStringImpl::add(s, length);
+    return *AtomStringImpl::add(s, length);
 }
 
 inline bool operator==(const Identifier& a, const Identifier& b)
 {
     return Identifier::equal(a, b);
