diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSIDBRequestCustom.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSIDBRequestCustom.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSIDBRequestCustom.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSIDBRequestCustom.cpp
@@ -55,14 +55,30 @@
             return toJS<IDLInterface<IDBDatabase>>(state, *jsCast<JSDOMGlobalObject*>(state.lexicalGlobalObject()), throwScope, database.get());
         }, [&state] (IDBKeyData keyData) {
             return toJS<IDLIDBKeyData>(state, *jsCast<JSDOMGlobalObject*>(state.lexicalGlobalObject()), keyData);
         }, [&state] (Vector<IDBKeyData> keyDatas) {
             return toJS<IDLSequence<IDLIDBKeyData>>(state, *jsCast<JSDOMGlobalObject*>(state.lexicalGlobalObject()), keyDatas);
-        }, [&state] (IDBValue value) {
-            return toJS<IDLIDBValue>(state, *jsCast<JSDOMGlobalObject*>(state.lexicalGlobalObject()), value);
-        }, [&state] (Vector<IDBValue> values) {
-            return toJS<IDLSequence<IDLIDBValue>>(state, *jsCast<JSDOMGlobalObject*>(state.lexicalGlobalObject()), values);
+        }, [&state] (IDBGetResult getResult) {
+            auto result = deserializeIDBValueWithKeyInjection(state, getResult.value(), getResult.keyData(), getResult.keyPath());
+            return result ? result.value() : jsNull();
+        }, [&state] (IDBGetAllResult getAllResult) {
+            auto& keys = getAllResult.keys();
+            auto& values = getAllResult.values();
+            auto& keyPath = getAllResult.keyPath();
+            auto scope = DECLARE_THROW_SCOPE(state.vm());
+            JSC::MarkedArgumentBuffer list;
+            for (unsigned i = 0; i < values.size(); i ++) {
+                auto result = deserializeIDBValueWithKeyInjection(state, values[i], keys[i], keyPath);
+                if (!result)
+                    return jsNull();
+                list.append(result.value());
+                if (UNLIKELY(list.hasOverflowed())) {
+                    propagateException(state, scope, Exception(UnknownError));
+                    return jsNull();
+                }
+            }
+            return JSValue(JSC::constructArray(&state, nullptr, state.lexicalGlobalObject(), list));
         }, [] (uint64_t number) {
             return toJS<IDLUnsignedLongLong>(number);
         }, [] (IDBRequest::NullResultType other) {
             if (other == IDBRequest::NullResultType::Empty)
                 return JSC::jsNull();
@@ -73,9 +89,10 @@
 
 void JSIDBRequest::visitAdditionalChildren(SlotVisitor& visitor)
 {
     auto& request = wrapped();
     request.resultWrapper().visit(visitor);
+    request.cursorWrapper().visit(visitor);
 }
 
 }
 #endif // ENABLE(INDEXED_DATABASE)
