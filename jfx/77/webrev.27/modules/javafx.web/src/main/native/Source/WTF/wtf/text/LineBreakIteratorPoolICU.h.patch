diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/LineBreakIteratorPoolICU.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/LineBreakIteratorPoolICU.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/LineBreakIteratorPoolICU.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/LineBreakIteratorPoolICU.h
@@ -27,28 +27,29 @@
 
 #include <unicode/uloc.h>
 #include <wtf/HashMap.h>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/ThreadSpecific.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 namespace WTF {
 
 class LineBreakIteratorPool {
     WTF_MAKE_NONCOPYABLE(LineBreakIteratorPool);
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     LineBreakIteratorPool() = default;
 
     static LineBreakIteratorPool& sharedPool()
     {
         static NeverDestroyed<WTF::ThreadSpecific<LineBreakIteratorPool>> pool;
         return *pool.get();
     }
 
-    static AtomicString makeLocaleWithBreakKeyword(const AtomicString& locale, LineBreakIteratorMode mode)
+    static AtomString makeLocaleWithBreakKeyword(const AtomString& locale, LineBreakIteratorMode mode)
     {
-        // The uloc functions model locales as char*, so we have to downconvert our AtomicString.
+        // The uloc functions model locales as char*, so we have to downconvert our AtomString.
         auto utf8Locale = locale.string().utf8();
         if (!utf8Locale.length())
             return locale;
         Vector<char> scratchBuffer(utf8Locale.length() + 11, 0);
         memcpy(scratchBuffer.data(), utf8Locale.data(), utf8Locale.length());
@@ -70,24 +71,24 @@
         }
 
         UErrorCode status = U_ZERO_ERROR;
         int32_t lengthNeeded = uloc_setKeywordValue("lb", keywordValue, scratchBuffer.data(), scratchBuffer.size(), &status);
         if (U_SUCCESS(status))
-            return AtomicString::fromUTF8(scratchBuffer.data(), lengthNeeded);
+            return AtomString::fromUTF8(scratchBuffer.data(), lengthNeeded);
         if (status == U_BUFFER_OVERFLOW_ERROR) {
             scratchBuffer.grow(lengthNeeded + 1);
             memset(scratchBuffer.data() + utf8Locale.length(), 0, scratchBuffer.size() - utf8Locale.length());
             status = U_ZERO_ERROR;
             int32_t lengthNeeded2 = uloc_setKeywordValue("lb", keywordValue, scratchBuffer.data(), scratchBuffer.size(), &status);
             if (!U_SUCCESS(status) || lengthNeeded != lengthNeeded2)
                 return locale;
-            return AtomicString::fromUTF8(scratchBuffer.data(), lengthNeeded);
+            return AtomString::fromUTF8(scratchBuffer.data(), lengthNeeded);
         }
         return locale;
     }
 
-    UBreakIterator* take(const AtomicString& locale, LineBreakIteratorMode mode)
+    UBreakIterator* take(const AtomString& locale, LineBreakIteratorMode mode)
     {
         auto localeWithOptionalBreakKeyword = makeLocaleWithBreakKeyword(locale, mode);
 
         UBreakIterator* iterator = nullptr;
         for (size_t i = 0; i < m_pool.size(); ++i) {
@@ -120,12 +121,12 @@
     }
 
 private:
     static constexpr size_t capacity = 4;
 
-    Vector<std::pair<AtomicString, UBreakIterator*>, capacity> m_pool;
-    HashMap<UBreakIterator*, AtomicString> m_vendedIterators;
+    Vector<std::pair<AtomString, UBreakIterator*>, capacity> m_pool;
+    HashMap<UBreakIterator*, AtomString> m_vendedIterators;
 
     friend WTF::ThreadSpecific<LineBreakIteratorPool>::operator LineBreakIteratorPool*();
 };
 
 }
