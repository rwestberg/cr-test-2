diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3ValueKey.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3ValueKey.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3ValueKey.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3ValueKey.h
@@ -78,10 +78,11 @@
 
     ValueKey(Kind kind, Type type, float value)
         : m_kind(kind)
         , m_type(type)
     {
+        // This means that upper 32bit of u.value is 0.
         u.floatValue = value;
     }
 
     static ValueKey intConstant(Type type, int64_t value);
 
@@ -90,11 +91,11 @@
     Type type() const { return m_type; }
     unsigned childIndex(unsigned index) const { return u.indices[index]; }
     Value* child(Procedure&, unsigned index) const;
     int64_t value() const { return u.value; }
     double doubleValue() const { return u.doubleValue; }
-    double floatValue() const { return u.floatValue; }
+    float floatValue() const { return u.floatValue; }
 
     bool operator==(const ValueKey& other) const
     {
         return m_kind == other.m_kind
             && m_type == other.m_type
@@ -106,11 +107,11 @@
         return !(*this == other);
     }
 
     unsigned hash() const
     {
-        return m_kind.hash() + m_type + WTF::IntHash<int32_t>::hash(u.indices[0]) + u.indices[1] + u.indices[2];
+        return m_kind.hash() + m_type.hash() + WTF::IntHash<int32_t>::hash(u.indices[0]) + u.indices[1] + u.indices[2];
     }
 
     explicit operator bool() const { return *this != ValueKey(); }
 
     void dump(PrintStream&) const;
