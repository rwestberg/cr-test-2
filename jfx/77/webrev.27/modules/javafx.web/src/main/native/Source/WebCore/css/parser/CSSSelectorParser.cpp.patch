diff a/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSSelectorParser.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSSelectorParser.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSSelectorParser.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSSelectorParser.cpp
@@ -93,28 +93,28 @@
     if (m_failedParsing)
         return { };
     return CSSSelectorList { WTFMove(selectorList) };
 }
 
-static bool consumeLangArgumentList(std::unique_ptr<Vector<AtomicString>>& argumentList, CSSParserTokenRange& range)
+static bool consumeLangArgumentList(std::unique_ptr<Vector<AtomString>>& argumentList, CSSParserTokenRange& range)
 {
     const CSSParserToken& ident = range.consumeIncludingWhitespace();
     if (ident.type() != IdentToken && ident.type() != StringToken)
         return false;
     StringView string = ident.value();
     if (string.startsWith("--"))
         return false;
-    argumentList->append(string.toAtomicString());
+    argumentList->append(string.toAtomString());
     while (!range.atEnd() && range.peek().type() == CommaToken) {
         range.consumeIncludingWhitespace();
         const CSSParserToken& ident = range.consumeIncludingWhitespace();
         if (ident.type() != IdentToken && ident.type() != StringToken)
             return false;
         StringView string = ident.value();
         if (string.startsWith("--"))
             return false;
-        argumentList->append(string.toAtomicString());
+        argumentList->append(string.toAtomString());
     }
     return range.atEnd();
 }
 
 namespace {
@@ -258,12 +258,12 @@
 
 std::unique_ptr<CSSParserSelector> CSSSelectorParser::consumeCompoundSelector(CSSParserTokenRange& range)
 {
     std::unique_ptr<CSSParserSelector> compoundSelector;
 
-    AtomicString namespacePrefix;
-    AtomicString elementName;
+    AtomString namespacePrefix;
+    AtomString elementName;
     CSSSelector::PseudoElementType compoundPseudoElement = CSSSelector::PseudoElementUnknown;
     if (!consumeName(range, elementName, namespacePrefix)) {
         compoundSelector = consumeSimpleSelector(range);
         if (!compoundSelector)
             return nullptr;
@@ -287,11 +287,11 @@
         else
             compoundSelector = WTFMove(simpleSelector);
     }
 
     if (!compoundSelector) {
-        AtomicString namespaceURI = determineNamespace(namespacePrefix);
+        AtomString namespaceURI = determineNamespace(namespacePrefix);
         if (namespaceURI.isNull()) {
             m_failedParsing = true;
             return nullptr;
         }
         if (namespaceURI == defaultNamespace())
@@ -322,18 +322,18 @@
     if (!selector)
         m_failedParsing = true;
     return selector;
 }
 
-bool CSSSelectorParser::consumeName(CSSParserTokenRange& range, AtomicString& name, AtomicString& namespacePrefix)
+bool CSSSelectorParser::consumeName(CSSParserTokenRange& range, AtomString& name, AtomString& namespacePrefix)
 {
     name = nullAtom();
     namespacePrefix = nullAtom();
 
     const CSSParserToken& firstToken = range.peek();
     if (firstToken.type() == IdentToken) {
-        name = firstToken.value().toAtomicString();
+        name = firstToken.value().toAtomString();
         range.consume();
     } else if (firstToken.type() == DelimiterToken && firstToken.delimiter() == '*') {
         name = starAtom();
         range.consume();
     } else if (firstToken.type() == DelimiterToken && firstToken.delimiter() == '|') {
@@ -347,11 +347,11 @@
     range.consume();
 
     namespacePrefix = name;
     const CSSParserToken& nameToken = range.consume();
     if (nameToken.type() == IdentToken) {
-        name = nameToken.value().toAtomicString();
+        name = nameToken.value().toAtomString();
     } else if (nameToken.type() == DelimiterToken && nameToken.delimiter() == '*')
         name = starAtom();
     else {
         name = nullAtom();
         namespacePrefix = nullAtom();
@@ -370,11 +370,11 @@
     selector->setMatch(CSSSelector::Id);
 
     // FIXME-NEWPARSER: Avoid having to do this, but the old parser does and we need
     // to be compatible for now.
     CSSParserToken token = range.consume();
-    selector->setValue(token.value().toAtomicString(), m_context.mode == HTMLQuirksMode);
+    selector->setValue(token.value().toAtomString(), m_context.mode == HTMLQuirksMode);
     return selector;
 }
 
 std::unique_ptr<CSSParserSelector> CSSSelectorParser::consumeClass(CSSParserTokenRange& range)
 {
@@ -387,31 +387,28 @@
     selector->setMatch(CSSSelector::Class);
 
     // FIXME-NEWPARSER: Avoid having to do this, but the old parser does and we need
     // to be compatible for now.
     CSSParserToken token = range.consume();
-    selector->setValue(token.value().toAtomicString(), m_context.mode == HTMLQuirksMode);
+    selector->setValue(token.value().toAtomString(), m_context.mode == HTMLQuirksMode);
 
     return selector;
 }
 
 std::unique_ptr<CSSParserSelector> CSSSelectorParser::consumeAttribute(CSSParserTokenRange& range)
 {
     ASSERT(range.peek().type() == LeftBracketToken);
     CSSParserTokenRange block = range.consumeBlock();
-    if (block.end() == range.end())
-        return nullptr; // No ] was found. Be strict about this.
-
     block.consumeWhitespace();
 
-    AtomicString namespacePrefix;
-    AtomicString attributeName;
+    AtomString namespacePrefix;
+    AtomString attributeName;
     if (!consumeName(block, attributeName, namespacePrefix))
         return nullptr;
     block.consumeWhitespace();
 
-    AtomicString namespaceURI = determineNamespace(namespacePrefix);
+    AtomString namespaceURI = determineNamespace(namespacePrefix);
     if (namespaceURI.isNull())
         return nullptr;
 
     QualifiedName qualifiedName = namespacePrefix.isNull()
         ? QualifiedName(nullAtom(), attributeName, nullAtom())
@@ -428,11 +425,11 @@
     selector->setMatch(consumeAttributeMatch(block));
 
     const CSSParserToken& attributeValue = block.consumeIncludingWhitespace();
     if (attributeValue.type() != IdentToken && attributeValue.type() != StringToken)
         return nullptr;
-    selector->setValue(attributeValue.value().toAtomicString());
+    selector->setValue(attributeValue.value().toAtomString());
 
     selector->setAttribute(qualifiedName, m_context.isHTMLDocument, consumeAttributeFlags(block));
 
     if (!block.atEnd())
         return nullptr;
@@ -488,21 +485,18 @@
     if (token.type() != IdentToken && token.type() != FunctionToken)
         return nullptr;
 
     std::unique_ptr<CSSParserSelector> selector;
 
-    auto lowercasedValue = token.value().convertToASCIILowercase();
-    auto value = StringView { lowercasedValue };
-
     if (colons == 1) {
-        selector = std::unique_ptr<CSSParserSelector>(CSSParserSelector::parsePseudoClassSelectorFromStringView(value));
+        selector = CSSParserSelector::parsePseudoClassSelector(token.value());
 #if ENABLE(ATTACHMENT_ELEMENT)
         if (!m_context.attachmentEnabled && selector && selector->match() == CSSSelector::PseudoClass && selector->pseudoClassType() == CSSSelector::PseudoClassHasAttachment)
             return nullptr;
 #endif
     } else {
-        selector = std::unique_ptr<CSSParserSelector>(CSSParserSelector::parsePseudoElementSelectorFromStringView(value));
+        selector = CSSParserSelector::parsePseudoElementSelector(token.value());
 #if ENABLE(VIDEO_TRACK)
         // Treat the ident version of cue as PseudoElementWebkitCustom.
         if (token.type() == IdentToken && selector && selector->match() == CSSSelector::PseudoElement && selector->pseudoElementType() == CSSSelector::PseudoElementCue)
             selector->setPseudoElementType(CSSSelector::PseudoElementWebKitCustom);
 #endif
@@ -518,12 +512,10 @@
             return nullptr;
         return selector;
     }
 
     CSSParserTokenRange block = range.consumeBlock();
-    if (block.end() == range.end())
-        return nullptr; // No ) was found. Be strict about this.
     block.consumeWhitespace();
     if (token.type() != FunctionToken)
         return nullptr;
 
     const auto& argumentStart = block.peek();
@@ -570,11 +562,11 @@
             selector->setNth(ab.first, ab.second);
             return selector;
         }
         case CSSSelector::PseudoClassLang: {
             // FIXME: CSS Selectors Level 4 allows :lang(*-foo)
-            auto argumentList = std::make_unique<Vector<AtomicString>>();
+            auto argumentList = makeUnique<Vector<AtomString>>();
             if (!consumeLangArgumentList(argumentList, block))
                 return nullptr;
             selector->setLangArgumentList(WTFMove(argumentList));
             return selector;
         }
@@ -599,11 +591,11 @@
         case CSSSelector::PseudoClassDir:
         case CSSSelector::PseudoClassRole: {
             const CSSParserToken& ident = block.consumeIncludingWhitespace();
             if (ident.type() != IdentToken || !block.atEnd())
                 return nullptr;
-            selector->setArgument(ident.value().toAtomicString());
+            selector->setArgument(ident.value().toAtomString());
             return selector;
         }
 #endif
         default:
             break;
@@ -778,18 +770,18 @@
     if (sign == MinusSign)
         result.second = -result.second;
     return true;
 }
 
-const AtomicString& CSSSelectorParser::defaultNamespace() const
+const AtomString& CSSSelectorParser::defaultNamespace() const
 {
     if (!m_styleSheet)
         return starAtom();
     return m_styleSheet->defaultNamespace();
 }
 
-const AtomicString& CSSSelectorParser::determineNamespace(const AtomicString& prefix)
+const AtomString& CSSSelectorParser::determineNamespace(const AtomString& prefix)
 {
     if (prefix.isNull())
         return defaultNamespace();
     if (prefix.isEmpty())
         return emptyAtom(); // No namespace. If an element/attribute has a namespace, we won't match it.
@@ -798,24 +790,24 @@
     if (!m_styleSheet)
         return nullAtom(); // Cannot resolve prefix to namespace without a stylesheet, syntax error.
     return m_styleSheet->namespaceURIFromPrefix(prefix);
 }
 
-void CSSSelectorParser::prependTypeSelectorIfNeeded(const AtomicString& namespacePrefix, const AtomicString& elementName, CSSParserSelector* compoundSelector)
+void CSSSelectorParser::prependTypeSelectorIfNeeded(const AtomString& namespacePrefix, const AtomString& elementName, CSSParserSelector* compoundSelector)
 {
     bool isShadowDOM = compoundSelector->needsImplicitShadowCombinatorForMatching();
 
     if (elementName.isNull() && defaultNamespace() == starAtom() && !isShadowDOM)
         return;
 
-    AtomicString determinedElementName = elementName.isNull() ? starAtom() : elementName;
-    AtomicString namespaceURI = determineNamespace(namespacePrefix);
+    AtomString determinedElementName = elementName.isNull() ? starAtom() : elementName;
+    AtomString namespaceURI = determineNamespace(namespacePrefix);
     if (namespaceURI.isNull()) {
         m_failedParsing = true;
         return;
     }
-    AtomicString determinedPrefix = namespacePrefix;
+    AtomString determinedPrefix = namespacePrefix;
     if (namespaceURI == defaultNamespace())
         determinedPrefix = nullAtom();
     QualifiedName tag = QualifiedName(determinedPrefix, determinedElementName, namespaceURI);
 
     // *:host never matches, so we can't discard the *,
