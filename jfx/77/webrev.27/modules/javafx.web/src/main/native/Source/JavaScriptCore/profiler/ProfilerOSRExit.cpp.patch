diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/profiler/ProfilerOSRExit.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/profiler/ProfilerOSRExit.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/profiler/ProfilerOSRExit.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/profiler/ProfilerOSRExit.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2012 Apple Inc. All rights reserved.
+ * Copyright (C) 2012-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -31,12 +31,12 @@
 #include "JSCInlines.h"
 
 namespace JSC { namespace Profiler {
 
 OSRExit::OSRExit(unsigned id, const OriginStack& origin, ExitKind kind, bool isWatchpoint)
-    : m_id(id)
-    , m_origin(origin)
+    : m_origin(origin)
+    , m_id(id)
     , m_exitKind(kind)
     , m_isWatchpoint(isWatchpoint)
     , m_counter(0)
 {
 }
@@ -49,11 +49,11 @@
 {
     VM& vm = exec->vm();
     JSObject* result = constructEmptyObject(exec);
     result->putDirect(vm, vm.propertyNames->id, jsNumber(m_id));
     result->putDirect(vm, vm.propertyNames->origin, m_origin.toJS(exec));
-    result->putDirect(vm, vm.propertyNames->exitKind, jsString(exec, exitKindToString(m_exitKind)));
+    result->putDirect(vm, vm.propertyNames->exitKind, jsString(vm, exitKindToString(m_exitKind)));
     result->putDirect(vm, vm.propertyNames->isWatchpoint, jsBoolean(m_isWatchpoint));
     result->putDirect(vm, vm.propertyNames->count, jsNumber(m_counter));
     return result;
 }
 
