diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/CommonVM.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/CommonVM.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/CommonVM.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/CommonVM.cpp
@@ -33,11 +33,11 @@
 #include "WebCoreJSClientData.h"
 #include <JavaScriptCore/HeapInlines.h>
 #include <JavaScriptCore/MachineStackMarker.h>
 #include <JavaScriptCore/VM.h>
 #include <wtf/MainThread.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 #if PLATFORM(IOS_FAMILY)
 #include "WebCoreThreadInternal.h"
 #endif
 
@@ -57,10 +57,12 @@
     g_commonVMOrNull = &vm;
 
     vm.heap.acquireAccess(); // At any time, we may do things that affect the GC.
 
 #if PLATFORM(IOS_FAMILY)
+    if (WebThreadIsEnabled())
+        vm.apiLock().makeWebThreadAware();
     vm.setRunLoop(WebThreadRunLoop());
     vm.heap.machineThreads().addCurrentThread();
 #endif
 
     vm.setGlobalConstRedeclarationShouldThrow(DeprecatedGlobalSettings::globalConstRedeclarationShouldThrow());
@@ -86,11 +88,11 @@
         }
     }
     return nullptr;
 }
 
-void addImpureProperty(const AtomicString& propertyName)
+void addImpureProperty(const AtomString& propertyName)
 {
     commonVM().addImpureProperty(propertyName);
 }
 
 } // namespace WebCore
