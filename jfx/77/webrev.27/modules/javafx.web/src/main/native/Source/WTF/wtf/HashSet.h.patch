diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/HashSet.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/HashSet.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/HashSet.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/HashSet.h
@@ -43,12 +43,22 @@
 private:
     typedef HashTable<ValueType, ValueType, IdentityExtractor,
         HashFunctions, ValueTraits, ValueTraits> HashTableType;
 
 public:
+    /*
+     * Since figuring out the entries of an iterator is confusing, here is a cheat sheet:
+     * const KeyType& key = iterator->key;
+     */
     typedef HashTableConstIteratorAdapter<HashTableType, ValueType> iterator;
     typedef HashTableConstIteratorAdapter<HashTableType, ValueType> const_iterator;
+
+    /*
+     * Since figuring out the entries of an AddResult is confusing, here is a cheat sheet:
+     * iterator iter = addResult.iterator;
+     * bool isNewEntry = addResult.isNewEntry;
+     */
     typedef typename HashTableType::AddResult AddResult;
 
     HashSet()
     {
     }
@@ -125,10 +135,12 @@
     bool operator==(const OtherCollection&) const;
 
     template<typename OtherCollection>
     bool operator!=(const OtherCollection&) const;
 
+    void checkConsistency() const;
+
 private:
     HashTableType m_impl;
 };
 
 struct IdentityExtractor {
@@ -380,8 +392,14 @@
 {
     for (auto& value : list)
         add(value);
 }
 
+template<typename T, typename U, typename V>
+inline void HashSet<T, U, V>::checkConsistency() const
+{
+    m_impl.checkTableConsistency();
+}
+
 } // namespace WTF
 
 using WTF::HashSet;
