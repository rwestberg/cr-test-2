diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3PatchpointValue.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3PatchpointValue.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3PatchpointValue.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3PatchpointValue.h
@@ -50,27 +50,30 @@
     // of substitution could be made so long as there are no interfering writes.
     Effects effects;
 
     // The input representation (i.e. constraint) of the return value. This defaults to WarmAny if the
     // type is Void and it defaults to SomeRegister otherwise. It's illegal to mess with this if the type
-    // is Void. Otherwise you can set this to any input constraint.
-    ValueRep resultConstraint;
+    // is Void. Otherwise you can set this to any input constraint. If the type of the patchpoint is a tuple
+    // the constrants must be set explicitly.
+    Vector<ValueRep, 1> resultConstraints;
 
     // The number of scratch registers that this patchpoint gets. The scratch register is guaranteed
     // to be different from any input register and the destination register. It's also guaranteed not
     // to be clobbered either early or late. These are 0 by default.
     uint8_t numGPScratchRegisters { 0 };
     uint8_t numFPScratchRegisters { 0 };
 
+    B3_SPECIALIZE_VALUE_FOR_FINAL_SIZE_VARARGS_CHILDREN
+
 protected:
     void dumpMeta(CommaPrinter&, PrintStream&) const override;
 
-    Value* cloneImpl() const override;
-
 private:
     friend class Procedure;
+    friend class Value;
 
+    static Opcode opcodeFromConstructor(Type, Origin) { return Patchpoint; }
     JS_EXPORT_PRIVATE PatchpointValue(Type, Origin);
 };
 
 } } // namespace JSC::B3
 
