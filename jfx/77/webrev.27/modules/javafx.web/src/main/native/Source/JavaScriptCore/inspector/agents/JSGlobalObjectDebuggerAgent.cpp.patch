diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/JSGlobalObjectDebuggerAgent.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/JSGlobalObjectDebuggerAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/JSGlobalObjectDebuggerAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/JSGlobalObjectDebuggerAgent.cpp
@@ -43,22 +43,24 @@
     : InspectorDebuggerAgent(context)
     , m_consoleAgent(consoleAgent)
 {
 }
 
-InjectedScript JSGlobalObjectDebuggerAgent::injectedScriptForEval(ErrorString& error, const int* executionContextId)
+JSGlobalObjectDebuggerAgent::~JSGlobalObjectDebuggerAgent() = default;
+
+InjectedScript JSGlobalObjectDebuggerAgent::injectedScriptForEval(ErrorString& errorString, const int* executionContextId)
 {
     if (executionContextId) {
-        error = "Execution context id is not supported for JSContext inspection as there is only one execution context."_s;
+        errorString = "executionContextId is not supported for JSContexts as there is only one execution context"_s;
         return InjectedScript();
     }
 
     ExecState* exec = static_cast<JSGlobalObjectScriptDebugServer&>(scriptDebugServer()).globalObject().globalExec();
     return injectedScriptManager().injectedScriptFor(exec);
 }
 
 void JSGlobalObjectDebuggerAgent::breakpointActionLog(JSC::ExecState& state, const String& message)
 {
-    m_consoleAgent->addMessageToConsole(std::make_unique<ConsoleMessage>(MessageSource::JS, MessageType::Log, MessageLevel::Log, message, createScriptCallStack(&state), 0));
+    m_consoleAgent->addMessageToConsole(makeUnique<ConsoleMessage>(MessageSource::JS, MessageType::Log, MessageLevel::Log, message, createScriptCallStack(&state), 0));
 }
 
 } // namespace Inspector
