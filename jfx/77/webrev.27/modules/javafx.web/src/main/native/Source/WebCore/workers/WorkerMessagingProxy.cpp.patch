diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerMessagingProxy.cpp b/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerMessagingProxy.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerMessagingProxy.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerMessagingProxy.cpp
@@ -53,11 +53,11 @@
     return *new WorkerMessagingProxy(worker);
 }
 
 WorkerMessagingProxy::WorkerMessagingProxy(Worker& workerObject)
     : m_scriptExecutionContext(workerObject.scriptExecutionContext())
-    , m_inspectorProxy(std::make_unique<WorkerInspectorProxy>(workerObject.identifier()))
+    , m_inspectorProxy(makeUnique<WorkerInspectorProxy>(workerObject.identifier()))
     , m_workerObject(&workerObject)
 {
     ASSERT((is<Document>(*m_scriptExecutionContext) && isMainThread())
         || (is<WorkerGlobalScope>(*m_scriptExecutionContext) && downcast<WorkerGlobalScope>(*m_scriptExecutionContext).thread().thread() == &Thread::current()));
 
@@ -123,11 +123,11 @@
 
     if (m_workerThread) {
         ++m_unconfirmedMessageCount;
         m_workerThread->runLoop().postTask(WTFMove(task));
     } else
-        m_queuedEarlyTasks.append(std::make_unique<ScriptExecutionContext::Task>(WTFMove(task)));
+        m_queuedEarlyTasks.append(makeUnique<ScriptExecutionContext::Task>(WTFMove(task)));
 }
 
 void WorkerMessagingProxy::postTaskToLoader(ScriptExecutionContext::Task&& task)
 {
     // FIXME: In case of nested workers, this should go directly to the root Document context.
