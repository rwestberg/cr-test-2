diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/SVGPathData.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/SVGPathData.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/SVGPathData.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/SVGPathData.cpp
@@ -37,11 +37,11 @@
 #include "SVGRectElement.h"
 #include <wtf/HashMap.h>
 
 namespace WebCore {
 
-static Path pathFromCircleElement(SVGElement& element)
+static Path pathFromCircleElement(const SVGElement& element)
 {
     ASSERT(is<SVGCircleElement>(element));
 
     RenderElement* renderer = element.renderer();
     if (!renderer)
@@ -57,11 +57,11 @@
         path.addEllipse(FloatRect(cx - r, cy - r, r * 2, r * 2));
     }
     return path;
 }
 
-static Path pathFromEllipseElement(SVGElement& element)
+static Path pathFromEllipseElement(const SVGElement& element)
 {
     RenderElement* renderer = element.renderer();
     if (!renderer)
         return { };
 
@@ -80,59 +80,59 @@
     float cy = lengthContext.valueForLength(style.svgStyle().cy(), LengthModeHeight);
     path.addEllipse(FloatRect(cx - rx, cy - ry, rx * 2, ry * 2));
     return path;
 }
 
-static Path pathFromLineElement(SVGElement& element)
+static Path pathFromLineElement(const SVGElement& element)
 {
     Path path;
     const auto& line = downcast<SVGLineElement>(element);
 
     SVGLengthContext lengthContext(&element);
     path.moveTo(FloatPoint(line.x1().value(lengthContext), line.y1().value(lengthContext)));
     path.addLineTo(FloatPoint(line.x2().value(lengthContext), line.y2().value(lengthContext)));
     return path;
 }
 
-static Path pathFromPathElement(SVGElement& element)
+static Path pathFromPathElement(const SVGElement& element)
 {
-    return downcast<SVGPathElement>(element).pathForByteStream();
+    return downcast<SVGPathElement>(element).path();
 }
 
-static Path pathFromPolygonElement(SVGElement& element)
+static Path pathFromPolygonElement(const SVGElement& element)
 {
-    auto& points = downcast<SVGPolygonElement>(element).animatedPoints()->values();
+    auto& points = downcast<SVGPolygonElement>(element).points().items();
     if (points.isEmpty())
         return { };
 
     Path path;
-    path.moveTo(points.first());
+    path.moveTo(points.first()->value());
 
     unsigned size = points.size();
     for (unsigned i = 1; i < size; ++i)
-        path.addLineTo(points.at(i));
+        path.addLineTo(points.at(i)->value());
 
     path.closeSubpath();
     return path;
 }
 
-static Path pathFromPolylineElement(SVGElement& element)
+static Path pathFromPolylineElement(const SVGElement& element)
 {
-    auto& points = downcast<SVGPolylineElement>(element).animatedPoints()->values();
+    auto& points = downcast<SVGPolylineElement>(element).points().items();
     if (points.isEmpty())
         return { };
 
     Path path;
-    path.moveTo(points.first());
+    path.moveTo(points.first()->value());
 
     unsigned size = points.size();
     for (unsigned i = 1; i < size; ++i)
-        path.addLineTo(points.at(i));
+        path.addLineTo(points.at(i)->value());
     return path;
 }
 
-static Path pathFromRectElement(SVGElement& element)
+static Path pathFromRectElement(const SVGElement& element)
 {
     RenderElement* renderer = element.renderer();
     if (!renderer)
         return { };
 
@@ -167,18 +167,18 @@
 
     path.addRect(FloatRect(x, y, width, height));
     return path;
 }
 
-Path pathFromGraphicsElement(SVGElement* element)
+Path pathFromGraphicsElement(const SVGElement* element)
 {
     ASSERT(element);
 
-    typedef Path (*PathFromFunction)(SVGElement&);
-    static HashMap<AtomicStringImpl*, PathFromFunction>* map = 0;
+    typedef Path (*PathFromFunction)(const SVGElement&);
+    static HashMap<AtomStringImpl*, PathFromFunction>* map = 0;
     if (!map) {
-        map = new HashMap<AtomicStringImpl*, PathFromFunction>;
+        map = new HashMap<AtomStringImpl*, PathFromFunction>;
         map->set(SVGNames::circleTag->localName().impl(), pathFromCircleElement);
         map->set(SVGNames::ellipseTag->localName().impl(), pathFromEllipseElement);
         map->set(SVGNames::lineTag->localName().impl(), pathFromLineElement);
         map->set(SVGNames::pathTag->localName().impl(), pathFromPathElement);
         map->set(SVGNames::polygonTag->localName().impl(), pathFromPolygonElement);
