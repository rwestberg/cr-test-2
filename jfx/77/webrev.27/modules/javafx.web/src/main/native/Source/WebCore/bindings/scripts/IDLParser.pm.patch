diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/scripts/IDLParser.pm b/modules/javafx.web/src/main/native/Source/WebCore/bindings/scripts/IDLParser.pm
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/scripts/IDLParser.pm
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/scripts/IDLParser.pm
@@ -167,10 +167,11 @@
 struct( IDLDictionary => {
     type => 'IDLType',
     parentType => 'IDLType',
     members => '@', # List of 'IDLDictionaryMember'
     extendedAttributes => '$',
+    isPartial => '$', # Used for partial interfaces
 });
 
 # https://heycam.github.io/webidl/#idl-callback-functions
 struct( IDLCallbackFunction => {
     type => '$',
@@ -885,29 +886,13 @@
         my $interface = $self->parseInterface($extendedAttributeList);
         $interface->isPartial(1);
         return $interface;
     }
     if ($next->value() eq "dictionary") {
-        return $self->parsePartialDictionary($extendedAttributeList);
-    }
-    $self->assertUnexpectedToken($next->value(), __LINE__);
-}
-
-sub parsePartialInterface
-{
-    my $self = shift;
-    my $extendedAttributeList = shift;
-
-    my $next = $self->nextToken();
-    if ($next->value() eq "interface") {
-        $self->assertTokenValue($self->getToken(), "interface", __LINE__);
-        $self->assertTokenType($self->getToken(), IdentifierToken);
-        $self->assertTokenValue($self->getToken(), "{", __LINE__);
-        $self->parseInterfaceMembers();
-        $self->assertTokenValue($self->getToken(), "}", __LINE__);
-        $self->assertTokenValue($self->getToken(), ";", __LINE__);
-        return;
+        my $dictionary = $self->parseDictionary($extendedAttributeList);
+        $dictionary->isPartial(1);
+        return $dictionary;
     }
     $self->assertUnexpectedToken($next->value(), __LINE__);
 }
 
 sub parseInterfaceMembers
@@ -1058,26 +1043,10 @@
         return $member;
     }
     $self->assertUnexpectedToken($next->value(), __LINE__);
 }
 
-sub parsePartialDictionary
-{
-    my $self = shift;
-    my $next = $self->nextToken();
-    if ($next->value() eq "dictionary") {
-        $self->assertTokenValue($self->getToken(), "dictionary", __LINE__);
-        $self->assertTokenType($self->getToken(), IdentifierToken);
-        $self->assertTokenValue($self->getToken(), "{", __LINE__);
-        $self->parseDictionaryMembers();
-        $self->assertTokenValue($self->getToken(), "}", __LINE__);
-        $self->assertTokenValue($self->getToken(), ";", __LINE__);
-        return;
-    }
-    $self->assertUnexpectedToken($next->value(), __LINE__);
-}
-
 sub parseDefault
 {
     my $self = shift;
     my $next = $self->nextToken();
     if ($next->value() eq "=") {
