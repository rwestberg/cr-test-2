diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/Expected.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/Expected.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/Expected.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/Expected.h
@@ -181,11 +181,10 @@
 #include <initializer_list>
 #include <type_traits>
 #include <utility>
 #include <wtf/Assertions.h>
 #include <wtf/Compiler.h>
-#include <wtf/Optional.h>
 #include <wtf/StdLibExtras.h>
 #include <wtf/Unexpected.h>
 
 namespace std {
 namespace experimental {
@@ -248,12 +247,14 @@
     value_type val;
     error_type err;
     constexpr constexpr_storage() : dummy() { }
     constexpr constexpr_storage(value_tag_t) : val() { }
     constexpr constexpr_storage(error_tag_t) : err() { }
-    constexpr constexpr_storage(value_tag_t, const value_type& v) : val(v) { }
-    constexpr constexpr_storage(error_tag_t, const error_type& e) : err(e) { }
+    template<typename U = T>
+    constexpr constexpr_storage(value_tag_t, U&& v) : val(std::forward<U>(v)) { }
+    template<typename U = E>
+    constexpr constexpr_storage(error_tag_t, U&& e) : err(std::forward<U>(e)) { }
     ~constexpr_storage() = default;
 };
 
 template<class T, class E>
 union storage {
@@ -310,12 +311,14 @@
     constexpr_storage<value_type, error_type> s;
     bool has;
     constexpr constexpr_base() : s(), has(true) { }
     constexpr constexpr_base(value_tag_t tag) : s(tag), has(true) { }
     constexpr constexpr_base(error_tag_t tag) : s(tag), has(false) { }
-    constexpr constexpr_base(value_tag_t tag, const value_type& val) : s(tag, val), has(true) { }
-    constexpr constexpr_base(error_tag_t tag, const error_type& err) : s(tag, err), has(false) { }
+    template<typename U = T>
+    constexpr constexpr_base(value_tag_t tag, U&& val) : s(tag, std::forward<U>(val)), has(true) { }
+    template<typename U = E>
+    constexpr constexpr_base(error_tag_t tag, U&& err) : s(tag, std::forward<U>(err)), has(false) { }
     ~constexpr_base() = default;
 };
 
 template<class T, class E>
 struct base {
@@ -333,21 +336,21 @@
     constexpr base(error_tag_t tag, error_type&& err) : s(tag, std::forward<error_type>(err)), has(false) { }
     base(const base& o)
         : has(o.has)
     {
         if (has)
-            ::new (&s.val) value_type(o.s.val);
+            ::new (std::addressof(s.val)) value_type(o.s.val);
         else
-            ::new (&s.err) error_type(o.s.err);
+            ::new (std::addressof(s.err)) error_type(o.s.err);
     }
     base(base&& o)
         : has(o.has)
     {
         if (has)
-            ::new (&s.val) value_type(std::move(o.s.val));
+            ::new (std::addressof(s.val)) value_type(std::move(o.s.val));
         else
-            ::new (&s.err) error_type(std::move(o.s.err));
+            ::new (std::addressof(s.err)) error_type(std::move(o.s.err));
     }
     ~base()
     {
         if (has)
             destroy(s.val);
@@ -385,17 +388,17 @@
     constexpr base(error_tag_t tag, error_type&& err) : s(tag, std::forward<error_type>(err)), has(false) { }
     base(const base& o)
         : has(o.has)
     {
         if (!has)
-            ::new (&s.err) error_type(o.s.err);
+            ::new (std::addressof(s.err)) error_type(o.s.err);
     }
     base(base&& o)
         : has(o.has)
     {
         if (!has)
-            ::new (&s.err) error_type(std::move(o.s.err));
+            ::new (std::addressof(s.err)) error_type(std::move(o.s.err));
     }
     ~base()
     {
         if (!has)
             destroy(s.err);
@@ -412,10 +415,11 @@
 
 } // namespace __expected_detail
 
 template<class T, class E>
 class expected : private __expected_detail::base_select<T, E> {
+    WTF_MAKE_FAST_ALLOCATED;
     typedef __expected_detail::base_select<T, E> base;
 
 public:
     typedef typename base::value_type value_type;
     typedef typename base::error_type error_type;
@@ -460,20 +464,20 @@
         if (base::has && o.has)
             swap(base::s.val, o.s.val);
         else if (base::has && !o.has) {
             error_type e(std::move(o.s.err));
             __expected_detail::destroy(o.s.err);
-            ::new (&o.s.val) value_type(std::move(base::s.val));
+            ::new (std::addressof(o.s.val)) value_type(std::move(base::s.val));
             __expected_detail::destroy(base::s.val);
-            ::new (&base::s.err) error_type(std::move(e));
+            ::new (std::addressof(base::s.err)) error_type(std::move(e));
             swap(base::has, o.has);
         } else if (!base::has && o.has) {
             value_type v(std::move(o.s.val));
             __expected_detail::destroy(o.s.val);
-            ::new (&o.s.err) error_type(std::move(base::s.err));
+            ::new (std::addressof(o.s.err)) error_type(std::move(base::s.err));
             __expected_detail::destroy(base::s.err);
-            ::new (&base::s.val) value_type(std::move(v));
+            ::new (std::addressof(base::s.val)) value_type(std::move(v));
             swap(base::has, o.has);
         } else
             swap(base::s.err, o.s.err);
     }
 
@@ -535,14 +539,14 @@
         using std::swap;
         if (base::has && o.has) {
             // Do nothing.
         } else if (base::has && !o.has) {
             error_type e(std::move(o.s.err));
-            ::new (&base::s.err) error_type(e);
+            ::new (std::addressof(base::s.err)) error_type(e);
             swap(base::has, o.has);
         } else if (!base::has && o.has) {
-            ::new (&o.s.err) error_type(std::move(base::s.err));
+            ::new (std::addressof(o.s.err)) error_type(std::move(base::s.err));
             swap(base::has, o.has);
         } else
             swap(base::s.err, o.s.err);
     }
 
@@ -557,19 +561,19 @@
 template<class T, class E> constexpr bool operator==(const expected<T, E>& x, const expected<T, E>& y) { return bool(x) == bool(y) && (x ? x.value() == y.value() : x.error() == y.error()); }
 template<class T, class E> constexpr bool operator!=(const expected<T, E>& x, const expected<T, E>& y) { return !(x == y); }
 
 template<class E> constexpr bool operator==(const expected<void, E>& x, const expected<void, E>& y) { return bool(x) == bool(y) && (x ? true : x.error() == y.error()); }
 
-template<class T, class E> constexpr bool operator==(const expected<T, E>& x, const T& y) { return x == expected<T, E>(y); }
-template<class T, class E> constexpr bool operator==(const T& x, const expected<T, E>& y) { return expected<T, E>(x) == y; }
-template<class T, class E> constexpr bool operator!=(const expected<T, E>& x, const T& y) { return x != expected<T, E>(y); }
-template<class T, class E> constexpr bool operator!=(const T& x, const expected<T, E>& y) { return expected<T, E>(x) != y; }
+template<class T, class E> constexpr bool operator==(const expected<T, E>& x, const T& y) { return x ? *x == y : false; }
+template<class T, class E> constexpr bool operator==(const T& x, const expected<T, E>& y) { return y ? x == *y : false; }
+template<class T, class E> constexpr bool operator!=(const expected<T, E>& x, const T& y) { return x ? *x != y : true; }
+template<class T, class E> constexpr bool operator!=(const T& x, const expected<T, E>& y) { return y ? x != *y : true; }
 
-template<class T, class E> constexpr bool operator==(const expected<T, E>& x, const unexpected<E>& y) { return x == expected<T, E>(y); }
-template<class T, class E> constexpr bool operator==(const unexpected<E>& x, const expected<T, E>& y) { return expected<T, E>(x) == y; }
-template<class T, class E> constexpr bool operator!=(const expected<T, E>& x, const unexpected<E>& y) { return x != expected<T, E>(y); }
-template<class T, class E> constexpr bool operator!=(const unexpected<E>& x, const expected<T, E>& y) { return expected<T, E>(x) != y; }
+template<class T, class E> constexpr bool operator==(const expected<T, E>& x, const unexpected<E>& y) { return x ? false : x.error() == y.value(); }
+template<class T, class E> constexpr bool operator==(const unexpected<E>& x, const expected<T, E>& y) { return y ? false : x.value() == y.error(); }
+template<class T, class E> constexpr bool operator!=(const expected<T, E>& x, const unexpected<E>& y) { return x ? true : x.error() != y.value(); }
+template<class T, class E> constexpr bool operator!=(const unexpected<E>& x, const expected<T, E>& y) { return y ? true : x.value() != y.error(); }
 
 template<typename T, typename E> void swap(expected<T, E>& x, expected<T, E>& y) { x.swap(y); }
 
 }}} // namespace std::experimental::fundamentals_v3
 
