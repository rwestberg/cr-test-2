diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBRequestData.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBRequestData.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBRequestData.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBRequestData.h
@@ -48,10 +48,12 @@
 class IDBRequestData {
 public:
     IDBRequestData(const IDBClient::IDBConnectionProxy&, const IDBOpenDBRequest&);
     explicit IDBRequestData(IDBClient::TransactionOperation&);
     IDBRequestData(const IDBRequestData&);
+    IDBRequestData(IDBRequestData&&) = default;
+    IDBRequestData& operator=(IDBRequestData&&) = default;
 
     enum IsolatedCopyTag { IsolatedCopy };
     IDBRequestData(const IDBRequestData&, IsolatedCopyTag);
     IDBRequestData isolatedCopy() const;
 
@@ -61,11 +63,11 @@
     uint64_t objectStoreIdentifier() const;
     uint64_t indexIdentifier() const;
     IndexedDB::IndexRecordType indexRecordType() const;
     IDBResourceIdentifier cursorIdentifier() const;
 
-    const IDBDatabaseIdentifier& databaseIdentifier() const { return m_databaseIdentifier; }
+    const IDBDatabaseIdentifier& databaseIdentifier() const;
     uint64_t requestedVersion() const;
 
     bool isOpenRequest() const { return m_requestType == IndexedDB::RequestType::Open; }
     bool isDeleteRequest() const { return m_requestType == IndexedDB::RequestType::Delete; }
 
@@ -85,16 +87,24 @@
     std::unique_ptr<IDBResourceIdentifier> m_cursorIdentifier;
     uint64_t m_objectStoreIdentifier { 0 };
     uint64_t m_indexIdentifier { 0 };
     IndexedDB::IndexRecordType m_indexRecordType;
 
-    IDBDatabaseIdentifier m_databaseIdentifier;
+    mutable Optional<IDBDatabaseIdentifier> m_databaseIdentifier;
     uint64_t m_requestedVersion { 0 };
 
     IndexedDB::RequestType m_requestType { IndexedDB::RequestType::Other };
 };
 
+inline const IDBDatabaseIdentifier& IDBRequestData::databaseIdentifier() const
+{
+    ASSERT(m_databaseIdentifier);
+    if (!m_databaseIdentifier)
+        m_databaseIdentifier = IDBDatabaseIdentifier { };
+    return *m_databaseIdentifier;
+}
+
 template<class Encoder>
 void IDBRequestData::encode(Encoder& encoder) const
 {
     encoder << m_serverConnectionIdentifier << m_objectStoreIdentifier << m_indexIdentifier << m_databaseIdentifier << m_requestedVersion;
 
@@ -124,11 +134,11 @@
         return false;
 
     if (!decoder.decode(request.m_indexIdentifier))
         return false;
 
-    Optional<IDBDatabaseIdentifier> databaseIdentifier;
+    Optional<Optional<IDBDatabaseIdentifier>> databaseIdentifier;
     decoder >> databaseIdentifier;
     if (!databaseIdentifier)
         return false;
     request.m_databaseIdentifier = WTFMove(*databaseIdentifier);
 
@@ -144,29 +154,29 @@
     bool hasObject;
 
     if (!decoder.decode(hasObject))
         return false;
     if (hasObject) {
-        std::unique_ptr<IDBResourceIdentifier> object = std::make_unique<IDBResourceIdentifier>();
+        std::unique_ptr<IDBResourceIdentifier> object = makeUnique<IDBResourceIdentifier>();
         if (!decoder.decode(*object))
             return false;
         request.m_requestIdentifier = WTFMove(object);
     }
 
     if (!decoder.decode(hasObject))
         return false;
     if (hasObject) {
-        std::unique_ptr<IDBResourceIdentifier> object = std::make_unique<IDBResourceIdentifier>();
+        std::unique_ptr<IDBResourceIdentifier> object = makeUnique<IDBResourceIdentifier>();
         if (!decoder.decode(*object))
             return false;
         request.m_transactionIdentifier = WTFMove(object);
     }
 
     if (!decoder.decode(hasObject))
         return false;
     if (hasObject) {
-        std::unique_ptr<IDBResourceIdentifier> object = std::make_unique<IDBResourceIdentifier>();
+        std::unique_ptr<IDBResourceIdentifier> object = makeUnique<IDBResourceIdentifier>();
         if (!decoder.decode(*object))
             return false;
         request.m_cursorIdentifier = WTFMove(object);
     }
 
