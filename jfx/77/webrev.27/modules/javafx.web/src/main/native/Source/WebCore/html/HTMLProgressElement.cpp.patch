diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLProgressElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLProgressElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLProgressElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLProgressElement.cpp
@@ -73,11 +73,11 @@
     if (is<RenderProgress>(renderer()))
         return downcast<RenderProgress>(renderer());
     return downcast<RenderProgress>(descendantsOfType<Element>(*userAgentShadowRoot()).first()->renderer());
 }
 
-void HTMLProgressElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLProgressElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == valueAttr)
         didElementStateChange();
     else if (name == maxAttr)
         didElementStateChange();
@@ -97,11 +97,11 @@
     return !std::isfinite(value) || value < 0 ? 0 : std::min(value, max());
 }
 
 void HTMLProgressElement::setValue(double value)
 {
-    setAttributeWithoutSynchronization(valueAttr, AtomicString::number(value));
+    setAttributeWithoutSynchronization(valueAttr, AtomString::number(value));
 }
 
 double HTMLProgressElement::max() const
 {
     double max = parseToDoubleForNumberType(attributeWithoutSynchronization(maxAttr));
@@ -109,11 +109,11 @@
 }
 
 void HTMLProgressElement::setMax(double max)
 {
     if (max > 0)
-        setAttributeWithoutSynchronization(maxAttr, AtomicString::number(max));
+        setAttributeWithoutSynchronization(maxAttr, AtomString::number(max));
 }
 
 double HTMLProgressElement::position() const
 {
     if (!isDeterminate())
