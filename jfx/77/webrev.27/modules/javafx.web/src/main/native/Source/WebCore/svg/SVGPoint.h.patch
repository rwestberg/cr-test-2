diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPoint.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPoint.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPoint.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPoint.h
@@ -1,8 +1,8 @@
 /*
  * Copyright (C) 2013 Samsung Electronics. All rights reserved.
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -26,89 +26,73 @@
 
 #pragma once
 
 #include "FloatPoint.h"
 #include "SVGMatrix.h"
-#include "SVGPropertyTearOff.h"
+#include "SVGPropertyTraits.h"
+#include "SVGValueProperty.h"
 
 namespace WebCore {
 
-class SVGPoint : public SVGPropertyTearOff<FloatPoint> {
+class SVGPoint : public SVGValueProperty<FloatPoint> {
+    using Base = SVGValueProperty<FloatPoint>;
+    using Base::Base;
+    using Base::m_value;
+
 public:
-    static Ref<SVGPoint> create(SVGAnimatedProperty& animatedProperty, SVGPropertyRole role, FloatPoint& value)
+    static Ref<SVGPoint> create(const FloatPoint& value = { })
     {
-        return adoptRef(*new SVGPoint(animatedProperty, role, value));
+        return adoptRef(*new SVGPoint(value));
     }
 
-    static Ref<SVGPoint> create(const FloatPoint& initialValue = { })
+    template<typename T>
+    static ExceptionOr<Ref<SVGPoint>> create(ExceptionOr<T>&& value)
     {
-        return adoptRef(*new SVGPoint(initialValue));
+        if (value.hasException())
+            return value.releaseException();
+        return adoptRef(*new SVGPoint(value.releaseReturnValue()));
     }
 
-    template<typename T> static ExceptionOr<Ref<SVGPoint>> create(ExceptionOr<T>&& initialValue)
+    Ref<SVGPoint> clone() const
     {
-        if (initialValue.hasException())
-            return initialValue.releaseException();
-        return create(initialValue.releaseReturnValue());
+        return SVGPoint::create(m_value);
     }
 
-    float x()
-    {
-        return propertyReference().x();
-    }
+    float x() { return m_value.x(); }
 
-    ExceptionOr<void> setX(float xValue)
+    ExceptionOr<void> setX(float x)
     {
         if (isReadOnly())
             return Exception { NoModificationAllowedError };
 
-        propertyReference().setX(xValue);
+        m_value.setX(x);
         commitChange();
 
         return { };
     }
 
-    float y()
-    {
-        return propertyReference().y();
-    }
+    float y() { return m_value.y(); }
 
-    ExceptionOr<void> setY(float xValue)
+    ExceptionOr<void> setY(float y)
     {
         if (isReadOnly())
             return Exception { NoModificationAllowedError };
 
-        propertyReference().setY(xValue);
+        m_value.setY(y);
         commitChange();
-
         return { };
     }
 
-    ExceptionOr<Ref<SVGPoint>> matrixTransform(SVGMatrix& matrix)
-    {
-        if (isReadOnly())
-            return Exception { NoModificationAllowedError };
-
-        auto newPoint = propertyReference().matrixTransform(matrix.propertyReference());
-        commitChange();
-
-        return SVGPoint::create(newPoint);
-    }
-
-protected:
-    SVGPoint(SVGAnimatedProperty& animatedProperty, SVGPropertyRole role, FloatPoint& value)
-        : SVGPropertyTearOff<FloatPoint>(&animatedProperty, role, value)
-    {
-    }
-
-    SVGPoint(SVGPropertyRole role, FloatPoint& value)
-        : SVGPropertyTearOff<FloatPoint>(nullptr, role, value)
+    Ref<SVGPoint> matrixTransform(SVGMatrix& matrix) const
     {
+        auto newPoint = m_value.matrixTransform(matrix.value());
+        return adoptRef(*new SVGPoint(newPoint));
     }
 
-    explicit SVGPoint(const FloatPoint& initialValue)
-        : SVGPropertyTearOff<FloatPoint>(initialValue)
+private:
+    String valueAsString() const override
     {
+        return SVGPropertyTraits<FloatPoint>::toString(m_value);
     }
 };
 
 } // namespace WebCore
