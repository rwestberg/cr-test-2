diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringView.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringView.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringView.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringView.h
@@ -46,28 +46,30 @@
 
 namespace WTF {
 
 // StringView is a non-owning reference to a string, similar to the proposed std::string_view.
 
-class StringView {
+class StringView final {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     StringView();
 #if CHECK_STRINGVIEW_LIFETIME
     ~StringView();
     StringView(StringView&&);
     StringView(const StringView&);
     StringView& operator=(StringView&&);
     StringView& operator=(const StringView&);
 #endif
 
-    StringView(const AtomicString&);
+    StringView(const AtomString&);
     StringView(const String&);
     StringView(const StringImpl&);
     StringView(const StringImpl*);
     StringView(const LChar*, unsigned length);
     StringView(const UChar*, unsigned length);
     StringView(const char*);
+    StringView(const char*, unsigned length);
 
     static StringView empty();
 
     unsigned length() const;
     bool isEmpty() const;
@@ -90,15 +92,15 @@
     const LChar* characters8() const;
     const UChar* characters16() const;
 
     String toString() const;
     String toStringWithoutCopying() const;
-    AtomicString toAtomicString() const;
-    RefPtr<AtomicStringImpl> toExistingAtomicString() const;
+    AtomString toAtomString() const;
+    RefPtr<AtomStringImpl> toExistingAtomString() const;
 
 #if USE(CF)
-    // This function converts null strings to empty strings.
+    // These functions convert null strings to empty strings.
     WTF_EXPORT_PRIVATE RetainPtr<CFStringRef> createCFString() const;
     WTF_EXPORT_PRIVATE RetainPtr<CFStringRef> createCFStringWithoutCopying() const;
 #endif
 
 #ifdef __OBJC__
@@ -115,12 +117,12 @@
 
     void getCharactersWithUpconvert(LChar*) const;
     void getCharactersWithUpconvert(UChar*) const;
 
     StringView substring(unsigned start, unsigned length = std::numeric_limits<unsigned>::max()) const;
-    StringView left(unsigned len) const { return substring(0, len); }
-    StringView right(unsigned len) const { return substring(length() - len, len); }
+    StringView left(unsigned length) const { return substring(0, length); }
+    StringView right(unsigned length) const { return substring(this->length() - length, length); }
 
     template<typename MatchedCharacterPredicate>
     StringView stripLeadingAndTrailingMatchedCharacters(const MatchedCharacterPredicate&);
 
     class SplitResult;
@@ -130,22 +132,24 @@
     size_t find(UChar, unsigned start = 0) const;
     size_t find(CodeUnitMatchFunction, unsigned start = 0) const;
 
     WTF_EXPORT_PRIVATE size_t find(StringView, unsigned start) const;
 
-    size_t reverseFind(UChar, unsigned index = UINT_MAX) const;
+    size_t reverseFind(UChar, unsigned index = std::numeric_limits<unsigned>::max()) const;
 
     WTF_EXPORT_PRIVATE size_t findIgnoringASCIICase(const StringView&) const;
     WTF_EXPORT_PRIVATE size_t findIgnoringASCIICase(const StringView&, unsigned startOffset) const;
 
     WTF_EXPORT_PRIVATE String convertToASCIILowercase() const;
     WTF_EXPORT_PRIVATE String convertToASCIIUppercase() const;
 
     bool contains(UChar) const;
+    bool contains(CodeUnitMatchFunction) const;
     WTF_EXPORT_PRIVATE bool containsIgnoringASCIICase(const StringView&) const;
     WTF_EXPORT_PRIVATE bool containsIgnoringASCIICase(const StringView&, unsigned startOffset) const;
 
+    WTF_EXPORT_PRIVATE bool startsWith(UChar) const;
     WTF_EXPORT_PRIVATE bool startsWith(const StringView&) const;
     WTF_EXPORT_PRIVATE bool startsWithIgnoringASCIICase(const StringView&) const;
 
     WTF_EXPORT_PRIVATE bool endsWith(const StringView&) const;
     WTF_EXPORT_PRIVATE bool endsWithIgnoringASCIICase(const StringView&) const;
@@ -171,10 +175,11 @@
 
 #if CHECK_STRINGVIEW_LIFETIME
     WTF_EXPORT_PRIVATE bool underlyingStringIsValid() const;
     WTF_EXPORT_PRIVATE void setUnderlyingString(const StringImpl*);
     WTF_EXPORT_PRIVATE void setUnderlyingString(const StringView&);
+    void adoptUnderlyingString(UnderlyingString*);
 #else
     bool underlyingStringIsValid() const { return true; }
     void setUnderlyingString(const StringImpl*) { }
     void setUnderlyingString(const StringView&) { }
 #endif
@@ -183,11 +188,10 @@
     const void* m_characters { nullptr };
     unsigned m_length { 0 };
     bool m_is8Bit { true };
 
 #if CHECK_STRINGVIEW_LIFETIME
-    void adoptUnderlyingString(UnderlyingString*);
     UnderlyingString* m_underlyingString { nullptr };
 #endif
 };
 
 template<typename CharacterType, size_t inlineCapacity> void append(Vector<CharacterType, inlineCapacity>&, StringView);
@@ -221,16 +225,17 @@
 
 WTF_EXPORT_PRIVATE String normalizedNFC(const String&);
 
 }
 
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 #include <wtf/text/WTFString.h>
 
 namespace WTF {
 
 struct StringViewWithUnderlyingString {
+    WTF_MAKE_STRUCT_FAST_ALLOCATED;
     StringView view;
     String underlyingString;
 };
 
 inline StringView::StringView()
@@ -325,10 +330,15 @@
 inline StringView::StringView(const char* characters)
 {
     initialize(reinterpret_cast<const LChar*>(characters), strlen(characters));
 }
 
+inline StringView::StringView(const char* characters, unsigned length)
+{
+    initialize(reinterpret_cast<const LChar*>(characters), length);
+}
+
 inline StringView::StringView(const StringImpl& string)
 {
     setUnderlyingString(&string);
     if (string.is8Bit())
         initialize(string.characters8(), string.length());
@@ -360,12 +370,12 @@
         return;
     }
     initialize(string.characters16(), string.length());
 }
 
-inline StringView::StringView(const AtomicString& atomicString)
-    : StringView(atomicString.string())
+inline StringView::StringView(const AtomString& atomString)
+    : StringView(atomString.string())
 {
 }
 
 inline void StringView::clear()
 {
@@ -374,11 +384,11 @@
     m_is8Bit = true;
 }
 
 inline StringView StringView::empty()
 {
-    return StringView(reinterpret_cast<const LChar*>(""), 0);
+    return StringView("", 0);
 }
 
 inline const LChar* StringView::characters8() const
 {
     ASSERT(is8Bit());
@@ -392,10 +402,11 @@
     ASSERT(underlyingStringIsValid());
     return static_cast<const UChar*>(m_characters);
 }
 
 class StringView::UpconvertedCharacters {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     explicit UpconvertedCharacters(const StringView&);
     operator const UChar*() const { return m_characters; }
     const UChar* get() const { return m_characters; }
 private:
@@ -466,10 +477,15 @@
 inline bool StringView::contains(UChar character) const
 {
     return find(character) != notFound;
 }
 
+inline bool StringView::contains(CodeUnitMatchFunction function) const
+{
+    return find(function) != notFound;
+}
+
 inline void StringView::getCharactersWithUpconvert(LChar* destination) const
 {
     ASSERT(is8Bit());
     StringImpl::copyCharacters(destination, characters8(), m_length);
 }
@@ -502,22 +518,22 @@
     if (is8Bit())
         return String(characters8(), m_length);
     return String(characters16(), m_length);
 }
 
-inline AtomicString StringView::toAtomicString() const
+inline AtomString StringView::toAtomString() const
 {
     if (is8Bit())
-        return AtomicString(characters8(), m_length);
-    return AtomicString(characters16(), m_length);
+        return AtomString(characters8(), m_length);
+    return AtomString(characters16(), m_length);
 }
 
-inline RefPtr<AtomicStringImpl> StringView::toExistingAtomicString() const
+inline RefPtr<AtomStringImpl> StringView::toExistingAtomString() const
 {
     if (is8Bit())
-        return AtomicStringImpl::lookUp(characters8(), m_length);
-    return AtomicStringImpl::lookUp(characters16(), m_length);
+        return AtomStringImpl::lookUp(characters8(), m_length);
+    return AtomStringImpl::lookUp(characters16(), m_length);
 }
 
 inline float StringView::toFloat(bool& isValid) const
 {
     if (is8Bit())
@@ -645,10 +661,11 @@
 {
     return equalIgnoringASCIICaseCommon(a, b);
 }
 
 class StringView::SplitResult {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     SplitResult(StringView, UChar separator, bool allowEmptyEntries);
 
     class Iterator;
     Iterator begin() const;
@@ -659,10 +676,11 @@
     UChar m_separator;
     bool m_allowEmptyEntries;
 };
 
 class StringView::GraphemeClusters {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     explicit GraphemeClusters(const StringView&);
 
     class Iterator;
     Iterator begin() const;
@@ -671,10 +689,11 @@
 private:
     StringView m_stringView;
 };
 
 class StringView::CodePoints {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     explicit CodePoints(const StringView&);
 
     class Iterator;
     Iterator begin() const;
@@ -683,10 +702,11 @@
 private:
     StringView m_stringView;
 };
 
 class StringView::CodeUnits {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     explicit CodeUnits(const StringView&);
 
     class Iterator;
     Iterator begin() const;
@@ -695,10 +715,11 @@
 private:
     StringView m_stringView;
 };
 
 class StringView::SplitResult::Iterator {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     StringView operator*() const;
 
     WTF_EXPORT_PRIVATE Iterator& operator++();
 
@@ -719,10 +740,11 @@
     unsigned m_length;
     bool m_isDone;
 };
 
 class StringView::GraphemeClusters::Iterator {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     Iterator() = delete;
     WTF_EXPORT_PRIVATE Iterator(const StringView&, unsigned index);
     WTF_EXPORT_PRIVATE ~Iterator();
 
@@ -742,27 +764,28 @@
 
     std::unique_ptr<Impl> m_impl;
 };
 
 class StringView::CodePoints::Iterator {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     Iterator(const StringView&, unsigned index);
 
     UChar32 operator*() const;
     Iterator& operator++();
 
     bool operator==(const Iterator&) const;
     bool operator!=(const Iterator&) const;
-    Iterator& operator=(const Iterator&);
 
 private:
     std::reference_wrapper<const StringView> m_stringView;
     Optional<unsigned> m_nextCodePointOffset;
     UChar32 m_codePoint;
 };
 
 class StringView::CodeUnits::Iterator {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     Iterator(const StringView&, unsigned index);
 
     UChar operator*() const;
     Iterator& operator++();
@@ -830,18 +853,10 @@
         U16_NEXT(m_stringView.get().characters16(), m_nextCodePointOffset.value(), m_stringView.get().length(), m_codePoint);
     ASSERT(m_nextCodePointOffset.value() <= m_stringView.get().length());
     return *this;
 }
 
-inline auto StringView::CodePoints::Iterator::operator=(const Iterator& other) -> Iterator&
-{
-    m_stringView = other.m_stringView;
-    m_nextCodePointOffset = other.m_nextCodePointOffset;
-    m_codePoint = other.m_codePoint;
-    return *this;
-}
-
 inline UChar32 StringView::CodePoints::Iterator::operator*() const
 {
     ASSERT(m_nextCodePointOffset);
     return m_codePoint;
 }
