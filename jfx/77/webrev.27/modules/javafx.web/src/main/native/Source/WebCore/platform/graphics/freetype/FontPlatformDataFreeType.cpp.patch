diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/freetype/FontPlatformDataFreeType.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/freetype/FontPlatformDataFreeType.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/freetype/FontPlatformDataFreeType.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/freetype/FontPlatformDataFreeType.cpp
@@ -124,42 +124,10 @@
     if (FT_Face ftFace = cairoFtFaceLocker.ftFace())
         m_isColorBitmapFont = FT_HAS_COLOR(ftFace);
 #endif
 }
 
-FontPlatformData::FontPlatformData(const FontPlatformData& other)
-{
-    *this = other;
-}
-
-FontPlatformData& FontPlatformData::operator=(const FontPlatformData& other)
-{
-    // Check for self-assignment.
-    if (this == &other)
-        return *this;
-
-    m_size = other.m_size;
-    m_orientation = other.m_orientation;
-    m_widthVariant = other.m_widthVariant;
-    m_textRenderingMode = other.m_textRenderingMode;
-
-    m_syntheticBold = other.m_syntheticBold;
-    m_syntheticOblique = other.m_syntheticOblique;
-    m_isColorBitmapFont = other.m_isColorBitmapFont;
-    m_isHashTableDeletedValue = other.m_isHashTableDeletedValue;
-    m_isSystemFont = other.m_isSystemFont;
-
-    m_fixedWidth = other.m_fixedWidth;
-    m_pattern = other.m_pattern;
-
-    m_scaledFont = other.m_scaledFont;
-
-    return *this;
-}
-
-FontPlatformData::~FontPlatformData() = default;
-
 FontPlatformData FontPlatformData::cloneWithOrientation(const FontPlatformData& source, FontOrientation orientation)
 {
     FontPlatformData copy(source);
     if (copy.m_scaledFont && copy.m_orientation != orientation) {
         copy.m_orientation = orientation;
@@ -309,11 +277,11 @@
     CairoFtFaceLocker cairoFtFaceLocker(m_scaledFont.get());
     FT_Face ftFace = cairoFtFaceLocker.ftFace();
     if (!ftFace)
         return nullptr;
 
-    HbUniquePtr<hb_face_t> face(hb_ft_face_create_cached(ftFace));
+    HbUniquePtr<hb_face_t> face(hb_ft_face_create_referenced(ftFace));
     if (!hb_ot_math_has_data(face.get()))
         return nullptr;
 
     return HbUniquePtr<hb_font_t>(hb_font_create(face.get()));
 }
