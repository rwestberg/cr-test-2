diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/TagCollection.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/TagCollection.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/TagCollection.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/TagCollection.cpp
@@ -23,14 +23,19 @@
 
 #include "config.h"
 #include "TagCollection.h"
 
 #include "NodeRareData.h"
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
-TagCollectionNS::TagCollectionNS(ContainerNode& rootNode, const AtomicString& namespaceURI, const AtomicString& localName)
+WTF_MAKE_ISO_ALLOCATED_IMPL(TagCollection);
+WTF_MAKE_ISO_ALLOCATED_IMPL(TagCollectionNS);
+WTF_MAKE_ISO_ALLOCATED_IMPL(HTMLTagCollection);
+
+TagCollectionNS::TagCollectionNS(ContainerNode& rootNode, const AtomString& namespaceURI, const AtomString& localName)
     : CachedHTMLCollection<TagCollectionNS, CollectionTypeTraits<ByTag>::traversalType>(rootNode, ByTag)
     , m_namespaceURI(namespaceURI)
     , m_localName(localName)
 {
     ASSERT(m_namespaceURI.isNull() || !m_namespaceURI.isEmpty());
@@ -39,11 +44,11 @@
 TagCollectionNS::~TagCollectionNS()
 {
     ownerNode().nodeLists()->removeCachedTagCollectionNS(*this, m_namespaceURI, m_localName);
 }
 
-TagCollection::TagCollection(ContainerNode& rootNode, const AtomicString& qualifiedName)
+TagCollection::TagCollection(ContainerNode& rootNode, const AtomString& qualifiedName)
     : CachedHTMLCollection<TagCollection, CollectionTypeTraits<ByTag>::traversalType>(rootNode, ByTag)
     , m_qualifiedName(qualifiedName)
 {
     ASSERT(qualifiedName != starAtom());
 }
@@ -51,11 +56,11 @@
 TagCollection::~TagCollection()
 {
     ownerNode().nodeLists()->removeCachedCollection(this, m_qualifiedName);
 }
 
-HTMLTagCollection::HTMLTagCollection(ContainerNode& rootNode, const AtomicString& qualifiedName)
+HTMLTagCollection::HTMLTagCollection(ContainerNode& rootNode, const AtomString& qualifiedName)
     : CachedHTMLCollection<HTMLTagCollection, CollectionTypeTraits<ByHTMLTag>::traversalType>(rootNode, ByHTMLTag)
     , m_qualifiedName(qualifiedName)
     , m_loweredQualifiedName(qualifiedName.convertToASCIILowercase())
 {
     ASSERT(qualifiedName != starAtom());
