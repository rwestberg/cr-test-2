diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/CommandLineAPIHost.h b/modules/javafx.web/src/main/native/Source/WebCore/inspector/CommandLineAPIHost.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/CommandLineAPIHost.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/CommandLineAPIHost.h
@@ -27,53 +27,37 @@
  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include "InstrumentingAgents.h"
 #include <JavaScriptCore/PerGlobalObjectWrapperWorld.h>
 #include <wtf/RefCounted.h>
 #include <wtf/Vector.h>
 #include <wtf/text/WTFString.h>
 
 namespace JSC {
 class JSValue;
 }
 
-namespace Inspector {
-class InspectorAgent;
-class InspectorConsoleAgent;
-}
-
 namespace WebCore {
 
 class Database;
-class InspectorDOMAgent;
-class InspectorDOMStorageAgent;
-class InspectorDatabaseAgent;
+class EventTarget;
 class JSDOMGlobalObject;
-class Node;
 class Storage;
 
 struct EventListenerInfo;
 
 class CommandLineAPIHost : public RefCounted<CommandLineAPIHost> {
 public:
     static Ref<CommandLineAPIHost> create();
     ~CommandLineAPIHost();
 
-    void init(Inspector::InspectorAgent* inspectorAgent
-        , Inspector::InspectorConsoleAgent* consoleAgent
-        , InspectorDOMAgent* domAgent
-        , InspectorDOMStorageAgent* domStorageAgent
-        , InspectorDatabaseAgent* databaseAgent
-        )
+    void init(RefPtr<InstrumentingAgents> instrumentingAgents)
     {
-        m_inspectorAgent = inspectorAgent;
-        m_consoleAgent = consoleAgent;
-        m_domAgent = domAgent;
-        m_domStorageAgent = domStorageAgent;
-        m_databaseAgent = databaseAgent;
+        m_instrumentingAgents = instrumentingAgents;
     }
 
     void disconnect();
 
     void clearConsoleMessages();
@@ -95,27 +79,22 @@
         bool passive;
         bool once;
     };
 
     using EventListenersRecord = Vector<WTF::KeyValuePair<String, Vector<ListenerEntry>>>;
-    EventListenersRecord getEventListeners(JSC::ExecState&, Node*);
+    EventListenersRecord getEventListeners(JSC::ExecState&, EventTarget&);
 
     String databaseId(Database&);
     String storageId(Storage&);
 
     JSC::JSValue wrapper(JSC::ExecState*, JSDOMGlobalObject*);
     void clearAllWrappers();
 
 private:
     CommandLineAPIHost();
 
-    Inspector::InspectorAgent* m_inspectorAgent { nullptr };
-    Inspector::InspectorConsoleAgent* m_consoleAgent { nullptr };
-    InspectorDOMAgent* m_domAgent { nullptr };
-    InspectorDOMStorageAgent* m_domStorageAgent { nullptr };
-    InspectorDatabaseAgent* m_databaseAgent { nullptr };
-
+    RefPtr<InstrumentingAgents> m_instrumentingAgents;
     std::unique_ptr<InspectableObject> m_inspectedObject; // $0
     Inspector::PerGlobalObjectWrapperWorld m_wrappers;
 };
 
 } // namespace WebCore
