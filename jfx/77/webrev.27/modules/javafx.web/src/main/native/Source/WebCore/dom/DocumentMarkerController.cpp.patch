diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/DocumentMarkerController.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/DocumentMarkerController.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/DocumentMarkerController.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/DocumentMarkerController.cpp
@@ -140,21 +140,46 @@
         DocumentMarker::DraggedContentData draggedContentData { markedText.node() };
         addMarker(textPiece->startContainer(), { DocumentMarker::DraggedContent, textPiece->startOffset(), textPiece->endOffset(), WTFMove(draggedContentData) });
     }
 }
 
+#if ENABLE(PLATFORM_DRIVEN_TEXT_CHECKING)
+void DocumentMarkerController::addPlatformTextCheckingMarker(Range& range, const String& key, const String& value)
+{
+    for (TextIterator markedText(&range); !markedText.atEnd(); markedText.advance()) {
+        auto textPiece = markedText.range();
+        DocumentMarker::PlatformTextCheckingData textCheckingData { key, value };
+        addMarker(textPiece->startContainer(), { DocumentMarker::PlatformTextChecking, textPiece->startOffset(), textPiece->endOffset(), WTFMove(textCheckingData) });
+    }
+}
+#endif
+
 void DocumentMarkerController::removeMarkers(Range& range, OptionSet<DocumentMarker::MarkerType> markerTypes, RemovePartiallyOverlappingMarkerOrNot shouldRemovePartiallyOverlappingMarker)
 {
     for (TextIterator markedText(&range); !markedText.atEnd(); markedText.advance()) {
         if (!possiblyHasMarkers(markerTypes))
             return;
         ASSERT(!m_markers.isEmpty());
 
         auto textPiece = markedText.range();
         unsigned startOffset = textPiece->startOffset();
         unsigned endOffset = textPiece->endOffset();
-        removeMarkers(textPiece->startContainer(), startOffset, endOffset - startOffset, markerTypes, shouldRemovePartiallyOverlappingMarker);
+        removeMarkers(textPiece->startContainer(), startOffset, endOffset - startOffset, markerTypes, nullptr, shouldRemovePartiallyOverlappingMarker);
+    }
+}
+
+void DocumentMarkerController::filterMarkers(Range& range, std::function<bool(DocumentMarker*)> filterFunction, OptionSet<DocumentMarker::MarkerType> markerTypes, RemovePartiallyOverlappingMarkerOrNot shouldRemovePartiallyOverlappingMarker)
+{
+    for (TextIterator markedText(&range); !markedText.atEnd(); markedText.advance()) {
+        if (!possiblyHasMarkers(markerTypes))
+            return;
+        ASSERT(!m_markers.isEmpty());
+
+        auto textPiece = markedText.range();
+        unsigned startOffset = textPiece->startOffset();
+        unsigned endOffset = textPiece->endOffset();
+        removeMarkers(textPiece->startContainer(), startOffset, endOffset - startOffset, markerTypes, filterFunction, shouldRemovePartiallyOverlappingMarker);
     }
 }
 
 static void updateRenderedRectsForMarker(RenderedDocumentMarker& marker, Node& node)
 {
@@ -298,10 +323,15 @@
     return result;
 }
 
 static bool shouldInsertAsSeparateMarker(const DocumentMarker& newMarker)
 {
+#if ENABLE(PLATFORM_DRIVEN_TEXT_CHECKING)
+    if (newMarker.type() == DocumentMarker::PlatformTextChecking)
+        return true;
+#endif
+
 #if PLATFORM(IOS_FAMILY)
     if (newMarker.type() == DocumentMarker::DictationPhraseWithAlternatives || newMarker.type() == DocumentMarker::DictationResult)
         return true;
 #endif
     if (newMarker.type() == DocumentMarker::DraggedContent) {
@@ -332,11 +362,11 @@
     m_possiblyExistingMarkerTypes.add(newMarker.type());
 
     std::unique_ptr<MarkerList>& list = m_markers.add(&node, nullptr).iterator->value;
 
     if (!list) {
-        list = std::make_unique<MarkerList>();
+        list = makeUnique<MarkerList>();
         list->append(RenderedDocumentMarker(newMarker));
     } else if (shouldInsertAsSeparateMarker(newMarker)) {
         // We don't merge dictation markers.
         size_t i;
         size_t numberOfMarkers = list->size();
@@ -431,11 +461,11 @@
 
     if (docDirty && dstNode.renderer())
         dstNode.renderer()->repaint();
 }
 
-void DocumentMarkerController::removeMarkers(Node& node, unsigned startOffset, int length, OptionSet<DocumentMarker::MarkerType> markerTypes, RemovePartiallyOverlappingMarkerOrNot shouldRemovePartiallyOverlappingMarker)
+void DocumentMarkerController::removeMarkers(Node& node, unsigned startOffset, int length, OptionSet<DocumentMarker::MarkerType> markerTypes, std::function<bool(DocumentMarker*)> filterFunction, RemovePartiallyOverlappingMarkerOrNot shouldRemovePartiallyOverlappingMarker)
 {
     if (length <= 0)
         return;
 
     if (!possiblyHasMarkers(markerTypes))
@@ -459,10 +489,15 @@
         if (marker.endOffset() <= startOffset || !markerTypes.contains(marker.type())) {
             i++;
             continue;
         }
 
+        if (filterFunction && !filterFunction(&marker)) {
+            i++;
+            continue;
+        }
+
         // at this point we know that marker and target intersect in some way
         docDirty = true;
 
         // pitch the old marker
         list->remove(i);
