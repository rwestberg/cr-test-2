diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorPageAgent.h b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorPageAgent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorPageAgent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorPageAgent.h
@@ -55,14 +55,15 @@
 class InspectorPageAgent final : public InspectorAgentBase, public Inspector::PageBackendDispatcherHandler {
     WTF_MAKE_NONCOPYABLE(InspectorPageAgent);
     WTF_MAKE_FAST_ALLOCATED;
 public:
     InspectorPageAgent(PageAgentContext&, InspectorClient*, InspectorOverlay*);
+    virtual ~InspectorPageAgent();
 
     enum ResourceType {
         DocumentResource,
-        StylesheetResource,
+        StyleSheetResource,
         ImageResource,
         FontResource,
         ScriptResource,
         XHRResource,
         FetchResource,
@@ -74,41 +75,47 @@
 #endif
         OtherResource,
     };
 
     static bool sharedBufferContent(RefPtr<SharedBuffer>&&, const String& textEncodingName, bool withBase64Encode, String* result);
+    static Vector<CachedResource*> cachedResourcesForFrame(Frame*);
     static void resourceContent(ErrorString&, Frame*, const URL&, String* result, bool* base64Encoded);
     static String sourceMapURLForResource(CachedResource*);
-
     static CachedResource* cachedResource(Frame*, const URL&);
     static Inspector::Protocol::Page::ResourceType resourceTypeJSON(ResourceType);
     static ResourceType inspectorResourceType(CachedResource::Type);
     static ResourceType inspectorResourceType(const CachedResource&);
     static Inspector::Protocol::Page::ResourceType cachedResourceTypeJSON(const CachedResource&);
+    static Frame* findFrameWithSecurityOrigin(Page&, const String& originRawString);
+    static DocumentLoader* assertDocumentLoader(ErrorString&, Frame*);
 
-    // Page API for InspectorFrontend
-    void enable(ErrorString&) final;
-    void disable(ErrorString&) final;
-    void reload(ErrorString&, const bool* optionalReloadFromOrigin, const bool* optionalRevalidateAllResources) final;
-    void navigate(ErrorString&, const String& url) final;
-    void overrideUserAgent(ErrorString&, const String* value) final;
-    void overrideSetting(ErrorString&, const String& setting, const bool* value) final;
-    void getCookies(ErrorString&, RefPtr<JSON::ArrayOf<Inspector::Protocol::Page::Cookie>>& cookies) final;
-    void deleteCookie(ErrorString&, const String& cookieName, const String& url) final;
-    void getResourceTree(ErrorString&, RefPtr<Inspector::Protocol::Page::FrameResourceTree>&) final;
-    void getResourceContent(ErrorString&, const String& frameId, const String& url, String* content, bool* base64Encoded) final;
-    void searchInResource(ErrorString&, const String& frameId, const String& url, const String& query, const bool* optionalCaseSensitive, const bool* optionalIsRegex, const String* optionalRequestId, RefPtr<JSON::ArrayOf<Inspector::Protocol::GenericTypes::SearchMatch>>&) final;
-    void searchInResources(ErrorString&, const String&, const bool* caseSensitive, const bool* isRegex, RefPtr<JSON::ArrayOf<Inspector::Protocol::Page::SearchResult>>&) final;
-    void setShowRulers(ErrorString&, bool) final;
-    void setShowPaintRects(ErrorString&, bool show) final;
-    void setEmulatedMedia(ErrorString&, const String&) final;
-    void setForcedAppearance(ErrorString&, const String&) final;
-    void getCompositingBordersVisible(ErrorString&, bool* out_param) final;
-    void setCompositingBordersVisible(ErrorString&, bool) final;
-    void snapshotNode(ErrorString&, int nodeId, String* outDataURL) final;
-    void snapshotRect(ErrorString&, int x, int y, int width, int height, const String& coordinateSystem, String* outDataURL) final;
-    void archive(ErrorString&, String* data) final;
+    // InspectorAgentBase
+    void didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*);
+    void willDestroyFrontendAndBackend(Inspector::DisconnectReason);
+
+    // PageBackendDispatcherHandler
+    void enable(ErrorString&);
+    void disable(ErrorString&);
+    void reload(ErrorString&, const bool* optionalReloadFromOrigin, const bool* optionalRevalidateAllResources);
+    void navigate(ErrorString&, const String& url);
+    void overrideUserAgent(ErrorString&, const String* value);
+    void overrideSetting(ErrorString&, const String& setting, const bool* value);
+    void getCookies(ErrorString&, RefPtr<JSON::ArrayOf<Inspector::Protocol::Page::Cookie>>& cookies);
+    void deleteCookie(ErrorString&, const String& cookieName, const String& url);
+    void getResourceTree(ErrorString&, RefPtr<Inspector::Protocol::Page::FrameResourceTree>&);
+    void getResourceContent(ErrorString&, const String& frameId, const String& url, String* content, bool* base64Encoded);
+    void searchInResource(ErrorString&, const String& frameId, const String& url, const String& query, const bool* optionalCaseSensitive, const bool* optionalIsRegex, const String* optionalRequestId, RefPtr<JSON::ArrayOf<Inspector::Protocol::GenericTypes::SearchMatch>>&);
+    void searchInResources(ErrorString&, const String&, const bool* caseSensitive, const bool* isRegex, RefPtr<JSON::ArrayOf<Inspector::Protocol::Page::SearchResult>>&);
+    void setShowRulers(ErrorString&, bool);
+    void setShowPaintRects(ErrorString&, bool show);
+    void setEmulatedMedia(ErrorString&, const String&);
+    void setForcedAppearance(ErrorString&, const String&);
+    void getCompositingBordersVisible(ErrorString&, bool* out_param);
+    void setCompositingBordersVisible(ErrorString&, bool);
+    void snapshotNode(ErrorString&, int nodeId, String* outDataURL);
+    void snapshotRect(ErrorString&, int x, int y, int width, int height, const String& coordinateSystem, String* outDataURL);
+    void archive(ErrorString&, String* data);
 
     // InspectorInstrumentation
     void domContentEventFired();
     void loadEventFired();
     void frameNavigated(Frame&);
@@ -124,24 +131,14 @@
     void didPaint(RenderObject&, const LayoutRect&);
     void didLayout();
     void didScroll();
     void didRecalculateStyle();
 
-    // Inspector Controller API
-    void didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*) final;
-    void willDestroyFrontendAndBackend(Inspector::DisconnectReason) final;
-
-    // Cross-agents API
-    Page& page() { return m_page; }
-    Frame& mainFrame();
     Frame* frameForId(const String& frameId);
     WEBCORE_EXPORT String frameId(Frame*);
-    bool hasIdForFrame(Frame*) const;
     String loaderId(DocumentLoader*);
-    Frame* findFrameWithSecurityOrigin(const String& originRawString);
     Frame* assertFrame(ErrorString&, const String& frameId);
-    static DocumentLoader* assertDocumentLoader(ErrorString&, Frame*);
 
 private:
     double timestamp();
 
     static bool mainResourceContent(Frame*, bool withBase64Encode, String* result);
@@ -151,21 +148,20 @@
     Ref<Inspector::Protocol::Page::FrameResourceTree> buildObjectForFrameTree(Frame*);
 
     std::unique_ptr<Inspector::PageFrontendDispatcher> m_frontendDispatcher;
     RefPtr<Inspector::PageBackendDispatcher> m_backendDispatcher;
 
-    Page& m_page;
+    Page& m_inspectedPage;
     InspectorClient* m_client { nullptr };
     InspectorOverlay* m_overlay { nullptr };
 
     HashMap<Frame*, String> m_frameToIdentifier;
     HashMap<String, Frame*> m_identifierToFrame;
     HashMap<DocumentLoader*, String> m_loaderToIdentifier;
-    bool m_enabled { false };
-    bool m_isFirstLayoutAfterOnLoad { false };
-    bool m_showPaintRects { false };
     String m_userAgentOverride;
     String m_emulatedMedia;
     String m_forcedAppearance;
+    bool m_isFirstLayoutAfterOnLoad { false };
+    bool m_showPaintRects { false };
 };
 
 } // namespace WebCore
