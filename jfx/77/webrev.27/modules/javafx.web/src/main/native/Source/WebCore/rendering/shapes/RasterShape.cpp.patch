diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/shapes/RasterShape.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/shapes/RasterShape.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/shapes/RasterShape.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/shapes/RasterShape.cpp
@@ -34,11 +34,11 @@
 
 namespace WebCore {
 
 class MarginIntervalGenerator {
 public:
-    MarginIntervalGenerator(unsigned radius);
+    explicit MarginIntervalGenerator(unsigned radius);
     void set(int y, const IntShapeInterval&);
     IntShapeInterval intervalAt(int y) const;
 
 private:
     Vector<int> m_xIntercepts;
@@ -74,11 +74,11 @@
 }
 
 std::unique_ptr<RasterShapeIntervals> RasterShapeIntervals::computeShapeMarginIntervals(int shapeMargin) const
 {
     int marginIntervalsSize = (offset() > shapeMargin) ? size() : size() - offset() * 2 + shapeMargin * 2;
-    auto result = std::make_unique<RasterShapeIntervals>(marginIntervalsSize, std::max(shapeMargin, offset()));
+    auto result = makeUnique<RasterShapeIntervals>(marginIntervalsSize, std::max(shapeMargin, offset()));
     MarginIntervalGenerator marginIntervalGenerator(shapeMargin);
 
     for (int y = bounds().y(); y < bounds().maxY(); ++y) {
         const IntShapeInterval& intervalAtY = intervalAt(y);
         if (intervalAtY.isEmpty())
