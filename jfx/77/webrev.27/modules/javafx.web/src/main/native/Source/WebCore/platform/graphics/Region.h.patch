diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Region.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Region.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Region.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Region.h
@@ -25,10 +25,12 @@
 
 #ifndef Region_h
 #define Region_h
 
 #include "IntRect.h"
+#include <wtf/Optional.h>
+#include <wtf/PointerComparison.h>
 #include <wtf/Vector.h>
 
 namespace WebCore {
 
 class Region {
@@ -36,72 +38,64 @@
 
 public:
     WEBCORE_EXPORT Region();
     WEBCORE_EXPORT Region(const IntRect&);
 
+    WEBCORE_EXPORT Region(const Region&);
+    WEBCORE_EXPORT Region(Region&&);
+
+    WEBCORE_EXPORT ~Region();
+
+    WEBCORE_EXPORT Region& operator=(const Region&);
+    WEBCORE_EXPORT Region& operator=(Region&&);
+
     IntRect bounds() const { return m_bounds; }
     bool isEmpty() const { return m_bounds.isEmpty(); }
-    bool isRect() const { return m_shape.isRect(); }
+    bool isRect() const { return !m_shape; }
 
-    WEBCORE_EXPORT Vector<IntRect> rects() const;
+    WEBCORE_EXPORT Vector<IntRect, 1> rects() const;
 
     WEBCORE_EXPORT void unite(const Region&);
     WEBCORE_EXPORT void intersect(const Region&);
     WEBCORE_EXPORT void subtract(const Region&);
 
     WEBCORE_EXPORT void translate(const IntSize&);
 
     // Returns true if the query region is a subset of this region.
     WEBCORE_EXPORT bool contains(const Region&) const;
 
-    bool contains(const IntPoint&) const;
+    WEBCORE_EXPORT bool contains(const IntPoint&) const;
 
     // Returns true if the query region intersects any part of this region.
-    bool intersects(const Region&) const;
+    WEBCORE_EXPORT bool intersects(const Region&) const;
 
-    WEBCORE_EXPORT unsigned totalArea() const;
+    WEBCORE_EXPORT uint64_t totalArea() const;
 
-    unsigned gridSize() const { return m_shape.gridSize(); }
+    unsigned gridSize() const { return m_shape ? m_shape->gridSize() : 0; }
 
 #ifndef NDEBUG
     void dump() const;
 #endif
 
-    bool isValid() const { return m_shape.isValid(); }
+    template<class Encoder> void encode(Encoder&) const;
+    template<class Decoder> static Optional<Region> decode(Decoder&);
+    // FIXME: Remove legacy decode.
+    template<class Decoder> static bool decode(Decoder&, Region&);
 
-    // This is internal to Region, but exposed just for encoding.
-    // FIXME: figure out a better way to encode WebCore classes.
+private:
     struct Span {
-        Span()
-            : y(0)
-            , segmentIndex(0)
-        {
-        }
-
-        Span(int y, size_t segmentIndex)
-            : y(y)
-            , segmentIndex(segmentIndex)
-        {
-        }
-
-        int y;
-        size_t segmentIndex;
-    };
+        int y { 0 };
+        size_t segmentIndex { 0 };
 
-    // For encoding/decoding only.
-    const Vector<int, 32>& shapeSegments() const { return m_shape.segments(); }
-    const Vector<Span, 16>& shapeSpans() const { return m_shape.spans(); }
-
-    void setShapeSegments(const Vector<int>& segments) { m_shape.setSegments(segments); }
-    void setShapeSpans(const Vector<Span>& spans) { m_shape.setSpans(spans); }
-    WEBCORE_EXPORT void updateBoundsFromShape();
-
-private:
+        template<class Encoder> void encode(Encoder&) const;
+        template<class Decoder> static Optional<Span> decode(Decoder&);
+    };
 
     class Shape {
+        WTF_MAKE_FAST_ALLOCATED;
     public:
-        Shape();
+        Shape() = default;
         Shape(const IntRect&);
 
         IntRect bounds() const;
         bool isEmpty() const { return m_spans.isEmpty(); }
         bool isRect() const { return m_spans.size() <= 2 && m_segments.size() <= 2; }
@@ -118,26 +112,19 @@
         static Shape unionShapes(const Shape& shape1, const Shape& shape2);
         static Shape intersectShapes(const Shape& shape1, const Shape& shape2);
         static Shape subtractShapes(const Shape& shape1, const Shape& shape2);
 
         WEBCORE_EXPORT void translate(const IntSize&);
-        void swap(Shape&);
 
         struct CompareContainsOperation;
         struct CompareIntersectsOperation;
 
         template<typename CompareOperation>
         static bool compareShapes(const Shape& shape1, const Shape& shape2);
 
-        WEBCORE_EXPORT bool isValid() const;
-
-        // For encoding/decoding only.
-        const Vector<int, 32>& segments() const { return m_segments; }
-        const Vector<Span, 16>& spans() const { return m_spans; }
-
-        void setSegments(const Vector<int>& segments) { m_segments = segments; }
-        void setSpans(const Vector<Span>& spans) { m_spans = spans; }
+        template<class Encoder> void encode(Encoder&) const;
+        template<class Decoder> static Optional<Shape> decode(Decoder&);
 
 #ifndef NDEBUG
         void dump() const;
 #endif
 
@@ -160,16 +147,20 @@
         Vector<Span, 16> m_spans;
 
         friend bool operator==(const Shape&, const Shape&);
     };
 
+    std::unique_ptr<Shape> copyShape() const { return m_shape ? makeUnique<Shape>(*m_shape) : nullptr; }
+    void setShape(Shape&&);
+
     IntRect m_bounds;
-    Shape m_shape;
+    std::unique_ptr<Shape> m_shape;
 
     friend bool operator==(const Region&, const Region&);
     friend bool operator==(const Shape&, const Shape&);
     friend bool operator==(const Span&, const Span&);
+    friend bool operator!=(const Span&, const Span&);
 };
 
 static inline Region intersect(const Region& a, const Region& b)
 {
     Region result(a);
@@ -194,11 +185,11 @@
     return result;
 }
 
 inline bool operator==(const Region& a, const Region& b)
 {
-    return a.m_bounds == b.m_bounds && a.m_shape == b.m_shape;
+    return a.m_bounds == b.m_bounds && arePointingToEqualData(a.m_shape, b.m_shape);
 }
 inline bool operator!=(const Region& a, const Region& b)
 {
     return !(a == b);
 }
@@ -210,13 +201,112 @@
 
 inline bool operator==(const Region::Span& a, const Region::Span& b)
 {
     return a.y == b.y && a.segmentIndex == b.segmentIndex;
 }
+
 inline bool operator!=(const Region::Span& a, const Region::Span& b)
 {
     return !(a == b);
 }
 
+WEBCORE_EXPORT WTF::TextStream& operator<<(WTF::TextStream&, const Region&);
+
+template<class Encoder>
+void Region::Span::encode(Encoder& encoder) const
+{
+    encoder << y << static_cast<uint64_t>(segmentIndex);
+}
+
+template<class Decoder>
+Optional<Region::Span> Region::Span::decode(Decoder& decoder)
+{
+    Optional<int> y;
+    decoder >> y;
+    if (!y)
+        return { };
+
+    Optional<uint64_t> segmentIndex;
+    decoder >> segmentIndex;
+    if (!segmentIndex)
+        return { };
+
+    return { { *y, static_cast<size_t>(*segmentIndex) } };
+}
+
+template<class Encoder>
+void Region::Shape::encode(Encoder& encoder) const
+{
+    encoder << m_segments;
+    encoder << m_spans;
+}
+
+template<class Decoder>
+Optional<Region::Shape> Region::Shape::decode(Decoder& decoder)
+{
+    Optional<Vector<int>> segments;
+    decoder >> segments;
+    if (!segments)
+        return WTF::nullopt;
+
+    Optional<Vector<Region::Span>> spans;
+    decoder >> spans;
+    if (!spans)
+        return WTF::nullopt;
+
+    Shape shape;
+    shape.m_segments = WTFMove(*segments);
+    shape.m_spans = WTFMove(*spans);
+
+    return { shape };
+}
+
+template<class Encoder>
+void Region::encode(Encoder& encoder) const
+{
+    encoder << m_bounds;
+    bool hasShape = !!m_shape;
+    encoder << hasShape;
+    if (hasShape)
+        encoder << *m_shape;
+}
+
+template<class Decoder>
+Optional<Region> Region::decode(Decoder& decoder)
+{
+    Optional<IntRect> bounds;
+    decoder >> bounds;
+    if (!bounds)
+        return WTF::nullopt;
+
+    Optional<bool> hasShape;
+    decoder >> hasShape;
+    if (!hasShape)
+        return WTF::nullopt;
+
+    Region region = { *bounds };
+
+    if (*hasShape) {
+        Optional<Shape> shape;
+        decoder >> shape;
+        if (!shape)
+            return WTF::nullopt;
+        region.m_shape = makeUnique<Shape>(WTFMove(*shape));
+    }
+
+    return { region };
+}
+
+template<class Decoder>
+bool Region::decode(Decoder& decoder, Region& region)
+{
+    Optional<Region> decodedRegion;
+    decoder >> decodedRegion;
+    if (!decodedRegion)
+        return false;
+    region = WTFMove(*decodedRegion);
+    return true;
+}
+
 } // namespace WebCore
 
 #endif // Region_h
