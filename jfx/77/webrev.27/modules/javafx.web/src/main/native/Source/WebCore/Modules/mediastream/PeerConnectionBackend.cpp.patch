diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/PeerConnectionBackend.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/PeerConnectionBackend.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/PeerConnectionBackend.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/PeerConnectionBackend.cpp
@@ -41,10 +41,11 @@
 #include "Page.h"
 #include "RTCIceCandidate.h"
 #include "RTCPeerConnection.h"
 #include "RTCPeerConnectionIceEvent.h"
 #include "RTCRtpCapabilities.h"
+#include "RTCTrackEvent.h"
 #include "RuntimeEnabledFeatures.h"
 #include <wtf/text/StringBuilder.h>
 #include <wtf/text/StringConcatenateNumbers.h>
 
 namespace WebCore {
@@ -246,10 +247,25 @@
 void PeerConnectionBackend::setRemoteDescriptionSucceeded()
 {
     ASSERT(isMainThread());
     ALWAYS_LOG(LOGIDENTIFIER, "Set remote description succeeded");
 
+    ASSERT(!m_peerConnection.isClosed());
+
+    auto events = WTFMove(m_pendingTrackEvents);
+    for (auto& event : events) {
+        auto& track = event.track.get();
+
+        m_peerConnection.fireEvent(RTCTrackEvent::create(eventNames().trackEvent, Event::CanBubble::No, Event::IsCancelable::No, WTFMove(event.receiver), WTFMove(event.track), WTFMove(event.streams), WTFMove(event.transceiver)));
+
+        if (m_peerConnection.isClosed())
+            return;
+
+        // FIXME: As per spec, we should set muted to 'false' when starting to receive the content from network.
+        track.source().setMuted(false);
+    }
+
     if (m_peerConnection.isClosed())
         return;
 
     ASSERT(m_setDescriptionPromise);
 
@@ -260,19 +276,26 @@
 void PeerConnectionBackend::setRemoteDescriptionFailed(Exception&& exception)
 {
     ASSERT(isMainThread());
     ALWAYS_LOG(LOGIDENTIFIER, "Set remote description failed:", exception.message());
 
-    if (m_peerConnection.isClosed())
-        return;
+    ASSERT(m_pendingTrackEvents.isEmpty());
+    m_pendingTrackEvents.clear();
 
+    ASSERT(!m_peerConnection.isClosed());
     ASSERT(m_setDescriptionPromise);
 
     m_setDescriptionPromise->reject(WTFMove(exception));
     m_setDescriptionPromise = WTF::nullopt;
 }
 
+void PeerConnectionBackend::addPendingTrackEvent(PendingTrackEvent&& event)
+{
+    ASSERT(!m_peerConnection.isClosed());
+    m_pendingTrackEvents.append(WTFMove(event));
+}
+
 static String extractIPAddres(const String& sdp)
 {
     ASSERT(sdp.contains(" host "));
     unsigned counter = 0;
     for (auto item : StringView { sdp }.split(' ')) {
@@ -306,18 +329,14 @@
     ALWAYS_LOG(LOGIDENTIFIER, "Adding ice candidate succeeded");
 
     if (m_peerConnection.isClosed())
         return;
 
-    // FIXME: Update remote description and set ICE connection state to checking if not already done so.
     ASSERT(m_addIceCandidatePromise);
 
     m_addIceCandidatePromise->resolve();
     m_addIceCandidatePromise = WTF::nullopt;
-
-    if (!m_waitingForMDNSResolution && m_finishedReceivingCandidates)
-        endOfIceCandidates(WTFMove(*m_endOfIceCandidatePromise));
 }
 
 void PeerConnectionBackend::addIceCandidateFailed(Exception&& exception)
 {
     ASSERT(isMainThread());
@@ -328,13 +347,10 @@
 
     ASSERT(m_addIceCandidatePromise);
 
     m_addIceCandidatePromise->reject(WTFMove(exception));
     m_addIceCandidatePromise = WTF::nullopt;
-
-    if (!m_waitingForMDNSResolution && m_finishedReceivingCandidates)
-        endOfIceCandidates(WTFMove(*m_endOfIceCandidatePromise));
 }
 
 void PeerConnectionBackend::fireICECandidateEvent(RefPtr<RTCIceCandidate>&& candidate, String&& serverURL)
 {
     ASSERT(isMainThread());
@@ -394,11 +410,15 @@
     if (!m_shouldFilterICECandidates)
         return WTFMove(sdp);
 
     StringBuilder filteredSDP;
     sdp.split('\n', [&filteredSDP](StringView line) {
-        if (!line.startsWith("a=candidate"))
+        if (line.startsWith("c=IN IP4"))
+            filteredSDP.append("c=IN IP4 0.0.0.0");
+        else if (line.startsWith("c=IN IP6"))
+            filteredSDP.append("c=IN IP6 ::");
+        else if (!line.startsWith("a=candidate"))
             filteredSDP.append(line);
         else if (line.find(" host ", 11) == notFound)
             filteredSDP.append(filterICECandidate(line.toString()));
         else
             return;
@@ -496,10 +516,12 @@
 {
     m_offerAnswerPromise = WTF::nullopt;
     m_setDescriptionPromise = WTF::nullopt;
     m_addIceCandidatePromise = WTF::nullopt;
 
+    m_pendingTrackEvents.clear();
+
     doStop();
 }
 
 void PeerConnectionBackend::markAsNeedingNegotiation()
 {
@@ -537,10 +559,24 @@
     UNUSED_PARAM(type);
     promise.reject(NotSupportedError);
 #endif
 }
 
+ScriptExecutionContext* PeerConnectionBackend::context() const
+{
+    return m_peerConnection.scriptExecutionContext();
+}
+
+RTCRtpTransceiver* PeerConnectionBackend::transceiverFromSender(const RTCRtpSender& sender)
+{
+    for (auto& transceiver : m_peerConnection.currentTransceivers()) {
+        if (&transceiver->sender() == &sender)
+            return transceiver.get();
+    }
+    return nullptr;
+}
+
 #if !RELEASE_LOG_DISABLED
 WTFLogChannel& PeerConnectionBackend::logChannel() const
 {
     return LogWebRTC;
 }
