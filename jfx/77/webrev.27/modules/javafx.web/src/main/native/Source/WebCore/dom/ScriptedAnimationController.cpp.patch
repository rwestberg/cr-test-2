diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/ScriptedAnimationController.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/ScriptedAnimationController.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/ScriptedAnimationController.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/ScriptedAnimationController.cpp
@@ -26,13 +26,13 @@
 #include "config.h"
 #include "ScriptedAnimationController.h"
 
 #include "Chrome.h"
 #include "ChromeClient.h"
+#include "CustomHeaderFields.h"
 #include "DOMWindow.h"
 #include "Document.h"
-#include "DocumentAnimationScheduler.h"
 #include "DocumentLoader.h"
 #include "Frame.h"
 #include "FrameView.h"
 #include "InspectorInstrumentation.h"
 #include "Logging.h"
@@ -53,11 +53,11 @@
 #define RELEASE_LOG_IF_ALLOWED(fmt, ...) RELEASE_LOG_IF(page() && page()->isAlwaysOnLoggingAllowed(), PerformanceLogging, "%p - ScriptedAnimationController::" fmt, this, ##__VA_ARGS__)
 
 namespace WebCore {
 
 ScriptedAnimationController::ScriptedAnimationController(Document& document)
-    : m_document(&document)
+    : m_document(makeWeakPtr(document))
     , m_animationTimer(*this, &ScriptedAnimationController::animationTimerFired)
 {
 }
 
 ScriptedAnimationController::~ScriptedAnimationController() = default;
@@ -187,20 +187,19 @@
             return;
         }
     }
 }
 
-void ScriptedAnimationController::serviceScriptedAnimations(double timestamp)
+void ScriptedAnimationController::serviceRequestAnimationFrameCallbacks(DOMHighResTimeStamp timestamp)
 {
     if (!m_callbacks.size() || m_suspendCount || !requestAnimationFrameEnabled())
         return;
 
     TraceScope tracingScope(RAFCallbackStart, RAFCallbackEnd);
 
     // We round this to the nearest microsecond so that we can return a time that matches what is returned by document.timeline.currentTime.
-    double highResNowMs = std::round(1000 * timestamp);
-    double legacyHighResNowMs = 1000 * (timestamp + m_document->loader()->timing().referenceWallTime().secondsSinceEpoch().seconds());
+    DOMHighResTimeStamp highResNowMs = std::round(1000 * timestamp);
 
     // First, generate a list of callbacks to consider.  Callbacks registered from this point
     // on are considered only for the "next" frame, not this one.
     CallbackList callbacks(m_callbacks);
 
@@ -208,28 +207,22 @@
     // reference to us, so take a defensive reference.
     Ref<ScriptedAnimationController> protectedThis(*this);
     Ref<Document> protectedDocument(*m_document);
 
     for (auto& callback : callbacks) {
-        if (!callback->m_firedOrCancelled) {
-            callback->m_firedOrCancelled = true;
-            InspectorInstrumentationCookie cookie = InspectorInstrumentation::willFireAnimationFrame(protectedDocument, callback->m_id);
-            if (callback->m_useLegacyTimeBase)
-                callback->handleEvent(legacyHighResNowMs);
-            else
-                callback->handleEvent(highResNowMs);
-            InspectorInstrumentation::didFireAnimationFrame(cookie);
-        }
+        if (callback->m_firedOrCancelled)
+            continue;
+        callback->m_firedOrCancelled = true;
+        InspectorInstrumentationCookie cookie = InspectorInstrumentation::willFireAnimationFrame(protectedDocument, callback->m_id);
+        callback->handleEvent(highResNowMs);
+        InspectorInstrumentation::didFireAnimationFrame(cookie);
     }
 
     // Remove any callbacks we fired from the list of pending callbacks.
-    for (size_t i = 0; i < m_callbacks.size();) {
-        if (m_callbacks[i]->m_firedOrCancelled)
-            m_callbacks.remove(i);
-        else
-            ++i;
-    }
+    m_callbacks.removeAllMatching([](auto& callback) {
+        return callback->m_firedOrCancelled;
+    });
 
     if (m_callbacks.size())
         scheduleAnimation();
 }
 
@@ -260,12 +253,14 @@
     if (!requestAnimationFrameEnabled())
         return;
 
 #if USE(REQUEST_ANIMATION_FRAME_DISPLAY_MONITOR)
     if (!m_isUsingTimer && !isThrottled()) {
-        if (m_document->animationScheduler().scheduleScriptedAnimationResolution())
+        if (auto* page = this->page()) {
+            page->renderingUpdateScheduler().scheduleTimedRenderingUpdate();
             return;
+        }
 
         m_isUsingTimer = true;
     }
 #endif
     if (m_animationTimer.isActive())
@@ -290,17 +285,9 @@
 }
 
 void ScriptedAnimationController::animationTimerFired()
 {
     m_lastAnimationFrameTimestamp = m_document->domWindow()->nowTimestamp();
-    serviceScriptedAnimations(m_lastAnimationFrameTimestamp);
+    serviceRequestAnimationFrameCallbacks(m_lastAnimationFrameTimestamp);
 }
 
-#if USE(REQUEST_ANIMATION_FRAME_DISPLAY_MONITOR)
-void ScriptedAnimationController::documentAnimationSchedulerDidFire()
-{
-    // We obtain the time from the animation scheduler so that we use the same timestamp as the DocumentTimeline.
-    serviceScriptedAnimations(m_document->animationScheduler().lastTimestamp().seconds());
-}
-#endif
-
 }
