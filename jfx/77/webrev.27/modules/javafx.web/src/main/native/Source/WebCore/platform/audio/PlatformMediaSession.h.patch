diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSession.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSession.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSession.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSession.h
@@ -27,10 +27,11 @@
 #define PlatformMediaSession_h
 
 #include "Timer.h"
 #include <wtf/LoggerHelper.h>
 #include <wtf/Noncopyable.h>
+#include <wtf/WeakPtr.h>
 #include <wtf/text/WTFString.h>
 
 #if ENABLE(WIRELESS_PLAYBACK_TARGET)
 #include "MediaPlaybackTargetClient.h"
 #endif
@@ -40,12 +41,13 @@
 class Document;
 class MediaPlaybackTarget;
 class PlatformMediaSessionClient;
 
 class PlatformMediaSession
+    : public CanMakeWeakPtr<PlatformMediaSession>
 #if ENABLE(WIRELESS_PLAYBACK_TARGET)
-    : public MediaPlaybackTargetClient
+    , public MediaPlaybackTargetClient
 #endif
 #if !RELEASE_LOG_DISABLED
     , private LoggerHelper
 #endif
 {
@@ -112,10 +114,13 @@
     virtual bool clientWillPausePlayback();
 
     void pauseSession();
     void stopSession();
 
+    virtual void suspendBuffering() { }
+    virtual void resumeBuffering() { }
+
 #if ENABLE(VIDEO)
     uint64_t uniqueIdentifier() const;
     String title() const;
     double duration() const;
     double currentTime() const;
@@ -165,11 +170,11 @@
 
 #if PLATFORM(IOS_FAMILY)
     virtual bool requiresPlaybackTargetRouteMonitoring() const { return false; }
 #endif
 
-    bool activeAudioSessionRequired();
+    bool activeAudioSessionRequired() const;
     bool canProduceAudio() const;
     void canProduceAudioChanged();
 
     virtual void resetPlaybackSessionState() { }
     String sourceApplicationIdentifier() const;
@@ -177,20 +182,23 @@
     virtual bool allowsNowPlayingControlsVisibility() const { return false; }
 
     bool hasPlayedSinceLastInterruption() const { return m_hasPlayedSinceLastInterruption; }
     void clearHasPlayedSinceLastInterruption() { m_hasPlayedSinceLastInterruption = false; }
 
-protected:
-    PlatformMediaSessionClient& client() const { return m_client; }
-
 #if !RELEASE_LOG_DISABLED
     const Logger& logger() const final { return m_logger.get(); }
-    const void* logIdentifier() const override { return reinterpret_cast<const void*>(m_logIdentifier); }
+    const void* logIdentifier() const override { return m_logIdentifier; }
     const char* logClassName() const override { return "PlatformMediaSession"; }
     WTFLogChannel& logChannel() const final;
 #endif
 
+    bool canPlayConcurrently(const PlatformMediaSession&) const;
+    bool shouldOverridePauseDuringRouteChange() const;
+
+protected:
+    PlatformMediaSessionClient& client() const { return m_client; }
+
 private:
     PlatformMediaSessionClient& m_client;
     State m_state;
     State m_stateToRestore;
     InterruptionType m_interruptionType { NoInterruption };
@@ -199,11 +207,11 @@
     bool m_isPlayingToWirelessPlaybackTarget { false };
     bool m_hasPlayedSinceLastInterruption { false };
 
 #if !RELEASE_LOG_DISABLED
     Ref<const Logger> m_logger;
-    uint64_t m_logIdentifier;
+    const void* m_logIdentifier;
 #endif
 
     friend class PlatformMediaSessionManager;
 };
 
@@ -248,10 +256,16 @@
     virtual Document* hostingDocument() const = 0;
     virtual String sourceApplicationIdentifier() const = 0;
 
     virtual bool processingUserGestureForMedia() const = 0;
 
+    virtual bool hasMediaStreamSource() const { return false; }
+
+    virtual void processIsSuspendedChanged() { }
+
+    virtual bool shouldOverridePauseDuringRouteChange() const { return false; }
+
 protected:
     virtual ~PlatformMediaSessionClient() = default;
 };
 
 String convertEnumerationToString(PlatformMediaSession::State);
