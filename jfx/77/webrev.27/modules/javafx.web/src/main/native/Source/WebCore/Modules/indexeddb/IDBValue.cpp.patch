diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBValue.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBValue.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBValue.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBValue.cpp
@@ -38,51 +38,46 @@
 }
 
 IDBValue::IDBValue(const SerializedScriptValue& scriptValue)
     : m_data(ThreadSafeDataBuffer::copyVector(scriptValue.data()))
     , m_blobURLs(scriptValue.blobURLsIsolatedCopy())
-    , m_sessionID(scriptValue.sessionID())
 {
 }
 
 IDBValue::IDBValue(const ThreadSafeDataBuffer& value)
     : m_data(value)
 {
 }
 
-IDBValue::IDBValue(const SerializedScriptValue& scriptValue, const Vector<String>& blobURLs, const PAL::SessionID& sessionID, const Vector<String>& blobFilePaths)
+IDBValue::IDBValue(const SerializedScriptValue& scriptValue, const Vector<String>& blobURLs, const Vector<String>& blobFilePaths)
     : m_data(ThreadSafeDataBuffer::copyVector(scriptValue.data()))
     , m_blobURLs(blobURLs)
-    , m_sessionID(sessionID)
     , m_blobFilePaths(blobFilePaths)
 {
     ASSERT(m_data.data());
 }
 
-IDBValue::IDBValue(const ThreadSafeDataBuffer& value, Vector<String>&& blobURLs, const PAL::SessionID& sessionID, Vector<String>&& blobFilePaths)
+IDBValue::IDBValue(const ThreadSafeDataBuffer& value, Vector<String>&& blobURLs, Vector<String>&& blobFilePaths)
     : m_data(value)
     , m_blobURLs(WTFMove(blobURLs))
-    , m_sessionID(sessionID)
     , m_blobFilePaths(WTFMove(blobFilePaths))
 {
 }
 
-IDBValue::IDBValue(const ThreadSafeDataBuffer& value, const Vector<String>& blobURLs, const PAL::SessionID& sessionID, const Vector<String>& blobFilePaths)
+IDBValue::IDBValue(const ThreadSafeDataBuffer& value, const Vector<String>& blobURLs, const Vector<String>& blobFilePaths)
     : m_data(value)
     , m_blobURLs(blobURLs)
-    , m_sessionID(sessionID)
     , m_blobFilePaths(blobFilePaths)
 {
 }
 
 void IDBValue::setAsIsolatedCopy(const IDBValue& other)
 {
     ASSERT(m_blobURLs.isEmpty() && m_blobFilePaths.isEmpty());
 
     m_data = other.m_data;
     m_blobURLs = crossThreadCopy(other.m_blobURLs);
-    m_sessionID = other.m_sessionID;
     m_blobFilePaths = crossThreadCopy(other.m_blobFilePaths);
 }
 
 IDBValue IDBValue::isolatedCopy() const
 {
