diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/QualifiedName.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/QualifiedName.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/QualifiedName.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/QualifiedName.cpp
@@ -24,11 +24,11 @@
 #include "ThreadGlobalData.h"
 #include <wtf/Assertions.h>
 
 namespace WebCore {
 
-QualifiedName::QualifiedName(const AtomicString& p, const AtomicString& l, const AtomicString& n)
+QualifiedName::QualifiedName(const AtomString& p, const AtomString& l, const AtomString& n)
     : m_impl(threadGlobalData().qualifiedNameCache().getOrCreate(QualifiedNameComponents { p.impl(), l.impl(), n.isEmpty() ? nullptr : n.impl() }))
 {
 }
 
 QualifiedName::QualifiedNameImpl::~QualifiedNameImpl()
@@ -43,22 +43,22 @@
 {
     static bool initialized = false;
     if (initialized)
         return;
 
-    ASSERT_WITH_MESSAGE(WTF::nullAtomData.isConstructed(), "AtomicString::init should have been called");
+    ASSERT_WITH_MESSAGE(WTF::nullAtomData.isConstructed(), "AtomString::init should have been called");
     anyName.construct(nullAtom(), starAtom(), starAtom());
     initialized = true;
 }
 
 const QualifiedName& nullQName()
 {
     static NeverDestroyed<QualifiedName> nullName(nullAtom(), nullAtom(), nullAtom());
     return nullName;
 }
 
-const AtomicString& QualifiedName::localNameUpper() const
+const AtomString& QualifiedName::localNameUpper() const
 {
     if (!m_impl->m_localNameUpper)
         m_impl->m_localNameUpper = m_impl->m_localName.convertToASCIIUppercase();
     return m_impl->m_localNameUpper;
 }
