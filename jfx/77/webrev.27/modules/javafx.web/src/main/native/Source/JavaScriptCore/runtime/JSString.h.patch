diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSString.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSString.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSString.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSString.h
@@ -39,31 +39,25 @@
 
 class JSString;
 class JSRopeString;
 class LLIntOffsetsExtractor;
 
-JSString* jsEmptyString(VM*);
-JSString* jsEmptyString(ExecState*);
-JSString* jsString(VM*, const String&); // returns empty string if passed null string
-JSString* jsString(ExecState*, const String&); // returns empty string if passed null string
+JSString* jsEmptyString(VM&);
+JSString* jsString(VM&, const String&); // returns empty string if passed null string
 
-JSString* jsSingleCharacterString(VM*, UChar);
-JSString* jsSingleCharacterString(ExecState*, UChar);
-JSString* jsSubstring(VM*, const String&, unsigned offset, unsigned length);
-JSString* jsSubstring(ExecState*, const String&, unsigned offset, unsigned length);
+JSString* jsSingleCharacterString(VM&, UChar);
+JSString* jsSubstring(VM&, const String&, unsigned offset, unsigned length);
 
 // Non-trivial strings are two or more characters long.
 // These functions are faster than just calling jsString.
-JSString* jsNontrivialString(VM*, const String&);
-JSString* jsNontrivialString(ExecState*, const String&);
-JSString* jsNontrivialString(ExecState*, String&&);
+JSString* jsNontrivialString(VM&, const String&);
+JSString* jsNontrivialString(VM&, String&&);
 
 // Should be used for strings that are owned by an object that will
 // likely outlive the JSValue this makes, such as the parse tree or a
 // DOM object that contains a String
-JSString* jsOwnedString(VM*, const String&);
-JSString* jsOwnedString(ExecState*, const String&);
+JSString* jsOwnedString(VM&, const String&);
 
 bool isJSString(JSCell*);
 bool isJSString(JSValue);
 JSString* asString(JSValue);
 
@@ -78,13 +72,13 @@
 // are not one pointer load operation. To make concurrent collector work correctly, we must initialize 2nd and 3rd fibers at JSRopeString creation
 // and we must not modify these part later.
 //
 //              0                        8        10               16                       32                                     48
 // JSString     [   ID      ][  header  ][   String pointer      0]
-// JSRopeString [   ID      ][  header  ][ flags ][ 1st fiber    1][  length  ][2nd lower32][2nd upper16][3rd lower16][3rd upper32]
+// JSRopeString [   ID      ][  header  ][   1st fiber         xyz][  length  ][2nd lower32][2nd upper16][3rd lower16][3rd upper32]
 //                                                               ^
-//                                                            isRope bit
+//                                            x:(is8Bit),y:(isSubstring),z:(isRope) bit flags
 class JSString : public JSCell {
 public:
     friend class JIT;
     friend class VM;
     friend class SpecializedThunkJIT;
@@ -181,12 +175,12 @@
 
 public:
     ~JSString();
 
     Identifier toIdentifier(ExecState*) const;
-    AtomicString toAtomicString(ExecState*) const;
-    RefPtr<AtomicStringImpl> toExistingAtomicString(ExecState*) const;
+    AtomString toAtomString(ExecState*) const;
+    RefPtr<AtomStringImpl> toExistingAtomString(ExecState*) const;
 
     StringViewWithUnderlyingString viewWithUnderlyingString(ExecState*) const;
 
     inline bool equal(ExecState*, JSString* other) const;
     const String& value(ExecState*) const;
@@ -237,43 +231,50 @@
 
     static JSValue toThis(JSCell*, ExecState*, ECMAMode);
 
     StringView unsafeView(ExecState*) const;
 
-    friend JSString* jsString(VM*, const String&);
+    friend JSString* jsString(VM&, const String&);
     friend JSString* jsString(ExecState*, JSString*, JSString*);
     friend JSString* jsString(ExecState*, const String&, JSString*);
     friend JSString* jsString(ExecState*, JSString*, const String&);
     friend JSString* jsString(ExecState*, const String&, const String&);
     friend JSString* jsString(ExecState*, JSString*, JSString*, JSString*);
     friend JSString* jsString(ExecState*, const String&, const String&, const String&);
-    friend JSString* jsSingleCharacterString(VM*, UChar);
-    friend JSString* jsNontrivialString(VM*, const String&);
-    friend JSString* jsNontrivialString(VM*, String&&);
-    friend JSString* jsSubstring(VM*, const String&, unsigned, unsigned);
+    friend JSString* jsSingleCharacterString(VM&, UChar);
+    friend JSString* jsNontrivialString(VM&, const String&);
+    friend JSString* jsNontrivialString(VM&, String&&);
+    friend JSString* jsSubstring(VM&, const String&, unsigned, unsigned);
     friend JSString* jsSubstring(VM&, ExecState*, JSString*, unsigned, unsigned);
     friend JSString* jsSubstringOfResolved(VM&, GCDeferralContext*, JSString*, unsigned, unsigned);
-    friend JSString* jsOwnedString(VM*, const String&);
+    friend JSString* jsOwnedString(VM&, const String&);
 };
 
 // NOTE: This class cannot override JSString's destructor. JSString's destructor is called directly
 // from JSStringSubspace::
 class JSRopeString final : public JSString {
     friend class JSString;
 public:
+    // We use lower 3bits of fiber0 for flags. These bits are usable due to alignment, and it is OK even in 32bit architecture.
+    static constexpr uintptr_t is8BitInPointer = static_cast<uintptr_t>(StringImpl::flagIs8Bit());
+    static constexpr uintptr_t isSubstringInPointer = 0x2;
+    static_assert(is8BitInPointer == 0b100, "");
+    static_assert(isSubstringInPointer == 0b010, "");
+    static_assert(isRopeInPointer == 0b001, "");
+    static constexpr uintptr_t stringMask = ~(isRopeInPointer | is8BitInPointer | isSubstringInPointer);
 #if CPU(ADDRESS64)
     static_assert(sizeof(uintptr_t) == sizeof(uint64_t), "");
-    static constexpr uintptr_t flagMask = 0xffff000000000000ULL;
-    static constexpr uintptr_t stringMask = ~(flagMask | isRopeInPointer);
-    static_assert(StringImpl::flagIs8Bit() == 0b100, "");
-    static constexpr uintptr_t is8BitInPointer = static_cast<uintptr_t>(StringImpl::flagIs8Bit()) << 48;
-
     class CompactFibers {
     public:
+        static constexpr uintptr_t addressMask = (1ULL << WTF_CPU_EFFECTIVE_ADDRESS_WIDTH) - 1;
         JSString* fiber1() const
         {
+#if CPU(LITTLE_ENDIAN)
+            return bitwise_cast<JSString*>(WTF::unalignedLoad<uintptr_t>(&m_fiber1Lower) & addressMask);
+#else
             return bitwise_cast<JSString*>(static_cast<uintptr_t>(m_fiber1Lower) | (static_cast<uintptr_t>(m_fiber1Upper) << 32));
+#endif
         }
 
         void initializeFiber1(JSString* fiber)
         {
             uintptr_t pointer = bitwise_cast<uintptr_t>(fiber);
@@ -281,42 +282,47 @@
             m_fiber1Upper = static_cast<uint16_t>(pointer >> 32);
         }
 
         JSString* fiber2() const
         {
-            return bitwise_cast<JSString*>(static_cast<uintptr_t>(m_fiber2Lower) | (static_cast<uintptr_t>(m_fiber2Upper) << 32));
+#if CPU(LITTLE_ENDIAN)
+            // This access exceeds the sizeof(JSRopeString). But this is OK because JSRopeString is always allocated in MarkedBlock,
+            // and the last JSRopeString cell in the block has some subsequent bytes which are used for MarkedBlock::Footer.
+            // So the following access does not step over the page boundary in which the latter page does not have read permission.
+            return bitwise_cast<JSString*>(WTF::unalignedLoad<uintptr_t>(&m_fiber2Lower) & addressMask);
+#else
+            return bitwise_cast<JSString*>(static_cast<uintptr_t>(m_fiber2Lower) | (static_cast<uintptr_t>(m_fiber2Upper) << 16));
+#endif
         }
         void initializeFiber2(JSString* fiber)
         {
             uintptr_t pointer = bitwise_cast<uintptr_t>(fiber);
-            m_fiber2Lower = static_cast<uint32_t>(pointer);
-            m_fiber2Upper = static_cast<uint16_t>(pointer >> 32);
+            m_fiber2Lower = static_cast<uint16_t>(pointer);
+            m_fiber2Upper = static_cast<uint32_t>(pointer >> 16);
         }
 
         unsigned length() const { return m_length; }
         void initializeLength(unsigned length)
         {
             m_length = length;
         }
 
         static ptrdiff_t offsetOfLength() { return OBJECT_OFFSETOF(CompactFibers, m_length); }
-        static ptrdiff_t offsetOfFiber1Lower() { return OBJECT_OFFSETOF(CompactFibers, m_fiber1Lower); }
-        static ptrdiff_t offsetOfFiber1Upper() { return OBJECT_OFFSETOF(CompactFibers, m_fiber1Upper); }
-        static ptrdiff_t offsetOfFiber2Lower() { return OBJECT_OFFSETOF(CompactFibers, m_fiber2Lower); }
-        static ptrdiff_t offsetOfFiber2Upper() { return OBJECT_OFFSETOF(CompactFibers, m_fiber2Upper); }
+        static ptrdiff_t offsetOfFiber1() { return OBJECT_OFFSETOF(CompactFibers, m_length); }
+        static ptrdiff_t offsetOfFiber2() { return OBJECT_OFFSETOF(CompactFibers, m_fiber1Upper); }
 
     private:
+        friend class LLIntOffsetsExtractor;
+
         uint32_t m_length { 0 };
         uint32_t m_fiber1Lower { 0 };
         uint16_t m_fiber1Upper { 0 };
-        uint16_t m_fiber2Upper { 0 };
-        uint32_t m_fiber2Lower { 0 };
+        uint16_t m_fiber2Lower { 0 };
+        uint32_t m_fiber2Upper { 0 };
     };
     static_assert(sizeof(CompactFibers) == sizeof(void*) * 2, "");
 #else
-    static constexpr uintptr_t stringMask = ~(isRopeInPointer);
-
     class CompactFibers {
     public:
         JSString* fiber1() const
         {
             return m_fiber1;
@@ -339,28 +345,18 @@
         void initializeLength(unsigned length)
         {
             m_length = length;
         }
 
-        void initializeIs8Bit(bool flag)
-        {
-            if (flag)
-                m_flags |= static_cast<uintptr_t>(StringImpl::flagIs8Bit());
-            else
-                m_flags &= ~static_cast<uintptr_t>(StringImpl::flagIs8Bit());
-        }
-
-        bool is8Bit()
-        {
-            return m_flags & static_cast<uintptr_t>(StringImpl::flagIs8Bit());
-        }
-
         static ptrdiff_t offsetOfLength() { return OBJECT_OFFSETOF(CompactFibers, m_length); }
+        static ptrdiff_t offsetOfFiber1() { return OBJECT_OFFSETOF(CompactFibers, m_fiber1); }
+        static ptrdiff_t offsetOfFiber2() { return OBJECT_OFFSETOF(CompactFibers, m_fiber2); }
 
     private:
+        friend class LLIntOffsetsExtractor;
+
         uint32_t m_length { 0 };
-        uint32_t m_flags { 0 };
         JSString* m_fiber1 { nullptr };
         JSString* m_fiber2 { nullptr };
     };
 #endif
 
@@ -399,11 +395,11 @@
             RELEASE_ASSERT(!this->hasOverflowed());
             JSString* result = nullptr;
             switch (m_strings.size()) {
             case 0: {
                 ASSERT(!m_length);
-                result = jsEmptyString(&m_vm);
+                result = jsEmptyString(m_vm);
                 break;
             }
             case 1: {
                 result = asString(m_strings.at(0));
                 break;
@@ -444,30 +440,47 @@
     {
         return m_compactFibers.length();
     }
 
 private:
+    friend class LLIntOffsetsExtractor;
+
     void convertToNonRope(String&&) const;
 
     void initializeIs8Bit(bool flag) const
     {
-#if CPU(ADDRESS64)
         if (flag)
             m_fiber |= is8BitInPointer;
         else
             m_fiber &= ~is8BitInPointer;
-#else
-        m_compactFibers.initializeIs8Bit(flag);
-#endif
+    }
+
+    void initializeIsSubstring(bool flag) const
+    {
+        if (flag)
+            m_fiber |= isSubstringInPointer;
+        else
+            m_fiber &= ~isSubstringInPointer;
     }
 
     ALWAYS_INLINE void initializeLength(unsigned length)
     {
         ASSERT(length <= MaxLength);
         m_compactFibers.initializeLength(length);
     }
 
+    JSRopeString(VM& vm)
+        : JSString(vm)
+    {
+        initializeIsSubstring(false);
+        initializeLength(0);
+        initializeIs8Bit(true);
+        initializeFiber0(nullptr);
+        initializeFiber1(nullptr);
+        initializeFiber2(nullptr);
+    }
+
     JSRopeString(VM& vm, JSString* s1, JSString* s2)
         : JSString(vm)
     {
         ASSERT(!sumOverflows<int32_t>(s1->length(), s2->length()));
         initializeIsSubstring(false);
@@ -492,120 +505,88 @@
         ASSERT((s1->length() + s2->length() + s3->length()) == length());
     }
 
     JSRopeString(VM& vm, JSString* base, unsigned offset, unsigned length)
         : JSString(vm)
-    {
-        RELEASE_ASSERT(!sumOverflows<int32_t>(offset, length));
-        RELEASE_ASSERT(offset + length <= base->length());
-        initializeIsSubstring(true);
-        initializeLength(length);
-        initializeIs8Bit(base->is8Bit());
-        if (base->isSubstring()) {
-            JSRopeString* baseRope = jsCast<JSRopeString*>(base);
-            initializeSubstringBase(baseRope->substringBase());
-            initializeSubstringOffset(baseRope->substringOffset() + offset);
-        } else {
-            initializeSubstringBase(base);
-            initializeSubstringOffset(offset);
-        }
-        ASSERT(length == this->length());
-    }
-
-    enum SubstringOfResolvedTag { SubstringOfResolved };
-    JSRopeString(SubstringOfResolvedTag, VM& vm, JSString* base, unsigned offset, unsigned length)
-        : JSString(vm)
     {
         RELEASE_ASSERT(!sumOverflows<int32_t>(offset, length));
         RELEASE_ASSERT(offset + length <= base->length());
         initializeIsSubstring(true);
         initializeLength(length);
         initializeIs8Bit(base->is8Bit());
         initializeSubstringBase(base);
         initializeSubstringOffset(offset);
         ASSERT(length == this->length());
-    }
-
-    ALWAYS_INLINE void finishCreationSubstring(VM& vm, ExecState* exec)
-    {
-        Base::finishCreation(vm);
-        JSString* updatedBase = substringBase();
-        // For now, let's not allow substrings with a rope base.
-        // Resolve non-substring rope bases so we don't have to deal with it.
-        // FIXME: Evaluate if this would be worth adding more branches.
-        if (updatedBase->isRope())
-            jsCast<JSRopeString*>(updatedBase)->resolveRope(exec);
+        ASSERT(!base->isRope());
     }
 
     ALWAYS_INLINE void finishCreationSubstringOfResolved(VM& vm)
     {
         Base::finishCreation(vm);
     }
 
 public:
     static ptrdiff_t offsetOfLength() { return OBJECT_OFFSETOF(JSRopeString, m_compactFibers) + CompactFibers::offsetOfLength(); } // 32byte width.
+    static ptrdiff_t offsetOfFlags() { return offsetOfValue(); }
     static ptrdiff_t offsetOfFiber0() { return offsetOfValue(); }
-#if CPU(ADDRESS64)
-    static ptrdiff_t offsetOfFlags() { return offsetOfValue() + sizeof(uint16_t) * 3; } // 16byte width.
-    static ptrdiff_t offsetOfFiber1Lower() { return OBJECT_OFFSETOF(JSRopeString, m_compactFibers) + CompactFibers::offsetOfFiber1Lower(); } // 32byte width.
-    static ptrdiff_t offsetOfFiber1Upper() { return OBJECT_OFFSETOF(JSRopeString, m_compactFibers) + CompactFibers::offsetOfFiber1Upper(); } // 16byte width.
-    static ptrdiff_t offsetOfFiber2Lower() { return OBJECT_OFFSETOF(JSRopeString, m_compactFibers) + CompactFibers::offsetOfFiber2Lower(); } // 32byte width.
-    static ptrdiff_t offsetOfFiber2Upper() { return OBJECT_OFFSETOF(JSRopeString, m_compactFibers) + CompactFibers::offsetOfFiber2Upper(); } // 16byte width.
-#elif USE(JSVALUE64)
-    // FIXME: This is an temporary workaround to make JSC built on ARM64_32. Once we start calculating bits before storing them to JSRopeString,
-    // we do not need to have such a detailed information as an offset. After that, what we only need is offsetOfFiber0, offsetOfFiber1, and offsetOfFiber2.
-    // https://bugs.webkit.org/show_bug.cgi?id=195234
-    static ptrdiff_t offsetOfFlags() { ASSERT_NOT_REACHED(); return 0; }
-    static ptrdiff_t offsetOfFiber1Lower() { ASSERT_NOT_REACHED(); return 0; }
-    static ptrdiff_t offsetOfFiber1Upper() { ASSERT_NOT_REACHED(); return 0; }
-    static ptrdiff_t offsetOfFiber2Lower() { ASSERT_NOT_REACHED(); return 0; }
-    static ptrdiff_t offsetOfFiber2Upper() { ASSERT_NOT_REACHED(); return 0; }
-#endif
+    static ptrdiff_t offsetOfFiber1() { return OBJECT_OFFSETOF(JSRopeString, m_compactFibers) + CompactFibers::offsetOfFiber1(); }
+    static ptrdiff_t offsetOfFiber2() { return OBJECT_OFFSETOF(JSRopeString, m_compactFibers) + CompactFibers::offsetOfFiber2(); }
 
     static constexpr unsigned s_maxInternalRopeLength = 3;
 
+    // This JSRopeString is only used to simulate half-baked JSRopeString in DFG and FTL MakeRope. If OSR exit happens in
+    // the middle of MakeRope due to string length overflow, we have half-baked JSRopeString which is the same to the result
+    // of this function. This half-baked JSRopeString will not be exposed to users, but still collectors can see it due to
+    // the conservative stack scan. This JSRopeString is used to test the collector with such a half-baked JSRopeString.
+    // Because this JSRopeString breaks the JSString's invariant (only one singleton JSString can be zero length), almost all the
+    // operations in JS fail to handle this string correctly.
+    static JSRopeString* createNullForTesting(VM& vm)
+    {
+        JSRopeString* newString = new (NotNull, allocateCell<JSRopeString>(vm.heap)) JSRopeString(vm);
+        newString->finishCreation(vm);
+        ASSERT(!newString->length());
+        ASSERT(newString->isRope());
+        ASSERT(newString->fiber0() == nullptr);
+        return newString;
+    }
+
 private:
     static JSRopeString* create(VM& vm, JSString* s1, JSString* s2)
     {
         JSRopeString* newString = new (NotNull, allocateCell<JSRopeString>(vm.heap)) JSRopeString(vm, s1, s2);
         newString->finishCreation(vm);
         ASSERT(newString->length());
+        ASSERT(newString->isRope());
         return newString;
     }
     static JSRopeString* create(VM& vm, JSString* s1, JSString* s2, JSString* s3)
     {
         JSRopeString* newString = new (NotNull, allocateCell<JSRopeString>(vm.heap)) JSRopeString(vm, s1, s2, s3);
         newString->finishCreation(vm);
         ASSERT(newString->length());
-        return newString;
-    }
-
-    static JSRopeString* create(VM& vm, ExecState* exec, JSString* base, unsigned offset, unsigned length)
-    {
-        JSRopeString* newString = new (NotNull, allocateCell<JSRopeString>(vm.heap)) JSRopeString(vm, base, offset, length);
-        newString->finishCreationSubstring(vm, exec);
-        ASSERT(newString->length());
+        ASSERT(newString->isRope());
         return newString;
     }
 
     ALWAYS_INLINE static JSRopeString* createSubstringOfResolved(VM& vm, GCDeferralContext* deferralContext, JSString* base, unsigned offset, unsigned length)
     {
-        JSRopeString* newString = new (NotNull, allocateCell<JSRopeString>(vm.heap, deferralContext)) JSRopeString(SubstringOfResolved, vm, base, offset, length);
+        JSRopeString* newString = new (NotNull, allocateCell<JSRopeString>(vm.heap, deferralContext)) JSRopeString(vm, base, offset, length);
         newString->finishCreationSubstringOfResolved(vm);
         ASSERT(newString->length());
+        ASSERT(newString->isRope());
         return newString;
     }
 
     friend JSValue jsStringFromRegisterArray(ExecState*, Register*, unsigned);
     friend JSValue jsStringFromArguments(ExecState*, JSValue);
 
     // If nullOrExecForOOM is null, resolveRope() will be do nothing in the event of an OOM error.
     // The rope value will remain a null string in that case.
     JS_EXPORT_PRIVATE const String& resolveRope(ExecState* nullOrExecForOOM) const;
     template<typename Function> const String& resolveRopeWithFunction(ExecState* nullOrExecForOOM, Function&&) const;
-    JS_EXPORT_PRIVATE AtomicString resolveRopeToAtomicString(ExecState*) const;
-    JS_EXPORT_PRIVATE RefPtr<AtomicStringImpl> resolveRopeToExistingAtomicString(ExecState*) const;
+    JS_EXPORT_PRIVATE AtomString resolveRopeToAtomString(ExecState*) const;
+    JS_EXPORT_PRIVATE RefPtr<AtomStringImpl> resolveRopeToExistingAtomString(ExecState*) const;
     void resolveRopeSlowCase8(LChar*) const;
     void resolveRopeSlowCase(UChar*) const;
     void outOfMemory(ExecState* nullOrExecForOOM) const;
     void resolveRopeInternal8(LChar*) const;
     void resolveRopeInternal8NoSubstring(LChar*) const;
@@ -677,30 +658,10 @@
     unsigned substringOffset() const
     {
         return static_cast<unsigned>(bitwise_cast<uintptr_t>(fiber2()));
     }
 
-    static constexpr uintptr_t notSubstringSentinel()
-    {
-        return 0;
-    }
-
-    static constexpr uintptr_t substringSentinel()
-    {
-        return 2;
-    }
-
-    bool isSubstring() const
-    {
-        return (m_fiber & stringMask) == substringSentinel();
-    }
-
-    void initializeIsSubstring(bool isSubstring)
-    {
-        m_fiber |= (isSubstring ? substringSentinel() : notSubstringSentinel());
-    }
-
     static_assert(s_maxInternalRopeLength >= 2, "");
     mutable CompactFibers m_compactFibers;
 
     friend JSString* jsString(ExecState*, JSString*, JSString*);
     friend JSString* jsString(ExecState*, const String&, JSString*);
@@ -718,18 +679,13 @@
 // is in the middle of converting JSRopeString to JSString.
 ALWAYS_INLINE bool JSString::is8Bit() const
 {
     uintptr_t pointer = m_fiber;
     if (pointer & isRopeInPointer) {
-#if CPU(ADDRESS64)
         // Do not load m_fiber twice. We should use the information in pointer.
         // Otherwise, JSRopeString may be converted to JSString between the first and second accesses.
         return pointer & JSRopeString::is8BitInPointer;
-#else
-        // It is OK to load flag since even if JSRopeString is converted to JSString, this flag still exists.
-        return jsCast<const JSRopeString*>(this)->m_compactFibers.is8Bit();
-#endif
     }
     return bitwise_cast<StringImpl*>(pointer)->is8Bit();
 }
 
 // JSString::length is safe to be called concurrently. Concurrent threads can access length even if the main thread
@@ -756,79 +712,83 @@
     ASSERT(value.asCell()->isString());
     return jsCast<JSString*>(value.asCell());
 }
 
 // This MUST NOT GC.
-inline JSString* jsEmptyString(VM* vm)
+inline JSString* jsEmptyString(VM& vm)
 {
-    return vm->smallStrings.emptyString();
+    return vm.smallStrings.emptyString();
 }
 
-ALWAYS_INLINE JSString* jsSingleCharacterString(VM* vm, UChar c)
+ALWAYS_INLINE JSString* jsSingleCharacterString(VM& vm, UChar c)
 {
     if (validateDFGDoesGC)
-        RELEASE_ASSERT(vm->heap.expectDoesGC());
+        RELEASE_ASSERT(vm.heap.expectDoesGC());
     if (c <= maxSingleCharacterString)
-        return vm->smallStrings.singleCharacterString(c);
-    return JSString::create(*vm, StringImpl::create(&c, 1));
+        return vm.smallStrings.singleCharacterString(c);
+    return JSString::create(vm, StringImpl::create(&c, 1));
 }
 
-inline JSString* jsNontrivialString(VM* vm, const String& s)
+inline JSString* jsNontrivialString(VM& vm, const String& s)
 {
     ASSERT(s.length() > 1);
-    return JSString::create(*vm, *s.impl());
+    return JSString::create(vm, *s.impl());
 }
 
-inline JSString* jsNontrivialString(VM* vm, String&& s)
+inline JSString* jsNontrivialString(VM& vm, String&& s)
 {
     ASSERT(s.length() > 1);
-    return JSString::create(*vm, s.releaseImpl().releaseNonNull());
+    return JSString::create(vm, s.releaseImpl().releaseNonNull());
 }
 
 ALWAYS_INLINE Identifier JSString::toIdentifier(ExecState* exec) const
 {
-    return Identifier::fromString(exec, toAtomicString(exec));
+    VM& vm = exec->vm();
+    auto scope = DECLARE_THROW_SCOPE(vm);
+    AtomString atomString = toAtomString(exec);
+    RETURN_IF_EXCEPTION(scope, { });
+    return Identifier::fromString(vm, atomString);
 }
 
-ALWAYS_INLINE AtomicString JSString::toAtomicString(ExecState* exec) const
+ALWAYS_INLINE AtomString JSString::toAtomString(ExecState* exec) const
 {
     if (validateDFGDoesGC)
-        RELEASE_ASSERT(vm()->heap.expectDoesGC());
+        RELEASE_ASSERT(vm().heap.expectDoesGC());
     if (isRope())
-        return static_cast<const JSRopeString*>(this)->resolveRopeToAtomicString(exec);
-    return AtomicString(valueInternal());
+        return static_cast<const JSRopeString*>(this)->resolveRopeToAtomString(exec);
+    return AtomString(valueInternal());
 }
 
-ALWAYS_INLINE RefPtr<AtomicStringImpl> JSString::toExistingAtomicString(ExecState* exec) const
+ALWAYS_INLINE RefPtr<AtomStringImpl> JSString::toExistingAtomString(ExecState* exec) const
 {
     if (validateDFGDoesGC)
-        RELEASE_ASSERT(vm()->heap.expectDoesGC());
+        RELEASE_ASSERT(vm().heap.expectDoesGC());
     if (isRope())
-        return static_cast<const JSRopeString*>(this)->resolveRopeToExistingAtomicString(exec);
-    if (valueInternal().impl()->isAtomic())
-        return static_cast<AtomicStringImpl*>(valueInternal().impl());
-    return AtomicStringImpl::lookUp(valueInternal().impl());
+        return static_cast<const JSRopeString*>(this)->resolveRopeToExistingAtomString(exec);
+    if (valueInternal().impl()->isAtom())
+        return static_cast<AtomStringImpl*>(valueInternal().impl());
+    return AtomStringImpl::lookUp(valueInternal().impl());
 }
 
 inline const String& JSString::value(ExecState* exec) const
 {
     if (validateDFGDoesGC)
-        RELEASE_ASSERT(vm()->heap.expectDoesGC());
+        RELEASE_ASSERT(vm().heap.expectDoesGC());
     if (isRope())
         return static_cast<const JSRopeString*>(this)->resolveRope(exec);
     return valueInternal();
 }
 
 inline const String& JSString::tryGetValue(bool allocationAllowed) const
 {
     if (allocationAllowed) {
         if (validateDFGDoesGC)
-            RELEASE_ASSERT(vm()->heap.expectDoesGC());
-    if (isRope()) {
-        // Pass nullptr for the ExecState so that resolveRope does not throw in the event of an OOM error.
+            RELEASE_ASSERT(vm().heap.expectDoesGC());
+        if (isRope()) {
+            // Pass nullptr for the ExecState so that resolveRope does not throw in the event of an OOM error.
             return static_cast<const JSRopeString*>(this)->resolveRope(nullptr);
-    }
+        }
     } else
         RELEASE_ASSERT(!isRope());
     return valueInternal();
 }
 
@@ -837,47 +797,69 @@
     VM& vm = exec->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
     ASSERT(canGetIndex(i));
     StringView view = unsafeView(exec);
     RETURN_IF_EXCEPTION(scope, nullptr);
-    return jsSingleCharacterString(exec, view[i]);
+    return jsSingleCharacterString(vm, view[i]);
 }
 
-inline JSString* jsString(VM* vm, const String& s)
+inline JSString* jsString(VM& vm, const String& s)
 {
     int size = s.length();
     if (!size)
-        return vm->smallStrings.emptyString();
+        return vm.smallStrings.emptyString();
     if (size == 1) {
         UChar c = s.characterAt(0);
         if (c <= maxSingleCharacterString)
-            return vm->smallStrings.singleCharacterString(c);
+            return vm.smallStrings.singleCharacterString(c);
     }
-    return JSString::create(*vm, *s.impl());
+    return JSString::create(vm, *s.impl());
 }
 
-inline JSString* jsSubstring(VM& vm, ExecState* exec, JSString* s, unsigned offset, unsigned length)
+inline JSString* jsSubstring(VM& vm, ExecState* exec, JSString* base, unsigned offset, unsigned length)
 {
-    ASSERT(offset <= s->length());
-    ASSERT(length <= s->length());
-    ASSERT(offset + length <= s->length());
+    auto scope = DECLARE_THROW_SCOPE(vm);
+
+    ASSERT(offset <= base->length());
+    ASSERT(length <= base->length());
+    ASSERT(offset + length <= base->length());
     if (!length)
         return vm.smallStrings.emptyString();
-    if (!offset && length == s->length())
-        return s;
-    return JSRopeString::create(vm, exec, s, offset, length);
+    if (!offset && length == base->length())
+        return base;
+
+    // For now, let's not allow substrings with a rope base.
+    // Resolve non-substring rope bases so we don't have to deal with it.
+    // FIXME: Evaluate if this would be worth adding more branches.
+    if (base->isSubstring()) {
+        JSRopeString* baseRope = jsCast<JSRopeString*>(base);
+        base = baseRope->substringBase();
+        offset = baseRope->substringOffset() + offset;
+        ASSERT(!base->isRope());
+    } else if (base->isRope()) {
+        jsCast<JSRopeString*>(base)->resolveRope(exec);
+        RETURN_IF_EXCEPTION(scope, nullptr);
+    }
+    return jsSubstringOfResolved(vm, nullptr, base, offset, length);
 }
 
 inline JSString* jsSubstringOfResolved(VM& vm, GCDeferralContext* deferralContext, JSString* s, unsigned offset, unsigned length)
 {
     ASSERT(offset <= s->length());
     ASSERT(length <= s->length());
     ASSERT(offset + length <= s->length());
+    ASSERT(!s->isRope());
     if (!length)
         return vm.smallStrings.emptyString();
     if (!offset && length == s->length())
         return s;
+    if (length == 1) {
+        auto& base = s->valueInternal();
+        UChar character = base.characterAt(offset);
+        if (character <= maxSingleCharacterString)
+            return vm.smallStrings.singleCharacterString(character);
+    }
     return JSRopeString::createSubstringOfResolved(vm, deferralContext, s, offset, length);
 }
 
 inline JSString* jsSubstringOfResolved(VM& vm, JSString* s, unsigned offset, unsigned length)
 {
@@ -887,55 +869,47 @@
 inline JSString* jsSubstring(ExecState* exec, JSString* s, unsigned offset, unsigned length)
 {
     return jsSubstring(exec->vm(), exec, s, offset, length);
 }
 
-inline JSString* jsSubstring(VM* vm, const String& s, unsigned offset, unsigned length)
+inline JSString* jsSubstring(VM& vm, const String& s, unsigned offset, unsigned length)
 {
     ASSERT(offset <= s.length());
     ASSERT(length <= s.length());
     ASSERT(offset + length <= s.length());
     if (!length)
-        return vm->smallStrings.emptyString();
+        return vm.smallStrings.emptyString();
     if (length == 1) {
         UChar c = s.characterAt(offset);
         if (c <= maxSingleCharacterString)
-            return vm->smallStrings.singleCharacterString(c);
+            return vm.smallStrings.singleCharacterString(c);
     }
     auto impl = StringImpl::createSubstringSharingImpl(*s.impl(), offset, length);
     if (impl->isSubString())
-        return JSString::createHasOtherOwner(*vm, WTFMove(impl));
-    return JSString::create(*vm, WTFMove(impl));
+        return JSString::createHasOtherOwner(vm, WTFMove(impl));
+    return JSString::create(vm, WTFMove(impl));
 }
 
-inline JSString* jsOwnedString(VM* vm, const String& s)
+inline JSString* jsOwnedString(VM& vm, const String& s)
 {
     int size = s.length();
     if (!size)
-        return vm->smallStrings.emptyString();
+        return vm.smallStrings.emptyString();
     if (size == 1) {
         UChar c = s.characterAt(0);
         if (c <= maxSingleCharacterString)
-            return vm->smallStrings.singleCharacterString(c);
+            return vm.smallStrings.singleCharacterString(c);
     }
-    return JSString::createHasOtherOwner(*vm, *s.impl());
+    return JSString::createHasOtherOwner(vm, *s.impl());
 }
 
-inline JSString* jsEmptyString(ExecState* exec) { return jsEmptyString(&exec->vm()); }
-inline JSString* jsString(ExecState* exec, const String& s) { return jsString(&exec->vm(), s); }
-inline JSString* jsSingleCharacterString(ExecState* exec, UChar c) { return jsSingleCharacterString(&exec->vm(), c); }
-inline JSString* jsSubstring(ExecState* exec, const String& s, unsigned offset, unsigned length) { return jsSubstring(&exec->vm(), s, offset, length); }
-inline JSString* jsNontrivialString(ExecState* exec, const String& s) { return jsNontrivialString(&exec->vm(), s); }
-inline JSString* jsNontrivialString(ExecState* exec, String&& s) { return jsNontrivialString(&exec->vm(), WTFMove(s)); }
-inline JSString* jsOwnedString(ExecState* exec, const String& s) { return jsOwnedString(&exec->vm(), s); }
-
 ALWAYS_INLINE JSString* jsStringWithCache(ExecState* exec, const String& s)
 {
     VM& vm = exec->vm();
     StringImpl* stringImpl = s.impl();
     if (!stringImpl || !stringImpl->length())
-        return jsEmptyString(&vm);
+        return jsEmptyString(vm);
 
     if (stringImpl->length() == 1) {
         UChar singleCharacter = (*stringImpl)[0u];
         if (singleCharacter <= maxSingleCharacterString)
             return vm.smallStrings.singleCharacterString(static_cast<unsigned char>(singleCharacter));
@@ -996,11 +970,11 @@
 }
 
 ALWAYS_INLINE StringView JSRopeString::unsafeView(ExecState* exec) const
 {
     if (validateDFGDoesGC)
-        RELEASE_ASSERT(vm()->heap.expectDoesGC());
+        RELEASE_ASSERT(vm().heap.expectDoesGC());
     if (isSubstring()) {
         auto& base = substringBase()->valueInternal();
         if (base.is8Bit())
             return StringView(base.characters8() + substringOffset(), length());
         return StringView(base.characters16() + substringOffset(), length());
@@ -1009,11 +983,11 @@
 }
 
 ALWAYS_INLINE StringViewWithUnderlyingString JSRopeString::viewWithUnderlyingString(ExecState* exec) const
 {
     if (validateDFGDoesGC)
-        RELEASE_ASSERT(vm()->heap.expectDoesGC());
+        RELEASE_ASSERT(vm().heap.expectDoesGC());
     if (isSubstring()) {
         auto& base = substringBase()->valueInternal();
         if (base.is8Bit())
             return { { base.characters8() + substringOffset(), length() }, base };
         return { { base.characters16() + substringOffset(), length() }, base };
@@ -1023,11 +997,11 @@
 }
 
 ALWAYS_INLINE StringView JSString::unsafeView(ExecState* exec) const
 {
     if (validateDFGDoesGC)
-        RELEASE_ASSERT(vm()->heap.expectDoesGC());
+        RELEASE_ASSERT(vm().heap.expectDoesGC());
     if (isRope())
         return static_cast<const JSRopeString*>(this)->unsafeView(exec);
     return valueInternal();
 }
 
@@ -1038,11 +1012,11 @@
     return { valueInternal(), valueInternal() };
 }
 
 inline bool JSString::isSubstring() const
 {
-    return isRope() && static_cast<const JSRopeString*>(this)->isSubstring();
+    return m_fiber & JSRopeString::isSubstringInPointer;
 }
 
 // --- JSValue inlines ----------------------------
 
 inline bool JSValue::toBoolean(ExecState* exec) const
