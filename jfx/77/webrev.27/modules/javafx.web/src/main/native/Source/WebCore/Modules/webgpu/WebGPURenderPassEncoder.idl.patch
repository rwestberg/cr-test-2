diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPURenderPassEncoder.idl b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPURenderPassEncoder.idl
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPURenderPassEncoder.idl
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPURenderPassEncoder.idl
@@ -20,28 +20,37 @@
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-// https://github.com/gpuweb/gpuweb/blob/master/design/sketch.webidl
+// https://gpuweb.github.io/gpuweb
 
+typedef long i32;
 typedef unsigned long u32;
+typedef unsigned long long u64;
 
 [
     Conditional=WEBGPU,
     EnabledAtRuntime=WebGPU,
+    InterfaceName=GPURenderPassEncoder,
     JSGenerateToJSObject
 ] interface WebGPURenderPassEncoder : WebGPUProgrammablePassEncoder {
-    // FIXME: (<rdar://problem/47717832>) Last argument should be sequence<unsigned long>, but bindings generates Vector<unsigned int>.
-    void setVertexBuffers(u32 startSlot, sequence<WebGPUBuffer> buffers, sequence<unsigned long long> offsets);
+    void setPipeline(WebGPURenderPipeline pipeline);
+    void setBlendColor(GPUColor color);
 
-    void draw(u32 vertexCount, u32 instanceCount, u32 firstVertex, u32 firstInstance);
+    // The default viewport is (0.0, 0.0, w, h, 0.0, 1.0), where w and h are the dimensions of back buffer
+    void setViewport(float x, float y, float width, float height, float minDepth, float maxDepth);
 
-/* Not Yet Implemented
-    void setBlendColor(float r, float g, float b, float a);
-    void setIndexBuffer(WebGPUBuffer buffer, u32 offset);
+    // The default scissor rectangle is (0, 0, w, h), where w and h are the dimensions of back buffer.
+    // Width and height must be greater than 0. Otherwise, an error will be generated.
+    void setScissorRect(u32 x, u32 y, u32 width, u32 height);
+
+    void setIndexBuffer(WebGPUBuffer buffer, u64 offset);
+    void setVertexBuffers(u32 startSlot, sequence<WebGPUBuffer> buffers, sequence<u64> offsets);
 
+    void draw(u32 vertexCount, u32 instanceCount, u32 firstVertex, u32 firstInstance);
     void drawIndexed(u32 indexCount, u32 instanceCount, u32 firstIndex, i32 baseVertex, u32 firstInstance);
 
-    // TODO add missing commands
+/* Not Yet Implemented
+    void setStencilReference(u32 reference);
 */
 };
