diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSPrimitiveValueMappings.h b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSPrimitiveValueMappings.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSPrimitiveValueMappings.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSPrimitiveValueMappings.h
@@ -1407,10 +1407,13 @@
         m_value.valueID = CSSValueNone;
         break;
     case DisplayType::Contents:
         m_value.valueID = CSSValueContents;
         break;
+    case DisplayType::FlowRoot:
+        m_value.valueID = CSSValueFlowRoot;
+        break;
     }
 }
 
 template<> inline CSSPrimitiveValue::operator DisplayType() const
 {
@@ -1642,10 +1645,13 @@
         m_value.valueID = CSSValueStrict;
         break;
     case LineBreak::AfterWhiteSpace:
         m_value.valueID = CSSValueAfterWhiteSpace;
         break;
+    case LineBreak::Anywhere:
+        m_value.valueID = CSSValueAnywhere;
+        break;
     }
 }
 
 template<> inline CSSPrimitiveValue::operator OptionSet<HangingPunctuation>() const
 {
@@ -1683,10 +1689,12 @@
         return LineBreak::Normal;
     case CSSValueStrict:
         return LineBreak::Strict;
     case CSSValueAfterWhiteSpace:
         return LineBreak::AfterWhiteSpace;
+    case CSSValueAnywhere:
+        return LineBreak::Anywhere;
     default:
         break;
     }
 
     ASSERT_NOT_REACHED();
@@ -2333,11 +2341,11 @@
         break;
     case PositionType::Fixed:
         m_value.valueID = CSSValueFixed;
         break;
     case PositionType::Sticky:
-        m_value.valueID = CSSValueWebkitSticky;
+        m_value.valueID = CSSValueSticky;
         break;
     }
 }
 
 template<> inline CSSPrimitiveValue::operator PositionType() const
@@ -2351,10 +2359,11 @@
         return PositionType::Relative;
     case CSSValueAbsolute:
         return PositionType::Absolute;
     case CSSValueFixed:
         return PositionType::Fixed;
+    case CSSValueSticky:
     case CSSValueWebkitSticky:
         return PositionType::Sticky;
     default:
         break;
     }
@@ -3049,10 +3058,13 @@
         m_value.valueID = CSSValueNowrap;
         break;
     case WhiteSpace::KHTMLNoWrap:
         m_value.valueID = CSSValueWebkitNowrap;
         break;
+    case WhiteSpace::BreakSpaces:
+        m_value.valueID = CSSValueBreakSpaces;
+        break;
     }
 }
 
 template<> inline CSSPrimitiveValue::operator WhiteSpace() const
 {
@@ -3069,10 +3081,12 @@
         return WhiteSpace::PreWrap;
     case CSSValuePreLine:
         return WhiteSpace::PreLine;
     case CSSValueNormal:
         return WhiteSpace::Normal;
+    case CSSValueBreakSpaces:
+        return WhiteSpace::BreakSpaces;
     default:
         break;
     }
 
     ASSERT_NOT_REACHED();
@@ -4858,53 +4872,54 @@
     return MaskType::Luminance;
 }
 
 #if ENABLE(CSS_IMAGE_ORIENTATION)
 
-template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ImageOrientationEnum e)
+template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ImageOrientation e)
     : CSSValue(PrimitiveClass)
 {
     m_primitiveUnitType = CSS_DEG;
     switch (e) {
-    case OriginTopLeft:
+    case ImageOrientation::OriginTopLeft:
         m_value.num = 0;
         break;
-    case OriginRightTop:
+    case ImageOrientation::OriginRightTop:
         m_value.num = 90;
         break;
-    case OriginBottomRight:
+    case ImageOrientation::OriginBottomRight:
         m_value.num = 180;
         break;
-    case OriginLeftBottom:
+    case ImageOrientation::OriginLeftBottom:
         m_value.num = 270;
         break;
-    case OriginTopRight:
-    case OriginLeftTop:
-    case OriginBottomLeft:
-    case OriginRightBottom:
+    case ImageOrientation::FromImage:
+    case ImageOrientation::OriginTopRight:
+    case ImageOrientation::OriginLeftTop:
+    case ImageOrientation::OriginBottomLeft:
+    case ImageOrientation::OriginRightBottom:
         ASSERT_NOT_REACHED();
     }
 }
 
-template<> inline CSSPrimitiveValue::operator ImageOrientationEnum() const
+template<> inline CSSPrimitiveValue::operator ImageOrientation() const
 {
     ASSERT(isAngle());
     double quarters = 4 * doubleValue(CSS_TURN);
     int orientation = 3 & static_cast<int>(quarters < 0 ? floor(quarters) : ceil(quarters));
     switch (orientation) {
     case 0:
-        return OriginTopLeft;
+        return ImageOrientation::OriginTopLeft;
     case 1:
-        return OriginRightTop;
+        return ImageOrientation::OriginRightTop;
     case 2:
-        return OriginBottomRight;
+        return ImageOrientation::OriginBottomRight;
     case 3:
-        return OriginLeftBottom;
+        return ImageOrientation::OriginLeftBottom;
     }
 
     ASSERT_NOT_REACHED();
-    return OriginTopLeft;
+    return ImageOrientation::None;
 }
 
 #endif // ENABLE(CSS_IMAGE_ORIENTATION)
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(CSSBoxType cssBox)
