diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGNumberList.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGNumberList.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGNumberList.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGNumberList.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -23,29 +23,66 @@
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
-#include "SVGAnimatedListPropertyTearOff.h"
-#include "SVGListPropertyTearOff.h"
-#include "SVGNumberListValues.h"
+#include "SVGNumber.h"
+#include "SVGValuePropertyList.h"
 
 namespace WebCore {
 
-class SVGNumberList : public SVGListPropertyTearOff<SVGNumberListValues> {
+class SVGNumberList : public SVGValuePropertyList<SVGNumber> {
+    using Base = SVGValuePropertyList<SVGNumber>;
+    using Base::Base;
+
 public:
-    using AnimatedListPropertyTearOff = SVGAnimatedListPropertyTearOff<SVGNumberListValues>;
-    using ListWrapperCache = AnimatedListPropertyTearOff::ListWrapperCache;
+    static Ref<SVGNumberList> create()
+    {
+        return adoptRef(*new SVGNumberList());
+    }
+
+    static Ref<SVGNumberList> create(SVGPropertyOwner* owner, SVGPropertyAccess access)
+    {
+        return adoptRef(*new SVGNumberList(owner, access));
+    }
 
-    static Ref<SVGNumberList> create(AnimatedListPropertyTearOff& animatedProperty, SVGPropertyRole role, SVGNumberListValues& values, ListWrapperCache& wrappers)
+    static Ref<SVGNumberList> create(const SVGNumberList& other, SVGPropertyAccess access)
     {
-        return adoptRef(*new SVGNumberList(animatedProperty, role, values, wrappers));
+        return adoptRef(*new SVGNumberList(other, access));
     }
 
-private:
-    SVGNumberList(AnimatedListPropertyTearOff& animatedProperty, SVGPropertyRole role, SVGNumberListValues& values, ListWrapperCache& wrappers)
-        : SVGListPropertyTearOff<SVGNumberListValues>(animatedProperty, role, values, wrappers)
+    bool parse(const String& value)
     {
+        clearItems();
+
+        float number = 0;
+        auto upconvertedCharacters = StringView(value).upconvertedCharacters();
+        const UChar* ptr = upconvertedCharacters;
+        const UChar* end = ptr + value.length();
+
+        // The spec (section 4.1) strangely doesn't allow leading whitespace.
+        // We might choose to violate that intentionally.
+        while (ptr < end) {
+            if (!parseNumber(ptr, end, number))
+                break;
+            append(SVGNumber::create(number));
+        }
+
+        return ptr == end;
+    }
+
+    String valueAsString() const override
+    {
+        StringBuilder builder;
+
+        for (const auto& number : m_items) {
+            if (builder.length())
+                builder.append(' ');
+
+            builder.appendFixedPrecisionNumber(number->value());
+        }
+
+        return builder.toString();
     }
 };
 
 } // namespace WebCore
