diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLRecursionChecker.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLRecursionChecker.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLRecursionChecker.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLRecursionChecker.cpp
@@ -28,48 +28,63 @@
 
 #if ENABLE(WEBGPU)
 
 #include "WHLSLCallExpression.h"
 #include "WHLSLFunctionDefinition.h"
+#include "WHLSLProgram.h"
 #include "WHLSLVisitor.h"
 #include <wtf/HashSet.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 // Makes sure there is no function recursion.
-class RecursionChecker : public Visitor {
+class RecursionChecker final : public Visitor {
 private:
+    void visit(Program& program) override
+    {
+        for (auto& functionDefinition : program.functionDefinitions())
+            checkErrorAndVisit(functionDefinition);
+    }
+
     void visit(AST::FunctionDefinition& functionDefinition) override
     {
-        auto addResult = m_visitingSet.add(&functionDefinition);
+        if (m_finishedVisiting.contains(&functionDefinition))
+            return;
+
+        auto addResult = m_startedVisiting.add(&functionDefinition);
         if (!addResult.isNewEntry) {
-            setError();
+            setError(Error("Cannot use recursion in the call graph.", functionDefinition.codeLocation()));
             return;
         }
 
-        Visitor::visit(functionDefinition);
+        if (functionDefinition.parsingMode() != ParsingMode::StandardLibrary)
+            Visitor::visit(functionDefinition);
 
-        auto success = m_visitingSet.remove(&functionDefinition);
-        ASSERT_UNUSED(success, success);
+        {
+            auto addResult = m_finishedVisiting.add(&functionDefinition);
+            ASSERT_UNUSED(addResult, addResult.isNewEntry);
+        }
     }
 
     void visit(AST::CallExpression& callExpression) override
     {
-        ASSERT(callExpression.function());
-        Visitor::visit(*callExpression.function());
+        Visitor::visit(callExpression);
+        if (is<AST::FunctionDefinition>(callExpression.function()))
+            checkErrorAndVisit(downcast<AST::FunctionDefinition>(callExpression.function()));
     }
 
-    HashSet<AST::FunctionDefinition*> m_visitingSet;
+    HashSet<AST::FunctionDefinition*> m_startedVisiting;
+    HashSet<AST::FunctionDefinition*> m_finishedVisiting;
 };
 
-bool checkRecursion(Program& program)
+Expected<void, Error> checkRecursion(Program& program)
 {
     RecursionChecker recursionChecker;
     recursionChecker.Visitor::visit(program);
-    return !recursionChecker.error();
+    return recursionChecker.result();
 }
 
 }
 
 }
