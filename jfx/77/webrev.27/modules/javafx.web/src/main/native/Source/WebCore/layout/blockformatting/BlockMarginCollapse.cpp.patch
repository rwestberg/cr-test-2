diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/blockformatting/BlockMarginCollapse.cpp b/modules/javafx.web/src/main/native/Source/WebCore/layout/blockformatting/BlockMarginCollapse.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/blockformatting/BlockMarginCollapse.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/blockformatting/BlockMarginCollapse.cpp
@@ -156,10 +156,13 @@
 
     if (!layoutBox.previousInFlowSibling())
         return false;
 
     auto& previousInFlowSibling = *layoutBox.previousInFlowSibling();
+    if (previousInFlowSibling.isAnonymous())
+        return false;
+
     // Margins between a floated box and any other box do not collapse.
     if (layoutBox.isFloatingPositioned() || previousInFlowSibling.isFloatingPositioned())
         return false;
 
     // Margins of absolutely positioned boxes do not collapse.
@@ -207,18 +210,10 @@
 
     // ...and the child has no clearance.
     if (hasClearance(layoutState, firstInFlowChild))
         return false;
 
-    // Margins between a floated box and any other box do not collapse.
-    if (firstInFlowChild.isFloatingPositioned())
-        return false;
-
-    // Margins of absolutely positioned boxes do not collapse.
-    if (firstInFlowChild.isOutOfFlowPositioned())
-        return false;
-
     // Margins of inline-block boxes do not collapse.
     if (firstInFlowChild.isInlineBlockBox())
         return false;
 
     return true;
@@ -345,18 +340,10 @@
     auto computedMinHeight = layoutBox.style().logicalMinHeight();
     if (!computedMinHeight.isAuto() && computedMinHeight.value()
         && (marginAfterCollapsesWithParentMarginBefore(layoutState, lastInFlowChild) || hasClearance(layoutState, lastInFlowChild)))
         return false;
 
-    // Margins between a floated box and any other box do not collapse.
-    if (lastInFlowChild.isFloatingPositioned())
-        return false;
-
-    // Margins of absolutely positioned boxes do not collapse.
-    if (lastInFlowChild.isOutOfFlowPositioned())
-        return false;
-
     // Margins of inline-block boxes do not collapse.
     if (lastInFlowChild.isInlineBlockBox())
         return false;
 
     return true;
@@ -382,20 +369,21 @@
         return false;
 
     if (hasPaddingBefore(layoutBox) || hasPaddingAfter(layoutBox))
         return false;
 
-    // FIXME: Check for computed 0 height.
-    if (!layoutBox.style().height().isAuto())
+    auto& style = layoutBox.style();
+    auto computedHeightValueIsZero = style.height().isFixed() && !style.height().value();
+    if (!(style.height().isAuto() || computedHeightValueIsZero))
         return false;
 
     // FIXME: Check for computed 0 height.
-    if (!layoutBox.style().minHeight().isAuto())
+    if (!style.minHeight().isAuto())
         return false;
 
     // FIXME: Block replaced boxes clearly don't collapse through their margins, but I couldn't find it in the spec yet (and no, it's not a quirk).
-    if (layoutBox.isReplaced())
+    if (layoutBox.replaced())
         return false;
 
     if (!is<Container>(layoutBox))
         return true;
 
@@ -418,12 +406,12 @@
                     return false;
             }
             return true;
         }
 
-        if (establishesBlockFormattingContext(layoutBox))
-            return false;
+        // A root of a non-inline formatting context (table, flex etc) with inflow descendants should not collapse through.
+        return false;
     }
 
     for (auto* inflowChild = downcast<Container>(layoutBox).firstInFlowOrFloatingChild(); inflowChild; inflowChild = inflowChild->nextInFlowOrFloatingSibling()) {
         if (establishesBlockFormattingContext(*inflowChild))
             return false;
@@ -445,11 +433,11 @@
         computedValues.negative = std::min(*a.negative, *b.negative);
     else
         computedValues.negative = a.negative ? a.negative : b.negative;
 
     if (a.isNonZero() && b.isNonZero())
-        computedValues.isQuirk = a.isQuirk && b.isQuirk;
+        computedValues.isQuirk = a.isQuirk || b.isQuirk;
     else if (a.isNonZero())
         computedValues.isQuirk = a.isQuirk;
     else
         computedValues.isQuirk = b.isQuirk;
 
