diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/MutationObserverRegistration.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/MutationObserverRegistration.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/MutationObserverRegistration.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/MutationObserverRegistration.cpp
@@ -35,11 +35,11 @@
 #include "Document.h"
 #include "QualifiedName.h"
 
 namespace WebCore {
 
-MutationObserverRegistration::MutationObserverRegistration(MutationObserver& observer, Node& node, MutationObserverOptions options, const HashSet<AtomicString>& attributeFilter)
+MutationObserverRegistration::MutationObserverRegistration(MutationObserver& observer, Node& node, MutationObserverOptions options, const HashSet<AtomString>& attributeFilter)
     : m_observer(observer)
     , m_node(node)
     , m_options(options)
     , m_attributeFilter(attributeFilter)
 {
@@ -50,11 +50,11 @@
 {
     takeTransientRegistrations();
     m_observer->observationEnded(*this);
 }
 
-void MutationObserverRegistration::resetObservation(MutationObserverOptions options, const HashSet<AtomicString>& attributeFilter)
+void MutationObserverRegistration::resetObservation(MutationObserverOptions options, const HashSet<AtomString>& attributeFilter)
 {
     takeTransientRegistrations();
     m_options = options;
     m_attributeFilter = attributeFilter;
 }
@@ -66,11 +66,11 @@
 
     node.registerTransientMutationObserver(*this);
     m_observer->setHasTransientRegistration();
 
     if (!m_transientRegistrationNodes) {
-        m_transientRegistrationNodes = std::make_unique<HashSet<GCReachableRef<Node>>>();
+        m_transientRegistrationNodes = makeUnique<HashSet<GCReachableRef<Node>>>();
 
         ASSERT(!m_nodeKeptAlive);
         m_nodeKeptAlive = &m_node; // Balanced in takeTransientRegistrations.
     }
     m_transientRegistrationNodes->add(node);
