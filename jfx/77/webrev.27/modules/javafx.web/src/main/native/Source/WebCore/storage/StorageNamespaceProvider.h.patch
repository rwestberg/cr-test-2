diff a/modules/javafx.web/src/main/native/Source/WebCore/storage/StorageNamespaceProvider.h b/modules/javafx.web/src/main/native/Source/WebCore/storage/StorageNamespaceProvider.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/storage/StorageNamespaceProvider.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/storage/StorageNamespaceProvider.h
@@ -29,10 +29,14 @@
 #include <wtf/Forward.h>
 #include <wtf/HashMap.h>
 #include <wtf/HashSet.h>
 #include <wtf/RefCounted.h>
 
+namespace PAL {
+class SessionID;
+}
+
 namespace WebCore {
 
 class Document;
 class Page;
 class SecurityOrigin;
@@ -43,29 +47,25 @@
 public:
     WEBCORE_EXPORT StorageNamespaceProvider();
     WEBCORE_EXPORT virtual ~StorageNamespaceProvider();
 
     virtual Ref<StorageNamespace> createSessionStorageNamespace(Page&, unsigned quota) = 0;
-    virtual Ref<StorageNamespace> createEphemeralLocalStorageNamespace(Page&, unsigned quota) = 0;
 
     Ref<StorageArea> localStorageArea(Document&);
 
-    void addPage(Page&);
-    void removePage(Page&);
+    WEBCORE_EXPORT void enableLegacyPrivateBrowsingForTesting(bool enabled);
 
 protected:
     StorageNamespace* optionalLocalStorageNamespace() { return m_localStorageNamespace.get(); }
 
 private:
-    StorageNamespace& localStorageNamespace();
-    StorageNamespace& transientLocalStorageNamespace(SecurityOrigin&);
-
-    virtual Ref<StorageNamespace> createLocalStorageNamespace(unsigned quota) = 0;
-    virtual Ref<StorageNamespace> createTransientLocalStorageNamespace(SecurityOrigin&, unsigned quota) = 0;
+    StorageNamespace& localStorageNamespace(PAL::SessionID);
+    StorageNamespace& transientLocalStorageNamespace(SecurityOrigin&, PAL::SessionID);
 
-    HashSet<Page*> m_pages;
+    virtual Ref<StorageNamespace> createLocalStorageNamespace(unsigned quota, PAL::SessionID) = 0;
+    virtual Ref<StorageNamespace> createTransientLocalStorageNamespace(SecurityOrigin&, unsigned quota, PAL::SessionID) = 0;
 
     RefPtr<StorageNamespace> m_localStorageNamespace;
-    HashMap<RefPtr<SecurityOrigin>, RefPtr<StorageNamespace>> m_transientLocalStorageMap;
+    HashMap<SecurityOriginData, RefPtr<StorageNamespace>> m_transientLocalStorageNamespaces;
 };
 
 } // namespace WebCore
