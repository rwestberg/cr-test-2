diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/KeyboardEvent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/KeyboardEvent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/KeyboardEvent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/KeyboardEvent.cpp
@@ -32,11 +32,11 @@
 #include "PlatformKeyboardEvent.h"
 #include "WindowsKeyboardCodes.h"
 
 namespace WebCore {
 
-static inline const AtomicString& eventTypeForKeyboardEventType(PlatformEvent::Type type)
+static inline const AtomString& eventTypeForKeyboardEventType(PlatformEvent::Type type)
 {
     switch (type) {
         case PlatformEvent::KeyUp:
             return eventNames().keyupEvent;
         case PlatformEvent::RawKeyDown:
@@ -94,29 +94,31 @@
 inline KeyboardEvent::KeyboardEvent() = default;
 
 inline KeyboardEvent::KeyboardEvent(const PlatformKeyboardEvent& key, RefPtr<WindowProxy>&& view)
     : UIEventWithKeyState(eventTypeForKeyboardEventType(key.type()), CanBubble::Yes, IsCancelable::Yes, IsComposed::Yes,
         key.timestamp().approximateMonotonicTime(), view.copyRef(), 0, key.modifiers(), IsTrusted::Yes)
-    , m_underlyingPlatformEvent(std::make_unique<PlatformKeyboardEvent>(key))
+    , m_underlyingPlatformEvent(makeUnique<PlatformKeyboardEvent>(key))
 #if ENABLE(KEYBOARD_KEY_ATTRIBUTE)
     , m_key(key.key())
 #endif
 #if ENABLE(KEYBOARD_CODE_ATTRIBUTE)
     , m_code(key.code())
 #endif
     , m_keyIdentifier(key.keyIdentifier())
     , m_location(keyLocationCode(key))
     , m_repeat(key.isAutoRepeat())
     , m_isComposing(view && is<DOMWindow>(view->window()) && downcast<DOMWindow>(*view->window()).frame() && downcast<DOMWindow>(*view->window()).frame()->editor().hasComposition())
-#if USE(APPKIT)
+#if USE(APPKIT) || USE(UIKIT_KEYBOARD_ADDITIONS)
     , m_handledByInputMethod(key.handledByInputMethod())
+#endif
+#if USE(APPKIT)
     , m_keypressCommands(key.commands())
 #endif
 {
 }
 
-inline KeyboardEvent::KeyboardEvent(const AtomicString& eventType, const Init& initializer)
+inline KeyboardEvent::KeyboardEvent(const AtomString& eventType, const Init& initializer)
     : UIEventWithKeyState(eventType, initializer)
 #if ENABLE(KEYBOARD_KEY_ATTRIBUTE)
     , m_key(initializer.key)
 #endif
 #if ENABLE(KEYBOARD_CODE_ATTRIBUTE)
@@ -142,16 +144,16 @@
 Ref<KeyboardEvent> KeyboardEvent::createForBindings()
 {
     return adoptRef(*new KeyboardEvent);
 }
 
-Ref<KeyboardEvent> KeyboardEvent::create(const AtomicString& type, const Init& initializer)
+Ref<KeyboardEvent> KeyboardEvent::create(const AtomString& type, const Init& initializer)
 {
     return adoptRef(*new KeyboardEvent(type, initializer));
 }
 
-void KeyboardEvent::initKeyboardEvent(const AtomicString& type, bool canBubble, bool cancelable, RefPtr<WindowProxy>&& view,
+void KeyboardEvent::initKeyboardEvent(const AtomString& type, bool canBubble, bool cancelable, RefPtr<WindowProxy>&& view,
     const String& keyIdentifier, unsigned location, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey, bool altGraphKey)
 {
     if (isBeingDispatched())
         return;
 
