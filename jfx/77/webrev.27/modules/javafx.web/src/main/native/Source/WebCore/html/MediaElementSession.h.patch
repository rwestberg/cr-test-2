diff a/modules/javafx.web/src/main/native/Source/WebCore/html/MediaElementSession.h b/modules/javafx.web/src/main/native/Source/WebCore/html/MediaElementSession.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/MediaElementSession.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/MediaElementSession.h
@@ -71,11 +71,11 @@
     void inActiveDocumentChanged();
 
     SuccessOr<MediaPlaybackDenialReason> playbackPermitted() const;
     bool autoplayPermitted() const;
     bool dataLoadingPermitted() const;
-    bool dataBufferingPermitted() const;
+    MediaPlayer::BufferingPolicy preferredBufferingPolicy() const;
     bool fullscreenPermitted() const;
     bool pageAllowsDataLoading() const;
     bool pageAllowsPlaybackAfterResuming() const;
 
 #if ENABLE(WIRELESS_PLAYBACK_TARGET)
@@ -99,10 +99,15 @@
 
     void mediaEngineUpdated();
 
     void resetPlaybackSessionState() override;
 
+    void suspendBuffering() override;
+    void resumeBuffering() override;
+    bool bufferingSuspended() const;
+    void updateBufferingPolicy() { scheduleClientDataBufferingCheck(); }
+
     // Restrictions to modify default behaviors.
     enum BehaviorRestrictionFlags : unsigned {
         NoRestrictions = 0,
         RequireUserGestureForLoad = 1 << 0,
         RequireUserGestureForVideoRateChange = 1 << 1,
@@ -111,11 +116,10 @@
         RequirePageConsentToResumeMedia = 1 << 4,
         RequireUserGestureForAudioRateChange = 1 << 5,
         RequireUserGestureToShowPlaybackTargetPicker = 1 << 6,
         WirelessVideoPlaybackDisabled =  1 << 7,
         RequireUserGestureToAutoplayToExternalDevice = 1 << 8,
-        MetadataPreloadingNotPermitted = 1 << 9,
         AutoPreloadingNotPermitted = 1 << 10,
         InvisibleAutoplayNotPermitted = 1 << 11,
         OverrideUserGestureRequirementForMainContent = 1 << 12,
         RequireUserGestureToControlControlsManager = 1 << 13,
         RequirePlaybackToControlControlsManager = 1 << 14,
@@ -204,12 +208,30 @@
 #if !RELEASE_LOG_DISABLED
     const void* m_logIdentifier;
 #endif
 };
 
+String convertEnumerationToString(const MediaPlaybackDenialReason);
+
 } // namespace WebCore
 
+namespace WTF {
+
+template<typename Type>
+struct LogArgument;
+
+template <>
+struct LogArgument<WebCore::MediaPlaybackDenialReason> {
+    static String toString(const WebCore::MediaPlaybackDenialReason reason)
+    {
+        return convertEnumerationToString(reason);
+    }
+};
+
+}; // namespace WTF
+
+
 SPECIALIZE_TYPE_TRAITS_BEGIN(WebCore::MediaElementSession)
 static bool isType(const WebCore::PlatformMediaSession& session) { return WebCore::MediaElementSession::isMediaElementSessionMediaType(session.mediaType()); }
 SPECIALIZE_TYPE_TRAITS_END()
 
 #endif // ENABLE(VIDEO)
