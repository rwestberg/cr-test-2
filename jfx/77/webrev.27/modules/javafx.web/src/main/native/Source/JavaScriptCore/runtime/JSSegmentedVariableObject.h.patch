diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSSegmentedVariableObject.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSSegmentedVariableObject.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSSegmentedVariableObject.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSSegmentedVariableObject.h
@@ -45,21 +45,27 @@
 // JSLexicalEnvironment, this will manage the memory for the registers itself and neither
 // requires nor allows for the subclasses to manage that memory. Finally,
 // JSSegmentedVariableObject has its own GC tracing functionality, since it knows the
 // exact dimensions of the variables array at all times.
 
-// Except for JSGlobalObject, subclasses of this don't call the destructor and leak memory.
-
 class JSSegmentedVariableObject : public JSSymbolTableObject {
     friend class JIT;
     friend class LLIntOffsetsExtractor;
 
 public:
     using Base = JSSymbolTableObject;
 
     DECLARE_INFO;
 
+    static const bool needsDestruction = true;
+
+    template<typename CellType, SubspaceAccess>
+    static CompleteSubspace* subspaceFor(VM& vm)
+    {
+        return &vm.cellSpace;
+    }
+
     bool isValidScopeOffset(ScopeOffset offset)
     {
         return !!offset && offset.offset() < m_variables.size();
     }
 
@@ -84,20 +90,14 @@
     // Adds numberOfRegistersToAdd registers, initializes them to Undefined, and returns
     // the index of the first one added.
     JS_EXPORT_PRIVATE ScopeOffset addVariables(unsigned numberOfVariablesToAdd, JSValue);
 
     JS_EXPORT_PRIVATE static void visitChildren(JSCell*, SlotVisitor&);
-    JS_EXPORT_PRIVATE static void heapSnapshot(JSCell*, HeapSnapshotBuilder&);
+    JS_EXPORT_PRIVATE static void analyzeHeap(JSCell*, HeapAnalyzer&);
 
     static void destroy(JSCell*);
 
-    template<typename, SubspaceAccess>
-    static CompleteSubspace* subspaceFor(VM& vm)
-    {
-        return &vm.segmentedVariableObjectSpace;
-    }
-
     const ClassInfo* classInfo() const { return m_classInfo; }
 
 protected:
     JSSegmentedVariableObject(VM&, Structure*, JSScope*);
 
@@ -106,10 +106,11 @@
     void finishCreation(VM&);
 
 private:
     SegmentedVector<WriteBarrier<Unknown>, 16> m_variables;
     const ClassInfo* m_classInfo;
-    ConcurrentJSLock m_lock;
+#ifndef NDEBUG
     bool m_alreadyDestroyed { false }; // We use these assertions to check that we aren't doing ancient hacks that result in this being destroyed more than once.
+#endif
 };
 
 } // namespace JSC
