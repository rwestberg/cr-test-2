diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLBaseElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLBaseElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLBaseElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLBaseElement.cpp
@@ -44,11 +44,11 @@
 Ref<HTMLBaseElement> HTMLBaseElement::create(const QualifiedName& tagName, Document& document)
 {
     return adoptRef(*new HTMLBaseElement(tagName, document));
 }
 
-void HTMLBaseElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLBaseElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == hrefAttr || name == targetAttr)
         document().processBaseElement();
     else
         HTMLElement::parseAttribute(name, value);
@@ -83,11 +83,11 @@
 {
     // This does not use the getURLAttribute function because that will resolve relative to the document's base URL;
     // base elements like this one can be used to set that base URL. Thus we need to resolve relative to the document's
     // URL and ignore the base URL.
 
-    const AtomicString& attributeValue = attributeWithoutSynchronization(hrefAttr);
+    const AtomString& attributeValue = attributeWithoutSynchronization(hrefAttr);
     if (attributeValue.isNull())
         return document().url();
 
     auto* encoding = document().decoder() ? document().decoder()->encodingForURLParsing() : nullptr;
     URL url(document().url(), stripLeadingAndTrailingHTMLSpaces(attributeValue), encoding);
@@ -96,11 +96,11 @@
         return URL();
 
     return url;
 }
 
-void HTMLBaseElement::setHref(const AtomicString& value)
+void HTMLBaseElement::setHref(const AtomString& value)
 {
     setAttributeWithoutSynchronization(hrefAttr, value);
 }
 
 }
