diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatingState.h b/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatingState.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatingState.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatingState.h
@@ -58,12 +58,12 @@
     Optional<PositionInContextRoot> leftBottom(const Box& formattingContextRoot) const;
     Optional<PositionInContextRoot> rightBottom(const Box& formattingContextRoot) const;
     Optional<PositionInContextRoot> bottom(const Box& formattingContextRoot) const;
 
     struct Constraints {
-        Optional<PositionInContextRoot> left;
-        Optional<PositionInContextRoot> right;
+        Optional<PointInContextRoot> left;
+        Optional<PointInContextRoot> right;
     };
     Constraints constraints(PositionInContextRoot verticalPosition, const Box& formattingContextRoot) const;
 
     class FloatItem {
     public:
@@ -72,11 +72,11 @@
         bool operator==(const Box& layoutBox) const { return m_layoutBox.get() == &layoutBox; }
 
         bool isLeftPositioned() const { return m_layoutBox->isLeftFloatingPositioned(); }
         bool isDescendantOfFormattingRoot(const Box&) const;
 
-        Display::Box::Rect rectWithMargin() const { return m_absoluteDisplayBox.rectWithMargin(); }
+        Display::Rect rectWithMargin() const { return m_absoluteDisplayBox.rectWithMargin(); }
         PositionInContextRoot bottom() const { return { m_absoluteDisplayBox.bottom() }; }
 
     private:
         WeakPtr<const Box> m_layoutBox;
         Display::Box m_absoluteDisplayBox;
@@ -119,11 +119,11 @@
 inline bool FloatingState::FloatItem::isDescendantOfFormattingRoot(const Box& formattingContextRoot) const
 {
     ASSERT(formattingContextRoot.establishesFormattingContext());
     if (!is<Container>(formattingContextRoot))
         return false;
-    return m_layoutBox->isDescendantOf(downcast<Container>(formattingContextRoot));
+    return m_layoutBox->isContainingBlockDescendantOf(downcast<Container>(formattingContextRoot));
 }
 
 }
 }
 #endif
