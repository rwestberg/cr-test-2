diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLProgram.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLProgram.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLProgram.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLProgram.h
@@ -26,10 +26,11 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "WHLSLEnumerationDefinition.h"
+#include "WHLSLError.h"
 #include "WHLSLFunctionDefinition.h"
 #include "WHLSLIntrinsics.h"
 #include "WHLSLNameContext.h"
 #include "WHLSLNativeFunctionDeclaration.h"
 #include "WHLSLNativeTypeDeclaration.h"
@@ -44,50 +45,51 @@
 class Program {
 public:
     Program() = default;
     Program(Program&&) = default;
 
-    bool append(AST::TypeDefinition&& typeDefinition)
+    Expected<void, Error> append(AST::TypeDefinition&& typeDefinition)
     {
         m_typeDefinitions.append(makeUniqueRef<AST::TypeDefinition>(WTFMove(typeDefinition)));
         return m_nameContext.add(m_typeDefinitions.last());
     }
 
-    bool append(AST::StructureDefinition&& structureDefinition)
+    Expected<void, Error> append(AST::StructureDefinition&& structureDefinition)
     {
         m_structureDefinitions.append(makeUniqueRef<AST::StructureDefinition>(WTFMove(structureDefinition)));
         return m_nameContext.add(m_structureDefinitions.last());
     }
 
-    bool append(AST::EnumerationDefinition&& enumerationDefinition)
+    Expected<void, Error> append(AST::EnumerationDefinition&& enumerationDefinition)
     {
         m_enumerationDefinitions.append(makeUniqueRef<AST::EnumerationDefinition>(WTFMove(enumerationDefinition)));
         return m_nameContext.add(m_enumerationDefinitions.last());
     }
 
-    bool append(AST::FunctionDefinition&& functionDefinition)
+    Expected<void, Error> append(AST::FunctionDefinition&& functionDefinition)
     {
         m_functionDefinitions.append(makeUniqueRef<AST::FunctionDefinition>(WTFMove(functionDefinition)));
         return m_nameContext.add(m_functionDefinitions.last());
     }
 
-    bool append(AST::NativeFunctionDeclaration&& nativeFunctionDeclaration)
+    Expected<void, Error> append(AST::NativeFunctionDeclaration&& nativeFunctionDeclaration)
     {
         m_nativeFunctionDeclarations.append(makeUniqueRef<AST::NativeFunctionDeclaration>(WTFMove(nativeFunctionDeclaration)));
         m_intrinsics.add(m_nativeFunctionDeclarations.last());
         return m_nameContext.add(m_nativeFunctionDeclarations.last());
     }
 
-    bool append(AST::NativeTypeDeclaration&& nativeTypeDeclaration)
+    Expected<void, Error> append(AST::NativeTypeDeclaration&& nativeTypeDeclaration)
     {
         m_nativeTypeDeclarations.append(makeUniqueRef<AST::NativeTypeDeclaration>(WTFMove(nativeTypeDeclaration)));
         m_intrinsics.add(m_nativeTypeDeclarations.last());
         return m_nameContext.add(m_nativeTypeDeclarations.last());
     }
 
     NameContext& nameContext() { return m_nameContext; }
     Intrinsics& intrinsics() { return m_intrinsics; }
+    const Intrinsics& intrinsics() const { return m_intrinsics; }
     Vector<UniqueRef<AST::TypeDefinition>>& typeDefinitions() { return m_typeDefinitions; }
     Vector<UniqueRef<AST::StructureDefinition>>& structureDefinitions() { return m_structureDefinitions; }
     Vector<UniqueRef<AST::EnumerationDefinition>>& enumerationDefinitions() { return m_enumerationDefinitions; }
     const Vector<UniqueRef<AST::FunctionDefinition>>& functionDefinitions() const { return m_functionDefinitions; }
     Vector<UniqueRef<AST::FunctionDefinition>>& functionDefinitions() { return m_functionDefinitions; }
