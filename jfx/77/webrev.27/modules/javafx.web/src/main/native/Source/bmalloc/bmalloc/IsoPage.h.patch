diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoPage.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoPage.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoPage.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoPage.h
@@ -30,19 +30,31 @@
 #include "FreeList.h"
 #include <climits>
 
 namespace bmalloc {
 
+class IsoHeapImplBase;
 template<typename Config> class IsoDirectoryBase;
 template<typename Config> class IsoHeapImpl;
 
 class IsoPageBase {
 public:
     static constexpr size_t pageSize = 16384;
 
+    explicit IsoPageBase(bool isShared)
+        : m_isShared(isShared)
+    {
+    }
+
+    static IsoPageBase* pageFor(void*);
+
+    bool isShared() const { return m_isShared; }
+
 protected:
     BEXPORT static void* allocatePageMemory();
+
+    bool m_isShared { false };
 };
 
 template<typename Config>
 class IsoPage : public IsoPageBase {
 public:
@@ -79,13 +91,10 @@
     static constexpr unsigned indexOfFirstObject()
     {
         return (sizeof(IsoPage) + Config::objectSize - 1) / Config::objectSize;
     }
 
-    IsoDirectoryBase<Config>& m_directory;
-    unsigned m_index { UINT_MAX };
-
     // The possible states of a page are as follows. We mark these states by their corresponding
     // eligible, empty, and committed bits (respectively).
     //
     // 000 - Deallocated. It has no objects and its memory is not paged in.
     // 111 - Empty.
@@ -100,15 +109,19 @@
     // We manage the bitvector ourselves. This bitvector works in a special way to enable very fast
     // freeing.
 
     // This must have a trivial destructor.
 
-    unsigned m_allocBits[bitsArrayLength(numObjects)];
-    unsigned m_numNonEmptyWords { 0 };
     bool m_eligibilityHasBeenNoted { true };
     bool m_isInUseForAllocation { false };
     DeferredTrigger<IsoPageTrigger::Eligible> m_eligibilityTrigger;
     DeferredTrigger<IsoPageTrigger::Empty> m_emptyTrigger;
+
+    IsoDirectoryBase<Config>& m_directory;
+    unsigned m_index { UINT_MAX };
+
+    unsigned m_allocBits[bitsArrayLength(numObjects)];
+    unsigned m_numNonEmptyWords { 0 };
 };
 
 } // namespace bmalloc
 
