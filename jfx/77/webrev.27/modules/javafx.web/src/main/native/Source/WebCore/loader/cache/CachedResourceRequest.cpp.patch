diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResourceRequest.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResourceRequest.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResourceRequest.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResourceRequest.cpp
@@ -65,25 +65,25 @@
     ASSERT(!m_initiatorElement);
     ASSERT(m_initiatorName.isEmpty());
     m_initiatorElement = &element;
 }
 
-void CachedResourceRequest::setInitiator(const AtomicString& name)
+void CachedResourceRequest::setInitiator(const AtomString& name)
 {
     ASSERT(!m_initiatorElement);
     ASSERT(m_initiatorName.isEmpty());
     m_initiatorName = name;
 }
 
-const AtomicString& CachedResourceRequest::initiatorName() const
+const AtomString& CachedResourceRequest::initiatorName() const
 {
     if (m_initiatorElement)
         return m_initiatorElement->localName();
     if (!m_initiatorName.isEmpty())
         return m_initiatorName;
 
-    static NeverDestroyed<AtomicString> defaultName("other", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> defaultName("other", AtomString::ConstructFromLiteral);
     return defaultName;
 }
 
 void CachedResourceRequest::deprecatedSetAsPotentiallyCrossOrigin(const String& mode, Document& document)
 {
@@ -224,13 +224,13 @@
         m_resourceRequest.setURL(url);
 }
 
 #if ENABLE(CONTENT_EXTENSIONS)
 
-void CachedResourceRequest::applyBlockedStatus(const ContentExtensions::BlockedStatus& blockedStatus, Page* page)
+void CachedResourceRequest::applyResults(ContentRuleListResults&& results, Page* page)
 {
-    ContentExtensions::applyBlockedStatusToRequest(blockedStatus, page, m_resourceRequest);
+    ContentExtensions::applyResultsToRequest(WTFMove(results), page, m_resourceRequest);
 }
 
 #endif
 
 void CachedResourceRequest::updateReferrerPolicy(ReferrerPolicy defaultPolicy)
