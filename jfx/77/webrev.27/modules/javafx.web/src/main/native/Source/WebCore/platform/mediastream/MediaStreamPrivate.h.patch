diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamPrivate.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamPrivate.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamPrivate.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamPrivate.h
@@ -1,10 +1,10 @@
 /*
  * Copyright (C) 2011, 2015 Ericsson AB. All rights reserved.
  * Copyright (C) 2012 Google Inc. All rights reserved.
  * Copyright (C) 2013 Nokia Corporation and/or its subsidiary(-ies).
- * Copyright (C) 2015 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  *
@@ -39,10 +39,11 @@
 #include "FloatSize.h"
 #include "MediaStreamTrack.h"
 #include "MediaStreamTrackPrivate.h"
 #include <wtf/Function.h>
 #include <wtf/HashMap.h>
+#include <wtf/LoggerHelper.h>
 #include <wtf/MediaTime.h>
 #include <wtf/RefCounted.h>
 #include <wtf/RefPtr.h>
 #include <wtf/UUID.h>
 #include <wtf/Vector.h>
@@ -51,11 +52,18 @@
 namespace WebCore {
 
 class MediaStream;
 class OrientationNotifier;
 
-class MediaStreamPrivate : public MediaStreamTrackPrivate::Observer, public RefCounted<MediaStreamPrivate>, public CanMakeWeakPtr<MediaStreamPrivate> {
+class MediaStreamPrivate final
+    : public MediaStreamTrackPrivate::Observer
+    , public RefCounted<MediaStreamPrivate>
+    , public CanMakeWeakPtr<MediaStreamPrivate>
+#if !RELEASE_LOG_DISABLED
+    , private LoggerHelper
+#endif
+{
 public:
     class Observer {
     public:
         virtual ~Observer() = default;
 
@@ -63,13 +71,13 @@
         virtual void activeStatusChanged() { }
         virtual void didAddTrack(MediaStreamTrackPrivate&) { }
         virtual void didRemoveTrack(MediaStreamTrackPrivate&) { }
     };
 
-    static Ref<MediaStreamPrivate> create(Ref<RealtimeMediaSource>&&);
-    static Ref<MediaStreamPrivate> create(const Vector<Ref<RealtimeMediaSource>>& audioSources, const Vector<Ref<RealtimeMediaSource>>& videoSources);
-    static Ref<MediaStreamPrivate> create(const MediaStreamTrackPrivateVector& tracks, String&& id = createCanonicalUUIDString()) { return adoptRef(*new MediaStreamPrivate(tracks, WTFMove(id))); }
+    static Ref<MediaStreamPrivate> create(Ref<const Logger>&&, Ref<RealtimeMediaSource>&&);
+    static Ref<MediaStreamPrivate> create(Ref<const Logger>&&, const Vector<Ref<RealtimeMediaSource>>& audioSources, const Vector<Ref<RealtimeMediaSource>>& videoSources);
+    static Ref<MediaStreamPrivate> create(Ref<const Logger>&& logger, const MediaStreamTrackPrivateVector& tracks, String&& id = createCanonicalUUIDString()) { return adoptRef(*new MediaStreamPrivate(WTFMove(logger), tracks, WTFMove(id))); }
 
     virtual ~MediaStreamPrivate();
 
     enum class NotifyClientOption { Notify, DontNotify };
 
@@ -95,18 +103,22 @@
     bool hasAudio() const;
     bool muted() const;
 
     bool hasCaptureVideoSource() const;
     bool hasCaptureAudioSource() const;
-    void setCaptureTracksMuted(bool);
 
     FloatSize intrinsicSize() const;
 
     void monitorOrientation(OrientationNotifier&);
 
+#if !RELEASE_LOG_DISABLED
+    const Logger& logger() const final { return m_logger; }
+    const void* logIdentifier() const final { return m_logIdentifier; }
+#endif
+
 private:
-    MediaStreamPrivate(const MediaStreamTrackPrivateVector&, String&&);
+    MediaStreamPrivate(Ref<const Logger>&&, const MediaStreamTrackPrivateVector&, String&&);
 
     // MediaStreamTrackPrivate::Observer
     void trackStarted(MediaStreamTrackPrivate&) override;
     void trackEnded(MediaStreamTrackPrivate&) override;
     void trackMutedChanged(MediaStreamTrackPrivate&) override;
@@ -117,15 +129,24 @@
     void updateActiveVideoTrack();
 
     void scheduleDeferredTask(Function<void ()>&&);
     void forEachObserver(const WTF::Function<void(Observer&)>&) const;
 
+#if !RELEASE_LOG_DISABLED
+    const char* logClassName() const final { return "MediaStreamPrivate"; }
+    WTFLogChannel& logChannel() const final;
+#endif
+
     HashSet<Observer*> m_observers;
     String m_id;
     MediaStreamTrackPrivate* m_activeVideoTrack { nullptr };
     HashMap<String, RefPtr<MediaStreamTrackPrivate>> m_trackSet;
     bool m_isActive { false };
+#if !RELEASE_LOG_DISABLED
+    Ref<const Logger> m_logger;
+    const void* m_logIdentifier;
+#endif
 };
 
 typedef Vector<RefPtr<MediaStreamPrivate>> MediaStreamPrivateVector;
 
 } // namespace WebCore
