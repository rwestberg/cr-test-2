diff a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasRenderingContext2DBase.h b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasRenderingContext2DBase.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasRenderingContext2DBase.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasRenderingContext2DBase.h
@@ -76,12 +76,13 @@
 #else
 using CanvasImageSource = Variant<RefPtr<HTMLImageElement>, RefPtr<HTMLCanvasElement>, RefPtr<ImageBitmap>>;
 #endif
 
 class CanvasRenderingContext2DBase : public CanvasRenderingContext, public CanvasPath {
+    WTF_MAKE_ISO_ALLOCATED(CanvasRenderingContext2DBase);
 public:
-    CanvasRenderingContext2DBase(CanvasBase&, bool usesCSSCompatibilityParseMode, bool usesDashboardCompatibilityMode);
+    CanvasRenderingContext2DBase(CanvasBase&, bool usesCSSCompatibilityParseMode);
     virtual ~CanvasRenderingContext2DBase();
 
     float lineWidth() const;
     void setLineWidth(float);
 
@@ -363,12 +364,10 @@
 
     void inflateStrokeRect(FloatRect&) const;
 
     template<class T> void fullCanvasCompositedDrawImage(T&, const FloatRect&, const FloatRect&, CompositeOperator);
 
-    void prepareGradientForDashboard(CanvasGradient&) const;
-
     ExceptionOr<RefPtr<ImageData>> getImageData(ImageBuffer::CoordinateSystem, float sx, float sy, float sw, float sh) const;
     void putImageData(ImageData&, ImageBuffer::CoordinateSystem, float dx, float dy, float dirtyX, float dirtyY, float dirtyWidth, float dirtyHeight);
 
     bool isAccelerated() const override;
 
@@ -376,19 +375,14 @@
 
 #if ENABLE(ACCELERATED_2D_CANVAS)
     PlatformLayer* platformLayer() const override;
 #endif
 
-    void clearPathForDashboardBackwardCompatibilityMode();
-
     static const unsigned MaxSaveCount = 1024 * 16;
     Vector<State, 1> m_stateStack;
     unsigned m_unrealizedSaveCount { 0 };
     bool m_usesCSSCompatibilityParseMode;
-#if ENABLE(DASHBOARD_SUPPORT)
-    bool m_usesDashboardCompatibilityMode;
-#endif
     bool m_usesDisplayListDrawing { false };
     bool m_tracksDisplayListReplay { false };
     mutable std::unique_ptr<struct DisplayListDrawingContext> m_recordingContext;
 };
 
