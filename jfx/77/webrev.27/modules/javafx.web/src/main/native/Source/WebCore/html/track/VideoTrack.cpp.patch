diff a/modules/javafx.web/src/main/native/Source/WebCore/html/track/VideoTrack.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/track/VideoTrack.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/track/VideoTrack.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/track/VideoTrack.cpp
@@ -42,43 +42,43 @@
 #include "SourceBuffer.h"
 #endif
 
 namespace WebCore {
 
-const AtomicString& VideoTrack::alternativeKeyword()
+const AtomString& VideoTrack::alternativeKeyword()
 {
-    static NeverDestroyed<const AtomicString> alternative("alternative", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> alternative("alternative", AtomString::ConstructFromLiteral);
     return alternative;
 }
 
-const AtomicString& VideoTrack::captionsKeyword()
+const AtomString& VideoTrack::captionsKeyword()
 {
-    static NeverDestroyed<const AtomicString> captions("captions", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> captions("captions", AtomString::ConstructFromLiteral);
     return captions;
 }
 
-const AtomicString& VideoTrack::mainKeyword()
+const AtomString& VideoTrack::mainKeyword()
 {
-    static NeverDestroyed<const AtomicString> captions("main", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> captions("main", AtomString::ConstructFromLiteral);
     return captions;
 }
 
-const AtomicString& VideoTrack::signKeyword()
+const AtomString& VideoTrack::signKeyword()
 {
-    static NeverDestroyed<const AtomicString> sign("sign", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> sign("sign", AtomString::ConstructFromLiteral);
     return sign;
 }
 
-const AtomicString& VideoTrack::subtitlesKeyword()
+const AtomString& VideoTrack::subtitlesKeyword()
 {
-    static NeverDestroyed<const AtomicString> subtitles("subtitles", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> subtitles("subtitles", AtomString::ConstructFromLiteral);
     return subtitles;
 }
 
-const AtomicString& VideoTrack::commentaryKeyword()
+const AtomString& VideoTrack::commentaryKeyword()
 {
-    static NeverDestroyed<const AtomicString> commentary("commentary", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> commentary("commentary", AtomString::ConstructFromLiteral);
     return commentary;
 }
 
 VideoTrack::VideoTrack(VideoTrackClient& client, VideoTrackPrivate& trackPrivate)
     : MediaTrackBase(MediaTrackBase::VideoTrack, trackPrivate.id(), trackPrivate.label(), trackPrivate.language())
@@ -112,11 +112,11 @@
 
     m_private->setSelected(m_selected);
     updateKindFromPrivate();
 }
 
-bool VideoTrack::isValidKind(const AtomicString& value) const
+bool VideoTrack::isValidKind(const AtomString& value) const
 {
     return value == alternativeKeyword()
         || value == commentaryKeyword()
         || value == captionsKeyword()
         || value == mainKeyword()
@@ -144,21 +144,21 @@
 void VideoTrack::selectedChanged(bool selected)
 {
     setSelected(selected);
 }
 
-void VideoTrack::idChanged(const AtomicString& id)
+void VideoTrack::idChanged(const AtomString& id)
 {
     setId(id);
 }
 
-void VideoTrack::labelChanged(const AtomicString& label)
+void VideoTrack::labelChanged(const AtomString& label)
 {
     setLabel(label);
 }
 
-void VideoTrack::languageChanged(const AtomicString& language)
+void VideoTrack::languageChanged(const AtomString& language)
 {
     setLanguage(language);
 }
 
 void VideoTrack::willRemove()
@@ -169,11 +169,11 @@
     element->removeVideoTrack(*this);
 }
 
 #if ENABLE(MEDIA_SOURCE)
 
-void VideoTrack::setKind(const AtomicString& kind)
+void VideoTrack::setKind(const AtomString& kind)
 {
     // 10.1 kind, on setting:
     // 1. If the value being assigned to this attribute does not match one of the video track kinds,
     // then abort these steps.
     if (!isValidKind(kind))
@@ -190,11 +190,11 @@
     // 4. Queue a task to fire a simple event named change at the VideoTrackList object referenced by
     // the videoTracks attribute on the HTMLMediaElement.
     mediaElement()->ensureVideoTracks().scheduleChangeEvent();
 }
 
-void VideoTrack::setLanguage(const AtomicString& language)
+void VideoTrack::setLanguage(const AtomString& language)
 {
     // 10.1 language, on setting:
     // 1. If the value being assigned to this attribute is not an empty string or a BCP 47 language
     // tag[BCP47], then abort these steps.
     // BCP 47 validation is done in TrackBase::setLanguage() which is
