diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLObjectElement.h b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLObjectElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLObjectElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLObjectElement.h
@@ -57,24 +57,24 @@
     HTMLFormElement* form() const final { return FormAssociatedElement::form(); }
 
 private:
     HTMLObjectElement(const QualifiedName&, Document&, HTMLFormElement*);
 
-    void parseAttribute(const QualifiedName&, const AtomicString&) final;
+    void parseAttribute(const QualifiedName&, const AtomString&) final;
     bool isPresentationAttribute(const QualifiedName&) const final;
-    void collectStyleForPresentationAttribute(const QualifiedName&, const AtomicString&, MutableStyleProperties&) final;
+    void collectStyleForPresentationAttribute(const QualifiedName&, const AtomString&, MutableStyleProperties&) final;
 
     InsertedIntoAncestorResult insertedIntoAncestor(InsertionType, ContainerNode&) final;
     void didFinishInsertingNode() final;
     void removedFromAncestor(RemovalType, ContainerNode&) final;
 
     void didMoveToNewDocument(Document& oldDocument, Document& newDocument) final;
 
     void childrenChanged(const ChildChange&) final;
 
     bool isURLAttribute(const Attribute&) const final;
-    const AtomicString& imageSourceURL() const final;
+    const AtomString& imageSourceURL() const final;
 
     RenderWidget* renderWidgetLoadingPlugin() const final;
 
     void addSubresourceAttributeURLs(ListHashSet<URL>&) const final;
 
@@ -83,20 +83,22 @@
 
     // FIXME: This function should not deal with url or serviceType
     // so that we can better share code between <object> and <embed>.
     void parametersForPlugin(Vector<String>& paramNames, Vector<String>& paramValues, String& url, String& serviceType);
 
-    bool shouldAllowQuickTimeClassIdQuirk();
     bool hasValidClassId();
 
     void refFormAssociatedElement() final { ref(); }
     void derefFormAssociatedElement() final { deref(); }
 
     FormNamedItem* asFormNamedItem() final { return this; }
+    FormAssociatedElement* asFormAssociatedElement() final { return this; }
     HTMLObjectElement& asHTMLElement() final { return *this; }
     const HTMLObjectElement& asHTMLElement() const final { return *this; }
 
+    bool isInteractiveContent() const final;
+
     bool isFormControlElement() const final { return false; }
 
     bool isEnumeratable() const final { return true; }
     bool appendFormData(DOMFormData&, bool) final;
 
