diff a/modules/javafx.web/src/main/native/Source/WebCore/page/RuntimeEnabledFeatures.h b/modules/javafx.web/src/main/native/Source/WebCore/page/RuntimeEnabledFeatures.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/RuntimeEnabledFeatures.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/RuntimeEnabledFeatures.h
@@ -31,10 +31,11 @@
 
 #pragma once
 
 #include <wtf/Forward.h>
 #include <wtf/Noncopyable.h>
+#include <wtf/Optional.h>
 
 namespace WebCore {
 
 // A class that stores static enablers for all experimental features. Note that
 // the method names must line up with the JavaScript method they enable for code
@@ -82,15 +83,10 @@
     bool menuItemElementEnabled() const { return m_isMenuItemElementEnabled; }
 
     void setDirectoryUploadEnabled(bool isEnabled) { m_isDirectoryUploadEnabled = isEnabled; }
     bool directoryUploadEnabled() const { return m_isDirectoryUploadEnabled; }
 
-#if ENABLE(DARK_MODE_CSS)
-    void setDarkModeCSSEnabled(bool isEnabled) { m_isDarkModeCSSEnabled = isEnabled; }
-    bool darkModeCSSEnabled() const { return m_isDarkModeCSSEnabled; }
-#endif
-
     void setDataTransferItemsEnabled(bool areEnabled) { m_areDataTransferItemsEnabled = areEnabled; }
     bool dataTransferItemsEnabled() const { return m_areDataTransferItemsEnabled; }
 
     void setCustomPasteboardDataEnabled(bool isEnabled) { m_isCustomPasteboardDataEnabled = isEnabled; }
     bool customPasteboardDataEnabled() const { return m_isCustomPasteboardDataEnabled; }
@@ -146,22 +142,25 @@
     bool ariaReflectionEnabled() const { return m_ariaReflectionEnabled; }
 
     void setItpDebugModeEnabled(bool isEnabled) { m_itpDebugMode = isEnabled; }
     bool itpDebugModeEnabled() const { return m_itpDebugMode; }
 
+    void setIsITPDatabaseEnabled(bool isEnabled) { m_isITPDatabaseEnabled = isEnabled; }
+    bool isITPDatabaseEnabled() const { return m_isITPDatabaseEnabled; }
+
+    void setIsITPSessionSwitchingEnabled(bool isEnabled) { m_isITPSessionSwitchingEnabled = isEnabled; }
+    bool isITPSessionSwitchingEnabled() const { return m_isITPSessionSwitchingEnabled; }
+
     void setRestrictedHTTPResponseAccess(bool isEnabled) { m_isRestrictedHTTPResponseAccess = isEnabled; }
     bool restrictedHTTPResponseAccess() const { return m_isRestrictedHTTPResponseAccess; }
 
     void setCrossOriginResourcePolicyEnabled(bool isEnabled) { m_crossOriginResourcePolicyEnabled = isEnabled; }
     bool crossOriginResourcePolicyEnabled() const { return m_crossOriginResourcePolicyEnabled; }
 
     void setWebGLCompressedTextureASTCSupportEnabled(bool isEnabled) { m_isWebGLCompressedTextureASTCSupportEnabled = isEnabled; }
     bool webGLCompressedTextureASTCSupportEnabled() const { return m_isWebGLCompressedTextureASTCSupportEnabled; }
 
-    void setStorageAccessPromptsEnabled(bool isEnabled)  { m_promptForStorageAccessAPIEnabled = isEnabled; }
-    bool storageAccessPromptsEnabled() const { return m_promptForStorageAccessAPIEnabled; }
-
     void setServerTimingEnabled(bool isEnabled) { m_isServerTimingEnabled = isEnabled; }
     bool serverTimingEnabled() const { return m_isServerTimingEnabled; }
 
     void setExperimentalPlugInSandboxProfilesEnabled(bool isEnabled) { m_experimentalPlugInSandboxProfilesEnabled = isEnabled; }
     bool experimentalPlugInSandboxProfilesEnabled() const { return m_experimentalPlugInSandboxProfilesEnabled; }
@@ -179,10 +178,13 @@
     bool cssCustomPropertiesAndValuesEnabled() const { return m_CSSCustomPropertiesAndValuesEnabled; }
 
     void setPointerEventsEnabled(bool isEnabled) { m_pointerEventsEnabled = isEnabled; }
     bool pointerEventsEnabled() const { return m_pointerEventsEnabled; }
 
+    void setSyntheticEditingCommandsEnabled(bool isEnabled) { m_syntheticEditingCommandsEnabled = isEnabled; }
+    bool syntheticEditingCommandsEnabled() const { return m_syntheticEditingCommandsEnabled; }
+
 #if ENABLE(LAYOUT_FORMATTING_CONTEXT)
     void setLayoutFormattingContextEnabled(bool isEnabled) { m_layoutFormattingContextEnabled = isEnabled; }
     bool layoutFormattingContextEnabled() const { return m_layoutFormattingContextEnabled; }
 #endif
 
@@ -197,10 +199,16 @@
 #endif
 
     void setWebSQLDisabled(bool isDisabled) { m_webSQLEnabled = !isDisabled; }
     bool webSQLEnabled() const { return m_webSQLEnabled; }
 
+    void setDialogElementEnabled(bool isEnabled) { m_dialogElementEnabled = isEnabled; }
+    bool dialogElementEnabled() const { return m_dialogElementEnabled; }
+
+    void setKeygenElementEnabled(bool isEnabled) { m_keygenElementEnabled = isEnabled; }
+    bool keygenElementEnabled() const { return m_keygenElementEnabled; }
+
 #if ENABLE(ATTACHMENT_ELEMENT)
     void setAttachmentElementEnabled(bool areEnabled) { m_isAttachmentElementEnabled = areEnabled; }
     bool attachmentElementEnabled() const { return m_isAttachmentElementEnabled; }
 #endif
 
@@ -219,10 +227,12 @@
     bool screenCaptureEnabled() const { return m_isScreenCaptureEnabled; }
     void setScreenCaptureEnabled(bool isEnabled) { m_isScreenCaptureEnabled = isEnabled; }
 #endif
 
 #if ENABLE(WEB_RTC)
+    bool webRTCDTMFEnabled() const { return m_isWebRTCDTMFEnabled; }
+    void setWebRTCDTMFEnabled(bool isEnabled) { m_isWebRTCDTMFEnabled = isEnabled; }
     bool webRTCVP8CodecEnabled() const { return m_isWebRTCVP8CodecEnabled; }
     void setWebRTCVP8CodecEnabled(bool isEnabled) { m_isWebRTCVP8CodecEnabled = isEnabled; }
     bool webRTCUnifiedPlanEnabled() const { return m_isWebRTCUnifiedPlanEnabled; }
     void setWebRTCUnifiedPlanEnabled(bool isEnabled) { m_isWebRTCUnifiedPlanEnabled = isEnabled; }
     bool peerConnectionEnabled() const { return m_isPeerConnectionEnabled; }
@@ -291,15 +301,10 @@
 #if ENABLE(WEBGPU)
     void setWebGPUEnabled(bool isEnabled) { m_isWebGPUEnabled = isEnabled; }
     bool webGPUEnabled() const { return m_isWebGPUEnabled; }
 #endif
 
-#if ENABLE(WEBMETAL)
-    void setWebMetalEnabled(bool isEnabled) { m_isWebMetalEnabled = isEnabled; }
-    bool webMetalEnabled() const { return m_isWebMetalEnabled; }
-#endif
-
 #if ENABLE(STREAMS_API)
     void setReadableByteStreamAPIEnabled(bool isEnabled) { m_isReadableByteStreamAPIEnabled = isEnabled; }
     bool readableByteStreamAPIEnabled() const { return m_isReadableByteStreamAPIEnabled; }
     void setWritableStreamAPIEnabled(bool isEnabled) { m_isWritableStreamAPIEnabled = isEnabled; }
     bool writableStreamAPIEnabled() const { return m_isWritableStreamAPIEnabled; }
@@ -341,13 +346,45 @@
     void setCSSLogicalEnabled(bool isEnabled) { m_CSSLogicalEnabled = isEnabled; }
     bool cssLogicalEnabled() const { return m_CSSLogicalEnabled; }
 
     bool adClickAttributionEnabled() const { return m_adClickAttributionEnabled; }
     void setAdClickAttributionEnabled(bool isEnabled) { m_adClickAttributionEnabled = isEnabled; }
+    bool adClickAttributionDebugModeEnabled() const { return m_adClickAttributionDebugModeEnabled; }
+    void setAdClickAttributionDebugModeEnabled(bool isEnabled) { m_adClickAttributionDebugModeEnabled = isEnabled; }
+
+#if ENABLE(TOUCH_EVENTS)
+    bool mouseEventsSimulationEnabled() const { return m_mouseEventsSimulationEnabled; }
+    void setMouseEventsSimulationEnabled(bool isEnabled) { m_mouseEventsSimulationEnabled = isEnabled; }
+    bool touchEventsEnabled() const;
+    void setTouchEventsEnabled(bool isEnabled) { m_touchEventsEnabled = isEnabled; }
+#endif
+
+    bool referrerPolicyAttributeEnabled() const { return m_referrerPolicyAttributeEnabled; }
+    void setReferrerPolicyAttributeEnabled(bool isEnabled) { m_referrerPolicyAttributeEnabled = isEnabled; }
+
+    bool pageAtRuleSupportEnabled() const { return m_pageAtRuleSupportEnabled; }
+    void setPageAtRuleSupportEnabled(bool isEnabled) { m_pageAtRuleSupportEnabled = isEnabled; }
+
+    bool interruptAudioOnPageVisibilityChangeEnabled() const { return m_interruptAudioOnPageVisibilityChangeEnabled; }
+    void setInterruptAudioOnPageVisibilityChangeEnabled(bool enabled) { m_interruptAudioOnPageVisibilityChangeEnabled = enabled; }
+
+    bool linkPreloadResponsiveImagesEnabled() const { return m_linkPreloadResponsiveImagesEnabled; }
+    void setLinkPreloadResponsiveImagesEnabled(bool isEnabled) { m_linkPreloadResponsiveImagesEnabled = isEnabled; }
+
+    void setLazyImageLoadingEnabled(bool areEnabled) { m_lazyImageLoadingEnabled = areEnabled; }
+    bool lazyImageLoadingEnabled() const { return m_lazyImageLoadingEnabled; }
 
     WEBCORE_EXPORT static RuntimeEnabledFeatures& sharedFeatures();
 
+#if HAVE(NSURLSESSION_WEBSOCKET)
+    bool isNSURLSessionWebSocketEnabled() const { return m_isNSURLSessionWebSocketEnabled; }
+    void setIsNSURLSessionWebSocketEnabled(bool isEnabled) { m_isNSURLSessionWebSocketEnabled = isEnabled; }
+#endif
+
+    bool secureContextChecksEnabled() const { return m_secureContextChecksEnabled; }
+    void setSecureContextChecksEnabled(bool isEnabled) { m_secureContextChecksEnabled = isEnabled; }
+
 private:
     // Never instantiate.
     RuntimeEnabledFeatures();
 
     bool m_blankAnchorTargetImpliesNoOpenerEnabled { true };
@@ -380,22 +417,26 @@
     bool m_inspectorAdditionsEnabled { false };
     bool m_webVREnabled { false };
     bool m_accessibilityObjectModelEnabled { false };
     bool m_ariaReflectionEnabled { true };
     bool m_itpDebugMode { false };
+    bool m_isITPSessionSwitchingEnabled { true };
     bool m_isRestrictedHTTPResponseAccess { true };
     bool m_crossOriginResourcePolicyEnabled { true };
     bool m_isWebGLCompressedTextureASTCSupportEnabled { false };
-    bool m_promptForStorageAccessAPIEnabled { false };
     bool m_isServerTimingEnabled { false };
     bool m_experimentalPlugInSandboxProfilesEnabled { false };
     bool m_disabledAdaptationsMetaTagEnabled { false };
     bool m_attrStyleEnabled { false };
     bool m_webAPIStatisticsEnabled { false };
     bool m_CSSCustomPropertiesAndValuesEnabled { false };
-    bool m_pointerEventsEnabled { false };
+    bool m_pointerEventsEnabled { true };
+    bool m_syntheticEditingCommandsEnabled { true };
+    bool m_dialogElementEnabled { false };
     bool m_webSQLEnabled { true };
+    bool m_keygenElementEnabled { false };
+    bool m_pageAtRuleSupportEnabled { false };
 
 #if ENABLE(LAYOUT_FORMATTING_CONTEXT)
     bool m_layoutFormattingContextEnabled { false };
 #endif
 
@@ -409,14 +450,10 @@
 
 #if ENABLE(ATTACHMENT_ELEMENT)
     bool m_isAttachmentElementEnabled { false };
 #endif
 
-#if ENABLE(DARK_MODE_CSS)
-    bool m_isDarkModeCSSEnabled { true };
-#endif
-
 #if ENABLE(INDEXED_DATABASE_IN_WORKERS)
     bool m_isIndexedDBWorkersEnabled { true };
 #endif
 
 #if ENABLE(MEDIA_STREAM)
@@ -425,10 +462,11 @@
     bool m_isMediaStreamEnabled { true };
     bool m_isScreenCaptureEnabled { false };
 #endif
 
 #if ENABLE(WEB_RTC)
+    bool m_isWebRTCDTMFEnabled { true };
     bool m_isWebRTCVP8CodecEnabled { true };
     bool m_isWebRTCUnifiedPlanEnabled { true };
     bool m_isPeerConnectionEnabled { true };
     bool m_isWebRTCMDNSICECandidatesEnabled { false };
     bool m_isWebRTCH264SimulcastEnabled { true };
@@ -485,24 +523,20 @@
 
 #if ENABLE(WEBGPU)
     bool m_isWebGPUEnabled { false };
 #endif
 
-#if ENABLE(WEBMETAL)
-    bool m_isWebMetalEnabled { false };
-#endif
-
 #if ENABLE(DOWNLOAD_ATTRIBUTE)
     bool m_isDownloadAttributeEnabled { false };
 #endif
 
 #if ENABLE(ENCRYPTED_MEDIA)
     bool m_encryptedMediaAPIEnabled { false };
 #endif
 
 #if ENABLE(LEGACY_ENCRYPTED_MEDIA)
-    bool m_legacyEncryptedMediaAPIEnabled { false };
+    bool m_legacyEncryptedMediaAPIEnabled { true };
 #endif
 
 #if ENABLE(INTERSECTION_OBSERVER)
     bool m_intersectionObserverEnabled { false };
 #endif
@@ -518,10 +552,30 @@
     bool m_undoManagerAPIEnabled { false };
 
     bool m_CSSLogicalEnabled { false };
 
     bool m_adClickAttributionEnabled { false };
+    bool m_adClickAttributionDebugModeEnabled { false };
+
+#if ENABLE(TOUCH_EVENTS)
+    bool m_mouseEventsSimulationEnabled { false };
+    Optional<bool> m_touchEventsEnabled;
+#endif
+
+    bool m_isITPDatabaseEnabled { false };
+
+    bool m_referrerPolicyAttributeEnabled { false };
+    bool m_interruptAudioOnPageVisibilityChangeEnabled { false };
+
+    bool m_linkPreloadResponsiveImagesEnabled { false };
+
+#if HAVE(NSURLSESSION_WEBSOCKET)
+    bool m_isNSURLSessionWebSocketEnabled { false };
+#endif
+
+    bool m_lazyImageLoadingEnabled { false };
+    bool m_secureContextChecksEnabled { true };
 
     friend class WTF::NeverDestroyed<RuntimeEnabledFeatures>;
 };
 
 } // namespace WebCore
