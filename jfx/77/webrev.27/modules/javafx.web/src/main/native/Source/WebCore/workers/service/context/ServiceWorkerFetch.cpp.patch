diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/context/ServiceWorkerFetch.cpp b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/context/ServiceWorkerFetch.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/context/ServiceWorkerFetch.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/context/ServiceWorkerFetch.cpp
@@ -31,21 +31,42 @@
 #include "CrossOriginAccessControl.h"
 #include "EventNames.h"
 #include "FetchEvent.h"
 #include "FetchRequest.h"
 #include "FetchResponse.h"
+#include "MIMETypeRegistry.h"
 #include "ReadableStreamChunk.h"
 #include "ResourceRequest.h"
 #include "ServiceWorker.h"
 #include "ServiceWorkerClientIdentifier.h"
+#include "ServiceWorkerGlobalScope.h"
 #include "WorkerGlobalScope.h"
 
 namespace WebCore {
 
 namespace ServiceWorkerFetch {
 
-static void processResponse(Ref<Client>&& client, Expected<Ref<FetchResponse>, ResourceError>&& result)
+// https://fetch.spec.whatwg.org/#http-fetch step 3.3
+static inline Optional<ResourceError> validateResponse(const ResourceResponse& response, FetchOptions::Mode mode, FetchOptions::Redirect redirect)
+{
+    if (response.type() == ResourceResponse::Type::Error)
+        return ResourceError { errorDomainWebKitInternal, 0, response.url(), "Response served by service worker is an error"_s, ResourceError::Type::General };
+
+    if (mode != FetchOptions::Mode::NoCors && response.tainting() == ResourceResponse::Tainting::Opaque)
+        return ResourceError { errorDomainWebKitInternal, 0, response.url(), "Response served by service worker is opaque"_s, ResourceError::Type::AccessControl };
+
+    // Navigate mode induces manual redirect.
+    if (redirect != FetchOptions::Redirect::Manual && mode != FetchOptions::Mode::Navigate && response.tainting() == ResourceResponse::Tainting::Opaqueredirect)
+        return ResourceError { errorDomainWebKitInternal, 0, response.url(), "Response served by service worker is opaque redirect"_s, ResourceError::Type::AccessControl };
+
+    if ((redirect != FetchOptions::Redirect::Follow || mode == FetchOptions::Mode::Navigate) && response.isRedirected())
+        return ResourceError { errorDomainWebKitInternal, 0, response.url(), "Response served by service worker has redirections"_s, ResourceError::Type::AccessControl };
+
+    return { };
+}
+
+static void processResponse(Ref<Client>&& client, Expected<Ref<FetchResponse>, ResourceError>&& result, FetchOptions::Mode mode, FetchOptions::Redirect redirect, const URL& requestURL)
 {
     if (!result.has_value()) {
         client->didFail(result.error());
         return;
     }
@@ -56,15 +77,35 @@
         client->didFail(loadingError);
         return;
     }
 
     auto resourceResponse = response->resourceResponse();
+    if (auto error = validateResponse(resourceResponse, mode, redirect)) {
+        client->didFail(error.value());
+        return;
+    }
+
     if (resourceResponse.isRedirection() && resourceResponse.httpHeaderFields().contains(HTTPHeaderName::Location)) {
         client->didReceiveRedirection(resourceResponse);
         return;
     }
 
+    resourceResponse.setSource(ResourceResponse::Source::ServiceWorker);
+
+    // In case of main resource and mime type is the default one, we set it to text/html to pass more service worker WPT tests.
+    // FIXME: We should refine our MIME type sniffing strategy for synthetic responses.
+    if (mode == FetchOptions::Mode::Navigate) {
+        if (resourceResponse.mimeType() == defaultMIMEType()) {
+            resourceResponse.setMimeType("text/html"_s);
+            resourceResponse.setTextEncodingName("UTF-8"_s);
+        }
+    }
+
+    // As per https://fetch.spec.whatwg.org/#main-fetch step 9, copy request's url list in response's url list if empty.
+    if (resourceResponse.url().isNull())
+        resourceResponse.setURL(requestURL);
+
     client->didReceiveResponse(resourceResponse);
 
     if (response->isBodyReceivedByChunk()) {
         response->consumeBodyReceivedByChunk([client = WTFMove(client)] (auto&& result) mutable {
             if (result.hasException()) {
@@ -93,21 +134,24 @@
 
 void dispatchFetchEvent(Ref<Client>&& client, ServiceWorkerGlobalScope& globalScope, Optional<ServiceWorkerClientIdentifier> clientId, ResourceRequest&& request, String&& referrer, FetchOptions&& options)
 {
     auto requestHeaders = FetchHeaders::create(FetchHeaders::Guard::Immutable, HTTPHeaderMap { request.httpHeaderFields() });
 
+    FetchOptions::Mode mode = options.mode;
+    FetchOptions::Redirect redirect = options.redirect;
+
     bool isNavigation = options.mode == FetchOptions::Mode::Navigate;
     bool isNonSubresourceRequest = WebCore::isNonSubresourceRequest(options.destination);
 
     ASSERT(globalScope.registration().active());
     ASSERT(globalScope.registration().active()->identifier() == globalScope.thread().identifier());
     ASSERT(globalScope.registration().active()->state() == ServiceWorkerState::Activated);
 
     auto* formData = request.httpBody();
     Optional<FetchBody> body;
     if (formData && !formData->isEmpty()) {
-        body = FetchBody::fromFormData(*formData);
+        body = FetchBody::fromFormData(globalScope.sessionID(), *formData);
         if (!body) {
             client->didNotHandle();
             return;
         }
     }
@@ -127,12 +171,12 @@
     } else if (clientId)
         init.clientId = clientId->toString();
     init.cancelable = true;
     auto event = FetchEvent::create(eventNames().fetchEvent, WTFMove(init), Event::IsTrusted::Yes);
 
-    event->onResponse([client = client.copyRef()] (auto&& result) mutable {
-        processResponse(WTFMove(client), WTFMove(result));
+    event->onResponse([client = client.copyRef(), mode, redirect, requestURL] (auto&& result) mutable {
+        processResponse(WTFMove(client), WTFMove(result), mode, redirect, requestURL);
     });
 
     globalScope.dispatchEvent(event);
 
     if (!event->respondWithEntered()) {
