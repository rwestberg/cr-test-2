diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResourceRequest.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResourceRequest.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResourceRequest.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResourceRequest.h
@@ -31,18 +31,15 @@
 #include "ResourceLoaderOptions.h"
 #include "ResourceRequest.h"
 #include "SecurityOrigin.h"
 #include "ServiceWorkerIdentifier.h"
 #include <wtf/RefPtr.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
-namespace ContentExtensions {
-struct BlockedStatus;
-}
-
+struct ContentRuleListResults;
 class Document;
 class FrameLoader;
 struct ServiceWorkerRegistrationData;
 enum class ReferrerPolicy : uint8_t;
 
@@ -64,12 +61,12 @@
 
     const Optional<ResourceLoadPriority>& priority() const { return m_priority; }
     void setPriority(Optional<ResourceLoadPriority>&& priority) { m_priority = WTFMove(priority); }
 
     void setInitiator(Element&);
-    void setInitiator(const AtomicString& name);
-    const AtomicString& initiatorName() const;
+    void setInitiator(const AtomString& name);
+    const AtomString& initiatorName() const;
 
     bool allowsCaching() const { return m_options.cachingPolicy == CachingPolicy::AllowCaching; }
     void setCachingPolicy(CachingPolicy policy) { m_options.cachingPolicy = policy;  }
 
     // Whether this request should impact request counting and delay window.onload.
@@ -89,11 +86,11 @@
     void updateAccordingCacheMode();
     void updateAcceptEncodingHeader();
 
     void removeFragmentIdentifierIfNeeded();
 #if ENABLE(CONTENT_EXTENSIONS)
-    void applyBlockedStatus(const ContentExtensions::BlockedStatus&, Page*);
+    void applyResults(ContentRuleListResults&&, Page*);
 #endif
     void setDomainForCachePartition(Document&);
     void setDomainForCachePartition(const String&);
     bool isLinkPreload() const { return m_isLinkPreload; }
     void setIsLinkPreload() { m_isLinkPreload = true; }
@@ -117,11 +114,11 @@
     ResourceRequest m_resourceRequest;
     String m_charset;
     ResourceLoaderOptions m_options;
     Optional<ResourceLoadPriority> m_priority;
     RefPtr<Element> m_initiatorElement;
-    AtomicString m_initiatorName;
+    AtomString m_initiatorName;
     RefPtr<SecurityOrigin> m_origin;
     String m_fragmentIdentifier;
     bool m_isLinkPreload { false };
     bool m_ignoreForRequestCount { false };
 };
