diff a/modules/javafx.web/src/main/native/Source/WebCore/testing/MockLibWebRTCPeerConnection.cpp b/modules/javafx.web/src/main/native/Source/WebCore/testing/MockLibWebRTCPeerConnection.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/testing/MockLibWebRTCPeerConnection.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/testing/MockLibWebRTCPeerConnection.cpp
@@ -69,12 +69,20 @@
     provider->setPeerConnectionFactory(MockLibWebRTCPeerConnectionFactory::create(testCase));
 }
 
 MockLibWebRTCPeerConnection::~MockLibWebRTCPeerConnection()
 {
-    // Free senders in a different thread like an actual peer connection would probably do.
-    Thread::create("MockLibWebRTCPeerConnection thread", [senders = WTFMove(m_senders)] { });
+    // Free senders and receivers in a different thread like an actual peer connection would probably do.
+    Thread::create("MockLibWebRTCPeerConnection thread", [transceivers = WTFMove(m_transceivers)] { });
+}
+
+std::vector<rtc::scoped_refptr<webrtc::RtpTransceiverInterface>> MockLibWebRTCPeerConnection::GetTransceivers() const
+{
+    std::vector<rtc::scoped_refptr<webrtc::RtpTransceiverInterface>> transceivers;
+    for (auto transceiver : m_transceivers)
+        transceivers.push_back(transceiver);
+    return transceivers;
 }
 
 class MockLibWebRTCPeerConnectionForIceCandidates : public MockLibWebRTCPeerConnection {
 public:
     explicit MockLibWebRTCPeerConnectionForIceCandidates(webrtc::PeerConnectionObserver& observer) : MockLibWebRTCPeerConnection(observer) { }
@@ -162,11 +170,15 @@
 public:
     explicit MockLibWebRTCPeerConnectionReleasedInNetworkThreadWhileSettingDescription(webrtc::PeerConnectionObserver& observer) : MockLibWebRTCPeerConnection(observer) { }
     virtual ~MockLibWebRTCPeerConnectionReleasedInNetworkThreadWhileSettingDescription() = default;
 
 private:
-    void SetLocalDescription(webrtc::SetSessionDescriptionObserver* observer, webrtc::SessionDescriptionInterface*) final { releaseInNetworkThread(*this, *observer); }
+    void SetLocalDescription(webrtc::SetSessionDescriptionObserver* observer, webrtc::SessionDescriptionInterface* sessionDescription) final
+    {
+        std::unique_ptr<webrtc::SessionDescriptionInterface> toBeFreed(sessionDescription);
+        releaseInNetworkThread(*this, *observer);
+    }
 };
 
 MockLibWebRTCPeerConnectionFactory::MockLibWebRTCPeerConnectionFactory(const String& testCase)
     : m_testCase(testCase.isolatedCopy())
 {
@@ -205,20 +217,22 @@
 rtc::scoped_refptr<webrtc::MediaStreamInterface> MockLibWebRTCPeerConnectionFactory::CreateLocalMediaStream(const std::string& label)
 {
     return new rtc::RefCountedObject<webrtc::MediaStream>(label);
 }
 
-void MockLibWebRTCPeerConnection::SetLocalDescription(webrtc::SetSessionDescriptionObserver* observer, webrtc::SessionDescriptionInterface*)
+void MockLibWebRTCPeerConnection::SetLocalDescription(webrtc::SetSessionDescriptionObserver* observer, webrtc::SessionDescriptionInterface* sessionDescription)
 {
+    std::unique_ptr<webrtc::SessionDescriptionInterface> toBeFreed(sessionDescription);
     LibWebRTCProvider::callOnWebRTCSignalingThread([this, observer] {
         observer->OnSuccess();
         gotLocalDescription();
     });
 }
 
 void MockLibWebRTCPeerConnection::SetRemoteDescription(webrtc::SetSessionDescriptionObserver* observer, webrtc::SessionDescriptionInterface* sessionDescription)
 {
+    std::unique_ptr<webrtc::SessionDescriptionInterface> toBeFreed(sessionDescription);
     LibWebRTCProvider::callOnWebRTCSignalingThread([observer] {
         observer->OnSuccess();
     });
     ASSERT(sessionDescription);
     if (sessionDescription->type() == "offer") {
@@ -246,22 +260,26 @@
     });
 
     if (!streamIds.empty())
         m_streamLabel = streamIds.front();
 
-    m_senders.append(new rtc::RefCountedObject<MockRtpSender>(WTFMove(track)));
-    return rtc::scoped_refptr<webrtc::RtpSenderInterface>(m_senders.last().get());
+    rtc::scoped_refptr<webrtc::RtpSenderInterface> sender = new rtc::RefCountedObject<MockRtpSender>(WTFMove(track));
+    rtc::scoped_refptr<webrtc::RtpReceiverInterface> receiver = new rtc::RefCountedObject<MockRtpReceiver>();
+    rtc::scoped_refptr<MockRtpTransceiver> transceiver = new rtc::RefCountedObject<MockRtpTransceiver>(WTFMove(sender), WTFMove(receiver));
+
+    m_transceivers.append(WTFMove(transceiver));
+    return rtc::scoped_refptr<webrtc::RtpSenderInterface>(m_transceivers.last()->sender());
 }
 
 bool MockLibWebRTCPeerConnection::RemoveTrack(webrtc::RtpSenderInterface* sender)
 {
     LibWebRTCProvider::callOnWebRTCSignalingThread([observer = &m_observer] {
         observer->OnRenegotiationNeeded();
     });
     bool isRemoved = false;
-    return m_senders.removeFirstMatching([&](auto& item) {
-        if (item.get() != sender)
+    return m_transceivers.removeFirstMatching([&](auto& transceiver) {
+        if (transceiver->sender().get() != sender)
             return false;
         isRemoved = true;
         return true;
     });
 }
@@ -273,15 +291,15 @@
         sdp <<
             "v=0\r\n"
             "o=- 5667094644266930845 " << m_counter++ << " IN IP4 127.0.0.1\r\n"
             "s=-\r\n"
             "t=0 0\r\n";
-        if (m_senders.size()) {
+        if (m_transceivers.size()) {
             unsigned partCounter = 1;
             sdp << "a=msid-semantic:WMS " << m_streamLabel << "\r\n";
-            for (auto& sender : m_senders) {
-                auto track = sender->track();
+            for (auto& transceiver : m_transceivers) {
+                auto track = transceiver->sender()->track();
                 if (track->kind() != "audio")
                     continue;
                 sdp <<
                     "m=audio 9 UDP/TLS/RTP/SAVPF 111 8 0\r\n"
                     "c=IN IP4 0.0.0.0\r\n"
@@ -296,12 +314,12 @@
                     "a=ice-ufrag:e/B1\r\n"
                     "a=ice-pwd:Yotk3Im3mnyi+1Q38p51MDub\r\n"
                     "a=fingerprint:sha-256 8B:87:09:8A:5D:C2:F3:33:EF:C5:B1:F6:84:3A:3D:D6:A3:E2:9C:17:4C:E7:46:3B:1B:CE:84:98:DD:8E:AF:7B\r\n"
                     "a=setup:actpass\r\n";
             }
-            for (auto& sender : m_senders) {
-                auto track = sender->track();
+            for (auto& transceiver : m_transceivers) {
+                auto track = transceiver->sender()->track();
                 if (track->kind() != "video")
                     continue;
                 sdp <<
                     "m=video 9 UDP/TLS/RTP/SAVPF 103 100 120\r\n"
                     "c=IN IP4 0.0.0.0\r\n"
@@ -337,13 +355,13 @@
         sdp <<
             "v=0\r\n"
             "o=- 5667094644266930846 " << m_counter++ << " IN IP4 127.0.0.1\r\n"
             "s=-\r\n"
             "t=0 0\r\n";
-        if (m_senders.size()) {
-            for (auto& sender : m_senders) {
-                auto track = sender->track();
+        if (m_transceivers.size()) {
+            for (auto& transceiver : m_transceivers) {
+                auto track = transceiver->sender()->track();
                 if (track->kind() != "audio")
                     continue;
                 sdp <<
                     "m=audio 9 UDP/TLS/RTP/SAVPF 111 8 0\r\n"
                     "c=IN IP4 0.0.0.0\r\n"
@@ -357,12 +375,12 @@
                     "a=ice-ufrag:e/B1\r\n"
                     "a=ice-pwd:Yotk3Im3mnyi+1Q38p51MDub\r\n"
                     "a=fingerprint:sha-256 8B:87:09:8A:5D:C2:F3:33:EF:C5:B1:F6:84:3A:3D:D6:A3:E2:9C:17:4C:E7:46:3B:1B:CE:84:98:DD:8E:AF:7B\r\n"
                     "a=setup:active\r\n";
             }
-            for (auto& sender : m_senders) {
-                auto track = sender->track();
+            for (auto& transceiver : m_transceivers) {
+                auto track = transceiver->sender()->track();
                 if (track->kind() != "video")
                     continue;
                 sdp <<
                     "m=video 9 UDP/TLS/RTP/SAVPF 103 100 120\r\n"
                     "c=IN IP4 0.0.0.0\r\n"
