diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/modern-media-controls/controls/ios-inline-media-controls.js b/modules/javafx.web/src/main/native/Source/WebCore/Modules/modern-media-controls/controls/ios-inline-media-controls.js
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/modern-media-controls/controls/ios-inline-media-controls.js
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/modern-media-controls/controls/ios-inline-media-controls.js
@@ -32,11 +32,11 @@
 
         super(options);
 
         this.element.classList.add("ios");
 
-        this._pinchGestureRecognizer = new PinchGestureRecognizer(this.element, this);
+        this._updateGestureRecognizers();
     }
 
     // Public
 
     get showsStartButton()
@@ -45,15 +45,22 @@
     }
 
     set showsStartButton(flag)
     {
         super.showsStartButton = flag;
+        this._updateGestureRecognizers();
+    }
 
-        if (!flag)
-            delete this._tapGestureRecognizer;
-        else if (!this._tapGestureRecognizer)
-            this._tapGestureRecognizer = new TapGestureRecognizer(this.element, this);
+    get visible()
+    {
+        return super.visible;
+    }
+
+    set visible(flag)
+    {
+        super.visible = flag;
+        this._updateGestureRecognizers();
     }
 
     // Protected
 
     gestureRecognizerStateDidChange(recognizer)
@@ -64,22 +71,43 @@
             this._tapGestureRecognizerStateDidChange(recognizer);
     }
 
     // Private
 
+    _updateGestureRecognizers()
+    {
+        const shouldListenToPinches = this.visible;
+        const shouldListenToTaps = this.visible && this.showsStartButton;
+
+        if (shouldListenToPinches && !this._pinchGestureRecognizer)
+            this._pinchGestureRecognizer = new PinchGestureRecognizer(this.element, this);
+        else if (!shouldListenToPinches && this._pinchGestureRecognizer) {
+            this._pinchGestureRecognizer.enabled = false;
+            delete this._pinchGestureRecognizer;
+        }
+
+        if (shouldListenToTaps && !this._tapGestureRecognizer)
+            this._tapGestureRecognizer = new TapGestureRecognizer(this.element, this);
+        else if (!shouldListenToTaps && this._tapGestureRecognizer) {
+            this._tapGestureRecognizer.enabled = false;
+            delete this._tapGestureRecognizer;
+        }
+    }
+
     _pinchGestureRecognizerStateDidChange(recognizer)
     {
+        console.assert(this.visible);
         if (recognizer.state !== GestureRecognizer.States.Ended && recognizer.state !== GestureRecognizer.States.Changed)
             return;
 
         if (recognizer.scale > IOSInlineMediaControls.MinimumScaleToEnterFullscreen && this.delegate && typeof this.delegate.iOSInlineMediaControlsRecognizedPinchInGesture === "function")
             this.delegate.iOSInlineMediaControlsRecognizedPinchInGesture();
     }
 
     _tapGestureRecognizerStateDidChange(recognizer)
     {
-        console.assert(this.showsStartButton);
+        console.assert(this.visible && this.showsStartButton);
         if (recognizer.state === GestureRecognizer.States.Recognized && this.delegate && typeof this.delegate.iOSInlineMediaControlsRecognizedTapGesture === "function")
             this.delegate.iOSInlineMediaControlsRecognizedTapGesture();
     }
 
 }
