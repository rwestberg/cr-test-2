diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IntlObject.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IntlObject.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IntlObject.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IntlObject.cpp
@@ -1,9 +1,9 @@
 /*
  * Copyright (C) 2015 Andy VanWagoner (andy@vanwagoner.family)
  * Copyright (C) 2015 Sukolsak Sakshuwong (sukolsak@gmail.com)
- * Copyright (C) 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -97,10 +97,11 @@
 @begin intlObjectTable
   getCanonicalLocales   intlObjectFuncGetCanonicalLocales            DontEnum|Function 1
   Collator              createCollatorConstructor                    DontEnum|PropertyCallback
   DateTimeFormat        createDateTimeFormatConstructor              DontEnum|PropertyCallback
   NumberFormat          createNumberFormatConstructor                DontEnum|PropertyCallback
+  PluralRules           createPluralRulesConstructor                 DontEnum|PropertyCallback
 @end
 */
 
 struct MatcherResult {
     String locale;
@@ -120,21 +121,10 @@
     IntlObject* object = new (NotNull, allocateCell<IntlObject>(vm.heap)) IntlObject(vm, structure);
     object->finishCreation(vm);
     return object;
 }
 
-void IntlObject::finishCreation(VM& vm)
-{
-    Base::finishCreation(vm);
-    ASSERT(inherits(vm, info()));
-
-    // Constructor Properties of the Intl Object
-    // https://tc39.github.io/ecma402/#sec-constructor-properties-of-the-intl-object
-    if (Options::useIntlPluralRules())
-        putDirectWithoutTransition(vm, vm.propertyNames->PluralRules, createPluralRulesConstructor(vm, this), static_cast<unsigned>(PropertyAttribute::DontEnum));
-}
-
 Structure* IntlObject::createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
 {
     return Structure::create(vm, globalObject, prototype, TypeInfo(ObjectType, StructureFlags), info());
 }
 
@@ -557,13 +547,16 @@
             }
 
             JSString* tag = kValue.toString(&state);
             RETURN_IF_EXCEPTION(scope, Vector<String>());
 
-            String canonicalizedTag = canonicalizeLanguageTag(tag->value(&state));
+            auto tagValue = tag->value(&state);
+            RETURN_IF_EXCEPTION(scope, Vector<String>());
+
+            String canonicalizedTag = canonicalizeLanguageTag(tagValue);
             if (canonicalizedTag.isNull()) {
-                throwException(&state, scope, createRangeError(&state, "invalid language tag: " + tag->value(&state)));
+                throwException(&state, scope, createRangeError(&state, "invalid language tag: " + tagValue));
                 return Vector<String>();
             }
 
             if (seenSet.add(canonicalizedTag).isNewEntry)
                 seen.append(canonicalizedTag);
@@ -827,11 +820,11 @@
     for (size_t k = 0; k < len; ++k) {
         const String& locale = requestedLocales[k];
         String noExtensionsLocale = removeUnicodeLocaleExtension(locale);
         String availableLocale = bestAvailableLocale(availableLocales, noExtensionsLocale);
         if (!availableLocale.isNull()) {
-            subset->putDirectIndex(&state, index++, jsString(&state, locale));
+            subset->putDirectIndex(&state, index++, jsString(vm, locale));
             RETURN_IF_EXCEPTION(scope, nullptr);
         }
     }
 
     return subset;
@@ -864,11 +857,11 @@
     JSArray* supportedLocales = (matcher == "best fit")
         ? bestFitSupportedLocales(state, availableLocales, requestedLocales)
         : lookupSupportedLocales(state, availableLocales, requestedLocales);
     RETURN_IF_EXCEPTION(scope, JSValue());
 
-    PropertyNameArray keys(&vm, PropertyNameMode::Strings, PrivateSymbolMode::Exclude);
+    PropertyNameArray keys(vm, PropertyNameMode::Strings, PrivateSymbolMode::Exclude);
     supportedLocales->getOwnPropertyNames(supportedLocales, &state, keys, EnumerationMode());
     RETURN_IF_EXCEPTION(scope, JSValue());
 
     PropertyDescriptor desc;
     desc.setConfigurable(false);
@@ -942,11 +935,11 @@
         throwOutOfMemoryError(state, scope);
         return encodedJSValue();
     }
 
     for (size_t i = 0; i < length; ++i) {
-        localeArray->putDirectIndex(state, i, jsString(state, localeList[i]));
+        localeArray->putDirectIndex(state, i, jsString(vm, localeList[i]));
         RETURN_IF_EXCEPTION(scope, encodedJSValue());
     }
     return JSValue::encode(localeArray);
 }
 
