diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/Attr.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/Attr.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/Attr.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/Attr.cpp
@@ -29,11 +29,11 @@
 #include "StyleProperties.h"
 #include "StyledElement.h"
 #include "TextNodeTraversal.h"
 #include "XMLNSNames.h"
 #include <wtf/IsoMallocInlines.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
 WTF_MAKE_ISO_ALLOCATED_IMPL(Attr);
 
@@ -44,11 +44,11 @@
     , m_element(&element)
     , m_name(name)
 {
 }
 
-Attr::Attr(Document& document, const QualifiedName& name, const AtomicString& standaloneValue)
+Attr::Attr(Document& document, const QualifiedName& name, const AtomString& standaloneValue)
     : Node(document, CreateOther)
     , m_name(name)
     , m_standaloneValue(standaloneValue)
 {
 }
@@ -56,39 +56,39 @@
 Ref<Attr> Attr::create(Element& element, const QualifiedName& name)
 {
     return adoptRef(*new Attr(element, name));
 }
 
-Ref<Attr> Attr::create(Document& document, const QualifiedName& name, const AtomicString& value)
+Ref<Attr> Attr::create(Document& document, const QualifiedName& name, const AtomString& value)
 {
     return adoptRef(*new Attr(document, name, value));
 }
 
 Attr::~Attr()
 {
     ASSERT_WITH_SECURITY_IMPLICATION(!isInShadowTree());
     ASSERT_WITH_SECURITY_IMPLICATION(treeScope().rootNode().isDocumentNode());
 }
 
-ExceptionOr<void> Attr::setPrefix(const AtomicString& prefix)
+ExceptionOr<void> Attr::setPrefix(const AtomString& prefix)
 {
     auto result = checkSetPrefix(prefix);
     if (result.hasException())
         return result.releaseException();
 
     if ((prefix == xmlnsAtom() && namespaceURI() != XMLNSNames::xmlnsNamespaceURI) || qualifiedName() == xmlnsAtom())
         return Exception { NamespaceError };
 
-    const AtomicString& newPrefix = prefix.isEmpty() ? nullAtom() : prefix;
+    const AtomString& newPrefix = prefix.isEmpty() ? nullAtom() : prefix;
     if (m_element)
         elementAttribute().setPrefix(newPrefix);
     m_name.setPrefix(newPrefix);
 
     return { };
 }
 
-void Attr::setValue(const AtomicString& value)
+void Attr::setValue(const AtomString& value)
 {
     if (m_element)
         m_element->setAttribute(qualifiedName(), value);
     else
         m_standaloneValue = value;
@@ -114,11 +114,11 @@
     m_style = MutableStyleProperties::create();
     downcast<StyledElement>(*m_element).collectStyleForPresentationAttribute(qualifiedName(), value(), *m_style);
     return &m_style->ensureCSSStyleDeclaration();
 }
 
-const AtomicString& Attr::value() const
+const AtomString& Attr::value() const
 {
     if (m_element)
         return m_element->getAttribute(qualifiedName());
     return m_standaloneValue;
 }
@@ -128,11 +128,11 @@
     ASSERT(m_element);
     ASSERT(m_element->elementData());
     return *m_element->ensureUniqueElementData().findAttributeByName(qualifiedName());
 }
 
-void Attr::detachFromElementWithValue(const AtomicString& value)
+void Attr::detachFromElementWithValue(const AtomString& value)
 {
     ASSERT(m_element);
     ASSERT(m_standaloneValue.isNull());
     m_standaloneValue = value;
     m_element = nullptr;
