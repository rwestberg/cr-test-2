diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/CallTracer.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/CallTracer.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/CallTracer.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/CallTracer.cpp
@@ -30,17 +30,17 @@
 #include "HTMLCanvasElement.h"
 #include "InspectorInstrumentation.h"
 
 namespace WebCore {
 
-void CallTracer::recordCanvasAction(const HTMLCanvasElement& canvasElement, const String& name, Vector<RecordCanvasActionVariant>&& parameters)
+void CallTracer::recordCanvasAction(const HTMLCanvasElement& canvasElement, const String& name, std::initializer_list<RecordCanvasActionVariant>&& parameters)
 {
     if (auto* canvasRenderingContext = canvasElement.renderingContext())
         InspectorInstrumentation::recordCanvasAction(*canvasRenderingContext, name, WTFMove(parameters));
 }
 
-void CallTracer::recordCanvasAction(CanvasRenderingContext& canvasRenderingContext, const String& name, Vector<RecordCanvasActionVariant>&& parameters)
+void CallTracer::recordCanvasAction(CanvasRenderingContext& canvasRenderingContext, const String& name, std::initializer_list<RecordCanvasActionVariant>&& parameters)
 {
     InspectorInstrumentation::recordCanvasAction(canvasRenderingContext, name, WTFMove(parameters));
 }
 
 } // namespace WebCore
