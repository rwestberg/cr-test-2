diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediacapabilities/MediaEngineConfigurationFactory.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediacapabilities/MediaEngineConfigurationFactory.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediacapabilities/MediaEngineConfigurationFactory.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediacapabilities/MediaEngineConfigurationFactory.cpp
@@ -26,14 +26,16 @@
  */
 
 #include "config.h"
 #include "MediaEngineConfigurationFactory.h"
 
-#include "MediaCapabilitiesInfo.h"
+#include "MediaCapabilitiesDecodingInfo.h"
+#include "MediaCapabilitiesEncodingInfo.h"
 #include "MediaDecodingConfiguration.h"
 #include "MediaEncodingConfiguration.h"
 #include "MediaEngineConfigurationFactoryMock.h"
+#include <wtf/Algorithms.h>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/Vector.h>
 
 #if PLATFORM(COCOA)
 #include "MediaEngineConfigurationFactoryCocoa.h"
@@ -50,12 +52,12 @@
     static bool enabled;
     return enabled;
 }
 
 struct MediaEngineFactory {
-    void(*createDecodingConfiguration)(MediaDecodingConfiguration&, MediaEngineConfigurationFactory::DecodingConfigurationCallback&&);
-    void(*createEncodingConfiguration)(MediaEncodingConfiguration&, MediaEngineConfigurationFactory::EncodingConfigurationCallback&&);
+    void(*createDecodingConfiguration)(MediaDecodingConfiguration&&, MediaEngineConfigurationFactory::DecodingConfigurationCallback&&);
+    void(*createEncodingConfiguration)(MediaEncodingConfiguration&&, MediaEngineConfigurationFactory::EncodingConfigurationCallback&&);
 };
 
 using FactoryVector = Vector<MediaEngineFactory>;
 static const FactoryVector& factories()
 {
@@ -68,49 +70,59 @@
 #endif
     }));
     return factories;
 }
 
+bool MediaEngineConfigurationFactory::hasDecodingConfigurationFactory()
+{
+    return mockEnabled() || WTF::anyOf(factories(), [] (auto& factory) { return factory.createDecodingConfiguration; });
+}
+
+bool MediaEngineConfigurationFactory::hasEncodingConfigurationFactory()
+{
+    return mockEnabled() || WTF::anyOf(factories(), [] (auto& factory) { return factory.createEncodingConfiguration; });
+}
+
 void MediaEngineConfigurationFactory::createDecodingConfiguration(MediaDecodingConfiguration&& config, MediaEngineConfigurationFactory::DecodingConfigurationCallback&& callback)
 {
     if (mockEnabled()) {
-        MediaEngineConfigurationFactoryMock::createDecodingConfiguration(config, WTFMove(callback));
+        MediaEngineConfigurationFactoryMock::createDecodingConfiguration(WTFMove(config), WTFMove(callback));
         return;
     }
 
-    auto factoryCallback = [] (auto factoryCallback, auto nextFactory, auto config, auto&& callback) mutable {
+    auto factoryCallback = [] (auto factoryCallback, auto nextFactory, auto&& config, auto&& callback) mutable {
         if (nextFactory == factories().end()) {
-            callback({ });
+            callback({{ }, WTFMove(config)});
             return;
         }
 
         auto& factory = *nextFactory;
         if (!factory.createDecodingConfiguration) {
-            callback({ });
+            callback({{ }, WTFMove(config)});
             return;
         }
 
-        factory.createDecodingConfiguration(config, [factoryCallback, nextFactory, config, callback = WTFMove(callback)] (auto&& info) mutable {
+        factory.createDecodingConfiguration(WTFMove(config), [factoryCallback, nextFactory, config, callback = WTFMove(callback)] (auto&& info) mutable {
             if (info.supported) {
                 callback(WTFMove(info));
                 return;
             }
 
-            factoryCallback(factoryCallback, ++nextFactory, config, WTFMove(callback));
+            factoryCallback(factoryCallback, ++nextFactory, WTFMove(info.supportedConfiguration), WTFMove(callback));
         });
     };
     factoryCallback(factoryCallback, factories().begin(), config, WTFMove(callback));
 }
 
 void MediaEngineConfigurationFactory::createEncodingConfiguration(MediaEncodingConfiguration&& config, MediaEngineConfigurationFactory::EncodingConfigurationCallback&& callback)
 {
     if (mockEnabled()) {
-        MediaEngineConfigurationFactoryMock::createEncodingConfiguration(config, WTFMove(callback));
+        MediaEngineConfigurationFactoryMock::createEncodingConfiguration(WTFMove(config), WTFMove(callback));
         return;
     }
 
-    auto factoryCallback = [] (auto factoryCallback, auto nextFactory, auto config, auto&& callback) mutable {
+    auto factoryCallback = [] (auto factoryCallback, auto nextFactory, auto&& config, auto&& callback) mutable {
         if (nextFactory == factories().end()) {
             callback({ });
             return;
         }
 
@@ -118,20 +130,20 @@
         if (!factory.createEncodingConfiguration) {
             callback({ });
             return;
         }
 
-        factory.createEncodingConfiguration(config, [factoryCallback, nextFactory, config, callback = WTFMove(callback)] (auto&& info) mutable {
+        factory.createEncodingConfiguration(WTFMove(config), [factoryCallback, nextFactory, callback = WTFMove(callback)] (auto&& info) mutable {
             if (info.supported) {
                 callback(WTFMove(info));
                 return;
             }
 
-            factoryCallback(factoryCallback, ++nextFactory, config, WTFMove(callback));
+            factoryCallback(factoryCallback, ++nextFactory, WTFMove(info.supportedConfiguration), WTFMove(callback));
         });
     };
-    factoryCallback(factoryCallback, factories().begin(), config, WTFMove(callback));
+    factoryCallback(factoryCallback, factories().begin(), WTFMove(config), WTFMove(callback));
 }
 
 void MediaEngineConfigurationFactory::enableMock()
 {
     mockEnabled() = true;
