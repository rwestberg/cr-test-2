diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITMathIC.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITMathIC.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITMathIC.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITMathIC.h
@@ -54,13 +54,12 @@
 
 template <typename GeneratorType, bool(*isProfileEmpty)(ArithProfile&)>
 class JITMathIC {
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    JITMathIC(ArithProfile* arithProfile, const Instruction* instruction)
+    JITMathIC(ArithProfile* arithProfile)
         : m_arithProfile(arithProfile)
-        , m_instruction(instruction)
     {
     }
 
     CodeLocationLabel<JSInternalPtrTag> doneLocation() { return m_inlineEnd; }
     CodeLocationCall<JSInternalPtrTag> slowPathCallLocation() { return m_slowPathCallLocation; }
@@ -223,11 +222,10 @@
         m_slowPathCallLocation = linkBuffer.locationOf<JSInternalPtrTag>(state.slowPathCall);
         m_slowPathStartLocation = linkBuffer.locationOf<JSInternalPtrTag>(state.slowPathStart);
     }
 
     ArithProfile* arithProfile() const { return m_arithProfile; }
-    const Instruction* instruction() const { return m_instruction; }
 
 #if ENABLE(MATH_IC_STATS)
     size_t m_generatedCodeSize { 0 };
     size_t codeSize() const
     {
@@ -237,11 +235,10 @@
         return result;
     }
 #endif
 
     ArithProfile* m_arithProfile;
-    const Instruction* m_instruction;
     MacroAssemblerCodeRef<JITStubRoutinePtrTag> m_code;
     CodeLocationLabel<JSInternalPtrTag> m_inlineStart;
     CodeLocationLabel<JSInternalPtrTag> m_inlineEnd;
     CodeLocationLabel<JSInternalPtrTag> m_slowPathCallLocation;
     CodeLocationLabel<JSInternalPtrTag> m_slowPathStartLocation;
@@ -254,12 +251,12 @@
     return arithProfile.lhsObservedType().isEmpty() || arithProfile.rhsObservedType().isEmpty();
 }
 template <typename GeneratorType>
 class JITBinaryMathIC : public JITMathIC<GeneratorType, isBinaryProfileEmpty> {
 public:
-    JITBinaryMathIC(ArithProfile* arithProfile, const Instruction* instruction)
-        : JITMathIC<GeneratorType, isBinaryProfileEmpty>(arithProfile, instruction)
+    JITBinaryMathIC(ArithProfile* arithProfile)
+        : JITMathIC<GeneratorType, isBinaryProfileEmpty>(arithProfile)
     {
     }
 };
 
 typedef JITBinaryMathIC<JITAddGenerator> JITAddIC;
@@ -272,12 +269,12 @@
     return arithProfile.lhsObservedType().isEmpty();
 }
 template <typename GeneratorType>
 class JITUnaryMathIC : public JITMathIC<GeneratorType, isUnaryProfileEmpty> {
 public:
-    JITUnaryMathIC(ArithProfile* arithProfile, const Instruction* instruction)
-        : JITMathIC<GeneratorType, isUnaryProfileEmpty>(arithProfile, instruction)
+    JITUnaryMathIC(ArithProfile* arithProfile)
+        : JITMathIC<GeneratorType, isUnaryProfileEmpty>(arithProfile)
     {
     }
 };
 
 typedef JITUnaryMathIC<JITNegGenerator> JITNegIC;
