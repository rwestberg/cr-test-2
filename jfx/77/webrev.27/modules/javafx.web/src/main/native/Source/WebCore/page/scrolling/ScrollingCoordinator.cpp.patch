diff a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingCoordinator.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingCoordinator.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingCoordinator.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingCoordinator.cpp
@@ -45,11 +45,11 @@
 #include <wtf/text/StringBuilder.h>
 #include <wtf/text/TextStream.h>
 
 namespace WebCore {
 
-#if !PLATFORM(COCOA) && !USE(COORDINATED_GRAPHICS)
+#if PLATFORM(IOS_FAMILY) || !ENABLE(ASYNC_SCROLLING)
 Ref<ScrollingCoordinator> ScrollingCoordinator::create(Page* page)
 {
     return adoptRef(*new ScrollingCoordinator(page));
 }
 #endif
@@ -94,10 +94,15 @@
     ASSERT(m_page);
 
     return layer.hasCompositedScrollableOverflow();
 }
 
+ScrollingNodeID ScrollingCoordinator::scrollableContainerNodeID(const RenderObject&) const
+{
+    return 0;
+}
+
 EventTrackingRegions ScrollingCoordinator::absoluteEventTrackingRegionsForFrame(const Frame& frame) const
 {
     auto* renderView = frame.contentRenderer();
     if (!renderView || renderView->renderTreeBeingDestroyed())
         return EventTrackingRegions();
@@ -106,29 +111,11 @@
     // On iOS, we use nonFastScrollableRegion to represent the region covered by elements with touch event handlers.
     ASSERT(frame.isMainFrame());
     auto* document = frame.document();
     if (!document)
         return EventTrackingRegions();
-    auto eventTrackingRegions = document->eventTrackingRegions();
-
-#if ENABLE(POINTER_EVENTS)
-    if (RuntimeEnabledFeatures::sharedFeatures().pointerEventsEnabled()) {
-        if (auto* touchActionElements = frame.document()->touchActionElements()) {
-            auto& touchActionData = eventTrackingRegions.touchActionData;
-            for (const auto& element : *touchActionElements) {
-                ASSERT(element);
-                touchActionData.append({
-                    element->computedTouchActions(),
-                    element->nearestScrollingNodeIDUsingTouchOverflowScrolling(),
-                    element->document().absoluteEventRegionForNode(*element).first
-                });
-            }
-        }
-    }
-#endif
-
-    return eventTrackingRegions;
+    return document->eventTrackingRegions();
 #else
     auto* frameView = frame.view();
     if (!frameView)
         return EventTrackingRegions();
 
@@ -433,15 +420,21 @@
 {
     ts.dumpProperty("horizontal scroll elasticity", scrollableAreaParameters.horizontalScrollElasticity);
     ts.dumpProperty("vertical scroll elasticity", scrollableAreaParameters.verticalScrollElasticity);
     ts.dumpProperty("horizontal scrollbar mode", scrollableAreaParameters.horizontalScrollbarMode);
     ts.dumpProperty("vertical scrollbar mode", scrollableAreaParameters.verticalScrollbarMode);
+
     if (scrollableAreaParameters.hasEnabledHorizontalScrollbar)
         ts.dumpProperty("has enabled horizontal scrollbar", scrollableAreaParameters.hasEnabledHorizontalScrollbar);
     if (scrollableAreaParameters.hasEnabledVerticalScrollbar)
         ts.dumpProperty("has enabled vertical scrollbar", scrollableAreaParameters.hasEnabledVerticalScrollbar);
 
+    if (scrollableAreaParameters.horizontalScrollbarHiddenByStyle)
+        ts.dumpProperty("horizontal scrollbar hidden by style", scrollableAreaParameters.horizontalScrollbarHiddenByStyle);
+    if (scrollableAreaParameters.verticalScrollbarHiddenByStyle)
+        ts.dumpProperty("vertical scrollbar hidden by style", scrollableAreaParameters.verticalScrollbarHiddenByStyle);
+
     return ts;
 }
 
 TextStream& operator<<(TextStream& ts, ScrollingNodeType nodeType)
 {
@@ -456,16 +449,22 @@
         ts << "frame-hosting";
         break;
     case ScrollingNodeType::Overflow:
         ts << "overflow-scrolling";
         break;
+    case ScrollingNodeType::OverflowProxy:
+        ts << "overflow-scroll-proxy";
+        break;
     case ScrollingNodeType::Fixed:
         ts << "fixed";
         break;
     case ScrollingNodeType::Sticky:
         ts << "sticky";
         break;
+    case ScrollingNodeType::Positioned:
+        ts << "positioned";
+        break;
     }
     return ts;
 }
 
 TextStream& operator<<(TextStream& ts, ScrollingLayerPositionAction action)
@@ -498,6 +497,15 @@
         break;
     }
     return ts;
 }
 
+TextStream& operator<<(TextStream& ts, ScrollType scrollType)
+{
+    switch (scrollType) {
+    case ScrollType::User: ts << "user"; break;
+    case ScrollType::Programmatic: ts << "programmatic"; break;
+    }
+    return ts;
+}
+
 } // namespace WebCore
