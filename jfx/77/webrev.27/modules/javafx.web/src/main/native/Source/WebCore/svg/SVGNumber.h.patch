diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGNumber.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGNumber.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGNumber.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGNumber.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -23,57 +23,60 @@
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
-#include "SVGPropertyTearOff.h"
+#include "SVGValueProperty.h"
 
 namespace WebCore {
 
-class SVGNumber : public SVGPropertyTearOff<float> {
+class SVGNumber : public SVGValueProperty<float> {
+    using Base = SVGValueProperty<float>;
+    using Base::Base;
+    using Base::m_value;
+
 public:
-    static Ref<SVGNumber> create(SVGAnimatedProperty& animatedProperty, SVGPropertyRole role, float& value)
+    static Ref<SVGNumber> create(float value = 0)
+    {
+        return adoptRef(*new SVGNumber(value));
+    }
+
+    static Ref<SVGNumber> create(SVGPropertyOwner* owner, SVGPropertyAccess access, float value = 0)
     {
-        return adoptRef(*new SVGNumber(animatedProperty, role, value));
+        return adoptRef(*new SVGNumber(owner, access, value));
     }
 
-    static Ref<SVGNumber> create(const float& initialValue = { })
+    template<typename T>
+    static ExceptionOr<Ref<SVGNumber>> create(ExceptionOr<T>&& value)
     {
-        return adoptRef(*new SVGNumber(initialValue));
+        if (value.hasException())
+            return value.releaseException();
+        return adoptRef(*new SVGNumber(value.releaseReturnValue()));
     }
 
-    template<typename T> static ExceptionOr<Ref<SVGNumber>> create(ExceptionOr<T>&& initialValue)
+    Ref<SVGNumber> clone() const
     {
-        if (initialValue.hasException())
-            return initialValue.releaseException();
-        return create(initialValue.releaseReturnValue());
+        return SVGNumber::create(m_value);
     }
 
     float valueForBindings()
     {
-        return propertyReference();
+        return m_value;
     }
 
     ExceptionOr<void> setValueForBindings(float value)
     {
         if (isReadOnly())
             return Exception { NoModificationAllowedError };
 
-        propertyReference() = value;
+        m_value = value;
         commitChange();
-
         return { };
     }
 
-private:
-    SVGNumber(SVGAnimatedProperty& animatedProperty, SVGPropertyRole role, float& value)
-        : SVGPropertyTearOff<float>(&animatedProperty, role, value)
-    {
-    }
-
-    explicit SVGNumber(const float& initialValue)
-        : SVGPropertyTearOff<float>(initialValue)
+    String valueAsString() const override
     {
+        return SVGPropertyTraits<float>::toString(m_value);
     }
 };
 
 } // namespace WebCore
