diff a/modules/javafx.web/src/main/native/Source/WebCore/page/SecurityOrigin.h b/modules/javafx.web/src/main/native/Source/WebCore/page/SecurityOrigin.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/SecurityOrigin.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/SecurityOrigin.h
@@ -52,10 +52,16 @@
     WEBCORE_EXPORT static Ref<SecurityOrigin> createUnique();
 
     WEBCORE_EXPORT static Ref<SecurityOrigin> createFromString(const String&);
     WEBCORE_EXPORT static Ref<SecurityOrigin> create(const String& protocol, const String& host, Optional<uint16_t> port);
 
+    // QuickLook documents are in non-local origins even when loaded from file: URLs. They need to
+    // be allowed to display their own file: URLs in order to perform reloads and same-document
+    // navigations. This lets those documents specify the file path that should be allowed to be
+    // displayed from their non-local origin.
+    static Ref<SecurityOrigin> createNonLocalWithAllowedFilePath(const URL&, const String& filePath);
+
     // Some URL schemes use nested URLs for their security context. For example,
     // filesystem URLs look like the following:
     //
     //   filesystem:http://example.com/temporary/path/to/file.png
     //
@@ -196,10 +202,14 @@
 
     // This method implements the "same origin" algorithm from the HTML Standard:
     // https://html.spec.whatwg.org/multipage/browsers.html#same-origin
     WEBCORE_EXPORT bool isSameOriginAs(const SecurityOrigin&) const;
 
+    // This method implements the "is a registrable domain suffix of or is equal to" algorithm from the HTML Standard:
+    // https://html.spec.whatwg.org/multipage/origin.html#is-a-registrable-domain-suffix-of-or-is-equal-to
+    WEBCORE_EXPORT bool isMatchingRegistrableDomainSuffix(const String&, bool treatIPAddressAsDomain = false) const;
+
     bool isPotentiallyTrustworthy() const { return m_isPotentiallyTrustworthy; }
     void setIsPotentiallyTrustworthy(bool value) { m_isPotentiallyTrustworthy = value; }
 
     static bool isLocalHostOrLoopbackIPAddress(StringView);
 
@@ -238,12 +248,12 @@
 };
 
 bool shouldTreatAsPotentiallyTrustworthy(const URL&);
 
 // Returns true if the Origin header values serialized from these two origins would be the same.
-bool originsMatch(const SecurityOrigin&, const SecurityOrigin&);
-bool originsMatch(const SecurityOrigin*, const SecurityOrigin*);
+bool serializedOriginsMatch(const SecurityOrigin&, const SecurityOrigin&);
+bool serializedOriginsMatch(const SecurityOrigin*, const SecurityOrigin*);
 
 template<class Encoder> inline void SecurityOrigin::encode(Encoder& encoder) const
 {
     encoder << m_data;
     encoder << m_domain;
@@ -289,9 +299,9 @@
     if (!decoder.decode(origin->m_isPotentiallyTrustworthy))
         return nullptr;
     if (!decoder.decode(origin->m_isLocal))
         return nullptr;
 
-    return WTFMove(origin);
+    return origin;
 }
 
 } // namespace WebCore
