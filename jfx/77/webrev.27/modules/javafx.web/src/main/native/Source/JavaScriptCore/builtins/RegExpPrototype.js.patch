diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/RegExpPrototype.js b/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/RegExpPrototype.js
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/RegExpPrototype.js
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/RegExpPrototype.js
@@ -21,10 +21,23 @@
  * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
  */
 
+@globalPrivate
+@constructor
+function RegExpStringIterator(regExp, string, global, fullUnicode)
+{
+    "use strict";
+
+    @putByIdDirectPrivate(this, "regExpStringIteratorRegExp", regExp);
+    @putByIdDirectPrivate(this, "regExpStringIteratorString", string);
+    @putByIdDirectPrivate(this, "regExpStringIteratorGlobal", global);
+    @putByIdDirectPrivate(this, "regExpStringIteratorUnicode", fullUnicode);
+    @putByIdDirectPrivate(this, "regExpStringIteratorDone", false);
+}
+
 @globalPrivate
 function advanceStringIndex(string, index, unicode)
 {
     // This function implements AdvanceStringIndex described in ES6 21.2.5.2.3.
     "use strict";
@@ -112,13 +125,10 @@
         }
 
         if (resultList.length > maximumReasonableMatchSize)
             @throwOutOfMemoryError();
 
-        if (!@isObject(result))
-            @throwTypeError("RegExp.prototype.@@match call to RegExp.exec didn't return null or an object");
-
         let resultString = @toString(result[0]);
 
         if (!resultString.length)
             regexp.lastIndex = @advanceStringIndex(str, regexp.lastIndex, unicode);
 
@@ -140,10 +150,32 @@
     if (!@hasObservableSideEffectsForRegExpMatch(this))
         return @regExpMatchFast.@call(this, str);
     return @matchSlow(this, str);
 }
 
+@overriddenName="[Symbol.matchAll]"
+function matchAll(strArg)
+{
+    "use strict";
+
+    let regExp = this;
+    if (!@isObject(regExp))
+        @throwTypeError("RegExp.prototype.@@matchAll requires |this| to be an Object");
+
+    let string = @toString(strArg);
+    let Matcher = @speciesConstructor(regExp, @RegExp);
+
+    let flags = @toString(regExp.flags);
+    let matcher = new Matcher(regExp, flags);
+    matcher.lastIndex = @toLength(regExp.lastIndex);
+
+    let global = @stringIncludesInternal.@call(flags, "g");
+    let fullUnicode = @stringIncludesInternal.@call(flags, "u");
+
+    return new @RegExpStringIterator(matcher, string, global, fullUnicode);
+}
+
 @overriddenName="[Symbol.replace]"
 function replace(strArg, replace)
 {
     "use strict";
 
