diff a/modules/javafx.web/src/main/native/Source/WebCore/history/PageCache.cpp b/modules/javafx.web/src/main/native/Source/WebCore/history/PageCache.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/history/PageCache.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/history/PageCache.cpp
@@ -88,10 +88,21 @@
     if (frame.isMainFrame() && frameLoader.stateMachine().isDisplayingInitialEmptyDocument()) {
         PCLOG("   -MainFrame is displaying initial empty document");
         return false;
     }
 
+    if (!frame.document()) {
+        PCLOG("   -Frame has no document");
+        return false;
+    }
+
+    if (!frame.document()->frame()) {
+        PCLOG("   -Document is detached from frame");
+        ASSERT_NOT_REACHED();
+        return false;
+    }
+
     DocumentLoader* documentLoader = frameLoader.documentLoader();
     if (!documentLoader) {
         PCLOG("   -There is no DocumentLoader object");
         logPageCacheFailureDiagnosticMessage(diagnosticLoggingClient, DiagnosticLoggingKeys::noDocumentLoaderKey());
         return false;
@@ -443,26 +454,33 @@
         page->focusController().setFocusedFrame(&page->mainFrame());
 
     // Fire the pagehide event in all frames.
     firePageHideEventRecursively(page->mainFrame());
 
+    destroyRenderTree(page->mainFrame());
+
+    // Stop all loads again before checking if we can still cache the page after firing the pagehide
+    // event, since the page may have started ping loads in its pagehide event handler.
+    for (Frame* frame = &page->mainFrame(); frame; frame = frame->tree().traverseNext()) {
+        if (auto* documentLoader = frame->loader().documentLoader())
+            documentLoader->stopLoading();
+    }
+
     // Check that the page is still page-cacheable after firing the pagehide event. The JS event handlers
     // could have altered the page in a way that could prevent caching.
     if (!canCache(*page)) {
         setPageCacheState(*page, Document::NotInPageCache);
         return false;
     }
 
-    destroyRenderTree(page->mainFrame());
-
     setPageCacheState(*page, Document::InPageCache);
 
     {
         // Make sure we don't fire any JS events in this scope.
         ScriptDisallowedScope::InMainThread scriptDisallowedScope;
 
-        item.m_cachedPage = std::make_unique<CachedPage>(*page);
+        item.m_cachedPage = makeUnique<CachedPage>(*page);
         item.m_pruningReason = PruningReason::None;
         m_items.add(&item);
     }
     prune(PruningReason::ReachedMaxSize);
     return true;
