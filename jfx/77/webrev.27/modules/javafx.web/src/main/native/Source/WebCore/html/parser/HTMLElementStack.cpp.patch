diff a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLElementStack.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLElementStack.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLElementStack.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLElementStack.cpp
@@ -195,19 +195,19 @@
 {
     ASSERT(!topStackItem().hasTagName(HTMLNames::headTag));
     popCommon();
 }
 
-void HTMLElementStack::popUntil(const AtomicString& tagName)
+void HTMLElementStack::popUntil(const AtomString& tagName)
 {
     while (!topStackItem().matchesHTMLTag(tagName)) {
         // pop() will ASSERT if a <body>, <head> or <html> will be popped.
         pop();
     }
 }
 
-void HTMLElementStack::popUntilPopped(const AtomicString& tagName)
+void HTMLElementStack::popUntilPopped(const AtomString& tagName)
 {
     popUntil(tagName);
     pop();
 }
 
@@ -344,11 +344,11 @@
     for (auto* recordAbove = m_top.get(); recordAbove; recordAbove = recordAbove->next()) {
         if (recordAbove->next() != &recordBelow)
             continue;
 
         ++m_stackDepth;
-        recordAbove->setNext(std::make_unique<ElementRecord>(WTFMove(item), recordAbove->releaseNext()));
+        recordAbove->setNext(makeUnique<ElementRecord>(WTFMove(item), recordAbove->releaseNext()));
         recordAbove->next()->element().beginParsingChildren();
         return;
     }
     ASSERT_NOT_REACHED();
 }
@@ -397,11 +397,11 @@
             return record;
     }
     return nullptr;
 }
 
-auto HTMLElementStack::topmost(const AtomicString& tagName) const -> ElementRecord*
+auto HTMLElementStack::topmost(const AtomString& tagName) const -> ElementRecord*
 {
     for (auto* record = m_top.get(); record; record = record->next()) {
         if (record->stackItem().matchesHTMLTag(tagName))
             return record;
     }
@@ -411,16 +411,16 @@
 bool HTMLElementStack::contains(Element& element) const
 {
     return !!find(element);
 }
 
-bool HTMLElementStack::contains(const AtomicString& tagName) const
+bool HTMLElementStack::contains(const AtomString& tagName) const
 {
     return !!topmost(tagName);
 }
 
-template <bool isMarker(HTMLStackItem&)> bool inScopeCommon(HTMLElementStack::ElementRecord* top, const AtomicString& targetTag)
+template <bool isMarker(HTMLStackItem&)> bool inScopeCommon(HTMLElementStack::ElementRecord* top, const AtomString& targetTag)
 {
     for (auto* record = top; record; record = record->next()) {
         auto& item = record->stackItem();
         if (item.matchesHTMLTag(targetTag))
             return true;
@@ -455,51 +455,51 @@
     }
     ASSERT_NOT_REACHED(); // <html> is always on the stack and is a scope marker.
     return false;
 }
 
-bool HTMLElementStack::inScope(const AtomicString& targetTag) const
+bool HTMLElementStack::inScope(const AtomString& targetTag) const
 {
     return inScopeCommon<isScopeMarker>(m_top.get(), targetTag);
 }
 
 bool HTMLElementStack::inScope(const QualifiedName& tagName) const
 {
     return inScope(tagName.localName());
 }
 
-bool HTMLElementStack::inListItemScope(const AtomicString& targetTag) const
+bool HTMLElementStack::inListItemScope(const AtomString& targetTag) const
 {
     return inScopeCommon<isListItemScopeMarker>(m_top.get(), targetTag);
 }
 
 bool HTMLElementStack::inListItemScope(const QualifiedName& tagName) const
 {
     return inListItemScope(tagName.localName());
 }
 
-bool HTMLElementStack::inTableScope(const AtomicString& targetTag) const
+bool HTMLElementStack::inTableScope(const AtomString& targetTag) const
 {
     return inScopeCommon<isTableScopeMarker>(m_top.get(), targetTag);
 }
 
 bool HTMLElementStack::inTableScope(const QualifiedName& tagName) const
 {
     return inTableScope(tagName.localName());
 }
 
-bool HTMLElementStack::inButtonScope(const AtomicString& targetTag) const
+bool HTMLElementStack::inButtonScope(const AtomString& targetTag) const
 {
     return inScopeCommon<isButtonScopeMarker>(m_top.get(), targetTag);
 }
 
 bool HTMLElementStack::inButtonScope(const QualifiedName& tagName) const
 {
     return inButtonScope(tagName.localName());
 }
 
-bool HTMLElementStack::inSelectScope(const AtomicString& targetTag) const
+bool HTMLElementStack::inSelectScope(const AtomString& targetTag) const
 {
     return inScopeCommon<isSelectScopeMarker>(m_top.get(), targetTag);
 }
 
 bool HTMLElementStack::inSelectScope(const QualifiedName& tagName) const
@@ -538,11 +538,11 @@
 void HTMLElementStack::pushCommon(Ref<HTMLStackItem>&& item)
 {
     ASSERT(m_rootNode);
 
     ++m_stackDepth;
-    m_top = std::make_unique<ElementRecord>(WTFMove(item), WTFMove(m_top));
+    m_top = makeUnique<ElementRecord>(WTFMove(item), WTFMove(m_top));
 }
 
 void HTMLElementStack::popCommon()
 {
     ASSERT(!topStackItem().hasTagName(HTMLNames::htmlTag));
