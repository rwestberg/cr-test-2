diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/MetadataTable.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/MetadataTable.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/MetadataTable.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/MetadataTable.cpp
@@ -25,10 +25,11 @@
 
 #include "config.h"
 #include "MetadataTable.h"
 
 #include "CodeBlock.h"
+#include "JSCInlines.h"
 #include "OpcodeInlines.h"
 #include "UnlinkedMetadataTableInlines.h"
 #include <wtf/FastMalloc.h>
 
 namespace JSC {
@@ -53,15 +54,20 @@
 
 MetadataTable::~MetadataTable()
 {
     for (unsigned i = 0; i < NUMBER_OF_BYTECODE_WITH_METADATA; i++)
         getOpcodeType<DeallocTable>(static_cast<OpcodeID>(i), this);
-    Ref<UnlinkedMetadataTable> unlinkedMetadata = WTFMove(linkingData().unlinkedMetadata);
     linkingData().~LinkingData();
+}
+
+void MetadataTable::destroy(MetadataTable* table)
+{
+    Ref<UnlinkedMetadataTable> unlinkedMetadata = WTFMove(table->linkingData().unlinkedMetadata);
+    table->~MetadataTable();
     // Since UnlinkedMetadata::unlink frees the underlying memory of MetadataTable.
     // We need to destroy LinkingData before calling it.
-    unlinkedMetadata->unlink(*this);
+    unlinkedMetadata->unlink(*table);
 }
 
 size_t MetadataTable::sizeInBytes()
 {
     return linkingData().unlinkedMetadata->sizeInBytes(*this);
