diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/transforms/TransformState.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/transforms/TransformState.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/transforms/TransformState.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/transforms/TransformState.cpp
@@ -24,10 +24,12 @@
  */
 
 #include "config.h"
 #include "TransformState.h"
 
+#include <wtf/Optional.h>
+
 namespace WebCore {
 
 TransformState& TransformState::operator=(const TransformState& other)
 {
     m_accumulatedOffset = other.m_accumulatedOffset;
@@ -36,21 +38,21 @@
     if (m_mapPoint)
         m_lastPlanarPoint = other.m_lastPlanarPoint;
     if (m_mapQuad) {
         m_lastPlanarQuad = other.m_lastPlanarQuad;
         if (other.m_lastPlanarSecondaryQuad)
-            m_lastPlanarSecondaryQuad = std::make_unique<FloatQuad>(*other.m_lastPlanarSecondaryQuad);
+            m_lastPlanarSecondaryQuad = makeUnique<FloatQuad>(*other.m_lastPlanarSecondaryQuad);
         else
             m_lastPlanarSecondaryQuad = nullptr;
     }
     m_accumulatingTransform = other.m_accumulatingTransform;
     m_direction = other.m_direction;
 
     m_accumulatedTransform = nullptr;
 
     if (other.m_accumulatedTransform)
-        m_accumulatedTransform = std::make_unique<TransformationMatrix>(*other.m_accumulatedTransform);
+        m_accumulatedTransform = makeUnique<TransformationMatrix>(*other.m_accumulatedTransform);
 
     return *this;
 }
 
 void TransformState::translateTransform(const LayoutSize& offset)
@@ -125,16 +127,16 @@
     applyAccumulatedOffset();
 
     // If we have an accumulated transform from last time, multiply in this transform
     if (m_accumulatedTransform) {
         if (m_direction == ApplyTransformDirection)
-            m_accumulatedTransform = std::make_unique<TransformationMatrix>(transformFromContainer * *m_accumulatedTransform);
+            m_accumulatedTransform = makeUnique<TransformationMatrix>(transformFromContainer * *m_accumulatedTransform);
         else
             m_accumulatedTransform->multiply(transformFromContainer);
     } else if (accumulate == AccumulateTransform) {
         // Make one if we started to accumulate
-        m_accumulatedTransform = std::make_unique<TransformationMatrix>(transformFromContainer);
+        m_accumulatedTransform = makeUnique<TransformationMatrix>(transformFromContainer);
     }
 
     if (accumulate == FlattenTransform) {
         const TransformationMatrix* finalTransform = m_accumulatedTransform ? m_accumulatedTransform.get() : &transformFromContainer;
         flattenWithTransform(*finalTransform, wasClamped);
@@ -204,11 +206,11 @@
     }
 
     // Map the quad back through any transform or offset back into the last flattening coordinate space.
     FloatQuad backMappedQuad(*quad);
     mapQuad(backMappedQuad, inverseDirection());
-    m_lastPlanarSecondaryQuad = std::make_unique<FloatQuad>(backMappedQuad);
+    m_lastPlanarSecondaryQuad = makeUnique<FloatQuad>(backMappedQuad);
 }
 
 void TransformState::mapQuad(FloatQuad& quad, TransformDirection direction, bool* wasClamped) const
 {
     quad.move((direction == ApplyTransformDirection) ? m_accumulatedOffset : -m_accumulatedOffset);
