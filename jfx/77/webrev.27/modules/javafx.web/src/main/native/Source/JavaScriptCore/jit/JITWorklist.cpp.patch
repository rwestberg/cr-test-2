diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITWorklist.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITWorklist.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITWorklist.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITWorklist.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -73,11 +73,11 @@
             return;
         }
     }
 
     CodeBlock* codeBlock() { return m_codeBlock; }
-    VM* vm() { return m_codeBlock->vm(); }
+    VM& vm() { return m_codeBlock->vm(); }
 
     bool isFinishedCompiling()
     {
         LockHolder locker(m_lock);
         return m_isFinishedCompiling;
@@ -177,11 +177,11 @@
             LockHolder locker(*m_lock);
             for (;;) {
                 bool didFindUnfinishedPlan = false;
                 m_plans.removeAllMatching(
                     [&] (RefPtr<Plan>& plan) {
-                        if (plan->vm() != &vm)
+                        if (&plan->vm() != &vm)
                             return false;
                         if (!plan->isFinishedCompiling()) {
                             didFindUnfinishedPlan = true;
                             return false;
                         }
@@ -214,11 +214,11 @@
     Plans myPlans;
     {
         LockHolder locker(*m_lock);
         m_plans.removeAllMatching(
             [&] (RefPtr<Plan>& plan) {
-                if (plan->vm() != &vm)
+                if (&plan->vm() != &vm)
                     return false;
                 if (!plan->isFinishedCompiling())
                     return false;
                 myPlans.append(WTFMove(plan));
                 return true;
@@ -228,12 +228,12 @@
     finalizePlans(myPlans);
 }
 
 void JITWorklist::compileLater(CodeBlock* codeBlock, unsigned loopOSREntryBytecodeOffset)
 {
-    DeferGC deferGC(codeBlock->vm()->heap);
-    RELEASE_ASSERT(codeBlock->jitType() == JITCode::InterpreterThunk);
+    DeferGC deferGC(codeBlock->vm().heap);
+    RELEASE_ASSERT(codeBlock->jitType() == JITType::InterpreterThunk);
 
     if (codeBlock->m_didFailJITCompilation) {
         codeBlock->dontJITAnytimeSoon();
         return;
     }
@@ -280,13 +280,13 @@
     Plan::compileNow(codeBlock, loopOSREntryBytecodeOffset);
 }
 
 void JITWorklist::compileNow(CodeBlock* codeBlock, unsigned loopOSREntryBytecodeOffset)
 {
-    VM* vm = codeBlock->vm();
-    DeferGC deferGC(vm->heap);
-    if (codeBlock->jitType() != JITCode::InterpreterThunk)
+    VM& vm = codeBlock->vm();
+    DeferGC deferGC(vm.heap);
+    if (codeBlock->jitType() != JITType::InterpreterThunk)
         return;
 
     bool isPlanned;
     {
         LockHolder locker(*m_lock);
@@ -294,15 +294,15 @@
     }
 
     if (isPlanned) {
         RELEASE_ASSERT(Options::useConcurrentJIT());
         // This is expensive, but probably good enough.
-        completeAllForVM(*vm);
+        completeAllForVM(vm);
     }
 
     // Now it might be compiled!
-    if (codeBlock->jitType() != JITCode::InterpreterThunk)
+    if (codeBlock->jitType() != JITType::InterpreterThunk)
         return;
 
     // We do this in case we had previously attempted, and then failed, to compile with the
     // baseline JIT.
     codeBlock->resetJITData();
