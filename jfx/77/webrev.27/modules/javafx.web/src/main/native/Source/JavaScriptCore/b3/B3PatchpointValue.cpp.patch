diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3PatchpointValue.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3PatchpointValue.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3PatchpointValue.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3PatchpointValue.cpp
@@ -35,27 +35,30 @@
 }
 
 void PatchpointValue::dumpMeta(CommaPrinter& comma, PrintStream& out) const
 {
     Base::dumpMeta(comma, out);
-    out.print(comma, "resultConstraint = ", resultConstraint);
+    out.print(comma, "resultConstraints = ");
+    out.print(resultConstraints.size() > 1 ? "[" : "");
+
+    CommaPrinter constraintComma;
+    for (const auto& constraint : resultConstraints)
+        out.print(constraintComma, constraint);
+    out.print(resultConstraints.size() > 1 ? "]" : "");
+
     if (numGPScratchRegisters)
         out.print(comma, "numGPScratchRegisters = ", numGPScratchRegisters);
     if (numFPScratchRegisters)
         out.print(comma, "numFPScratchRegisters = ", numFPScratchRegisters);
 }
 
-Value* PatchpointValue::cloneImpl() const
-{
-    return new PatchpointValue(*this);
-}
-
 PatchpointValue::PatchpointValue(Type type, Origin origin)
     : Base(CheckedOpcode, Patchpoint, type, origin)
     , effects(Effects::forCall())
-    , resultConstraint(type == Void ? ValueRep::WarmAny : ValueRep::SomeRegister)
 {
+    if (!type.isTuple())
+        resultConstraints.append(type == Void ? ValueRep::WarmAny : ValueRep::SomeRegister);
 }
 
 } } // namespace JSC::B3
 
 #endif // ENABLE(B3_JIT)
