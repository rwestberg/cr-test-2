diff a/modules/javafx.web/src/main/native/Source/WebCore/html/DOMTokenList.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/DOMTokenList.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/DOMTokenList.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/DOMTokenList.cpp
@@ -28,11 +28,11 @@
 
 #include "HTMLParserIdioms.h"
 #include "SpaceSplitString.h"
 #include <wtf/HashSet.h>
 #include <wtf/SetForScope.h>
-#include <wtf/text/AtomicStringHash.h>
+#include <wtf/text/AtomStringHash.h>
 #include <wtf/text/StringBuilder.h>
 
 namespace WebCore {
 
 DOMTokenList::DOMTokenList(Element& element, const QualifiedName& attributeName, IsSupportedTokenFunction&& isSupportedToken)
@@ -66,19 +66,19 @@
             return result;
     }
     return { };
 }
 
-bool DOMTokenList::contains(const AtomicString& token) const
+bool DOMTokenList::contains(const AtomString& token) const
 {
     return tokens().contains(token);
 }
 
 inline ExceptionOr<void> DOMTokenList::addInternal(const String* newTokens, size_t length)
 {
     // This is usually called with a single token.
-    Vector<AtomicString, 1> uniqueNewTokens;
+    Vector<AtomString, 1> uniqueNewTokens;
     uniqueNewTokens.reserveInitialCapacity(length);
 
     auto& tokens = this->tokens();
 
     for (size_t i = 0; i < length; ++i) {
@@ -100,11 +100,11 @@
 ExceptionOr<void> DOMTokenList::add(const Vector<String>& tokens)
 {
     return addInternal(tokens.data(), tokens.size());
 }
 
-ExceptionOr<void> DOMTokenList::add(const AtomicString& token)
+ExceptionOr<void> DOMTokenList::add(const AtomString& token)
 {
     return addInternal(&token.string(), 1);
 }
 
 inline ExceptionOr<void> DOMTokenList::removeInternal(const String* tokensToRemove, size_t length)
@@ -125,16 +125,16 @@
 ExceptionOr<void> DOMTokenList::remove(const Vector<String>& tokens)
 {
     return removeInternal(tokens.data(), tokens.size());
 }
 
-ExceptionOr<void> DOMTokenList::remove(const AtomicString& token)
+ExceptionOr<void> DOMTokenList::remove(const AtomString& token)
 {
     return removeInternal(&token.string(), 1);
 }
 
-ExceptionOr<bool> DOMTokenList::toggle(const AtomicString& token, Optional<bool> force)
+ExceptionOr<bool> DOMTokenList::toggle(const AtomString& token, Optional<bool> force)
 {
     auto result = validateToken(token);
     if (result.hasException())
         return result.releaseException();
 
@@ -155,11 +155,11 @@
     tokens.append(token);
     updateAssociatedAttributeFromTokens();
     return true;
 }
 
-static inline void replaceInOrderedSet(Vector<AtomicString>& tokens, size_t tokenIndex, const AtomicString& newToken)
+static inline void replaceInOrderedSet(Vector<AtomString>& tokens, size_t tokenIndex, const AtomString& newToken)
 {
     ASSERT(tokenIndex != notFound);
     ASSERT(tokenIndex < tokens.size());
 
     auto newTokenIndex = tokens.find(newToken);
@@ -177,11 +177,11 @@
     } else
         tokens.remove(tokenIndex);
 }
 
 // https://dom.spec.whatwg.org/#dom-domtokenlist-replace
-ExceptionOr<bool> DOMTokenList::replace(const AtomicString& token, const AtomicString& newToken)
+ExceptionOr<bool> DOMTokenList::replace(const AtomString& token, const AtomString& newToken)
 {
     if (token.isEmpty() || newToken.isEmpty())
         return Exception { SyntaxError };
 
     if (tokenContainsHTMLSpace(token) || tokenContainsHTMLSpace(newToken))
@@ -208,11 +208,11 @@
         return Exception { TypeError };
     return m_isSupportedToken(m_element.document(), token);
 }
 
 // https://dom.spec.whatwg.org/#dom-domtokenlist-value
-const AtomicString& DOMTokenList::value() const
+const AtomString& DOMTokenList::value() const
 {
     return m_element.getAttribute(m_attributeName);
 }
 
 void DOMTokenList::setValue(const String& value)
@@ -223,22 +223,22 @@
 void DOMTokenList::updateTokensFromAttributeValue(const String& value)
 {
     // Clear tokens but not capacity.
     m_tokens.shrink(0);
 
-    HashSet<AtomicString> addedTokens;
+    HashSet<AtomString> addedTokens;
     // https://dom.spec.whatwg.org/#ordered%20sets
     for (unsigned start = 0; ; ) {
         while (start < value.length() && isHTMLSpace(value[start]))
             ++start;
         if (start >= value.length())
             break;
         unsigned end = start + 1;
         while (end < value.length() && !isHTMLSpace(value[end]))
             ++end;
 
-        AtomicString token = value.substring(start, end - start);
+        AtomString token = value.substring(start, end - start);
         if (!addedTokens.contains(token)) {
             m_tokens.append(token);
             addedTokens.add(token);
         }
 
@@ -247,11 +247,11 @@
 
     m_tokens.shrinkToFit();
     m_tokensNeedUpdating = false;
 }
 
-void DOMTokenList::associatedAttributeValueChanged(const AtomicString&)
+void DOMTokenList::associatedAttributeValueChanged(const AtomString&)
 {
     // Do not reset the DOMTokenList value if the attribute value was changed by us.
     if (m_inUpdateAssociatedAttributeFromTokens)
         return;
 
@@ -271,17 +271,17 @@
     for (auto& token : tokens()) {
         if (!builder.isEmpty())
             builder.append(' ');
         builder.append(token);
     }
-    AtomicString serializedValue = builder.toAtomicString();
+    AtomString serializedValue = builder.toAtomString();
 
     SetForScope<bool> inAttributeUpdate(m_inUpdateAssociatedAttributeFromTokens, true);
     m_element.setAttribute(m_attributeName, serializedValue);
 }
 
-Vector<AtomicString>& DOMTokenList::tokens()
+Vector<AtomString>& DOMTokenList::tokens()
 {
     if (m_tokensNeedUpdating)
         updateTokensFromAttributeValue(m_element.getAttribute(m_attributeName));
     ASSERT(!m_tokensNeedUpdating);
     return m_tokens;
