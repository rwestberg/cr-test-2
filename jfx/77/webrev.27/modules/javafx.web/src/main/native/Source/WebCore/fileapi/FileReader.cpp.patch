diff a/modules/javafx.web/src/main/native/Source/WebCore/fileapi/FileReader.cpp b/modules/javafx.web/src/main/native/Source/WebCore/fileapi/FileReader.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/fileapi/FileReader.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/fileapi/FileReader.cpp
@@ -35,14 +35,17 @@
 #include "File.h"
 #include "Logging.h"
 #include "ProgressEvent.h"
 #include "ScriptExecutionContext.h"
 #include <JavaScriptCore/ArrayBuffer.h>
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/text/CString.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(FileReader);
+
 // Fire the progress event at least every 50ms.
 static const auto progressNotificationInterval = 50_ms;
 
 Ref<FileReader> FileReader::create(ScriptExecutionContext& context)
 {
@@ -62,12 +65,11 @@
         m_loader->cancel();
 }
 
 bool FileReader::canSuspendForDocumentSuspension() const
 {
-    // FIXME: It is not currently possible to suspend a FileReader, so pages with FileReader can not go into page cache.
-    return false;
+    return !hasPendingActivity();
 }
 
 const char* FileReader::activeDOMObjectName() const
 {
     return "FileReader";
@@ -78,10 +80,11 @@
     if (m_loader) {
         m_loader->cancel();
         m_loader = nullptr;
     }
     m_state = DONE;
+    m_loadingActivity = nullptr;
 }
 
 ExceptionOr<void> FileReader::readAsArrayBuffer(Blob* blob)
 {
     if (!blob)
@@ -127,18 +130,18 @@
 {
     // If multiple concurrent read methods are called on the same FileReader, InvalidStateError should be thrown when the state is LOADING.
     if (m_state == LOADING)
         return Exception { InvalidStateError };
 
-    setPendingActivity(*this);
+    m_loadingActivity = makePendingActivity(*this);
 
     m_blob = &blob;
     m_readType = type;
     m_state = LOADING;
     m_error = nullptr;
 
-    m_loader = std::make_unique<FileReaderLoader>(m_readType, static_cast<FileReaderLoaderClient*>(this));
+    m_loader = makeUnique<FileReaderLoader>(m_readType, static_cast<FileReaderLoaderClient*>(this));
     m_loader->setEncoding(m_encoding);
     m_loader->setDataType(m_blob->type());
     m_loader->start(scriptExecutionContext(), blob);
 
     return { };
@@ -151,24 +154,24 @@
     if (m_aborting || m_state != LOADING)
         return;
     m_aborting = true;
 
     // Schedule to have the abort done later since abort() might be called from the event handler and we do not want the resource loading code to be in the stack.
-    scriptExecutionContext()->postTask([this] (ScriptExecutionContext&) {
+    scriptExecutionContext()->postTask([this, protectedThis = makeRef(*this)] (ScriptExecutionContext&) {
+        if (isContextStopped())
+            return;
+
         ASSERT(m_state != DONE);
 
         stop();
         m_aborting = false;
 
         m_error = FileError::create(FileError::ABORT_ERR);
 
         fireEvent(eventNames().errorEvent);
         fireEvent(eventNames().abortEvent);
         fireEvent(eventNames().loadendEvent);
-
-        // All possible events have fired and we're done, no more pending activity.
-        unsetPendingActivity(*this);
     });
 }
 
 void FileReader::didStartLoading()
 {
@@ -198,12 +201,11 @@
 
     fireEvent(eventNames().progressEvent);
     fireEvent(eventNames().loadEvent);
     fireEvent(eventNames().loadendEvent);
 
-    // All possible events have fired and we're done, no more pending activity.
-    unsetPendingActivity(*this);
+    m_loadingActivity = nullptr;
 }
 
 void FileReader::didFail(int errorCode)
 {
     // If we're aborting, do not proceed with normal error handling since it is covered in aborting code.
@@ -215,15 +217,14 @@
 
     m_error = FileError::create(static_cast<FileError::ErrorCode>(errorCode));
     fireEvent(eventNames().errorEvent);
     fireEvent(eventNames().loadendEvent);
 
-    // All possible events have fired and we're done, no more pending activity.
-    unsetPendingActivity(*this);
+    m_loadingActivity = nullptr;
 }
 
-void FileReader::fireEvent(const AtomicString& type)
+void FileReader::fireEvent(const AtomString& type)
 {
     dispatchEvent(ProgressEvent::create(type, true, m_loader ? m_loader->bytesLoaded() : 0, m_loader ? m_loader->totalBytes() : 0));
 }
 
 Optional<Variant<String, RefPtr<JSC::ArrayBuffer>>> FileReader::result() const
