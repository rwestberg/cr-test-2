diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBTransaction.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBTransaction.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBTransaction.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBTransaction.cpp
@@ -53,14 +53,17 @@
 #include "ScriptExecutionContext.h"
 #include "ScriptState.h"
 #include "SerializedScriptValue.h"
 #include "TransactionOperation.h"
 #include <wtf/CompletionHandler.h>
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 using namespace JSC;
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(IDBTransaction);
+
 std::atomic<unsigned> IDBTransaction::numberOfIDBTransactions { 0 };
 
 Ref<IDBTransaction> IDBTransaction::create(IDBDatabase& database, const IDBTransactionInfo& info)
 {
     return adoptRef(*new IDBTransaction(database, info, nullptr));
@@ -174,11 +177,11 @@
 
     // Version change transactions are scoped to every object store in the database.
     if (!info || (!found && !isVersionChange()))
         return Exception { NotFoundError, "Failed to execute 'objectStore' on 'IDBTransaction': The specified object store was not found."_s };
 
-    auto objectStore = std::make_unique<IDBObjectStore>(*scriptExecutionContext(), *info, *this);
+    auto objectStore = makeUnique<IDBObjectStore>(*scriptExecutionContext(), *info, *this);
     auto* rawObjectStore = objectStore.get();
     m_referencedObjectStores.set(objectStoreName, WTFMove(objectStore));
 
     return Ref<IDBObjectStore>(*rawObjectStore);
 }
@@ -326,11 +329,11 @@
     return false;
 }
 
 bool IDBTransaction::hasPendingActivity() const
 {
-    ASSERT(&m_database->originThread() == &Thread::current() || mayBeGCThread());
+    ASSERT(&m_database->originThread() == &Thread::current() || Thread::mayBeGCThread());
     return !m_contextStopped && m_state != IndexedDB::TransactionState::Finished;
 }
 
 void IDBTransaction::stop()
 {
@@ -441,11 +444,13 @@
 {
     ASSERT(&m_database->originThread() == &Thread::current());
     ASSERT(&operation.originThread() == &Thread::current());
 
     m_completedOnServerQueue.append({ &operation, data });
-    scheduleCompletedOperationTimer();
+
+    if (!m_currentlyCompletingRequest)
+        scheduleCompletedOperationTimer();
 }
 
 void IDBTransaction::scheduleCompletedOperationTimer()
 {
     ASSERT(&m_database->originThread() == &Thread::current());
@@ -636,10 +641,11 @@
     ASSERT(event.type() == eventNames().completeEvent || event.type() == eventNames().abortEvent);
 
     auto protectedThis = makeRef(*this);
 
     EventDispatcher::dispatchEvent({ this, m_database.ptr() }, event);
+    m_didDispatchAbortOrCommit = true;
 
     if (isVersionChange()) {
         ASSERT(m_openDBRequest);
         m_openDBRequest->versionChangeTransactionDidFinish();
 
@@ -661,11 +667,11 @@
     ASSERT(scriptExecutionContext());
     ASSERT(&m_database->originThread() == &Thread::current());
 
     Locker<Lock> locker(m_referencedObjectStoreLock);
 
-    auto objectStore = std::make_unique<IDBObjectStore>(*scriptExecutionContext(), info, *this);
+    auto objectStore = makeUnique<IDBObjectStore>(*scriptExecutionContext(), info, *this);
     auto* rawObjectStore = objectStore.get();
     m_referencedObjectStores.set(info.name(), WTFMove(objectStore));
 
     LOG(IndexedDBOperations, "IDB create object store operation: %s", info.condensedLoggingString().utf8().data());
     scheduleOperation(IDBClient::TransactionOperationImpl::create(*this, [protectedThis = makeRef(*this)] (const auto& result) {
@@ -749,11 +755,11 @@
         protectedThis->didCreateIndexOnServer(result);
     }, [protectedThis = makeRef(*this), info = info.isolatedCopy()] (auto& operation) {
         protectedThis->createIndexOnServer(operation, info);
     }));
 
-    return std::make_unique<IDBIndex>(*scriptExecutionContext(), info, objectStore);
+    return makeUnique<IDBIndex>(*scriptExecutionContext(), info, objectStore);
 }
 
 void IDBTransaction::createIndexOnServer(IDBClient::TransactionOperation& operation, const IDBIndexInfo& info)
 {
     LOG(IndexedDB, "IDBTransaction::createIndexOnServer");
@@ -984,11 +990,11 @@
     switch (getAllResult.type()) {
     case IndexedDB::GetAllType::Keys:
         request.setResult(getAllResult.keys());
         break;
     case IndexedDB::GetAllType::Values:
-        request.setResult(getAllResult.values());
+        request.setResult(getAllResult);
         break;
     }
 
     completeNoncursorRequest(request, resultData);
 }
@@ -1088,11 +1094,11 @@
             request.setResult(result.keyData());
         else
             request.setResultToUndefined();
     } else {
         if (resultData.getResult().value().data().data())
-            request.setResultToStructuredClone(resultData.getResult().value());
+            request.setResultToStructuredClone(resultData.getResult());
         else
             request.setResultToUndefined();
     }
 
     completeNoncursorRequest(request, resultData);
@@ -1274,11 +1280,11 @@
 
     // Due to current limitations on our ability to post tasks back to a worker thread,
     // workers currently write blobs to disk synchronously.
     // FIXME: https://bugs.webkit.org/show_bug.cgi?id=157958 - Make this asynchronous after refactoring allows it.
     if (!isMainThread()) {
-        auto idbValue = value->writeBlobsToDiskForIndexedDBSynchronously();
+        auto idbValue = value->writeBlobsToDiskForIndexedDBSynchronously(scriptExecutionContext()->sessionID());
         if (idbValue.data().data())
             m_database->connectionProxy().putOrAdd(operation, key.get(), idbValue, overwriteMode);
         else {
             // If the IDBValue doesn't have any data, then something went wrong writing the blobs to disk.
             // In that case, we cannot successfully store this record, so we callback with an error.
@@ -1293,11 +1299,11 @@
 
     // Since this request won't actually go to the server until the blob writes are complete,
     // stop future requests from going to the server ahead of it.
     operation.setNextRequestCanGoToServer(false);
 
-    value->writeBlobsToDiskForIndexedDB([protectedThis = makeRef(*this), this, protectedOperation = Ref<IDBClient::TransactionOperation>(operation), keyData = IDBKeyData(key.get()).isolatedCopy(), overwriteMode](IDBValue&& idbValue) mutable {
+    value->writeBlobsToDiskForIndexedDB(scriptExecutionContext()->sessionID(), [protectedThis = makeRef(*this), this, protectedOperation = Ref<IDBClient::TransactionOperation>(operation), keyData = IDBKeyData(key.get()).isolatedCopy(), overwriteMode](IDBValue&& idbValue) mutable {
         ASSERT(&originThread() == &Thread::current());
         ASSERT(isMainThread());
         if (idbValue.data().data()) {
             m_database->connectionProxy().putOrAdd(protectedOperation.get(), WTFMove(keyData), idbValue, overwriteMode);
             return;
