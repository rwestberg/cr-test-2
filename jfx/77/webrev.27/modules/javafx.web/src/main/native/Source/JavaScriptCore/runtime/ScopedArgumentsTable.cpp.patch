diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScopedArgumentsTable.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScopedArgumentsTable.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScopedArgumentsTable.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScopedArgumentsTable.cpp
@@ -66,31 +66,33 @@
 
 ScopedArgumentsTable* ScopedArgumentsTable::clone(VM& vm)
 {
     ScopedArgumentsTable* result = create(vm, m_length);
     for (unsigned i = m_length; i--;)
-        result->m_arguments[i] = m_arguments[i];
+        result->at(i) = this->at(i);
     return result;
 }
 
 ScopedArgumentsTable* ScopedArgumentsTable::setLength(VM& vm, uint32_t newLength)
 {
     if (LIKELY(!m_locked)) {
-        ArgumentsPtr newArguments = ArgumentsPtr::create(newLength);
+        ArgumentsPtr newArguments = ArgumentsPtr::create(newLength, newLength);
         for (unsigned i = std::min(m_length, newLength); i--;)
-            newArguments[i] = m_arguments[i];
+            newArguments.at(i, newLength) = this->at(i);
         m_length = newLength;
         m_arguments = WTFMove(newArguments);
         return this;
     }
 
     ScopedArgumentsTable* result = create(vm, newLength);
     for (unsigned i = std::min(m_length, newLength); i--;)
-        result->m_arguments[i] = m_arguments[i];
+        result->at(i) = this->at(i);
     return result;
 }
 
+static_assert(std::is_trivially_destructible<ScopeOffset>::value, "");
+
 ScopedArgumentsTable* ScopedArgumentsTable::set(VM& vm, uint32_t i, ScopeOffset value)
 {
     ScopedArgumentsTable* result;
     if (UNLIKELY(m_locked))
         result = clone(vm);
