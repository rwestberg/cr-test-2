diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/CrossThreadTaskHandler.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/CrossThreadTaskHandler.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/CrossThreadTaskHandler.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/CrossThreadTaskHandler.h
@@ -36,25 +36,38 @@
 class SQLiteDatabase;
 
 class CrossThreadTaskHandler {
 public:
     WTF_EXPORT_PRIVATE virtual ~CrossThreadTaskHandler();
+    enum class AutodrainedPoolForRunLoop { DoNotUse, Use };
 
 protected:
-    WTF_EXPORT_PRIVATE CrossThreadTaskHandler(const char* threadName);
+    WTF_EXPORT_PRIVATE CrossThreadTaskHandler(const char* threadName, AutodrainedPoolForRunLoop = AutodrainedPoolForRunLoop::DoNotUse);
 
     WTF_EXPORT_PRIVATE void postTask(CrossThreadTask&&);
     WTF_EXPORT_PRIVATE void postTaskReply(CrossThreadTask&&);
+    WTF_EXPORT_PRIVATE void suspendAndWait();
+    WTF_EXPORT_PRIVATE void resume();
 
 private:
     void handleTaskRepliesOnMainThread();
     void taskRunLoop();
 
+    AutodrainedPoolForRunLoop m_useAutodrainedPool { AutodrainedPoolForRunLoop::DoNotUse };
+
     Lock m_taskThreadCreationLock;
     Lock m_mainThreadReplyLock;
     bool m_mainThreadReplyScheduled { false };
 
+    bool m_shouldSuspend { false };
+    Condition m_shouldSuspendCondition;
+    Lock m_shouldSuspendLock;
+
+    bool m_suspended { false };
+    Condition m_suspendedCondition;
+    Lock m_suspendedLock;
+
     CrossThreadQueue<CrossThreadTask> m_taskQueue;
     CrossThreadQueue<CrossThreadTask> m_taskReplyQueue;
 };
 
 } // namespace WTF
