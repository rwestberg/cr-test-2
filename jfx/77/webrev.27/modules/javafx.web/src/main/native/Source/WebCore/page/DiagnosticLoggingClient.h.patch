diff a/modules/javafx.web/src/main/native/Source/WebCore/page/DiagnosticLoggingClient.h b/modules/javafx.web/src/main/native/Source/WebCore/page/DiagnosticLoggingClient.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/DiagnosticLoggingClient.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/DiagnosticLoggingClient.h
@@ -25,12 +25,14 @@
 
 #pragma once
 
 #include "DiagnosticLoggingResultType.h"
 #include <wtf/FastMalloc.h>
-#include <wtf/Forward.h>
+#include <wtf/HashMap.h>
 #include <wtf/RandomNumber.h>
+#include <wtf/Variant.h>
+#include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 enum class ShouldSample : bool { No, Yes };
 
@@ -40,10 +42,15 @@
     virtual void logDiagnosticMessage(const String& message, const String& description, ShouldSample) = 0;
     virtual void logDiagnosticMessageWithResult(const String& message, const String& description, DiagnosticLoggingResultType, ShouldSample) = 0;
     virtual void logDiagnosticMessageWithValue(const String& message, const String& description, double value, unsigned significantFigures, ShouldSample) = 0;
     virtual void logDiagnosticMessageWithEnhancedPrivacy(const String& message, const String& description, ShouldSample) = 0;
 
+    using ValuePayload = Variant<String, uint64_t, int64_t, bool, double>;
+    using ValueDictionary = HashMap<String, ValuePayload>;
+
+    virtual void logDiagnosticMessageWithValueDictionary(const String& message, const String& description, const ValueDictionary&, ShouldSample) = 0;
+
     static bool shouldLogAfterSampling(ShouldSample);
 
     virtual ~DiagnosticLoggingClient() = default;
 };
 
