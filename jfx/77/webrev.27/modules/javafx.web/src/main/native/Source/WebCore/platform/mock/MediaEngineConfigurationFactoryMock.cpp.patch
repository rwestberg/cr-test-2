diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MediaEngineConfigurationFactoryMock.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MediaEngineConfigurationFactoryMock.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MediaEngineConfigurationFactoryMock.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MediaEngineConfigurationFactoryMock.cpp
@@ -27,11 +27,12 @@
 
 #include "config.h"
 #include "MediaEngineConfigurationFactoryMock.h"
 
 #include "ContentType.h"
-#include "MediaCapabilitiesInfo.h"
+#include "MediaCapabilitiesDecodingInfo.h"
+#include "MediaCapabilitiesEncodingInfo.h"
 #include "MediaDecodingConfiguration.h"
 #include "MediaEncodingConfiguration.h"
 
 namespace WebCore {
 
@@ -44,10 +45,16 @@
     // Maxing out video decoding support at 720P.
     auto videoConfig = configuration.video;
     if (videoConfig && videoConfig->width > 1280 && videoConfig->height > 720)
         return false;
 
+    // Only the "mock-with-alpha" codec supports alphaChannel
+    if (videoConfig && videoConfig->alphaChannel && videoConfig->alphaChannel.value()) {
+        if (ContentType(videoConfig->contentType).codecsParameter() != "mock-with-alpha")
+            return false;
+    }
+
     // Audio decoding support limited to audio/mp4.
     auto audioConfig = configuration.audio;
     if (audioConfig)
         return ContentType(audioConfig->contentType).containerType() == "audio/mp4";
 
@@ -89,10 +96,16 @@
     // Maxing out video encoding support at 720P.
     auto videoConfig = configuration.video;
     if (videoConfig && videoConfig->width > 1280 && videoConfig->height > 720)
         return false;
 
+    // Only the "mock-with-alpha" codec supports alphaChannel
+    if (videoConfig && videoConfig->alphaChannel && videoConfig->alphaChannel.value()) {
+        if (ContentType(videoConfig->contentType).codecsParameter() != "mock-with-alpha")
+            return false;
+    }
+
     // Audio encoding support limited to audio/mp4.
     auto audioConfig = configuration.audio;
     if (audioConfig && ContentType(audioConfig->contentType).containerType() != "audio/mp4")
         return false;
 
@@ -123,24 +136,25 @@
         return false;
 
     return true;
 }
 
-void MediaEngineConfigurationFactoryMock::createDecodingConfiguration(MediaDecodingConfiguration& configuration, DecodingConfigurationCallback&& callback)
+void MediaEngineConfigurationFactoryMock::createDecodingConfiguration(MediaDecodingConfiguration&& configuration, DecodingConfigurationCallback&& callback)
 {
     if (!canDecodeMedia(configuration)) {
-        callback({ });
+        MediaCapabilitiesDecodingInfo info { WTFMove(configuration) };
+        callback(WTFMove(info));
         return;
     }
-    callback({ true, canSmoothlyDecodeMedia(configuration), canPowerEfficientlyDecodeMedia(configuration) });
+    callback({{ true, canSmoothlyDecodeMedia(configuration), canPowerEfficientlyDecodeMedia(configuration) }, WTFMove(configuration)});
 }
 
-void MediaEngineConfigurationFactoryMock::createEncodingConfiguration(MediaEncodingConfiguration& configuration, EncodingConfigurationCallback&& callback)
+void MediaEngineConfigurationFactoryMock::createEncodingConfiguration(MediaEncodingConfiguration&& configuration, EncodingConfigurationCallback&& callback)
 {
     if (!canEncodeMedia(configuration)) {
-        callback({ });
+        callback({{ }, WTFMove(configuration) });
         return;
     }
-    callback({ true, canSmoothlyEncodeMedia(configuration), canPowerEfficientlyEncodeMedia(configuration) });
+    callback({{ true, canSmoothlyEncodeMedia(configuration), canPowerEfficientlyEncodeMedia(configuration) }, WTFMove(configuration)});
 }
 
 } // namespace WebCore
