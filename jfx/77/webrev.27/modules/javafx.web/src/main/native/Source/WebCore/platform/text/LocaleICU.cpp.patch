diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/text/LocaleICU.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/text/LocaleICU.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/text/LocaleICU.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/text/LocaleICU.cpp
@@ -40,13 +40,13 @@
 
 
 namespace WebCore {
 using namespace icu;
 
-std::unique_ptr<Locale> Locale::create(const AtomicString& locale)
+std::unique_ptr<Locale> Locale::create(const AtomString& locale)
 {
-    return std::make_unique<LocaleICU>(locale.string().utf8().data());
+    return makeUnique<LocaleICU>(locale.string().utf8().data());
 }
 
 LocaleICU::LocaleICU(const char* locale)
     : m_locale(locale)
 {
@@ -161,34 +161,34 @@
 }
 
 std::unique_ptr<Vector<String>> LocaleICU::createLabelVector(const UDateFormat* dateFormat, UDateFormatSymbolType type, int32_t startIndex, int32_t size)
 {
     if (!dateFormat)
-        return std::make_unique<Vector<String>>();
+        return makeUnique<Vector<String>>();
     if (udat_countSymbols(dateFormat, type) != startIndex + size)
-        return std::make_unique<Vector<String>>();
+        return makeUnique<Vector<String>>();
 
-    auto labels = std::make_unique<Vector<String>>();
+    auto labels = makeUnique<Vector<String>>();
     labels->reserveCapacity(size);
     for (int32_t i = 0; i < size; ++i) {
         UErrorCode status = U_ZERO_ERROR;
         int32_t length = udat_getSymbols(dateFormat, type, startIndex + i, 0, 0, &status);
         if (status != U_BUFFER_OVERFLOW_ERROR)
-            return std::make_unique<Vector<String>>();
+            return makeUnique<Vector<String>>();
         Vector<UChar> buffer(length);
         status = U_ZERO_ERROR;
         udat_getSymbols(dateFormat, type, startIndex + i, buffer.data(), length, &status);
         if (U_FAILURE(status))
-            return std::make_unique<Vector<String>>();
+            return makeUnique<Vector<String>>();
         labels->append(String::adopt(WTFMove(buffer)));
     }
     return WTFMove(labels);
 }
 
 static std::unique_ptr<Vector<String>> createFallbackMonthLabels()
 {
-    auto labels = std::make_unique<Vector<String>>();
+    auto labels = makeUnique<Vector<String>>();
     labels->reserveCapacity(WTF_ARRAY_LENGTH(WTF::monthFullName));
     for (unsigned i = 0; i < WTF_ARRAY_LENGTH(WTF::monthFullName); ++i)
         labels->append(WTF::monthFullName[i]);
     return WTFMove(labels);
 }
@@ -206,11 +206,11 @@
     return *m_monthLabels;
 }
 
 static std::unique_ptr<Vector<String>> createFallbackAMPMLabels()
 {
-    auto labels = std::make_unique<Vector<String>>();
+    auto labels = makeUnique<Vector<String>>();
     labels->reserveCapacity(2);
     labels->append("AM");
     labels->append("PM");
     return WTFMove(labels);
 }
