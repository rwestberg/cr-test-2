diff a/modules/javafx.web/src/main/native/Source/WebCore/contentextensions/ContentExtensionParser.cpp b/modules/javafx.web/src/main/native/Source/WebCore/contentextensions/ContentExtensionParser.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/contentextensions/ContentExtensionParser.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/contentextensions/ContentExtensionParser.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2014-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2014-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -76,11 +76,11 @@
         const String& string = asString(value)->value(&exec);
         if (string.isEmpty())
             return makeUnexpected(error);
         strings.append(string);
     }
-    return WTFMove(strings);
+    return strings;
 }
 
 static Expected<Vector<String>, std::error_code> getDomainList(ExecState& exec, const JSObject* arrayObject)
 {
     auto strings = getStringList(exec, arrayObject);
@@ -129,50 +129,50 @@
 static Expected<Trigger, std::error_code> loadTrigger(ExecState& exec, const JSObject& ruleObject)
 {
     VM& vm = exec.vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    const JSValue triggerObject = ruleObject.get(&exec, Identifier::fromString(&exec, "trigger"));
+    const JSValue triggerObject = ruleObject.get(&exec, Identifier::fromString(vm, "trigger"));
     if (!triggerObject || scope.exception() || !triggerObject.isObject())
         return makeUnexpected(ContentExtensionError::JSONInvalidTrigger);
 
-    const JSValue urlFilterObject = triggerObject.get(&exec, Identifier::fromString(&exec, "url-filter"));
+    const JSValue urlFilterObject = triggerObject.get(&exec, Identifier::fromString(vm, "url-filter"));
     if (!urlFilterObject || scope.exception() || !urlFilterObject.isString())
         return makeUnexpected(ContentExtensionError::JSONInvalidURLFilterInTrigger);
 
     String urlFilter = asString(urlFilterObject)->value(&exec);
     if (urlFilter.isEmpty())
         return makeUnexpected(ContentExtensionError::JSONInvalidURLFilterInTrigger);
 
     Trigger trigger;
     trigger.urlFilter = urlFilter;
 
-    const JSValue urlFilterCaseValue = triggerObject.get(&exec, Identifier::fromString(&exec, "url-filter-is-case-sensitive"));
+    const JSValue urlFilterCaseValue = triggerObject.get(&exec, Identifier::fromString(vm, "url-filter-is-case-sensitive"));
     if (urlFilterCaseValue && !scope.exception() && urlFilterCaseValue.isBoolean())
         trigger.urlFilterIsCaseSensitive = urlFilterCaseValue.toBoolean(&exec);
 
-    const JSValue topURLFilterCaseValue = triggerObject.get(&exec, Identifier::fromString(&exec, "top-url-filter-is-case-sensitive"));
+    const JSValue topURLFilterCaseValue = triggerObject.get(&exec, Identifier::fromString(vm, "top-url-filter-is-case-sensitive"));
     if (topURLFilterCaseValue && !scope.exception() && topURLFilterCaseValue.isBoolean())
         trigger.topURLConditionIsCaseSensitive = topURLFilterCaseValue.toBoolean(&exec);
 
-    const JSValue resourceTypeValue = triggerObject.get(&exec, Identifier::fromString(&exec, "resource-type"));
+    const JSValue resourceTypeValue = triggerObject.get(&exec, Identifier::fromString(vm, "resource-type"));
     if (!scope.exception() && resourceTypeValue.isObject()) {
         auto typeFlagsError = getTypeFlags(exec, resourceTypeValue, trigger.flags, readResourceType);
         if (typeFlagsError)
             return makeUnexpected(typeFlagsError);
     } else if (!resourceTypeValue.isUndefined())
         return makeUnexpected(ContentExtensionError::JSONInvalidTriggerFlagsArray);
 
-    const JSValue loadTypeValue = triggerObject.get(&exec, Identifier::fromString(&exec, "load-type"));
+    const JSValue loadTypeValue = triggerObject.get(&exec, Identifier::fromString(vm, "load-type"));
     if (!scope.exception() && loadTypeValue.isObject()) {
         auto typeFlagsError = getTypeFlags(exec, loadTypeValue, trigger.flags, readLoadType);
         if (typeFlagsError)
             return makeUnexpected(typeFlagsError);
     } else if (!loadTypeValue.isUndefined())
         return makeUnexpected(ContentExtensionError::JSONInvalidTriggerFlagsArray);
 
-    const JSValue ifDomainValue = triggerObject.get(&exec, Identifier::fromString(&exec, "if-domain"));
+    const JSValue ifDomainValue = triggerObject.get(&exec, Identifier::fromString(vm, "if-domain"));
     if (!scope.exception() && ifDomainValue.isObject()) {
         auto ifDomain = getDomainList(exec, asObject(ifDomainValue));
         if (!ifDomain.has_value())
             return makeUnexpected(ifDomain.error());
         trigger.conditions = WTFMove(ifDomain.value());
@@ -181,11 +181,11 @@
         ASSERT(trigger.conditionType == Trigger::ConditionType::None);
         trigger.conditionType = Trigger::ConditionType::IfDomain;
     } else if (!ifDomainValue.isUndefined())
         return makeUnexpected(ContentExtensionError::JSONInvalidConditionList);
 
-    const JSValue unlessDomainValue = triggerObject.get(&exec, Identifier::fromString(&exec, "unless-domain"));
+    const JSValue unlessDomainValue = triggerObject.get(&exec, Identifier::fromString(vm, "unless-domain"));
     if (!scope.exception() && unlessDomainValue.isObject()) {
         if (trigger.conditionType != Trigger::ConditionType::None)
             return makeUnexpected(ContentExtensionError::JSONMultipleConditions);
         auto unlessDomain = getDomainList(exec, asObject(unlessDomainValue));
         if (!unlessDomain.has_value())
@@ -195,11 +195,11 @@
             return makeUnexpected(ContentExtensionError::JSONInvalidConditionList);
         trigger.conditionType = Trigger::ConditionType::UnlessDomain;
     } else if (!unlessDomainValue.isUndefined())
         return makeUnexpected(ContentExtensionError::JSONInvalidConditionList);
 
-    const JSValue ifTopURLValue = triggerObject.get(&exec, Identifier::fromString(&exec, "if-top-url"));
+    const JSValue ifTopURLValue = triggerObject.get(&exec, Identifier::fromString(vm, "if-top-url"));
     if (!scope.exception() && ifTopURLValue.isObject()) {
         if (trigger.conditionType != Trigger::ConditionType::None)
             return makeUnexpected(ContentExtensionError::JSONMultipleConditions);
         auto ifTopURL = getStringList(exec, asObject(ifTopURLValue));
         if (!ifTopURL.has_value())
@@ -209,11 +209,11 @@
             return makeUnexpected(ContentExtensionError::JSONInvalidConditionList);
         trigger.conditionType = Trigger::ConditionType::IfTopURL;
     } else if (!ifTopURLValue.isUndefined())
         return makeUnexpected(ContentExtensionError::JSONInvalidConditionList);
 
-    const JSValue unlessTopURLValue = triggerObject.get(&exec, Identifier::fromString(&exec, "unless-top-url"));
+    const JSValue unlessTopURLValue = triggerObject.get(&exec, Identifier::fromString(vm, "unless-top-url"));
     if (!scope.exception() && unlessTopURLValue.isObject()) {
         if (trigger.conditionType != Trigger::ConditionType::None)
             return makeUnexpected(ContentExtensionError::JSONMultipleConditions);
         auto unlessTopURL = getStringList(exec, asObject(unlessTopURLValue));
         if (!unlessTopURL.has_value())
@@ -223,17 +223,17 @@
             return makeUnexpected(ContentExtensionError::JSONInvalidConditionList);
         trigger.conditionType = Trigger::ConditionType::UnlessTopURL;
     } else if (!unlessTopURLValue.isUndefined())
         return makeUnexpected(ContentExtensionError::JSONInvalidConditionList);
 
-    return WTFMove(trigger);
+    return trigger;
 }
 
 bool isValidCSSSelector(const String& selector)
 {
     ASSERT(isMainThread());
-    AtomicString::init();
+    AtomString::init();
     QualifiedName::init();
     CSSParserContext context(HTMLQuirksMode);
     CSSParser parser(context);
     CSSSelectorList selectorList;
     parser.parseSelector(selector, selectorList);
@@ -243,28 +243,28 @@
 static Expected<Optional<Action>, std::error_code> loadAction(ExecState& exec, const JSObject& ruleObject)
 {
     VM& vm = exec.vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    const JSValue actionObject = ruleObject.get(&exec, Identifier::fromString(&exec, "action"));
+    const JSValue actionObject = ruleObject.get(&exec, Identifier::fromString(vm, "action"));
     if (scope.exception() || !actionObject.isObject())
         return makeUnexpected(ContentExtensionError::JSONInvalidAction);
 
-    const JSValue typeObject = actionObject.get(&exec, Identifier::fromString(&exec, "type"));
+    const JSValue typeObject = actionObject.get(&exec, Identifier::fromString(vm, "type"));
     if (scope.exception() || !typeObject.isString())
         return makeUnexpected(ContentExtensionError::JSONInvalidActionType);
 
     String actionType = asString(typeObject)->value(&exec);
 
     if (actionType == "block")
-        return {{ ActionType::BlockLoad }};
+        return { Action(ActionType::BlockLoad) };
     if (actionType == "ignore-previous-rules")
-        return {{ ActionType::IgnorePreviousRules }};
+        return { Action(ActionType::IgnorePreviousRules) };
     if (actionType == "block-cookies")
-        return {{ ActionType::BlockCookies }};
+        return { Action(ActionType::BlockCookies) };
     if (actionType == "css-display-none") {
-        JSValue selector = actionObject.get(&exec, Identifier::fromString(&exec, "selector"));
+        JSValue selector = actionObject.get(&exec, Identifier::fromString(vm, "selector"));
         if (scope.exception() || !selector.isString())
             return makeUnexpected(ContentExtensionError::JSONInvalidCSSDisplayNoneActionType);
 
         String selectorString = asString(selector)->value(&exec);
         if (!isValidCSSSelector(selectorString)) {
@@ -272,13 +272,13 @@
             return { WTF::nullopt };
         }
         return { Action(ActionType::CSSDisplayNoneSelector, selectorString) };
     }
     if (actionType == "make-https")
-        return {{ ActionType::MakeHTTPS }};
+        return { Action(ActionType::MakeHTTPS) };
     if (actionType == "notify") {
-        JSValue notification = actionObject.get(&exec, Identifier::fromString(&exec, "notification"));
+        JSValue notification = actionObject.get(&exec, Identifier::fromString(vm, "notification"));
         if (scope.exception() || !notification.isString())
             return makeUnexpected(ContentExtensionError::JSONInvalidNotification);
         return { Action(ActionType::Notify, asString(notification)->value(&exec)) };
     }
     return makeUnexpected(ContentExtensionError::JSONInvalidActionType);
@@ -340,14 +340,14 @@
 
         auto rule = loadRule(exec, *ruleObject);
         if (!rule.has_value())
             return makeUnexpected(rule.error());
         if (rule.value())
-            ruleList.append(*rule.value());
+            ruleList.append(WTFMove(*rule.value()));
     }
 
-    return WTFMove(ruleList);
+    return ruleList;
 }
 
 Expected<Vector<ContentExtensionRule>, std::error_code> parseRuleList(const String& ruleJSON)
 {
 #if CONTENT_EXTENSIONS_PERFORMANCE_REPORTING
@@ -372,11 +372,11 @@
 #if CONTENT_EXTENSIONS_PERFORMANCE_REPORTING
     MonotonicTime loadExtensionEndTime = MonotonicTime::now();
     dataLogF("Time spent loading extension %f\n", (loadExtensionEndTime - loadExtensionStartTime).seconds());
 #endif
 
-    return WTFMove(*ruleList);
+    return ruleList;
 }
 
 } // namespace ContentExtensions
 } // namespace WebCore
 
