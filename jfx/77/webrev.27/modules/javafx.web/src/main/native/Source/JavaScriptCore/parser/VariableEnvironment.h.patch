diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/VariableEnvironment.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/VariableEnvironment.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/VariableEnvironment.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/VariableEnvironment.h
@@ -112,10 +112,11 @@
     bool captures(UniquedStringImpl* identifier) const;
     void markVariableAsImported(const RefPtr<UniquedStringImpl>& identifier);
     void markVariableAsExported(const RefPtr<UniquedStringImpl>& identifier);
 
     bool isEverythingCaptured() const { return m_isEverythingCaptured; }
+    bool isEmpty() const { return !m_map.size(); }
 
 private:
     friend class CachedVariableEnvironment;
 
     Map m_map;
@@ -123,18 +124,23 @@
 };
 
 class CompactVariableEnvironment {
     WTF_MAKE_FAST_ALLOCATED;
     WTF_MAKE_NONCOPYABLE(CompactVariableEnvironment);
+
+    friend class CachedCompactVariableEnvironment;
+
 public:
     CompactVariableEnvironment(const VariableEnvironment&);
     VariableEnvironment toVariableEnvironment() const;
 
     bool operator==(const CompactVariableEnvironment&) const;
     unsigned hash() const { return m_hash; }
 
 private:
+    CompactVariableEnvironment() = default;
+
     Vector<RefPtr<UniquedStringImpl>> m_variables;
     Vector<VariableEnvironmentEntry> m_variableMetadata;
     unsigned m_hash;
     bool m_isEverythingCaptured;
 };
@@ -202,28 +208,35 @@
 namespace JSC {
 
 class CompactVariableMap : public RefCounted<CompactVariableMap> {
 public:
     class Handle {
+        friend class CachedCompactVariableMapHandle;
+
     public:
         Handle() = default;
 
-        Handle(CompactVariableEnvironment& environment, CompactVariableMap& map)
-            : m_environment(&environment)
-            , m_map(&map)
-        { }
+        Handle(CompactVariableEnvironment&, CompactVariableMap&);
+
         Handle(Handle&& other)
-            : m_environment(other.m_environment)
-            , m_map(WTFMove(other.m_map))
         {
-            RELEASE_ASSERT(!!m_environment == !!m_map);
-            ASSERT(!other.m_map);
-            other.m_environment = nullptr;
+            swap(other);
+        }
+        Handle& operator=(Handle&& other)
+        {
+            Handle handle(WTFMove(other));
+            swap(handle);
+            return *this;
         }
 
         Handle(const Handle&);
-        Handle& operator=(const Handle&);
+        Handle& operator=(const Handle& other)
+        {
+            Handle handle(other);
+            swap(handle);
+            return *this;
+        }
 
         ~Handle();
 
         explicit operator bool() const { return !!m_map; }
 
@@ -231,17 +244,27 @@
         {
             return *m_environment;
         }
 
     private:
+        void swap(Handle& other)
+        {
+            std::swap(other.m_environment, m_environment);
+            std::swap(other.m_map, m_map);
+        }
+
         CompactVariableEnvironment* m_environment { nullptr };
         RefPtr<CompactVariableMap> m_map;
     };
 
     Handle get(const VariableEnvironment&);
 
 private:
     friend class Handle;
+    friend class CachedCompactVariableMapHandle;
+
+    Handle get(CompactVariableEnvironment*, bool& isNewEntry);
+
     HashMap<CompactVariableMapKey, unsigned> m_map;
 };
 
 } // namespace JSC
