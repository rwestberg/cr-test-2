diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/notifications/Notification.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/notifications/Notification.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/notifications/Notification.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/notifications/Notification.cpp
@@ -40,13 +40,16 @@
 #include "EventNames.h"
 #include "NotificationClient.h"
 #include "NotificationController.h"
 #include "NotificationPermissionCallback.h"
 #include "WindowFocusAllowedIndicator.h"
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(Notification);
+
 Ref<Notification> Notification::create(Document& context, const String& title, const Options& options)
 {
     auto notification = adoptRef(*new Notification(context, title, options));
     notification->suspendIfNeeded();
     return notification;
@@ -58,11 +61,11 @@
     , m_direction(options.dir)
     , m_lang(options.lang)
     , m_body(options.body)
     , m_tag(options.tag)
     , m_state(Idle)
-    , m_taskTimer(std::make_unique<Timer>([this] () { show(); }))
+    , m_taskTimer(makeUnique<Timer>([this] () { show(); }))
 {
     if (!options.icon.isEmpty()) {
         auto iconURL = document.completeURL(options.icon);
         if (iconURL.isValid())
             m_icon = iconURL;
@@ -161,16 +164,24 @@
     dispatchEvent(Event::create(eventNames().errorEvent, Event::CanBubble::No, Event::IsCancelable::No));
 }
 
 auto Notification::permission(Document& document) -> Permission
 {
+    auto* page = document.page();
+    if (!page)
+        return Permission::Default;
+
     return NotificationController::from(document.page())->client().checkPermission(&document);
 }
 
 void Notification::requestPermission(Document& document, RefPtr<NotificationPermissionCallback>&& callback)
 {
-    NotificationController::from(document.page())->client().requestPermission(&document, WTFMove(callback));
+    auto* page = document.page();
+    if (!page)
+        return;
+
+    NotificationController::from(page)->client().requestPermission(&document, WTFMove(callback));
 }
 
 } // namespace WebCore
 
 #endif // ENABLE(NOTIFICATIONS)
