diff a/modules/javafx.web/src/main/native/Source/WebCore/css/MediaQueryExpression.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/MediaQueryExpression.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/MediaQueryExpression.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/MediaQueryExpression.cpp
@@ -37,11 +37,11 @@
 #include <wtf/text/TextStream.h>
 #include <wtf/text/StringBuilder.h>
 
 namespace WebCore {
 
-static inline bool featureWithValidIdent(const AtomicString& mediaFeature, const CSSPrimitiveValue& value, const MediaQueryParserContext& context)
+static inline bool featureWithValidIdent(const AtomString& mediaFeature, const CSSPrimitiveValue& value, const MediaQueryParserContext& context)
 {
     if (value.primitiveType() != CSSPrimitiveValue::UnitType::CSS_IDENT)
         return false;
 
     return mediaFeature == MediaFeatureNames::orientation
@@ -53,11 +53,11 @@
     || mediaFeature == MediaFeatureNames::pointer
 #if ENABLE(APPLICATION_MANIFEST)
     || mediaFeature == MediaFeatureNames::displayMode
 #endif
 #if ENABLE(DARK_MODE_CSS)
-    || (mediaFeature == MediaFeatureNames::prefersColorScheme && RuntimeEnabledFeatures::sharedFeatures().darkModeCSSEnabled())
+    || (mediaFeature == MediaFeatureNames::prefersColorScheme)
 #endif
     || mediaFeature == MediaFeatureNames::prefersReducedMotion
     || (mediaFeature == MediaFeatureNames::prefersDarkInterface && (context.useSystemAppearance || isUASheetBehavior(context.mode)));
 }
 
@@ -130,21 +130,21 @@
         return false;
 
     return mediaFeature == MediaFeatureNames::grid;
 }
 
-static inline bool isAspectRatioFeature(const AtomicString& mediaFeature)
+static inline bool isAspectRatioFeature(const AtomString& mediaFeature)
 {
     return mediaFeature == MediaFeatureNames::aspectRatio
         || mediaFeature == MediaFeatureNames::deviceAspectRatio
         || mediaFeature == MediaFeatureNames::minAspectRatio
         || mediaFeature == MediaFeatureNames::maxAspectRatio
         || mediaFeature == MediaFeatureNames::minDeviceAspectRatio
         || mediaFeature == MediaFeatureNames::maxDeviceAspectRatio;
 }
 
-static inline bool isFeatureValidWithoutValue(const AtomicString& mediaFeature, const MediaQueryParserContext& context)
+static inline bool isFeatureValidWithoutValue(const AtomString& mediaFeature, const MediaQueryParserContext& context)
 {
     // Media features that are prefixed by min/max cannot be used without a value.
     return mediaFeature == MediaFeatureNames::anyHover
         || mediaFeature == MediaFeatureNames::anyPointer
         || mediaFeature == MediaFeatureNames::monochrome
@@ -166,11 +166,11 @@
         || mediaFeature == MediaFeatureNames::invertedColors
         || mediaFeature == MediaFeatureNames::pointer
         || mediaFeature == MediaFeatureNames::prefersReducedMotion
         || (mediaFeature == MediaFeatureNames::prefersDarkInterface && (context.useSystemAppearance || isUASheetBehavior(context.mode)))
 #if ENABLE(DARK_MODE_CSS)
-        || (mediaFeature == MediaFeatureNames::prefersColorScheme && RuntimeEnabledFeatures::sharedFeatures().darkModeCSSEnabled())
+        || (mediaFeature == MediaFeatureNames::prefersColorScheme)
 #endif
         || mediaFeature == MediaFeatureNames::devicePixelRatio
         || mediaFeature == MediaFeatureNames::resolution
 #if ENABLE(APPLICATION_MANIFEST)
         || mediaFeature == MediaFeatureNames::displayMode
