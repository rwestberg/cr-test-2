diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringCommon.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringCommon.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringCommon.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringCommon.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2015-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -31,10 +31,16 @@
 #include <wtf/NotFound.h>
 #include <wtf/UnalignedAccess.h>
 
 namespace WTF {
 
+template<typename CharacterType> inline bool isLatin1(CharacterType character)
+{
+    using UnsignedCharacterType = typename std::make_unsigned<CharacterType>::type;
+    return static_cast<UnsignedCharacterType>(character) <= static_cast<UnsignedCharacterType>(0xFF);
+}
+
 using CodeUnitMatchFunction = bool (*)(UChar);
 
 template<typename CharacterTypeA, typename CharacterTypeB> bool equalIgnoringASCIICase(const CharacterTypeA*, const CharacterTypeB*, unsigned length);
 template<typename CharacterTypeA, typename CharacterTypeB> bool equalIgnoringASCIICase(const CharacterTypeA*, unsigned lengthA, const CharacterTypeB*, unsigned lengthB);
 
@@ -464,10 +470,18 @@
             return startOffset + i;
     }
     return notFound;
 }
 
+inline size_t findIgnoringASCIICaseWithoutLength(const char* source, const char* matchCharacters)
+{
+    unsigned searchLength = strlen(source);
+    unsigned matchLength = strlen(matchCharacters);
+
+    return matchLength < searchLength ? findIgnoringASCIICase(source, matchCharacters, 0, searchLength, matchLength) : notFound;
+}
+
 template<typename StringClassA, typename StringClassB>
 size_t findIgnoringASCIICase(const StringClassA& source, const StringClassB& stringToFind, unsigned startOffset)
 {
     unsigned sourceStringLength = source.length();
     unsigned matchLength = stringToFind.length();
@@ -538,11 +552,11 @@
     return find(characters, length, static_cast<UChar>(matchCharacter), index);
 }
 
 inline size_t find(const LChar* characters, unsigned length, UChar matchCharacter, unsigned index = 0)
 {
-    if (matchCharacter & ~0xFF)
+    if (!isLatin1(matchCharacter))
         return notFound;
     return find(characters, length, static_cast<LChar>(matchCharacter), index);
 }
 
 template<typename StringClass>
@@ -656,5 +670,6 @@
 
 }
 
 using WTF::equalIgnoringASCIICase;
 using WTF::equalLettersIgnoringASCIICase;
+using WTF::isLatin1;
