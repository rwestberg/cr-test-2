diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderTableCell.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderTableCell.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderTableCell.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderTableCell.cpp
@@ -196,11 +196,11 @@
         // Nowrap is set, but we didn't actually use it because of the
         // fixed width set on the cell. Even so, it is a WinIE/Moz trait
         // to make the minwidth of the cell into the fixed width. They do this
         // even in strict mode, so do not make this a quirk. Affected the top
         // of hiptop.com.
-        m_minPreferredLogicalWidth = std::max<LayoutUnit>(w.value(), m_minPreferredLogicalWidth);
+        m_minPreferredLogicalWidth = std::max(LayoutUnit(w.value()), m_minPreferredLogicalWidth);
     }
 }
 
 void RenderTableCell::computeIntrinsicPadding(LayoutUnit rowHeight)
 {
@@ -355,11 +355,11 @@
     // includes any outside borders of this cell.
     if (!table()->collapseBorders() || table()->needsSectionRecalc())
         return RenderBlockFlow::clippedOverflowRectForRepaint(repaintContainer);
 
     bool rtl = !styleForCellFlow().isLeftToRightDirection();
-    LayoutUnit outlineSize = style().outlineSize();
+    LayoutUnit outlineSize { style().outlineSize() };
     LayoutUnit left = std::max(borderHalfLeft(true), outlineSize);
     LayoutUnit right = std::max(borderHalfRight(true), outlineSize);
     LayoutUnit top = std::max(borderHalfTop(true), outlineSize);
     LayoutUnit bottom = std::max(borderHalfBottom(true), outlineSize);
     if ((left && !rtl) || (right && rtl)) {
@@ -1285,14 +1285,12 @@
         adjustedPaintOffset.moveBy(location());
 
     const auto& style = backgroundObject->style();
     auto& bgLayer = style.backgroundLayers();
 
-    CompositeOperator compositeOp = CompositeSourceOver;
-    Color color = style.visitedDependentColor(CSSPropertyBackgroundColor);
-    if (document().settings().punchOutWhiteBackgroundsInDarkMode() && Color::isWhiteColor(color) && useDarkAppearance())
-        compositeOp = CompositeDestinationOut;
+    auto color = style.visitedDependentColor(CSSPropertyBackgroundColor);
+    auto compositeOp = document().compositeOperatorForBackgroundColor(color, *this);
 
     color = style.colorByApplyingColorFilter(color);
 
     if (bgLayer.hasImage() || color.isValid()) {
         // We have to clip here because the background would paint
