diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLOutputElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLOutputElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLOutputElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLOutputElement.cpp
@@ -53,22 +53,22 @@
 Ref<HTMLOutputElement> HTMLOutputElement::create(const QualifiedName& tagName, Document& document, HTMLFormElement* form)
 {
     return adoptRef(*new HTMLOutputElement(tagName, document, form));
 }
 
-const AtomicString& HTMLOutputElement::formControlType() const
+const AtomString& HTMLOutputElement::formControlType() const
 {
-    static NeverDestroyed<const AtomicString> output("output", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> output("output", AtomString::ConstructFromLiteral);
     return output;
 }
 
 bool HTMLOutputElement::supportsFocus() const
 {
     return HTMLElement::supportsFocus();
 }
 
-void HTMLOutputElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLOutputElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == forAttr) {
         if (m_tokens)
             m_tokens->associatedAttributeValueChanged(value);
     } else
@@ -130,11 +130,11 @@
 }
 
 DOMTokenList& HTMLOutputElement::htmlFor()
 {
     if (!m_tokens)
-        m_tokens = std::make_unique<DOMTokenList>(*this, forAttr);
+        m_tokens = makeUnique<DOMTokenList>(*this, forAttr);
     return *m_tokens;
 }
 
 void HTMLOutputElement::setTextContentInternal(const String& value)
 {
