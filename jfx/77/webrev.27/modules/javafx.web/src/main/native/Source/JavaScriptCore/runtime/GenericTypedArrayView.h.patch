diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GenericTypedArrayView.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GenericTypedArrayView.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GenericTypedArrayView.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GenericTypedArrayView.h
@@ -56,12 +56,11 @@
     bool setRange(const typename Adaptor::Type* data, size_t count, unsigned offset)
     {
         return setRangeImpl(
             reinterpret_cast<const char*>(data),
             count * sizeof(typename Adaptor::Type),
-            offset * sizeof(typename Adaptor::Type),
-            internalByteLength());
+            offset * sizeof(typename Adaptor::Type));
     }
 
     bool zeroRange(unsigned offset, size_t count)
     {
         return zeroRangeImpl(offset * sizeof(typename Adaptor::Type), count * sizeof(typename Adaptor::Type));
@@ -71,16 +70,11 @@
 
     unsigned length() const
     {
         if (isNeutered())
             return 0;
-        return m_length;
-    }
-
-    unsigned byteLength() const override
-    {
-        return internalByteLength();
+        return byteLength() / sizeof(typename Adaptor::Type);
     }
 
     typename Adaptor::Type item(unsigned index) const
     {
         ASSERT_WITH_SECURITY_IMPLICATION(index < this->length());
@@ -102,12 +96,11 @@
     bool getRange(typename Adaptor::Type* data, size_t count, unsigned offset)
     {
         return getRangeImpl(
             reinterpret_cast<char*>(data),
             count * sizeof(typename Adaptor::Type),
-            offset * sizeof(typename Adaptor::Type),
-            internalByteLength());
+            offset * sizeof(typename Adaptor::Type));
     }
 
     bool checkInboundData(unsigned offset, size_t count) const
     {
         unsigned length = this->length();
@@ -124,16 +117,8 @@
     {
         return Adaptor::typeValue;
     }
 
     JSArrayBufferView* wrap(ExecState*, JSGlobalObject*) override;
-
-private:
-    unsigned internalByteLength() const
-    {
-        return length() * sizeof(typename Adaptor::Type);
-    }
-
-    unsigned m_length;
 };
 
 } // namespace JSC
