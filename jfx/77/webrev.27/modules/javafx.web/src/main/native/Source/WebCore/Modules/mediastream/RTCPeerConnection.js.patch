diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCPeerConnection.js b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCPeerConnection.js
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCPeerConnection.js
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCPeerConnection.js
@@ -77,11 +77,11 @@
 
     if (!@isRTCPeerConnection(this))
         return @Promise.@reject(@makeThisTypeError("RTCPeerConnection", "setLocalDescription"));
 
     if (arguments.length < 1)
-        return @Promise.@reject(new @TypeError("Not enough arguments"));
+        return @Promise.@reject(@makeTypeError("Not enough arguments"));
 
     // FIXME 169644: According the spec, we should throw when receiving a RTCSessionDescription.
     const objectInfo = {
         "constructor": @RTCSessionDescription,
         "argName": "description",
@@ -101,11 +101,11 @@
 
     if (!@isRTCPeerConnection(this))
         return @Promise.@reject(@makeThisTypeError("RTCPeerConnection", "setRemoteDescription"));
 
     if (arguments.length < 1)
-        return @Promise.@reject(new @TypeError("Not enough arguments"));
+        return @Promise.@reject(@makeTypeError("Not enough arguments"));
 
     // FIXME: According the spec, we should only expect RTCSessionDescriptionInit.
     const objectInfo = {
         "constructor": @RTCSessionDescription,
         "argName": "description",
@@ -125,11 +125,11 @@
 
     if (!@isRTCPeerConnection(this))
         return @Promise.@reject(@makeThisTypeError("RTCPeerConnection", "addIceCandidate"));
 
     if (arguments.length < 1)
-        return @Promise.@reject(new @TypeError("Not enough arguments"));
+        return @Promise.@reject(@makeTypeError("Not enough arguments"));
 
     const objectInfo = {
         "constructor": @RTCIceCandidate,
         "argName": "candidate",
         "argType": "RTCIceCandidate",
