diff a/modules/javafx.web/src/main/native/Source/WebCore/html/RadioInputType.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/RadioInputType.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/RadioInputType.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/RadioInputType.cpp
@@ -35,11 +35,11 @@
 
 namespace WebCore {
 
 using namespace HTMLNames;
 
-const AtomicString& RadioInputType::formControlType() const
+const AtomString& RadioInputType::formControlType() const
 {
     return InputTypeNames::radio();
 }
 
 bool RadioInputType::valueMissing(const String&) const
@@ -56,27 +56,28 @@
 void RadioInputType::handleClickEvent(MouseEvent& event)
 {
     event.setDefaultHandled();
 }
 
-void RadioInputType::handleKeydownEvent(KeyboardEvent& event)
+auto RadioInputType::handleKeydownEvent(KeyboardEvent& event) -> ShouldCallBaseEventHandler
 {
-    BaseCheckableInputType::handleKeydownEvent(event);
+    if (BaseCheckableInputType::handleKeydownEvent(event) == ShouldCallBaseEventHandler::No)
+        return ShouldCallBaseEventHandler::No;
     if (event.defaultHandled())
-        return;
+        return ShouldCallBaseEventHandler::Yes;
     const String& key = event.keyIdentifier();
     if (key != "Up" && key != "Down" && key != "Left" && key != "Right")
-        return;
+        return ShouldCallBaseEventHandler::Yes;
 
     ASSERT(element());
     // Left and up mean "previous radio button".
     // Right and down mean "next radio button".
     // Tested in WinIE, and even for RTL, left still means previous radio button (and so moves
     // to the right).  Seems strange, but we'll match it.
     // However, when using Spatial Navigation, we need to be able to navigate without changing the selection.
     if (isSpatialNavigationEnabled(element()->document().frame()))
-        return;
+        return ShouldCallBaseEventHandler::Yes;
     bool forward = (key == "Down" || key == "Right");
 
     // We can only stay within the form's children if the form hasn't been demoted to a leaf because
     // of malformed HTML.
     RefPtr<Node> node = element();
@@ -92,13 +93,14 @@
             break;
         if (inputElement->isRadioButton() && inputElement->name() == element()->name() && inputElement->isFocusable()) {
             element()->document().setFocusedElement(inputElement.get());
             inputElement->dispatchSimulatedClick(&event, SendNoEvents, DoNotShowPressedLook);
             event.setDefaultHandled();
-            return;
+            return ShouldCallBaseEventHandler::Yes;
         }
     }
+    return ShouldCallBaseEventHandler::Yes;
 }
 
 void RadioInputType::handleKeyupEvent(KeyboardEvent& event)
 {
     const String& key = event.keyIdentifier();
