diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/InitDataRegistry.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/InitDataRegistry.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/InitDataRegistry.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/InitDataRegistry.cpp
@@ -34,10 +34,15 @@
 #include "SharedBuffer.h"
 #include <wtf/JSONValues.h>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/text/Base64.h>
 
+#if HAVE(FAIRPLAYSTREAMING_CENC_INITDATA)
+#include "CDMFairPlayStreaming.h"
+#include "ISOFairPlayStreamingPsshBox.h"
+#endif
+
 
 namespace WebCore {
 
 namespace {
     const uint32_t kCencMaxBoxSize = 64 * KB;
@@ -105,40 +110,85 @@
 
     CString jsonData = object->toJSONString().utf8();
     return SharedBuffer::create(jsonData.data(), jsonData.length());
 }
 
-static Optional<Vector<Ref<SharedBuffer>>> extractKeyIDsCenc(const SharedBuffer& buffer)
+Optional<Vector<std::unique_ptr<ISOProtectionSystemSpecificHeaderBox>>> InitDataRegistry::extractPsshBoxesFromCenc(const SharedBuffer& buffer)
 {
     // 4. Common SystemID and PSSH Box Format
     // https://w3c.github.io/encrypted-media/format-registry/initdata/cenc.html#common-system
     if (buffer.size() >= kCencMaxBoxSize)
         return WTF::nullopt;
 
     unsigned offset = 0;
-    Vector<Ref<SharedBuffer>> keyIDs;
+    Vector<std::unique_ptr<ISOProtectionSystemSpecificHeaderBox>> psshBoxes;
 
     auto view = JSC::DataView::create(buffer.tryCreateArrayBuffer(), offset, buffer.size());
     while (auto optionalBoxType = ISOBox::peekBox(view, offset)) {
         auto& boxTypeName = optionalBoxType.value().first;
         auto& boxSize = optionalBoxType.value().second;
 
         if (boxTypeName != ISOProtectionSystemSpecificHeaderBox::boxTypeName() || boxSize > buffer.size())
             return WTF::nullopt;
 
-        ISOProtectionSystemSpecificHeaderBox psshBox;
-        if (!psshBox.read(view, offset))
+        auto systemID = ISOProtectionSystemSpecificHeaderBox::peekSystemID(view, offset);
+#if HAVE(FAIRPLAYSTREAMING_CENC_INITDATA)
+        if (systemID == ISOFairPlayStreamingPsshBox::fairPlaySystemID()) {
+            auto fpsPssh = makeUnique<ISOFairPlayStreamingPsshBox>();
+            if (!fpsPssh->read(view, offset))
+                return WTF::nullopt;
+            psshBoxes.append(WTFMove(fpsPssh));
+            continue;
+        }
+#else
+        UNUSED_PARAM(systemID);
+#endif
+        auto psshBox = makeUnique<ISOProtectionSystemSpecificHeaderBox>();
+        if (!psshBox->read(view, offset))
             return WTF::nullopt;
 
-        for (auto& value : psshBox.keyIDs())
+        psshBoxes.append(WTFMove(psshBox));
+    }
+
+    return psshBoxes;
+}
+
+Optional<Vector<Ref<SharedBuffer>>> InitDataRegistry::extractKeyIDsCenc(const SharedBuffer& buffer)
+{
+    Vector<Ref<SharedBuffer>> keyIDs;
+
+    auto psshBoxes = extractPsshBoxesFromCenc(buffer);
+    if (!psshBoxes)
+        return WTF::nullopt;
+
+    for (auto& psshBox : psshBoxes.value()) {
+        ASSERT(psshBox);
+        if (!psshBox)
+            return WTF::nullopt;
+
+#if HAVE(FAIRPLAYSTREAMING_CENC_INITDATA)
+        if (is<ISOFairPlayStreamingPsshBox>(*psshBox)) {
+            ISOFairPlayStreamingPsshBox& fpsPssh = downcast<ISOFairPlayStreamingPsshBox>(*psshBox);
+
+            FourCC scheme = fpsPssh.initDataBox().info().scheme();
+            if (CDMPrivateFairPlayStreaming::validFairPlayStreamingSchemes().contains(scheme)) {
+                for (auto request : fpsPssh.initDataBox().requests()) {
+                    auto& keyID = request.requestInfo().keyID();
+                    keyIDs.append(SharedBuffer::create(keyID.data(), keyID.size()));
+                }
+            }
+        }
+#endif
+
+        for (auto& value : psshBox->keyIDs())
             keyIDs.append(SharedBuffer::create(WTFMove(value)));
     }
 
     return keyIDs;
 }
 
-static RefPtr<SharedBuffer> sanitizeCenc(const SharedBuffer& buffer)
+RefPtr<SharedBuffer> InitDataRegistry::sanitizeCenc(const SharedBuffer& buffer)
 {
     // 4. Common SystemID and PSSH Box Format
     // https://w3c.github.io/encrypted-media/format-registry/initdata/cenc.html#common-system
     if (!extractKeyIDsCenc(buffer))
         return nullptr;
@@ -182,30 +232,48 @@
     registerInitDataType("webm", { sanitizeWebM, extractKeyIDsWebM });
 }
 
 InitDataRegistry::~InitDataRegistry() = default;
 
-RefPtr<SharedBuffer> InitDataRegistry::sanitizeInitData(const AtomicString& initDataType, const SharedBuffer& buffer)
+RefPtr<SharedBuffer> InitDataRegistry::sanitizeInitData(const AtomString& initDataType, const SharedBuffer& buffer)
 {
     auto iter = m_types.find(initDataType);
     if (iter == m_types.end() || !iter->value.sanitizeInitData)
         return nullptr;
     return iter->value.sanitizeInitData(buffer);
 }
 
-Optional<Vector<Ref<SharedBuffer>>> InitDataRegistry::extractKeyIDs(const AtomicString& initDataType, const SharedBuffer& buffer)
+Optional<Vector<Ref<SharedBuffer>>> InitDataRegistry::extractKeyIDs(const AtomString& initDataType, const SharedBuffer& buffer)
 {
     auto iter = m_types.find(initDataType);
     if (iter == m_types.end() || !iter->value.sanitizeInitData)
         return WTF::nullopt;
     return iter->value.extractKeyIDs(buffer);
 }
 
-void InitDataRegistry::registerInitDataType(const AtomicString& initDataType, InitDataTypeCallbacks&& callbacks)
+void InitDataRegistry::registerInitDataType(const AtomString& initDataType, InitDataTypeCallbacks&& callbacks)
 {
     ASSERT(!m_types.contains(initDataType));
     m_types.set(initDataType, WTFMove(callbacks));
 }
 
+const AtomString& InitDataRegistry::cencName()
+{
+    static NeverDestroyed<AtomString> sinf { MAKE_STATIC_STRING_IMPL("cenc") };
+    return sinf;
+}
+
+const AtomString& InitDataRegistry::keyidsName()
+{
+    static NeverDestroyed<AtomString> sinf { MAKE_STATIC_STRING_IMPL("keyids") };
+    return sinf;
+}
+
+const AtomString& InitDataRegistry::webmName()
+{
+    static NeverDestroyed<AtomString> sinf { MAKE_STATIC_STRING_IMPL("webm") };
+    return sinf;
+}
+
 }
 
 #endif // ENABLE(ENCRYPTED_MEDIA)
