diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLSwitchStatement.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLSwitchStatement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLSwitchStatement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLSwitchStatement.h
@@ -26,37 +26,36 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "WHLSLExpression.h"
-#include "WHLSLLexer.h"
 #include "WHLSLStatement.h"
 #include "WHLSLSwitchCase.h"
+#include <wtf/FastMalloc.h>
 #include <wtf/UniqueRef.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class SwitchStatement : public Statement {
+class SwitchStatement final : public Statement {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    SwitchStatement(Lexer::Token&& origin, UniqueRef<Expression>&& value, Vector<SwitchCase>&& switchCases)
-        : Statement(WTFMove(origin))
+    SwitchStatement(CodeLocation location, UniqueRef<Expression>&& value, Vector<SwitchCase>&& switchCases)
+        : Statement(location, Kind::Switch)
         , m_value(WTFMove(value))
         , m_switchCases(WTFMove(switchCases))
     {
     }
 
-    virtual ~SwitchStatement() = default;
+    ~SwitchStatement() = default;
 
     SwitchStatement(const SwitchStatement&) = delete;
     SwitchStatement(SwitchStatement&&) = default;
 
-    bool isSwitchStatement() const override { return true; }
-
     Expression& value() { return m_value; }
     Vector<SwitchCase>& switchCases() { return m_switchCases; }
 
 private:
     UniqueRef<Expression> m_value;
@@ -67,8 +66,10 @@
 
 }
 
 }
 
+DEFINE_DEFAULT_DELETE(SwitchStatement)
+
 SPECIALIZE_TYPE_TRAITS_WHLSL_STATEMENT(SwitchStatement, isSwitchStatement())
 
 #endif
