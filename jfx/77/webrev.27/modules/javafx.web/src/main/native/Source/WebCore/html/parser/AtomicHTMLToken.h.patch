diff a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/AtomicHTMLToken.h b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/AtomicHTMLToken.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/AtomicHTMLToken.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/AtomicHTMLToken.h
@@ -31,22 +31,22 @@
 namespace WebCore {
 
 class AtomicHTMLToken {
 public:
     explicit AtomicHTMLToken(HTMLToken&);
-    AtomicHTMLToken(HTMLToken::Type, const AtomicString& name, Vector<Attribute>&& = { }); // Only StartTag or EndTag.
+    AtomicHTMLToken(HTMLToken::Type, const AtomString& name, Vector<Attribute>&& = { }); // Only StartTag or EndTag.
 
     AtomicHTMLToken(const AtomicHTMLToken&) = delete;
     AtomicHTMLToken(AtomicHTMLToken&&) = default;
 
     HTMLToken::Type type() const;
 
     // StartTag, EndTag, DOCTYPE.
 
-    void setName(const AtomicString&);
+    void setName(const AtomString&);
 
-    const AtomicString& name() const;
+    const AtomString& name() const;
 
     // DOCTYPE.
 
     bool forceQuirks() const;
     String publicIdentifier() const;
@@ -72,11 +72,11 @@
 private:
     HTMLToken::Type m_type;
 
     void initializeAttributes(const HTMLToken::AttributeList& attributes);
 
-    AtomicString m_name; // StartTag, EndTag, DOCTYPE.
+    AtomString m_name; // StartTag, EndTag, DOCTYPE.
 
     String m_data; // Comment
 
     // We don't want to copy the characters out of the HTMLToken, so we keep a pointer to its buffer instead.
     // This buffer is owned by the HTMLToken and causes a lifetime dependence between these objects.
@@ -90,24 +90,24 @@
     bool m_selfClosing; // StartTag, EndTag.
     Vector<Attribute> m_attributes; // StartTag, EndTag.
 };
 
 const Attribute* findAttribute(const Vector<Attribute>&, const QualifiedName&);
-bool hasAttribute(const Vector<Attribute>&, const AtomicString& localName);
+bool hasAttribute(const Vector<Attribute>&, const AtomString& localName);
 
 inline HTMLToken::Type AtomicHTMLToken::type() const
 {
     return m_type;
 }
 
-inline const AtomicString& AtomicHTMLToken::name() const
+inline const AtomString& AtomicHTMLToken::name() const
 {
     ASSERT(m_type == HTMLToken::StartTag || m_type == HTMLToken::EndTag || m_type == HTMLToken::DOCTYPE);
     return m_name;
 }
 
-inline void AtomicHTMLToken::setName(const AtomicString& name)
+inline void AtomicHTMLToken::setName(const AtomString& name)
 {
     ASSERT(m_type == HTMLToken::StartTag || m_type == HTMLToken::EndTag || m_type == HTMLToken::DOCTYPE);
     m_name = name;
 }
 
@@ -180,11 +180,11 @@
             return &attribute;
     }
     return nullptr;
 }
 
-inline bool hasAttribute(const Vector<Attribute>& attributes, const AtomicString& localName)
+inline bool hasAttribute(const Vector<Attribute>& attributes, const AtomString& localName)
 {
     for (auto& attribute : attributes) {
         if (attribute.localName() == localName)
             return true;
     }
@@ -200,15 +200,15 @@
     m_attributes.reserveInitialCapacity(size);
     for (auto& attribute : attributes) {
         if (attribute.name.isEmpty())
             continue;
 
-        AtomicString localName(attribute.name);
+        AtomString localName(attribute.name);
 
         // FIXME: This is N^2 for the number of attributes.
         if (!hasAttribute(m_attributes, localName))
-            m_attributes.uncheckedAppend(Attribute(QualifiedName(nullAtom(), localName, nullAtom()), AtomicString(attribute.value)));
+            m_attributes.uncheckedAppend(Attribute(QualifiedName(nullAtom(), localName, nullAtom()), AtomString(attribute.value)));
     }
 }
 
 inline AtomicHTMLToken::AtomicHTMLToken(HTMLToken& token)
     : m_type(token.type())
@@ -216,19 +216,19 @@
     switch (m_type) {
     case HTMLToken::Uninitialized:
         ASSERT_NOT_REACHED();
         return;
     case HTMLToken::DOCTYPE:
-        m_name = AtomicString(token.name());
+        m_name = AtomString(token.name());
         m_doctypeData = token.releaseDoctypeData();
         return;
     case HTMLToken::EndOfFile:
         return;
     case HTMLToken::StartTag:
     case HTMLToken::EndTag:
         m_selfClosing = token.selfClosing();
-        m_name = AtomicString(token.name());
+        m_name = AtomString(token.name());
         initializeAttributes(token.attributes());
         return;
     case HTMLToken::Comment:
         if (token.commentIsAll8BitData())
             m_data = String::make8BitFrom16BitSource(token.comment());
@@ -242,11 +242,11 @@
         return;
     }
     ASSERT_NOT_REACHED();
 }
 
-inline AtomicHTMLToken::AtomicHTMLToken(HTMLToken::Type type, const AtomicString& name, Vector<Attribute>&& attributes)
+inline AtomicHTMLToken::AtomicHTMLToken(HTMLToken::Type type, const AtomString& name, Vector<Attribute>&& attributes)
     : m_type(type)
     , m_name(name)
     , m_selfClosing(false)
     , m_attributes(WTFMove(attributes))
 {
