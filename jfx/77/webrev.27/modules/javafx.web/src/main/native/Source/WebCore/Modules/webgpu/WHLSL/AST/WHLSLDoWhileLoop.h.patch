diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLDoWhileLoop.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLDoWhileLoop.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLDoWhileLoop.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLDoWhileLoop.h
@@ -26,36 +26,35 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "WHLSLExpression.h"
-#include "WHLSLLexer.h"
 #include "WHLSLStatement.h"
+#include <wtf/FastMalloc.h>
 #include <wtf/UniqueRef.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class DoWhileLoop : public Statement {
+class DoWhileLoop final : public Statement {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    DoWhileLoop(Lexer::Token&& origin, UniqueRef<Statement>&& body, UniqueRef<Expression>&& conditional)
-        : Statement(WTFMove(origin))
+    DoWhileLoop(CodeLocation location, UniqueRef<Statement>&& body, UniqueRef<Expression>&& conditional)
+        : Statement(location, Kind::DoWhileLoop)
         , m_body(WTFMove(body))
         , m_conditional(WTFMove(conditional))
     {
     }
 
-    virtual ~DoWhileLoop() = default;
+    ~DoWhileLoop() = default;
 
     DoWhileLoop(const DoWhileLoop&) = delete;
     DoWhileLoop(DoWhileLoop&&) = default;
 
-    bool isDoWhileLoop() const override { return true; }
-
     Statement& body() { return m_body; }
     Expression& conditional() { return m_conditional; }
 
 private:
     UniqueRef<Statement> m_body;
@@ -66,8 +65,10 @@
 
 }
 
 }
 
+DEFINE_DEFAULT_DELETE(DoWhileLoop)
+
 SPECIALIZE_TYPE_TRAITS_WHLSL_STATEMENT(DoWhileLoop, isDoWhileLoop())
 
 #endif
