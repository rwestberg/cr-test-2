diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/AudioSession.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/AudioSession.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/AudioSession.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/AudioSession.h
@@ -29,22 +29,25 @@
 
 #include <memory>
 #include <wtf/HashSet.h>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/Noncopyable.h>
+#include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 class AudioSessionPrivate;
 
 enum class RouteSharingPolicy : uint8_t {
     Default,
-    LongForm,
+    LongFormAudio,
     Independent,
+    LongFormVideo
 };
 
-class AudioSession {
+class AudioSession final {
+    WTF_MAKE_FAST_ALLOCATED;
     WTF_MAKE_NONCOPYABLE(AudioSession);
 public:
     WEBCORE_EXPORT static AudioSession& sharedSession();
 
     enum CategoryType {
@@ -54,11 +57,11 @@
         MediaPlayback,
         RecordAudio,
         PlayAndRecord,
         AudioProcessing,
     };
-    WEBCORE_EXPORT void setCategory(CategoryType);
+    WEBCORE_EXPORT void setCategory(CategoryType, RouteSharingPolicy);
     WEBCORE_EXPORT CategoryType category() const;
 
     void setCategoryOverride(CategoryType);
     CategoryType categoryOverride() const;
 
@@ -99,19 +102,43 @@
     std::unique_ptr<AudioSessionPrivate> m_private;
     HashSet<MutedStateObserver*> m_observers;
     bool m_active { false }; // Used only for testing.
 };
 
-}
+String convertEnumerationToString(RouteSharingPolicy);
+String convertEnumerationToString(AudioSession::CategoryType);
+
+} // namespace WebCore
 
 namespace WTF {
 template<> struct EnumTraits<WebCore::RouteSharingPolicy> {
     using values = EnumValues<
     WebCore::RouteSharingPolicy,
     WebCore::RouteSharingPolicy::Default,
-    WebCore::RouteSharingPolicy::LongForm,
-    WebCore::RouteSharingPolicy::Independent
+    WebCore::RouteSharingPolicy::LongFormAudio,
+    WebCore::RouteSharingPolicy::Independent,
+    WebCore::RouteSharingPolicy::LongFormVideo
     >;
 };
-}
+
+template<typename Type>
+struct LogArgument;
+
+template <>
+struct LogArgument<WebCore::RouteSharingPolicy> {
+    static String toString(const WebCore::RouteSharingPolicy policy)
+    {
+        return convertEnumerationToString(policy);
+    }
+};
+
+template <>
+struct LogArgument<WebCore::AudioSession::CategoryType> {
+    static String toString(const WebCore::AudioSession::CategoryType category)
+    {
+        return convertEnumerationToString(category);
+    }
+};
+
+} // namespace WTF
 
 #endif // USE(AUDIO_SESSION)
