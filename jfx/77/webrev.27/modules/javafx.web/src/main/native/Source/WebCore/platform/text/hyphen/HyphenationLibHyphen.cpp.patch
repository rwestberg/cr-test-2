diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/text/hyphen/HyphenationLibHyphen.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/text/hyphen/HyphenationLibHyphen.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/text/hyphen/HyphenationLibHyphen.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/text/hyphen/HyphenationLibHyphen.cpp
@@ -34,16 +34,19 @@
 #include <stdlib.h>
 #include <wtf/FileSystem.h>
 #include <wtf/HashMap.h>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/TinyLRUCache.h>
-#include <wtf/glib/GLibUtilities.h>
-#include <wtf/glib/GUniquePtr.h>
-#include <wtf/text/AtomicStringHash.h>
+#include <wtf/text/AtomStringHash.h>
 #include <wtf/text/CString.h>
 #include <wtf/text/StringView.h>
 
+#if PLATFORM(GTK)
+#include <wtf/glib/GLibUtilities.h>
+#include <wtf/glib/GUniquePtr.h>
+#endif
+
 namespace WebCore {
 
 static const char* const gDictionaryDirectories[] = {
     "/usr/share/hyphen",
     "/usr/local/share/hyphen",
@@ -57,11 +60,11 @@
     static const int prefixLength = 5;
     static const int suffixLength = 4;
     return fileName.substring(prefixLength, fileName.length() - prefixLength - suffixLength);
 }
 
-static void scanDirectoryForDictionaries(const char* directoryPath, HashMap<AtomicString, Vector<String>>& availableLocales)
+static void scanDirectoryForDictionaries(const char* directoryPath, HashMap<AtomString, Vector<String>>& availableLocales)
 {
     for (auto& filePath : FileSystem::listDirectory(directoryPath, "hyph_*.dic")) {
         String locale = extractLocaleFromDictionaryFilePath(filePath).convertToASCIILowercase();
 
         char normalizedPath[PATH_MAX];
@@ -83,10 +86,12 @@
         }
     }
 }
 
 #if ENABLE(DEVELOPER_MODE)
+
+#if PLATFORM(GTK)
 static CString topLevelPath()
 {
     if (const char* topLevelDirectory = g_getenv("WEBKIT_TOP_LEVEL"))
         return topLevelDirectory;
 
@@ -106,12 +111,13 @@
         return webkitOutputDir;
 
     GUniquePtr<char> outputDir(g_build_filename(topLevelPath().data(), "WebKitBuild", nullptr));
     return outputDir.get();
 }
+#endif // PLATFORM(GTK)
 
-static void scanTestDictionariesDirectoryIfNecessary(HashMap<AtomicString, Vector<String>>& availableLocales)
+static void scanTestDictionariesDirectoryIfNecessary(HashMap<AtomString, Vector<String>>& availableLocales)
 {
     // It's unfortunate that we need to look for the dictionaries this way, but
     // libhyphen doesn't have the concept of installed dictionaries. Instead,
     // we have this special case for WebKit tests.
 #if PLATFORM(GTK)
@@ -131,14 +137,14 @@
     UNUSED_PARAM(availableLocales);
 #endif
 }
 #endif
 
-static HashMap<AtomicString, Vector<String>>& availableLocales()
+static HashMap<AtomString, Vector<String>>& availableLocales()
 {
     static bool scannedLocales = false;
-    static HashMap<AtomicString, Vector<String>> availableLocales;
+    static HashMap<AtomString, Vector<String>> availableLocales;
 
     if (!scannedLocales) {
         for (size_t i = 0; i < WTF_ARRAY_LENGTH(gDictionaryDirectories); i++)
             scanDirectoryForDictionaries(gDictionaryDirectories[i], availableLocales);
 
@@ -150,17 +156,17 @@
     }
 
     return availableLocales;
 }
 
-bool canHyphenate(const AtomicString& localeIdentifier)
+bool canHyphenate(const AtomString& localeIdentifier)
 {
     if (localeIdentifier.isNull())
         return false;
     if (availableLocales().contains(localeIdentifier))
         return true;
-    return availableLocales().contains(AtomicString(localeIdentifier.string().convertToASCIILowercase()));
+    return availableLocales().contains(AtomString(localeIdentifier.string().convertToASCIILowercase()));
 }
 
 class HyphenationDictionary : public RefCounted<HyphenationDictionary> {
     WTF_MAKE_NONCOPYABLE(HyphenationDictionary);
     WTF_MAKE_FAST_ALLOCATED;
@@ -201,30 +207,30 @@
 } // namespace WebCore
 
 namespace WTF {
 
 template<>
-class TinyLRUCachePolicy<AtomicString, RefPtr<WebCore::HyphenationDictionary>>
+class TinyLRUCachePolicy<AtomString, RefPtr<WebCore::HyphenationDictionary>>
 {
 public:
-    static TinyLRUCache<AtomicString, RefPtr<WebCore::HyphenationDictionary>, 32>& cache()
+    static TinyLRUCache<AtomString, RefPtr<WebCore::HyphenationDictionary>, 32>& cache()
     {
-        static NeverDestroyed<TinyLRUCache<AtomicString, RefPtr<WebCore::HyphenationDictionary>, 32>> cache;
+        static NeverDestroyed<TinyLRUCache<AtomString, RefPtr<WebCore::HyphenationDictionary>, 32>> cache;
         return cache;
     }
 
-    static bool isKeyNull(const AtomicString& localeIdentifier)
+    static bool isKeyNull(const AtomString& localeIdentifier)
     {
         return localeIdentifier.isNull();
     }
 
     static RefPtr<WebCore::HyphenationDictionary> createValueForNullKey()
     {
         return WebCore::HyphenationDictionary::createNull();
     }
 
-    static RefPtr<WebCore::HyphenationDictionary> createValueForKey(const AtomicString& dictionaryPath)
+    static RefPtr<WebCore::HyphenationDictionary> createValueForKey(const AtomString& dictionaryPath)
     {
         return WebCore::HyphenationDictionary::create(FileSystem::fileSystemRepresentation(dictionaryPath.string()));
     }
 };
 
@@ -248,11 +254,11 @@
         pointerOffset = nextPointerOffset;
         characterOffset++;
     }
 }
 
-size_t lastHyphenLocation(StringView string, size_t beforeIndex, const AtomicString& localeIdentifier)
+size_t lastHyphenLocation(StringView string, size_t beforeIndex, const AtomString& localeIdentifier)
 {
     // libhyphen accepts strings in UTF-8 format, but WebCore can only provide StringView
     // which stores either UTF-16 or Latin1 data. This is unfortunate for performance
     // reasons and we should consider switching to a more flexible hyphenation library
     // if it is available.
@@ -268,18 +274,18 @@
     // The libhyphen documentation specifies that this array should be 5 bytes longer than
     // the byte length of the input string.
     Vector<char> hyphenArray(utf8StringCopy.length() - leadingSpaceBytes + 5);
     char* hyphenArrayData = hyphenArray.data();
 
-    String lowercaseLocaleIdentifier = AtomicString(localeIdentifier.string().convertToASCIILowercase());
+    String lowercaseLocaleIdentifier = AtomString(localeIdentifier.string().convertToASCIILowercase());
 
     // Web content may specify strings for locales which do not exist or that we do not have.
     if (!availableLocales().contains(lowercaseLocaleIdentifier))
         return 0;
 
     for (const auto& dictionaryPath : availableLocales().get(lowercaseLocaleIdentifier)) {
-        RefPtr<HyphenationDictionary> dictionary = WTF::TinyLRUCachePolicy<AtomicString, RefPtr<HyphenationDictionary>>::cache().get(AtomicString(dictionaryPath));
+        RefPtr<HyphenationDictionary> dictionary = WTF::TinyLRUCachePolicy<AtomString, RefPtr<HyphenationDictionary>>::cache().get(AtomString(dictionaryPath));
 
         char** replacements = nullptr;
         int* positions = nullptr;
         int* removedCharacterCounts = nullptr;
         hnj_hyphen_hyphenate2(dictionary->libhyphenDictionary(),
