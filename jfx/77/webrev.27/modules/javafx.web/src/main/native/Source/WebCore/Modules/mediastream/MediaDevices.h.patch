diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaDevices.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaDevices.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaDevices.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaDevices.h
@@ -50,11 +50,12 @@
 class MediaDeviceInfo;
 class MediaStream;
 
 struct MediaTrackSupportedConstraints;
 
-class MediaDevices : public RefCounted<MediaDevices>, public ActiveDOMObject, public EventTargetWithInlineData, public CanMakeWeakPtr<MediaDevices> {
+class MediaDevices final : public RefCounted<MediaDevices>, public ActiveDOMObject, public EventTargetWithInlineData, public CanMakeWeakPtr<MediaDevices> {
+    WTF_MAKE_ISO_ALLOCATED(MediaDevices);
 public:
     static Ref<MediaDevices> create(Document&);
 
     ~MediaDevices();
 
@@ -73,22 +74,27 @@
     struct StreamConstraints {
         Variant<bool, MediaTrackConstraints> video;
         Variant<bool, MediaTrackConstraints> audio;
     };
     void getUserMedia(const StreamConstraints&, Promise&&) const;
-    ExceptionOr<void> getDisplayMedia(const StreamConstraints&, Promise&&) const;
-    void enumerateDevices(EnumerateDevicesPromise&&) const;
+    void getDisplayMedia(const StreamConstraints&, Promise&&) const;
+    void enumerateDevices(EnumerateDevicesPromise&&);
     MediaTrackSupportedConstraints getSupportedConstraints();
 
     using RefCounted<MediaDevices>::ref;
     using RefCounted<MediaDevices>::deref;
 
+    void setDisableGetDisplayMediaUserGestureConstraint(bool value) { m_disableGetDisplayMediaUserGestureConstraint = value; }
+
 private:
     explicit MediaDevices(Document&);
 
     void scheduledEventTimerFired();
-    bool addEventListener(const AtomicString& eventType, Ref<EventListener>&&, const AddEventListenerOptions&) override;
+    bool addEventListener(const AtomString& eventType, Ref<EventListener>&&, const AddEventListenerOptions&) override;
+
+    void refreshDevices(const Vector<CaptureDevice>&);
+    void listenForDeviceChanges();
 
     friend class JSMediaDevicesOwner;
 
     // ActiveDOMObject
     const char* activeDOMObjectName() const final;
@@ -104,10 +110,15 @@
 
     Timer m_scheduledEventTimer;
     UserMediaClient::DeviceChangeObserverToken m_deviceChangeToken;
     const EventNames& m_eventNames; // Need to cache this so we can use it from GC threads.
     bool m_listeningForDeviceChanges { false };
+    bool m_disableGetDisplayMediaUserGestureConstraint { false };
+
+    Vector<Ref<MediaDeviceInfo>> m_devices;
+    bool m_canAccessCamera { false };
+    bool m_canAccessMicrophone { false };
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(MEDIA_STREAM)
