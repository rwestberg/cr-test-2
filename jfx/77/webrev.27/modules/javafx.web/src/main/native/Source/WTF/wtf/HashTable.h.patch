diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/HashTable.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/HashTable.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/HashTable.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/HashTable.h
@@ -103,10 +103,11 @@
 
     typedef enum { HashItemKnownGood } HashItemKnownGoodTag;
 
     template<typename Key, typename Value, typename Extractor, typename HashFunctions, typename Traits, typename KeyTraits>
     class HashTableConstIterator : public std::iterator<std::forward_iterator_tag, Value, std::ptrdiff_t, const Value*, const Value&> {
+        WTF_MAKE_FAST_ALLOCATED;
     private:
         typedef HashTable<Key, Value, Extractor, HashFunctions, Traits, KeyTraits> HashTableType;
         typedef HashTableIterator<Key, Value, Extractor, HashFunctions, Traits, KeyTraits> iterator;
         typedef HashTableConstIterator<Key, Value, Extractor, HashFunctions, Traits, KeyTraits> const_iterator;
         typedef Value ValueType;
@@ -239,10 +240,11 @@
 #endif
     };
 
     template<typename Key, typename Value, typename Extractor, typename HashFunctions, typename Traits, typename KeyTraits>
     class HashTableIterator : public std::iterator<std::forward_iterator_tag, Value, std::ptrdiff_t, Value*, Value&> {
+        WTF_MAKE_FAST_ALLOCATED;
     private:
         typedef HashTable<Key, Value, Extractor, HashFunctions, Traits, KeyTraits> HashTableType;
         typedef HashTableIterator<Key, Value, Extractor, HashFunctions, Traits, KeyTraits> iterator;
         typedef HashTableConstIterator<Key, Value, Extractor, HashFunctions, Traits, KeyTraits> const_iterator;
         typedef Value ValueType;
@@ -309,10 +311,12 @@
         typedef IdentityHashTranslator<ValueTraits, HashFunctions> IdentityTranslatorType;
         typedef HashTableAddResult<iterator> AddResult;
 
 #if DUMP_HASHTABLE_STATS_PER_TABLE
         struct Stats {
+            WTF_MAKE_STRUCT_FAST_ALLOCATED;
+
             Stats()
                 : numAccesses(0)
                 , numRehashes(0)
                 , numRemoves(0)
                 , numReinserts(0)
@@ -414,10 +418,24 @@
 
         unsigned size() const { return m_keyCount; }
         unsigned capacity() const { return m_tableSize; }
         bool isEmpty() const { return !m_keyCount; }
 
+        void reserveInitialCapacity(unsigned keyCount)
+        {
+            ASSERT(!m_table);
+            ASSERT(!m_tableSize);
+            ASSERT(!m_deletedCount);
+
+            unsigned minimumTableSize = KeyTraits::minimumTableSize;
+            unsigned newTableSize = std::max(minimumTableSize, computeBestTableSize(keyCount));
+
+            m_tableSize = newTableSize;
+            m_tableSizeMask = newTableSize - 1;
+            m_table = allocateTable(newTableSize);
+        }
+
         AddResult add(const ValueType& value) { return add<IdentityTranslatorType>(Extractor::extract(value), value); }
         AddResult add(ValueType&& value) { return add<IdentityTranslatorType>(Extractor::extract(value), WTFMove(value)); }
 
         // A special version of add() that finds the object by hashing and comparing
         // with some other type, to avoid the cost of type conversion if the object is already
@@ -440,10 +458,11 @@
         template<typename Functor>
         bool removeIf(const Functor&);
         void clear();
 
         static bool isEmptyBucket(const ValueType& value) { return isHashTraitsEmptyValue<KeyTraits>(Extractor::extract(value)); }
+        static bool isReleasedWeakBucket(const ValueType& value) { return isHashTraitsReleasedWeakValue<KeyTraits>(Extractor::extract(value)); }
         static bool isDeletedBucket(const ValueType& value) { return KeyTraits::isDeletedValue(Extractor::extract(value)); }
         static bool isEmptyOrDeletedBucket(const ValueType& value) { return isEmptyBucket(value) || isDeletedBucket(value); }
 
         ValueType* lookup(const Key& key) { return lookup<IdentityTranslatorType>(key); }
         template<typename HashTranslator, typename T> ValueType* lookup(const T&);
@@ -479,15 +498,19 @@
 
         void removeAndInvalidateWithoutEntryConsistencyCheck(ValueType*);
         void removeAndInvalidate(ValueType*);
         void remove(ValueType*);
 
+        static constexpr unsigned computeBestTableSize(unsigned keyCount);
         bool shouldExpand() const { return (m_keyCount + m_deletedCount) * m_maxLoad >= m_tableSize; }
         bool mustRehashInPlace() const { return m_keyCount * m_minLoad < m_tableSize * 2; }
         bool shouldShrink() const { return m_keyCount * m_minLoad < m_tableSize && m_tableSize > KeyTraits::minimumTableSize; }
         ValueType* expand(ValueType* entry = nullptr);
         void shrink() { rehash(m_tableSize / 2, nullptr); }
+        void shrinkToBestSize();
+
+        void deleteReleasedWeakBuckets();
 
         ValueType* rehash(unsigned newTableSize, ValueType* entry);
         ValueType* reinsert(ValueType&&);
 
         static void initializeBucket(ValueType& bucket);
@@ -581,14 +604,14 @@
         , m_tableSizeMask(0)
         , m_keyCount(0)
         , m_deletedCount(0)
 #if CHECK_HASHTABLE_ITERATORS
         , m_iterators(0)
-        , m_mutex(std::make_unique<Lock>())
+        , m_mutex(makeUnique<Lock>())
 #endif
 #if DUMP_HASHTABLE_STATS_PER_TABLE
-        , m_stats(std::make_unique<Stats>())
+        , m_stats(makeUnique<Stats>())
 #endif
     {
     }
 
     inline unsigned doubleHash(unsigned key)
@@ -1162,11 +1185,11 @@
         }
         m_deletedCount += removedBucketCount;
         m_keyCount -= removedBucketCount;
 
         if (shouldShrink())
-            shrink();
+            shrinkToBestSize();
 
         internalCheckTableConsistency();
         return removedBucketCount;
     }
 
@@ -1194,10 +1217,13 @@
     }
 
     template<typename Key, typename Value, typename Extractor, typename HashFunctions, typename Traits, typename KeyTraits>
     auto HashTable<Key, Value, Extractor, HashFunctions, Traits, KeyTraits>::expand(ValueType* entry) -> ValueType*
     {
+        if (KeyTraits::hasIsReleasedWeakValueFunction)
+            deleteReleasedWeakBuckets();
+
         unsigned newSize;
         if (m_tableSize == 0)
             newSize = KeyTraits::minimumTableSize;
         else if (mustRehashInPlace())
             newSize = m_tableSize;
@@ -1205,10 +1231,46 @@
             newSize = m_tableSize * 2;
 
         return rehash(newSize, entry);
     }
 
+    template<typename Key, typename Value, typename Extractor, typename HashFunctions, typename Traits, typename KeyTraits>
+    constexpr unsigned HashTable<Key, Value, Extractor, HashFunctions, Traits, KeyTraits>::computeBestTableSize(unsigned keyCount)
+    {
+        unsigned bestTableSize = WTF::roundUpToPowerOfTwo(keyCount) * 2;
+
+        // With maxLoad at 1/2 and minLoad at 1/6, our average load is 2/6.
+        // If we are getting halfway between 2/6 and 1/2 (past 5/12), we double the size to avoid being too close to
+        // loadMax and bring the ratio close to 2/6. This give us a load in the bounds [3/12, 5/12).
+        bool aboveThreeQuarterLoad = keyCount * 12 >= bestTableSize * 5;
+        if (aboveThreeQuarterLoad)
+            bestTableSize *= 2;
+
+        unsigned minimumTableSize = KeyTraits::minimumTableSize;
+        return std::max(bestTableSize, minimumTableSize);
+    }
+
+    template<typename Key, typename Value, typename Extractor, typename HashFunctions, typename Traits, typename KeyTraits>
+    void HashTable<Key, Value, Extractor, HashFunctions, Traits, KeyTraits>::shrinkToBestSize()
+    {
+        unsigned minimumTableSize = KeyTraits::minimumTableSize;
+        rehash(std::max(minimumTableSize, computeBestTableSize(m_keyCount)), nullptr);
+    }
+
+    template<typename Key, typename Value, typename Extractor, typename HashFunctions, typename Traits, typename KeyTraits>
+    void HashTable<Key, Value, Extractor, HashFunctions, Traits, KeyTraits>::deleteReleasedWeakBuckets()
+    {
+        for (unsigned i = 0; i < m_tableSize; ++i) {
+            auto& entry = m_table[i];
+            if (isReleasedWeakBucket(entry)) {
+                deleteBucket(entry);
+                ++m_deletedCount;
+                --m_keyCount;
+            }
+        }
+    }
+
     template<typename Key, typename Value, typename Extractor, typename HashFunctions, typename Traits, typename KeyTraits>
     auto HashTable<Key, Value, Extractor, HashFunctions, Traits, KeyTraits>::rehash(unsigned newTableSize, ValueType* entry) -> ValueType*
     {
         internalCheckTableConsistencyExceptSize();
 
@@ -1229,24 +1291,32 @@
         m_tableSizeMask = newTableSize - 1;
         m_table = allocateTable(newTableSize);
 
         Value* newEntry = nullptr;
         for (unsigned i = 0; i != oldTableSize; ++i) {
-            if (isDeletedBucket(oldTable[i])) {
-                ASSERT(std::addressof(oldTable[i]) != entry);
+            auto& oldEntry = oldTable[i];
+            if (isDeletedBucket(oldEntry)) {
+                ASSERT(std::addressof(oldEntry) != entry);
                 continue;
             }
 
-            if (isEmptyBucket(oldTable[i])) {
-                ASSERT(std::addressof(oldTable[i]) != entry);
+            if (isEmptyBucket(oldEntry)) {
+                ASSERT(std::addressof(oldEntry) != entry);
                 oldTable[i].~ValueType();
                 continue;
             }
 
-            Value* reinsertedEntry = reinsert(WTFMove(oldTable[i]));
-            oldTable[i].~ValueType();
-            if (std::addressof(oldTable[i]) == entry) {
+            if (isReleasedWeakBucket(oldEntry)) {
+                ASSERT(std::addressof(oldEntry) != entry);
+                oldEntry.~ValueType();
+                --m_keyCount;
+                continue;
+            }
+
+            Value* reinsertedEntry = reinsert(WTFMove(oldEntry));
+            oldEntry.~ValueType();
+            if (std::addressof(oldEntry) == entry) {
                 ASSERT(!newEntry);
                 newEntry = reinsertedEntry;
             }
         }
 
@@ -1280,31 +1350,21 @@
         , m_tableSizeMask(0)
         , m_keyCount(0)
         , m_deletedCount(0)
 #if CHECK_HASHTABLE_ITERATORS
         , m_iterators(nullptr)
-        , m_mutex(std::make_unique<Lock>())
+        , m_mutex(makeUnique<Lock>())
 #endif
 #if DUMP_HASHTABLE_STATS_PER_TABLE
-        , m_stats(std::make_unique<Stats>(*other.m_stats))
+        , m_stats(makeUnique<Stats>(*other.m_stats))
 #endif
     {
         unsigned otherKeyCount = other.size();
         if (!otherKeyCount)
             return;
 
-        unsigned bestTableSize = WTF::roundUpToPowerOfTwo(otherKeyCount) * 2;
-
-        // With maxLoad at 1/2 and minLoad at 1/6, our average load is 2/6.
-        // If we are getting halfway between 2/6 and 1/2 (past 5/12), we double the size to avoid being too close to
-        // loadMax and bring the ratio close to 2/6. This give us a load in the bounds [3/12, 5/12).
-        bool aboveThreeQuarterLoad = otherKeyCount * 12 >= bestTableSize * 5;
-        if (aboveThreeQuarterLoad)
-            bestTableSize *= 2;
-
-        unsigned minimumTableSize = KeyTraits::minimumTableSize;
-        m_tableSize = std::max<unsigned>(bestTableSize, minimumTableSize);
+        m_tableSize = computeBestTableSize(otherKeyCount);
         m_tableSizeMask = m_tableSize - 1;
         m_keyCount = otherKeyCount;
         m_table = allocateTable(m_tableSize);
 
         for (const auto& otherValue : other)
@@ -1338,11 +1398,11 @@
 
     template<typename Key, typename Value, typename Extractor, typename HashFunctions, typename Traits, typename KeyTraits>
     inline HashTable<Key, Value, Extractor, HashFunctions, Traits, KeyTraits>::HashTable(HashTable&& other)
 #if CHECK_HASHTABLE_ITERATORS
         : m_iterators(nullptr)
-        , m_mutex(std::make_unique<Lock>())
+        , m_mutex(makeUnique<Lock>())
 #endif
     {
         other.invalidateIterators();
 
         m_table = other.m_table;
@@ -1397,15 +1457,16 @@
             if (isDeletedBucket(*entry)) {
                 ++deletedCount;
                 continue;
             }
 
-            const_iterator it = find(Extractor::extract(*entry));
+            auto& key = Extractor::extract(*entry);
+            const_iterator it = find(key);
             ASSERT(entry == it.m_position);
             ++count;
 
-            ValueCheck<Key>::checkConsistency(it->key);
+            ValueCheck<Key>::checkConsistency(key);
         }
 
         ASSERT(count == m_keyCount);
         ASSERT(deletedCount == m_deletedCount);
         ASSERT(m_tableSize >= KeyTraits::minimumTableSize);
