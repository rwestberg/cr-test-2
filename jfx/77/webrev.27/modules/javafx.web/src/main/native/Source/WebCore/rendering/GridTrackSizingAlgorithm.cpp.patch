diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/GridTrackSizingAlgorithm.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/GridTrackSizingAlgorithm.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/GridTrackSizingAlgorithm.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/GridTrackSizingAlgorithm.cpp
@@ -679,11 +679,11 @@
         // treating all such tracks as inflexible.
         if (baseSize > hypotheticalFactorUnitSize * flexFactor) {
             leftOverSpace -= baseSize;
             flexFactorSum -= flexFactor;
             if (!tracksToTreatAsInflexible)
-                tracksToTreatAsInflexible = std::make_unique<TrackIndexSet>();
+                tracksToTreatAsInflexible = makeUnique<TrackIndexSet>();
             tracksToTreatAsInflexible->add(index);
             validFlexFactorUnit = false;
         }
     }
     if (!validFlexFactorUnit)
@@ -797,14 +797,18 @@
 
 LayoutUnit GridTrackSizingAlgorithmStrategy::minSizeForChild(RenderBox& child) const
 {
     GridTrackSizingDirection childInlineDirection = GridLayoutFunctions::flowAwareDirectionForChild(*renderGrid(), child, ForColumns);
     bool isRowAxis = direction() == childInlineDirection;
-    const Length& childMinSize = isRowAxis ? child.style().logicalMinWidth() : child.style().logicalMinHeight();
     const Length& childSize = isRowAxis ? child.style().logicalWidth() : child.style().logicalHeight();
+    if (!childSize.isAuto())
+        return minContentForChild(child);
 
+    const Length& childMinSize = isRowAxis ? child.style().logicalMinWidth() : child.style().logicalMinHeight();
     bool overflowIsVisible = isRowAxis ? child.style().overflowInlineDirection() == Overflow::Visible : child.style().overflowBlockDirection() == Overflow::Visible;
+    LayoutUnit baselineShim = m_algorithm.baselineOffsetForChild(child, gridAxisForDirection(direction()));
+
     if (childSize.isAuto() && childMinSize.isAuto() && overflowIsVisible) {
         auto minSize = minContentForChild(child);
         LayoutUnit maxBreadth;
         for (auto trackPosition : m_algorithm.grid().gridItemSpan(child, direction())) {
             GridTrackSize trackSize = m_algorithm.gridTrackSize(direction(), trackPosition);
@@ -813,19 +817,15 @@
             maxBreadth += valueForLength(trackSize.maxTrackBreadth().length(), availableSpace().valueOr(0_lu));
         }
         if (minSize > maxBreadth) {
             auto marginAndBorderAndPadding = GridLayoutFunctions::marginLogicalSizeForChild(*renderGrid(), direction(), child);
             marginAndBorderAndPadding += isRowAxis ? child.borderAndPaddingLogicalWidth() : child.borderAndPaddingLogicalHeight();
-            minSize = std::max(maxBreadth, marginAndBorderAndPadding);
+            minSize = std::max(maxBreadth, marginAndBorderAndPadding + baselineShim);
         }
         return minSize;
     }
 
-    if (!childSize.isAuto())
-        return minContentForChild(child);
-
-    LayoutUnit baselineShim = m_algorithm.baselineOffsetForChild(child, gridAxisForDirection(direction()));
     LayoutUnit gridAreaSize = m_algorithm.gridAreaBreadthForChild(child, childInlineDirection);
     if (isRowAxis)
         return minLogicalWidthForChild(child, childMinSize, gridAreaSize) + baselineShim;
 
     bool overrideSizeHasChanged = updateOverrideContainingBlockContentSizeForChild(child, childInlineDirection, gridAreaSize);
@@ -1258,14 +1258,14 @@
     setAvailableSpace(direction, availableSpace);
 
     m_sizingOperation = sizingOperation;
     switch (m_sizingOperation) {
     case IntrinsicSizeComputation:
-        m_strategy = std::make_unique<IndefiniteSizeStrategy>(*this);
+        m_strategy = makeUnique<IndefiniteSizeStrategy>(*this);
         break;
     case TrackSizing:
-        m_strategy = std::make_unique<DefiniteSizeStrategy>(*this);
+        m_strategy = makeUnique<DefiniteSizeStrategy>(*this);
         break;
     }
 
     m_contentSizedTracksIndex.shrink(0);
     m_flexibleSizedTracksIndex.shrink(0);
