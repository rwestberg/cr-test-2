diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/TextBreakIterator.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/TextBreakIterator.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/TextBreakIterator.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/TextBreakIterator.cpp
@@ -33,11 +33,11 @@
 
 namespace WTF {
 
 #if !PLATFORM(MAC) && !PLATFORM(IOS_FAMILY)
 
-static Variant<TextBreakIteratorICU, TextBreakIteratorPlatform> mapModeToBackingIterator(StringView string, TextBreakIterator::Mode mode, const AtomicString& locale)
+static Variant<TextBreakIteratorICU, TextBreakIteratorPlatform> mapModeToBackingIterator(StringView string, TextBreakIterator::Mode mode, const AtomString& locale)
 {
     switch (mode) {
     case TextBreakIterator::Mode::Line:
         return TextBreakIteratorICU(string, TextBreakIteratorICU::Mode::Line, locale.string().utf8().data());
     case TextBreakIterator::Mode::Caret:
@@ -48,11 +48,11 @@
         ASSERT_NOT_REACHED();
         return TextBreakIteratorICU(string, TextBreakIteratorICU::Mode::Character, locale.string().utf8().data());
     }
 }
 
-TextBreakIterator::TextBreakIterator(StringView string, Mode mode, const AtomicString& locale)
+TextBreakIterator::TextBreakIterator(StringView string, Mode mode, const AtomString& locale)
     : m_backing(mapModeToBackingIterator(string, mode, locale))
     , m_mode(mode)
     , m_locale(locale)
 {
 }
@@ -169,11 +169,11 @@
         return nullptr;
 
     return setTextForIterator(*staticSentenceBreakIterator, string);
 }
 
-UBreakIterator* acquireLineBreakIterator(StringView string, const AtomicString& locale, const UChar* priorContext, unsigned priorContextLength, LineBreakIteratorMode mode)
+UBreakIterator* acquireLineBreakIterator(StringView string, const AtomString& locale, const UChar* priorContext, unsigned priorContextLength, LineBreakIteratorMode mode)
 {
     UBreakIterator* iterator = LineBreakIteratorPool::sharedPool().take(locale, mode);
     if (!iterator)
         return nullptr;
 
@@ -185,11 +185,11 @@
     ASSERT_ARG(iterator, iterator);
 
     LineBreakIteratorPool::sharedPool().put(iterator);
 }
 
-UBreakIterator* openLineBreakIterator(const AtomicString& locale)
+UBreakIterator* openLineBreakIterator(const AtomString& locale)
 {
     bool localeIsEmpty = locale.isEmpty();
     UErrorCode openStatus = U_ZERO_ERROR;
     UBreakIterator* ubrkIter = ubrk_open(UBRK_LINE, localeIsEmpty ? currentTextBreakLocaleID() : locale.string().utf8().data(), 0, 0, &openStatus);
     // locale comes from a web page and it can be invalid, leading ICU
