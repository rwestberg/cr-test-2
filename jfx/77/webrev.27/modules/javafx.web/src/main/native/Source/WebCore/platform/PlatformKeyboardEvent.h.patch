diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/PlatformKeyboardEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/PlatformKeyboardEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/PlatformKeyboardEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/PlatformKeyboardEvent.h
@@ -55,13 +55,10 @@
         WTF_MAKE_FAST_ALLOCATED;
     public:
         PlatformKeyboardEvent()
             : PlatformEvent(PlatformEvent::KeyDown)
             , m_windowsVirtualKeyCode(0)
-#if USE(APPKIT) || PLATFORM(GTK)
-            , m_handledByInputMethod(false)
-#endif
             , m_autoRepeat(false)
             , m_isKeypad(false)
             , m_isSystemKey(false)
 #if PLATFORM(GTK)
             , m_gdkEventKey(0)
@@ -86,13 +83,10 @@
 #if ENABLE(KEYBOARD_CODE_ATTRIBUTE)
             , m_code(code)
 #endif
             , m_keyIdentifier(keyIdentifier)
             , m_windowsVirtualKeyCode(windowsVirtualKeyCode)
-#if USE(APPKIT) || PLATFORM(GTK)
-            , m_handledByInputMethod(false)
-#endif
             , m_autoRepeat(isAutoRepeat)
             , m_isKeypad(isKeypad)
             , m_isSystemKey(isSystemKey)
         {
         }
@@ -124,11 +118,11 @@
         // Most compatible Windows virtual key code associated with the event.
         // Zero for Char events.
         int windowsVirtualKeyCode() const { return m_windowsVirtualKeyCode; }
         void setWindowsVirtualKeyCode(int code) { m_windowsVirtualKeyCode = code; }
 
-#if USE(APPKIT) || PLATFORM(GTK)
+#if USE(APPKIT) || USE(UIKIT_KEYBOARD_ADDITIONS) || PLATFORM(GTK)
         bool handledByInputMethod() const { return m_handledByInputMethod; }
 #endif
 #if USE(APPKIT)
         const Vector<KeypressCommand>& commands() const { return m_commands; }
 #elif PLATFORM(GTK)
@@ -137,10 +131,13 @@
 
         bool isAutoRepeat() const { return m_autoRepeat; }
         bool isKeypad() const { return m_isKeypad; }
         bool isSystemKey() const { return m_isSystemKey; }
 
+        bool isSyntheticEvent() const { return m_isSyntheticEvent; }
+        void setIsSyntheticEvent() { m_isSyntheticEvent = true; }
+
         WEBCORE_EXPORT static bool currentCapsLockState();
         WEBCORE_EXPORT static void getCurrentModifierState(bool& shiftKey, bool& ctrlKey, bool& altKey, bool& metaKey);
         WEBCORE_EXPORT static void setCurrentModifierState(OptionSet<Modifier>);
         WEBCORE_EXPORT static OptionSet<Modifier> currentStateOfModifierKeys();
 
@@ -193,22 +190,24 @@
 #if ENABLE(KEYBOARD_CODE_ATTRIBUTE)
         String m_code;
 #endif
         String m_keyIdentifier;
         int m_windowsVirtualKeyCode;
-#if USE(APPKIT) || PLATFORM(GTK)
-        bool m_handledByInputMethod;
+#if USE(APPKIT) || USE(UIKIT_KEYBOARD_ADDITIONS) || PLATFORM(GTK)
+        bool m_handledByInputMethod { false };
 #endif
 #if USE(APPKIT)
         Vector<KeypressCommand> m_commands;
 #elif PLATFORM(GTK)
         Vector<String> m_commands;
 #endif
         bool m_autoRepeat;
         bool m_isKeypad;
         bool m_isSystemKey;
 
+        bool m_isSyntheticEvent { false };
+
 #if PLATFORM(COCOA)
 #if !PLATFORM(IOS_FAMILY)
         RetainPtr<NSEvent> m_macEvent;
 #else
         RetainPtr<::WebEvent> m_Event;
