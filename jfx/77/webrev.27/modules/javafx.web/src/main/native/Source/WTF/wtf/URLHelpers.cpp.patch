diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/URLHelpers.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/URLHelpers.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/URLHelpers.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/URLHelpers.cpp
@@ -32,10 +32,12 @@
 
 #include "URLParser.h"
 #include <mutex>
 #include <unicode/uidna.h>
 #include <unicode/uscript.h>
+#include <wtf/Optional.h>
+#include <wtf/text/WTFString.h>
 
 namespace WTF {
 namespace URLHelpers {
 
 // Needs to be big enough to hold an IDN-encoded name.
@@ -116,10 +118,11 @@
     case 0x00BC: /* VULGAR FRACTION ONE QUARTER */
     case 0x00BD: /* VULGAR FRACTION ONE HALF */
     case 0x00BE: /* VULGAR FRACTION THREE QUARTERS */
     case 0x00ED: /* LATIN SMALL LETTER I WITH ACUTE */
     /* 0x0131 LATIN SMALL LETTER DOTLESS I is intentionally not considered a lookalike character because it is visually distinguishable from i and it has legitimate use in the Turkish language. */
+    case 0x01C0: /* LATIN LETTER DENTAL CLICK */
     case 0x01C3: /* LATIN LETTER RETROFLEX CLICK */
     case 0x0251: /* LATIN SMALL LETTER ALPHA */
     case 0x0261: /* LATIN SMALL LETTER SCRIPT G */
     case 0x027E: /* LATIN SMALL LETTER R WITH FISHHOOK */
     case 0x02D0: /* MODIFIER LETTER TRIANGULAR COLON */
@@ -296,11 +299,11 @@
     loadIDNScriptWhiteList();
     int32_t i = 0;
     Optional<UChar32> previousCodePoint;
     while (i < length) {
         UChar32 c;
-        U16_NEXT(buffer, i, length, c)
+        U16_NEXT(buffer, i, length, c);
         UErrorCode error = U_ZERO_ERROR;
         UScriptCode script = uscript_getScript(c, &error);
         if (error != U_ZERO_ERROR) {
             LOG_ERROR("got ICU error while trying to look at scripts: %d", error);
             return false;
@@ -322,11 +325,12 @@
         previousCodePoint = c;
     }
     return true;
 }
 
-static bool isSecondLevelDomainNameAllowedByTLDRules(const UChar* buffer, int32_t length, const WTF::Function<bool(UChar)>& characterIsAllowed)
+template<typename Func>
+static inline bool isSecondLevelDomainNameAllowedByTLDRules(const UChar* buffer, int32_t length, Func characterIsAllowed)
 {
     ASSERT(length > 0);
 
     for (int32_t i = length - 1; i >= 0; --i) {
         UChar ch = buffer[i];
@@ -671,39 +675,23 @@
         return;
 
     unsigned authorityStart = separatorIndex + strlen(separator);
 
     // Check that all characters before the :// are valid scheme characters.
-    auto invalidSchemeCharacter = string.substringSharingImpl(0, separatorIndex).find([](UChar ch) {
-        static const char* allowedCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-.";
-        static size_t length = strlen(allowedCharacters);
-        for (size_t i = 0; i < length; ++i) {
-            if (allowedCharacters[i] == ch)
-                return false;
-        }
-        return true;
-    });
-
-    if (invalidSchemeCharacter != notFound)
+    if (StringView { string }.left(separatorIndex).contains([](UChar character) {
+        return !(isASCIIAlphanumeric(character) || character == '+' || character == '-' || character == '.');
+    }))
         return;
 
-    unsigned stringLength = string.length();
-
     // Find terminating character.
-    auto hostNameTerminator = string.find([](UChar ch) {
-        static const char* terminatingCharacters = ":/?#";
-        static size_t length = strlen(terminatingCharacters);
-        for (size_t i = 0; i < length; ++i) {
-            if (terminatingCharacters[i] == ch)
-                return true;
-        }
-        return false;
+    auto hostNameTerminator = string.find([](UChar character) {
+        return character == ':' || character == '/' || character == '?' || character == '#';
     }, authorityStart);
-    unsigned hostNameEnd = hostNameTerminator == notFound ? stringLength : hostNameTerminator;
+    unsigned hostNameEnd = hostNameTerminator == notFound ? string.length() : hostNameTerminator;
 
     // Find "@" for the start of the host name.
-    auto userInfoTerminator = string.substringSharingImpl(0, hostNameEnd).find('@', authorityStart);
+    auto userInfoTerminator = StringView { string }.left(hostNameEnd).find('@', authorityStart);
     unsigned hostNameStart = userInfoTerminator == notFound ? authorityStart : userInfoTerminator + 1;
 
     collectRangesThatNeedMapping(string, hostNameStart, hostNameEnd - hostNameStart, array, decodeFunction);
 }
 
@@ -724,13 +712,11 @@
         return { };
 
     // Do the mapping.
     String result = string;
     while (!hostNameRanges->isEmpty()) {
-        unsigned location, length;
-        String mappedHostName;
-        std::tie(location, length, mappedHostName) = hostNameRanges->takeLast();
+        auto [location, length, mappedHostName] = hostNameRanges->takeLast();
         result = result.replace(location, length, mappedHostName);
     }
     return result;
 }
 
@@ -765,12 +751,12 @@
         unsigned characterLength = U16_LENGTH(c);
         if (isLookalikeCharacter(previousCodePoint, c)) {
             uint8_t utf8Buffer[4];
             size_t offset = 0;
             UBool failure = false;
-            U8_APPEND(utf8Buffer, offset, 4, c, failure)
-            ASSERT(!failure);
+            U8_APPEND(utf8Buffer, offset, 4, c, failure);
+            ASSERT_UNUSED(failure, !failure);
 
             for (size_t j = 0; j < offset; ++j) {
                 outBuffer.append('%');
                 outBuffer.append(upperNibbleToASCIIHexDigit(utf8Buffer[j]));
                 outBuffer.append(lowerNibbleToASCIIHexDigit(utf8Buffer[j]));
@@ -779,11 +765,11 @@
             for (unsigned j = 0; j < characterLength; ++j)
                 outBuffer.append(sourceBuffer[i + j]);
         }
         previousCodePoint = c;
         i += characterLength;
-        }
+    }
 
     return String::adopt(WTFMove(outBuffer));
 }
 
 String userVisibleURL(const CString& url)
