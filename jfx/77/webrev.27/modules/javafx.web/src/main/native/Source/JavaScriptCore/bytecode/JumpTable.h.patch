diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/JumpTable.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/JumpTable.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/JumpTable.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/JumpTable.h
@@ -75,18 +75,29 @@
             offsetTable.clear();
         }
     };
 
     struct SimpleJumpTable {
-        // FIXME: The two Vectors can be combind into one Vector<OffsetLocation>
+        // FIXME: The two Vectors can be combined into one Vector<OffsetLocation>
         Vector<int32_t> branchOffsets;
-        int32_t min;
+        int32_t min { INT32_MIN };
 #if ENABLE(JIT)
         Vector<CodeLocationLabel<JSSwitchPtrTag>> ctiOffsets;
         CodeLocationLabel<JSSwitchPtrTag> ctiDefault;
 #endif
 
+#if ENABLE(DFG_JIT)
+        // JIT part can be later expanded without taking a lock while non-JIT part is stable after CodeBlock is finalized.
+        SimpleJumpTable cloneNonJITPart() const
+        {
+            SimpleJumpTable result;
+            result.branchOffsets = branchOffsets;
+            result.min = min;
+            return result;
+        }
+#endif
+
         int32_t offsetForValue(int32_t value, int32_t defaultOffset);
         void add(int32_t key, int32_t offset)
         {
             if (!branchOffsets[key])
                 branchOffsets[key] = offset;
@@ -105,15 +116,15 @@
                 return ctiOffsets[value - min];
             return ctiDefault;
         }
 #endif
 
+#if ENABLE(DFG_JIT)
         void clear()
         {
             branchOffsets.clear();
-#if ENABLE(JIT)
             ctiOffsets.clear();
-#endif
         }
+#endif
     };
 
 } // namespace JSC
