diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderView.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderView.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderView.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderView.cpp
@@ -206,11 +206,11 @@
 
 LayoutUnit RenderView::clientLogicalWidthForFixedPosition() const
 {
     // FIXME: If the FrameView's fixedVisibleContentRect() is not empty, perhaps it should be consulted here too?
     if (frameView().fixedElementsLayoutRelativeToFrame())
-        return (isHorizontalWritingMode() ? frameView().visibleWidth() : frameView().visibleHeight()) / frameView().frame().frameScaleFactor();
+        return LayoutUnit((isHorizontalWritingMode() ? frameView().visibleWidth() : frameView().visibleHeight()) / frameView().frame().frameScaleFactor());
 
 #if PLATFORM(IOS_FAMILY)
     if (frameView().useCustomFixedPositionLayoutRect())
         return isHorizontalWritingMode() ? frameView().customFixedPositionLayoutRect().width() : frameView().customFixedPositionLayoutRect().height();
 #endif
@@ -223,11 +223,11 @@
 
 LayoutUnit RenderView::clientLogicalHeightForFixedPosition() const
 {
     // FIXME: If the FrameView's fixedVisibleContentRect() is not empty, perhaps it should be consulted here too?
     if (frameView().fixedElementsLayoutRelativeToFrame())
-        return (isHorizontalWritingMode() ? frameView().visibleHeight() : frameView().visibleWidth()) / frameView().frame().frameScaleFactor();
+        return LayoutUnit((isHorizontalWritingMode() ? frameView().visibleHeight() : frameView().visibleWidth()) / frameView().frame().frameScaleFactor());
 
 #if PLATFORM(IOS_FAMILY)
     if (frameView().useCustomFixedPositionLayoutRect())
         return isHorizontalWritingMode() ? frameView().customFixedPositionLayoutRect().height() : frameView().customFixedPositionLayoutRect().width();
 #endif
@@ -490,11 +490,11 @@
 
     // Region will get slow if it gets too complex. Merge all rects so far to bounds if this happens.
     // FIXME: Maybe there should be a region type that does this automatically.
     static const unsigned maximumRepaintRegionGridSize = 16 * 16;
     if (m_accumulatedRepaintRegion->gridSize() > maximumRepaintRegionGridSize)
-        m_accumulatedRepaintRegion = std::make_unique<Region>(m_accumulatedRepaintRegion->bounds());
+        m_accumulatedRepaintRegion = makeUnique<Region>(m_accumulatedRepaintRegion->bounds());
 }
 
 void RenderView::flushAccumulatedRepaintRegion() const
 {
     ASSERT(!document().ownerElement());
@@ -512,18 +512,10 @@
     RenderLayerCompositor& compositor = this->compositor();
     if (compositor.usesCompositing())
         compositor.repaintCompositedLayers();
 }
 
-LayoutRect RenderView::visualOverflowRect() const
-{
-    if (frameView().paintsEntireContents())
-        return layoutOverflowRect();
-
-    return RenderBlockFlow::visualOverflowRect();
-}
-
 Optional<LayoutRect> RenderView::computeVisibleRectInContainer(const LayoutRect& rect, const RenderLayerModelObject* container, VisibleRectContext context) const
 {
     // If a container was specified, and was not nullptr or the RenderView,
     // then we should have found it by now.
     ASSERT_ARG(container, !container || container == this);
@@ -722,11 +714,11 @@
 }
 
 RenderLayerCompositor& RenderView::compositor()
 {
     if (!m_compositor)
-        m_compositor = std::make_unique<RenderLayerCompositor>(*this);
+        m_compositor = makeUnique<RenderLayerCompositor>(*this);
 
     return *m_compositor;
 }
 
 void RenderView::setIsInWindow(bool isInWindow)
@@ -743,11 +735,11 @@
 }
 
 ImageQualityController& RenderView::imageQualityController()
 {
     if (!m_imageQualityController)
-        m_imageQualityController = std::make_unique<ImageQualityController>(*this);
+        m_imageQualityController = makeUnique<ImageQualityController>(*this);
     return *m_imageQualityController;
 }
 
 void RenderView::registerForVisibleInViewportCallback(RenderElement& renderer)
 {
@@ -807,11 +799,11 @@
         removeRendererWithPausedImageAnimations(renderer);
     else
         images.removeFirst(&image);
 }
 
-void RenderView::resumePausedImageAnimationsIfNeeded(IntRect visibleRect)
+void RenderView::resumePausedImageAnimationsIfNeeded(const IntRect& visibleRect)
 {
     Vector<std::pair<RenderElement*, CachedImage*>, 10> toRemove;
     for (auto& it : m_renderersWithPausedImageAnimation) {
         auto* renderer = it.key;
         for (auto* image : it.value) {
@@ -832,11 +824,11 @@
     if (!rootRenderView)
         return;
 
     m_wasAccumulatingRepaintRegion = !!rootRenderView->m_accumulatedRepaintRegion;
     if (!m_wasAccumulatingRepaintRegion)
-        rootRenderView->m_accumulatedRepaintRegion = std::make_unique<Region>();
+        rootRenderView->m_accumulatedRepaintRegion = makeUnique<Region>();
     m_rootView = makeWeakPtr(*rootRenderView);
 }
 
 RenderView::RepaintRegionAccumulator::~RepaintRegionAccumulator()
 {
