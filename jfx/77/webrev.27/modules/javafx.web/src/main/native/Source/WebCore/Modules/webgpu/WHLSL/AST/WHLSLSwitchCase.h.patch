diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLSwitchCase.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLSwitchCase.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLSwitchCase.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLSwitchCase.h
@@ -26,37 +26,37 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "WHLSLBlock.h"
+#include "WHLSLCodeLocation.h"
 #include "WHLSLConstantExpression.h"
-#include "WHLSLLexer.h"
 #include "WHLSLStatement.h"
+#include <wtf/FastMalloc.h>
 #include <wtf/Optional.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class SwitchCase : public Statement {
+class SwitchCase final : public Statement {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    SwitchCase(Lexer::Token&& origin, Optional<ConstantExpression>&& value, Block&& block)
-        : Statement(WTFMove(origin))
+    SwitchCase(CodeLocation location, Optional<ConstantExpression>&& value, Block&& block)
+        : Statement(location, Kind::SwitchCase)
         , m_value(WTFMove(value))
         , m_block(WTFMove(block))
     {
     }
 
-    virtual ~SwitchCase() = default;
+    ~SwitchCase() = default;
 
     SwitchCase(const SwitchCase&) = delete;
     SwitchCase(SwitchCase&&) = default;
 
-    bool isSwitchCase() const override { return true; }
-
     Optional<ConstantExpression>& value() { return m_value; }
     Block& block() { return m_block; }
 
 private:
     Optional<ConstantExpression> m_value;
@@ -67,8 +67,10 @@
 
 }
 
 }
 
+DEFINE_DEFAULT_DELETE(SwitchCase)
+
 SPECIALIZE_TYPE_TRAITS_WHLSL_STATEMENT(SwitchCase, isSwitchCase())
 
 #endif
