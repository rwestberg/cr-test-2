diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/BuiltinNames.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/BuiltinNames.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/BuiltinNames.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/BuiltinNames.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2014, 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2014-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -48,10 +48,11 @@
     macro(arrayIteratorNextIndex) \
     macro(arrayIterationKind) \
     macro(arrayIteratorNext) \
     macro(arrayIteratorIsDone) \
     macro(arrayIteratorKind) \
+    macro(arraySpeciesCreate) \
     macro(assert) \
     macro(charCodeAt) \
     macro(executor) \
     macro(isView) \
     macro(iteratedObject) \
@@ -62,29 +63,25 @@
     macro(Number) \
     macro(Array) \
     macro(ArrayBuffer) \
     macro(RegExp) \
     macro(Promise) \
-    macro(Reflect) \
     macro(InternalPromise) \
     macro(trunc) \
     macro(create) \
     macro(defineProperty) \
     macro(getPrototypeOf) \
-    macro(getOwnPropertyDescriptor) \
     macro(getOwnPropertyNames) \
     macro(ownKeys) \
     macro(Set) \
-    macro(TypeError) \
     macro(typedArrayLength) \
     macro(typedArraySort) \
     macro(typedArrayGetOriginalConstructor) \
     macro(typedArraySubarrayCreate) \
     macro(BuiltinLog) \
     macro(BuiltinDescribe) \
     macro(homeObject) \
-    macro(templateRegistryKey) \
     macro(enqueueJob) \
     macro(hostPromiseRejectionTracker) \
     macro(promiseIsHandled) \
     macro(promiseState) \
     macro(promiseReactions) \
@@ -134,17 +131,17 @@
     macro(isTypedArrayView) \
     macro(isBoundFunction) \
     macro(hasInstanceBoundFunction) \
     macro(instanceOf) \
     macro(isArraySlow) \
-    macro(isArrayConstructor) \
     macro(isConstructor) \
     macro(concatMemcpy) \
     macro(appendMemcpy) \
     macro(regExpCreate) \
     macro(replaceUsingRegExp) \
     macro(replaceUsingStringSearch) \
+    macro(makeTypeError) \
     macro(mapBucket) \
     macro(mapBucketHead) \
     macro(mapBucketNext) \
     macro(mapBucketKey) \
     macro(mapBucketValue) \
@@ -165,10 +162,15 @@
     macro(regExpProtoUnicodeGetter) \
     macro(regExpPrototypeSymbolReplace) \
     macro(regExpSearchFast) \
     macro(regExpSplitFast) \
     macro(regExpTestFast) \
+    macro(regExpStringIteratorRegExp) \
+    macro(regExpStringIteratorString) \
+    macro(regExpStringIteratorGlobal) \
+    macro(regExpStringIteratorUnicode) \
+    macro(regExpStringIteratorDone) \
     macro(stringIncludesInternal) \
     macro(stringSplitFast) \
     macro(stringSubstrInternal) \
     macro(makeBoundFunction) \
     macro(hasOwnLengthProperty) \
@@ -194,11 +196,11 @@
 
 class BuiltinNames {
     WTF_MAKE_NONCOPYABLE(BuiltinNames); WTF_MAKE_FAST_ALLOCATED;
 
 public:
-    BuiltinNames(VM*, CommonIdentifiers*);
+    BuiltinNames(VM&, CommonIdentifiers*);
 
     SymbolImpl* lookUpPrivateName(const Identifier&) const;
     Identifier getPublicName(VM&, SymbolImpl*) const;
 
     void appendExternalName(const Identifier& publicName, const Identifier& privateName);
@@ -233,14 +235,14 @@
 }
 
 inline Identifier BuiltinNames::getPublicName(VM& vm, SymbolImpl* symbol) const
 {
     if (symbol->isPrivate())
-        return Identifier::fromString(&vm, symbol);
+        return Identifier::fromString(vm, symbol);
     // We have special handling for well-known symbols.
     ASSERT(symbol->startsWith("Symbol."));
-    return Identifier::fromString(&vm, makeString(String(symbol->substring(strlen("Symbol."))), "Symbol"));
+    return Identifier::fromString(vm, makeString(String(symbol->substring(strlen("Symbol."))), "Symbol"));
 }
 
 inline void BuiltinNames::checkPublicToPrivateMapConsistency(UniquedStringImpl* publicName, UniquedStringImpl* privateName)
 {
 #ifndef NDEBUG
