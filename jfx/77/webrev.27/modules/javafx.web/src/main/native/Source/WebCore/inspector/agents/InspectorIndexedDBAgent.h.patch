diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorIndexedDBAgent.h b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorIndexedDBAgent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorIndexedDBAgent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorIndexedDBAgent.h
@@ -41,36 +41,38 @@
 class InjectedScriptManager;
 }
 
 namespace WebCore {
 
-class InspectorPageAgent;
+class Page;
 
 typedef String ErrorString;
 
 class InspectorIndexedDBAgent final : public InspectorAgentBase, public Inspector::IndexedDBBackendDispatcherHandler {
     WTF_MAKE_NONCOPYABLE(InspectorIndexedDBAgent);
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    InspectorIndexedDBAgent(WebAgentContext&, InspectorPageAgent*);
+    InspectorIndexedDBAgent(PageAgentContext&);
     virtual ~InspectorIndexedDBAgent();
 
-    void didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*) override;
-    void willDestroyFrontendAndBackend(Inspector::DisconnectReason) override;
+    // InspectorAgentBase
+    void didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*);
+    void willDestroyFrontendAndBackend(Inspector::DisconnectReason);
 
-    // Called from the front-end.
-    void enable(ErrorString&) override;
-    void disable(ErrorString&) override;
-    void requestDatabaseNames(const String& securityOrigin, Ref<RequestDatabaseNamesCallback>&&) override;
-    void requestDatabase(const String& securityOrigin, const String& databaseName, Ref<RequestDatabaseCallback>&&) override;
-    void requestData(const String& securityOrigin, const String& databaseName, const String& objectStoreName, const String& indexName, int skipCount, int pageSize, const JSON::Object* keyRange, Ref<RequestDataCallback>&&) override;
-    void clearObjectStore(const String& in_securityOrigin, const String& in_databaseName, const String& in_objectStoreName, Ref<ClearObjectStoreCallback>&&) override;
+    // IndexedDBBackendDispatcherHandler
+    void enable(ErrorString&);
+    void disable(ErrorString&);
+    void requestDatabaseNames(const String& securityOrigin, Ref<RequestDatabaseNamesCallback>&&);
+    void requestDatabase(const String& securityOrigin, const String& databaseName, Ref<RequestDatabaseCallback>&&);
+    void requestData(const String& securityOrigin, const String& databaseName, const String& objectStoreName, const String& indexName, int skipCount, int pageSize, const JSON::Object* keyRange, Ref<RequestDataCallback>&&);
+    void clearObjectStore(const String& securityOrigin, const String& databaseName, const String& objectStoreName, Ref<ClearObjectStoreCallback>&&);
 
 private:
     Inspector::InjectedScriptManager& m_injectedScriptManager;
     RefPtr<Inspector::IndexedDBBackendDispatcher> m_backendDispatcher;
-    InspectorPageAgent* m_pageAgent { nullptr };
+
+    Page& m_inspectedPage;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(INDEXED_DATABASE)
