diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLUnnamedType.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLUnnamedType.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLUnnamedType.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLUnnamedType.h
@@ -25,61 +25,53 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
-#include "WHLSLLexer.h"
-#include "WHLSLNode.h"
+#include "WHLSLCodeLocation.h"
 #include "WHLSLType.h"
+#include <wtf/FastMalloc.h>
+#include <wtf/Noncopyable.h>
+#include <wtf/RefCounted.h>
 #include <wtf/UniqueRef.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class UnnamedType : public Type {
+class UnnamedType : public Type, public RefCounted<UnnamedType> {
+    WTF_MAKE_FAST_ALLOCATED;
+    WTF_MAKE_NONCOPYABLE(UnnamedType);
 public:
-    UnnamedType(Lexer::Token&& origin)
-        : m_origin(WTFMove(origin))
+    UnnamedType(CodeLocation location, Kind kind)
+        : Type(kind)
+        , m_codeLocation(location)
     {
     }
 
-    virtual ~UnnamedType() = default;
+    unsigned hash() const;
+    bool operator==(const UnnamedType&) const;
 
-    UnnamedType(const UnnamedType&) = delete;
-    UnnamedType(UnnamedType&&) = default;
+    String toString() const;
 
-    bool isUnnamedType() const override { return true; }
-    virtual bool isTypeReference() const { return false; }
-    virtual bool isPointerType() const { return false; }
-    virtual bool isArrayReferenceType() const { return false; }
-    virtual bool isArrayType() const { return false; }
-    virtual bool isReferenceType() const { return false; }
-
-    virtual const Type& unifyNode() const { return *this; }
-    virtual Type& unifyNode() { return *this; }
-
-    virtual UniqueRef<UnnamedType> clone() const = 0;
-
-    const Lexer::Token& origin() const { return m_origin; }
+    CodeLocation codeLocation() const { return m_codeLocation; }
 
 private:
-    Lexer::Token m_origin;
+    friend class Type;
+    Type& unifyNodeImpl() { return *this; }
+    CodeLocation m_codeLocation;
 };
 
 } // namespace AST
 
 }
 
 }
 
-#define SPECIALIZE_TYPE_TRAITS_WHLSL_UNNAMED_TYPE(ToValueTypeName, predicate) \
-SPECIALIZE_TYPE_TRAITS_BEGIN(WebCore::WHLSL::AST::ToValueTypeName) \
-    static bool isType(const WebCore::WHLSL::AST::UnnamedType& type) { return type.predicate; } \
-SPECIALIZE_TYPE_TRAITS_END()
+DEFINE_DEFAULT_DELETE(UnnamedType)
 
 SPECIALIZE_TYPE_TRAITS_WHLSL_TYPE(UnnamedType, isUnnamedType())
 
 #endif
