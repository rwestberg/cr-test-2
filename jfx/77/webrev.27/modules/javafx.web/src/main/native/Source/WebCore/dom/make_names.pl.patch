diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/make_names.pl b/modules/javafx.web/src/main/native/Source/WebCore/dom/make_names.pl
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/make_names.pl
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/make_names.pl
@@ -110,14 +110,14 @@
     open F, ">$header" or die "Unable to open $header for writing.";
 
     printLicenseHeader($F);
     printHeaderHead($F, "CSS", $familyNamesFileBase, <<END, "");
 #include <wtf/NeverDestroyed.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 END
 
-    printMacros($F, "extern LazyNeverDestroyed<const WTF::AtomicString>", "", \%parameters);
+    printMacros($F, "extern LazyNeverDestroyed<const WTF::AtomString>", "", \%parameters);
     print F "#endif\n\n";
 
     printInit($F, 1);
     close F;
 
@@ -127,11 +127,11 @@
     printLicenseHeader($F);
     printCppHead($F, "CSS", $familyNamesFileBase, "WTF");
 
     print F StaticString::GenerateStrings(\%parameters);
 
-    printMacros($F, "LazyNeverDestroyed<const WTF::AtomicString>", "", \%parameters);
+    printMacros($F, "LazyNeverDestroyed<const WTF::AtomString>", "", \%parameters);
 
     printInit($F, 0);
 
     print F "\n";
     print F StaticString::GenerateStringAsserts(\%parameters);
@@ -594,11 +594,11 @@
         return;
     initialized = true;
 
     // Use placement new to initialize the globals.
 
-    AtomicString::init();
+    AtomString::init();
 ";
 }
 
 sub printLicenseHeader
 {
@@ -713,18 +713,18 @@
     open F, ">$headerPath";
 
     printLicenseHeader($F);
     printHeaderHead($F, "DOM", $parameters{namespace}, <<END, "class $parameters{namespace}QualifiedName : public QualifiedName { };\n\n");
 #include <wtf/NeverDestroyed.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 #include "QualifiedName.h"
 END
 
     my $lowercaseNamespacePrefix = lc($parameters{namespacePrefix});
 
     print F "// Namespace\n";
-    print F "WEBCORE_EXPORT extern LazyNeverDestroyed<const WTF::AtomicString> ${lowercaseNamespacePrefix}NamespaceURI;\n\n";
+    print F "WEBCORE_EXPORT extern LazyNeverDestroyed<const WTF::AtomString> ${lowercaseNamespacePrefix}NamespaceURI;\n\n";
 
     if (keys %allTags) {
         print F "// Tags\n";
         printMacros($F, "WEBCORE_EXPORT extern LazyNeverDestroyed<const WebCore::$parameters{namespace}QualifiedName>", "Tag", \%allTags);
     }
@@ -758,11 +758,11 @@
     printLicenseHeader($F);
     printCppHead($F, "DOM", $parameters{namespace}, "WebCore");
     
     my $lowercaseNamespacePrefix = lc($parameters{namespacePrefix});
 
-    print F "LazyNeverDestroyed<const AtomicString> ${lowercaseNamespacePrefix}NamespaceURI;\n\n";
+    print F "LazyNeverDestroyed<const AtomString> ${lowercaseNamespacePrefix}NamespaceURI;\n\n";
 
     print F StaticString::GenerateStrings(\%allStrings);
 
     if (keys %allTags) {
         print F "// Tags\n";
@@ -795,11 +795,11 @@
         print F "}\n";
     }
 
     printInit($F, 0);
 
-    print(F "    AtomicString ${lowercaseNamespacePrefix}NS(\"$parameters{namespaceURI}\", AtomicString::ConstructFromLiteral);\n\n");
+    print(F "    AtomString ${lowercaseNamespacePrefix}NS(\"$parameters{namespaceURI}\", AtomString::ConstructFromLiteral);\n\n");
 
     print(F "    // Namespace\n");
     print(F "    ${lowercaseNamespacePrefix}NamespaceURI.construct(${lowercaseNamespacePrefix}NS);\n");
     print(F "\n");
     print F StaticString::GenerateStringAsserts(\%allStrings);
@@ -917,11 +917,11 @@
 
 print F <<END;
     };
 
     for (auto& entry : ${type}Table)
-        entry.targetAddress->construct(nullAtom(), AtomicString(&entry.name), $namespaceURI);
+        entry.targetAddress->construct(nullAtom(), AtomString(&entry.name), $namespaceURI);
 END
 
 }
 
 ## ElementFactory routines
@@ -1002,11 +1002,11 @@
 
     $parameters{namespace}ConstructorFunction function;
     const QualifiedName* qualifiedName; // Use pointer instead of reference so that emptyValue() in HashMap is cheap to create.
 };
 
-static NEVER_INLINE HashMap<AtomicStringImpl*, $parameters{namespace}ConstructorFunctionMapEntry> create$parameters{namespace}FactoryMap()
+static NEVER_INLINE HashMap<AtomStringImpl*, $parameters{namespace}ConstructorFunctionMapEntry> create$parameters{namespace}FactoryMap()
 {
     struct TableEntry {
         const QualifiedName& name;
         $parameters{namespace}ConstructorFunction function;
     };
@@ -1018,23 +1018,23 @@
     printFunctionTable($F, \%tagConstructorMap);
 
     print F <<END
     };
 
-    HashMap<AtomicStringImpl*, $parameters{namespace}ConstructorFunctionMapEntry> map;
+    HashMap<AtomStringImpl*, $parameters{namespace}ConstructorFunctionMapEntry> map;
     for (auto& entry : table)
         map.add(entry.name.localName().impl(), $parameters{namespace}ConstructorFunctionMapEntry(entry.function, entry.name));
     return map;
 }
 
-static $parameters{namespace}ConstructorFunctionMapEntry find$parameters{namespace}ElementConstructorFunction(const AtomicString& localName)
+static $parameters{namespace}ConstructorFunctionMapEntry find$parameters{namespace}ElementConstructorFunction(const AtomString& localName)
 {
     static const auto map = makeNeverDestroyed(create$parameters{namespace}FactoryMap());
     return map.get().get(localName.impl());
 }
 
-RefPtr<$parameters{namespace}Element> $parameters{namespace}ElementFactory::createKnownElement(const AtomicString& localName, Document& document$formElementArgumentForDefinition, bool createdByParser)
+RefPtr<$parameters{namespace}Element> $parameters{namespace}ElementFactory::createKnownElement(const AtomString& localName, Document& document$formElementArgumentForDefinition, bool createdByParser)
 {
     const $parameters{namespace}ConstructorFunctionMapEntry& entry = find$parameters{namespace}ElementConstructorFunction(localName);
     if (LIKELY(entry.function)) {
         ASSERT(entry.qualifiedName);
         const auto& name = *entry.qualifiedName;
@@ -1049,11 +1049,11 @@
     if (LIKELY(entry.function))
         return entry.function($argumentList);
     return nullptr;
 }
 
-Ref<$parameters{namespace}Element> $parameters{namespace}ElementFactory::createElement(const AtomicString& localName, Document& document$formElementArgumentForDefinition, bool createdByParser)
+Ref<$parameters{namespace}Element> $parameters{namespace}ElementFactory::createElement(const AtomString& localName, Document& document$formElementArgumentForDefinition, bool createdByParser)
 {
     const $parameters{namespace}ConstructorFunctionMapEntry& entry = find$parameters{namespace}ElementConstructorFunction(localName);
     if (LIKELY(entry.function)) {
         ASSERT(entry.qualifiedName);
         const auto& name = *entry.qualifiedName;
@@ -1105,19 +1105,19 @@
 class $parameters{namespace}ElementFactory {
 public:
 END
 ;
 
-print F "static RefPtr<$parameters{namespace}Element> createKnownElement(const AtomicString&, Document&";
+print F "static RefPtr<$parameters{namespace}Element> createKnownElement(const AtomString&, Document&";
 print F ", HTMLFormElement* = nullptr" if $parameters{namespace} eq "HTML";
 print F ", bool createdByParser = false);\n";
 
 print F "static RefPtr<$parameters{namespace}Element> createKnownElement(const QualifiedName&, Document&";
 print F ", HTMLFormElement* = nullptr" if $parameters{namespace} eq "HTML";
 print F ", bool createdByParser = false);\n";
 
-print F "static Ref<$parameters{namespace}Element> createElement(const AtomicString&, Document&";
+print F "static Ref<$parameters{namespace}Element> createElement(const AtomString&, Document&";
 print F ", HTMLFormElement* = nullptr" if $parameters{namespace} eq "HTML";
 print F ", bool createdByParser = false);\n";
 
 print F "static Ref<$parameters{namespace}Element> createElement(const QualifiedName&, Document&";
 print F ", HTMLFormElement* = nullptr" if $parameters{namespace} eq "HTML";
@@ -1258,11 +1258,11 @@
 
     printWrapperFunctions($F);
 
 print F <<END
 
-static NEVER_INLINE HashMap<AtomicStringImpl*, Create$parameters{namespace}ElementWrapperFunction> create$parameters{namespace}WrapperMap()
+static NEVER_INLINE HashMap<AtomStringImpl*, Create$parameters{namespace}ElementWrapperFunction> create$parameters{namespace}WrapperMap()
 {
     struct TableEntry {
         const QualifiedName& name;
         Create$parameters{namespace}ElementWrapperFunction function;
     };
@@ -1296,11 +1296,11 @@
     }
 
     print F <<END
     };
 
-    HashMap<AtomicStringImpl*, Create$parameters{namespace}ElementWrapperFunction> map;
+    HashMap<AtomStringImpl*, Create$parameters{namespace}ElementWrapperFunction> map;
     for (auto& entry : table)
         map.add(entry.name.localName().impl(), entry.function);
     return map;
 }
 
