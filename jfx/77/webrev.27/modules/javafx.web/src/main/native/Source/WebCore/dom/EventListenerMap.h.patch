diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/EventListenerMap.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/EventListenerMap.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/EventListenerMap.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/EventListenerMap.h
@@ -35,11 +35,11 @@
 #include "RegisteredEventListener.h"
 #include <atomic>
 #include <memory>
 #include <wtf/Forward.h>
 #include <wtf/Lock.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
 class EventTarget;
 
@@ -48,33 +48,33 @@
 class EventListenerMap {
 public:
     EventListenerMap();
 
     bool isEmpty() const { return m_entries.isEmpty(); }
-    bool contains(const AtomicString& eventType) const { return find(eventType); }
-    bool containsCapturing(const AtomicString& eventType) const;
-    bool containsActive(const AtomicString& eventType) const;
+    bool contains(const AtomString& eventType) const { return find(eventType); }
+    bool containsCapturing(const AtomString& eventType) const;
+    bool containsActive(const AtomString& eventType) const;
 
     void clear();
 
-    void replace(const AtomicString& eventType, EventListener& oldListener, Ref<EventListener>&& newListener, const RegisteredEventListener::Options&);
-    bool add(const AtomicString& eventType, Ref<EventListener>&&, const RegisteredEventListener::Options&);
-    bool remove(const AtomicString& eventType, EventListener&, bool useCapture);
-    WEBCORE_EXPORT EventListenerVector* find(const AtomicString& eventType) const;
-    Vector<AtomicString> eventTypes() const;
+    void replace(const AtomString& eventType, EventListener& oldListener, Ref<EventListener>&& newListener, const RegisteredEventListener::Options&);
+    bool add(const AtomString& eventType, Ref<EventListener>&&, const RegisteredEventListener::Options&);
+    bool remove(const AtomString& eventType, EventListener&, bool useCapture);
+    WEBCORE_EXPORT EventListenerVector* find(const AtomString& eventType) const;
+    Vector<AtomString> eventTypes() const;
 
-    void removeFirstEventListenerCreatedFromMarkup(const AtomicString& eventType);
+    void removeFirstEventListenerCreatedFromMarkup(const AtomString& eventType);
     void copyEventListenersNotCreatedFromMarkupToTarget(EventTarget*);
 
     Lock& lock() { return m_lock; }
 
 private:
     friend class EventListenerIterator;
 
     void assertNoActiveIterators() const;
 
-    Vector<std::pair<AtomicString, std::unique_ptr<EventListenerVector>>, 2> m_entries;
+    Vector<std::pair<AtomString, std::unique_ptr<EventListenerVector>>, 2> m_entries;
 
 #ifndef NDEBUG
     std::atomic<int> m_activeIteratorCount { 0 };
 #endif
 
