diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ModuleProgramExecutable.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ModuleProgramExecutable.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ModuleProgramExecutable.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ModuleProgramExecutable.h
@@ -24,18 +24,18 @@
  */
 
 #pragma once
 
 #include "ExecutableToCodeBlockEdge.h"
-#include "ScriptExecutable.h"
+#include "GlobalExecutable.h"
 
 namespace JSC {
 
-class ModuleProgramExecutable final : public ScriptExecutable {
+class ModuleProgramExecutable final : public GlobalExecutable {
     friend class LLIntOffsetsExtractor;
 public:
-    typedef ScriptExecutable Base;
+    using Base = GlobalExecutable;
     static const unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
 
     template<typename CellType, SubspaceAccess mode>
     static IsoSubspace* subspaceFor(VM& vm)
     {
@@ -67,10 +67,12 @@
 
     UnlinkedModuleProgramCodeBlock* unlinkedModuleProgramCodeBlock() { return m_unlinkedModuleProgramCodeBlock.get(); }
 
     SymbolTable* moduleEnvironmentSymbolTable() { return m_moduleEnvironmentSymbolTable.get(); }
 
+    TemplateObjectMap& ensureTemplateObjectMap(VM&);
+
 private:
     friend class ExecutableBase;
     friend class ScriptExecutable;
 
     ModuleProgramExecutable(ExecState*, const SourceCode&);
@@ -78,8 +80,9 @@
     static void visitChildren(JSCell*, SlotVisitor&);
 
     WriteBarrier<UnlinkedModuleProgramCodeBlock> m_unlinkedModuleProgramCodeBlock;
     WriteBarrier<SymbolTable> m_moduleEnvironmentSymbolTable;
     WriteBarrier<ExecutableToCodeBlockEdge> m_moduleProgramCodeBlock;
+    std::unique_ptr<TemplateObjectMap> m_templateObjectMap;
 };
 
 } // namespace JSC
