diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/java/NativeImageJava.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/java/NativeImageJava.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/java/NativeImageJava.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/java/NativeImageJava.cpp
@@ -81,38 +81,43 @@
 float subsamplingScale(GraphicsContext&, const FloatRect&, const FloatRect&)
 {
     return 1;
 }
 
-void drawNativeImage(const NativeImagePtr& image, GraphicsContext& context, const FloatRect& destRect, const FloatRect& srcRect, const IntSize&, CompositeOperator op, BlendMode mode, const ImageOrientation& orientation)
+void drawNativeImage(const NativeImagePtr& image,
+    GraphicsContext& context,
+    const FloatRect& destRect,
+    const FloatRect& srcRect,
+    const IntSize& size,
+    const ImagePaintingOptions& options)
 {
     if (!image) {
         return;
     }
     context.save();
 
     // Set the compositing operation.
-    if (op == CompositeSourceOver && mode == BlendMode::Normal && !nativeImageHasAlpha(image))
+    if (options.compositeOperator() == CompositeSourceOver && options.blendMode() == BlendMode::Normal && !nativeImageHasAlpha(image))
         context.setCompositeOperation(CompositeCopy);
     else
-        context.setCompositeOperation(op, mode);
+        context.setCompositeOperation(options.compositeOperator(), options.blendMode());
 
 #if ENABLE(IMAGE_DECODER_DOWN_SAMPLING)
     IntSize scaledSize = nativeImageSize(image);
     FloatRect adjustedSrcRect = adjustSourceRectForDownSampling(srcRect, scaledSize);
 #else
     FloatRect adjustedSrcRect(srcRect);
 #endif
 
     FloatRect adjustedDestRect = destRect;
 
-    if (orientation != DefaultImageOrientation) {
+    if (options.orientation() != ImageOrientation::None) {
         // ImageOrientation expects the origin to be at (0, 0).
         context.translate(destRect.x(), destRect.y());
         adjustedDestRect.setLocation(FloatPoint());
-        context.concatCTM(orientation.transformFromDefault(adjustedDestRect.size()));
-        if (orientation.usesWidthAsHeight()) {
+        context.concatCTM(options.orientation().transformFromDefault(adjustedDestRect.size()));
+        if (options.orientation().usesWidthAsHeight()) {
             // The destination rectangle will have it's width and height already reversed for the orientation of
             // the image, as it was needed for page layout, so we need to reverse it back here.
             adjustedDestRect.setSize(adjustedDestRect.size().transposedSize());
         }
     }
@@ -125,10 +130,55 @@
         << adjustedSrcRect.x() << adjustedSrcRect.y()
         << adjustedSrcRect.width() << adjustedSrcRect.height();
     context.restore();
 }
 
+
+// void drawNativeImage(const NativeImagePtr& image, GraphicsContext& context, const FloatRect& destRect, const FloatRect& srcRect, const IntSize&, CompositeOperator op, BlendMode mode, const ImageOrientation& orientation)
+// {
+//     if (!image) {
+//         return;
+//     }
+//     context.save();
+
+//     // Set the compositing operation.
+//     if (op == CompositeSourceOver && mode == BlendMode::Normal && !nativeImageHasAlpha(image))
+//         context.setCompositeOperation(CompositeCopy);
+//     else
+//         context.setCompositeOperation(op, mode);
+
+// #if ENABLE(IMAGE_DECODER_DOWN_SAMPLING)
+//     IntSize scaledSize = nativeImageSize(image);
+//     FloatRect adjustedSrcRect = adjustSourceRectForDownSampling(srcRect, scaledSize);
+// #else
+//     FloatRect adjustedSrcRect(srcRect);
+// #endif
+
+//     FloatRect adjustedDestRect = destRect;
+
+//     if (orientation != ImageOrientation::None) {
+//         // ImageOrientation expects the origin to be at (0, 0).
+//         context.translate(destRect.x(), destRect.y());
+//         adjustedDestRect.setLocation(FloatPoint());
+//         context.concatCTM(orientation.transformFromDefault(adjustedDestRect.size()));
+//         if (orientation.usesWidthAsHeight()) {
+//             // The destination rectangle will have it's width and height already reversed for the orientation of
+//             // the image, as it was needed for page layout, so we need to reverse it back here.
+//             adjustedDestRect.setSize(adjustedDestRect.size().transposedSize());
+//         }
+//     }
+
+//     context.platformContext()->rq().freeSpace(72)
+//         << (jint)com_sun_webkit_graphics_GraphicsDecoder_DRAWIMAGE
+//         << image
+//         << adjustedDestRect.x() << adjustedDestRect.y()
+//         << adjustedDestRect.width() << adjustedDestRect.height()
+//         << adjustedSrcRect.x() << adjustedSrcRect.y()
+//         << adjustedSrcRect.width() << adjustedSrcRect.height();
+//     context.restore();
+// }
+
 void clearNativeImageSubimages(const NativeImagePtr&)
 {
     notImplemented();
 }
 }
