diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSessionManager.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSessionManager.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSessionManager.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSessionManager.h
@@ -29,28 +29,37 @@
 #include "AudioHardwareListener.h"
 #include "PlatformMediaSession.h"
 #include "RemoteCommandListener.h"
 #include "Timer.h"
 #include <pal/system/SystemSleepListener.h>
+#include <wtf/AggregateLogger.h>
 #include <wtf/Vector.h>
 
 namespace WebCore {
 
 class Document;
 class HTMLMediaElement;
 class PlatformMediaSession;
 class RemoteCommandListener;
 
-class PlatformMediaSessionManager : private RemoteCommandListenerClient, private PAL::SystemSleepListener::Client, private AudioHardwareListener::Client {
+class PlatformMediaSessionManager
+    : private RemoteCommandListenerClient
+    , private PAL::SystemSleepListener::Client
+    , private AudioHardwareListener::Client
+#if !RELEASE_LOG_DISABLED
+    , private LoggerHelper
+#endif
+{
     WTF_MAKE_FAST_ALLOCATED;
 public:
     WEBCORE_EXPORT static PlatformMediaSessionManager* sharedManagerIfExists();
     WEBCORE_EXPORT static PlatformMediaSessionManager& sharedManager();
 
     static void updateNowPlayingInfoIfNecessary();
 
     WEBCORE_EXPORT static void setShouldDeactivateAudioSession(bool);
+    WEBCORE_EXPORT static bool shouldDeactivateAudioSession();
 
     virtual ~PlatformMediaSessionManager() = default;
 
     virtual void scheduleUpdateNowPlayingInfo() { }
     bool has(PlatformMediaSession::MediaType) const;
@@ -70,20 +79,24 @@
     void setWillIgnoreSystemInterruptions(bool ignore) { m_willIgnoreSystemInterruptions = ignore; }
 
     WEBCORE_EXPORT virtual void beginInterruption(PlatformMediaSession::InterruptionType);
     WEBCORE_EXPORT void endInterruption(PlatformMediaSession::EndInterruptionFlags);
 
-    WEBCORE_EXPORT void applicationWillBecomeInactive() const;
-    WEBCORE_EXPORT void applicationDidBecomeActive() const;
-    WEBCORE_EXPORT void applicationWillEnterForeground(bool suspendedUnderLock) const;
-    WEBCORE_EXPORT void applicationDidEnterBackground(bool suspendedUnderLock) const;
+    WEBCORE_EXPORT void applicationWillBecomeInactive();
+    WEBCORE_EXPORT void applicationDidBecomeActive();
+    WEBCORE_EXPORT void applicationWillEnterForeground(bool suspendedUnderLock);
+    WEBCORE_EXPORT void applicationDidEnterBackground(bool suspendedUnderLock);
+    WEBCORE_EXPORT void processWillSuspend();
+    WEBCORE_EXPORT void processDidResume();
 
-    void stopAllMediaPlaybackForDocument(const Document*);
+    void stopAllMediaPlaybackForDocument(const Document&);
     WEBCORE_EXPORT void stopAllMediaPlaybackForProcess();
 
     void suspendAllMediaPlaybackForDocument(const Document&);
     void resumeAllMediaPlaybackForDocument(const Document&);
+    void suspendAllMediaBufferingForDocument(const Document&);
+    void resumeAllMediaBufferingForDocument(const Document&);
 
     enum SessionRestrictionFlags {
         NoRestrictions = 0,
         ConcurrentPlaybackNotPermitted = 1 << 0,
         BackgroundProcessPlaybackRestricted = 1 << 1,
@@ -106,33 +119,45 @@
     virtual void clientCharacteristicsChanged(PlatformMediaSession&) { }
     virtual void sessionCanProduceAudioChanged(PlatformMediaSession&);
 
 #if PLATFORM(IOS_FAMILY)
     virtual void configureWireLessTargetMonitoring() { }
-    virtual bool hasWirelessTargetsAvailable() { return false; }
 #endif
+    virtual bool hasWirelessTargetsAvailable() { return false; }
 
     void setCurrentSession(PlatformMediaSession&);
     PlatformMediaSession* currentSession() const;
 
-    Vector<PlatformMediaSession*> currentSessionsMatching(const WTF::Function<bool(const PlatformMediaSession&)>&);
-
     void sessionIsPlayingToWirelessPlaybackTargetChanged(PlatformMediaSession&);
 
+    WEBCORE_EXPORT void setIsPlayingToAutomotiveHeadUnit(bool);
+    bool isPlayingToAutomotiveHeadUnit() const { return m_isPlayingToAutomotiveHeadUnit; }
+
+    void forEachMatchingSession(const Function<bool(const PlatformMediaSession&)>& predicate, const Function<void(PlatformMediaSession&)>& matchingCallback);
+
+    bool processIsSuspended() const { return m_processIsSuspended; }
+
 protected:
     friend class PlatformMediaSession;
     explicit PlatformMediaSessionManager();
 
     void addSession(PlatformMediaSession&);
     virtual void removeSession(PlatformMediaSession&);
 
-    void forEachSession(const Function<void(PlatformMediaSession&, size_t)>&) const;
-    PlatformMediaSession* findSession(const Function<bool(PlatformMediaSession&, size_t)>&) const;
-    bool anyOfSessions(const Function<bool(PlatformMediaSession&, size_t)>& predicate) const { return findSession(predicate); }
+    void forEachSession(const Function<void(PlatformMediaSession&)>&);
+    void forEachDocumentSession(const Document&, const Function<void(PlatformMediaSession&)>&);
+    bool anyOfSessions(const Function<bool(const PlatformMediaSession&)>&) const;
 
     AudioHardwareListener* audioHardwareListener() { return m_audioHardwareListener.get(); }
 
+#if !RELEASE_LOG_DISABLED
+    const Logger& logger() const final { return m_logger; }
+    const void* logIdentifier() const final { return nullptr; }
+    const char* logClassName() const override { return "PlatformMediaSessionManager"; }
+    WTFLogChannel& logChannel() const final;
+#endif
+
 private:
     friend class Internals;
 
     virtual void updateSessionState() { }
 
@@ -147,14 +172,14 @@
 
     // PAL::SystemSleepListener
     void systemWillSleep() override;
     void systemDidWake() override;
 
-    static bool shouldDeactivateAudioSession();
+    Vector<WeakPtr<PlatformMediaSession>> sessionsMatching(const Function<bool(const PlatformMediaSession&)>&) const;
 
     SessionRestrictions m_restrictions[PlatformMediaSession::MediaStreamCapturingAudio + 1];
-    mutable Vector<PlatformMediaSession*> m_sessions;
+    mutable Vector<WeakPtr<PlatformMediaSession>> m_sessions;
     std::unique_ptr<RemoteCommandListener> m_remoteCommandListener;
     std::unique_ptr<PAL::SystemSleepListener> m_systemSleepListener;
     RefPtr<AudioHardwareListener> m_audioHardwareListener;
 
 #if ENABLE(WIRELESS_PLAYBACK_TARGET) && !PLATFORM(IOS_FAMILY)
@@ -163,15 +188,20 @@
 #endif
 
     bool m_interrupted { false };
     mutable bool m_isApplicationInBackground { false };
     bool m_willIgnoreSystemInterruptions { false };
-    mutable int m_iteratingOverSessions { 0 };
+    bool m_processIsSuspended { false };
+    bool m_isPlayingToAutomotiveHeadUnit { false };
 
 #if USE(AUDIO_SESSION)
     bool m_becameActive { false };
 #endif
+
+#if !RELEASE_LOG_DISABLED
+    Ref<AggregateLogger> m_logger;
+#endif
 };
 
 }
 
 #endif // PlatformMediaSessionManager_h
