diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/legacy/LegacyCDM.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/legacy/LegacyCDM.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/legacy/LegacyCDM.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/legacy/LegacyCDM.cpp
@@ -35,11 +35,11 @@
 #include "MediaPlayer.h"
 #include "WebKitMediaKeys.h"
 #include <wtf/NeverDestroyed.h>
 #include <wtf/text/WTFString.h>
 
-#if PLATFORM(MAC) && ENABLE(MEDIA_SOURCE)
+#if (HAVE(AVCONTENTKEYSESSION) || HAVE(AVSTREAMSESSION)) && ENABLE(MEDIA_SOURCE)
 #include "CDMPrivateMediaSourceAVFObjC.h"
 #endif
 
 namespace WebCore {
 
@@ -59,19 +59,19 @@
 };
 
 static Vector<CDMFactory*>& installedCDMFactories()
 {
     static auto cdms = makeNeverDestroyed(Vector<CDMFactory*> {
-        new CDMFactory([](LegacyCDM* cdm) { return std::make_unique<LegacyCDMPrivateClearKey>(cdm); },
+        new CDMFactory([](LegacyCDM* cdm) { return makeUnique<LegacyCDMPrivateClearKey>(cdm); },
             LegacyCDMPrivateClearKey::supportsKeySystem, LegacyCDMPrivateClearKey::supportsKeySystemAndMimeType),
 
         // FIXME: initialize specific UA CDMs. http://webkit.org/b/109318, http://webkit.org/b/109320
-        new CDMFactory([](LegacyCDM* cdm) { return std::make_unique<CDMPrivateMediaPlayer>(cdm); },
+        new CDMFactory([](LegacyCDM* cdm) { return makeUnique<CDMPrivateMediaPlayer>(cdm); },
             CDMPrivateMediaPlayer::supportsKeySystem, CDMPrivateMediaPlayer::supportsKeySystemAndMimeType),
 
-#if PLATFORM(MAC) && ENABLE(MEDIA_SOURCE)
-        new CDMFactory([](LegacyCDM* cdm) { return std::make_unique<CDMPrivateMediaSourceAVFObjC>(cdm); },
+#if (HAVE(AVCONTENTKEYSESSION) || HAVE(AVSTREAMSESSION)) && ENABLE(MEDIA_SOURCE)
+        new CDMFactory([](LegacyCDM* cdm) { return makeUnique<CDMPrivateMediaSourceAVFObjC>(cdm); },
             CDMPrivateMediaSourceAVFObjC::supportsKeySystem, CDMPrivateMediaSourceAVFObjC::supportsKeySystemAndMimeType),
 #endif
     });
     return cdms;
 }
@@ -105,11 +105,11 @@
 std::unique_ptr<LegacyCDM> LegacyCDM::create(const String& keySystem)
 {
     if (!supportsKeySystem(keySystem))
         return nullptr;
 
-    return std::make_unique<LegacyCDM>(keySystem);
+    return makeUnique<LegacyCDM>(keySystem);
 }
 
 LegacyCDM::LegacyCDM(const String& keySystem)
     : m_keySystem(keySystem)
     , m_client(nullptr)
