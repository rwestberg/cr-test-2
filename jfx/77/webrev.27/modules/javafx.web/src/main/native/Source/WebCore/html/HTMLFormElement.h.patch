diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFormElement.h b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFormElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFormElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFormElement.h
@@ -1,10 +1,10 @@
 /*
  * Copyright (C) 1999 Lars Knoll (knoll@kde.org)
  *           (C) 1999 Antti Koivisto (koivisto@kde.org)
  *           (C) 2000 Dirk Mueller (mueller@kde.org)
- * Copyright (C) 2004-2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2004-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -26,10 +26,12 @@
 #include "FormState.h"
 #include "FormSubmission.h"
 #include "HTMLElement.h"
 #include "RadioButtonGroups.h"
 #include <memory>
+#include <wtf/IsoMalloc.h>
+#include <wtf/WeakHashSet.h>
 
 #if ENABLE(IOS_AUTOCORRECT_AND_AUTOCAPITALIZE)
 #include "Autocapitalize.h"
 #endif
 
@@ -48,24 +50,24 @@
     static Ref<HTMLFormElement> create(const QualifiedName&, Document&);
     virtual ~HTMLFormElement();
 
     Ref<HTMLFormControlsCollection> elements();
     WEBCORE_EXPORT Ref<HTMLCollection> elementsForNativeBindings();
-    Vector<Ref<Element>> namedElements(const AtomicString&);
+    Vector<Ref<Element>> namedElements(const AtomString&);
 
     WEBCORE_EXPORT unsigned length() const;
     HTMLElement* item(unsigned index);
-    Optional<Variant<RefPtr<RadioNodeList>, RefPtr<Element>>> namedItem(const AtomicString&);
-    Vector<AtomicString> supportedPropertyNames() const;
+    Optional<Variant<RefPtr<RadioNodeList>, RefPtr<Element>>> namedItem(const AtomString&);
+    Vector<AtomString> supportedPropertyNames() const;
 
     String enctype() const { return m_attributes.encodingType(); }
     WEBCORE_EXPORT void setEnctype(const String&);
 
     bool shouldAutocomplete() const;
 
-    WEBCORE_EXPORT void setAutocomplete(const AtomicString&);
-    WEBCORE_EXPORT const AtomicString& autocomplete() const;
+    WEBCORE_EXPORT void setAutocomplete(const AtomString&);
+    WEBCORE_EXPORT const AtomString& autocomplete() const;
 
 #if ENABLE(IOS_AUTOCORRECT_AND_AUTOCAPITALIZE)
     WEBCORE_EXPORT bool shouldAutocorrect() const final;
 #endif
 
@@ -117,11 +119,11 @@
 
     RadioButtonGroups& radioButtonGroups() { return m_radioButtonGroups; }
 
     WEBCORE_EXPORT const Vector<FormAssociatedElement*>& unsafeAssociatedElements() const;
     Vector<Ref<FormAssociatedElement>> copyAssociatedElementsVector() const;
-    const Vector<HTMLImageElement*>& imageElements() const { return m_imageElements; }
+    const Vector<WeakPtr<HTMLImageElement>>& imageElements() const { return m_imageElements; }
 
     StringPairVector textFieldValues() const;
 
     static HTMLFormElement* findClosestFormAncestor(const Element&);
 
@@ -133,11 +135,11 @@
     void removedFromAncestor(RemovalType, ContainerNode&) final;
     void finishParsingChildren() final;
 
     void handleLocalEvents(Event&, EventInvokePhase) final;
 
-    void parseAttribute(const QualifiedName&, const AtomicString&) final;
+    void parseAttribute(const QualifiedName&, const AtomString&) final;
     bool isURLAttribute(const Attribute&) const final;
 
     void resumeFromDocumentSuspension() final;
 
     void didMoveToNewDocument(Document& oldDocument, Document& newDocument) final;
@@ -154,33 +156,33 @@
     // Validates each of the controls, and stores controls of which 'invalid'
     // event was not canceled to the specified vector. Returns true if there
     // are any invalid controls in this form.
     bool checkInvalidControlsAndCollectUnhandled(Vector<RefPtr<HTMLFormControlElement>>&);
 
-    RefPtr<HTMLElement> elementFromPastNamesMap(const AtomicString&) const;
-    void addToPastNamesMap(FormNamedItem*, const AtomicString& pastName);
+    RefPtr<HTMLElement> elementFromPastNamesMap(const AtomString&) const;
+    void addToPastNamesMap(FormNamedItem*, const AtomString& pastName);
     void assertItemCanBeInPastNamesMap(FormNamedItem*) const;
     void removeFromPastNamesMap(FormNamedItem*);
 
     bool matchesValidPseudoClass() const final;
     bool matchesInvalidPseudoClass() const final;
 
     void resetAssociatedFormControlElements();
 
-    typedef HashMap<RefPtr<AtomicStringImpl>, FormNamedItem*> PastNamesMap;
+    typedef HashMap<RefPtr<AtomStringImpl>, FormNamedItem*> PastNamesMap;
 
     FormSubmission::Attributes m_attributes;
     std::unique_ptr<PastNamesMap> m_pastNamesMap;
 
     RadioButtonGroups m_radioButtonGroups;
-    mutable HTMLFormControlElement* m_defaultButton { nullptr };
+    mutable WeakPtr<HTMLFormControlElement> m_defaultButton;
 
     unsigned m_associatedElementsBeforeIndex { 0 };
     unsigned m_associatedElementsAfterIndex { 0 };
     Vector<FormAssociatedElement*> m_associatedElements;
-    Vector<HTMLImageElement*> m_imageElements;
-    HashSet<const HTMLFormControlElement*> m_invalidAssociatedFormControls;
+    Vector<WeakPtr<HTMLImageElement>> m_imageElements;
+    WeakHashSet<HTMLFormControlElement> m_invalidAssociatedFormControls;
 
     bool m_wasUserSubmitted { false };
     bool m_isSubmittingOrPreparingForSubmission { false };
     bool m_shouldSubmit { false };
 
