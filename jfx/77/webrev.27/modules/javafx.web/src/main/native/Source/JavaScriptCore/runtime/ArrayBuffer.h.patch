diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ArrayBuffer.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ArrayBuffer.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ArrayBuffer.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ArrayBuffer.h
@@ -46,18 +46,20 @@
 
 typedef Function<void(void*)> ArrayBufferDestructorFunction;
 
 class SharedArrayBufferContents : public ThreadSafeRefCounted<SharedArrayBufferContents> {
 public:
-    SharedArrayBufferContents(void* data, ArrayBufferDestructorFunction&&);
+    SharedArrayBufferContents(void* data, unsigned size, ArrayBufferDestructorFunction&&);
     ~SharedArrayBufferContents();
 
-    void* data() const { return m_data.getMayBeNull(); }
+    void* data() const { return m_data.getMayBeNull(m_sizeInBytes); }
 
 private:
-    CagedPtr<Gigacage::Primitive, void> m_data;
+    using DataType = CagedPtr<Gigacage::Primitive, void, tagCagedPtr>;
+    DataType m_data;
     ArrayBufferDestructorFunction m_destructor;
+    unsigned m_sizeInBytes;
 };
 
 class ArrayBufferContents {
     WTF_MAKE_NONCOPYABLE(ArrayBufferContents);
 public:
@@ -71,11 +73,11 @@
 
     JS_EXPORT_PRIVATE void clear();
 
     explicit operator bool() { return !!m_data; }
 
-    void* data() const { return m_data.getMayBeNull(); }
+    void* data() const { return m_data.getMayBeNull(sizeInBytes()); }
     unsigned sizeInBytes() const { return m_sizeInBytes; }
 
     bool isShared() const { return m_shared; }
 
 private:
@@ -96,11 +98,12 @@
     void copyTo(ArrayBufferContents&);
     void shareWith(ArrayBufferContents&);
 
     ArrayBufferDestructorFunction m_destructor;
     RefPtr<SharedArrayBufferContents> m_shared;
-    CagedPtr<Gigacage::Primitive, void> m_data;
+    using DataType = CagedPtr<Gigacage::Primitive, void, tagCagedPtr>;
+    DataType m_data;
     unsigned m_sizeInBytes;
 };
 
 class ArrayBuffer : public GCIncomingRefCounted<ArrayBuffer> {
 public:
@@ -172,21 +175,21 @@
     Weak<JSArrayBuffer> m_wrapper;
 };
 
 void* ArrayBuffer::data()
 {
-    return m_contents.m_data.getMayBeNull();
+    return m_contents.data();
 }
 
 const void* ArrayBuffer::data() const
 {
-    return m_contents.m_data.getMayBeNull();
+    return m_contents.data();
 }
 
 unsigned ArrayBuffer::byteLength() const
 {
-    return m_contents.m_sizeInBytes;
+    return m_contents.sizeInBytes();
 }
 
 bool ArrayBuffer::isShared() const
 {
     return m_contents.isShared();
