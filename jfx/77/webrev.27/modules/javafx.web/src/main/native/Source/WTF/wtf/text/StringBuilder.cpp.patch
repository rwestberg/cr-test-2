diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringBuilder.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringBuilder.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringBuilder.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringBuilder.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2010-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2010-2019 Apple Inc. All rights reserved.
  * Copyright (C) 2012 Google Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
@@ -27,26 +27,25 @@
 #include "config.h"
 #include <wtf/text/StringBuilder.h>
 
 #include <wtf/dtoa.h>
 #include <wtf/MathExtras.h>
-#include <wtf/text/WTFString.h>
-#include <wtf/text/IntegerToStringConversion.h>
 
 namespace WTF {
 
-static constexpr unsigned maxCapacity = String::MaxLength + 1;
+static constexpr unsigned maxCapacity = String::MaxLength;
 
 static unsigned expandedCapacity(unsigned capacity, unsigned requiredLength)
 {
     static const unsigned minimumCapacity = 16;
     return std::max(requiredLength, std::max(minimumCapacity, std::min(capacity * 2, maxCapacity)));
 }
 
 void StringBuilder::reifyString() const
 {
     ASSERT(!hasOverflowed());
+
     // Check if the string already exists.
     if (!m_string.isNull()) {
         ASSERT(m_string.length() == m_length.unsafeGet<unsigned>());
         return;
     }
@@ -112,11 +111,11 @@
     ASSERT(m_is8Bit);
     // Copy the existing data into a new buffer, set result to point to the end of the existing data.
     auto buffer = StringImpl::tryCreateUninitialized(requiredLength, m_bufferCharacters8);
     if (UNLIKELY(!buffer))
         return didOverflow();
-    memcpy(m_bufferCharacters8, currentCharacters, static_cast<size_t>(m_length.unsafeGet()) * sizeof(LChar)); // This can't overflow.
+    std::memcpy(m_bufferCharacters8, currentCharacters, m_length.unsafeGet());
 
     // Update the builder state.
     m_buffer = WTFMove(buffer);
     m_string = String();
     ASSERT(m_buffer->length() == requiredLength);
@@ -130,11 +129,11 @@
     ASSERT(!m_is8Bit);
     // Copy the existing data into a new buffer, set result to point to the end of the existing data.
     auto buffer = StringImpl::tryCreateUninitialized(requiredLength, m_bufferCharacters16);
     if (UNLIKELY(!buffer))
         return didOverflow();
-    memcpy(m_bufferCharacters16, currentCharacters, static_cast<size_t>(m_length.unsafeGet()) * sizeof(UChar)); // This can't overflow.
+    std::memcpy(m_bufferCharacters16, currentCharacters, static_cast<size_t>(m_length.unsafeGet()) * sizeof(UChar)); // This can't overflow.
 
     // Update the builder state.
     m_buffer = WTFMove(buffer);
     m_string = String();
     ASSERT(m_buffer->length() == requiredLength);
@@ -161,11 +160,11 @@
     m_buffer = WTFMove(buffer);
     m_string = String();
     ASSERT(m_buffer->length() == requiredLength);
 }
 
-template <>
+template<>
 void StringBuilder::reallocateBuffer<LChar>(unsigned requiredLength)
 {
     // If the buffer has only one ref (by this StringBuilder), reallocate it,
     // otherwise fall back to "allocate and copy" method.
     m_string = String();
@@ -181,11 +180,11 @@
     } else
         allocateBuffer(m_buffer->characters8(), requiredLength);
     ASSERT(hasOverflowed() || m_buffer->length() == requiredLength);
 }
 
-template <>
+template<>
 void StringBuilder::reallocateBuffer<UChar>(unsigned requiredLength)
 {
     // If the buffer has only one ref (by this StringBuilder), reallocate it,
     // otherwise fall back to "allocate and copy" method.
     m_string = String();
@@ -218,156 +217,176 @@
     } else {
         // Grow the string, if necessary.
         unsigned length = m_length.unsafeGet();
         if (newCapacity > length) {
             if (!length) {
-                LChar* nullPlaceholder = 0;
+                LChar* nullPlaceholder = nullptr;
                 allocateBuffer(nullPlaceholder, newCapacity);
             } else if (m_string.is8Bit())
                 allocateBuffer(m_string.characters8(), newCapacity);
             else
                 allocateBuffer(m_string.characters16(), newCapacity);
         }
     }
     ASSERT(hasOverflowed() || !newCapacity || m_buffer->length() >= newCapacity);
 }
 
-// Make 'length' additional capacity be available in m_buffer, update m_string & m_length,
+// Make 'additionalLength' additional capacity be available in m_buffer, update m_string & m_length,
 // return a pointer to the newly allocated storage.
 // Returns nullptr if the size of the new builder would have overflowed
-template <typename CharType>
-ALWAYS_INLINE CharType* StringBuilder::appendUninitialized(unsigned length)
+template<typename CharacterType> ALWAYS_INLINE CharacterType* StringBuilder::extendBufferForAppending(unsigned additionalLength)
 {
-    ASSERT(length);
+    ASSERT(additionalLength);
 
     // Calculate the new size of the builder after appending.
-    CheckedInt32 requiredLength = m_length + length;
+    CheckedInt32 requiredLength = m_length + additionalLength;
     if (requiredLength.hasOverflowed()) {
         didOverflow();
         return nullptr;
     }
 
+    return extendBufferForAppendingWithoutOverflowCheck<CharacterType>(requiredLength);
+}
+
+template<typename CharacterType> ALWAYS_INLINE CharacterType* StringBuilder::extendBufferForAppendingWithoutOverflowCheck(CheckedInt32 requiredLength)
+{
+    ASSERT(!requiredLength.hasOverflowed());
+
     if (m_buffer && (requiredLength.unsafeGet<unsigned>() <= m_buffer->length())) {
         // If the buffer is valid it must be at least as long as the current builder contents!
         ASSERT(m_buffer->length() >= m_length.unsafeGet<unsigned>());
         unsigned currentLength = m_length.unsafeGet();
         m_string = String();
         m_length = requiredLength;
-        return getBufferCharacters<CharType>() + currentLength;
+        return getBufferCharacters<CharacterType>() + currentLength;
     }
 
-    return appendUninitializedSlow<CharType>(requiredLength.unsafeGet());
+    return extendBufferForAppendingSlowCase<CharacterType>(requiredLength.unsafeGet());
 }
 
-// Make 'length' additional capacity be available in m_buffer, update m_string & m_length,
+LChar* StringBuilder::extendBufferForAppending8(CheckedInt32 requiredLength)
+{
+    if (UNLIKELY(requiredLength.hasOverflowed())) {
+        didOverflow();
+        return nullptr;
+    }
+    return extendBufferForAppendingWithoutOverflowCheck<LChar>(requiredLength);
+}
+
+UChar* StringBuilder::extendBufferForAppending16(CheckedInt32 requiredLength)
+{
+    if (UNLIKELY(requiredLength.hasOverflowed())) {
+        didOverflow();
+        return nullptr;
+    }
+    if (m_is8Bit) {
+        const LChar* characters;
+        if (m_buffer) {
+            ASSERT(m_buffer->length() >= m_length.unsafeGet<unsigned>());
+            characters = m_buffer->characters8();
+        } else {
+            ASSERT(m_string.length() == m_length.unsafeGet<unsigned>());
+            characters = m_string.isNull() ? nullptr : m_string.characters8();
+        }
+        allocateBufferUpConvert(characters, expandedCapacity(capacity(), requiredLength.unsafeGet()));
+        if (UNLIKELY(hasOverflowed()))
+            return nullptr;
+        unsigned oldLength = m_length.unsafeGet();
+        m_length = requiredLength.unsafeGet();
+        return m_bufferCharacters16 + oldLength;
+    }
+    return extendBufferForAppendingWithoutOverflowCheck<UChar>(requiredLength);
+}
+
+// Make 'requiredLength' capacity be available in m_buffer, update m_string & m_length,
 // return a pointer to the newly allocated storage.
-template <typename CharType>
-CharType* StringBuilder::appendUninitializedSlow(unsigned requiredLength)
+template<typename CharacterType> CharacterType* StringBuilder::extendBufferForAppendingSlowCase(unsigned requiredLength)
 {
     ASSERT(!hasOverflowed());
     ASSERT(requiredLength);
 
     if (m_buffer) {
         // If the buffer is valid it must be at least as long as the current builder contents!
         ASSERT(m_buffer->length() >= m_length.unsafeGet<unsigned>());
 
-        reallocateBuffer<CharType>(expandedCapacity(capacity(), requiredLength));
+        reallocateBuffer<CharacterType>(expandedCapacity(capacity(), requiredLength));
     } else {
         ASSERT(m_string.length() == m_length.unsafeGet<unsigned>());
-        allocateBuffer(m_length ? m_string.characters<CharType>() : 0, expandedCapacity(capacity(), requiredLength));
+        allocateBuffer(m_length ? m_string.characters<CharacterType>() : nullptr, expandedCapacity(capacity(), requiredLength));
     }
     if (UNLIKELY(hasOverflowed()))
         return nullptr;
 
-    CharType* result = getBufferCharacters<CharType>() + m_length.unsafeGet();
+    CharacterType* result = getBufferCharacters<CharacterType>() + m_length.unsafeGet();
     m_length = requiredLength;
     ASSERT(!hasOverflowed());
     ASSERT(m_buffer->length() >= m_length.unsafeGet<unsigned>());
     return result;
 }
 
-void StringBuilder::append(const UChar* characters, unsigned length)
+void StringBuilder::appendCharacters(const UChar* characters, unsigned length)
 {
     if (!length || hasOverflowed())
         return;
 
     ASSERT(characters);
 
-    if (m_is8Bit) {
-        if (length == 1 && !(*characters & ~0xff)) {
-            // Append as 8 bit character
-            LChar lChar = static_cast<LChar>(*characters);
-            return append(&lChar, 1);
-        }
-
-        // Calculate the new size of the builder after appending.
-        CheckedInt32 requiredLength = m_length + length;
-        if (requiredLength.hasOverflowed())
-            return didOverflow();
+    if (m_is8Bit && length == 1 && isLatin1(characters[0])) {
+        append(static_cast<LChar>(characters[0]));
+        return;
+    }
 
-        if (m_buffer) {
-            // If the buffer is valid it must be at least as long as the current builder contents!
-            ASSERT(m_buffer->length() >= m_length.unsafeGet<unsigned>());
-            allocateBufferUpConvert(m_buffer->characters8(), expandedCapacity(capacity(), requiredLength.unsafeGet()));
-        } else {
-            ASSERT(m_string.length() == m_length.unsafeGet<unsigned>());
-            allocateBufferUpConvert(m_string.isNull() ? 0 : m_string.characters8(), expandedCapacity(capacity(), requiredLength.unsafeGet()));
-        }
-        if (UNLIKELY(hasOverflowed()))
-            return;
+    // FIXME: Should we optimize memory by keeping the string 8-bit when all the characters are Latin-1?
 
-        memcpy(m_bufferCharacters16 + m_length.unsafeGet<unsigned>(), characters, static_cast<size_t>(length) * sizeof(UChar));
-        m_length = requiredLength;
-    } else {
-        UChar* dest = appendUninitialized<UChar>(length);
-        if (!dest)
-            return;
-        memcpy(dest, characters, static_cast<size_t>(length) * sizeof(UChar));
-    }
+    UChar* destination = extendBufferForAppending16(m_length + length);
+    if (UNLIKELY(!destination))
+        return;
+    std::memcpy(destination, characters, static_cast<size_t>(length) * sizeof(UChar));
     ASSERT(!hasOverflowed());
     ASSERT(m_buffer->length() >= m_length.unsafeGet<unsigned>());
 }
 
-void StringBuilder::append(const LChar* characters, unsigned length)
+void StringBuilder::appendCharacters(const LChar* characters, unsigned length)
 {
     if (!length || hasOverflowed())
         return;
 
     ASSERT(characters);
 
     if (m_is8Bit) {
-        LChar* dest = appendUninitialized<LChar>(length);
-        if (!dest) {
+        LChar* destination = extendBufferForAppending<LChar>(length);
+        if (!destination) {
             ASSERT(hasOverflowed());
             return;
         }
         if (length > 8)
-            memcpy(dest, characters, static_cast<size_t>(length) * sizeof(LChar));
+            std::memcpy(destination, characters, length);
         else {
+            // FIXME: How strong is our evidence that this is faster than memcpy? What platforms is this true for?
             const LChar* end = characters + length;
             while (characters < end)
-                *(dest++) = *(characters++);
+                *destination++ = *characters++;
         }
     } else {
-        UChar* dest = appendUninitialized<UChar>(length);
-        if (!dest) {
+        UChar* destination = extendBufferForAppending<UChar>(length);
+        if (!destination) {
             ASSERT(hasOverflowed());
             return;
         }
         const LChar* end = characters + length;
         while (characters < end)
-            *(dest++) = *(characters++);
+            *destination++ = *characters++;
     }
 }
 
 #if USE(CF)
 
 void StringBuilder::append(CFStringRef string)
 {
     // Fast path: avoid constructing a temporary String when possible.
     if (auto* characters = CFStringGetCStringPtr(string, kCFStringEncodingISOLatin1)) {
-        append(reinterpret_cast<const LChar*>(characters), CFStringGetLength(string));
+        appendCharacters(reinterpret_cast<const LChar*>(characters), CFStringGetLength(string));
         return;
     }
     append(String(string));
 }
 
@@ -376,11 +395,11 @@
 void StringBuilder::appendNumber(int number)
 {
     numberToStringSigned<StringBuilder>(number, this);
 }
 
-void StringBuilder::appendNumber(unsigned int number)
+void StringBuilder::appendNumber(unsigned number)
 {
     numberToStringUnsigned<StringBuilder>(number, this);
 }
 
 void StringBuilder::appendNumber(long number)
@@ -401,33 +420,52 @@
 void StringBuilder::appendNumber(unsigned long long number)
 {
     numberToStringUnsigned<StringBuilder>(number, this);
 }
 
-void StringBuilder::appendNumber(double number, unsigned precision, TrailingZerosTruncatingPolicy trailingZerosTruncatingPolicy)
+void StringBuilder::appendFixedPrecisionNumber(float number, unsigned precision, TrailingZerosTruncatingPolicy policy)
 {
     NumberToStringBuffer buffer;
-    append(numberToFixedPrecisionString(number, precision, buffer, trailingZerosTruncatingPolicy == TruncateTrailingZeros));
+    append(numberToFixedPrecisionString(number, precision, buffer, policy == TruncateTrailingZeros));
 }
 
-void StringBuilder::appendECMAScriptNumber(double number)
+void StringBuilder::appendFixedPrecisionNumber(double number, unsigned precision, TrailingZerosTruncatingPolicy policy)
+{
+    NumberToStringBuffer buffer;
+    append(numberToFixedPrecisionString(number, precision, buffer, policy == TruncateTrailingZeros));
+}
+
+void StringBuilder::appendNumber(float number)
+{
+    NumberToStringBuffer buffer;
+    append(numberToString(number, buffer));
+}
+
+void StringBuilder::appendNumber(double number)
 {
     NumberToStringBuffer buffer;
     append(numberToString(number, buffer));
 }
 
+void StringBuilder::appendFixedWidthNumber(float number, unsigned decimalPlaces)
+{
+    NumberToStringBuffer buffer;
+    append(numberToFixedWidthString(number, decimalPlaces, buffer));
+}
+
 void StringBuilder::appendFixedWidthNumber(double number, unsigned decimalPlaces)
 {
     NumberToStringBuffer buffer;
     append(numberToFixedWidthString(number, decimalPlaces, buffer));
 }
 
 bool StringBuilder::canShrink() const
 {
     if (hasOverflowed())
         return false;
-    // Only shrink the buffer if it's less than 80% full. Need to tune this heuristic!
+    // Only shrink the buffer if it's less than 80% full.
+    // FIXME: We should tune this heuristic based some actual test case measurements.
     unsigned length = m_length.unsafeGet();
     return m_buffer && m_buffer->length() > (length + (length >> 2));
 }
 
 void StringBuilder::shrinkToFit()
