diff a/modules/javafx.web/src/main/native/Source/WebCore/editing/markup.h b/modules/javafx.web/src/main/native/Source/WebCore/editing/markup.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/editing/markup.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/editing/markup.h
@@ -42,15 +42,16 @@
 class Element;
 class Frame;
 class HTMLElement;
 class Node;
 class Page;
+struct PresentationSize;
 class QualifiedName;
 class Range;
 class VisibleSelection;
 
-void replaceSubresourceURLs(Ref<DocumentFragment>&&, HashMap<AtomicString, AtomicString>&&);
+void replaceSubresourceURLs(Ref<DocumentFragment>&&, HashMap<AtomString, AtomString>&&);
 void removeSubresourceURLAttributes(Ref<DocumentFragment>&&, WTF::Function<bool(const URL&)> shouldRemoveURL);
 
 enum class MSOListQuirks { CheckIfNeeded, Disabled };
 std::unique_ptr<Page> createPageForSanitizingWebContent();
 String sanitizeMarkup(const String&, MSOListQuirks = MSOListQuirks::Disabled, Optional<WTF::Function<void(DocumentFragment&)>> fragmentSanitizer = WTF::nullopt);
@@ -58,11 +59,11 @@
 
 WEBCORE_EXPORT Ref<DocumentFragment> createFragmentFromText(Range& context, const String& text);
 WEBCORE_EXPORT Ref<DocumentFragment> createFragmentFromMarkup(Document&, const String& markup, const String& baseURL, ParserContentPolicy = AllowScriptingContent);
 ExceptionOr<Ref<DocumentFragment>> createFragmentForInnerOuterHTML(Element&, const String& markup, ParserContentPolicy);
 RefPtr<DocumentFragment> createFragmentForTransformToFragment(Document&, const String& sourceString, const String& sourceMIMEType);
-Ref<DocumentFragment> createFragmentForImageAndURL(Document&, const String&);
+Ref<DocumentFragment> createFragmentForImageAndURL(Document&, const String&, PresentationSize preferredSize);
 ExceptionOr<Ref<DocumentFragment>> createContextualFragment(Element&, const String& markup, ParserContentPolicy);
 
 bool isPlainTextMarkup(Node*);
 
 // These methods are used by HTMLElement & ShadowRoot to replace the children with respected fragment/text.
