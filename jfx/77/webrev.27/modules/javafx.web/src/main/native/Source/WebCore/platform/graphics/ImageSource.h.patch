diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ImageSource.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ImageSource.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ImageSource.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ImageSource.h
@@ -38,11 +38,11 @@
 
 class BitmapImage;
 class GraphicsContext;
 class ImageDecoder;
 
-class ImageSource : public ThreadSafeRefCounted<ImageSource>, public CanMakeWeakPtr<ImageSource> {
+class ImageSource : public ThreadSafeRefCounted<ImageSource, WTF::DestructionThread::Main>, public CanMakeWeakPtr<ImageSource> {
     friend class BitmapImage;
 public:
     ~ImageSource();
 
     static Ref<ImageSource> create(BitmapImage* image, AlphaOption alphaOption = AlphaOption::Premultiplied, GammaAndColorProfileOption gammaAndColorProfileOption = GammaAndColorProfileOption::Applied)
@@ -86,11 +86,11 @@
 
     // Image metadata which is calculated either by the ImageDecoder or directly
     // from the NativeImage if this class was created for a memory image.
     EncodedDataStatus encodedDataStatus();
     bool isSizeAvailable() { return encodedDataStatus() >= EncodedDataStatus::SizeAvailable; }
-    size_t frameCount();
+    WEBCORE_EXPORT size_t frameCount();
     RepetitionCount repetitionCount();
     String uti();
     String filenameExtension();
     Optional<IntPoint> hotSpot();
 
@@ -110,11 +110,11 @@
     SubsamplingLevel frameSubsamplingLevelAtIndex(size_t);
 
     // ImageFrame metadata which forces caching or re-caching the ImageFrame.
     IntSize frameSizeAtIndex(size_t, SubsamplingLevel = SubsamplingLevel::Default);
     unsigned frameBytesAtIndex(size_t, SubsamplingLevel = SubsamplingLevel::Default);
-    Seconds frameDurationAtIndex(size_t);
+    WEBCORE_EXPORT Seconds frameDurationAtIndex(size_t);
     ImageOrientation frameOrientationAtIndex(size_t);
 
 #if USE(DIRECT2D)
     void setTargetContext(const GraphicsContext*);
 #endif
