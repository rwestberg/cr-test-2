diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/AdaptiveInferredPropertyValueWatchpointBase.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/AdaptiveInferredPropertyValueWatchpointBase.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/AdaptiveInferredPropertyValueWatchpointBase.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/AdaptiveInferredPropertyValueWatchpointBase.h
@@ -43,28 +43,37 @@
 
     void install(VM&);
 
     virtual ~AdaptiveInferredPropertyValueWatchpointBase() = default;
 
-protected:
-    virtual bool isValid() const;
-    virtual void handleFire(VM&, const FireDetail&) = 0;
-
-private:
-    class StructureWatchpoint : public Watchpoint {
+    class StructureWatchpoint final : public Watchpoint {
     public:
-        StructureWatchpoint() { }
-    protected:
-        void fireInternal(VM&, const FireDetail&) override;
+        StructureWatchpoint()
+            : Watchpoint(Watchpoint::Type::AdaptiveInferredPropertyValueStructure)
+        { }
+
+        void fireInternal(VM&, const FireDetail&);
     };
-    class PropertyWatchpoint : public Watchpoint {
+    // Own destructor may not be called. Keep members trivially destructible.
+    static_assert(sizeof(StructureWatchpoint) == sizeof(Watchpoint), "");
+
+    class PropertyWatchpoint final : public Watchpoint {
     public:
-        PropertyWatchpoint() { }
-    protected:
-        void fireInternal(VM&, const FireDetail&) override;
+        PropertyWatchpoint()
+            : Watchpoint(Watchpoint::Type::AdaptiveInferredPropertyValueProperty)
+        { }
+
+        void fireInternal(VM&, const FireDetail&);
     };
+    // Own destructor may not be called. Keep members trivially destructible.
+    static_assert(sizeof(PropertyWatchpoint) == sizeof(Watchpoint), "");
+
+protected:
+    virtual bool isValid() const;
+    virtual void handleFire(VM&, const FireDetail&) = 0;
 
+private:
     void fire(VM&, const FireDetail&);
 
     ObjectPropertyCondition m_key;
     StructureWatchpoint m_structureWatchpoint;
     PropertyWatchpoint m_propertyWatchpoint;
