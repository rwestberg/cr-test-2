diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/IteratorRange.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/IteratorRange.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/IteratorRange.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/IteratorRange.h
@@ -23,14 +23,17 @@
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include <iterator>
+
 namespace WTF {
 
 template<typename Iterator>
 class IteratorRange {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     IteratorRange(Iterator begin, Iterator end)
         : m_begin(WTFMove(begin))
         , m_end(WTFMove(end))
     {
@@ -48,12 +51,25 @@
 IteratorRange<Iterator> makeIteratorRange(Iterator&& begin, Iterator&& end)
 {
     return IteratorRange<Iterator>(std::forward<Iterator>(begin), std::forward<Iterator>(end));
 }
 
+template<typename Container>
+IteratorRange<typename Container::reverse_iterator> makeReversedRange(Container& container)
+{
+    return makeIteratorRange(std::rbegin(container), std::rend(container));
+}
+
+template<typename Container>
+IteratorRange<typename Container::const_reverse_iterator> makeReversedRange(const Container& container)
+{
+    return makeIteratorRange(std::crbegin(container), std::crend(container));
+}
+
 template<typename Container, typename Iterator>
 class SizedIteratorRange {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     SizedIteratorRange(const Container& container, Iterator begin, Iterator end)
         : m_container(container)
         , m_begin(WTFMove(begin))
         , m_end(WTFMove(end))
