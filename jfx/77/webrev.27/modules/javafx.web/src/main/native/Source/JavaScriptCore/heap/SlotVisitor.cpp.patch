diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/SlotVisitor.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/SlotVisitor.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/SlotVisitor.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/SlotVisitor.cpp
@@ -24,28 +24,31 @@
  */
 
 #include "config.h"
 #include "SlotVisitor.h"
 
+#include "BlockDirectoryInlines.h"
 #include "CPU.h"
 #include "ConservativeRoots.h"
 #include "GCSegmentedArrayInlines.h"
+#include "HeapAnalyzer.h"
 #include "HeapCellInlines.h"
 #include "HeapProfiler.h"
-#include "HeapSnapshotBuilder.h"
 #include "JSArray.h"
 #include "JSDestructibleObject.h"
 #include "JSObject.h"
 #include "JSString.h"
 #include "JSCInlines.h"
+#include "MarkedBlockInlines.h"
 #include "MarkingConstraintSolver.h"
 #include "SlotVisitorInlines.h"
 #include "StopIfNecessaryTimer.h"
 #include "SuperSampler.h"
 #include "VM.h"
 #include <wtf/ListDump.h>
 #include <wtf/Lock.h>
+#include <wtf/StdLibExtras.h>
 
 namespace JSC {
 
 #if ENABLE(GC_VALIDATION)
 static void validate(JSCell* cell)
@@ -57,11 +60,11 @@
         CRASH();
     }
 
     // Both the cell's structure, and the cell's structure's structure should be the Structure Structure.
     // I hate this sentence.
-    VM& vm = *cell->vm();
+    VM& vm = cell->vm();
     if (cell->structure()->structure()->JSCell::classInfo(vm) != cell->structure()->JSCell::classInfo(vm)) {
         const char* parentClassName = 0;
         const char* ourClassName = 0;
         if (cell->structure()->structure() && cell->structure()->structure()->JSCell::classInfo(vm))
             parentClassName = cell->structure()->structure()->JSCell::classInfo(vm)->className;
@@ -110,20 +113,20 @@
             break;
         }
     }
 
     if (HeapProfiler* heapProfiler = vm().heapProfiler())
-        m_heapSnapshotBuilder = heapProfiler->activeSnapshotBuilder();
+        m_heapAnalyzer = heapProfiler->activeHeapAnalyzer();
 
     m_markingVersion = heap()->objectSpace().markingVersion();
 }
 
 void SlotVisitor::reset()
 {
     m_bytesVisited = 0;
     m_visitCount = 0;
-    m_heapSnapshotBuilder = nullptr;
+    m_heapAnalyzer = nullptr;
     RELEASE_ASSERT(!m_currentCell);
 }
 
 void SlotVisitor::clearMarkStacks()
 {
@@ -231,12 +234,12 @@
     } }
 }
 
 void SlotVisitor::appendSlow(JSCell* cell, Dependency dependency)
 {
-    if (UNLIKELY(m_heapSnapshotBuilder))
-        m_heapSnapshotBuilder->appendEdge(m_currentCell, cell, m_rootMarkReason);
+    if (UNLIKELY(m_heapAnalyzer))
+        m_heapAnalyzer->analyzeEdge(m_currentCell, cell, m_rootMarkReason);
 
     appendHiddenSlowImpl(cell, dependency);
 }
 
 void SlotVisitor::appendHiddenSlow(JSCell* cell, Dependency dependency)
@@ -283,26 +286,27 @@
 }
 
 template<typename ContainerType>
 ALWAYS_INLINE void SlotVisitor::appendToMarkStack(ContainerType& container, JSCell* cell)
 {
-    ASSERT(Heap::isMarked(cell));
+    ASSERT(m_heap.isMarked(cell));
+#if CPU(X86_64)
+    if (Options::dumpZappedCellCrashData()) {
+        if (UNLIKELY(cell->isZapped()))
+            reportZappedCellAndCrash(cell);
+    }
+#endif
     ASSERT(!cell->isZapped());
 
     container.noteMarked();
 
     m_visitCount++;
     m_bytesVisited += container.cellSize();
 
     m_collectorStack.append(cell);
 }
 
-void SlotVisitor::appendToMutatorMarkStack(const JSCell* cell)
-{
-    m_mutatorStack.append(cell);
-}
-
 void SlotVisitor::markAuxiliary(const void* base)
 {
     HeapCell* cell = bitwise_cast<HeapCell*>(base);
 
     ASSERT(cell->heap() == heap());
@@ -352,11 +356,11 @@
     SlotVisitor& m_visitor;
 };
 
 ALWAYS_INLINE void SlotVisitor::visitChildren(const JSCell* cell)
 {
-    ASSERT(Heap::isMarked(cell));
+    ASSERT(m_heap.isMarked(cell));
 
     SetCurrentCellScope currentCellScope(*this, cell);
 
     if (false) {
         dataLog("Visiting ", RawPointer(cell));
@@ -388,17 +392,28 @@
         break;
 
     default:
         // FIXME: This could be so much better.
         // https://bugs.webkit.org/show_bug.cgi?id=162462
+#if CPU(X86_64)
+        if (Options::dumpZappedCellCrashData()) {
+            Structure* structure = cell->structure(vm());
+            if (LIKELY(structure)) {
+                const MethodTable* methodTable = &structure->classInfo()->methodTable;
+                methodTable->visitChildren(const_cast<JSCell*>(cell), *this);
+                break;
+            }
+            reportZappedCellAndCrash(const_cast<JSCell*>(cell));
+        }
+#endif
         cell->methodTable(vm())->visitChildren(const_cast<JSCell*>(cell), *this);
         break;
     }
 
-    if (UNLIKELY(m_heapSnapshotBuilder)) {
+    if (UNLIKELY(m_heapAnalyzer)) {
         if (m_isFirstVisit)
-            m_heapSnapshotBuilder->appendNode(const_cast<JSCell*>(cell));
+            m_heapAnalyzer->analyzeNode(const_cast<JSCell*>(cell));
     }
 }
 
 void SlotVisitor::visitAsConstraint(const JSCell* cell)
 {
@@ -807,6 +822,48 @@
     RELEASE_ASSERT(task);
 
     m_currentSolver->addParallelTask(task, *m_currentConstraint);
 }
 
+#if CPU(X86_64)
+NEVER_INLINE NO_RETURN_DUE_TO_CRASH NOT_TAIL_CALLED void SlotVisitor::reportZappedCellAndCrash(JSCell* cell)
+{
+    MarkedBlock::Handle* foundBlockHandle = nullptr;
+    uint64_t* cellWords = reinterpret_cast_ptr<uint64_t*>(cell);
+
+    uintptr_t cellAddress = bitwise_cast<uintptr_t>(cell);
+    uint64_t headerWord = cellWords[0];
+    uint64_t zapReasonAndMore = cellWords[1];
+    unsigned subspaceHash = 0;
+    size_t cellSize = 0;
+
+    m_heap.objectSpace().forEachBlock([&] (MarkedBlock::Handle* blockHandle) {
+        if (blockHandle->contains(cell)) {
+            foundBlockHandle = blockHandle;
+            return IterationStatus::Done;
+        }
+        return IterationStatus::Continue;
+    });
+
+    uint64_t variousState = 0;
+    MarkedBlock* foundBlock = nullptr;
+    if (foundBlockHandle) {
+        foundBlock = &foundBlockHandle->block();
+        subspaceHash = StringHasher::computeHash(foundBlockHandle->subspace()->name());
+        cellSize = foundBlockHandle->cellSize();
+
+        variousState |= static_cast<uint64_t>(foundBlockHandle->isFreeListed()) << 0;
+        variousState |= static_cast<uint64_t>(foundBlockHandle->isAllocated()) << 1;
+        variousState |= static_cast<uint64_t>(foundBlockHandle->isEmpty()) << 2;
+        variousState |= static_cast<uint64_t>(foundBlockHandle->needsDestruction()) << 3;
+        variousState |= static_cast<uint64_t>(foundBlock->isNewlyAllocated(cell)) << 4;
+
+        ptrdiff_t cellOffset = cellAddress - reinterpret_cast<uint64_t>(foundBlockHandle->start());
+        bool cellIsProperlyAligned = !(cellOffset % cellSize);
+        variousState |= static_cast<uint64_t>(cellIsProperlyAligned) << 5;
+    }
+
+    CRASH_WITH_INFO(cellAddress, headerWord, zapReasonAndMore, subspaceHash, cellSize, foundBlock, variousState);
+}
+#endif // PLATFORM(MAC)
+
 } // namespace JSC
