diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/speech/SpeechSynthesis.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/speech/SpeechSynthesis.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/speech/SpeechSynthesis.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/speech/SpeechSynthesis.h
@@ -27,23 +27,24 @@
 
 #if ENABLE(SPEECH_SYNTHESIS)
 
 #include "PlatformSpeechSynthesisUtterance.h"
 #include "PlatformSpeechSynthesizer.h"
+#include "SpeechSynthesisClient.h"
 #include "SpeechSynthesisUtterance.h"
 #include "SpeechSynthesisVoice.h"
 #include <wtf/Deque.h>
 #include <wtf/RefCounted.h>
 
 namespace WebCore {
 
 class PlatformSpeechSynthesizerClient;
 class SpeechSynthesisVoice;
 
-class SpeechSynthesis : public PlatformSpeechSynthesizerClient, public RefCounted<SpeechSynthesis> {
+class SpeechSynthesis : public PlatformSpeechSynthesizerClient, public SpeechSynthesisClientObserver, public RefCounted<SpeechSynthesis> {
 public:
-    static Ref<SpeechSynthesis> create();
+    static Ref<SpeechSynthesis> create(WeakPtr<SpeechSynthesisClient>);
 
     bool pending() const;
     bool speaking() const;
     bool paused() const;
 
@@ -56,24 +57,33 @@
 
     // Used in testing to use a mock platform synthesizer
     WEBCORE_EXPORT void setPlatformSynthesizer(std::unique_ptr<PlatformSpeechSynthesizer>);
 
 private:
-    SpeechSynthesis();
+    SpeechSynthesis(WeakPtr<SpeechSynthesisClient>);
 
     // PlatformSpeechSynthesizerClient override methods.
     void voicesDidChange() override;
     void didStartSpeaking(PlatformSpeechSynthesisUtterance&) override;
     void didPauseSpeaking(PlatformSpeechSynthesisUtterance&) override;
     void didResumeSpeaking(PlatformSpeechSynthesisUtterance&) override;
     void didFinishSpeaking(PlatformSpeechSynthesisUtterance&) override;
     void speakingErrorOccurred(PlatformSpeechSynthesisUtterance&) override;
     void boundaryEventOccurred(PlatformSpeechSynthesisUtterance&, SpeechBoundary, unsigned charIndex) override;
 
+    // SpeechSynthesisClient override methods
+    void didStartSpeaking() override;
+    void didFinishSpeaking() override;
+    void didPauseSpeaking() override;
+    void didResumeSpeaking() override;
+    void speakingErrorOccurred() override;
+    void boundaryEventOccurred(bool wordBoundary, unsigned charIndex) override;
+    void voicesChanged() override;
+
     void startSpeakingImmediately(SpeechSynthesisUtterance&);
     void handleSpeakingCompleted(SpeechSynthesisUtterance&, bool errorOccurred);
-    void fireEvent(const AtomicString& type, SpeechSynthesisUtterance&, unsigned long charIndex, const String& name);
+    void fireEvent(const AtomString& type, SpeechSynthesisUtterance&, unsigned long charIndex, const String& name);
 
 #if PLATFORM(IOS_FAMILY)
     // Restrictions to change default behaviors.
     enum BehaviorRestrictionFlags {
         NoRestrictions = 0,
@@ -82,18 +92,21 @@
     typedef unsigned BehaviorRestrictions;
 
     bool userGestureRequiredForSpeechStart() const { return m_restrictions & RequireUserGestureForSpeechStartRestriction; }
     void removeBehaviorRestriction(BehaviorRestrictions restriction) { m_restrictions &= ~restriction; }
 #endif
+    PlatformSpeechSynthesizer& ensurePlatformSpeechSynthesizer();
+
     std::unique_ptr<PlatformSpeechSynthesizer> m_platformSpeechSynthesizer;
     Vector<Ref<SpeechSynthesisVoice>> m_voiceList;
     SpeechSynthesisUtterance* m_currentSpeechUtterance;
     Deque<Ref<SpeechSynthesisUtterance>> m_utteranceQueue;
     bool m_isPaused;
 #if PLATFORM(IOS_FAMILY)
     BehaviorRestrictions m_restrictions;
 #endif
+    WeakPtr<SpeechSynthesisClient> m_speechSynthesisClient;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(SPEECH_SYNTHESIS)
