diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLUnsignedIntegerLiteral.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLUnsignedIntegerLiteral.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLUnsignedIntegerLiteral.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLUnsignedIntegerLiteral.h
@@ -26,46 +26,47 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "WHLSLExpression.h"
-#include "WHLSLLexer.h"
 #include "WHLSLUnsignedIntegerLiteralType.h"
+#include <wtf/FastMalloc.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class UnsignedIntegerLiteral : public Expression {
+class UnsignedIntegerLiteral final : public Expression {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    UnsignedIntegerLiteral(Lexer::Token&& origin, unsigned value)
-        : Expression(Lexer::Token(origin))
-        , m_type(WTFMove(origin), value)
+    UnsignedIntegerLiteral(CodeLocation location, unsigned value)
+        : Expression(location, Kind::UnsignedIntegerLiteral)
+        , m_type(location, value)
         , m_value(value)
     {
     }
 
-    virtual ~UnsignedIntegerLiteral() = default;
+    ~UnsignedIntegerLiteral() = default;
 
     UnsignedIntegerLiteral(const UnsignedIntegerLiteral&) = delete;
     UnsignedIntegerLiteral(UnsignedIntegerLiteral&&) = default;
 
     UnsignedIntegerLiteral& operator=(const UnsignedIntegerLiteral&) = delete;
     UnsignedIntegerLiteral& operator=(UnsignedIntegerLiteral&&) = default;
 
     UnsignedIntegerLiteralType& type() { return m_type; }
     unsigned value() const { return m_value; }
 
-    bool isUnsignedIntegerLiteral() const override { return true; }
-
     UnsignedIntegerLiteral clone() const
     {
-        UnsignedIntegerLiteral result(Lexer::Token(origin()), m_value);
-        if (result.m_type.resolvedType())
-            result.m_type.resolve(result.m_type.resolvedType()->clone());
+        UnsignedIntegerLiteral result(codeLocation(), m_value);
+        result.m_type = m_type.clone();
+        if (auto* resolvedType = m_type.maybeResolvedType())
+            result.m_type.resolve(const_cast<AST::UnnamedType&>(*resolvedType));
+        copyTypeTo(result);
         return result;
     }
 
     int64_t valueForSelectedType() const;
 
@@ -78,8 +79,10 @@
 
 }
 
 }
 
+DEFINE_DEFAULT_DELETE(UnsignedIntegerLiteral)
+
 SPECIALIZE_TYPE_TRAITS_WHLSL_EXPRESSION(UnsignedIntegerLiteral, isUnsignedIntegerLiteral())
 
 #endif
