diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/SourceBufferPrivate.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/SourceBufferPrivate.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/SourceBufferPrivate.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/SourceBufferPrivate.h
@@ -53,21 +53,27 @@
     virtual void removedFromMediaSource() = 0;
 
     virtual MediaPlayer::ReadyState readyState() const = 0;
     virtual void setReadyState(MediaPlayer::ReadyState) = 0;
 
-    virtual void flush(const AtomicString&) { }
-    virtual void enqueueSample(Ref<MediaSample>&&, const AtomicString&) { }
-    virtual void allSamplesInTrackEnqueued(const AtomicString&) { }
-    virtual bool isReadyForMoreSamples(const AtomicString&) { return false; }
+    virtual void flush(const AtomString&) { }
+    virtual void enqueueSample(Ref<MediaSample>&&, const AtomString&) { }
+    virtual void allSamplesInTrackEnqueued(const AtomString&) { }
+    virtual bool isReadyForMoreSamples(const AtomString&) { return false; }
     virtual void setActive(bool) { }
-    virtual void notifyClientWhenReadyForMoreSamples(const AtomicString&) { }
-
-    virtual Vector<String> enqueuedSamplesForTrackID(const AtomicString&) { return { }; }
+    virtual void notifyClientWhenReadyForMoreSamples(const AtomString&) { }
 
+    virtual bool canSetMinimumUpcomingPresentationTime(const AtomString&) const { return false; }
+    virtual void setMinimumUpcomingPresentationTime(const AtomString&, const MediaTime&) { }
+    virtual void clearMinimumUpcomingPresentationTime(const AtomString&) { }
     virtual bool canSwitchToType(const ContentType&) { return false; }
 
+    // Internals Utility methods:
+    virtual Vector<String> enqueuedSamplesForTrackID(const AtomString&) { return { }; }
+    virtual MediaTime minimumUpcomingPresentationTimeForTrackID(const AtomString&) { return MediaTime::invalidTime(); }
+    virtual void setMaximumQueueDepthForTrackID(const AtomString&, size_t) { }
+
 #if !RELEASE_LOG_DISABLED
     virtual const Logger& sourceBufferLogger() const = 0;
     virtual const void* sourceBufferLogIdentifier() = 0;
 #endif
 };
