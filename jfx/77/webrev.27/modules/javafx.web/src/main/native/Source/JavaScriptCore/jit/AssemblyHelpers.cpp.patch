diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/AssemblyHelpers.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/AssemblyHelpers.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/AssemblyHelpers.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/AssemblyHelpers.cpp
@@ -42,14 +42,14 @@
 
 namespace JSC {
 
 ExecutableBase* AssemblyHelpers::executableFor(const CodeOrigin& codeOrigin)
 {
-    if (!codeOrigin.inlineCallFrame)
+    auto* inlineCallFrame = codeOrigin.inlineCallFrame();
+    if (!inlineCallFrame)
         return m_codeBlock->ownerExecutable();
-
-    return codeOrigin.inlineCallFrame->baselineCodeBlock->ownerExecutable();
+    return inlineCallFrame->baselineCodeBlock->ownerExecutable();
 }
 
 AssemblyHelpers::Jump AssemblyHelpers::branchIfFastTypedArray(GPRReg baseGPR)
 {
     return branch32(
@@ -544,11 +544,11 @@
     xorPtr(Address(allocatorGPR, LocalAllocator::offsetOfFreeList() + FreeList::offsetOfSecret()), resultGPR);
     slowPath.append(branchTestPtr(Zero, resultGPR));
 
     // The object is half-allocated: we have what we know is a fresh object, but
     // it's still on the GC's free list.
-    loadPtr(Address(resultGPR), scratchGPR);
+    loadPtr(Address(resultGPR, FreeCell::offsetOfScrambledNext()), scratchGPR);
     storePtr(scratchGPR, Address(allocatorGPR, LocalAllocator::offsetOfFreeList() + FreeList::offsetOfScrambledHead()));
 
     done.link(this);
 }
 
@@ -632,11 +632,11 @@
 {
     move(TrustedImmPtr(info), GPRInfo::regT2);
     Call call = nearCall();
     addLinkTask(
         [=, &vm] (LinkBuffer& linkBuffer) {
-            MacroAssemblerCodeRef<JITStubRoutinePtrTag> virtualThunk = virtualThunkFor(&vm, *info);
+            MacroAssemblerCodeRef<JITStubRoutinePtrTag> virtualThunk = virtualThunkFor(vm, *info);
             info->setSlowStub(createJITStubRoutine(virtualThunk, vm, nullptr, true));
             linkBuffer.link(call, CodeLocationLabel<JITStubRoutinePtrTag>(virtualThunk.code()));
         });
 }
 
@@ -725,11 +725,11 @@
     }
     move(invert ? TrustedImm32(0) : TrustedImm32(1), result);
     done.append(jump());
 
     isString.link(this);
-    move(TrustedImmPtr(jsEmptyString(&vm)), result);
+    move(TrustedImmPtr(jsEmptyString(vm)), result);
     comparePtr(invert ? Equal : NotEqual, value.payloadGPR(), result, result);
     done.append(jump());
 
     isBigInt.link(this);
     load32(Address(value.payloadGPR(), JSBigInt::offsetOfLength()), result);
@@ -815,11 +815,11 @@
         else
             truthy.append(jump());
     }
 
     isString.link(this);
-    truthy.append(branchPtr(invert ? Equal : NotEqual, value.payloadGPR(), TrustedImmPtr(jsEmptyString(&vm))));
+    truthy.append(branchPtr(invert ? Equal : NotEqual, value.payloadGPR(), TrustedImmPtr(jsEmptyString(vm))));
     done.append(jump());
 
     isBigInt.link(this);
     truthy.append(branchTest32(invert ? Zero : NonZero, Address(value.payloadGPR(), JSBigInt::offsetOfLength())));
     done.append(jump());
