diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/CustomElementReactionQueue.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/CustomElementReactionQueue.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/CustomElementReactionQueue.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/CustomElementReactionQueue.cpp
@@ -61,11 +61,11 @@
         : m_type(Type::Adopted)
         , m_oldDocument(&oldDocument)
         , m_newDocument(&newDocument)
     { }
 
-    CustomElementReactionQueueItem(const QualifiedName& attributeName, const AtomicString& oldValue, const AtomicString& newValue)
+    CustomElementReactionQueueItem(const QualifiedName& attributeName, const AtomString& oldValue, const AtomString& newValue)
         : m_type(Type::AttributeChanged)
         , m_attributeName(attributeName)
         , m_oldValue(oldValue)
         , m_newValue(newValue)
     { }
@@ -97,12 +97,12 @@
 private:
     Type m_type;
     RefPtr<Document> m_oldDocument;
     RefPtr<Document> m_newDocument;
     Optional<QualifiedName> m_attributeName;
-    AtomicString m_oldValue;
-    AtomicString m_newValue;
+    AtomString m_oldValue;
+    AtomString m_newValue;
 };
 
 CustomElementReactionQueue::CustomElementReactionQueue(JSCustomElementInterface& elementInterface)
     : m_interface(elementInterface)
 { }
@@ -188,11 +188,11 @@
         return;
     queue.m_items.append({oldDocument, newDocument});
     enqueueElementOnAppropriateElementQueue(element);
 }
 
-void CustomElementReactionQueue::enqueueAttributeChangedCallbackIfNeeded(Element& element, const QualifiedName& attributeName, const AtomicString& oldValue, const AtomicString& newValue)
+void CustomElementReactionQueue::enqueueAttributeChangedCallbackIfNeeded(Element& element, const QualifiedName& attributeName, const AtomString& oldValue, const AtomString& newValue)
 {
     ASSERT(CustomElementReactionDisallowedScope::isReactionAllowed());
     ASSERT(element.isDefinedCustomElement());
     ASSERT(element.document().refCount() > 0);
     ASSERT(element.reactionQueue());
@@ -332,11 +332,11 @@
 
 CustomElementReactionQueue::ElementQueue& CustomElementReactionQueue::ensureBackupQueue()
 {
     if (!s_processingBackupElementQueue) {
         s_processingBackupElementQueue = true;
-        MicrotaskQueue::mainThreadQueue().append(std::make_unique<BackupElementQueueMicrotask>());
+        MicrotaskQueue::mainThreadQueue().append(makeUnique<BackupElementQueueMicrotask>());
     }
     return backupElementQueue();
 }
 
 void CustomElementReactionQueue::processBackupQueue()
