diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ValueRecovery.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ValueRecovery.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ValueRecovery.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ValueRecovery.h
@@ -41,11 +41,11 @@
 struct DumpContext;
 struct InlineCallFrame;
 
 // Describes how to recover a given bytecode virtual register at a given
 // code point.
-enum ValueRecoveryTechnique {
+enum ValueRecoveryTechnique : uint8_t {
     // It's in a register.
     InGPR,
     UnboxedInt32InGPR,
     UnboxedInt52InGPR,
     UnboxedStrictInt52InGPR,
@@ -114,21 +114,25 @@
             result.m_technique = UnboxedBooleanInGPR;
         else if (dataFormat == DataFormatCell)
             result.m_technique = UnboxedCellInGPR;
         else
             result.m_technique = InGPR;
-        result.m_source.gpr = gpr;
+        UnionType u;
+        u.gpr = gpr;
+        result.m_source = WTFMove(u);
         return result;
     }
 
 #if USE(JSVALUE32_64)
     static ValueRecovery inPair(MacroAssembler::RegisterID tagGPR, MacroAssembler::RegisterID payloadGPR)
     {
         ValueRecovery result;
         result.m_technique = InPair;
-        result.m_source.pair.tagGPR = tagGPR;
-        result.m_source.pair.payloadGPR = payloadGPR;
+        UnionType u;
+        u.pair.tagGPR = tagGPR;
+        u.pair.payloadGPR = payloadGPR;
+        result.m_source = WTFMove(u);
         return result;
     }
 #endif
 
     static ValueRecovery inFPR(MacroAssembler::FPRegisterID fpr, DataFormat dataFormat)
@@ -137,11 +141,13 @@
         ValueRecovery result;
         if (dataFormat == DataFormatDouble)
             result.m_technique = UnboxedDoubleInFPR;
         else
             result.m_technique = InFPR;
-        result.m_source.fpr = fpr;
+        UnionType u;
+        u.fpr = fpr;
+        result.m_source = WTFMove(u);
         return result;
     }
 
     static ValueRecovery displacedInJSStack(VirtualRegister virtualReg, DataFormat dataFormat)
     {
@@ -174,35 +180,43 @@
         default:
             ASSERT(dataFormat != DataFormatNone && dataFormat != DataFormatStorage);
             result.m_technique = DisplacedInJSStack;
             break;
         }
-        result.m_source.virtualReg = virtualReg.offset();
+        UnionType u;
+        u.virtualReg = virtualReg.offset();
+        result.m_source = WTFMove(u);
         return result;
     }
 
     static ValueRecovery constant(JSValue value)
     {
         ValueRecovery result;
         result.m_technique = Constant;
-        result.m_source.constant = JSValue::encode(value);
+        UnionType u;
+        u.constant = JSValue::encode(value);
+        result.m_source = WTFMove(u);
         return result;
     }
 
     static ValueRecovery directArgumentsThatWereNotCreated(DFG::MinifiedID id)
     {
         ValueRecovery result;
         result.m_technique = DirectArgumentsThatWereNotCreated;
-        result.m_source.nodeID = id.bits();
+        UnionType u;
+        u.nodeID = id.bits();
+        result.m_source = WTFMove(u);
         return result;
     }
 
     static ValueRecovery clonedArgumentsThatWereNotCreated(DFG::MinifiedID id)
     {
         ValueRecovery result;
         result.m_technique = ClonedArgumentsThatWereNotCreated;
-        result.m_source.nodeID = id.bits();
+        UnionType u;
+        u.nodeID = id.bits();
+        result.m_source = WTFMove(u);
         return result;
     }
 
     ValueRecoveryTechnique technique() const { return m_technique; }
 
@@ -290,24 +304,24 @@
     }
 
     MacroAssembler::RegisterID gpr() const
     {
         ASSERT(isInGPR());
-        return m_source.gpr;
+        return m_source.get().gpr;
     }
 
 #if USE(JSVALUE32_64)
     MacroAssembler::RegisterID tagGPR() const
     {
         ASSERT(m_technique == InPair);
-        return m_source.pair.tagGPR;
+        return m_source.get().pair.tagGPR;
     }
 
     MacroAssembler::RegisterID payloadGPR() const
     {
         ASSERT(m_technique == InPair);
-        return m_source.pair.payloadGPR;
+        return m_source.get().pair.payloadGPR;
     }
 
     bool isInJSValueRegs() const
     {
         return m_technique == InPair;
@@ -328,17 +342,17 @@
 #endif // USE(JSVALUE32_64)
 
     MacroAssembler::FPRegisterID fpr() const
     {
         ASSERT(isInFPR());
-        return m_source.fpr;
+        return m_source.get().fpr;
     }
 
     VirtualRegister virtualRegister() const
     {
         ASSERT(isInJSStack());
-        return VirtualRegister(m_source.virtualReg);
+        return VirtualRegister(m_source.get().virtualReg);
     }
 
     ValueRecovery withLocalsOffset(int offset) const
     {
         switch (m_technique) {
@@ -349,11 +363,13 @@
         case BooleanDisplacedInJSStack:
         case Int52DisplacedInJSStack:
         case StrictInt52DisplacedInJSStack: {
             ValueRecovery result;
             result.m_technique = m_technique;
-            result.m_source.virtualReg = m_source.virtualReg + offset;
+            UnionType u;
+            u.virtualReg = m_source.get().virtualReg + offset;
+            result.m_source = WTFMove(u);
             return result;
         }
 
         default:
             return *this;
@@ -361,17 +377,17 @@
     }
 
     JSValue constant() const
     {
         ASSERT(isConstant());
-        return JSValue::decode(m_source.constant);
+        return JSValue::decode(m_source.get().constant);
     }
 
     DFG::MinifiedID nodeID() const
     {
         ASSERT(m_technique == DirectArgumentsThatWereNotCreated || m_technique == ClonedArgumentsThatWereNotCreated);
-        return DFG::MinifiedID::fromBits(m_source.nodeID);
+        return DFG::MinifiedID::fromBits(m_source.get().nodeID);
     }
 
     JSValue recover(ExecState*) const;
 
 #if ENABLE(JIT)
@@ -406,21 +422,23 @@
     void dump(PrintStream& out) const;
 #endif
 
 private:
     ValueRecoveryTechnique m_technique;
-    union {
+    union UnionType {
         MacroAssembler::RegisterID gpr;
         MacroAssembler::FPRegisterID fpr;
 #if USE(JSVALUE32_64)
         struct {
             MacroAssembler::RegisterID tagGPR;
             MacroAssembler::RegisterID payloadGPR;
         } pair;
 #endif
         int virtualReg;
         EncodedJSValue constant;
-        uintptr_t nodeID;
-    } m_source;
+        unsigned nodeID;
+    };
+    Packed<UnionType> m_source;
 };
+static_assert(alignof(ValueRecovery) == 1);
 
 } // namespace JSC
