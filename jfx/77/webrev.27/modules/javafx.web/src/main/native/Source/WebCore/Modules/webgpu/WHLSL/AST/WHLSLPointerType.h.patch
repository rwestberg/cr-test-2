diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLPointerType.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLPointerType.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLPointerType.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLPointerType.h
@@ -25,47 +25,65 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
-#include "WHLSLLexer.h"
+#include "WHLSLCodeLocation.h"
 #include "WHLSLReferenceType.h"
+#include <wtf/FastMalloc.h>
+#include <wtf/Noncopyable.h>
 #include <wtf/UniqueRef.h>
+#include <wtf/text/StringConcatenate.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class PointerType : public ReferenceType {
-public:
-    PointerType(Lexer::Token&& origin, AddressSpace addressSpace, UniqueRef<UnnamedType> elementType)
-        : ReferenceType(WTFMove(origin), addressSpace, WTFMove(elementType))
+class PointerType final : public ReferenceType {
+    WTF_MAKE_FAST_ALLOCATED;
+    WTF_MAKE_NONCOPYABLE(PointerType);
+    using Base = ReferenceType;
+
+    PointerType(CodeLocation location, AddressSpace addressSpace, Ref<UnnamedType> elementType)
+        : Base(location, addressSpace, WTFMove(elementType), Kind::Pointer)
     {
     }
 
-    virtual ~PointerType() = default;
+public:
+    static Ref<PointerType> create(CodeLocation location, AddressSpace addressSpace, Ref<UnnamedType> elementType)
+    {
+        auto result = adoptRef(*new PointerType(location, addressSpace, WTFMove(elementType)));
+        return result;
+    }
 
-    PointerType(const PointerType&) = delete;
-    PointerType(PointerType&&) = default;
+    ~PointerType() = default;
 
-    bool isPointerType() const override { return true; }
+    unsigned hash() const
+    {
+        return this->Base::hash() ^ StringHasher::computeLiteralHash("pointer");
+    }
 
-    UniqueRef<UnnamedType> clone() const override
+    bool operator==(const PointerType& other) const
     {
-        return makeUniqueRef<PointerType>(Lexer::Token(origin()), addressSpace(), elementType().clone());
+        return addressSpace() == other.addressSpace() && elementType() == other.elementType();
     }
 
-private:
+    String toString() const
+    {
+        return makeString(elementType().toString(), '*');
+    }
 };
 
 } // namespace AST
 
 }
 
 }
 
-SPECIALIZE_TYPE_TRAITS_WHLSL_UNNAMED_TYPE(PointerType, isPointerType())
+DEFINE_DEFAULT_DELETE(PointerType)
+
+SPECIALIZE_TYPE_TRAITS_WHLSL_TYPE(PointerType, isPointerType())
 
 #endif
