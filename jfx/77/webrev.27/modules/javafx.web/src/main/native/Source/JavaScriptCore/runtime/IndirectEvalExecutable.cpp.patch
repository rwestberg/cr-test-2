diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IndirectEvalExecutable.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IndirectEvalExecutable.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IndirectEvalExecutable.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IndirectEvalExecutable.cpp
@@ -49,14 +49,14 @@
     auto* executable = new (NotNull, allocateCell<IndirectEvalExecutable>(vm.heap)) IndirectEvalExecutable(exec, source, isInStrictContext, derivedContextType, isArrowFunctionContext, evalContextType);
     executable->finishCreation(vm);
 
     ParserError error;
     JSParserStrictMode strictMode = executable->isStrictMode() ? JSParserStrictMode::Strict : JSParserStrictMode::NotStrict;
-    DebuggerMode debuggerMode = globalObject->hasInteractiveDebugger() ? DebuggerOn : DebuggerOff;
+    OptionSet<CodeGenerationMode> codeGenerationMode = globalObject->defaultCodeGenerationMode();
 
     UnlinkedEvalCodeBlock* unlinkedEvalCode = vm.codeCache()->getUnlinkedEvalCodeBlock(
-        vm, executable, executable->source(), strictMode, debuggerMode, error, evalContextType);
+        vm, executable, executable->source(), strictMode, codeGenerationMode, error, evalContextType);
 
     if (globalObject->hasDebugger())
         globalObject->debugger()->sourceParsed(exec, executable->source().provider(), error.line(), error.message());
 
     if (error.isValid()) {
