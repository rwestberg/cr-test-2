diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLTypeReference.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLTypeReference.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLTypeReference.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLTypeReference.h
@@ -25,14 +25,16 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
-#include "WHLSLLexer.h"
+#include "WHLSLCodeLocation.h"
 #include "WHLSLNamedType.h"
 #include "WHLSLTypeArgument.h"
 #include "WHLSLUnnamedType.h"
+#include <wtf/FastMalloc.h>
+#include <wtf/Noncopyable.h>
 #include <wtf/UniqueRef.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
@@ -40,60 +42,71 @@
 
 namespace AST {
 
 class NamedType;
 
-class TypeReference : public UnnamedType {
-public:
-    TypeReference(Lexer::Token&& origin, String&& name, TypeArguments&& typeArguments)
-        : UnnamedType(WTFMove(origin))
+class TypeReference final : public UnnamedType {
+    WTF_MAKE_FAST_ALLOCATED;
+    WTF_MAKE_NONCOPYABLE(TypeReference);
+    TypeReference(CodeLocation location, String&& name, TypeArguments&& typeArguments)
+        : UnnamedType(location, Kind::TypeReference)
         , m_name(WTFMove(name))
         , m_typeArguments(WTFMove(typeArguments))
     {
     }
+public:
+    static Ref<TypeReference> create(CodeLocation location, String&& name, TypeArguments&& typeArguments)
+    {
+        return adoptRef(* new TypeReference(location, WTFMove(name), WTFMove(typeArguments)));
+    }
 
-    virtual ~TypeReference() = default;
-
-    TypeReference(const TypeReference&) = delete;
-    TypeReference(TypeReference&&) = default;
-
-    static UniqueRef<TypeReference> wrap(Lexer::Token&& origin, NamedType& resolvedType);
+    ~TypeReference() = default;
 
-    bool isTypeReference() const override { return true; }
+    static Ref<TypeReference> wrap(CodeLocation, NamedType& resolvedType);
 
     String& name() { return m_name; }
     TypeArguments& typeArguments() { return m_typeArguments; }
-    NamedType* resolvedType() const { return m_resolvedType; }
-
-    const Type& unifyNode() const override
+    NamedType* maybeResolvedType() const { return m_resolvedType; }
+    NamedType& resolvedType() const
     {
         ASSERT(m_resolvedType);
-        return m_resolvedType->unifyNode();
+        return *m_resolvedType;
     }
 
-    Type& unifyNode() override
+    void setResolvedType(NamedType& resolvedType)
     {
-        ASSERT(m_resolvedType);
-        return m_resolvedType->unifyNode();
+        m_resolvedType = &resolvedType;
     }
 
-    void setResolvedType(NamedType& resolvedType)
+    unsigned hash() const
     {
-        m_resolvedType = &resolvedType;
+        // Currently, we only use this function after the name resolver runs.
+        // Relying on having a resolved type simplifies this implementation.
+        ASSERT(m_resolvedType);
+        return WTF::PtrHash<const Type*>::hash(&unifyNode());
     }
 
-    UniqueRef<TypeReference> cloneTypeReference() const
+    bool operator==(const TypeReference& other) const
     {
-        return makeUniqueRef<TypeReference>(Lexer::Token(origin()), String(m_name), AST::clone(m_typeArguments));
+        ASSERT(m_resolvedType);
+        return &unifyNode() == &other.unifyNode();
     }
 
-    UniqueRef<UnnamedType> clone() const override
+    String toString() const
     {
-        return cloneTypeReference();
+        ASSERT(m_resolvedType);
+        return m_resolvedType->name();
     }
 
 private:
+    friend class Type;
+    Type& unifyNodeImpl()
+    {
+        ASSERT(m_resolvedType);
+        return m_resolvedType->unifyNode();
+    }
+
     String m_name;
     TypeArguments m_typeArguments;
     NamedType* m_resolvedType { nullptr };
 };
 
@@ -101,8 +114,10 @@
 
 }
 
 }
 
-SPECIALIZE_TYPE_TRAITS_WHLSL_UNNAMED_TYPE(TypeReference, isTypeReference())
+DEFINE_DEFAULT_DELETE(TypeReference)
+
+SPECIALIZE_TYPE_TRAITS_WHLSL_TYPE(TypeReference, isTypeReference())
 
 #endif
