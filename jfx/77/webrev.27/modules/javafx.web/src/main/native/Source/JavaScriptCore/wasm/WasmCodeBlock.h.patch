diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmCodeBlock.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmCodeBlock.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmCodeBlock.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmCodeBlock.h
@@ -94,39 +94,42 @@
         if (m_optimizedCallees[calleeIndex])
             return *m_optimizedCallees[calleeIndex].get();
         return *m_callees[calleeIndex].get();
     }
 
-    MacroAssemblerCodePtr<WasmEntryPtrTag>* entrypointLoadLocationFromFunctionIndexSpace(unsigned functionIndexSpace)
+    Callee& wasmBBQCalleeFromFunctionIndexSpace(unsigned functionIndexSpace)
     {
+        ASSERT(runnable());
         RELEASE_ASSERT(functionIndexSpace >= functionImportCount());
         unsigned calleeIndex = functionIndexSpace - functionImportCount();
-        return &m_wasmIndirectCallEntryPoints[calleeIndex];
+        return *m_callees[calleeIndex].get();
     }
 
-    TierUpCount& tierUpCount(uint32_t functionIndex)
+    MacroAssemblerCodePtr<WasmEntryPtrTag>* entrypointLoadLocationFromFunctionIndexSpace(unsigned functionIndexSpace)
     {
-        return m_tierUpCounts[functionIndex];
+        RELEASE_ASSERT(functionIndexSpace >= functionImportCount());
+        unsigned calleeIndex = functionIndexSpace - functionImportCount();
+        return &m_wasmIndirectCallEntryPoints[calleeIndex];
     }
 
     bool isSafeToRun(MemoryMode);
 
     MemoryMode mode() const { return m_mode; }
 
     ~CodeBlock();
 private:
     friend class OMGPlan;
+    friend class OMGForOSREntryPlan;
 
     CodeBlock(Context*, MemoryMode, ModuleInformation&, CreateEmbedderWrapper&&, ThrowWasmException);
     void setCompilationFinished();
     unsigned m_calleeCount;
     MemoryMode m_mode;
     Vector<RefPtr<Callee>> m_callees;
     Vector<RefPtr<Callee>> m_optimizedCallees;
     HashMap<uint32_t, RefPtr<Callee>, typename DefaultHash<uint32_t>::Hash, WTF::UnsignedWithZeroKeyHashTraits<uint32_t>> m_embedderCallees;
     Vector<MacroAssemblerCodePtr<WasmEntryPtrTag>> m_wasmIndirectCallEntryPoints;
-    Vector<TierUpCount> m_tierUpCounts;
     Vector<Vector<UnlinkedWasmToWasmCall>> m_wasmToWasmCallsites;
     Vector<MacroAssemblerCodeRef<WasmEntryPtrTag>> m_wasmToWasmExitStubs;
     RefPtr<BBQPlan> m_plan;
     std::atomic<bool> m_compilationFinished { false };
     String m_errorMessage;
