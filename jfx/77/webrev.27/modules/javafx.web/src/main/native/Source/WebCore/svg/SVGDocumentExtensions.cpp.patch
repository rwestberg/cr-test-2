diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGDocumentExtensions.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGDocumentExtensions.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGDocumentExtensions.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGDocumentExtensions.cpp
@@ -33,17 +33,17 @@
 #include "SVGResourcesCache.h"
 #include "SVGSMILElement.h"
 #include "SVGSVGElement.h"
 #include "ScriptableDocumentParser.h"
 #include "ShadowRoot.h"
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
 SVGDocumentExtensions::SVGDocumentExtensions(Document& document)
     : m_document(document)
-    , m_resourcesCache(std::make_unique<SVGResourcesCache>())
+    , m_resourcesCache(makeUnique<SVGResourcesCache>())
     , m_areAnimationsPaused(!document.page() || !document.page()->isVisible())
 {
 }
 
 SVGDocumentExtensions::~SVGDocumentExtensions() = default;
@@ -58,28 +58,28 @@
 void SVGDocumentExtensions::removeTimeContainer(SVGSVGElement& element)
 {
     m_timeContainers.remove(&element);
 }
 
-void SVGDocumentExtensions::addResource(const AtomicString& id, RenderSVGResourceContainer& resource)
+void SVGDocumentExtensions::addResource(const AtomString& id, RenderSVGResourceContainer& resource)
 {
     if (id.isEmpty())
         return;
 
     // Replaces resource if already present, to handle potential id changes
     m_resources.set(id, &resource);
 }
 
-void SVGDocumentExtensions::removeResource(const AtomicString& id)
+void SVGDocumentExtensions::removeResource(const AtomString& id)
 {
     if (id.isEmpty())
         return;
 
     m_resources.remove(id);
 }
 
-RenderSVGResourceContainer* SVGDocumentExtensions::resourceById(const AtomicString& id) const
+RenderSVGResourceContainer* SVGDocumentExtensions::resourceById(const AtomString& id) const
 {
     if (id.isEmpty())
         return 0;
 
     return m_resources.get(id);
@@ -137,24 +137,24 @@
 void SVGDocumentExtensions::reportError(const String& message)
 {
     reportMessage(m_document, MessageLevel::Error, "Error: " + message);
 }
 
-void SVGDocumentExtensions::addPendingResource(const AtomicString& id, Element& element)
+void SVGDocumentExtensions::addPendingResource(const AtomString& id, Element& element)
 {
     if (id.isEmpty())
         return;
 
     auto result = m_pendingResources.add(id, nullptr);
     if (result.isNewEntry)
-        result.iterator->value = std::make_unique<PendingElements>();
+        result.iterator->value = makeUnique<PendingElements>();
     result.iterator->value->add(&element);
 
     element.setHasPendingResources();
 }
 
-bool SVGDocumentExtensions::isIdOfPendingResource(const AtomicString& id) const
+bool SVGDocumentExtensions::isIdOfPendingResource(const AtomString& id) const
 {
     if (id.isEmpty())
         return false;
 
     return m_pendingResources.contains(id);
@@ -170,11 +170,11 @@
             return true;
     }
     return false;
 }
 
-bool SVGDocumentExtensions::isPendingResource(Element& element, const AtomicString& id) const
+bool SVGDocumentExtensions::isPendingResource(Element& element, const AtomString& id) const
 {
     if (!isIdOfPendingResource(id))
         return false;
 
     return m_pendingResources.get(id)->contains(&element);
@@ -188,11 +188,11 @@
 
 void SVGDocumentExtensions::removeElementFromPendingResources(Element& element)
 {
     // Remove the element from pending resources.
     if (!m_pendingResources.isEmpty() && element.hasPendingResources()) {
-        Vector<AtomicString> toBeRemoved;
+        Vector<AtomString> toBeRemoved;
         for (auto& resource : m_pendingResources) {
             PendingElements* elements = resource.value.get();
             ASSERT(elements);
             ASSERT(!elements->isEmpty());
 
@@ -208,11 +208,11 @@
             removePendingResource(resource);
     }
 
     // Remove the element from pending resources that were scheduled for removal.
     if (!m_pendingResourcesForRemoval.isEmpty()) {
-        Vector<AtomicString> toBeRemoved;
+        Vector<AtomString> toBeRemoved;
         for (auto& resource : m_pendingResourcesForRemoval) {
             PendingElements* elements = resource.value.get();
             ASSERT(elements);
             ASSERT(!elements->isEmpty());
 
@@ -225,23 +225,23 @@
         for (auto& resource : toBeRemoved)
             removePendingResourceForRemoval(resource);
     }
 }
 
-std::unique_ptr<SVGDocumentExtensions::PendingElements> SVGDocumentExtensions::removePendingResource(const AtomicString& id)
+std::unique_ptr<SVGDocumentExtensions::PendingElements> SVGDocumentExtensions::removePendingResource(const AtomString& id)
 {
     ASSERT(m_pendingResources.contains(id));
     return m_pendingResources.take(id);
 }
 
-std::unique_ptr<SVGDocumentExtensions::PendingElements> SVGDocumentExtensions::removePendingResourceForRemoval(const AtomicString& id)
+std::unique_ptr<SVGDocumentExtensions::PendingElements> SVGDocumentExtensions::removePendingResourceForRemoval(const AtomString& id)
 {
     ASSERT(m_pendingResourcesForRemoval.contains(id));
     return m_pendingResourcesForRemoval.take(id);
 }
 
-void SVGDocumentExtensions::markPendingResourcesForRemoval(const AtomicString& id)
+void SVGDocumentExtensions::markPendingResourcesForRemoval(const AtomString& id)
 {
     if (id.isEmpty())
         return;
 
     ASSERT(!m_pendingResourcesForRemoval.contains(id));
@@ -249,11 +249,11 @@
     std::unique_ptr<PendingElements> existing = m_pendingResources.take(id);
     if (existing && !existing->isEmpty())
         m_pendingResourcesForRemoval.add(id, WTFMove(existing));
 }
 
-RefPtr<Element> SVGDocumentExtensions::removeElementFromPendingResourcesForRemovalMap(const AtomicString& id)
+RefPtr<Element> SVGDocumentExtensions::removeElementFromPendingResourcesForRemovalMap(const AtomString& id)
 {
     if (id.isEmpty())
         return 0;
 
     PendingElements* resourceSet = m_pendingResourcesForRemoval.get(id);
@@ -277,11 +277,11 @@
 }
 
 void SVGDocumentExtensions::addElementReferencingTarget(SVGElement& referencingElement, SVGElement& referencedElement)
 {
     auto result = m_elementDependencies.ensure(&referencedElement, [&referencingElement] {
-        return std::make_unique<HashSet<SVGElement*>>(std::initializer_list<SVGElement*> { &referencingElement });
+        return makeUnique<HashSet<SVGElement*>>(std::initializer_list<SVGElement*> { &referencingElement });
     });
     if (!result.isNewEntry)
         result.iterator->value->add(&referencingElement);
 }
 
