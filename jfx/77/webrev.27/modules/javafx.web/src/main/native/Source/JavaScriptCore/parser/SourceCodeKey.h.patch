diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/SourceCodeKey.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/SourceCodeKey.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/SourceCodeKey.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/SourceCodeKey.h
@@ -31,27 +31,23 @@
 #include <wtf/HashTraits.h>
 
 namespace JSC {
 
 enum class SourceCodeType { EvalType, ProgramType, FunctionType, ModuleType };
-enum class TypeProfilerEnabled { No, Yes };
-enum class ControlFlowProfilerEnabled { No, Yes };
 
 class SourceCodeFlags {
     friend class CachedSourceCodeKey;
 
 public:
     SourceCodeFlags() = default;
 
     SourceCodeFlags(
         SourceCodeType codeType, JSParserStrictMode strictMode, JSParserScriptMode scriptMode,
         DerivedContextType derivedContextType, EvalContextType evalContextType, bool isArrowFunctionContext,
-        DebuggerMode debuggerMode, TypeProfilerEnabled typeProfilerEnabled, ControlFlowProfilerEnabled controlFlowProfilerEnabled)
+        OptionSet<CodeGenerationMode> codeGenerationMode)
         : m_flags(
-            (static_cast<unsigned>(debuggerMode) << 8) |
-            (static_cast<unsigned>(typeProfilerEnabled) << 7) |
-            (static_cast<unsigned>(controlFlowProfilerEnabled) << 6) |
+            (static_cast<unsigned>(codeGenerationMode.toRaw()) << 6) |
             (static_cast<unsigned>(scriptMode) << 5) |
             (static_cast<unsigned>(isArrowFunctionContext) << 4) |
             (static_cast<unsigned>(evalContextType) << 3) |
             (static_cast<unsigned>(derivedContextType) << 2) |
             (static_cast<unsigned>(codeType) << 1) |
@@ -80,14 +76,14 @@
     }
 
     SourceCodeKey(
         const UnlinkedSourceCode& sourceCode, const String& name, SourceCodeType codeType, JSParserStrictMode strictMode,
         JSParserScriptMode scriptMode, DerivedContextType derivedContextType, EvalContextType evalContextType, bool isArrowFunctionContext,
-        DebuggerMode debuggerMode, TypeProfilerEnabled typeProfilerEnabled, ControlFlowProfilerEnabled controlFlowProfilerEnabled, Optional<int> functionConstructorParametersEndPosition)
+        OptionSet<CodeGenerationMode> codeGenerationMode, Optional<int> functionConstructorParametersEndPosition)
             : m_sourceCode(sourceCode)
             , m_name(name)
-            , m_flags(codeType, strictMode, scriptMode, derivedContextType, evalContextType, isArrowFunctionContext, debuggerMode, typeProfilerEnabled, controlFlowProfilerEnabled)
+            , m_flags(codeType, strictMode, scriptMode, derivedContextType, evalContextType, isArrowFunctionContext, codeGenerationMode)
             , m_functionConstructorParametersEndPosition(functionConstructorParametersEndPosition.valueOr(-1))
             , m_hash(sourceCode.hash() ^ m_flags.bits())
     {
     }
 
@@ -108,17 +104,20 @@
 
     // To save memory, we compute our string on demand. It's expected that source
     // providers cache their strings to make this efficient.
     StringView string() const { return m_sourceCode.view(); }
 
+    StringView host() const { return m_sourceCode.provider().url().host(); }
+
     bool operator==(const SourceCodeKey& other) const
     {
         return m_hash == other.m_hash
             && length() == other.length()
             && m_flags == other.m_flags
             && m_functionConstructorParametersEndPosition == other.m_functionConstructorParametersEndPosition
             && m_name == other.m_name
+            && host() == other.host()
             && string() == other.string();
     }
 
     bool operator!=(const SourceCodeKey& other) const
     {
