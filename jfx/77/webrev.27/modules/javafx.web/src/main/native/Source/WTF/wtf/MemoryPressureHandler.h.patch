diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/MemoryPressureHandler.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/MemoryPressureHandler.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/MemoryPressureHandler.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/MemoryPressureHandler.h
@@ -32,14 +32,10 @@
 #include <wtf/Forward.h>
 #include <wtf/Function.h>
 #include <wtf/Optional.h>
 #include <wtf/RunLoop.h>
 
-#if USE(GLIB)
-#include <wtf/glib/GRefPtr.h>
-#endif
-
 #if OS(WINDOWS)
 #include <wtf/win/Win32Handle.h>
 #endif
 
 namespace WTF {
@@ -59,10 +55,11 @@
 enum class Synchronous { No, Yes };
 
 typedef WTF::Function<void(Critical, Synchronous)> LowMemoryHandler;
 
 class MemoryPressureHandler {
+    WTF_MAKE_FAST_ALLOCATED;
     friend class WTF::NeverDestroyed<MemoryPressureHandler>;
 public:
     WTF_EXPORT_PRIVATE static MemoryPressureHandler& singleton();
 
     WTF_EXPORT_PRIVATE void install();
@@ -97,10 +94,11 @@
 #if PLATFORM(COCOA) || PLATFORM(JAVA) && OS(DARWIN)
     WTF_EXPORT_PRIVATE void setDispatchQueue(dispatch_queue_t);
 #endif
 
     class ReliefLogger {
+        WTF_MAKE_FAST_ALLOCATED;
     public:
         explicit ReliefLogger(const char *log)
             : m_logString(log)
             , m_initialMemory(loggingEnabled() ? platformMemoryUsage() : MemoryUsage { })
         {
@@ -124,10 +122,11 @@
 #endif
         }
 
     private:
         struct MemoryUsage {
+            WTF_MAKE_STRUCT_FAST_ALLOCATED;
             MemoryUsage() = default;
             MemoryUsage(size_t resident, size_t physical)
                 : resident(resident)
                 , physical(physical)
             {
@@ -179,23 +178,23 @@
 
     WebsamProcessState m_processState { WebsamProcessState::Inactive };
 
     unsigned m_pageCount { 0 };
 
-    bool m_installed { false };
     LowMemoryHandler m_lowMemoryHandler;
 
-    std::atomic<bool> m_underMemoryPressure;
+    std::atomic<bool> m_underMemoryPressure { false };
+    bool m_installed { false };
     bool m_isSimulatingMemoryPressure { false };
     bool m_shouldLogMemoryMemoryPressureEvents { true };
+    bool m_hasInvokedDidExceedInactiveLimitWhileActiveCallback { false };
 
     std::unique_ptr<RunLoop::Timer<MemoryPressureHandler>> m_measurementTimer;
     MemoryUsagePolicy m_memoryUsagePolicy { MemoryUsagePolicy::Unrestricted };
     WTF::Function<void()> m_memoryKillCallback;
     WTF::Function<void(bool)> m_memoryPressureStatusChangedCallback;
     WTF::Function<void()> m_didExceedInactiveLimitWhileActiveCallback;
-    bool m_hasInvokedDidExceedInactiveLimitWhileActiveCallback { false };
 
 #if OS(WINDOWS)
     void windowsMeasurementTimerFired();
     RunLoop::Timer<MemoryPressureHandler> m_windowsMeasurementTimer;
     Win32Handle m_lowMemoryHandle;
