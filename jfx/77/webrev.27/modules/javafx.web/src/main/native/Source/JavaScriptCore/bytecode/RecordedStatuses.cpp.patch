diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/RecordedStatuses.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/RecordedStatuses.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/RecordedStatuses.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/RecordedStatuses.cpp
@@ -43,35 +43,35 @@
     *this = WTFMove(other);
 }
 
 CallLinkStatus* RecordedStatuses::addCallLinkStatus(const CodeOrigin& codeOrigin, const CallLinkStatus& status)
 {
-    auto statusPtr = std::make_unique<CallLinkStatus>(status);
+    auto statusPtr = makeUnique<CallLinkStatus>(status);
     CallLinkStatus* result = statusPtr.get();
     calls.append(std::make_pair(codeOrigin, WTFMove(statusPtr)));
     return result;
 }
 
 GetByIdStatus* RecordedStatuses::addGetByIdStatus(const CodeOrigin& codeOrigin, const GetByIdStatus& status)
 {
-    auto statusPtr = std::make_unique<GetByIdStatus>(status);
+    auto statusPtr = makeUnique<GetByIdStatus>(status);
     GetByIdStatus* result = statusPtr.get();
     gets.append(std::make_pair(codeOrigin, WTFMove(statusPtr)));
     return result;
 }
 
 PutByIdStatus* RecordedStatuses::addPutByIdStatus(const CodeOrigin& codeOrigin, const PutByIdStatus& status)
 {
-    auto statusPtr = std::make_unique<PutByIdStatus>(status);
+    auto statusPtr = makeUnique<PutByIdStatus>(status);
     PutByIdStatus* result = statusPtr.get();
     puts.append(std::make_pair(codeOrigin, WTFMove(statusPtr)));
     return result;
 }
 
 InByIdStatus* RecordedStatuses::addInByIdStatus(const CodeOrigin& codeOrigin, const InByIdStatus& status)
 {
-    auto statusPtr = std::make_unique<InByIdStatus>(status);
+    auto statusPtr = makeUnique<InByIdStatus>(status);
     InByIdStatus* result = statusPtr.get();
     ins.append(std::make_pair(codeOrigin, WTFMove(statusPtr)));
     return result;
 }
 
@@ -83,32 +83,32 @@
         pair.second->markIfCheap(slotVisitor);
     for (auto& pair : ins)
         pair.second->markIfCheap(slotVisitor);
 }
 
-void RecordedStatuses::finalizeWithoutDeleting()
+void RecordedStatuses::finalizeWithoutDeleting(VM& vm)
 {
     // This variant of finalize gets called from within graph safepoints -- so there may be DFG IR in
     // some compiler thread that points to the statuses. That thread is stopped at a safepoint so
     // it's OK to edit its data structure, but it's not OK to delete them. Hence we don't remove
     // anything from the vector or delete the unique_ptrs.
 
-    auto finalize = [] (auto& vector) {
+    auto finalize = [&] (auto& vector) {
         for (auto& pair : vector) {
-            if (!pair.second->finalize())
+            if (!pair.second->finalize(vm))
                 *pair.second = { };
         }
     };
     forEachVector(finalize);
 }
 
-void RecordedStatuses::finalize()
+void RecordedStatuses::finalize(VM& vm)
 {
-    auto finalize = [] (auto& vector) {
+    auto finalize = [&] (auto& vector) {
         vector.removeAllMatching(
             [&] (auto& pair) -> bool {
-                return !*pair.second || !pair.second->finalize();
+                return !*pair.second || !pair.second->finalize(vm);
             });
         vector.shrinkToFit();
     };
     forEachVector(finalize);
 }
