diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/CookieJar.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/CookieJar.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/CookieJar.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/CookieJar.cpp
@@ -69,12 +69,12 @@
 {
     TraceScope scope(FetchCookiesStart, FetchCookiesEnd);
 
     auto includeSecureCookies = shouldIncludeSecureCookies(document, url);
 
-    Optional<uint64_t> frameID;
-    Optional<uint64_t> pageID;
+    Optional<FrameIdentifier> frameID;
+    Optional<PageIdentifier> pageID;
     if (auto* frame = document.frame()) {
         frameID = frame->loader().client().frameID();
         pageID = frame->loader().client().pageID();
     }
 
@@ -92,27 +92,24 @@
 
 CookieRequestHeaderFieldProxy CookieJar::cookieRequestHeaderFieldProxy(const Document& document, const URL& url)
 {
     TraceScope scope(FetchCookiesStart, FetchCookiesEnd);
 
-    CookieRequestHeaderFieldProxy proxy;
-    proxy.sessionID = document.sessionID();
-    proxy.firstParty = document.firstPartyForCookies();
-    proxy.sameSiteInfo = sameSiteInfo(document);
-    proxy.url = url;
-    proxy.includeSecureCookies = shouldIncludeSecureCookies(document, url);
+    Optional<FrameIdentifier> frameID;
+    Optional<PageIdentifier> pageID;
     if (auto* frame = document.frame()) {
-        proxy.frameID = frame->loader().client().frameID();
-        proxy.pageID = frame->loader().client().pageID();
+        frameID = frame->loader().client().frameID();
+        pageID = frame->loader().client().pageID();
     }
-    return proxy;
+
+    return { document.sessionID(), document.firstPartyForCookies(), sameSiteInfo(document), url, frameID, pageID, shouldIncludeSecureCookies(document, url) };
 }
 
 void CookieJar::setCookies(Document& document, const URL& url, const String& cookieString)
 {
-    Optional<uint64_t> frameID;
-    Optional<uint64_t> pageID;
+    Optional<FrameIdentifier> frameID;
+    Optional<PageIdentifier> pageID;
     if (auto* frame = document.frame()) {
         frameID = frame->loader().client().frameID();
         pageID = frame->loader().client().pageID();
     }
 
@@ -129,11 +126,11 @@
 
     ASSERT_NOT_REACHED();
     return false;
 }
 
-std::pair<String, SecureCookiesAccessed> CookieJar::cookieRequestHeaderFieldValue(const PAL::SessionID&, const URL& firstParty, const SameSiteInfo& sameSiteInfo, const URL& url, Optional<uint64_t> frameID, Optional<uint64_t> pageID, IncludeSecureCookies includeSecureCookies) const
+std::pair<String, SecureCookiesAccessed> CookieJar::cookieRequestHeaderFieldValue(const PAL::SessionID&, const URL& firstParty, const SameSiteInfo& sameSiteInfo, const URL& url, Optional<FrameIdentifier> frameID, Optional<PageIdentifier> pageID, IncludeSecureCookies includeSecureCookies) const
 {
     if (auto* session = m_storageSessionProvider->storageSession()) {
         std::pair<String, bool> result = session->cookieRequestHeaderFieldValue(firstParty, sameSiteInfo, url, frameID, pageID, includeSecureCookies);
         return { result.first, result.second ? SecureCookiesAccessed::Yes : SecureCookiesAccessed::No };
     }
@@ -142,12 +139,12 @@
     return { };
 }
 
 String CookieJar::cookieRequestHeaderFieldValue(Document& document, const URL& url) const
 {
-    Optional<uint64_t> frameID;
-    Optional<uint64_t> pageID;
+    Optional<FrameIdentifier> frameID;
+    Optional<PageIdentifier> pageID;
     if (auto* frame = document.frame()) {
         frameID = frame->loader().client().frameID();
         pageID = frame->loader().client().pageID();
     }
 
@@ -157,12 +154,12 @@
     return result.first;
 }
 
 bool CookieJar::getRawCookies(const Document& document, const URL& url, Vector<Cookie>& cookies) const
 {
-    Optional<uint64_t> frameID;
-    Optional<uint64_t> pageID;
+    Optional<FrameIdentifier> frameID;
+    Optional<PageIdentifier> pageID;
     if (auto* frame = document.frame()) {
         frameID = frame->loader().client().frameID();
         pageID = frame->loader().client().pageID();
     }
 
