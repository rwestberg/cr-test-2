diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/libwebrtc/LibWebRTCProvider.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/libwebrtc/LibWebRTCProvider.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/libwebrtc/LibWebRTCProvider.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/libwebrtc/LibWebRTCProvider.h
@@ -62,10 +62,11 @@
 struct RTCRtpCapabilities;
 
 enum class MDNSRegisterError { NotImplemented, BadParameter, DNSSD, Internal, Timeout };
 
 class WEBCORE_EXPORT LibWebRTCProvider {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     static UniqueRef<LibWebRTCProvider> create();
 
     virtual ~LibWebRTCProvider() = default;
 
@@ -89,11 +90,11 @@
         UNUSED_PARAM(ipAddress);
         callback(makeUnexpected(MDNSRegisterError::NotImplemented));
     }
 
 #if USE(LIBWEBRTC)
-    virtual rtc::scoped_refptr<webrtc::PeerConnectionInterface> createPeerConnection(webrtc::PeerConnectionObserver&, webrtc::PeerConnectionInterface::RTCConfiguration&&);
+    virtual rtc::scoped_refptr<webrtc::PeerConnectionInterface> createPeerConnection(webrtc::PeerConnectionObserver&, rtc::PacketSocketFactory*, webrtc::PeerConnectionInterface::RTCConfiguration&&);
 
     webrtc::PeerConnectionFactoryInterface* factory();
 
     // FIXME: Make these methods not static.
     static void callOnWebRTCNetworkThread(Function<void()>&&);
@@ -113,10 +114,15 @@
     Optional<RTCRtpCapabilities> receiverCapabilities(const String& kind);
     Optional<RTCRtpCapabilities> senderCapabilities(const String& kind);
 
     void clearFactory() { m_factory = nullptr; }
 
+    void setEnableLogging(bool);
+    void setEnableWebRTCEncryption(bool);
+
+    virtual std::unique_ptr<rtc::PacketSocketFactory> createSocketFactory(PAL::SessionID, String&& /* userAgent */) { return nullptr; }
+
 protected:
     LibWebRTCProvider() = default;
 
     rtc::scoped_refptr<webrtc::PeerConnectionInterface> createPeerConnection(webrtc::PeerConnectionObserver&, rtc::NetworkManager&, rtc::PacketSocketFactory&, webrtc::PeerConnectionInterface::RTCConfiguration&&, std::unique_ptr<webrtc::AsyncResolverFactory>&&);
 
@@ -129,10 +135,11 @@
     bool m_useNetworkThreadWithSocketServer { true };
 
     rtc::scoped_refptr<webrtc::PeerConnectionFactoryInterface> m_factory;
     bool m_disableNonLocalhostConnections { false };
     bool m_supportsVP8 { false };
+    bool m_enableLogging { true };
 #endif
 };
 
 } // namespace WebCore
 
