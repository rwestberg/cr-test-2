diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSBigInt.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSBigInt.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSBigInt.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSBigInt.h
@@ -1,7 +1,8 @@
 /*
  * Copyright (C) 2017 Caio Lima <ticaiolima@gmail.com>
+ * Copyright (C) 2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -69,11 +70,10 @@
     JSValue toPrimitive(ExecState*, PreferredPrimitiveType) const;
 
     void setSign(bool sign) { m_sign = sign; }
     bool sign() const { return m_sign; }
 
-    void setLength(unsigned length) { m_length = length; }
     unsigned length() const { return m_length; }
 
     enum class ErrorParseMode {
         ThrowExceptions,
         IgnoreExceptions
@@ -84,10 +84,12 @@
 
     static JSBigInt* parseInt(ExecState*, VM&, StringView, uint8_t radix, ErrorParseMode = ErrorParseMode::ThrowExceptions, ParseIntSign = ParseIntSign::Unsigned);
     static JSBigInt* parseInt(ExecState*, StringView, ErrorParseMode = ErrorParseMode::ThrowExceptions);
     static JSBigInt* stringToBigInt(ExecState*, StringView);
 
+    static String tryGetString(VM&, JSBigInt*, unsigned radix);
+
     Optional<uint8_t> singleDigitValueForString();
     String toString(ExecState*, unsigned radix);
 
     enum class ComparisonMode {
         LessThan,
@@ -109,10 +111,12 @@
     double toNumber(ExecState*) const;
 
     JSObject* toObject(ExecState*, JSGlobalObject*) const;
     inline bool toBoolean() const { return !isZero(); }
 
+    static JSBigInt* exponentiate(ExecState*, JSBigInt* base, JSBigInt* exponent);
+
     static JSBigInt* multiply(ExecState*, JSBigInt* x, JSBigInt* y);
 
     ComparisonResult static compareToDouble(JSBigInt* x, double y);
 
     static JSBigInt* add(ExecState*, JSBigInt* x, JSBigInt* y);
@@ -122,10 +126,11 @@
     static JSBigInt* unaryMinus(VM&, JSBigInt* x);
 
     static JSBigInt* bitwiseAnd(ExecState*, JSBigInt* x, JSBigInt* y);
     static JSBigInt* bitwiseOr(ExecState*, JSBigInt* x, JSBigInt* y);
     static JSBigInt* bitwiseXor(ExecState*, JSBigInt* x, JSBigInt* y);
+    static JSBigInt* bitwiseNot(ExecState*, JSBigInt* x);
 
     static JSBigInt* leftShift(ExecState*, JSBigInt* x, JSBigInt* y);
     static JSBigInt* signedRightShift(ExecState*, JSBigInt* x, JSBigInt* y);
 
 private:
@@ -195,12 +200,12 @@
     static Digit digitSub(Digit a, Digit b, Digit& borrow);
     static Digit digitMul(Digit a, Digit b, Digit& high);
     static Digit digitDiv(Digit high, Digit low, Digit divisor, Digit& remainder);
     static Digit digitPow(Digit base, Digit exponent);
 
-    static String toStringBasePowerOfTwo(ExecState*, JSBigInt*, unsigned radix);
-    static String toStringGeneric(ExecState*, JSBigInt*, unsigned radix);
+    static String toStringBasePowerOfTwo(VM&, ExecState*, JSBigInt*, unsigned radix);
+    static String toStringGeneric(VM&, ExecState*, JSBigInt*, unsigned radix);
 
     inline bool isZero() const
     {
         ASSERT(length() || !sign());
         return length() == 0;
@@ -240,11 +245,11 @@
     }
 
     Digit digit(unsigned);
     void setDigit(unsigned, Digit);
 
-    unsigned m_length;
+    const unsigned m_length;
     bool m_sign { false };
 };
 
 inline JSBigInt* asBigInt(JSValue value)
 {
