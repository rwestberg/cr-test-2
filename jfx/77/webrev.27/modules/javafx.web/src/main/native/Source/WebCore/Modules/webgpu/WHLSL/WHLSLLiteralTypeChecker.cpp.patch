diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLLiteralTypeChecker.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLLiteralTypeChecker.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLLiteralTypeChecker.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLLiteralTypeChecker.cpp
@@ -40,19 +40,16 @@
 namespace WHLSL {
 
 #if !ASSERT_DISABLED
 static AST::NativeTypeDeclaration* getNativeTypeDeclaration(AST::ResolvableType& resolvableType)
 {
-    if (!resolvableType.resolvedType())
+    if (!is<AST::TypeReference>(resolvableType.resolvedType()))
         return nullptr;
-    if (!is<AST::TypeReference>(*resolvableType.resolvedType()))
+    auto& typeReference = downcast<AST::TypeReference>(resolvableType.resolvedType());
+    if (!is<AST::NativeTypeDeclaration>(typeReference.resolvedType()))
         return nullptr;
-    auto& typeReference = downcast<AST::TypeReference>(*resolvableType.resolvedType());
-    ASSERT(typeReference.resolvedType());
-    if (!is<AST::NativeTypeDeclaration>(*typeReference.resolvedType()))
-        return nullptr;
-    return &downcast<AST::NativeTypeDeclaration>(*typeReference.resolvedType());
+    return &downcast<AST::NativeTypeDeclaration>(typeReference.resolvedType());
 }
 
 class LiteralTypeChecker : public Visitor {
 public:
 private:
@@ -77,11 +74,11 @@
         ASSERT(nativeTypeDeclaration->canRepresentUnsignedInteger()(unsignedIntegerLiteralType.value()));
     }
 
     void visit(AST::NullLiteralType& nullLiteralType) override
     {
-        ASSERT(nullLiteralType.resolvedType());
+        ASSERT(nullLiteralType.maybeResolvedType());
     }
 };
 #endif
 
 void checkLiteralTypes(Program& program)
