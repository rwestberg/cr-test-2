diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/StructureStubInfo.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/StructureStubInfo.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/StructureStubInfo.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/StructureStubInfo.h
@@ -90,12 +90,14 @@
     void visitWeakReferences(CodeBlock*);
 
     // This returns true if it has marked everything that it will ever mark.
     bool propagateTransitions(SlotVisitor&);
 
-    ALWAYS_INLINE bool considerCaching(CodeBlock* codeBlock, Structure* structure)
+    ALWAYS_INLINE bool considerCaching(VM& vm, CodeBlock* codeBlock, Structure* structure)
     {
+        DisallowGC disallowGC;
+
         // We never cache non-cells.
         if (!structure) {
             sawNonCell = true;
             return false;
         }
@@ -149,14 +151,12 @@
             //
             // NOTE: This will behave oddly for InstanceOf if the user varies the prototype but not
             // the base's structure. That seems unlikely for the canonical use of instanceof, where
             // the prototype is fixed.
             bool isNewlyAdded = bufferedStructures.add(structure);
-            if (isNewlyAdded) {
-                VM& vm = *codeBlock->vm();
+            if (isNewlyAdded)
                 vm.heap.writeBarrier(codeBlock);
-            }
             return isNewlyAdded;
         }
         countdown--;
         return false;
     }
