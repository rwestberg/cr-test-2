diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLSelectElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLSelectElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLSelectElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLSelectElement.cpp
@@ -96,14 +96,14 @@
     // of recomputing the width of the element. We need to do that if the style change included a change in zoom level.
     setOptionsChangedOnRenderer();
     HTMLFormControlElement::didRecalcStyle(styleChange);
 }
 
-const AtomicString& HTMLSelectElement::formControlType() const
+const AtomString& HTMLSelectElement::formControlType() const
 {
-    static NeverDestroyed<const AtomicString> selectMultiple("select-multiple", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<const AtomicString> selectOne("select-one", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> selectMultiple("select-multiple", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> selectOne("select-one", AtomString::ConstructFromLiteral);
     return m_multiple ? selectMultiple : selectOne;
 }
 
 void HTMLSelectElement::deselectItems(HTMLOptionElement* excludeElement)
 {
@@ -286,11 +286,11 @@
     }
 
     return HTMLFormControlElementWithState::isPresentationAttribute(name);
 }
 
-void HTMLSelectElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLSelectElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == sizeAttr) {
         unsigned oldSize = m_size;
         unsigned size = limitToOnlyHTMLNonNegative(value);
 
@@ -309,10 +309,15 @@
         parseMultipleAttribute(value);
     else
         HTMLFormControlElementWithState::parseAttribute(name, value);
 }
 
+int HTMLSelectElement::defaultTabIndex() const
+{
+    return 0;
+}
+
 bool HTMLSelectElement::isKeyboardFocusable(KeyboardEvent* event) const
 {
     if (renderer())
         return isFocusable();
     return HTMLFormControlElementWithState::isKeyboardFocusable(event);
@@ -406,11 +411,11 @@
 void HTMLSelectElement::setSize(unsigned size)
 {
     setUnsignedIntegralAttribute(sizeAttr, limitToOnlyHTMLNonNegative(size));
 }
 
-HTMLOptionElement* HTMLSelectElement::namedItem(const AtomicString& name)
+HTMLOptionElement* HTMLSelectElement::namedItem(const AtomString& name)
 {
     return options()->namedItem(name);
 }
 
 HTMLOptionElement* HTMLSelectElement::item(unsigned index)
@@ -1024,22 +1029,22 @@
 
     setOptionsChangedOnRenderer();
     updateValidity();
 }
 
-void HTMLSelectElement::parseMultipleAttribute(const AtomicString& value)
+void HTMLSelectElement::parseMultipleAttribute(const AtomString& value)
 {
     bool oldUsesMenuList = usesMenuList();
     m_multiple = !value.isNull();
     updateValidity();
     if (oldUsesMenuList != usesMenuList())
         invalidateStyleAndRenderersForSubtree();
 }
 
 bool HTMLSelectElement::appendFormData(DOMFormData& formData, bool)
 {
-    const AtomicString& name = this->name();
+    const AtomString& name = this->name();
     if (name.isEmpty())
         return false;
 
     bool successful = false;
     for (auto& element : listItems()) {
