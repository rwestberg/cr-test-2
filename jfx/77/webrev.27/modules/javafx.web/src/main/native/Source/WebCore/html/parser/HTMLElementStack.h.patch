diff a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLElementStack.h b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLElementStack.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLElementStack.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLElementStack.h
@@ -51,11 +51,11 @@
         ElementRecord(Ref<HTMLStackItem>&&, std::unique_ptr<ElementRecord>);
         ~ElementRecord();
 
         Element& element() const { return m_item->element(); }
         ContainerNode& node() const { return m_item->node(); }
-        const AtomicString& namespaceURI() const { return m_item->namespaceURI(); }
+        const AtomString& namespaceURI() const { return m_item->namespaceURI(); }
         HTMLStackItem& stackItem() { return m_item.get(); }
         const HTMLStackItem& stackItem() const { return m_item.get(); }
 
         void replaceElement(Ref<HTMLStackItem>&&);
 
@@ -94,24 +94,24 @@
 
     HTMLStackItem* oneBelowTop() const;
     ElementRecord& topRecord() const;
     ElementRecord* find(Element&) const;
     ElementRecord* furthestBlockForFormattingElement(Element&) const;
-    ElementRecord* topmost(const AtomicString& tagName) const;
+    ElementRecord* topmost(const AtomString& tagName) const;
 
     void insertAbove(Ref<HTMLStackItem>&&, ElementRecord&);
 
     void push(Ref<HTMLStackItem>&&);
     void pushRootNode(Ref<HTMLStackItem>&&);
     void pushHTMLHtmlElement(Ref<HTMLStackItem>&&);
     void pushHTMLHeadElement(Ref<HTMLStackItem>&&);
     void pushHTMLBodyElement(Ref<HTMLStackItem>&&);
 
     void pop();
-    void popUntil(const AtomicString& tagName);
+    void popUntil(const AtomString& tagName);
     void popUntil(Element&);
-    void popUntilPopped(const AtomicString& tagName);
+    void popUntilPopped(const AtomString& tagName);
     void popUntilPopped(const QualifiedName& tagName) { popUntilPopped(tagName.localName()); }
 
     void popUntilPopped(Element&);
     void popUntilNumberedHeaderElementPopped();
     void popUntilTableScopeMarker(); // "clear the stack back to a table context" in the spec.
@@ -127,22 +127,22 @@
 
     void remove(Element&);
     void removeHTMLHeadElement(Element&);
 
     bool contains(Element&) const;
-    bool contains(const AtomicString& tagName) const;
+    bool contains(const AtomString& tagName) const;
 
     bool inScope(Element&) const;
-    bool inScope(const AtomicString& tagName) const;
+    bool inScope(const AtomString& tagName) const;
     bool inScope(const QualifiedName&) const;
-    bool inListItemScope(const AtomicString& tagName) const;
+    bool inListItemScope(const AtomString& tagName) const;
     bool inListItemScope(const QualifiedName&) const;
-    bool inTableScope(const AtomicString& tagName) const;
+    bool inTableScope(const AtomString& tagName) const;
     bool inTableScope(const QualifiedName&) const;
-    bool inButtonScope(const AtomicString& tagName) const;
+    bool inButtonScope(const AtomString& tagName) const;
     bool inButtonScope(const QualifiedName&) const;
-    bool inSelectScope(const AtomicString& tagName) const;
+    bool inSelectScope(const AtomString& tagName) const;
     bool inSelectScope(const QualifiedName&) const;
 
     bool hasNumberedHeaderElementInScope() const;
 
     bool hasOnlyOneElement() const;
