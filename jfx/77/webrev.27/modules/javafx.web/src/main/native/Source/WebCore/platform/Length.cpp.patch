diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/Length.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/Length.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/Length.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/Length.cpp
@@ -1,10 +1,10 @@
 /*
  * Copyright (C) 1999 Lars Knoll (knoll@kde.org)
  *           (C) 1999 Antti Koivisto (koivisto@kde.org)
  *           (C) 2001 Dirk Mueller ( mueller@kde.org )
- * Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2014 Apple Inc. All rights reserved.
+ * Copyright (C) 2003-2019 Apple Inc. All rights reserved.
  * Copyright (C) 2006 Andrew Wellington (proton@wiretapped.net)
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
@@ -29,15 +29,13 @@
 #include <wtf/ASCIICType.h>
 #include <wtf/HashMap.h>
 #include <wtf/MallocPtr.h>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/StdLibExtras.h>
-#include <wtf/text/StringBuffer.h>
 #include <wtf/text/StringView.h>
 #include <wtf/text/TextStream.h>
 
-
 namespace WebCore {
 
 static Length parseLength(const UChar* data, unsigned length)
 {
     if (length == 0)
@@ -89,35 +87,33 @@
 }
 
 UniqueArray<Length> newCoordsArray(const String& string, int& len)
 {
     unsigned length = string.length();
-    StringBuffer<UChar> spacified(length);
+    LChar* spacifiedCharacters;
+    auto str = StringImpl::createUninitialized(length, spacifiedCharacters);
     for (unsigned i = 0; i < length; i++) {
         UChar cc = string[i];
         if (cc > '9' || (cc < '0' && cc != '-' && cc != '*' && cc != '.'))
-            spacified[i] = ' ';
+            spacifiedCharacters[i] = ' ';
         else
-            spacified[i] = cc;
+            spacifiedCharacters[i] = cc;
     }
-    RefPtr<StringImpl> str = StringImpl::adopt(WTFMove(spacified));
-
     str = str->simplifyWhiteSpace();
 
-    len = countCharacter(*str, ' ') + 1;
+    len = countCharacter(str, ' ') + 1;
     auto r = makeUniqueArray<Length>(len);
 
     int i = 0;
     unsigned pos = 0;
     size_t pos2;
 
-    auto upconvertedCharacters = StringView(str.get()).upconvertedCharacters();
     while ((pos2 = str->find(' ', pos)) != notFound) {
-        r[i++] = parseLength(upconvertedCharacters + pos, pos2 - pos);
+        r[i++] = parseLength(str->characters16() + pos, pos2 - pos);
         pos = pos2+1;
     }
-    r[i] = parseLength(upconvertedCharacters + pos, str->length() - pos);
+    r[i] = parseLength(str->characters16() + pos, str->length() - pos);
 
     ASSERT(i == len - 1);
 
     return r;
 }
@@ -290,13 +286,13 @@
         return Length(100 - length.value(), Percent);
 
     // Turn this into a calc expression: calc(100% - length)
     Vector<std::unique_ptr<CalcExpressionNode>> lengths;
     lengths.reserveInitialCapacity(2);
-    lengths.uncheckedAppend(std::make_unique<CalcExpressionLength>(Length(100, Percent)));
-    lengths.uncheckedAppend(std::make_unique<CalcExpressionLength>(length));
-    auto op = std::make_unique<CalcExpressionOperation>(WTFMove(lengths), CalcOperator::Subtract);
+    lengths.uncheckedAppend(makeUnique<CalcExpressionLength>(Length(100, Percent)));
+    lengths.uncheckedAppend(makeUnique<CalcExpressionLength>(length));
+    auto op = makeUnique<CalcExpressionOperation>(WTFMove(lengths), CalcOperator::Subtract);
     return Length(CalculationValue::create(WTFMove(op), ValueRangeAll));
 }
 
 static Length blendMixedTypes(const Length& from, const Length& to, double progress)
 {
@@ -304,11 +300,11 @@
         return from;
 
     if (progress >= 1.0)
         return to;
 
-    auto blend = std::make_unique<CalcExpressionBlendLength>(from, to, progress);
+    auto blend = makeUnique<CalcExpressionBlendLength>(from, to, progress);
     return Length(CalculationValue::create(WTFMove(blend), ValueRangeAll));
 }
 
 Length blend(const Length& from, const Length& to, double progress)
 {
