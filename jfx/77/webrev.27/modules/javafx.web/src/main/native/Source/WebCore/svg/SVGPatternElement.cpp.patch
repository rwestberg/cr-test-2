diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPatternElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPatternElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPatternElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPatternElement.cpp
@@ -1,11 +1,11 @@
 /*
  * Copyright (C) 2004, 2005, 2006, 2007, 2008 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005, 2006, 2007 Rob Buis <buis@kde.org>
  * Copyright (C) Research In Motion Limited 2010. All rights reserved.
  * Copyright (C) 2014 Adobe Systems Incorporated. All rights reserved.
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -51,64 +51,57 @@
     , SVGFitToViewBox(this)
     , SVGTests(this)
     , SVGURIReference(this)
 {
     ASSERT(hasTagName(SVGNames::patternTag));
-    registerAttributes();
+
+    static std::once_flag onceFlag;
+    std::call_once(onceFlag, [] {
+        PropertyRegistry::registerProperty<SVGNames::xAttr, &SVGPatternElement::m_x>();
+        PropertyRegistry::registerProperty<SVGNames::yAttr, &SVGPatternElement::m_y>();
+        PropertyRegistry::registerProperty<SVGNames::widthAttr, &SVGPatternElement::m_width>();
+        PropertyRegistry::registerProperty<SVGNames::heightAttr, &SVGPatternElement::m_height>();
+        PropertyRegistry::registerProperty<SVGNames::patternUnitsAttr, SVGUnitTypes::SVGUnitType, &SVGPatternElement::m_patternUnits>();
+        PropertyRegistry::registerProperty<SVGNames::patternContentUnitsAttr, SVGUnitTypes::SVGUnitType, &SVGPatternElement::m_patternContentUnits>();
+        PropertyRegistry::registerProperty<SVGNames::patternTransformAttr, &SVGPatternElement::m_patternTransform>();
+    });
 }
 
 Ref<SVGPatternElement> SVGPatternElement::create(const QualifiedName& tagName, Document& document)
 {
     return adoptRef(*new SVGPatternElement(tagName, document));
 }
 
-void SVGPatternElement::registerAttributes()
-{
-    auto& registry = attributeRegistry();
-    if (!registry.isEmpty())
-        return;
-    registry.registerAttribute<SVGNames::xAttr, &SVGPatternElement::m_x>();
-    registry.registerAttribute<SVGNames::yAttr, &SVGPatternElement::m_y>();
-    registry.registerAttribute<SVGNames::widthAttr, &SVGPatternElement::m_width>();
-    registry.registerAttribute<SVGNames::heightAttr, &SVGPatternElement::m_height>();
-    registry.registerAttribute<SVGNames::patternUnitsAttr, SVGUnitTypes::SVGUnitType, &SVGPatternElement::m_patternUnits>();
-    registry.registerAttribute<SVGNames::patternContentUnitsAttr, SVGUnitTypes::SVGUnitType, &SVGPatternElement::m_patternContentUnits>();
-    registry.registerAttribute<SVGNames::patternTransformAttr, &SVGPatternElement::m_patternTransform>();
-}
-
-void SVGPatternElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void SVGPatternElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == SVGNames::patternUnitsAttr) {
         auto propertyValue = SVGPropertyTraits<SVGUnitTypes::SVGUnitType>::fromString(value);
         if (propertyValue > 0)
-            m_patternUnits.setValue(propertyValue);
+            m_patternUnits->setBaseValInternal<SVGUnitTypes::SVGUnitType>(propertyValue);
         return;
     }
     if (name == SVGNames::patternContentUnitsAttr) {
         auto propertyValue = SVGPropertyTraits<SVGUnitTypes::SVGUnitType>::fromString(value);
         if (propertyValue > 0)
-            m_patternContentUnits.setValue(propertyValue);
+            m_patternContentUnits->setBaseValInternal<SVGUnitTypes::SVGUnitType>(propertyValue);
         return;
     }
     if (name == SVGNames::patternTransformAttr) {
-        SVGTransformListValues newList;
-        newList.parse(value);
-        m_patternTransform.detachAnimatedListWrappers(attributeOwnerProxy(), newList.size());
-        m_patternTransform.setValue(WTFMove(newList));
+        m_patternTransform->baseVal()->parse(value);
         return;
     }
 
     SVGParsingError parseError = NoError;
 
     if (name == SVGNames::xAttr)
-        m_x.setValue(SVGLengthValue::construct(LengthModeWidth, value, parseError));
+        m_x->setBaseValInternal(SVGLengthValue::construct(LengthModeWidth, value, parseError));
     else if (name == SVGNames::yAttr)
-        m_y.setValue(SVGLengthValue::construct(LengthModeHeight, value, parseError));
+        m_y->setBaseValInternal(SVGLengthValue::construct(LengthModeHeight, value, parseError));
     else if (name == SVGNames::widthAttr)
-        m_width.setValue(SVGLengthValue::construct(LengthModeWidth, value, parseError, ForbidNegativeLengths));
+        m_width->setBaseValInternal(SVGLengthValue::construct(LengthModeWidth, value, parseError, ForbidNegativeLengths));
     else if (name == SVGNames::heightAttr)
-        m_height.setValue(SVGLengthValue::construct(LengthModeHeight, value, parseError, ForbidNegativeLengths));
+        m_height->setBaseValInternal(SVGLengthValue::construct(LengthModeHeight, value, parseError, ForbidNegativeLengths));
 
     reportAttributeParsingError(parseError, name, value);
 
     SVGElement::parseAttribute(name, value);
     SVGURIReference::parseAttribute(name, value);
@@ -117,17 +110,17 @@
     SVGFitToViewBox::parseAttribute(name, value);
 }
 
 void SVGPatternElement::svgAttributeChanged(const QualifiedName& attrName)
 {
-    if (isAnimatedLengthAttribute(attrName)) {
+    if (PropertyRegistry::isAnimatedLengthAttribute(attrName)) {
         InstanceInvalidationGuard guard(*this);
         invalidateSVGPresentationAttributeStyle();
         return;
     }
 
-    if (isKnownAttribute(attrName) || SVGFitToViewBox::isKnownAttribute(attrName) || SVGURIReference::isKnownAttribute(attrName)) {
+    if (PropertyRegistry::isKnownAttribute(attrName) || SVGFitToViewBox::isKnownAttribute(attrName) || SVGURIReference::isKnownAttribute(attrName)) {
         if (RenderObject* object = renderer())
             object->setNeedsLayout();
         return;
     }
 
@@ -175,23 +168,18 @@
         attributes.setPatternUnits(patternUnits());
 
     if (!attributes.hasPatternContentUnits() && hasAttribute(SVGNames::patternContentUnitsAttr))
         attributes.setPatternContentUnits(patternContentUnits());
 
-    if (!attributes.hasPatternTransform() && hasAttribute(SVGNames::patternTransformAttr)) {
-        AffineTransform transform;
-        patternTransform().concatenate(transform);
-        attributes.setPatternTransform(transform);
-    }
+    if (!attributes.hasPatternTransform() && hasAttribute(SVGNames::patternTransformAttr))
+        attributes.setPatternTransform(patternTransform().concatenate());
 
     if (!attributes.hasPatternContentElement() && childElementCount())
         attributes.setPatternContentElement(this);
 }
 
 AffineTransform SVGPatternElement::localCoordinateSpaceTransform(SVGLocatable::CTMScope) const
 {
-    AffineTransform matrix;
-    patternTransform().concatenate(matrix);
-    return matrix;
+    return patternTransform().concatenate();
 }
 
 }
