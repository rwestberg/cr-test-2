diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/fido/FidoHidMessage.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/fido/FidoHidMessage.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/fido/FidoHidMessage.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/fido/FidoHidMessage.cpp
@@ -31,10 +31,12 @@
 #include "FidoHidMessage.h"
 
 #if ENABLE(WEB_AUTHN)
 
 #include "FidoParsingUtils.h"
+#include <wtf/Optional.h>
+#include <wtf/Vector.h>
 
 namespace fido {
 
 // static
 Optional<FidoHidMessage> FidoHidMessage::create(uint32_t channelId, FidoHidDeviceCommand type, const Vector<uint8_t>& data)
@@ -146,13 +148,13 @@
     : m_channelId(channelId)
 {
     uint8_t sequence = 0;
 
     size_t pos = data.size() > kHidInitPacketDataSize ? kHidInitPacketDataSize : data.size();
-    m_packets.append(std::make_unique<FidoHidInitPacket>(channelId, type, getInitPacketData(data), data.size()));
+    m_packets.append(makeUnique<FidoHidInitPacket>(channelId, type, getInitPacketData(data), data.size()));
     for (; pos < data.size(); pos += kHidContinuationPacketDataSize)
-        m_packets.append(std::make_unique<FidoHidContinuationPacket>(channelId, sequence++, getContinuationPacketData(data, pos)));
+        m_packets.append(makeUnique<FidoHidContinuationPacket>(channelId, sequence++, getContinuationPacketData(data, pos)));
 }
 
 FidoHidMessage::FidoHidMessage(std::unique_ptr<FidoHidInitPacket> initPacket, size_t remainingSize)
     : m_remainingSize(remainingSize)
 {
