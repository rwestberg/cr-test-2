diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/CustomElementRegistry.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/CustomElementRegistry.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/CustomElementRegistry.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/CustomElementRegistry.cpp
@@ -35,11 +35,11 @@
 #include "MathMLNames.h"
 #include "QualifiedName.h"
 #include "ShadowRoot.h"
 #include "TypedElementDescendantIterator.h"
 #include <JavaScriptCore/JSCJSValueInlines.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
 Ref<CustomElementRegistry> CustomElementRegistry::create(DOMWindow& window, ScriptExecutionContext* scriptExecutionContext)
 {
@@ -67,11 +67,11 @@
     }
 }
 
 void CustomElementRegistry::addElementDefinition(Ref<JSCustomElementInterface>&& elementInterface)
 {
-    AtomicString localName = elementInterface->name().localName();
+    AtomString localName = elementInterface->name().localName();
     ASSERT(!m_nameMap.contains(localName));
     m_constructorMap.add(elementInterface->constructor(), elementInterface.ptr());
     m_nameMap.add(localName, elementInterface.copyRef());
 
     if (auto* document = m_window.document())
@@ -91,11 +91,11 @@
     if (name.namespaceURI() != HTMLNames::xhtmlNamespaceURI)
         return nullptr;
     return m_nameMap.get(name.localName());
 }
 
-JSCustomElementInterface* CustomElementRegistry::findInterface(const AtomicString& name) const
+JSCustomElementInterface* CustomElementRegistry::findInterface(const AtomString& name) const
 {
     return m_nameMap.get(name);
 }
 
 JSCustomElementInterface* CustomElementRegistry::findInterface(const JSC::JSObject* constructor) const
@@ -106,11 +106,11 @@
 bool CustomElementRegistry::containsConstructor(const JSC::JSObject* constructor) const
 {
     return m_constructorMap.contains(constructor);
 }
 
-JSC::JSValue CustomElementRegistry::get(const AtomicString& name)
+JSC::JSValue CustomElementRegistry::get(const AtomString& name)
 {
     if (auto* elementInterface = m_nameMap.get(name))
         return elementInterface->constructor();
     return JSC::jsUndefined();
 }
