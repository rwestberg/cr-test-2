diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/MainThread.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/MainThread.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/MainThread.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/MainThread.cpp
@@ -33,10 +33,11 @@
 #include <wtf/Condition.h>
 #include <wtf/Deque.h>
 #include <wtf/Lock.h>
 #include <wtf/MonotonicTime.h>
 #include <wtf/NeverDestroyed.h>
+#include <wtf/RunLoop.h>
 #include <wtf/StdLibExtras.h>
 #include <wtf/ThreadSpecific.h>
 #include <wtf/Threading.h>
 
 namespace WTF {
@@ -55,22 +56,20 @@
 void initializeMainThread()
 {
     std::call_once(initializeKey, [] {
         initializeThreading();
         initializeMainThreadPlatform();
-        initializeGCThreads();
     });
 }
 
 #if PLATFORM(COCOA)
 #if !USE(WEB_THREAD)
 void initializeMainThreadToProcessMainThread()
 {
     std::call_once(initializeKey, [] {
         initializeThreading();
         initializeMainThreadToProcessMainThreadPlatform();
-        initializeGCThreads();
     });
 }
 #else
 void initializeWebThread()
 {
@@ -126,10 +125,20 @@
             break;
         }
     }
 }
 
+bool isMainRunLoop()
+{
+    return RunLoop::isMain();
+}
+
+void callOnMainRunLoop(Function<void()>&& function)
+{
+    RunLoop::main().dispatch(WTFMove(function));
+}
+
 void callOnMainThread(Function<void()>&& function)
 {
     ASSERT(function);
 
     bool needToSchedule = false;
@@ -155,72 +164,64 @@
 
     if (!callbacksPaused)
         scheduleDispatchFunctionsOnMainThread();
 }
 
-static ThreadSpecific<Optional<GCThreadType>, CanBeGCThread::True>* isGCThread;
-
-void initializeGCThreads()
-{
-    static std::once_flag flag;
-    std::call_once(
-        flag,
-        [] {
-            isGCThread = new ThreadSpecific<Optional<GCThreadType>, CanBeGCThread::True>();
-        });
-}
-
-void registerGCThread(GCThreadType type)
-{
-    if (!isGCThread) {
-        // This happens if we're running in a process that doesn't care about
-        // MainThread.
-        return;
-    }
-
-    **isGCThread = type;
-}
-
 bool isMainThreadOrGCThread()
 {
-    if (mayBeGCThread())
+    if (Thread::mayBeGCThread())
         return true;
 
     return isMainThread();
 }
 
-Optional<GCThreadType> mayBeGCThread()
-{
-    if (!isGCThread)
-        return WTF::nullopt;
-    if (!isGCThread->isSet())
-        return WTF::nullopt;
-    return **isGCThread;
-}
+enum class MainStyle : bool {
+    Thread,
+    RunLoop
+};
 
-void callOnMainThreadAndWait(WTF::Function<void()>&& function)
+static void callOnMainAndWait(WTF::Function<void()>&& function, MainStyle mainStyle)
 {
-    if (isMainThread()) {
+
+    if (mainStyle == MainStyle::Thread ? isMainThread() : isMainRunLoop()) {
         function();
         return;
     }
 
     Lock mutex;
     Condition conditionVariable;
 
     bool isFinished = false;
 
-    callOnMainThread([&, function = WTFMove(function)] {
+    auto functionImpl = [&, function = WTFMove(function)] {
         function();
 
         std::lock_guard<Lock> lock(mutex);
         isFinished = true;
         conditionVariable.notifyOne();
-    });
+    };
+
+    switch (mainStyle) {
+    case MainStyle::Thread:
+        callOnMainThread(WTFMove(functionImpl));
+        break;
+    case MainStyle::RunLoop:
+        callOnMainRunLoop(WTFMove(functionImpl));
+    };
 
     std::unique_lock<Lock> lock(mutex);
     conditionVariable.wait(lock, [&] {
         return isFinished;
     });
 }
 
+void callOnMainRunLoopAndWait(WTF::Function<void()>&& function)
+{
+    callOnMainAndWait(WTFMove(function), MainStyle::RunLoop);
+}
+
+void callOnMainThreadAndWait(WTF::Function<void()>&& function)
+{
+    callOnMainAndWait(WTFMove(function), MainStyle::Thread);
+}
+
 } // namespace WTF
