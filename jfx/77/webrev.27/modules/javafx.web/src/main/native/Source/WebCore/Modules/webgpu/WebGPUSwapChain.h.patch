diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUSwapChain.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUSwapChain.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUSwapChain.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUSwapChain.h
@@ -25,58 +25,34 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
-#include "GPUBasedCanvasRenderingContext.h"
 #include "GPUSwapChain.h"
-#include "GPUTextureFormat.h"
-#include "WebGPUDevice.h"
 #include "WebGPUTexture.h"
-
+#include <wtf/RefCounted.h>
 #include <wtf/RefPtr.h>
 
 namespace WebCore {
 
-class WebGPUSwapChain : public GPUBasedCanvasRenderingContext {
-public:
-    struct Descriptor {
-        const WebGPUDevice* device = nullptr;
-        // FIXME: More texture properties.
-        GPUTextureFormat format;
-        unsigned long width;
-        unsigned long height;
-    };
+struct WebGPUSwapChainDescriptor;
 
-    virtual ~WebGPUSwapChain() = 0;
+class WebGPUSwapChain : public RefCounted<WebGPUSwapChain> {
+public:
+    static Ref<WebGPUSwapChain> create(RefPtr<GPUSwapChain>&&);
 
-    void configure(Descriptor&&);
-    RefPtr<WebGPUTexture> getNextTexture();
-    void present();
+    GPUSwapChain* swapChain() { return m_swapChain.get(); }
 
-protected:
-    WebGPUSwapChain(CanvasBase& canvas, RefPtr<GPUSwapChain>&& swapChain)
-        : GPUBasedCanvasRenderingContext(canvas)
-        , m_swapChain(WTFMove(swapChain))
-    {
-    }
+    Ref<WebGPUTexture> getCurrentTexture();
 
-    const char* activeDOMObjectName() const override { return "WebGPUSwapChain"; }
-    PlatformLayer* platformLayer() const final { return m_swapChain->platformLayer(); };
+    void destroy();
 
 private:
-    // GPUBasedRenderingContext
-    void reshape(int width, int height) final;
-    void markLayerComposited() final;
-
-    // ActiveDOMObject
-    // FIXME: Stubs.
-    bool hasPendingActivity() const override { return false; }
-    void stop() override { }
-    bool canSuspendForDocumentSuspension() const override { return false; }
+    WebGPUSwapChain(RefPtr<GPUSwapChain>&&);
 
     RefPtr<GPUSwapChain> m_swapChain;
+    RefPtr<WebGPUTexture> m_currentTexture;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(WEBGPU)
