diff a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLContextEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLContextEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLContextEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLContextEvent.h
@@ -23,38 +23,42 @@
  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#if ENABLE(WEBGL)
+
 #include "Event.h"
 
 namespace WebCore {
 
 class WebGLContextEvent final : public Event {
 public:
-    static Ref<WebGLContextEvent> create(const AtomicString& type, CanBubble canBubble, IsCancelable cancelable, const String& statusMessage)
+    static Ref<WebGLContextEvent> create(const AtomString& type, CanBubble canBubble, IsCancelable cancelable, const String& statusMessage)
     {
         return adoptRef(*new WebGLContextEvent(type, canBubble, cancelable, statusMessage));
     }
 
     struct Init : EventInit {
         String statusMessage;
     };
 
-    static Ref<WebGLContextEvent> create(const AtomicString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
+    static Ref<WebGLContextEvent> create(const AtomString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
     {
         return adoptRef(*new WebGLContextEvent(type, initializer, isTrusted));
     }
     virtual ~WebGLContextEvent();
 
     const String& statusMessage() const { return m_statusMessage; }
 
     EventInterface eventInterface() const override;
 
 private:
-    WebGLContextEvent(const AtomicString& type, CanBubble, IsCancelable, const String& statusMessage);
-    WebGLContextEvent(const AtomicString&, const Init&, IsTrusted);
+    WebGLContextEvent(const AtomString& type, CanBubble, IsCancelable, const String& statusMessage);
+    WebGLContextEvent(const AtomString&, const Init&, IsTrusted);
 
     String m_statusMessage;
 };
 
 } // namespace WebCore
+
+#endif
