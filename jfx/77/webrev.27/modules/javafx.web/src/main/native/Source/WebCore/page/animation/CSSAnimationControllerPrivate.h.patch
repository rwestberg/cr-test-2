diff a/modules/javafx.web/src/main/native/Source/WebCore/page/animation/CSSAnimationControllerPrivate.h b/modules/javafx.web/src/main/native/Source/WebCore/page/animation/CSSAnimationControllerPrivate.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/animation/CSSAnimationControllerPrivate.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/animation/CSSAnimationControllerPrivate.h
@@ -55,11 +55,11 @@
     CompositeAnimation& ensureCompositeAnimation(Element&);
     bool clear(Element&);
 
     void updateStyleIfNeededDispatcherFired();
     void startUpdateStyleIfNeededDispatcher();
-    void addEventToDispatch(Element&, const AtomicString& eventType, const String& name, double elapsedTime);
+    void addEventToDispatch(Element&, const AtomString& eventType, const String& name, double elapsedTime);
     void addElementChangeToDispatch(Element&);
 
     bool hasAnimations() const { return !m_compositeAnimations.isEmpty(); }
 
     bool isSuspended() const { return m_isSuspended; }
@@ -77,11 +77,11 @@
     void detachFromDocument(Document*);
 
     bool isRunningAnimationOnRenderer(RenderElement&, CSSPropertyID) const;
     bool isRunningAcceleratedAnimationOnRenderer(RenderElement&, CSSPropertyID) const;
 
-    bool pauseAnimationAtTime(Element&, const AtomicString& name, double t);
+    bool pauseAnimationAtTime(Element&, const AtomString& name, double t);
     bool pauseTransitionAtTime(Element&, const String& property, double t);
     unsigned numberOfActiveAnimations(Document*) const;
 
     std::unique_ptr<RenderStyle> animatedStyleForElement(Element&);
 
@@ -120,11 +120,11 @@
     Timer m_updateStyleIfNeededDispatcher;
     Frame& m_frame;
 
     struct EventToDispatch {
         Ref<Element> element;
-        AtomicString eventType;
+        AtomString eventType;
         String name;
         double elapsedTime;
     };
     Vector<EventToDispatch> m_eventsToDispatch;
     Vector<Ref<Element>> m_elementChangesToDispatch;
