diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGLazyJSValue.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGLazyJSValue.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGLazyJSValue.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGLazyJSValue.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013, 2014, 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -47,15 +47,15 @@
 {
     switch (m_kind) {
     case KnownValue:
         return value()->value();
     case SingleCharacterString:
-        return jsSingleCharacterString(&vm, u.character);
+        return jsSingleCharacterString(vm, u.character);
     case KnownStringImpl:
-        return jsString(&vm, u.stringImpl);
+        return jsString(vm, u.stringImpl);
     case NewStringImpl:
-        return jsString(&vm, AtomicStringImpl::add(u.stringImpl));
+        return jsString(vm, AtomStringImpl::add(u.stringImpl));
     }
     RELEASE_ASSERT_NOT_REACHED();
     return JSValue();
 }
 
@@ -98,13 +98,15 @@
     case KnownValue:
         if (JSString* string = value()->dynamicCast<JSString*>(vm))
             return string->tryGetValueImpl();
         return nullptr;
 
-    default:
+    case SingleCharacterString:
         return nullptr;
     }
+    RELEASE_ASSERT_NOT_REACHED();
+    return nullptr;
 }
 
 String LazyJSValue::tryGetString(Graph& graph) const
 {
     switch (m_kind) {
@@ -112,11 +114,12 @@
         return u.stringImpl;
 
     case SingleCharacterString:
         return String(&u.character, 1);
 
-    default:
+    case KnownValue:
+    case KnownStringImpl:
         if (const StringImpl* string = tryGetStringImpl(graph.m_vm)) {
             unsigned ginormousStringLength = 10000;
             if (string->length() > ginormousStringLength)
                 return String();
 
@@ -126,46 +129,58 @@
             return result.iterator->value;
         }
 
         return String();
     }
+    RELEASE_ASSERT_NOT_REACHED();
+    return String();
 }
 
 TriState LazyJSValue::strictEqual(const LazyJSValue& other) const
 {
     switch (m_kind) {
     case KnownValue:
         switch (other.m_kind) {
-        case KnownValue:
+        case KnownValue: {
+            if (!value()->value() || !other.value()->value())
+                return value()->value() == other.value()->value() ? TrueTriState : FalseTriState;
             return JSValue::pureStrictEqual(value()->value(), other.value()->value());
-        case SingleCharacterString:
+        }
+        case SingleCharacterString: {
+            if (!value()->value())
+                return FalseTriState;
             return equalToSingleCharacter(value()->value(), other.character());
+        }
         case KnownStringImpl:
-        case NewStringImpl:
+        case NewStringImpl: {
+            if (!value()->value())
+                return FalseTriState;
             return equalToStringImpl(value()->value(), other.stringImpl());
         }
+        }
         break;
     case SingleCharacterString:
         switch (other.m_kind) {
         case SingleCharacterString:
             return triState(character() == other.character());
         case KnownStringImpl:
         case NewStringImpl:
             if (other.stringImpl()->length() != 1)
                 return FalseTriState;
             return triState(other.stringImpl()->at(0) == character());
-        default:
+        case KnownValue:
             return other.strictEqual(*this);
         }
         break;
     case KnownStringImpl:
     case NewStringImpl:
         switch (other.m_kind) {
         case KnownStringImpl:
         case NewStringImpl:
             return triState(WTF::equal(stringImpl(), other.stringImpl()));
-        default:
+        case SingleCharacterString:
+        case KnownValue:
             return other.strictEqual(*this);
         }
         break;
     }
     RELEASE_ASSERT_NOT_REACHED();
@@ -179,13 +194,17 @@
     // for a kind of value that can't.
     switch (m_kind) {
     case KnownValue:
         switch (kind) {
         case SwitchImm:
-            return value()->value().asInt32();
+            if (value()->value())
+                return value()->value().asInt32();
+            return 0;
         case SwitchCell:
-            return bitwise_cast<uintptr_t>(value()->value().asCell());
+            if (value()->value())
+                return bitwise_cast<uintptr_t>(value()->value().asCell());
+            return 0;
         default:
             RELEASE_ASSERT_NOT_REACHED();
             return 0;
         }
     case SingleCharacterString:
@@ -194,14 +213,17 @@
             return character();
         default:
             RELEASE_ASSERT_NOT_REACHED();
             return 0;
         }
-    default:
+    case KnownStringImpl:
+    case NewStringImpl:
         RELEASE_ASSERT_NOT_REACHED();
         return 0;
     }
+    RELEASE_ASSERT_NOT_REACHED();
+    return 0;
 }
 
 void LazyJSValue::emit(CCallHelpers& jit, JSValueRegs result) const
 {
     if (m_kind == KnownValue) {
@@ -227,11 +249,11 @@
 
     CodeBlock* codeBlock = jit.codeBlock();
 
     jit.addLinkTask(
         [codeBlock, label, thisValue] (LinkBuffer& linkBuffer) {
-            JSValue realValue = thisValue.getValue(*codeBlock->vm());
+            JSValue realValue = thisValue.getValue(codeBlock->vm());
             RELEASE_ASSERT(realValue.isCell());
 
             codeBlock->addConstant(realValue);
 
             if (thisValue.m_kind == NewStringImpl)
