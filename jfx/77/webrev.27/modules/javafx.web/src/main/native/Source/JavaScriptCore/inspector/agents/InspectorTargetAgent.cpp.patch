diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorTargetAgent.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorTargetAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorTargetAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorTargetAgent.cpp
@@ -30,15 +30,17 @@
 
 namespace Inspector {
 
 InspectorTargetAgent::InspectorTargetAgent(FrontendRouter& frontendRouter, BackendDispatcher& backendDispatcher)
     : InspectorAgentBase("Target"_s)
-    , m_frontendDispatcher(std::make_unique<TargetFrontendDispatcher>(frontendRouter))
+    , m_frontendDispatcher(makeUnique<TargetFrontendDispatcher>(frontendRouter))
     , m_backendDispatcher(TargetBackendDispatcher::create(backendDispatcher, this))
 {
 }
 
+InspectorTargetAgent::~InspectorTargetAgent() = default;
+
 void InspectorTargetAgent::didCreateFrontendAndBackend(FrontendRouter*, BackendDispatcher*)
 {
     m_isConnected = true;
 
     connectToTargets();
@@ -59,11 +61,11 @@
 
 void InspectorTargetAgent::sendMessageToTarget(ErrorString& errorString, const String& targetId, const String& message)
 {
     InspectorTarget* target = m_targets.get(targetId);
     if (!target) {
-        errorString = "Target not found."_s;
+        errorString = "Missing target for given targetId"_s;
         return;
     }
 
     target->sendMessageToTargetBackend(message);
 }
