diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLLinkElement.h b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLLinkElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLLinkElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLLinkElement.h
@@ -46,15 +46,15 @@
 public:
     static Ref<HTMLLinkElement> create(const QualifiedName&, Document&, bool createdByParser);
     virtual ~HTMLLinkElement();
 
     URL href() const;
-    const AtomicString& rel() const;
+    WEBCORE_EXPORT const AtomString& rel() const;
 
     String target() const final;
 
-    const AtomicString& type() const;
+    const AtomString& type() const;
 
     Optional<LinkIconType> iconType() const;
 
     CSSStyleSheet* sheet() const { return m_sheet.get(); }
 
@@ -62,13 +62,13 @@
 
     bool isDisabled() const { return m_disabledState == Disabled; }
     bool isEnabledViaScript() const { return m_disabledState == EnabledViaScript; }
     DOMTokenList& sizes();
 
-    WEBCORE_EXPORT void setCrossOrigin(const AtomicString&);
+    WEBCORE_EXPORT void setCrossOrigin(const AtomString&);
     WEBCORE_EXPORT String crossOrigin() const;
-    WEBCORE_EXPORT void setAs(const AtomicString&);
+    WEBCORE_EXPORT void setAs(const AtomString&);
     WEBCORE_EXPORT String as() const;
 
     void dispatchPendingEvent(LinkEventSender*);
     static void dispatchPendingLoadEvents();
 
@@ -77,11 +77,11 @@
 #if ENABLE(APPLICATION_MANIFEST)
     bool isApplicationManifest() const { return m_relAttribute.isApplicationManifest; }
 #endif
 
 private:
-    void parseAttribute(const QualifiedName&, const AtomicString&) final;
+    void parseAttribute(const QualifiedName&, const AtomString&) final;
 
     bool shouldLoadLink() final;
     void process();
     static void processCallback(Node*);
     void clearSheet();
