diff a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilitySVGElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilitySVGElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilitySVGElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilitySVGElement.cpp
@@ -104,11 +104,11 @@
         return elements[index];
 
     return fallback;
 }
 
-void AccessibilitySVGElement::accessibilityText(Vector<AccessibilityText>& textOrder)
+void AccessibilitySVGElement::accessibilityText(Vector<AccessibilityText>& textOrder) const
 {
     String description = accessibilityDescription();
     if (!description.isEmpty())
         textOrder.append(AccessibilityText(description, AccessibilityTextSource::Alternative));
 
@@ -155,11 +155,11 @@
 
     // FIXME: This is here to not break the svg-image.html test. But 'alt' is not
     // listed as a supported attribute of the 'image' element in the SVG spec:
     // https://www.w3.org/TR/SVG/struct.html#ImageElement
     if (m_renderer->isSVGImage()) {
-        const AtomicString& alt = getAttribute(HTMLNames::altAttr);
+        const AtomString& alt = getAttribute(HTMLNames::altAttr);
         if (!alt.isNull())
             return alt;
     }
 
     return String();
@@ -243,12 +243,19 @@
         }
     }
 
     // SVG shapes should not be included unless there's a concrete reason for inclusion.
     // https://rawgit.com/w3c/aria/master/svg-aam/svg-aam.html#exclude_elements
-    if (m_renderer->isSVGShape())
-        return !(hasAttributesRequiredForInclusion() || canSetFocusAttribute() || element()->hasEventListeners());
+    if (m_renderer->isSVGShape()) {
+        if (canSetFocusAttribute() || element()->hasEventListeners())
+            return false;
+        if (auto svgParent = AccessibilityObject::matchedParent(*this, true, [] (const AccessibilityObject& object) {
+            return object.hasAttributesRequiredForInclusion() || object.isAccessibilitySVGRoot();
+        }))
+            return !svgParent->hasAttributesRequiredForInclusion();
+        return true;
+    }
 
     return AccessibilityRenderObject::computeAccessibilityIsIgnored();
 }
 
 bool AccessibilitySVGElement::inheritsPresentationalRole() const
