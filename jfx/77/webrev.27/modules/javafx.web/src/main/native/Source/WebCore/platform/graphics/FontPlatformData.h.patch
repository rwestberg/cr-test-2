diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontPlatformData.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontPlatformData.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontPlatformData.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontPlatformData.h
@@ -68,11 +68,11 @@
 interface IDWriteFont;
 interface IDWriteFontFace;
 #endif
 
 #if USE(DIRECT2D)
-#include <dwrite.h>
+#include <dwrite_3.h>
 #endif
 
 namespace WebCore {
 
 class FontDescription;
@@ -83,11 +83,10 @@
     WTF_MAKE_FAST_ALLOCATED;
 public:
     FontPlatformData(WTF::HashTableDeletedValueType);
     FontPlatformData();
 
-    FontPlatformData(const FontDescription&, const AtomicString& family);
     FontPlatformData(float size, bool syntheticBold, bool syntheticOblique, FontOrientation = FontOrientation::Horizontal, FontWidthVariant = FontWidthVariant::RegularWidth, TextRenderingMode = TextRenderingMode::AutoTextRendering);
 
 #if PLATFORM(COCOA)
     WEBCORE_EXPORT FontPlatformData(CTFontRef, float size, bool syntheticBold = false, bool syntheticOblique = false, FontOrientation = FontOrientation::Horizontal, FontWidthVariant = FontWidthVariant::RegularWidth, TextRenderingMode = TextRenderingMode::AutoTextRendering);
 #endif
@@ -107,29 +106,24 @@
 #if PLATFORM(WIN) && USE(CG)
     FontPlatformData(GDIObject<HFONT>, CGFontRef, float size, bool syntheticBold, bool syntheticOblique, bool useGDI);
 #endif
 
 #if PLATFORM(WIN) && USE(DIRECT2D)
-    FontPlatformData(GDIObject<HFONT>, IDWriteFont*, float size, bool syntheticBold, bool syntheticOblique, bool useGDI);
+    FontPlatformData(GDIObject<HFONT>&&, IDWriteFont*, float size, bool syntheticBold, bool syntheticOblique, bool useGDI);
 #endif
 
 #if PLATFORM(WIN) && USE(CAIRO)
     FontPlatformData(GDIObject<HFONT>, cairo_font_face_t*, float size, bool bold, bool italic);
 #endif
 
 #if USE(FREETYPE)
     FontPlatformData(cairo_font_face_t*, FcPattern*, float size, bool fixedWidth, bool syntheticBold, bool syntheticOblique, FontOrientation);
-    FontPlatformData(const FontPlatformData&);
-    FontPlatformData(FontPlatformData&&) = default;
-    FontPlatformData& operator=(const FontPlatformData&);
-    FontPlatformData& operator=(FontPlatformData&&) = default;
-    ~FontPlatformData();
 #endif
 
 #if PLATFORM(JAVA)
     FontPlatformData(RefPtr<RQRef> font, float size);
-    static std::unique_ptr<FontPlatformData> create(const FontDescription& fontDescription, const AtomicString& family);
+    static std::unique_ptr<FontPlatformData> create(const FontDescription& fontDescription, const AtomString& family);
     std::unique_ptr<FontPlatformData> derive(float scaleFactor) const;
 #endif
 
 #if PLATFORM(WIN)
     HFONT hfont() const { return m_font ? m_font->get() : 0; }
@@ -160,10 +154,11 @@
 #if USE(DIRECT2D)
     IDWriteFont* dwFont() const { return m_dwFont.get(); }
     IDWriteFontFace* dwFontFace() const { return m_dwFontFace.get(); }
 
     static HRESULT createFallbackFont(const LOGFONT&, IDWriteFont**);
+    static HRESULT createFallbackFont(HFONT, IDWriteFont**);
 #endif
 
     bool isFixedPitch() const;
     float size() const { return m_size; }
     bool syntheticBold() const { return m_syntheticBold; }
