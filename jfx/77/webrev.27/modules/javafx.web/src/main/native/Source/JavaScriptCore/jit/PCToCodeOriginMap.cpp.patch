diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/PCToCodeOriginMap.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/PCToCodeOriginMap.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/PCToCodeOriginMap.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/PCToCodeOriginMap.cpp
@@ -29,10 +29,11 @@
 #if ENABLE(JIT)
 
 #include "B3PCToOriginMap.h"
 #include "DFGNode.h"
 #include "LinkBuffer.h"
+#include <wtf/Optional.h>
 
 #if COMPILER(MSVC)
 // See https://msdn.microsoft.com/en-us/library/4wz07268.aspx
 #pragma warning(disable: 4333)
 #endif
@@ -188,22 +189,22 @@
     };
 
     DeltaCompressionBuilder codeOriginCompressor((sizeof(intptr_t) + sizeof(int8_t) + sizeof(int8_t) + sizeof(InlineCallFrame*)) * builder.m_codeRanges.size());
     CodeOrigin lastCodeOrigin(0, nullptr);
     auto buildCodeOriginTable = [&] (const CodeOrigin& codeOrigin) {
-        intptr_t delta = static_cast<intptr_t>(codeOrigin.bytecodeIndex) - static_cast<intptr_t>(lastCodeOrigin.bytecodeIndex);
+        intptr_t delta = static_cast<intptr_t>(codeOrigin.bytecodeIndex()) - static_cast<intptr_t>(lastCodeOrigin.bytecodeIndex());
         lastCodeOrigin = codeOrigin;
         if (delta > std::numeric_limits<int8_t>::max() || delta < std::numeric_limits<int8_t>::min() || delta == sentinelBytecodeDelta) {
             codeOriginCompressor.write<int8_t>(sentinelBytecodeDelta);
             codeOriginCompressor.write<intptr_t>(delta);
         } else
             codeOriginCompressor.write<int8_t>(static_cast<int8_t>(delta));
 
-        int8_t hasInlineCallFrameByte = codeOrigin.inlineCallFrame ? 1 : 0;
+        int8_t hasInlineCallFrameByte = codeOrigin.inlineCallFrame() ? 1 : 0;
         codeOriginCompressor.write<int8_t>(hasInlineCallFrameByte);
         if (hasInlineCallFrameByte)
-            codeOriginCompressor.write<uintptr_t>(bitwise_cast<uintptr_t>(codeOrigin.inlineCallFrame));
+            codeOriginCompressor.write<uintptr_t>(bitwise_cast<uintptr_t>(codeOrigin.inlineCallFrame()));
     };
 
     m_pcRangeStart = linkBuffer.locationOf<NoPtrTag>(builder.m_codeRanges.first().start).dataLocation<uintptr_t>();
     m_pcRangeEnd = linkBuffer.locationOf<NoPtrTag>(builder.m_codeRanges.last().end).dataLocation<uintptr_t>();
     m_pcRangeEnd -= 1;
@@ -251,11 +252,12 @@
     uintptr_t pcAsInt = bitwise_cast<uintptr_t>(pc);
     if (!(m_pcRangeStart <= pcAsInt && pcAsInt <= m_pcRangeEnd))
         return WTF::nullopt;
 
     uintptr_t currentPC = 0;
-    CodeOrigin currentCodeOrigin(0, nullptr);
+    unsigned currentBytecodeIndex = 0;
+    InlineCallFrame* currentInlineCallFrame = nullptr;
 
     DeltaCompresseionReader pcReader(m_compressedPCs, m_compressedPCBufferSize);
     DeltaCompresseionReader codeOriginReader(m_compressedCodeOrigins, m_compressedCodeOriginsSize);
     while (true) {
         uintptr_t previousPC = currentPC;
@@ -267,27 +269,27 @@
             else
                 delta = value;
             currentPC += delta;
         }
 
-        CodeOrigin previousOrigin = currentCodeOrigin;
+        CodeOrigin previousOrigin = CodeOrigin(currentBytecodeIndex, currentInlineCallFrame);
         {
             int8_t value = codeOriginReader.read<int8_t>();
             intptr_t delta;
             if (value == sentinelBytecodeDelta)
                 delta = codeOriginReader.read<intptr_t>();
             else
                 delta = static_cast<intptr_t>(value);
 
-            currentCodeOrigin.bytecodeIndex = static_cast<unsigned>(static_cast<intptr_t>(currentCodeOrigin.bytecodeIndex) + delta);
+            currentBytecodeIndex = static_cast<unsigned>(static_cast<intptr_t>(currentBytecodeIndex) + delta);
 
             int8_t hasInlineFrame = codeOriginReader.read<int8_t>();
             ASSERT(hasInlineFrame == 0 || hasInlineFrame == 1);
             if (hasInlineFrame)
-                currentCodeOrigin.inlineCallFrame = bitwise_cast<InlineCallFrame*>(codeOriginReader.read<uintptr_t>());
+                currentInlineCallFrame = bitwise_cast<InlineCallFrame*>(codeOriginReader.read<uintptr_t>());
             else
-                currentCodeOrigin.inlineCallFrame = nullptr;
+                currentInlineCallFrame = nullptr;
         }
 
         if (previousPC) {
             uintptr_t startOfRange = previousPC;
             // We subtract 1 because we generate end points inclusively in this table, even though we are interested in ranges of the form: [previousPC, currentPC)
