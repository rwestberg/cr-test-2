diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTextFormControlElement.h b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTextFormControlElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTextFormControlElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTextFormControlElement.h
@@ -64,11 +64,11 @@
 
     int indexForVisiblePosition(const VisiblePosition&) const;
     WEBCORE_EXPORT VisiblePosition visiblePositionForIndex(int index) const;
     WEBCORE_EXPORT int selectionStart() const;
     WEBCORE_EXPORT int selectionEnd() const;
-    WEBCORE_EXPORT const AtomicString& selectionDirection() const;
+    WEBCORE_EXPORT const AtomString& selectionDirection() const;
     WEBCORE_EXPORT void setSelectionStart(int);
     WEBCORE_EXPORT void setSelectionEnd(int);
     WEBCORE_EXPORT void setSelectionDirection(const String&);
     WEBCORE_EXPORT void select(SelectionRevealMode = SelectionRevealMode::DoNotReveal, const AXTextStateChangeIntent& = AXTextStateChangeIntent());
     WEBCORE_EXPORT virtual ExceptionOr<void> setRangeText(const String& replacement);
@@ -96,20 +96,22 @@
 #if PLATFORM(IOS_FAMILY)
     WEBCORE_EXPORT void hidePlaceholder();
     WEBCORE_EXPORT void showPlaceholderIfNecessary();
 #endif
 
+    WEBCORE_EXPORT virtual bool isInnerTextElementEditable() const;
+
 protected:
     HTMLTextFormControlElement(const QualifiedName&, Document&, HTMLFormElement*);
     bool isPlaceholderEmpty() const;
     virtual void updatePlaceholderText() = 0;
 
-    void parseAttribute(const QualifiedName&, const AtomicString&) override;
+    void parseAttribute(const QualifiedName&, const AtomString&) override;
 
     void disabledStateChanged() override;
     void readOnlyStateChanged() override;
-    virtual bool isInnerTextElementEditable() const;
+
     void updateInnerTextElementEditability();
 
     void cacheSelection(int start, int end, TextFieldSelectionDirection direction)
     {
         m_cachedSelectionStart = start;
