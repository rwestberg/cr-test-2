diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/domjit/DOMJITSignature.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/domjit/DOMJITSignature.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/domjit/DOMJITSignature.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/domjit/DOMJITSignature.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -35,27 +35,29 @@
 // Eventually, we should extend this. But possibly, 2 or 3 can cover typical use cases.
 // https://bugs.webkit.org/show_bug.cgi?id=164346
 #define JSC_DOMJIT_SIGNATURE_MAX_ARGUMENTS 2
 #define JSC_DOMJIT_SIGNATURE_MAX_ARGUMENTS_INCLUDING_THIS (1 + JSC_DOMJIT_SIGNATURE_MAX_ARGUMENTS)
 
+using FunctionPtr = void (*WTF_VTBL_FUNCPTR_PTRAUTH(DOMJITFunctionPtrTag))();
+
 class Signature {
 public:
     template<typename... Arguments>
-    constexpr Signature(uintptr_t unsafeFunction, const ClassInfo* classInfo, Effect effect, SpeculatedType result, Arguments... arguments)
-        : unsafeFunction(unsafeFunction)
+    constexpr Signature(CFunctionPtr functionWithoutTypeCheck, const ClassInfo* classInfo, Effect effect, SpeculatedType result, Arguments... arguments)
+        : functionWithoutTypeCheck(functionWithoutTypeCheck.get())
         , classInfo(classInfo)
-        , effect(effect)
         , result(result)
         , arguments {static_cast<SpeculatedType>(arguments)...}
         , argumentCount(sizeof...(Arguments))
+        , effect(effect)
     {
     }
 
-    uintptr_t unsafeFunction;
+    const FunctionPtr functionWithoutTypeCheck;
     const ClassInfo* const classInfo;
-    const Effect effect;
     const SpeculatedType result;
     const SpeculatedType arguments[JSC_DOMJIT_SIGNATURE_MAX_ARGUMENTS];
     const unsigned argumentCount;
+    const Effect effect;
 };
 
 } }
