diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/disassembler/ARM64/A64DOpcode.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/disassembler/ARM64/A64DOpcode.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/disassembler/ARM64/A64DOpcode.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/disassembler/ARM64/A64DOpcode.cpp
@@ -93,10 +93,11 @@
     OPCODE_GROUP_ENTRY(0x17, A64DOpcodeUnconditionalBranchImmediate),
     OPCODE_GROUP_ENTRY(0x17, A64DOpcodeUnconditionalBranchRegister),
     OPCODE_GROUP_ENTRY(0x17, A64DOpcodeTestAndBranchImmediate),
     OPCODE_GROUP_ENTRY(0x18, A64DOpcodeLoadStoreImmediate),
     OPCODE_GROUP_ENTRY(0x18, A64DOpcodeLoadStoreRegisterOffset),
+    OPCODE_GROUP_ENTRY(0x18, A64DOpcodeLoadStoreAuthenticated),
     OPCODE_GROUP_ENTRY(0x19, A64DOpcodeLoadStoreUnsignedImmediate),
     OPCODE_GROUP_ENTRY(0x1a, A64DOpcodeConditionalSelect),
     OPCODE_GROUP_ENTRY(0x1a, A64DOpcodeDataProcessing1Source),
     OPCODE_GROUP_ENTRY(0x1a, A64DOpcodeDataProcessing2Source),
     OPCODE_GROUP_ENTRY(0x1b, A64DOpcodeDataProcessing3Source),
@@ -454,15 +455,34 @@
 
 const char* const A64DOpcodeDataProcessing1Source::s_opNames[8] = {
     "rbit", "rev16", "rev32", "rev", "clz", "cls", 0, 0
 };
 
+const char* const A64DOpcodeDataProcessing1Source::s_pacAutOpNames[18] = {
+    "pacia", "pacib", "pacda", "pacdb", "autia", "autib", "autda", "autdb",
+    "paciza", "pacizb", "pacdza", "pacdzb", "autiza", "autizb", "autdza", "autdzb",
+    "xpaci", "xpacd"
+};
+
 const char* A64DOpcodeDataProcessing1Source::format()
 {
     if (sBit())
         return A64DOpcode::format();
 
+    if (opCode2() == 1 && is64Bit() && opCode() <= 0x1001) {
+        if (opCode() <= 0x00111 || rt() == 0x11111) {
+            appendInstructionName(s_pacAutOpNames[opCode()]);
+            appendZROrRegisterName(rd(), is64Bit());
+            if (opCode() <= 0x00111) {
+                appendSeparator();
+                appendZROrRegisterName(rn(), is64Bit());
+            }
+            return m_formatBuffer;
+        }
+        return A64DOpcode::format();
+    }
+
     if (opCode2())
         return A64DOpcode::format();
 
     if (opCode() & 0x38)
         return A64DOpcode::format();
@@ -482,12 +502,14 @@
     appendZROrRegisterName(rn(), is64Bit());
 
     return m_formatBuffer;
 }
 
-const char* const A64DOpcodeDataProcessing2Source::s_opNames[8] = {
-    0, 0, "udiv", "sdiv", "lsl", "lsr", "asr", "ror" // We use the pseudo-op names for the shift/rotate instructions
+const char* const A64DOpcodeDataProcessing2Source::s_opNames[16] = {
+    // We use the pseudo-op names for the shift/rotate instructions
+    0, 0, "udiv", "sdiv", 0, 0, 0, 0,
+    "lsl", "lsr", "asr", "ror", 0, "pacga", 0, 0
 };
 
 const char* A64DOpcodeDataProcessing2Source::format()
 {
     if (sBit())
@@ -497,14 +519,18 @@
         return A64DOpcode::format();
 
     if (opCode() & 0x30)
         return A64DOpcode::format();
 
-    if ((opCode() & 0x34) == 0x4)
+    if ((opCode() & 0x3c) == 0x4)
         return A64DOpcode::format();
 
-    appendInstructionName(opName());
+    const char* opcodeName = opName();
+    if (!opcodeName)
+        return A64DOpcode::format();
+
+    appendInstructionName(opcodeName);
     appendZROrRegisterName(rd(), is64Bit());
     appendSeparator();
     appendZROrRegisterName(rn(), is64Bit());
     appendSeparator();
     appendZROrRegisterName(rm(), is64Bit());
@@ -956,24 +982,36 @@
         appendString(systemRegisterName);
     }
     return m_formatBuffer;
 }
 
-const char* const A64DOpcodeHint::s_opNames[6] = {
-    "nop", "yield", "wfe", "wfi", "sev", "sevl"
+const char* const A64DOpcodeHint::s_opNames[32] = {
+    "nop", "yield", "wfe", "wfi", "sev", "sevl", 0, "xpaclri",
+    "pacia1716", 0, "pacib1716", 0, "autia1716", 0, "autib1716", 0,
+    0, 0, 0, 0, 0, 0, 0, 0,
+    "paciaz", "paciasp", "pacibz", "pacibsp", "autiaz", "autiasp", "autibz", "autibsp"
 };
 
 const char* A64DOpcodeHint::format()
 {
     appendInstructionName(opName());
 
-    if (immediate7() > 5)
+    if (immediate7() >= 32 || !s_opNames[immediate7()])
         appendUnsignedImmediate(immediate7());
 
     return m_formatBuffer;
 }
 
+const char* A64DOpcodeHint::opName()
+{
+    const char* opName = (immediate7() < 32 ? s_opNames[immediate7()] : 0);
+    if (!opName)
+        return "hint";
+
+    return opName;
+}
+
 const char* const A64DOpcodeSystemSync::s_opNames[8] = {
     0, 0, "clrex", 0, "dsb", "dmb", "isb", 0
 };
 
 const char* const A64DOpcodeSystemSync::s_optionNames[16] = {
@@ -1191,10 +1229,34 @@
     appendCharacter(']');
 
     return m_formatBuffer;
 }
 
+const char* const A64DOpcodeLoadStoreAuthenticated::s_opNames[2] = {
+    "ldraa", "ldrab"
+};
+
+const char* A64DOpcodeLoadStoreAuthenticated::format()
+{
+    appendInstructionName(opName());
+    appendRegisterName(rt());
+    appendSeparator();
+    appendCharacter('[');
+    appendSPOrRegisterName(rn());
+
+    if (wBit() || immediate10()) {
+        appendSeparator();
+        appendSignedImmediate(immediate10() << size());
+    }
+    appendCharacter(']');
+
+    if (wBit())
+        appendCharacter('!');
+
+    return m_formatBuffer;
+}
+
 const char* A64DOpcodeLoadStoreRegisterPair::opName()
 {
     if (!vBit() && lBit() && size() == 0x1)
         return "ldpsw";
     if (lBit())
@@ -1450,14 +1512,44 @@
     appendPCRelativeOffset(m_currentPC, static_cast<int32_t>(immediate26()));
     return m_formatBuffer;
 }
 
 const char* const A64DOpcodeUnconditionalBranchRegister::s_opNames[8] = { "br", "blr", "ret", "", "eret", "drps", "", "" };
+const char* const A64DOpcodeUnconditionalBranchRegister::s_AuthOpNames[20] = {
+    "braaz", "brabz", "blraaz", "blrabz", "retaa", "retab", 0, 0,
+    "eretaa", "eretab", 0, 0, 0, 0, 0, 0,
+    "braa", "brab", "blraa", "blrab"
+};
+
+const char* A64DOpcodeUnconditionalBranchRegister::authOpName()
+{
+    unsigned opCode = authOpCode();
+    if (opCode >= 20)
+        return 0;
+    return s_AuthOpNames[opCode];
+}
 
 const char* A64DOpcodeUnconditionalBranchRegister::format()
 {
     unsigned opcValue = opc();
+    if (op2() == 0x1f && (op3() & 0x3e) == 0x2) {
+        const char* opName = authOpName();
+        if (!opName)
+            return A64DOpcode::format();
+        if (rn() != 0x1f && (opcValue == 0x2 || opcValue == 0x4))
+            return A64DOpcode::format();
+
+        appendInstructionName(opName);
+        if ((opcValue & 0x7) <= 0x1)
+            appendRegisterName(rn());
+        if (opcValue & 0x8) {
+            appendSeparator();
+            appendRegisterName(rm());
+        }
+
+        return m_formatBuffer;
+    }
     if (opcValue == 3 || opcValue > 5)
         return A64DOpcode::format();
     if (((opcValue & 0xe) == 0x4) && rn() != 0x1f)
         return A64DOpcode::format();
     appendInstructionName(opName());
