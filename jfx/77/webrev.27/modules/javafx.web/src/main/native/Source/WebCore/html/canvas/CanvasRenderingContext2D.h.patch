diff a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasRenderingContext2D.h b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasRenderingContext2D.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasRenderingContext2D.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasRenderingContext2D.h
@@ -36,12 +36,13 @@
 namespace WebCore {
 
 class TextMetrics;
 
 class CanvasRenderingContext2D final : public CanvasRenderingContext2DBase {
+    WTF_MAKE_ISO_ALLOCATED(CanvasRenderingContext2D);
 public:
-    static std::unique_ptr<CanvasRenderingContext2D> create(CanvasBase&, bool usesCSSCompatibilityParseMode, bool usesDashboardCompatibilityMode);
+    static std::unique_ptr<CanvasRenderingContext2D> create(CanvasBase&, bool usesCSSCompatibilityParseMode);
 
     virtual ~CanvasRenderingContext2D();
 
     HTMLCanvasElement& canvas() const { return downcast<HTMLCanvasElement>(canvasBase()); }
 
@@ -67,22 +68,20 @@
     Ref<TextMetrics> measureText(const String& text);
 
     bool is2d() const override { return true; }
 
 private:
-    CanvasRenderingContext2D(CanvasBase&, bool usesCSSCompatibilityParseMode, bool usesDashboardCompatibilityMode);
+    CanvasRenderingContext2D(CanvasBase&, bool usesCSSCompatibilityParseMode);
 
     // The relationship between FontCascade and CanvasRenderingContext2D::FontProxy must hold certain invariants.
     // Therefore, all font operations must pass through the State.
     const FontProxy& fontProxy();
 
     void drawTextInternal(const String& text, float x, float y, bool fill, Optional<float> maxWidth = WTF::nullopt);
 
     void drawFocusIfNeededInternal(const Path&, Element&);
 
-    void prepareGradientForDashboard(CanvasGradient& gradient) const;
-
     TextDirection toTextDirection(CanvasRenderingContext2DBase::Direction, const RenderStyle** computedStyle = nullptr) const;
 
     FloatPoint textOffset(float width, TextDirection);
 };
 
