diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLMeterElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLMeterElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLMeterElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLMeterElement.cpp
@@ -69,11 +69,11 @@
 bool HTMLMeterElement::childShouldCreateRenderer(const Node& child) const
 {
     return !is<RenderMeter>(renderer()) && HTMLElement::childShouldCreateRenderer(child);
 }
 
-void HTMLMeterElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLMeterElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == valueAttr || name == minAttr || name == maxAttr || name == lowAttr || name == highAttr || name == optimumAttr)
         didElementStateChange();
     else
         LabelableElement::parseAttribute(name, value);
@@ -84,65 +84,65 @@
     return parseToDoubleForNumberType(attributeWithoutSynchronization(minAttr), 0);
 }
 
 void HTMLMeterElement::setMin(double min)
 {
-    setAttributeWithoutSynchronization(minAttr, AtomicString::number(min));
+    setAttributeWithoutSynchronization(minAttr, AtomString::number(min));
 }
 
 double HTMLMeterElement::max() const
 {
     return std::max(parseToDoubleForNumberType(attributeWithoutSynchronization(maxAttr), std::max(1.0, min())), min());
 }
 
 void HTMLMeterElement::setMax(double max)
 {
-    setAttributeWithoutSynchronization(maxAttr, AtomicString::number(max));
+    setAttributeWithoutSynchronization(maxAttr, AtomString::number(max));
 }
 
 double HTMLMeterElement::value() const
 {
     double value = parseToDoubleForNumberType(attributeWithoutSynchronization(valueAttr), 0);
     return std::min(std::max(value, min()), max());
 }
 
 void HTMLMeterElement::setValue(double value)
 {
-    setAttributeWithoutSynchronization(valueAttr, AtomicString::number(value));
+    setAttributeWithoutSynchronization(valueAttr, AtomString::number(value));
 }
 
 double HTMLMeterElement::low() const
 {
     double low = parseToDoubleForNumberType(attributeWithoutSynchronization(lowAttr), min());
     return std::min(std::max(low, min()), max());
 }
 
 void HTMLMeterElement::setLow(double low)
 {
-    setAttributeWithoutSynchronization(lowAttr, AtomicString::number(low));
+    setAttributeWithoutSynchronization(lowAttr, AtomString::number(low));
 }
 
 double HTMLMeterElement::high() const
 {
     double high = parseToDoubleForNumberType(attributeWithoutSynchronization(highAttr), max());
     return std::min(std::max(high, low()), max());
 }
 
 void HTMLMeterElement::setHigh(double high)
 {
-    setAttributeWithoutSynchronization(highAttr, AtomicString::number(high));
+    setAttributeWithoutSynchronization(highAttr, AtomString::number(high));
 }
 
 double HTMLMeterElement::optimum() const
 {
     double optimum = parseToDoubleForNumberType(attributeWithoutSynchronization(optimumAttr), (max() + min()) / 2);
     return std::min(std::max(optimum, min()), max());
 }
 
 void HTMLMeterElement::setOptimum(double optimum)
 {
-    setAttributeWithoutSynchronization(optimumAttr, AtomicString::number(optimum));
+    setAttributeWithoutSynchronization(optimumAttr, AtomString::number(optimum));
 }
 
 HTMLMeterElement::GaugeRegion HTMLMeterElement::gaugeRegion() const
 {
     double lowValue = low();
