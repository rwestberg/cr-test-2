diff a/modules/javafx.web/src/main/native/Source/WebCore/fileapi/Blob.h b/modules/javafx.web/src/main/native/Source/WebCore/fileapi/Blob.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/fileapi/Blob.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/fileapi/Blob.h
@@ -1,7 +1,8 @@
 /*
  * Copyright (C) 2010 Google Inc. All rights reserved.
+ * Copyright (C) 2012-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are
  * met:
  *
@@ -29,13 +30,16 @@
  */
 
 #pragma once
 
 #include "BlobPropertyBag.h"
+#include "ScriptExecutionContext.h"
 #include "ScriptWrappable.h"
+#include <wtf/IsoMalloc.h>
 #include <wtf/URL.h>
 #include "URLRegistry.h"
+#include <pal/SessionID.h>
 #include <wtf/Variant.h>
 
 namespace JSC {
 class ArrayBufferView;
 class ArrayBuffer;
@@ -48,35 +52,36 @@
 class SharedBuffer;
 
 using BlobPartVariant = Variant<RefPtr<JSC::ArrayBufferView>, RefPtr<JSC::ArrayBuffer>, RefPtr<Blob>, String>;
 
 class Blob : public ScriptWrappable, public URLRegistrable, public RefCounted<Blob> {
+    WTF_MAKE_ISO_ALLOCATED_EXPORT(Blob, WEBCORE_EXPORT);
 public:
-    static Ref<Blob> create()
+    static Ref<Blob> create(PAL::SessionID sessionID)
     {
-        return adoptRef(*new Blob);
+        return adoptRef(*new Blob(sessionID));
     }
 
-    static Ref<Blob> create(Vector<BlobPartVariant>&& blobPartVariants, const BlobPropertyBag& propertyBag)
+    static Ref<Blob> create(ScriptExecutionContext& context, Vector<BlobPartVariant>&& blobPartVariants, const BlobPropertyBag& propertyBag)
     {
-        return adoptRef(*new Blob(WTFMove(blobPartVariants), propertyBag));
+        return adoptRef(*new Blob(context.sessionID(), WTFMove(blobPartVariants), propertyBag));
     }
 
-    static Ref<Blob> create(const SharedBuffer& buffer, const String& contentType)
+    static Ref<Blob> create(PAL::SessionID sessionID, const SharedBuffer& buffer, const String& contentType)
     {
-        return adoptRef(*new Blob(buffer, contentType));
+        return adoptRef(*new Blob(sessionID, buffer, contentType));
     }
 
-    static Ref<Blob> create(Vector<uint8_t>&& data, const String& contentType)
+    static Ref<Blob> create(PAL::SessionID sessionID, Vector<uint8_t>&& data, const String& contentType)
     {
-        return adoptRef(*new Blob(WTFMove(data), contentType));
+        return adoptRef(*new Blob(sessionID, WTFMove(data), contentType));
     }
 
-    static Ref<Blob> deserialize(const URL& srcURL, const String& type, long long size, const String& fileBackedPath)
+    static Ref<Blob> deserialize(PAL::SessionID sessionID, const URL& srcURL, const String& type, long long size, const String& fileBackedPath)
     {
         ASSERT(Blob::isNormalizedContentType(type));
-        return adoptRef(*new Blob(deserializationContructor, srcURL, type, size, fileBackedPath));
+        return adoptRef(*new Blob(deserializationContructor, sessionID, srcURL, type, size, fileBackedPath));
     }
 
     virtual ~Blob();
 
     const URL& url() const { return m_internalURL; }
@@ -97,36 +102,40 @@
     // URLRegistrable
     URLRegistry& registry() const override;
 
     Ref<Blob> slice(long long start = 0, long long end = std::numeric_limits<long long>::max(), const String& contentType = String()) const
     {
-        return adoptRef(*new Blob(m_internalURL, start, end, contentType));
+        return adoptRef(*new Blob(m_sessionID, m_internalURL, start, end, contentType));
     }
 
 protected:
-    WEBCORE_EXPORT Blob();
-    Blob(Vector<BlobPartVariant>&&, const BlobPropertyBag&);
-    Blob(const SharedBuffer&, const String& contentType);
-    Blob(Vector<uint8_t>&&, const String& contentType);
+    WEBCORE_EXPORT explicit Blob(PAL::SessionID);
+    Blob(PAL::SessionID, Vector<BlobPartVariant>&&, const BlobPropertyBag&);
+    Blob(PAL::SessionID, const SharedBuffer&, const String& contentType);
+    Blob(PAL::SessionID, Vector<uint8_t>&&, const String& contentType);
 
     enum ReferencingExistingBlobConstructor { referencingExistingBlobConstructor };
     Blob(ReferencingExistingBlobConstructor, const Blob&);
 
     enum UninitializedContructor { uninitializedContructor };
-    Blob(UninitializedContructor);
+    Blob(UninitializedContructor, PAL::SessionID, URL&&, String&& type);
 
     enum DeserializationContructor { deserializationContructor };
-    Blob(DeserializationContructor, const URL& srcURL, const String& type, long long size, const String& fileBackedPath);
+    Blob(DeserializationContructor, PAL::SessionID, const URL& srcURL, const String& type, Optional<unsigned long long> size, const String& fileBackedPath);
 
     // For slicing.
-    Blob(const URL& srcURL, long long start, long long end, const String& contentType);
+    Blob(PAL::SessionID, const URL& srcURL, long long start, long long end, const String& contentType);
+
+private:
+    PAL::SessionID m_sessionID;
 
     // This is an internal URL referring to the blob data associated with this object. It serves
     // as an identifier for this blob. The internal URL is never used to source the blob's content
     // into an HTML or for FileRead'ing, public blob URLs must be used for those purposes.
     URL m_internalURL;
 
     String m_type;
-    mutable long long m_size;
+
+    mutable Optional<unsigned long long> m_size;
 };
 
 } // namespace WebCore
