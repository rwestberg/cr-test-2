diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/AsyncFromSyncIteratorPrototype.js b/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/AsyncFromSyncIteratorPrototype.js
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/AsyncFromSyncIteratorPrototype.js
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/AsyncFromSyncIteratorPrototype.js
@@ -28,11 +28,11 @@
     "use strict";
 
     const promiseCapability = @newPromiseCapability(@Promise);
 
     if (!@isObject(this) || !@isObject(@getByIdDirectPrivate(this, "syncIterator"))) {
-        promiseCapability.@reject.@call(@undefined, new @TypeError('Iterator is not an object.'));
+        promiseCapability.@reject.@call(@undefined, @makeTypeError('Iterator is not an object.'));
         return promiseCapability.@promise;
     }
 
     const syncIterator = @getByIdDirectPrivate(this, "syncIterator");
 
@@ -55,11 +55,11 @@
     "use strict";
 
     const promiseCapability = @newPromiseCapability(@Promise);
 
     if (!@isObject(this) || !@isObject(@getByIdDirectPrivate(this, "syncIterator"))) {
-        promiseCapability.@reject.@call(@undefined, new @TypeError('Iterator is not an object.'));
+        promiseCapability.@reject.@call(@undefined, @makeTypeError('Iterator is not an object.'));
         return promiseCapability.@promise;
     }
 
     const syncIterator = @getByIdDirectPrivate(this, "syncIterator");
 
@@ -79,11 +79,11 @@
     
     try {
         const returnResult = returnMethod.@call(syncIterator, value);
 
         if (!@isObject(returnResult)) {
-            promiseCapability.@reject.@call(@undefined, new @TypeError('Iterator result interface is not an object.'));
+            promiseCapability.@reject.@call(@undefined, @makeTypeError('Iterator result interface is not an object.'));
             return promiseCapability.@promise;
         }
 
         const { value: resultValue, done: resultDone } = returnResult;
         const valueWrapperCapability = @newPromiseCapability(@Promise);
@@ -104,11 +104,11 @@
     "use strict";
 
     const promiseCapability = @newPromiseCapability(@Promise);
 
     if (!@isObject(this) || !@isObject(@getByIdDirectPrivate(this, "syncIterator"))) {
-        promiseCapability.@reject.@call(@undefined, new @TypeError('Iterator is not an object.'));
+        promiseCapability.@reject.@call(@undefined, @makeTypeError('Iterator is not an object.'));
         return promiseCapability.@promise;
     }
 
     const syncIterator = @getByIdDirectPrivate(this, "syncIterator");
 
@@ -128,11 +128,11 @@
     
     try {
         const throwResult = throwMethod.@call(syncIterator, exception);
         
         if (!@isObject(throwResult)) {
-            promiseCapability.@reject.@call(@undefined, new @TypeError('Iterator result interface is not an object.'));
+            promiseCapability.@reject.@call(@undefined, @makeTypeError('Iterator result interface is not an object.'));
             return promiseCapability.@promise;
         }
         
         const { value: throwValue, done: throwDone } = throwResult;
         const valueWrapperCapability = @newPromiseCapability(@Promise);
@@ -154,16 +154,16 @@
     "use strict";
 
     if (!@isObject(syncIterator))
         @throwTypeError('Only objects can be wrapped by async-from-sync wrapper');
 
-    return new @AsyncFromSyncIteratorConstructor(syncIterator, nextMethod);
+    return new @AsyncFromSyncIterator(syncIterator, nextMethod);
 }
 
 @globalPrivate
 @constructor
-function AsyncFromSyncIteratorConstructor(syncIterator, nextMethod)
+function AsyncFromSyncIterator(syncIterator, nextMethod)
 {
     "use strict";
 
     @putByIdDirectPrivate(this, "syncIterator", syncIterator);
     @putByIdDirectPrivate(this, "nextMethod", nextMethod);
