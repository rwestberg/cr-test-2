diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLLink.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLLink.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLLink.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLLink.cpp
@@ -69,11 +69,11 @@
 
     Profiler::Compilation* compilation = graph.compilation();
     if (UNLIKELY(compilation)) {
         compilation->addDescription(
             Profiler::OriginStack(),
-            toCString("Generated FTL JIT code for ", CodeBlockWithJITType(codeBlock, JITCode::FTLJIT), ", instruction count = ", graph.m_codeBlock->instructionCount(), ":\n"));
+            toCString("Generated FTL JIT code for ", CodeBlockWithJITType(codeBlock, JITType::FTLJIT), ", instructions size = ", graph.m_codeBlock->instructionsSize(), ":\n"));
 
         graph.ensureSSADominators();
         graph.ensureSSANaturalLoops();
 
         const char* prefix = "    ";
@@ -164,11 +164,11 @@
             CCallHelpers::Call callArityFixup = jit.nearCall();
             jit.emitFunctionEpilogue();
             jit.untagReturnAddress();
             mainPathJumps.append(jit.jump());
 
-            linkBuffer = std::make_unique<LinkBuffer>(jit, codeBlock, JITCompilationCanFail);
+            linkBuffer = makeUnique<LinkBuffer>(jit, codeBlock, JITCompilationCanFail);
             if (linkBuffer->didFailToAllocate()) {
                 state.allocationFailed = true;
                 return;
             }
             linkBuffer->link(callArityCheck, FunctionPtr<OperationPtrTag>(codeBlock->isConstructor() ? operationConstructArityCheck : operationCallArityCheck));
@@ -189,11 +189,11 @@
         CCallHelpers::Label start = jit.label();
         jit.emitFunctionEpilogue();
         jit.untagReturnAddress();
         CCallHelpers::Jump mainPathJump = jit.jump();
 
-        linkBuffer = std::make_unique<LinkBuffer>(jit, codeBlock, JITCompilationCanFail);
+        linkBuffer = makeUnique<LinkBuffer>(jit, codeBlock, JITCompilationCanFail);
         if (linkBuffer->didFailToAllocate()) {
             state.allocationFailed = true;
             return;
         }
         linkBuffer->link(mainPathJump, state.generatedFunction);
