diff a/modules/javafx.web/src/main/native/Source/WebCore/plugins/DOMPlugin.cpp b/modules/javafx.web/src/main/native/Source/WebCore/plugins/DOMPlugin.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/plugins/DOMPlugin.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/plugins/DOMPlugin.cpp
@@ -19,14 +19,17 @@
 #include "config.h"
 #include "DOMPlugin.h"
 
 #include "PluginData.h"
 #include "Frame.h"
-#include <wtf/text/AtomicString.h>
+#include <wtf/IsoMallocInlines.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(DOMPlugin);
+
 DOMPlugin::DOMPlugin(PluginData* pluginData, Frame* frame, PluginInfo pluginInfo)
     : FrameDestructionObserver(frame)
     , m_pluginData(pluginData)
     , m_pluginInfo(WTFMove(pluginInfo))
 {
@@ -70,11 +73,11 @@
             return DOMMimeType::create(m_pluginData.get(), m_frame, i);
     }
     return nullptr;
 }
 
-RefPtr<DOMMimeType> DOMPlugin::namedItem(const AtomicString& propertyName)
+RefPtr<DOMMimeType> DOMPlugin::namedItem(const AtomString& propertyName)
 {
     if (!m_frame || !m_frame->page())
         return nullptr;
 
     Vector<MimeClassInfo> mimes;
@@ -84,12 +87,12 @@
         if (mimes[i].type == propertyName)
             return DOMMimeType::create(m_pluginData.get(), m_frame, i);
     return nullptr;
 }
 
-Vector<AtomicString> DOMPlugin::supportedPropertyNames()
+Vector<AtomString> DOMPlugin::supportedPropertyNames()
 {
     // FIXME: Should be implemented.
-    return Vector<AtomicString>();
+    return Vector<AtomString>();
 }
 
 } // namespace WebCore
