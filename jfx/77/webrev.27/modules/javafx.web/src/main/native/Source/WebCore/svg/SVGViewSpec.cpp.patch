diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGViewSpec.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGViewSpec.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGViewSpec.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGViewSpec.cpp
@@ -1,8 +1,8 @@
 /*
  * Copyright (C) 2007, 2010 Rob Buis <buis@kde.org>
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -20,34 +20,28 @@
 
 #include "config.h"
 #include "SVGViewSpec.h"
 
 #include "Document.h"
-#include "SVGAnimatedTransformList.h"
 #include "SVGElement.h"
 #include "SVGFitToViewBox.h"
 #include "SVGNames.h"
 #include "SVGParserUtilities.h"
 #include "SVGTransformList.h"
 #include "SVGTransformable.h"
 
 namespace WebCore {
 
 SVGViewSpec::SVGViewSpec(SVGElement& contextElement)
-    : SVGFitToViewBox(&contextElement, PropertyIsReadOnly)
+    : SVGFitToViewBox(&contextElement, SVGPropertyAccess::ReadOnly)
     , m_contextElement(makeWeakPtr(contextElement))
-    , m_attributeOwnerProxy(*this, contextElement)
+    , m_transform(SVGTransformList::create(&contextElement, SVGPropertyAccess::ReadOnly))
 {
-    registerAttributes();
-}
-
-void SVGViewSpec::registerAttributes()
-{
-    auto& registry = attributeRegistry();
-    if (!registry.isEmpty())
-        return;
-    registry.registerAttribute<SVGNames::transformAttr, &SVGViewSpec::m_transform>();
+    static std::once_flag onceFlag;
+    std::call_once(onceFlag, [] {
+        PropertyRegistry::registerProperty<SVGNames::transformAttr, &SVGViewSpec::m_transform>();
+    });
 }
 
 SVGElement* SVGViewSpec::viewTarget() const
 {
     if (!m_contextElement)
@@ -56,22 +50,14 @@
     if (!is<SVGElement>(element))
         return nullptr;
     return downcast<SVGElement>(element);
 }
 
-RefPtr<SVGTransformList> SVGViewSpec::transform()
-{
-    if (!m_contextElement)
-        return nullptr;
-    // Return the animVal here, as its readonly by default - which is exactly what we want here.
-    return m_transform.animatedProperty(m_attributeOwnerProxy)->animVal();
-}
-
 void SVGViewSpec::reset()
 {
     m_viewTargetString = emptyString();
-    m_transform.resetValue();
+    m_transform->clearItems();
     SVGFitToViewBox::reset();
     SVGZoomAndPan::reset();
 }
 
 static const UChar svgViewSpec[] = {'s', 'v', 'g', 'V', 'i', 'e', 'w'};
@@ -150,11 +136,11 @@
             if (!skipString(currViewSpec, end, transformSpec, WTF_ARRAY_LENGTH(transformSpec)))
                 return false;
             if (currViewSpec >= end || *currViewSpec != '(')
                 return false;
             currViewSpec++;
-            SVGTransformable::parseTransformAttribute(m_transform.value(), currViewSpec, end, SVGTransformable::DoNotClearList);
+            m_transform->parse(currViewSpec, end);
             if (currViewSpec >= end || *currViewSpec != ')')
                 return false;
             currViewSpec++;
         } else
             return false;
