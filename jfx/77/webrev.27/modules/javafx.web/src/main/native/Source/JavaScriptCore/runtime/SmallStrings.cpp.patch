diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SmallStrings.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SmallStrings.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SmallStrings.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SmallStrings.cpp
@@ -49,11 +49,11 @@
     ASSERT(m_needsToBeVisited);
 
     for (unsigned i = 0; i < singleCharacterStringCount; ++i) {
         ASSERT(!m_singleCharacterStrings[i]);
         const LChar string[] = { static_cast<LChar>(i) };
-        m_singleCharacterStrings[i] = JSString::createHasOtherOwner(vm, AtomicStringImpl::add(string, 1).releaseNonNull());
+        m_singleCharacterStrings[i] = JSString::createHasOtherOwner(vm, AtomStringImpl::add(string, 1).releaseNonNull());
         ASSERT(m_needsToBeVisited);
     }
 
 #define JSC_COMMON_STRINGS_ATTRIBUTE_INITIALIZE(name) initialize(&vm, m_##name, #name);
     JSC_COMMON_STRINGS_EACH_NAME(JSC_COMMON_STRINGS_ATTRIBUTE_INITIALIZE)
@@ -86,15 +86,15 @@
 Ref<StringImpl> SmallStrings::singleCharacterStringRep(unsigned char character)
 {
     if (LIKELY(m_isInitialized))
         return *const_cast<StringImpl*>(m_singleCharacterStrings[character]->tryGetValueImpl());
     const LChar string[] = { static_cast<LChar>(character) };
-    return AtomicStringImpl::add(string, 1).releaseNonNull();
+    return AtomStringImpl::add(string, 1).releaseNonNull();
 }
 
 void SmallStrings::initialize(VM* vm, JSString*& string, const char* value)
 {
-    string = JSString::create(*vm, AtomicStringImpl::add(value).releaseNonNull());
+    string = JSString::create(*vm, AtomStringImpl::add(value).releaseNonNull());
     ASSERT(m_needsToBeVisited);
 }
 
 } // namespace JSC
