diff a/modules/javafx.web/src/main/native/Tools/DumpRenderTree/TestRunner.cpp b/modules/javafx.web/src/main/native/Tools/DumpRenderTree/TestRunner.cpp
--- a/modules/javafx.web/src/main/native/Tools/DumpRenderTree/TestRunner.cpp
+++ b/modules/javafx.web/src/main/native/Tools/DumpRenderTree/TestRunner.cpp
@@ -51,10 +51,11 @@
 #include <wtf/LoggingAccumulator.h>
 #include <wtf/MathExtras.h>
 #include <wtf/RefPtr.h>
 #include <wtf/RunLoop.h>
 #include <wtf/StdLibExtras.h>
+#include <wtf/UniqueArray.h>
 #include <wtf/WallTime.h>
 #include <wtf/text/WTFString.h>
 
 #if PLATFORM(IOS_FAMILY)
 #include <WebCore/WebCoreThreadRun.h>
@@ -72,65 +73,13 @@
 
 const unsigned TestRunner::w3cSVGViewWidth = 480;
 const unsigned TestRunner::w3cSVGViewHeight = 360;
 
 TestRunner::TestRunner(const std::string& testURL, const std::string& expectedPixelHash)
-    : m_disallowIncreaseForApplicationCacheQuota(false)
-    , m_dumpApplicationCacheDelegateCallbacks(false)
-    , m_dumpAsAudio(false)
-    , m_dumpAsPDF(false)
-    , m_dumpAsText(false)
-    , m_dumpBackForwardList(false)
-    , m_dumpChildFrameScrollPositions(false)
-    , m_dumpChildFramesAsText(false)
-    , m_dumpDOMAsWebArchive(false)
-    , m_dumpDatabaseCallbacks(false)
-    , m_dumpEditingCallbacks(false)
-    , m_dumpFrameLoadCallbacks(false)
-    , m_dumpProgressFinishedCallback(false)
-    , m_dumpUserGestureInFrameLoadCallbacks(false)
-    , m_dumpHistoryDelegateCallbacks(false)
-    , m_dumpResourceLoadCallbacks(false)
-    , m_dumpResourceResponseMIMETypes(false)
-    , m_dumpSelectionRect(false)
-    , m_dumpSourceAsWebArchive(false)
-    , m_dumpStatusCallbacks(false)
-    , m_dumpTitleChanges(false)
-    , m_dumpVisitedLinksCallback(false)
-    , m_dumpWillCacheResponse(false)
-    , m_generatePixelResults(true)
-    , m_callCloseOnWebViews(true)
-    , m_canOpenWindows(false)
-    , m_closeRemainingWindowsWhenComplete(true)
-    , m_newWindowsCopyBackForwardList(false)
-    , m_stopProvisionalFrameLoads(false)
-    , m_testOnscreen(false)
-    , m_testRepaint(false)
-    , m_testRepaintSweepHorizontally(false)
-    , m_waitToDump(false)
-    , m_willSendRequestReturnsNull(false)
-    , m_willSendRequestReturnsNullOnRedirect(false)
-    , m_windowIsKey(true)
-    , m_alwaysAcceptCookies(false)
-    , m_globalFlag(false)
-    , m_isGeolocationPermissionSet(false)
-    , m_geolocationPermission(false)
-    , m_rejectsProtectionSpaceAndContinueForAuthenticationChallenges(false)
-    , m_handlesAuthenticationChallenges(false)
-    , m_isPrinting(false)
-    , m_useDeferredFrameLoading(false)
-    , m_shouldPaintBrokenImage(true)
-    , m_shouldStayOnPageAfterHandlingBeforeUnload(false)
-    , m_areLegacyWebNotificationPermissionRequestsIgnored(false)
-    , m_customFullScreenBehavior(false)
-    , m_hasPendingWebNotificationClick(false)
-    , m_databaseDefaultQuota(-1)
-    , m_databaseMaxQuota(-1)
-    , m_testURL(testURL)
+    : m_testURL(testURL)
     , m_expectedPixelHash(expectedPixelHash)
     , m_titleTextDirection("ltr")
-    , m_timeout(0)
 {
 }
 
 Ref<TestRunner> TestRunner::create(const std::string& testURL, const std::string& expectedPixelHash)
 {
@@ -158,10 +107,21 @@
     TestRunner* controller = static_cast<TestRunner*>(JSObjectGetPrivate(thisObject));
     controller->setDumpAsPDF(true);
     return JSValueMakeUndefined(context);
 }
 
+static JSValueRef setRenderTreeDumpOptionsCallback(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
+{
+    TestRunner* controller = static_cast<TestRunner*>(JSObjectGetPrivate(thisObject));
+
+    double options = JSValueToNumber(context, arguments[0], exception);
+    ASSERT(!*exception);
+
+    controller->setRenderTreeDumpOptions(static_cast<unsigned>(options));
+    return JSValueMakeUndefined(context);
+}
+
 static JSValueRef dumpAsTextCallback(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
 {
     TestRunner* controller = static_cast<TestRunner*>(JSObjectGetPrivate(thisObject));
     controller->setDumpAsText(true);
 
@@ -404,15 +364,15 @@
 
     auto destination = adopt(JSValueToStringCopy(context, arguments[1], exception));
     ASSERT(!*exception);
 
     size_t maxLength = JSStringGetMaximumUTF8CStringSize(origin.get());
-    auto originBuffer = std::make_unique<char[]>(maxLength + 1);
+    auto originBuffer = makeUniqueArray<char>(maxLength + 1);
     JSStringGetUTF8CString(origin.get(), originBuffer.get(), maxLength + 1);
 
     maxLength = JSStringGetMaximumUTF8CStringSize(destination.get());
-    auto destinationBuffer = std::make_unique<char[]>(maxLength + 1);
+    auto destinationBuffer = makeUniqueArray<char>(maxLength + 1);
     JSStringGetUTF8CString(destination.get(), destinationBuffer.get(), maxLength + 1);
 
     TestRunner* controller = static_cast<TestRunner*>(JSObjectGetPrivate(thisObject));
     controller->addURLToRedirect(originBuffer.get(), destinationBuffer.get());
 
@@ -934,24 +894,10 @@
         controller->setDatabaseQuota(static_cast<unsigned long long>(quota));
 
     return JSValueMakeUndefined(context);
 }
 
-static JSValueRef setIDBPerOriginQuotaCallback(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
-{
-    if (argumentCount < 1)
-        return JSValueMakeUndefined(context);
-
-    auto* controller = static_cast<TestRunner*>(JSObjectGetPrivate(thisObject));
-
-    double quota = JSValueToNumber(context, arguments[0], nullptr);
-    if (!std::isnan(quota))
-        controller->setIDBPerOriginQuota(static_cast<uint64_t>(quota));
-
-    return JSValueMakeUndefined(context);
-}
-
 static JSValueRef setDefersLoadingCallback(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
 {
     if (argumentCount < 1)
         return JSValueMakeUndefined(context);
 
@@ -1307,22 +1253,10 @@
 
     return JSValueMakeUndefined(context);
 }
 #endif
 
-static JSValueRef setUseDashboardCompatibilityModeCallback(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
-{
-    // Has mac implementation
-    if (argumentCount < 1)
-        return JSValueMakeUndefined(context);
-
-    TestRunner* controller = static_cast<TestRunner*>(JSObjectGetPrivate(thisObject));
-    controller->setUseDashboardCompatibilityMode(JSValueToBoolean(context, arguments[0]));
-
-    return JSValueMakeUndefined(context);
-}
-
 static JSValueRef setUserStyleSheetEnabledCallback(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
 {
     // Has mac implementation
     if (argumentCount < 1)
         return JSValueMakeUndefined(context);
@@ -1371,11 +1305,11 @@
 
     auto header = adopt(JSValueToStringCopy(context, arguments[0], exception));
     ASSERT(!*exception);
 
     size_t maxLength = JSStringGetMaximumUTF8CStringSize(header.get());
-    auto headerBuffer = std::make_unique<char[]>(maxLength + 1);
+    auto headerBuffer = makeUniqueArray<char>(maxLength + 1);
     JSStringGetUTF8CString(header.get(), headerBuffer.get(), maxLength + 1);
 
     TestRunner* controller = static_cast<TestRunner*>(JSObjectGetPrivate(thisObject));
     controller->setWillSendRequestClearHeader(headerBuffer.get());
 
@@ -1829,10 +1763,19 @@
     if (argumentCount == 1)
         static_cast<TestRunner*>(JSObjectGetPrivate(thisObject))->setOpenPanelFiles(context, arguments[0]);
     return JSValueMakeUndefined(context);
 }
 
+#if PLATFORM(IOS_FAMILY)
+static JSValueRef SetOpenPanelFilesMediaIconCallback(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
+{
+    if (argumentCount == 1)
+        static_cast<TestRunner*>(JSObjectGetPrivate(thisObject))->setOpenPanelFilesMediaIcon(context, arguments[0]);
+    return JSValueMakeUndefined(context);
+}
+#endif
+
 // Static Values
 
 static JSValueRef getTimeoutCallback(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
 {
     TestRunner* controller = static_cast<TestRunner*>(JSObjectGetPrivate(thisObject));
@@ -2063,12 +2006,16 @@
 
     auto channel = adopt(JSValueToStringCopy(context, arguments[0], exception));
     ASSERT(!*exception);
 
     TestRunner* controller = static_cast<TestRunner*>(JSObjectGetPrivate(thisObject));
+#if OS(WINDOWS) && PLATFORM(JAVA)
+    // FIXME : error LNK2019: unresolved external symbol
+    // controller->setAccummulateLogsForChannel(channel.get());
+#else
     controller->setAccummulateLogsForChannel(channel.get());
-
+#endif
     return JSValueMakeUndefined(context);
 }
 
 static JSValueRef runUIScriptCallback(JSContextRef context, JSObjectRef, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
 {
@@ -2114,10 +2061,42 @@
     };
 
     return JSClassCreate(&classDefinition);
 }
 
+// Constants
+
+static JSValueRef getRENDER_TREE_SHOW_ALL_LAYERS(JSContextRef context, JSObjectRef, JSStringRef, JSValueRef*)
+{
+    return JSValueMakeNumber(context, 1);
+}
+
+static JSValueRef getRENDER_TREE_SHOW_LAYER_NESTING(JSContextRef context, JSObjectRef, JSStringRef, JSValueRef*)
+{
+    return JSValueMakeNumber(context, 2);
+}
+
+static JSValueRef getRENDER_TREE_SHOW_COMPOSITED_LAYERS(JSContextRef context, JSObjectRef, JSStringRef, JSValueRef*)
+{
+    return JSValueMakeNumber(context, 4);
+}
+
+static JSValueRef getRENDER_TREE_SHOW_OVERFLOW(JSContextRef context, JSObjectRef, JSStringRef, JSValueRef*)
+{
+    return JSValueMakeNumber(context, 8);
+}
+
+static JSValueRef getRENDER_TREE_SHOW_SVG_GEOMETRY(JSContextRef context, JSObjectRef, JSStringRef, JSValueRef*)
+{
+    return JSValueMakeNumber(context, 16);
+}
+
+static JSValueRef getRENDER_TREE_SHOW_LAYER_FRAGMENTS(JSContextRef context, JSObjectRef, JSStringRef, JSValueRef*)
+{
+    return JSValueMakeNumber(context, 32);
+}
+
 JSStaticValue* TestRunner::staticValues()
 {
     static JSStaticValue staticValues[] = {
         { "didCancelClientRedirect", getDidCancelClientRedirect, 0, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "timeout", getTimeoutCallback, 0, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
@@ -2126,10 +2105,16 @@
         { "secureEventInputIsEnabled", getSecureEventInputIsEnabledCallback, 0, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "titleTextDirection", getTitleTextDirectionCallback, 0, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "databaseDefaultQuota", getDatabaseDefaultQuotaCallback, setDatabaseDefaultQuotaCallback, kJSPropertyAttributeNone },
         { "databaseMaxQuota", getDatabaseMaxQuotaCallback, setDatabaseMaxQuotaCallback, kJSPropertyAttributeNone },
         { "inspectorTestStubURL", getInspectorTestStubURLCallback, 0, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
+        { "RENDER_TREE_SHOW_ALL_LAYERS", getRENDER_TREE_SHOW_ALL_LAYERS, 0, kJSPropertyAttributeDontDelete | kJSPropertyAttributeReadOnly },
+        { "RENDER_TREE_SHOW_LAYER_NESTING", getRENDER_TREE_SHOW_LAYER_NESTING, 0, kJSPropertyAttributeDontDelete | kJSPropertyAttributeReadOnly },
+        { "RENDER_TREE_SHOW_COMPOSITED_LAYERS", getRENDER_TREE_SHOW_COMPOSITED_LAYERS, 0, kJSPropertyAttributeDontDelete | kJSPropertyAttributeReadOnly },
+        { "RENDER_TREE_SHOW_OVERFLOW", getRENDER_TREE_SHOW_OVERFLOW, 0, kJSPropertyAttributeDontDelete | kJSPropertyAttributeReadOnly },
+        { "RENDER_TREE_SHOW_SVG_GEOMETRY", getRENDER_TREE_SHOW_SVG_GEOMETRY, 0, kJSPropertyAttributeDontDelete | kJSPropertyAttributeReadOnly },
+        { "RENDER_TREE_SHOW_LAYER_FRAGMENTS", getRENDER_TREE_SHOW_LAYER_FRAGMENTS, 0, kJSPropertyAttributeDontDelete | kJSPropertyAttributeReadOnly },
         { 0, 0, 0, 0 }
     };
     return staticValues;
 }
 
@@ -2155,10 +2140,11 @@
         { "disallowIncreaseForApplicationCacheQuota", disallowIncreaseForApplicationCacheQuotaCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "dispatchPendingLoadRequests", dispatchPendingLoadRequestsCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "display", displayCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "displayAndTrackRepaints", displayAndTrackRepaintsCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "dumpApplicationCacheDelegateCallbacks", dumpApplicationCacheDelegateCallbacksCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
+        { "setRenderTreeDumpOptions", setRenderTreeDumpOptionsCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "dumpAsText", dumpAsTextCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "dumpBackForwardList", dumpBackForwardListCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "dumpChildFrameScrollPositions", dumpChildFrameScrollPositionsCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "dumpChildFramesAsText", dumpChildFramesAsTextCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "dumpDOMAsWebArchive", dumpDOMAsWebArchiveCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
@@ -2225,11 +2211,10 @@
         { "setDomainRelaxationForbiddenForURLScheme", setDomainRelaxationForbiddenForURLSchemeCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setGeolocationPermission", setGeolocationPermissionCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setRejectsProtectionSpaceAndContinueForAuthenticationChallenges", setRejectsProtectionSpaceAndContinueForAuthenticationChallengesCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setHandlesAuthenticationChallenges", setHandlesAuthenticationChallengesCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setIconDatabaseEnabled", setIconDatabaseEnabledCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
-        { "setIDBPerOriginQuota", setIDBPerOriginQuotaCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setAutomaticLinkDetectionEnabled", setAutomaticLinkDetectionEnabledCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setMainFrameIsFirstResponder", setMainFrameIsFirstResponderCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setMockDeviceOrientation", setMockDeviceOrientationCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setMockGeolocationPositionUnavailableError", setMockGeolocationPositionUnavailableErrorCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setMockGeolocationPosition", setMockGeolocationPositionCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
@@ -2247,11 +2232,10 @@
         { "setTabKeyCyclesThroughElements", setTabKeyCyclesThroughElementsCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
 #if PLATFORM(IOS_FAMILY)
         { "setTelephoneNumberParsingEnabled", setTelephoneNumberParsingEnabledCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setPagePaused", setPagePausedCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
 #endif
-        { "setUseDashboardCompatibilityMode", setUseDashboardCompatibilityModeCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setUserStyleSheetEnabled", setUserStyleSheetEnabledCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setUserStyleSheetLocation", setUserStyleSheetLocationCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setValueForUser", setValueForUserCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setWebViewEditable", setWebViewEditableCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setWillSendRequestClearHeader", setWillSendRequestClearHeaderCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
@@ -2293,10 +2277,13 @@
         { "runUIScript", runUIScriptCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "imageCountInGeneralPasteboard", imageCountInGeneralPasteboardCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setSpellCheckerLoggingEnabled", setSpellCheckerLoggingEnabledCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setSpellCheckerResults", setSpellCheckerResultsCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { "setOpenPanelFiles", setOpenPanelFilesCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
+#if PLATFORM(IOS_FAMILY)
+        { "setOpenPanelFilesMediaIcon", SetOpenPanelFilesMediaIconCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
+#endif
         { "forceImmediateCompletion", forceImmediateCompletionCallback, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontDelete },
         { 0, 0, 0 }
     };
 
     return staticFunctions;
@@ -2384,22 +2371,32 @@
         return nullptr;
 
     return iterator->second.data();
 }
 
+void TestRunner::setRenderTreeDumpOptions(unsigned options)
+{
+    m_renderTreeDumpOptions = options;
+}
+
 void TestRunner::setShouldPaintBrokenImage(bool shouldPaintBrokenImage)
 {
     m_shouldPaintBrokenImage = shouldPaintBrokenImage;
 }
 
 void TestRunner::setAccummulateLogsForChannel(JSStringRef channel)
 {
     size_t maxLength = JSStringGetMaximumUTF8CStringSize(channel);
-    auto buffer = std::make_unique<char[]>(maxLength + 1);
+    auto buffer = makeUniqueArray<char>(maxLength + 1);
     JSStringGetUTF8CString(channel, buffer.get(), maxLength + 1);
 
+#if OS(WINDOWS) && PLATFORM(JAVA)
+    // FIXME : error LNK2019: unresolved external symbol
+    // WebCoreTestSupport::setLogChannelToAccumulate({ buffer.get() });
+#else
     WebCoreTestSupport::setLogChannelToAccumulate({ buffer.get() });
+#endif
 }
 
 typedef WTF::HashMap<unsigned, JSValueRef> CallbackMap;
 static CallbackMap& callbackMap()
 {
@@ -2462,11 +2459,11 @@
 
     unsigned callbackID = nextUIScriptCallbackID();
     cacheTestRunnerCallback(callbackID, callback);
 
     if (!m_UIScriptContext)
-        m_UIScriptContext = std::make_unique<WTR::UIScriptContext>(*this);
+        m_UIScriptContext = makeUniqueWithoutFastMallocCheck<WTR::UIScriptContext>(*this);
 
     String scriptString(JSStringGetCharactersPtr(script), JSStringGetLength(script));
     m_UIScriptContext->runUIScript(scriptString, callbackID);
 }
 
@@ -2496,11 +2493,16 @@
     callUIScriptCallback(callbackID, stringRef.get());
 }
 
 void TestRunner::setAllowsAnySSLCertificate(bool allowsAnySSLCertificate)
 {
+#if OS(WINDOWS) && PLATFORM(JAVA)
+    // FIXME : error LNK2019: unresolved external symbol
+    // WebCoreTestSupport::setAllowsAnySSLCertificate(allowsAnySSLCertificate);
+#else
     WebCoreTestSupport::setAllowsAnySSLCertificate(allowsAnySSLCertificate);
+#endif
 }
 
 void TestRunner::setOpenPanelFiles(JSContextRef context, JSValueRef filesValue)
 {
     if (!JSValueIsArray(context, filesValue))
@@ -2519,16 +2521,33 @@
         if (!JSValueIsString(context, fileValue))
             continue;
 
         auto file = adopt(JSValueToStringCopy(context, fileValue, nullptr));
         size_t fileBufferSize = JSStringGetMaximumUTF8CStringSize(file.get()) + 1;
-        auto fileBuffer = std::make_unique<char[]>(fileBufferSize);
+        auto fileBuffer = makeUniqueArray<char>(fileBufferSize);
         JSStringGetUTF8CString(file.get(), fileBuffer.get(), fileBufferSize);
 
         m_openPanelFiles.push_back(fileBuffer.get());
     }
 }
 
+#if PLATFORM(IOS_FAMILY)
+void TestRunner::setOpenPanelFilesMediaIcon(JSContextRef context, JSValueRef mediaIcon)
+{
+    // FIXME (123058): Use a JSC API to get buffer contents once such is exposed.
+    JSC::VM& vm = toJS(context)->vm();
+    JSC::JSLockHolder lock(vm);
+
+    JSC::JSArrayBufferView* jsBufferView = JSC::jsDynamicCast<JSC::JSArrayBufferView*>(vm, toJS(toJS(context), mediaIcon));
+    ASSERT(jsBufferView);
+    RefPtr<JSC::ArrayBufferView> bufferView = jsBufferView->unsharedImpl();
+    const char* buffer = static_cast<const char*>(bufferView->baseAddress());
+    std::vector<char> mediaIconData(buffer, buffer + bufferView->byteLength());
+
+    m_openPanelFilesMediaIcon = mediaIconData;
+}
+#endif
+
 void TestRunner::cleanup()
 {
     clearTestRunnerCallbacks();
 }
