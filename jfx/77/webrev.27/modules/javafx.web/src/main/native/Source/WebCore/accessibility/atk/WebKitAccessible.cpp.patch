diff a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/WebKitAccessible.cpp b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/WebKitAccessible.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/WebKitAccessible.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/WebKitAccessible.cpp
@@ -30,11 +30,11 @@
  */
 
 #include "config.h"
 #include "WebKitAccessible.h"
 
-#if HAVE(ACCESSIBILITY)
+#if ENABLE(ACCESSIBILITY)
 
 #include "AXObjectCache.h"
 #include "AccessibilityList.h"
 #include "AccessibilityListBoxOption.h"
 #include "AccessibilityTable.h"
@@ -392,10 +392,12 @@
     returnValIfWebKitAccessibleIsInvalid(accessible, nullptr);
 
     AtkAttributeSet* attributeSet = nullptr;
 #if PLATFORM(GTK)
     attributeSet = addToAtkAttributeSet(attributeSet, "toolkit", "WebKitGtk");
+#elif PLATFORM(WPE)
+    attributeSet = addToAtkAttributeSet(attributeSet, "toolkit", "WPEWebKit");
 #endif
 
     auto* coreObject = accessible->priv->object;
 
     // Hack needed for WebKit2 tests because obtaining an element by its ID
@@ -463,11 +465,11 @@
 
     if (coreObject->supportsAutoComplete())
         attributeSet = addToAtkAttributeSet(attributeSet, "autocomplete", coreObject->autoCompleteValue().utf8().data());
 
     if (coreObject->supportsHasPopup())
-        attributeSet = addToAtkAttributeSet(attributeSet, "haspopup", coreObject->hasPopupValue().utf8().data());
+        attributeSet = addToAtkAttributeSet(attributeSet, "haspopup", coreObject->popupValue().utf8().data());
 
     if (coreObject->supportsCurrent())
         attributeSet = addToAtkAttributeSet(attributeSet, "current", coreObject->currentValue().utf8().data());
 
     // The Core AAM states that an explicitly-set value should be exposed, including "none".
@@ -516,11 +518,14 @@
     if (!computedRoleString.isEmpty()) {
         attributeSet = addToAtkAttributeSet(attributeSet, "computed-role", computedRoleString.utf8().data());
 
         // The HTML AAM maps several elements to ARIA landmark roles. In order for the type of landmark
         // to be obtainable in the same fashion as an ARIA landmark, fall back on the computedRoleString.
-        if (coreObject->ariaRoleAttribute() == AccessibilityRole::Unknown && coreObject->isLandmark())
+        // We also want to do this for the style-format-group element types so that the type of format
+        // group it is doesn't get lost to a generic platform role.
+        if (coreObject->ariaRoleAttribute() == AccessibilityRole::Unknown
+            && (coreObject->isLandmark() || coreObject->isStyleFormatGroup()))
             attributeSet = addToAtkAttributeSet(attributeSet, "xml-roles", computedRoleString.utf8().data());
     }
 
     String roleDescription = coreObject->roleDescription();
     if (!roleDescription.isEmpty())
@@ -528,30 +533,30 @@
 
     // We need to expose the live region attributes even if the live region is currently disabled/off.
     if (auto liveContainer = coreObject->liveRegionAncestor(false)) {
         String liveStatus = liveContainer->liveRegionStatus();
         String relevant = liveContainer->liveRegionRelevant();
-        bool isAtomic = liveContainer->liveRegionAtomic();
+        bool isAtom = liveContainer->liveRegionAtomic();
         String liveRole = roleString.isEmpty() ? computedRoleString : roleString;
 
         // According to the Core AAM, we need to expose the above properties with "container-" prefixed
         // object attributes regardless of whether the container is this object, or an ancestor of it.
         attributeSet = addToAtkAttributeSet(attributeSet, "container-live", liveStatus.utf8().data());
         attributeSet = addToAtkAttributeSet(attributeSet, "container-relevant", relevant.utf8().data());
-        if (isAtomic)
+        if (isAtom)
             attributeSet = addToAtkAttributeSet(attributeSet, "container-atomic", "true");
         if (!liveRole.isEmpty())
             attributeSet = addToAtkAttributeSet(attributeSet, "container-live-role", liveRole.utf8().data());
 
         // According to the Core AAM, if this object is the live region (rather than its descendant),
         // we must expose the above properties on the object without a "container-" prefix.
         if (liveContainer == coreObject) {
             attributeSet = addToAtkAttributeSet(attributeSet, "live", liveStatus.utf8().data());
             attributeSet = addToAtkAttributeSet(attributeSet, "relevant", relevant.utf8().data());
-            if (isAtomic)
+            if (isAtom)
                 attributeSet = addToAtkAttributeSet(attributeSet, "atomic", "true");
-        } else if (!isAtomic && coreObject->liveRegionAtomic())
+        } else if (!isAtom && coreObject->liveRegionAtomic())
             attributeSet = addToAtkAttributeSet(attributeSet, "atomic", "true");
     }
 
     // The Core AAM states the author-provided value should be exposed as-is.
     String dropEffect = coreObject->getAttribute(HTMLNames::aria_dropeffectAttr);
@@ -562,11 +567,11 @@
         attributeSet = addToAtkAttributeSet(attributeSet, "grabbed", "true");
     else if (coreObject->supportsARIADragging())
         attributeSet = addToAtkAttributeSet(attributeSet, "grabbed", "false");
 
     // The Core AAM states the author-provided value should be exposed as-is.
-    const AtomicString& keyShortcuts = coreObject->keyShortcutsValue();
+    const AtomString& keyShortcuts = coreObject->keyShortcutsValue();
     if (!keyShortcuts.isEmpty())
         attributeSet = addToAtkAttributeSet(attributeSet, "keyshortcuts", keyShortcuts.string().utf8().data());
 
     return attributeSet;
 }
@@ -582,18 +587,13 @@
     case AccessibilityRole::ApplicationStatus:
         return ATK_ROLE_STATUSBAR;
     case AccessibilityRole::Unknown:
         return ATK_ROLE_UNKNOWN;
     case AccessibilityRole::Audio:
-#if ATK_CHECK_VERSION(2, 11, 3)
         return ATK_ROLE_AUDIO;
-#endif
     case AccessibilityRole::Video:
-#if ATK_CHECK_VERSION(2, 11, 3)
         return ATK_ROLE_VIDEO;
-#endif
-        return ATK_ROLE_EMBEDDED;
     case AccessibilityRole::Button:
         return ATK_ROLE_PUSH_BUTTON;
     case AccessibilityRole::Switch:
     case AccessibilityRole::ToggleButton:
         return ATK_ROLE_TOGGLE_BUTTON;
@@ -609,15 +609,11 @@
     case AccessibilityRole::TextField:
     case AccessibilityRole::TextArea:
     case AccessibilityRole::SearchField:
         return ATK_ROLE_ENTRY;
     case AccessibilityRole::StaticText:
-#if ATK_CHECK_VERSION(2, 15, 2)
         return ATK_ROLE_STATIC;
-#else
-        return ATK_ROLE_TEXT;
-#endif
     case AccessibilityRole::Outline:
     case AccessibilityRole::Tree:
         return ATK_ROLE_TREE;
     case AccessibilityRole::TreeItem:
         return ATK_ROLE_TREE_ITEM;
@@ -639,26 +635,27 @@
         return ATK_ROLE_UNKNOWN; // Matches Mozilla
     case AccessibilityRole::Row:
         return ATK_ROLE_TABLE_ROW;
     case AccessibilityRole::Toolbar:
         return ATK_ROLE_TOOL_BAR;
+    case AccessibilityRole::Meter:
+        return ATK_ROLE_LEVEL_BAR;
     case AccessibilityRole::BusyIndicator:
-        return ATK_ROLE_PROGRESS_BAR; // Is this right?
     case AccessibilityRole::ProgressIndicator:
-        return coreObject->isMeter() ? ATK_ROLE_LEVEL_BAR : ATK_ROLE_PROGRESS_BAR;
+        return ATK_ROLE_PROGRESS_BAR;
     case AccessibilityRole::Window:
         return ATK_ROLE_WINDOW;
     case AccessibilityRole::PopUpButton:
         return coreObject->hasPopup() ? ATK_ROLE_PUSH_BUTTON : ATK_ROLE_COMBO_BOX;
     case AccessibilityRole::ComboBox:
         return ATK_ROLE_COMBO_BOX;
     case AccessibilityRole::SplitGroup:
         return ATK_ROLE_SPLIT_PANE;
     case AccessibilityRole::Splitter:
         return ATK_ROLE_SEPARATOR;
-    case AccessibilityRole::ColorWell:
 #if PLATFORM(GTK)
+    case AccessibilityRole::ColorWell:
         // ATK_ROLE_COLOR_CHOOSER is defined as a dialog (i.e. it's what appears when you push the button).
         return ATK_ROLE_PUSH_BUTTON;
 #endif
     case AccessibilityRole::List:
         return ATK_ROLE_LIST;
@@ -701,13 +698,11 @@
     case AccessibilityRole::Image:
         return ATK_ROLE_IMAGE;
     case AccessibilityRole::ListMarker:
         return ATK_ROLE_TEXT;
     case AccessibilityRole::DocumentArticle:
-#if ATK_CHECK_VERSION(2, 11, 3)
         return ATK_ROLE_ARTICLE;
-#endif
     case AccessibilityRole::Document:
     case AccessibilityRole::GraphicsDocument:
         return ATK_ROLE_DOCUMENT_FRAME;
     case AccessibilityRole::DocumentNote:
         return ATK_ROLE_COMMENT;
@@ -724,15 +719,13 @@
         return ATK_ROLE_PARAGRAPH;
     case AccessibilityRole::Label:
     case AccessibilityRole::Legend:
         return ATK_ROLE_LABEL;
     case AccessibilityRole::Blockquote:
-#if ATK_CHECK_VERSION(2, 11, 3)
         return ATK_ROLE_BLOCK_QUOTE;
-#endif
-    case AccessibilityRole::Footnote:
 #if ATK_CHECK_VERSION(2, 25, 2)
+    case AccessibilityRole::Footnote:
         return ATK_ROLE_FOOTNOTE;
 #endif
     case AccessibilityRole::ApplicationTextGroup:
     case AccessibilityRole::Div:
     case AccessibilityRole::Pre:
@@ -740,14 +733,12 @@
     case AccessibilityRole::TextGroup:
         return ATK_ROLE_SECTION;
     case AccessibilityRole::Footer:
         return ATK_ROLE_FOOTER;
     case AccessibilityRole::Form:
-#if ATK_CHECK_VERSION(2, 11, 3)
         if (coreObject->ariaRoleAttribute() != AccessibilityRole::Unknown)
             return ATK_ROLE_LANDMARK;
-#endif
         return ATK_ROLE_FORM;
     case AccessibilityRole::Canvas:
         return ATK_ROLE_CANVAS;
     case AccessibilityRole::HorizontalRule:
         return ATK_ROLE_SEPARATOR;
@@ -759,11 +750,10 @@
         return ATK_ROLE_TOOL_TIP;
     case AccessibilityRole::WebArea:
         return ATK_ROLE_DOCUMENT_WEB;
     case AccessibilityRole::WebApplication:
         return ATK_ROLE_EMBEDDED;
-#if ATK_CHECK_VERSION(2, 11, 3)
     case AccessibilityRole::ApplicationLog:
         return ATK_ROLE_LOG;
     case AccessibilityRole::ApplicationMarquee:
         return ATK_ROLE_MARQUEE;
     case AccessibilityRole::ApplicationTimer:
@@ -781,60 +771,60 @@
             return ATK_ROLE_TABLE_ROW;
         if (coreObject->isMathTableCell())
             return ATK_ROLE_TABLE_CELL;
         if (coreObject->isMathSubscriptSuperscript() || coreObject->isMathMultiscript())
             return ATK_ROLE_SECTION;
-#if ATK_CHECK_VERSION(2, 15, 4)
         if (coreObject->isMathFraction())
             return ATK_ROLE_MATH_FRACTION;
         if (coreObject->isMathSquareRoot() || coreObject->isMathRoot())
             return ATK_ROLE_MATH_ROOT;
         if (coreObject->isMathScriptObject(AccessibilityMathScriptObjectType::Subscript)
             || coreObject->isMathMultiscriptObject(AccessibilityMathMultiscriptObjectType::PreSubscript) || coreObject->isMathMultiscriptObject(AccessibilityMathMultiscriptObjectType::PostSubscript))
             return ATK_ROLE_SUBSCRIPT;
         if (coreObject->isMathScriptObject(AccessibilityMathScriptObjectType::Superscript)
             || coreObject->isMathMultiscriptObject(AccessibilityMathMultiscriptObjectType::PreSuperscript) || coreObject->isMathMultiscriptObject(AccessibilityMathMultiscriptObjectType::PostSuperscript))
             return ATK_ROLE_SUPERSCRIPT;
-#endif
-#if ATK_CHECK_VERSION(2, 15, 2)
         if (coreObject->isMathToken())
             return ATK_ROLE_STATIC;
-#endif
         return ATK_ROLE_UNKNOWN;
     case AccessibilityRole::LandmarkBanner:
     case AccessibilityRole::LandmarkComplementary:
     case AccessibilityRole::LandmarkContentInfo:
     case AccessibilityRole::LandmarkDocRegion:
     case AccessibilityRole::LandmarkMain:
     case AccessibilityRole::LandmarkNavigation:
     case AccessibilityRole::LandmarkRegion:
     case AccessibilityRole::LandmarkSearch:
         return ATK_ROLE_LANDMARK;
-#endif
-#if ATK_CHECK_VERSION(2, 11, 4)
     case AccessibilityRole::DescriptionList:
         return ATK_ROLE_DESCRIPTION_LIST;
     case AccessibilityRole::Term:
     case AccessibilityRole::DescriptionListTerm:
         return ATK_ROLE_DESCRIPTION_TERM;
     case AccessibilityRole::DescriptionListDetail:
         return ATK_ROLE_DESCRIPTION_VALUE;
+    case AccessibilityRole::Deletion:
+#if ATK_CHECK_VERSION(2, 33, 3)
+        return ATK_ROLE_CONTENT_DELETION;
+#else
+        return ATK_ROLE_STATIC;
 #endif
-    case AccessibilityRole::Inline:
-#if ATK_CHECK_VERSION(2, 15, 4)
-        if (coreObject->isSubscriptStyleGroup())
-            return ATK_ROLE_SUBSCRIPT;
-        if (coreObject->isSuperscriptStyleGroup())
-            return ATK_ROLE_SUPERSCRIPT;
-#endif
-#if ATK_CHECK_VERSION(2, 15, 2)
+    case AccessibilityRole::Insertion:
+#if ATK_CHECK_VERSION(2, 33, 3)
+        return ATK_ROLE_CONTENT_INSERTION;
+#else
         return ATK_ROLE_STATIC;
+#endif
+    case AccessibilityRole::Subscript:
+        return ATK_ROLE_SUBSCRIPT;
+    case AccessibilityRole::Superscript:
+        return ATK_ROLE_SUPERSCRIPT;
+    case AccessibilityRole::Inline:
     case AccessibilityRole::SVGTextPath:
     case AccessibilityRole::SVGTSpan:
     case AccessibilityRole::Time:
         return ATK_ROLE_STATIC;
-#endif
     default:
         return ATK_ROLE_UNKNOWN;
     }
 }
 
@@ -893,14 +883,12 @@
         atk_state_set_add_state(stateSet, ATK_STATE_ACTIVE);
 
     if (coreObject->isBusy())
         atk_state_set_add_state(stateSet, ATK_STATE_BUSY);
 
-#if ATK_CHECK_VERSION(2,11,2)
     if (coreObject->supportsChecked() && coreObject->canSetValueAttribute())
         atk_state_set_add_state(stateSet, ATK_STATE_CHECKABLE);
-#endif
 
     if (coreObject->isChecked())
         atk_state_set_add_state(stateSet, ATK_STATE_CHECKED);
 
     if ((coreObject->isTextControl() || coreObject->isNonNativeTextControl()) && coreObject->canSetValueAttribute())
@@ -958,14 +946,12 @@
     // TODO: ATK_STATE_OPAQUE
 
     if (coreObject->isPressed())
         atk_state_set_add_state(stateSet, ATK_STATE_PRESSED);
 
-#if ATK_CHECK_VERSION(2,15,3)
     if (!coreObject->canSetValueAttribute() && (coreObject->supportsReadOnly()))
         atk_state_set_add_state(stateSet, ATK_STATE_READ_ONLY);
-#endif
 
     if (coreObject->isRequired())
         atk_state_set_add_state(stateSet, ATK_STATE_REQUIRED);
 
     // TODO: ATK_STATE_SELECTABLE_TEXT
@@ -1107,13 +1093,11 @@
     {reinterpret_cast<GInterfaceInitFunc>(reinterpret_cast<GCallback>(webkitAccessibleEditableTextInterfaceInit)), nullptr, nullptr},
     {reinterpret_cast<GInterfaceInitFunc>(reinterpret_cast<GCallback>(webkitAccessibleTextInterfaceInit)), nullptr, nullptr},
     {reinterpret_cast<GInterfaceInitFunc>(reinterpret_cast<GCallback>(webkitAccessibleComponentInterfaceInit)), nullptr, nullptr},
     {reinterpret_cast<GInterfaceInitFunc>(reinterpret_cast<GCallback>(webkitAccessibleImageInterfaceInit)), nullptr, nullptr},
     {reinterpret_cast<GInterfaceInitFunc>(reinterpret_cast<GCallback>(webkitAccessibleTableInterfaceInit)), nullptr, nullptr},
-#if ATK_CHECK_VERSION(2,11,90)
     {reinterpret_cast<GInterfaceInitFunc>(reinterpret_cast<GCallback>(webkitAccessibleTableCellInterfaceInit)), nullptr, nullptr},
-#endif
     {reinterpret_cast<GInterfaceInitFunc>(reinterpret_cast<GCallback>(webkitAccessibleHypertextInterfaceInit)), nullptr, nullptr},
     {reinterpret_cast<GInterfaceInitFunc>(reinterpret_cast<GCallback>(webkitAccessibleHyperlinkImplInterfaceInit)), nullptr, nullptr},
     {reinterpret_cast<GInterfaceInitFunc>(reinterpret_cast<GCallback>(webkitAccessibleDocumentInterfaceInit)), nullptr, nullptr},
     {reinterpret_cast<GInterfaceInitFunc>(reinterpret_cast<GCallback>(webkitAccessibleValueInterfaceInit)), nullptr, nullptr}
 };
@@ -1124,13 +1108,11 @@
     WAIEditableText,
     WAIText,
     WAIComponent,
     WAIImage,
     WAITable,
-#if ATK_CHECK_VERSION(2,11,90)
     WAITableCell,
-#endif
     WAIHypertext,
     WAIHyperlink,
     WAIDocument,
     WAIValue,
 };
@@ -1150,14 +1132,12 @@
         return ATK_TYPE_COMPONENT;
     case WAIImage:
         return ATK_TYPE_IMAGE;
     case WAITable:
         return ATK_TYPE_TABLE;
-#if ATK_CHECK_VERSION(2,11,90)
     case WAITableCell:
         return ATK_TYPE_TABLE_CELL;
-#endif
     case WAIHypertext:
         return ATK_TYPE_HYPERTEXT;
     case WAIHyperlink:
         return ATK_TYPE_HYPERLINK_IMPL;
     case WAIDocument:
@@ -1244,14 +1224,12 @@
 
     // Table
     if (coreObject->isTable())
         interfaceMask |= 1 << WAITable;
 
-#if ATK_CHECK_VERSION(2,11,90)
     if (role == AccessibilityRole::Cell || role == AccessibilityRole::GridCell || role == AccessibilityRole::ColumnHeader || role == AccessibilityRole::RowHeader)
         interfaceMask |= 1 << WAITableCell;
-#endif
 
     // Document
     if (role == AccessibilityRole::WebArea)
         interfaceMask |= 1 << WAIDocument;
 
@@ -1389,6 +1367,6 @@
         *propertyPtr = WTFMove(value);
 
     return (*propertyPtr).data();
 }
 
-#endif // HAVE(ACCESSIBILITY)
+#endif // ENABLE(ACCESSIBILITY)
