diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUProgrammablePassEncoder.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUProgrammablePassEncoder.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUProgrammablePassEncoder.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUProgrammablePassEncoder.h
@@ -26,18 +26,19 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "GPUBindGroupBinding.h"
+#include "GPUCommandBuffer.h"
+#include <objc/NSObjCRuntime.h>
 #include <wtf/RefCounted.h>
 
-OBJC_PROTOCOL(MTLArgumentEncoder);
 #if USE(METAL)
 OBJC_PROTOCOL(MTLBuffer);
 OBJC_PROTOCOL(MTLCommandEncoder);
 OBJC_PROTOCOL(MTLResource);
-#endif // USE(METAL)
+#endif
 
 namespace WebCore {
 
 class GPUBindGroup;
 class GPURenderPipeline;
@@ -47,27 +48,31 @@
 class GPUProgrammablePassEncoder : public RefCounted<GPUProgrammablePassEncoder> {
 public:
     virtual ~GPUProgrammablePassEncoder() = default;
 
     void endPass();
-    void setBindGroup(unsigned long, const GPUBindGroup&);
-    virtual void setPipeline(Ref<GPURenderPipeline>&&) = 0;
+    void setBindGroup(unsigned, GPUBindGroup&);
 
 protected:
-    virtual PlatformProgrammablePassEncoder* platformPassEncoder() const = 0;
+    GPUProgrammablePassEncoder(Ref<GPUCommandBuffer>&&);
+
+    GPUCommandBuffer& commandBuffer() const { return m_commandBuffer.get(); }
+    virtual const PlatformProgrammablePassEncoder* platformPassEncoder() const = 0;
 
 private:
+    virtual void invalidateEncoder() = 0;
 #if USE(METAL)
-    void setResourceAsBufferOnEncoder(MTLArgumentEncoder *, const GPUBindingResource&, unsigned long, const char* const);
-    virtual void useResource(MTLResource *, unsigned long) = 0;
+    virtual void useResource(const MTLResource *, unsigned) = 0;
 
     // Render command encoder methods.
-    virtual void setVertexBuffer(MTLBuffer *, unsigned long, unsigned long) { }
-    virtual void setFragmentBuffer(MTLBuffer *, unsigned long, unsigned long) { }
+    virtual void setVertexBuffer(const MTLBuffer *, NSUInteger, unsigned) { }
+    virtual void setFragmentBuffer(const MTLBuffer *, NSUInteger, unsigned) { }
+    // Compute.
+    virtual void setComputeBuffer(const MTLBuffer *, NSUInteger, unsigned) { }
 #endif // USE(METAL)
 
-    bool m_isEncoding { true };
+    Ref<GPUCommandBuffer> m_commandBuffer;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(WEBGPU)
