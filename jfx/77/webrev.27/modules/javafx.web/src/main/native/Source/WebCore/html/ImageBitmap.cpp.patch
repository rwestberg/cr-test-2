diff a/modules/javafx.web/src/main/native/Source/WebCore/html/ImageBitmap.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/ImageBitmap.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/ImageBitmap.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/ImageBitmap.cpp
@@ -43,14 +43,19 @@
 #include "JSImageBitmap.h"
 #include "LayoutSize.h"
 #include "RenderElement.h"
 #include "SharedBuffer.h"
 #include "TypedOMCSSImageValue.h"
+#include <wtf/IsoMallocInlines.h>
+#include <wtf/Optional.h>
 #include <wtf/StdLibExtras.h>
+#include <wtf/Variant.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(ImageBitmap);
+
 #if USE(IOSURFACE_CANVAS_BACKING_STORE) || ENABLE(ACCELERATED_2D_CANVAS)
 static RenderingMode bufferRenderingMode = Accelerated;
 #else
 static RenderingMode bufferRenderingMode = Unaccelerated;
 #endif
@@ -316,14 +321,11 @@
         promise.reject(InvalidStateError, "Cannot create ImageBitmap from image that can't be rendered");
         return;
     }
 
     FloatRect destRect(FloatPoint(), outputSize);
-    ImagePaintingOptions paintingOptions;
-    paintingOptions.m_interpolationQuality = interpolationQualityForResizeQuality(options.resizeQuality);
-
-    bitmapData->context().drawImage(*imageForRender, destRect, sourceRectangle.releaseReturnValue(), paintingOptions);
+    bitmapData->context().drawImage(*imageForRender, destRect, sourceRectangle.releaseReturnValue(), { interpolationQualityForResizeQuality(options.resizeQuality) });
 
     // 7. Create a new ImageBitmap object.
     auto imageBitmap = create(WTFMove(bitmapData));
 
     // 9. If the origin of image's image is not the same origin as the origin specified by the
@@ -366,14 +368,11 @@
         promise.reject(InvalidStateError, "Cannot create ImageBitmap from canvas that can't be rendered");
         return;
     }
 
     FloatRect destRect(FloatPoint(), outputSize);
-    ImagePaintingOptions paintingOptions;
-    paintingOptions.m_interpolationQuality = interpolationQualityForResizeQuality(options.resizeQuality);
-
-    bitmapData->context().drawImage(*imageForRender, destRect, sourceRectangle.releaseReturnValue(), paintingOptions);
+    bitmapData->context().drawImage(*imageForRender, destRect, sourceRectangle.releaseReturnValue(), { interpolationQualityForResizeQuality(options.resizeQuality) });
 
     // 3. Create a new ImageBitmap object.
     auto imageBitmap = create(WTFMove(bitmapData));
 
     // 5. Set the origin-clean flag of the ImageBitmap object's bitmap to the same value as
@@ -477,14 +476,11 @@
     auto bitmapData = ImageBuffer::create(FloatSize(outputSize.width(), outputSize.height()), bufferRenderingMode);
 
     auto imageForRender = existingImageBitmap->buffer()->copyImage();
 
     FloatRect destRect(FloatPoint(), outputSize);
-    ImagePaintingOptions paintingOptions;
-    paintingOptions.m_interpolationQuality = interpolationQualityForResizeQuality(options.resizeQuality);
-
-    bitmapData->context().drawImage(*imageForRender, destRect, sourceRectangle.releaseReturnValue(), paintingOptions);
+    bitmapData->context().drawImage(*imageForRender, destRect, sourceRectangle.releaseReturnValue(), { interpolationQualityForResizeQuality(options.resizeQuality) });
 
     // 3. Create a new ImageBitmap object.
     auto imageBitmap = create(WTFMove(bitmapData));
 
     // 5. Set the origin-clean flag of the ImageBitmap object's bitmap to the same
@@ -644,14 +640,11 @@
         promise.reject(InvalidStateError, "Cannot create an image buffer from the argument to createImageBitmap");
         return;
     }
 
     FloatRect destRect(FloatPoint(), outputSize);
-    ImagePaintingOptions paintingOptions;
-    paintingOptions.m_interpolationQuality = interpolationQualityForResizeQuality(options.resizeQuality);
-
-    bitmapData->context().drawImage(*image, destRect, sourceRectangle.releaseReturnValue(), paintingOptions);
+    bitmapData->context().drawImage(*image, destRect, sourceRectangle.releaseReturnValue(), { interpolationQualityForResizeQuality(options.resizeQuality) });
 
     auto imageBitmap = create(WTFMove(bitmapData));
 
     promise.resolve(WTFMove(imageBitmap));
 }
