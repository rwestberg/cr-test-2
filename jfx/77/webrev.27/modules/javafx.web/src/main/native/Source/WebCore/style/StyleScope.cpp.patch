diff a/modules/javafx.web/src/main/native/Source/WebCore/style/StyleScope.cpp b/modules/javafx.web/src/main/native/Source/WebCore/style/StyleScope.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/style/StyleScope.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/style/StyleScope.cpp
@@ -52,11 +52,10 @@
 #include "UserStyleSheet.h"
 #include <wtf/SetForScope.h>
 
 namespace WebCore {
 
-using namespace ContentExtensions;
 using namespace HTMLNames;
 
 namespace Style {
 
 Scope::Scope(Document& document)
@@ -95,11 +94,11 @@
         return m_document.userAgentShadowTreeStyleResolver();
 
     if (!m_resolver) {
         SetForScope<bool> isUpdatingStyleResolver { m_isUpdatingStyleResolver, true };
 
-        m_resolver = std::make_unique<StyleResolver>(m_document);
+        m_resolver = makeUnique<StyleResolver>(m_document);
 
         if (!m_shadowRoot) {
             m_document.fontSelector().buildStarted();
             m_resolver->ruleSets().initializeUserStyle();
         } else {
@@ -327,11 +326,11 @@
                 continue;
             // We don't support linking to embedded CSS stylesheets, see <https://bugs.webkit.org/show_bug.cgi?id=49281> for discussion.
             sheet = downcast<ProcessingInstruction>(*node).sheet();
         } else if (is<HTMLLinkElement>(*node) || is<HTMLStyleElement>(*node) || is<SVGStyleElement>(*node)) {
             Element& element = downcast<Element>(*node);
-            AtomicString title = element.isInShadowTree() ? nullAtom() : element.attributeWithoutSynchronization(titleAttr);
+            AtomString title = element.isInShadowTree() ? nullAtom() : element.attributeWithoutSynchronization(titleAttr);
             bool enabledViaScript = false;
             if (is<HTMLLinkElement>(element)) {
                 // <LINK> element
                 HTMLLinkElement& linkElement = downcast<HTMLLinkElement>(element);
                 if (linkElement.isDisabled())
@@ -562,11 +561,11 @@
 }
 
 bool Scope::activeStyleSheetsContains(const CSSStyleSheet* sheet) const
 {
     if (!m_weakCopyOfActiveStyleSheetListForFastLookup) {
-        m_weakCopyOfActiveStyleSheetListForFastLookup = std::make_unique<HashSet<const CSSStyleSheet*>>();
+        m_weakCopyOfActiveStyleSheetListForFastLookup = makeUnique<HashSet<const CSSStyleSheet*>>();
         for (auto& activeStyleSheet : m_activeStyleSheets)
             m_weakCopyOfActiveStyleSheetListForFastLookup->add(activeStyleSheet.get());
     }
     return m_weakCopyOfActiveStyleSheetListForFastLookup->contains(sheet);
 }
