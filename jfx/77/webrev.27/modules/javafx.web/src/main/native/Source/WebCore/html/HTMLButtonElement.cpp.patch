diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLButtonElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLButtonElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLButtonElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLButtonElement.cpp
@@ -53,33 +53,38 @@
 Ref<HTMLButtonElement> HTMLButtonElement::create(const QualifiedName& tagName, Document& document, HTMLFormElement* form)
 {
     return adoptRef(*new HTMLButtonElement(tagName, document, form));
 }
 
-void HTMLButtonElement::setType(const AtomicString& type)
+void HTMLButtonElement::setType(const AtomString& type)
 {
     setAttributeWithoutSynchronization(typeAttr, type);
 }
 
 RenderPtr<RenderElement> HTMLButtonElement::createElementRenderer(RenderStyle&& style, const RenderTreePosition&)
 {
     return createRenderer<RenderButton>(*this, WTFMove(style));
 }
 
-const AtomicString& HTMLButtonElement::formControlType() const
+int HTMLButtonElement::defaultTabIndex() const
+{
+    return 0;
+}
+
+const AtomString& HTMLButtonElement::formControlType() const
 {
     switch (m_type) {
         case SUBMIT: {
-            static NeverDestroyed<const AtomicString> submit("submit", AtomicString::ConstructFromLiteral);
+            static NeverDestroyed<const AtomString> submit("submit", AtomString::ConstructFromLiteral);
             return submit;
         }
         case BUTTON: {
-            static NeverDestroyed<const AtomicString> button("button", AtomicString::ConstructFromLiteral);
+            static NeverDestroyed<const AtomString> button("button", AtomString::ConstructFromLiteral);
             return button;
         }
         case RESET: {
-            static NeverDestroyed<const AtomicString> reset("reset", AtomicString::ConstructFromLiteral);
+            static NeverDestroyed<const AtomString> reset("reset", AtomString::ConstructFromLiteral);
             return reset;
         }
     }
 
     ASSERT_NOT_REACHED();
@@ -95,11 +100,11 @@
     }
 
     return HTMLFormControlElement::isPresentationAttribute(name);
 }
 
-void HTMLButtonElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLButtonElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == typeAttr) {
         Type oldType = m_type;
         if (equalLettersIgnoringASCIICase(value, "reset"))
             m_type = RESET;
@@ -216,11 +221,11 @@
 bool HTMLButtonElement::isURLAttribute(const Attribute& attribute) const
 {
     return attribute.name() == formactionAttr || HTMLFormControlElement::isURLAttribute(attribute);
 }
 
-const AtomicString& HTMLButtonElement::value() const
+const AtomString& HTMLButtonElement::value() const
 {
     return attributeWithoutSynchronization(valueAttr);
 }
 
 bool HTMLButtonElement::computeWillValidate() const
