diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFEImageElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFEImageElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFEImageElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFEImageElement.cpp
@@ -42,11 +42,15 @@
     : SVGFilterPrimitiveStandardAttributes(tagName, document)
     , SVGExternalResourcesRequired(this)
     , SVGURIReference(this)
 {
     ASSERT(hasTagName(SVGNames::feImageTag));
-    registerAttributes();
+
+    static std::once_flag onceFlag;
+    std::call_once(onceFlag, [] {
+        PropertyRegistry::registerProperty<SVGNames::preserveAspectRatioAttr, &SVGFEImageElement::m_preserveAspectRatio>();
+    });
 }
 
 Ref<SVGFEImageElement> SVGFEImageElement::create(const QualifiedName& tagName, Document& document)
 {
     return adoptRef(*new SVGFEImageElement(tagName, document));
@@ -109,24 +113,16 @@
     }
 
     invalidate();
 }
 
-void SVGFEImageElement::registerAttributes()
-{
-    auto& registry = attributeRegistry();
-    if (!registry.isEmpty())
-        return;
-    registry.registerAttribute<SVGNames::preserveAspectRatioAttr, &SVGFEImageElement::m_preserveAspectRatio>();
-}
-
-void SVGFEImageElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void SVGFEImageElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == SVGNames::preserveAspectRatioAttr) {
         SVGPreserveAspectRatioValue preserveAspectRatio;
         preserveAspectRatio.parse(value);
-        m_preserveAspectRatio.setValue(preserveAspectRatio);
+        m_preserveAspectRatio->setBaseValInternal(preserveAspectRatio);
         return;
     }
 
     SVGFilterPrimitiveStandardAttributes::parseAttribute(name, value);
     SVGURIReference::parseAttribute(name, value);
@@ -183,14 +179,19 @@
         return;
 
     RenderSVGResource::markForLayoutAndParentResourceInvalidation(*parentRenderer);
 }
 
-RefPtr<FilterEffect> SVGFEImageElement::build(SVGFilterBuilder*, Filter& filter)
+RefPtr<FilterEffect> SVGFEImageElement::build(SVGFilterBuilder*, Filter& filter) const
 {
     if (m_cachedImage)
         return FEImage::createWithImage(filter, m_cachedImage->imageForRenderer(renderer()), preserveAspectRatio());
+
+    auto target = SVGURIReference::targetElementFromIRIString(href(), treeScope());
+    if (isDescendantOrShadowDescendantOf(target.element.get()))
+        return nullptr;
+
     return FEImage::createWithIRIReference(filter, treeScope(), href(), preserveAspectRatio());
 }
 
 void SVGFEImageElement::addSubresourceAttributeURLs(ListHashSet<URL>& urls) const
 {
