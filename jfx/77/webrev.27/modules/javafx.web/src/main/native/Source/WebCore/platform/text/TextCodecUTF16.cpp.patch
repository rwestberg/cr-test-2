diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/text/TextCodecUTF16.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/text/TextCodecUTF16.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/text/TextCodecUTF16.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/text/TextCodecUTF16.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2004-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2004-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -25,11 +25,10 @@
 
 #include "config.h"
 #include "TextCodecUTF16.h"
 
 #include <wtf/text/CString.h>
-#include <wtf/text/StringBuffer.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 inline TextCodecUTF16::TextCodecUTF16(bool littleEndian)
@@ -53,14 +52,14 @@
 }
 
 void TextCodecUTF16::registerCodecs(TextCodecRegistrar registrar)
 {
     registrar("UTF-16LE", [] {
-        return std::make_unique<TextCodecUTF16>(true);
+        return makeUnique<TextCodecUTF16>(true);
     });
     registrar("UTF-16BE", [] {
-        return std::make_unique<TextCodecUTF16>(false);
+        return makeUnique<TextCodecUTF16>(false);
     });
 }
 
 String TextCodecUTF16::decode(const char* bytes, size_t length, bool, bool, bool&)
 {
@@ -69,35 +68,36 @@
 
     // FIXME: This should generate an error if there is an unpaired surrogate.
 
     const unsigned char* p = reinterpret_cast<const unsigned char*>(bytes);
     size_t numBytes = length + m_haveBufferedByte;
-    size_t numChars = numBytes / 2;
+    size_t numCodeUnits = numBytes / 2;
+    RELEASE_ASSERT(numCodeUnits <= std::numeric_limits<unsigned>::max());
 
-    StringBuffer<UChar> buffer(numChars);
-    UChar* q = buffer.characters();
+    UChar* q;
+    auto result = String::createUninitialized(numCodeUnits, q);
 
     if (m_haveBufferedByte) {
         UChar c;
         if (m_littleEndian)
             c = m_bufferedByte | (p[0] << 8);
         else
             c = (m_bufferedByte << 8) | p[0];
         *q++ = c;
         m_haveBufferedByte = false;
         p += 1;
-        numChars -= 1;
+        numCodeUnits -= 1;
     }
 
     if (m_littleEndian) {
-        for (size_t i = 0; i < numChars; ++i) {
+        for (size_t i = 0; i < numCodeUnits; ++i) {
             UChar c = p[0] | (p[1] << 8);
             p += 2;
             *q++ = c;
         }
     } else {
-        for (size_t i = 0; i < numChars; ++i) {
+        for (size_t i = 0; i < numCodeUnits; ++i) {
             UChar c = (p[0] << 8) | p[1];
             p += 2;
             *q++ = c;
         }
     }
@@ -106,13 +106,11 @@
         ASSERT(!m_haveBufferedByte);
         m_haveBufferedByte = true;
         m_bufferedByte = p[0];
     }
 
-    buffer.shrink(q - buffer.characters());
-
-    return String::adopt(WTFMove(buffer));
+    return result;
 }
 
 Vector<uint8_t> TextCodecUTF16::encode(StringView string, UnencodableHandling)
 {
     Vector<uint8_t> result(WTF::checkedProduct<size_t>(string.length(), 2).unsafeGet());
