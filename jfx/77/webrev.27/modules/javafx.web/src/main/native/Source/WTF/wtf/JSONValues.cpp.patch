diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/JSONValues.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/JSONValues.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/JSONValues.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/JSONValues.cpp
@@ -483,15 +483,13 @@
             continue;
         }
         // We could encode characters >= 127 as UTF-8 instead of \u escape sequences.
         // We could handle surrogates here if callers wanted that; for now we just
         // write them out as a \u sequence, so a surrogate pair appears as two of them.
-        builder.appendLiteral("\\u");
-        builder.append(upperNibbleToASCIIHexDigit(codeUnit >> 8));
-        builder.append(lowerNibbleToASCIIHexDigit(codeUnit >> 8));
-        builder.append(upperNibbleToASCIIHexDigit(codeUnit));
-        builder.append(lowerNibbleToASCIIHexDigit(codeUnit));
+        builder.append("\\u",
+            upperNibbleToASCIIHexDigit(codeUnit >> 8), lowerNibbleToASCIIHexDigit(codeUnit >> 8),
+            upperNibbleToASCIIHexDigit(codeUnit), lowerNibbleToASCIIHexDigit(codeUnit));
     }
     builder.append('"');
 }
 
 } // anonymous namespace
@@ -678,11 +676,11 @@
     case Type::Double:
     case Type::Integer: {
         if (!std::isfinite(m_value.number))
             output.appendLiteral("null");
         else
-            output.appendECMAScriptNumber(m_value.number);
+            output.appendNumber(m_value.number);
         break;
     }
     default:
         ASSERT_NOT_REACHED();
     }
