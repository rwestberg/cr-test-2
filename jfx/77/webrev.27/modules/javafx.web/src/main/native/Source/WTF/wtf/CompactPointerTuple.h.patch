diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/CompactPointerTuple.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/CompactPointerTuple.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/CompactPointerTuple.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/CompactPointerTuple.h
@@ -33,15 +33,15 @@
 // The goal of this class is folding a pointer and 1 byte value into 8 bytes in both 32bit and 64bit architectures.
 // 32bit architecture just has a pair of byte and pointer, which should be 8 bytes.
 // In 64bit, we use the upper 5 bits and lower 3 bits (zero due to alignment) since these bits are safe to use even
 // with 5-level page tables where the effective pointer width is 57bits.
 template<typename PointerType, typename Type>
-class CompactPointerTuple {
+class CompactPointerTuple final {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     static_assert(sizeof(Type) == 1, "");
     static_assert(std::is_pointer<PointerType>::value, "");
-    static_assert(alignof(typename std::remove_pointer<PointerType>::type) >= alignof(void*), "");
     static_assert(std::is_integral<Type>::value || std::is_enum<Type>::value, "");
 
     CompactPointerTuple() = default;
 
 #if CPU(ADDRESS64)
@@ -68,10 +68,11 @@
     }
 
     PointerType pointer() const { return bitwise_cast<PointerType>(m_data & pointerMask); }
     void setPointer(PointerType pointer)
     {
+        static_assert(alignof(typename std::remove_pointer<PointerType>::type) >= alignof(void*), "");
         ASSERT((bitwise_cast<uint64_t>(pointer) & 0b111) == 0x0);
         m_data = CompactPointerTuple(pointer, type()).m_data;
     }
 
     Type type() const { return static_cast<Type>(decodeType(m_data)); }
