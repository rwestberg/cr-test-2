diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/beacon/NavigatorBeacon.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/beacon/NavigatorBeacon.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/beacon/NavigatorBeacon.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/beacon/NavigatorBeacon.cpp
@@ -50,11 +50,11 @@
 
 NavigatorBeacon* NavigatorBeacon::from(Navigator& navigator)
 {
     auto* supplement = static_cast<NavigatorBeacon*>(Supplement<Navigator>::from(&navigator, supplementName()));
     if (!supplement) {
-        auto newSupplement = std::make_unique<NavigatorBeacon>(navigator);
+        auto newSupplement = makeUnique<NavigatorBeacon>(navigator);
         supplement = newSupplement.get();
         provideTo(&navigator, supplementName(), WTFMove(newSupplement));
     }
     return supplement;
 }
@@ -119,20 +119,25 @@
         return true;
     }
 
     ResourceRequest request(parsedUrl);
     request.setHTTPMethod("POST"_s);
+    request.setPriority(ResourceLoadPriority::VeryLow);
 
-    FetchOptions options;
+    ResourceLoaderOptions options;
     options.credentials = FetchOptions::Credentials::Include;
     options.cache = FetchOptions::Cache::NoCache;
     options.keepAlive = true;
+    options.sendLoadCallbacks = SendCallbackPolicy::SendCallbacks;
+
     if (body) {
         options.mode = FetchOptions::Mode::Cors;
         String mimeType;
-        auto fetchBody = FetchBody::extract(document, WTFMove(body.value()), mimeType);
-
+        auto result = FetchBody::extract(WTFMove(body.value()), mimeType);
+        if (result.hasException())
+            return result.releaseException();
+        auto fetchBody = result.releaseReturnValue();
         if (fetchBody.hasReadableStream())
             return Exception { TypeError, "Beacons cannot send ReadableStream body"_s };
 
         request.setHTTPBody(fetchBody.bodyAsFormData(document));
         if (!mimeType.isEmpty()) {
