diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGViewSpec.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGViewSpec.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGViewSpec.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGViewSpec.h
@@ -1,8 +1,8 @@
 /*
  * Copyright (C) 2007 Rob Buis <buis@kde.org>
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -18,15 +18,13 @@
  * Boston, MA 02110-1301, USA.
  */
 
 #pragma once
 
-#include "SVGAnimatedPreserveAspectRatio.h"
-#include "SVGAnimatedRect.h"
 #include "SVGFitToViewBox.h"
-#include "SVGTransformListValues.h"
 #include "SVGZoomAndPan.h"
+#include <wtf/WeakPtr.h>
 
 namespace WebCore {
 
 class SVGElement;
 class SVGTransformList;
@@ -43,27 +41,21 @@
     void resetContextElement() { m_contextElement = nullptr; }
 
     SVGElement* viewTarget() const;
     const String& viewTargetString() const { return m_viewTargetString; }
 
-    String transformString() const { return m_transform.toString(); }
-    RefPtr<SVGTransformList> transform();
-    SVGTransformListValues transformValue() const { return m_transform.value(); }
+    String transformString() const { return m_transform->valueAsString(); }
+    Ref<SVGTransformList>& transform() { return m_transform; }
 
     const WeakPtr<SVGElement>& contextElementConcurrently() const { return m_contextElement; }
 
 private:
     explicit SVGViewSpec(SVGElement&);
 
-    using AttributeOwnerProxy = SVGAttributeOwnerProxyImpl<SVGViewSpec, SVGFitToViewBox, SVGZoomAndPan>;
-    static void registerAttributes();
-
-    static AttributeOwnerProxy::AttributeRegistry& attributeRegistry() { return AttributeOwnerProxy::attributeRegistry(); }
-    static bool isKnownAttribute(const QualifiedName& attributeName) { return AttributeOwnerProxy::isKnownAttribute(attributeName); }
+    using PropertyRegistry = SVGPropertyOwnerRegistry<SVGViewSpec, SVGFitToViewBox>;
 
     WeakPtr<SVGElement> m_contextElement;
     String m_viewTargetString;
-    AttributeOwnerProxy m_attributeOwnerProxy;
-    SVGAnimatedTransformListAttribute m_transform;
+    Ref<SVGTransformList> m_transform;
 };
 
 } // namespace WebCore
