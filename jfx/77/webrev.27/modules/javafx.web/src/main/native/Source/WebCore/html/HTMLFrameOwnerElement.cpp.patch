diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFrameOwnerElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFrameOwnerElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFrameOwnerElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFrameOwnerElement.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2006, 2007, 2009 Apple Inc. All rights reserved.
+ * Copyright (C) 2006-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -23,10 +23,11 @@
 
 #include "DOMWindow.h"
 #include "Frame.h"
 #include "FrameLoader.h"
 #include "RenderWidget.h"
+#include "ScriptController.h"
 #include "ShadowRoot.h"
 #include "SVGDocument.h"
 #include "StyleTreeResolver.h"
 #include <wtf/IsoMallocInlines.h>
 #include <wtf/Ref.h>
@@ -35,12 +36,10 @@
 
 WTF_MAKE_ISO_ALLOCATED_IMPL(HTMLFrameOwnerElement);
 
 HTMLFrameOwnerElement::HTMLFrameOwnerElement(const QualifiedName& tagName, Document& document)
     : HTMLElement(tagName, document)
-    , m_contentFrame(nullptr)
-    , m_sandboxFlags(SandboxNone)
 {
 }
 
 RenderWidget* HTMLFrameOwnerElement::renderWidget() const
 {
@@ -67,20 +66,19 @@
 void HTMLFrameOwnerElement::clearContentFrame()
 {
     if (!m_contentFrame)
         return;
 
-    m_contentFrame = 0;
+    m_contentFrame = nullptr;
 
     for (RefPtr<ContainerNode> node = this; node; node = node->parentOrShadowHostNode())
         node->decrementConnectedSubframeCount();
 }
 
 void HTMLFrameOwnerElement::disconnectContentFrame()
 {
-    if (RefPtr<Frame> frame = contentFrame()) {
-        Ref<Frame> protect(*frame);
+    if (RefPtr<Frame> frame = m_contentFrame) {
         frame->loader().frameDetached();
         frame->disconnectOwnerElement();
     }
 }
 
@@ -128,10 +126,24 @@
         });
     } else
         invalidateStyleAndLayerComposition();
 }
 
+bool HTMLFrameOwnerElement::isProhibitedSelfReference(const URL& completeURL) const
+{
+    // We allow one level of self-reference because some websites depend on that, but we don't allow more than one.
+    bool foundOneSelfReference = false;
+    for (auto* frame = document().frame(); frame; frame = frame->tree().parent()) {
+        if (equalIgnoringFragmentIdentifier(frame->document()->url(), completeURL)) {
+            if (foundOneSelfReference)
+                return true;
+            foundOneSelfReference = true;
+        }
+    }
+    return false;
+}
+
 bool SubframeLoadingDisabler::canLoadFrame(HTMLFrameOwnerElement& owner)
 {
     for (RefPtr<ContainerNode> node = &owner; node; node = node->parentOrShadowHostNode()) {
         if (disabledSubtreeRoots().contains(node.get()))
             return false;
