diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderButton.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderButton.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderButton.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderButton.cpp
@@ -141,10 +141,24 @@
 {
     // Clip to the padding box to at least give content the extra padding space.
     return LayoutRect(additionalOffset.x() + borderLeft(), additionalOffset.y() + borderTop(), width() - borderLeft() - borderRight(), height() - borderTop() - borderBottom());
 }
 
+static int synthesizedBaselineFromContentBox(const RenderBox& box, LineDirectionMode direction)
+{
+    return direction == HorizontalLine ? box.borderTop() + box.paddingTop() + box.contentHeight() : box.borderRight() + box.paddingRight() + box.contentWidth();
+}
+
+int RenderButton::baselinePosition(FontBaseline, bool, LineDirectionMode direction, LinePositionMode) const
+{
+    // We cannot rely on RenderFlexibleBox::baselinePosition() because of flexboxes have some special behavior
+    // regarding baselines that shouldn't apply to buttons.
+    int baseline = firstLineBaseline().valueOr(synthesizedBaselineFromContentBox(*this, direction));
+    int marginAscent = direction == HorizontalLine ? marginTop() : marginRight();
+    return baseline + marginAscent;
+}
+
 #if PLATFORM(IOS_FAMILY)
 void RenderButton::layout()
 {
     RenderFlexibleBox::layout();
 
