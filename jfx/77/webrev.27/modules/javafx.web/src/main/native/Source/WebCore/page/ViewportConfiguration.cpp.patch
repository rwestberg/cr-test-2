diff a/modules/javafx.web/src/main/native/Source/WebCore/page/ViewportConfiguration.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/ViewportConfiguration.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/ViewportConfiguration.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/ViewportConfiguration.cpp
@@ -143,27 +143,19 @@
     return true;
 }
 
 bool ViewportConfiguration::canOverrideConfigurationParameters() const
 {
-    return m_defaultConfiguration == ViewportConfiguration::nativeWebpageParameters() || m_defaultConfiguration == ViewportConfiguration::scalableNativeWebpageParameters();
+    return m_defaultConfiguration == ViewportConfiguration::nativeWebpageParametersWithoutShrinkToFit() || m_defaultConfiguration == ViewportConfiguration::nativeWebpageParametersWithShrinkToFit();
 }
 
 void ViewportConfiguration::updateDefaultConfiguration()
 {
     if (!canOverrideConfigurationParameters())
         return;
 
-    if (m_canIgnoreScalingConstraints) {
-        m_defaultConfiguration = ViewportConfiguration::scalableNativeWebpageParameters();
-        return;
-    }
-
-    if (shouldIgnoreMinimumEffectiveDeviceWidth())
-        m_defaultConfiguration = ViewportConfiguration::nativeWebpageParameters();
-    else
-        m_defaultConfiguration = ViewportConfiguration::scalableNativeWebpageParameters();
+    m_defaultConfiguration = nativeWebpageParameters();
 }
 
 bool ViewportConfiguration::setViewportArguments(const ViewportArguments& viewportArguments)
 {
     if (m_viewportArguments == viewportArguments)
@@ -183,10 +175,11 @@
     if (canIgnoreScalingConstraints == m_canIgnoreScalingConstraints)
         return false;
 
     m_canIgnoreScalingConstraints = canIgnoreScalingConstraints;
     updateDefaultConfiguration();
+    updateMinimumLayoutSize();
     updateConfiguration();
     return true;
 }
 
 IntSize ViewportConfiguration::layoutSize() const
@@ -251,10 +244,22 @@
 
 double ViewportConfiguration::initialScaleFromSize(double width, double height, bool shouldIgnoreScalingConstraints) const
 {
     ASSERT(!constraintsAreAllRelative(m_configuration));
 
+    auto clampToMinimumAndMaximumScales = [&] (double initialScale) {
+        return clampTo<double>(initialScale, shouldIgnoreScalingConstraints ? m_defaultConfiguration.minimumScale : m_configuration.minimumScale, m_configuration.maximumScale);
+    };
+
+    if (layoutSizeIsExplicitlyScaled()) {
+        if (m_configuration.initialScaleIsSet)
+            return clampToMinimumAndMaximumScales(m_configuration.initialScale);
+
+        if (m_configuration.width > 0)
+            return clampToMinimumAndMaximumScales(m_viewLayoutSize.width() / m_configuration.width);
+    }
+
     // If the document has specified its own initial scale, use it regardless.
     // This is guaranteed to be sanity checked already, so no need for MIN/MAX.
     if (m_configuration.initialScaleIsSet && !shouldIgnoreScalingConstraints)
         return m_configuration.initialScale;
 
@@ -266,11 +271,11 @@
 
     // Prevent the initial scale from shrinking to a height smaller than our view's minimum height.
     if (height > 0 && height * initialScale < m_viewLayoutSize.height() && !shouldIgnoreHorizontalScalingConstraints())
         initialScale = m_viewLayoutSize.height() / height;
 
-    return std::min(std::max(initialScale, shouldIgnoreScalingConstraints ? m_defaultConfiguration.minimumScale : m_configuration.minimumScale), m_configuration.maximumScale);
+    return clampToMinimumAndMaximumScales(initialScale);
 }
 
 double ViewportConfiguration::initialScale() const
 {
     return initialScaleFromSize(m_contentSize.width() > 0 ? m_contentSize.width() : layoutWidth(), m_contentSize.height() > 0 ? m_contentSize.height() : layoutHeight(), shouldIgnoreScalingConstraints());
@@ -332,10 +337,18 @@
 {
     return shouldIgnoreScalingConstraints() || m_configuration.allowsUserScaling;
 }
 
 ViewportConfiguration::Parameters ViewportConfiguration::nativeWebpageParameters()
+{
+    if (m_canIgnoreScalingConstraints || !shouldIgnoreMinimumEffectiveDeviceWidth())
+        return ViewportConfiguration::nativeWebpageParametersWithShrinkToFit();
+
+    return ViewportConfiguration::nativeWebpageParametersWithoutShrinkToFit();
+}
+
+ViewportConfiguration::Parameters ViewportConfiguration::nativeWebpageParametersWithoutShrinkToFit()
 {
     Parameters parameters;
     parameters.width = ViewportArguments::ValueDeviceWidth;
     parameters.widthIsSet = true;
     parameters.allowsUserScaling = true;
@@ -346,15 +359,16 @@
     parameters.initialScaleIgnoringLayoutScaleFactor = 1;
     parameters.initialScaleIsSet = true;
     return parameters;
 }
 
-ViewportConfiguration::Parameters ViewportConfiguration::scalableNativeWebpageParameters()
+ViewportConfiguration::Parameters ViewportConfiguration::nativeWebpageParametersWithShrinkToFit()
 {
-    Parameters parameters = ViewportConfiguration::nativeWebpageParameters();
+    Parameters parameters = ViewportConfiguration::nativeWebpageParametersWithoutShrinkToFit();
     parameters.allowsShrinkToFit = true;
     parameters.minimumScale = 0.25;
+    parameters.initialScaleIsSet = false;
     return parameters;
 }
 
 ViewportConfiguration::Parameters ViewportConfiguration::webpageParameters()
 {
@@ -454,10 +468,15 @@
 
     bool viewportArgumentsOverridesInitialScale;
     bool viewportArgumentsOverridesWidth;
     bool viewportArgumentsOverridesHeight;
 
+    auto effectiveLayoutScale = effectiveLayoutSizeScaleFactor();
+
+    if (layoutSizeIsExplicitlyScaled())
+        m_configuration.width /= effectiveLayoutScale;
+
     applyViewportArgument(m_configuration.minimumScale, m_viewportArguments.minZoom, minimumViewportArgumentsScaleFactor, maximumViewportArgumentsScaleFactor);
     applyViewportArgument(m_configuration.maximumScale, m_viewportArguments.maxZoom, m_configuration.minimumScale, maximumViewportArgumentsScaleFactor);
     applyViewportArgument(m_configuration.initialScale, viewportArgumentsOverridesInitialScale, m_viewportArguments.zoom, m_configuration.minimumScale, m_configuration.maximumScale);
 
     double minimumViewportArgumentsDimension = 10;
@@ -482,11 +501,10 @@
     if (canOverrideConfigurationParameters() && !viewportArgumentsOverridesWidth)
         m_configuration.width = m_minimumLayoutSize.width();
 
     m_configuration.avoidsUnsafeArea = m_viewportArguments.viewportFit != ViewportFit::Cover;
     m_configuration.initialScaleIgnoringLayoutScaleFactor = m_configuration.initialScale;
-    float effectiveLayoutScale = effectiveLayoutSizeScaleFactor();
     m_configuration.initialScale *= effectiveLayoutScale;
     m_configuration.minimumScale *= effectiveLayoutScale;
     m_configuration.maximumScale *= effectiveLayoutScale;
 
     LOG_WITH_STREAM(Viewports, stream << "ViewportConfiguration " << this << " updateConfiguration " << *this << " gives initial scale " << initialScale() << " based on contentSize " << m_contentSize << " and layout size " << layoutWidth() << "x" << layoutHeight());
@@ -582,10 +600,36 @@
     if (minimumLayoutSize.width() > 0)
         return std::round(minimumLayoutSize.height() * layoutWidth() / minimumLayoutSize.width());
     return minimumLayoutSize.height();
 }
 
+bool ViewportConfiguration::setMinimumEffectiveDeviceWidth(double width)
+{
+    if (WTF::areEssentiallyEqual(m_minimumEffectiveDeviceWidth, width))
+        return false;
+
+    m_minimumEffectiveDeviceWidth = width;
+
+    if (shouldIgnoreMinimumEffectiveDeviceWidth())
+        return false;
+
+    updateMinimumLayoutSize();
+    updateConfiguration();
+    return true;
+}
+
+bool ViewportConfiguration::setIsKnownToLayOutWiderThanViewport(bool value)
+{
+    if (m_isKnownToLayOutWiderThanViewport == value)
+        return false;
+
+    m_isKnownToLayOutWiderThanViewport = value;
+    updateMinimumLayoutSize();
+    updateConfiguration();
+    return true;
+}
+
 #ifndef NDEBUG
 
 TextStream& operator<<(TextStream& ts, const ViewportConfiguration::Parameters& parameters)
 {
     ts.startGroup();
@@ -645,10 +689,11 @@
     ts.dumpProperty("computed layout size", layoutSize());
     ts.dumpProperty("ignoring horizontal scaling constraints", shouldIgnoreHorizontalScalingConstraints() ? "true" : "false");
     ts.dumpProperty("ignoring vertical scaling constraints", shouldIgnoreVerticalScalingConstraints() ? "true" : "false");
     ts.dumpProperty("avoids unsafe area", avoidsUnsafeArea() ? "true" : "false");
     ts.dumpProperty("minimum effective device width", m_minimumEffectiveDeviceWidth);
+    ts.dumpProperty("known to lay out wider than viewport", m_isKnownToLayOutWiderThanViewport ? "true" : "false");
 
     ts.endGroup();
 
     return ts.release();
 }
