diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimateElementBase.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimateElementBase.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimateElementBase.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimateElementBase.h
@@ -1,9 +1,9 @@
 /*
  * Copyright (C) 2004, 2005 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005, 2006 Rob Buis <buis@kde.org>
- * Copyright (C) 2008 Apple Inc. All rights reserved.
+ * Copyright (C) 2008-2019 Apple Inc. All rights reserved.
  * Copyright (C) Research In Motion Limited 2011. All rights reserved.
  * Copyright (C) 2014 Adobe Systems Incorporated. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
@@ -21,57 +21,51 @@
  * Boston, MA 02110-1301, USA.
  */
 
 #pragma once
 
-#include "SVGAnimatedType.h"
-#include "SVGAnimatedTypeAnimator.h"
 #include "SVGAnimationElement.h"
 #include "SVGNames.h"
 
 namespace WebCore {
 
+class SVGAttributeAnimator;
+
 class SVGAnimateElementBase : public SVGAnimationElement {
     WTF_MAKE_ISO_ALLOCATED(SVGAnimateElementBase);
 public:
-    virtual ~SVGAnimateElementBase();
-
-    AnimatedPropertyType determineAnimatedPropertyType(SVGElement&) const;
+    bool isDiscreteAnimator() const;
 
 protected:
     SVGAnimateElementBase(const QualifiedName&, Document&);
 
-    void resetAnimatedType() override;
-    void clearAnimatedType(SVGElement* targetElement) override;
+    SVGAttributeAnimator* animator() const;
+    SVGAttributeAnimator* animatorIfExists() const { return m_animator.get(); }
 
-    bool calculateToAtEndOfDurationValue(const String& toAtEndOfDurationString) override;
-    bool calculateFromAndToValues(const String& fromString, const String& toString) override;
-    bool calculateFromAndByValues(const String& fromString, const String& byString) override;
-    void calculateAnimatedValue(float percentage, unsigned repeatCount, SVGSMILElement* resultElement) override;
-    void applyResultsToTarget() override;
-    float calculateDistance(const String& fromString, const String& toString) override;
-    bool isAdditive() const override;
+    bool hasValidAttributeType() const override;
 
     void setTargetElement(SVGElement*) override;
     void setAttributeName(const QualifiedName&) override;
-    void resetAnimatedPropertyType() override;
+    void resetAnimation() override;
 
-    AnimatedPropertyType m_animatedPropertyType;
+    bool calculateFromAndToValues(const String& fromString, const String& toString) override;
+    bool calculateFromAndByValues(const String& fromString, const String& byString) override;
+    bool calculateToAtEndOfDurationValue(const String& toAtEndOfDurationString) override;
 
-private:
-    SVGAnimatedTypeAnimator* ensureAnimator();
-    bool animatedPropertyTypeSupportsAddition() const;
+    void resetAnimatedType() override;
+    void calculateAnimatedValue(float progress, unsigned repeatCount, SVGSMILElement* resultElement) override;
+    void applyResultsToTarget() override;
+    void clearAnimatedType(SVGElement* targetElement) override;
+    Optional<float> calculateDistance(const String& fromString, const String& toString) override;
 
-    bool hasValidAttributeType() override;
+    virtual String animateRangeString(const String& string) const { return string; }
 
-    std::unique_ptr<SVGAnimatedType> m_fromType;
-    std::unique_ptr<SVGAnimatedType> m_toType;
-    std::unique_ptr<SVGAnimatedType> m_toAtEndOfDurationType;
-    std::unique_ptr<SVGAnimatedType> m_animatedType;
+private:
+    bool hasInvalidCSSAttributeType() const;
 
-    SVGElementAnimatedPropertyList m_animatedProperties;
-    std::unique_ptr<SVGAnimatedTypeAnimator> m_animator;
+    mutable RefPtr<SVGAttributeAnimator> m_animator;
+    mutable Optional<bool> m_hasInvalidCSSAttributeType;
 };
 
 } // namespace WebCore
 
 SPECIALIZE_TYPE_TRAITS_BEGIN(WebCore::SVGAnimateElementBase)
