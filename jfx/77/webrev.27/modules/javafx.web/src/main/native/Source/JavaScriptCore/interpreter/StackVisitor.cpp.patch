diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/StackVisitor.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/StackVisitor.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/StackVisitor.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/StackVisitor.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -24,17 +24,19 @@
  */
 
 #include "config.h"
 #include "StackVisitor.h"
 
+#include "CallFrameInlines.h"
 #include "ClonedArguments.h"
 #include "DebuggerPrimitives.h"
 #include "InlineCallFrame.h"
 #include "Interpreter.h"
 #include "JSCInlines.h"
 #include "WasmCallee.h"
 #include "WasmIndexOrName.h"
+#include "WebAssemblyFunction.h"
 #include <wtf/text/StringBuilder.h>
 
 namespace JSC {
 
 StackVisitor::StackVisitor(CallFrame* startFrame, VM* vm)
@@ -94,12 +96,12 @@
 void StackVisitor::unwindToMachineCodeBlockFrame()
 {
 #if ENABLE(DFG_JIT)
     if (m_frame.isInlinedFrame()) {
         CodeOrigin codeOrigin = m_frame.inlineCallFrame()->directCaller;
-        while (codeOrigin.inlineCallFrame)
-            codeOrigin = codeOrigin.inlineCallFrame->directCaller;
+        while (codeOrigin.inlineCallFrame())
+            codeOrigin = codeOrigin.inlineCallFrame()->directCaller;
         readNonInlinedFrame(m_frame.callFrame(), &codeOrigin);
     }
 #endif
 }
 
@@ -142,11 +144,11 @@
         m_frame.setToEnd();
         return;
     }
 
     CodeOrigin codeOrigin = codeBlock->codeOrigin(index);
-    if (!codeOrigin.inlineCallFrame) {
+    if (!codeOrigin.inlineCallFrame()) {
         readNonInlinedFrame(callFrame, &codeOrigin);
         return;
     }
 
     readInlinedFrame(callFrame, &codeOrigin);
@@ -175,11 +177,11 @@
             m_frame.m_wasmFunctionIndexOrName = bits.asWasmCallee()->indexOrName();
 #endif
     } else {
         m_frame.m_codeBlock = callFrame->codeBlock();
         m_frame.m_bytecodeOffset = !m_frame.codeBlock() ? 0
-            : codeOrigin ? codeOrigin->bytecodeIndex
+            : codeOrigin ? codeOrigin->bytecodeIndex()
             : callFrame->bytecodeOffset();
 
     }
 
 #if ENABLE(DFG_JIT)
@@ -188,11 +190,11 @@
 }
 
 #if ENABLE(DFG_JIT)
 static int inlinedFrameOffset(CodeOrigin* codeOrigin)
 {
-    InlineCallFrame* inlineCallFrame = codeOrigin->inlineCallFrame;
+    InlineCallFrame* inlineCallFrame = codeOrigin->inlineCallFrame();
     int frameOffset = inlineCallFrame ? inlineCallFrame->stackOffset : 0;
     return frameOffset;
 }
 
 void StackVisitor::readInlinedFrame(CallFrame* callFrame, CodeOrigin* codeOrigin)
@@ -201,20 +203,20 @@
     m_frame.m_isWasmFrame = false;
 
     int frameOffset = inlinedFrameOffset(codeOrigin);
     bool isInlined = !!frameOffset;
     if (isInlined) {
-        InlineCallFrame* inlineCallFrame = codeOrigin->inlineCallFrame;
+        InlineCallFrame* inlineCallFrame = codeOrigin->inlineCallFrame();
 
         m_frame.m_callFrame = callFrame;
         m_frame.m_inlineCallFrame = inlineCallFrame;
         if (inlineCallFrame->argumentCountRegister.isValid())
             m_frame.m_argumentCountIncludingThis = callFrame->r(inlineCallFrame->argumentCountRegister.offset()).unboxedInt32();
         else
             m_frame.m_argumentCountIncludingThis = inlineCallFrame->argumentCountIncludingThis;
         m_frame.m_codeBlock = inlineCallFrame->baselineCodeBlock.get();
-        m_frame.m_bytecodeOffset = codeOrigin->bytecodeIndex;
+        m_frame.m_bytecodeOffset = codeOrigin->bytecodeIndex();
 
         JSFunction* callee = inlineCallFrame->calleeForCallFrame(callFrame);
         m_frame.m_callee = callee;
         ASSERT(!!m_frame.callee().rawPtr());
 
@@ -250,35 +252,41 @@
     }
     RELEASE_ASSERT_NOT_REACHED();
     return CodeType::Global;
 }
 
-const RegisterAtOffsetList* StackVisitor::Frame::calleeSaveRegisters()
+#if ENABLE(ASSEMBLER)
+Optional<RegisterAtOffsetList> StackVisitor::Frame::calleeSaveRegistersForUnwinding()
 {
-    if (isInlinedFrame())
-        return nullptr;
+    if (!NUMBER_OF_CALLEE_SAVES_REGISTERS)
+        return WTF::nullopt;
 
-#if !ENABLE(C_LOOP) && NUMBER_OF_CALLEE_SAVES_REGISTERS > 0
+    if (isInlinedFrame())
+        return WTF::nullopt;
 
 #if ENABLE(WEBASSEMBLY)
     if (isWasmFrame()) {
         if (callee().isCell()) {
             RELEASE_ASSERT(isWebAssemblyToJSCallee(callee().asCell()));
-            return nullptr;
+            return WTF::nullopt;
         }
         Wasm::Callee* wasmCallee = callee().asWasmCallee();
-        return wasmCallee->calleeSaveRegisters();
+        return *wasmCallee->calleeSaveRegisters();
+    }
+
+    if (callee().isCell()) {
+        if (auto* jsToWasmICCallee = jsDynamicCast<JSToWasmICCallee*>(callee().asCell()->vm(), callee().asCell()))
+            return jsToWasmICCallee->function()->usedCalleeSaveRegisters();
     }
 #endif // ENABLE(WEBASSEMBLY)
 
     if (CodeBlock* codeBlock = this->codeBlock())
-        return codeBlock->calleeSaveRegisters();
-
-#endif // !ENABLE(C_LOOP) && NUMBER_OF_CALLEE_SAVES_REGISTERS > 0
+        return *codeBlock->calleeSaveRegisters();
 
-    return nullptr;
+    return WTF::nullopt;
 }
+#endif // ENABLE(ASSEMBLER)
 
 String StackVisitor::Frame::functionName() const
 {
     String traceLine;
 
@@ -404,11 +412,11 @@
     retrieveExpressionInfo(divot, unusedStartOffset, unusedEndOffset, divotLine, divotColumn);
 
     line = divotLine + codeBlock->ownerExecutable()->firstLine();
     column = divotColumn + (divotLine ? 1 : codeBlock->firstLineColumnOffset());
 
-    if (Optional<int> overrideLineNumber = codeBlock->ownerExecutable()->overrideLineNumber(*codeBlock->vm()))
+    if (Optional<int> overrideLineNumber = codeBlock->ownerExecutable()->overrideLineNumber(codeBlock->vm()))
         line = overrideLineNumber.value();
 }
 
 void StackVisitor::Frame::retrieveExpressionInfo(int& divot, int& startOffset, int& endOffset, unsigned& line, unsigned& column) const
 {
@@ -482,12 +490,12 @@
                 out.print(indent, "hasCodeOrigins: ", codeBlock->hasCodeOrigins(), "\n");
                 if (codeBlock->hasCodeOrigins()) {
                     CallSiteIndex callSiteIndex = callFrame->callSiteIndex();
                     out.print(indent, "callSiteIndex: ", callSiteIndex.bits(), " of ", codeBlock->codeOrigins().size(), "\n");
 
-                    JITCode::JITType jitType = codeBlock->jitType();
-                    if (jitType != JITCode::FTLJIT) {
+                    JITType jitType = codeBlock->jitType();
+                    if (jitType != JITType::FTLJIT) {
                         JITCode* jitCode = codeBlock->jitCode().get();
                         out.print(indent, "jitCode: ", RawPointer(jitCode),
                             " start ", RawPointer(jitCode->start()),
                             " end ", RawPointer(jitCode->end()), "\n");
                     }
