diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapValue.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapValue.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapValue.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapValue.cpp
@@ -23,10 +23,11 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #include "config.h"
 #include "B3StackmapValue.h"
+#include "B3ValueInlines.h"
 
 #if ENABLE(B3_JIT)
 
 namespace JSC { namespace B3 {
 
@@ -35,18 +36,18 @@
 }
 
 void StackmapValue::append(Value* value, const ValueRep& rep)
 {
     if (rep == ValueRep::ColdAny) {
-        children().append(value);
+        childrenVector().append(value);
         return;
     }
 
     while (m_reps.size() < numChildren())
         m_reps.append(ValueRep::ColdAny);
 
-    children().append(value);
+    childrenVector().append(value);
     m_reps.append(rep);
 }
 
 void StackmapValue::appendSomeRegister(Value* value)
 {
@@ -87,11 +88,11 @@
         comma, "generator = ", RawPointer(m_generator.get()), ", earlyClobbered = ", m_earlyClobbered,
         ", lateClobbered = ", m_lateClobbered, ", usedRegisters = ", m_usedRegisters);
 }
 
 StackmapValue::StackmapValue(CheckedOpcodeTag, Kind kind, Type type, Origin origin)
-    : Value(CheckedOpcode, kind, type, origin)
+    : Value(CheckedOpcode, kind, type, VarArgs, origin)
 {
     ASSERT(accepts(kind));
 }
 
 } } // namespace JSC::B3
