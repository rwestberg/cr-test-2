diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBDatabaseIdentifier.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBDatabaseIdentifier.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBDatabaseIdentifier.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBDatabaseIdentifier.h
@@ -25,10 +25,11 @@
 
 #pragma once
 
 #if ENABLE(INDEXED_DATABASE)
 
+#include "ClientOrigin.h"
 #include "SecurityOriginData.h"
 #include <pal/SessionID.h>
 #include <wtf/text/StringHash.h>
 #include <wtf/text/WTFString.h>
 
@@ -42,11 +43,11 @@
     IDBDatabaseIdentifier(WTF::HashTableDeletedValueType)
         : m_databaseName(WTF::HashTableDeletedValue)
     {
     }
 
-    WEBCORE_EXPORT IDBDatabaseIdentifier(const String& databaseName, const PAL::SessionID&, SecurityOriginData&& openingOrigin, SecurityOriginData&& mainFrameOrigin);
+    WEBCORE_EXPORT IDBDatabaseIdentifier(const String& databaseName, SecurityOriginData&& openingOrigin, SecurityOriginData&& mainFrameOrigin);
 
     IDBDatabaseIdentifier isolatedCopy() const;
 
     bool isHashTableDeletedValue() const
     {
@@ -54,17 +55,13 @@
     }
 
     unsigned hash() const
     {
         unsigned nameHash = StringHash::hash(m_databaseName);
-        unsigned sessionIDHash = WTF::SessionIDHash::hash(m_sessionID);
-        unsigned openingProtocolHash = StringHash::hash(m_openingOrigin.protocol);
-        unsigned openingHostHash = StringHash::hash(m_openingOrigin.host);
-        unsigned mainFrameProtocolHash = StringHash::hash(m_mainFrameOrigin.protocol);
-        unsigned mainFrameHostHash = StringHash::hash(m_mainFrameOrigin.host);
+        unsigned originHash = m_origin.hash();
 
-        unsigned hashCodes[8] = { nameHash, sessionIDHash, openingProtocolHash, openingHostHash, m_openingOrigin.port.valueOr(0), mainFrameProtocolHash, mainFrameHostHash, m_mainFrameOrigin.port.valueOr(0) };
+        unsigned hashCodes[2] = { nameHash, originHash };
         return StringHasher::hashMemory<sizeof(hashCodes)>(hashCodes);
     }
 
     bool isValid() const
     {
@@ -77,38 +74,31 @@
         return m_databaseName.isNull();
     }
 
     bool operator==(const IDBDatabaseIdentifier& other) const
     {
-        return other.m_databaseName == m_databaseName
-            && other.m_openingOrigin == m_openingOrigin
-            && other.m_mainFrameOrigin == m_mainFrameOrigin;
+        return other.m_databaseName == m_databaseName && other.m_origin == m_origin;
     }
 
     const String& databaseName() const { return m_databaseName; }
-    const PAL::SessionID& sessionID() const { return m_sessionID; }
+    const ClientOrigin& origin() const { return m_origin; }
 
-    String databaseDirectoryRelativeToRoot(const String& rootDirectory) const;
-    static String databaseDirectoryRelativeToRoot(const SecurityOriginData& topLevelOrigin, const SecurityOriginData& openingOrigin, const String& rootDirectory);
+    String databaseDirectoryRelativeToRoot(const String& rootDirectory, const String& versionString="v1") const;
+    static String databaseDirectoryRelativeToRoot(const SecurityOriginData& topLevelOrigin, const SecurityOriginData& openingOrigin, const String& rootDirectory, const String& versionString);
 
     template<class Encoder> void encode(Encoder&) const;
     template<class Decoder> static Optional<IDBDatabaseIdentifier> decode(Decoder&);
 
 #if !LOG_DISABLED
     String debugString() const;
 #endif
 
-    bool isRelatedToOrigin(const SecurityOriginData& other) const
-    {
-        return m_openingOrigin == other || m_mainFrameOrigin == other;
-    }
+    bool isRelatedToOrigin(const SecurityOriginData& other) const { return m_origin.isRelated(other); }
 
 private:
     String m_databaseName;
-    PAL::SessionID m_sessionID;
-    SecurityOriginData m_openingOrigin;
-    SecurityOriginData m_mainFrameOrigin;
+    ClientOrigin m_origin;
 };
 
 struct IDBDatabaseIdentifierHash {
     static unsigned hash(const IDBDatabaseIdentifier& a) { return a.hash(); }
     static bool equal(const IDBDatabaseIdentifier& a, const IDBDatabaseIdentifier& b) { return a == b; }
@@ -122,42 +112,30 @@
 };
 
 template<class Encoder>
 void IDBDatabaseIdentifier::encode(Encoder& encoder) const
 {
-    encoder << m_databaseName << m_sessionID << m_openingOrigin << m_mainFrameOrigin;
+    encoder << m_databaseName << m_origin;
 }
 
 template<class Decoder>
 Optional<IDBDatabaseIdentifier> IDBDatabaseIdentifier::decode(Decoder& decoder)
 {
     Optional<String> databaseName;
     decoder >> databaseName;
     if (!databaseName)
         return WTF::nullopt;
 
-    Optional<PAL::SessionID> sessionID;
-    decoder >> sessionID;
-    if (!sessionID)
-        return WTF::nullopt;
-
-    Optional<SecurityOriginData> openingOrigin;
-    decoder >> openingOrigin;
-    if (!openingOrigin)
-        return WTF::nullopt;
-
-    Optional<SecurityOriginData> mainFrameOrigin;
-    decoder >> mainFrameOrigin;
-    if (!mainFrameOrigin)
+    Optional<ClientOrigin> origin;
+    decoder >> origin;
+    if (!origin)
         return WTF::nullopt;
 
     IDBDatabaseIdentifier identifier;
     identifier.m_databaseName = WTFMove(*databaseName); // FIXME: When decoding from IPC, databaseName can be null, and the non-empty constructor asserts that this is not the case.
-    identifier.m_sessionID = WTFMove(*sessionID);
-    identifier.m_openingOrigin = WTFMove(*openingOrigin);
-    identifier.m_mainFrameOrigin = WTFMove(*mainFrameOrigin);
-    return WTFMove(identifier);
+    identifier.m_origin = WTFMove(*origin);
+    return identifier;
 }
 
 } // namespace WebCore
 
 namespace WTF {
