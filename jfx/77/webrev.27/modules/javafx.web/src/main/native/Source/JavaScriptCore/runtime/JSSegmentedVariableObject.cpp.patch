diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSSegmentedVariableObject.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSSegmentedVariableObject.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSSegmentedVariableObject.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSSegmentedVariableObject.cpp
@@ -27,20 +27,20 @@
  */
 
 #include "config.h"
 #include "JSSegmentedVariableObject.h"
 
-#include "HeapSnapshotBuilder.h"
+#include "HeapAnalyzer.h"
 #include "JSCInlines.h"
 
 namespace JSC {
 
 const ClassInfo JSSegmentedVariableObject::s_info = { "SegmentedVariableObject", &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSSegmentedVariableObject) };
 
 ScopeOffset JSSegmentedVariableObject::findVariableIndex(void* variableAddress)
 {
-    ConcurrentJSLocker locker(m_lock);
+    auto locker = holdLock(cellLock());
 
     for (unsigned i = m_variables.size(); i--;) {
         if (&m_variables[i] != variableAddress)
             continue;
         return ScopeOffset(i);
@@ -49,11 +49,11 @@
     return ScopeOffset();
 }
 
 ScopeOffset JSSegmentedVariableObject::addVariables(unsigned numberOfVariablesToAdd, JSValue initialValue)
 {
-    ConcurrentJSLocker locker(m_lock);
+    auto locker = holdLock(cellLock());
 
     size_t oldSize = m_variables.size();
     m_variables.grow(oldSize + numberOfVariablesToAdd);
 
     for (size_t i = numberOfVariablesToAdd; i--;)
@@ -68,19 +68,19 @@
     ASSERT_GC_OBJECT_INHERITS(thisObject, info());
     Base::visitChildren(thisObject, slotVisitor);
 
     // FIXME: We could avoid locking here if SegmentedVector was lock-free. It could be made lock-free
     // relatively easily.
-    auto locker = holdLock(thisObject->m_lock);
+    auto locker = holdLock(thisObject->cellLock());
     for (unsigned i = thisObject->m_variables.size(); i--;)
         slotVisitor.appendHidden(thisObject->m_variables[i]);
 }
 
-void JSSegmentedVariableObject::heapSnapshot(JSCell* cell, HeapSnapshotBuilder& builder)
+void JSSegmentedVariableObject::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
 {
     JSSegmentedVariableObject* thisObject = jsCast<JSSegmentedVariableObject*>(cell);
-    Base::heapSnapshot(cell, builder);
+    Base::analyzeHeap(cell, analyzer);
 
     ConcurrentJSLocker locker(thisObject->symbolTable()->m_lock);
     SymbolTable::Map::iterator end = thisObject->symbolTable()->end(locker);
     for (SymbolTable::Map::iterator it = thisObject->symbolTable()->begin(locker); it != end; ++it) {
         SymbolTableEntry::Fast entry = it->value;
@@ -89,11 +89,11 @@
         if (!thisObject->isValidScopeOffset(offset))
             continue;
 
         JSValue toValue = thisObject->variableAt(offset).get();
         if (toValue && toValue.isCell())
-            builder.appendVariableNameEdge(thisObject, toValue.asCell(), it->key.get());
+            analyzer.analyzeVariableNameEdge(thisObject, toValue.asCell(), it->key.get());
     }
 }
 
 void JSSegmentedVariableObject::destroy(JSCell* cell)
 {
@@ -106,17 +106,22 @@
 {
 }
 
 JSSegmentedVariableObject::~JSSegmentedVariableObject()
 {
-    RELEASE_ASSERT(!m_alreadyDestroyed);
+#ifndef NDEBUG
+    ASSERT(!m_alreadyDestroyed);
     m_alreadyDestroyed = true;
+#endif
 }
 
 void JSSegmentedVariableObject::finishCreation(VM& vm)
 {
     Base::finishCreation(vm);
     setSymbolTable(vm, SymbolTable::create(vm));
+    vm.heap.addFinalizer(this, [] (JSCell* cell) {
+        static_cast<JSSegmentedVariableObject*>(cell)->classInfo()->methodTable.destroy(cell);
+    });
 }
 
 } // namespace JSC
 
