diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/MediaElementAudioSourceNode.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/MediaElementAudioSourceNode.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/MediaElementAudioSourceNode.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/MediaElementAudioSourceNode.cpp
@@ -30,18 +30,21 @@
 
 #include "AudioContext.h"
 #include "AudioNodeOutput.h"
 #include "Logging.h"
 #include "MediaPlayer.h"
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/Locker.h>
 
 // These are somewhat arbitrary limits, but we need to do some kind of sanity-checking.
 const unsigned minSampleRate = 8000;
 const unsigned maxSampleRate = 192000;
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(MediaElementAudioSourceNode);
+
 Ref<MediaElementAudioSourceNode> MediaElementAudioSourceNode::create(AudioContext& context, HTMLMediaElement& mediaElement)
 {
     return adoptRef(*new MediaElementAudioSourceNode(context, mediaElement));
 }
 
@@ -49,15 +52,15 @@
     : AudioNode(context, context.sampleRate())
     , m_mediaElement(mediaElement)
     , m_sourceNumberOfChannels(0)
     , m_sourceSampleRate(0)
 {
-    // Default to stereo. This could change depending on what the media element .src is set to.
-    addOutput(std::make_unique<AudioNodeOutput>(this, 2));
-
     setNodeType(NodeTypeMediaElementAudioSource);
 
+    // Default to stereo. This could change depending on what the media element .src is set to.
+    addOutput(makeUnique<AudioNodeOutput>(this, 2));
+
     initialize();
 }
 
 MediaElementAudioSourceNode::~MediaElementAudioSourceNode()
 {
@@ -84,11 +87,11 @@
         // Synchronize with process().
         std::lock_guard<MediaElementAudioSourceNode> lock(*this);
 
         if (sourceSampleRate != sampleRate()) {
             double scaleFactor = sourceSampleRate / sampleRate();
-            m_multiChannelResampler = std::make_unique<MultiChannelResampler>(scaleFactor, numberOfChannels);
+            m_multiChannelResampler = makeUnique<MultiChannelResampler>(scaleFactor, numberOfChannels);
         } else {
             // Bypass resampling.
             m_multiChannelResampler = nullptr;
         }
 
@@ -108,14 +111,12 @@
         return true;
 
     if (m_mediaElement->didPassCORSAccessCheck())
         return false;
 
-    if (auto* scriptExecutionContext = context().scriptExecutionContext()) {
-        if (auto* origin = scriptExecutionContext->securityOrigin())
-            return m_mediaElement->wouldTaintOrigin(*origin);
-    }
+    if (auto* origin = context().origin())
+        return m_mediaElement->wouldTaintOrigin(*origin);
 
     return true;
 }
 
 void MediaElementAudioSourceNode::process(size_t numberOfFrames)
@@ -134,10 +135,14 @@
     if (!lock.owns_lock()) {
         // We failed to acquire the lock.
         outputBus->zero();
         return;
     }
+    if (m_sourceNumberOfChannels != outputBus->numberOfChannels()) {
+        outputBus->zero();
+        return;
+    }
 
     if (AudioSourceProvider* provider = mediaElement().audioSourceProvider()) {
         if (m_multiChannelResampler.get()) {
             ASSERT(m_sourceSampleRate != sampleRate());
             m_multiChannelResampler->process(provider, outputBus, numberOfFrames);
