diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseTracker.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseTracker.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseTracker.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseTracker.cpp
@@ -78,10 +78,15 @@
     if (staticTracker)
         return;
     staticTracker = new DatabaseTracker(databasePath);
 }
 
+bool DatabaseTracker::isInitialized()
+{
+    return !!staticTracker;
+}
+
 DatabaseTracker& DatabaseTracker::singleton()
 {
     if (!staticTracker)
         staticTracker = new DatabaseTracker(emptyString());
     return *staticTracker;
@@ -187,11 +192,11 @@
 
     auto exception = result.releaseException();
     if (exception.code() != QuotaExceededError)
         doneCreatingDatabase(origin, name);
 
-    return WTFMove(exception);
+    return exception;
 }
 
 // Note: a thought about performance: hasAdequateQuotaForOrigin() was also
 // called in canEstablishDatabase(), and hence, we're repeating some work within
 // hasAdequateQuotaForOrigin(). However, retryCanEstablishDatabase() should only
@@ -218,11 +223,11 @@
 
     auto exception = result.releaseException();
     ASSERT(exception.code() == QuotaExceededError);
     doneCreatingDatabase(origin, name);
 
-    return WTFMove(exception);
+    return exception;
 }
 
 bool DatabaseTracker::hasEntryForOriginNoLock(const SecurityOriginData& origin)
 {
     ASSERT(!m_databaseGuard.tryLock());
@@ -269,11 +274,11 @@
     LockHolder lockDatabase(m_databaseGuard);
     auto origin = database.securityOrigin();
 
     unsigned long long quota = quotaNoLock(origin);
     unsigned long long diskUsage = usage(origin);
-    unsigned long long databaseFileSize = SQLiteFileSystem::getDatabaseFileSize(database.fileName());
+    unsigned long long databaseFileSize = SQLiteFileSystem::getDatabaseFileSize(database.fileNameIsolatedCopy());
     ASSERT(databaseFileSize <= diskUsage);
 
     if (diskUsage > quota)
         return databaseFileSize;
 
@@ -287,23 +292,11 @@
     return maxSize;
 }
 
 void DatabaseTracker::closeAllDatabases(CurrentQueryBehavior currentQueryBehavior)
 {
-    Vector<Ref<Database>> openDatabases;
-    {
-        LockHolder openDatabaseMapLock(m_openDatabaseMapGuard);
-        if (!m_openDatabaseMap)
-            return;
-        for (auto& nameMap : m_openDatabaseMap->values()) {
-            for (auto& set : nameMap->values()) {
-                for (auto& database : *set)
-                    openDatabases.append(*database);
-            }
-        }
-    }
-    for (auto& database : openDatabases) {
+    for (auto& database : openDatabases()) {
         if (currentQueryBehavior == CurrentQueryBehavior::Interrupt)
             database->interrupt();
         database->close();
     }
 }
@@ -313,16 +306,11 @@
     return SQLiteFileSystem::appendDatabaseFileNameToPath(m_databaseDirectoryPath.isolatedCopy(), origin.databaseIdentifier());
 }
 
 static String generateDatabaseFileName()
 {
-    StringBuilder stringBuilder;
-
-    stringBuilder.append(createCanonicalUUIDString());
-    stringBuilder.appendLiteral(".db");
-
-    return stringBuilder.toString();
+    return makeString(createCanonicalUUIDString(), ".db");
 }
 
 String DatabaseTracker::fullPathForDatabaseNoLock(const SecurityOriginData& origin, const String& name, bool createIfNotExists)
 {
     ASSERT(!m_databaseGuard.tryLock());
@@ -528,38 +516,56 @@
 }
 
 void DatabaseTracker::doneCreatingDatabase(Database& database)
 {
     LockHolder lockDatabase(m_databaseGuard);
-    doneCreatingDatabase(database.securityOrigin(), database.stringIdentifier());
+    doneCreatingDatabase(database.securityOrigin(), database.stringIdentifierIsolatedCopy());
+}
+
+Vector<Ref<Database>> DatabaseTracker::openDatabases()
+{
+    Vector<Ref<Database>> openDatabases;
+    {
+        LockHolder openDatabaseMapLock(m_openDatabaseMapGuard);
+
+        if (m_openDatabaseMap) {
+            for (auto& nameMap : m_openDatabaseMap->values()) {
+                for (auto& set : nameMap->values()) {
+                    for (auto& database : *set)
+                        openDatabases.append(*database);
+                }
+            }
+        }
+    }
+    return openDatabases;
 }
 
 void DatabaseTracker::addOpenDatabase(Database& database)
 {
     LockHolder openDatabaseMapLock(m_openDatabaseMapGuard);
 
     if (!m_openDatabaseMap)
-        m_openDatabaseMap = std::make_unique<DatabaseOriginMap>();
+        m_openDatabaseMap = makeUnique<DatabaseOriginMap>();
 
     auto origin = database.securityOrigin();
 
     auto* nameMap = m_openDatabaseMap->get(origin);
     if (!nameMap) {
         nameMap = new DatabaseNameMap;
         m_openDatabaseMap->add(origin.isolatedCopy(), nameMap);
     }
 
-    String name = database.stringIdentifier();
+    String name = database.stringIdentifierIsolatedCopy();
     auto* databaseSet = nameMap->get(name);
     if (!databaseSet) {
         databaseSet = new DatabaseSet;
         nameMap->set(name.isolatedCopy(), databaseSet);
     }
 
     databaseSet->add(&database);
 
-    LOG(StorageAPI, "Added open Database %s (%p)\n", database.stringIdentifier().utf8().data(), &database);
+    LOG(StorageAPI, "Added open Database %s (%p)\n", database.stringIdentifierIsolatedCopy().utf8().data(), &database);
 }
 
 void DatabaseTracker::removeOpenDatabase(Database& database)
 {
     LockHolder openDatabaseMapLock(m_openDatabaseMapGuard);
@@ -573,20 +579,20 @@
     if (!nameMap) {
         ASSERT_NOT_REACHED();
         return;
     }
 
-    String name = database.stringIdentifier();
+    String name = database.stringIdentifierIsolatedCopy();
     auto* databaseSet = nameMap->get(name);
     if (!databaseSet) {
         ASSERT_NOT_REACHED();
         return;
     }
 
     databaseSet->remove(&database);
 
-    LOG(StorageAPI, "Removed open Database %s (%p)\n", database.stringIdentifier().utf8().data(), &database);
+    LOG(StorageAPI, "Removed open Database %s (%p)\n", database.stringIdentifierIsolatedCopy().utf8().data(), &database);
 
     if (!databaseSet->isEmpty())
         return;
 
     nameMap->remove(name);
@@ -647,15 +653,12 @@
 
 unsigned long long DatabaseTracker::usage(const SecurityOriginData& origin)
 {
     String originPath = this->originPath(origin);
     unsigned long long diskUsage = 0;
-    for (auto& fileName : FileSystem::listDirectory(originPath, "*.db"_s)) {
-        long long size;
-        FileSystem::getFileSize(fileName, size);
-        diskUsage += size;
-    }
+    for (auto& fileName : FileSystem::listDirectory(originPath, "*.db"_s))
+        diskUsage += SQLiteFileSystem::getDatabaseFileSize(fileName);
     return diskUsage;
 }
 
 unsigned long long DatabaseTracker::quotaNoLock(const SecurityOriginData& origin)
 {
@@ -946,11 +949,11 @@
     ASSERT(!m_databaseGuard.tryLock());
 
     // We don't use HashMap::ensure here to avoid making an isolated copy of the origin every time.
     auto* nameSet = m_beingCreated.get(origin);
     if (!nameSet) {
-        auto ownedSet = std::make_unique<HashCountedSet<String>>();
+        auto ownedSet = makeUnique<HashCountedSet<String>>();
         nameSet = ownedSet.get();
         m_beingCreated.add(origin.isolatedCopy(), WTFMove(ownedSet));
     }
     nameSet->add(name.isolatedCopy());
 }
@@ -992,11 +995,11 @@
     ASSERT(canDeleteDatabase(origin, name));
 
     // We don't use HashMap::ensure here to avoid making an isolated copy of the origin every time.
     auto* nameSet = m_beingDeleted.get(origin);
     if (!nameSet) {
-        auto ownedSet = std::make_unique<HashSet<String>>();
+        auto ownedSet = makeUnique<HashSet<String>>();
         nameSet = ownedSet.get();
         m_beingDeleted.add(origin.isolatedCopy(), WTFMove(ownedSet));
     }
     ASSERT(!nameSet->contains(name));
     nameSet->add(name.isolatedCopy());
@@ -1205,11 +1208,11 @@
                         // We are done if this database has already been marked as deleted.
                         if (db->deleted())
                             continue;
 
                         // If this database has been deleted or if its database file no longer matches the current version, this database is no longer valid and it should be marked as deleted.
-                        if (databaseFileName.isNull() || databaseFileName != FileSystem::pathGetFileName(db->fileName())) {
+                        if (databaseFileName.isNull() || databaseFileName != FileSystem::pathGetFileName(db->fileNameIsolatedCopy())) {
                             deletedDatabases.append(db);
                             foundDeletedDatabase = true;
                         }
                     }
 
