diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamTrackPrivate.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamTrackPrivate.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamTrackPrivate.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamTrackPrivate.h
@@ -1,8 +1,9 @@
 /*
- *  Copyright (C) 2013 Nokia Corporation and/or its subsidiary(-ies).
- *  Copyright (C) 2015 Ericsson AB. All rights reserved.
+ * Copyright (C) 2013 Nokia Corporation and/or its subsidiary(-ies).
+ * Copyright (C) 2015 Ericsson AB. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -27,20 +28,30 @@
 #pragma once
 
 #if ENABLE(MEDIA_STREAM)
 
 #include "RealtimeMediaSource.h"
+#include <wtf/LoggerHelper.h>
+#include <wtf/RefCounted.h>
+#include <wtf/WeakPtr.h>
 
 namespace WebCore {
 
 class AudioSourceProvider;
 class GraphicsContext;
 class MediaSample;
 class RealtimeMediaSourceCapabilities;
 class WebAudioSourceProvider;
 
-class MediaStreamTrackPrivate : public RefCounted<MediaStreamTrackPrivate>, public RealtimeMediaSource::Observer {
+class MediaStreamTrackPrivate final
+    : public RefCounted<MediaStreamTrackPrivate>
+    , public CanMakeWeakPtr<MediaStreamTrackPrivate, WeakPtrFactoryInitialization::Eager>
+    , public RealtimeMediaSource::Observer
+#if !RELEASE_LOG_DISABLED
+    , private LoggerHelper
+#endif
+{
 public:
     class Observer {
     public:
         virtual ~Observer() = default;
 
@@ -54,12 +65,12 @@
 
         // May get called on a background thread.
         virtual void audioSamplesAvailable(MediaStreamTrackPrivate&, const MediaTime&, const PlatformAudioData&, const AudioStreamDescription&, size_t) { };
     };
 
-    static Ref<MediaStreamTrackPrivate> create(Ref<RealtimeMediaSource>&&);
-    static Ref<MediaStreamTrackPrivate> create(Ref<RealtimeMediaSource>&&, String&& id);
+    static Ref<MediaStreamTrackPrivate> create(Ref<const Logger>&&, Ref<RealtimeMediaSource>&&);
+    static Ref<MediaStreamTrackPrivate> create(Ref<const Logger>&&, Ref<RealtimeMediaSource>&&, String&& id);
 
     virtual ~MediaStreamTrackPrivate();
 
     const String& id() const { return m_id; }
     const String& label() const;
@@ -106,12 +117,17 @@
     enum class ReadyState { None, Live, Ended };
     ReadyState readyState() const { return m_readyState; }
 
     void setIdForTesting(String&& id) { m_id = WTFMove(id); }
 
+#if !RELEASE_LOG_DISABLED
+    const Logger& logger() const final { return m_logger; }
+    const void* logIdentifier() const final { return m_logIdentifier; }
+#endif
+
 private:
-    MediaStreamTrackPrivate(Ref<RealtimeMediaSource>&&, String&& id);
+    MediaStreamTrackPrivate(Ref<const Logger>&&, Ref<RealtimeMediaSource>&&, String&& id);
 
     // RealtimeMediaSourceObserver
     void sourceStarted() final;
     void sourceStopped() final;
     void sourceMutedChanged() final;
@@ -122,21 +138,31 @@
 
     void updateReadyState();
 
     void forEachObserver(const WTF::Function<void(Observer&)>&) const;
 
+#if !RELEASE_LOG_DISABLED
+    const char* logClassName() const final { return "MediaStreamTrackPrivate"; }
+    WTFLogChannel& logChannel() const final;
+#endif
+
     mutable RecursiveLock m_observersLock;
     HashSet<Observer*> m_observers;
     Ref<RealtimeMediaSource> m_source;
 
     String m_id;
     ReadyState m_readyState { ReadyState::None };
     bool m_isEnabled { true };
     bool m_isEnded { false };
     bool m_haveProducedData { false };
+    bool m_hasSentStartProducedData { false };
     HintValue m_contentHint { HintValue::Empty };
     RefPtr<WebAudioSourceProvider> m_audioSourceProvider;
+    Ref<const Logger> m_logger;
+#if !RELEASE_LOG_DISABLED
+    const void* m_logIdentifier;
+#endif
 };
 
 typedef Vector<RefPtr<MediaStreamTrackPrivate>> MediaStreamTrackPrivateVector;
 
 } // namespace WebCore
