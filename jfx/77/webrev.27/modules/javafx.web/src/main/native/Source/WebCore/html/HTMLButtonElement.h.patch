diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLButtonElement.h b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLButtonElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLButtonElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLButtonElement.h
@@ -32,35 +32,38 @@
 class HTMLButtonElement final : public HTMLFormControlElement {
     WTF_MAKE_ISO_ALLOCATED(HTMLButtonElement);
 public:
     static Ref<HTMLButtonElement> create(const QualifiedName&, Document&, HTMLFormElement*);
 
-    WEBCORE_EXPORT void setType(const AtomicString&);
+    WEBCORE_EXPORT void setType(const AtomString&);
 
-    const AtomicString& value() const;
+    const AtomString& value() const;
 
     bool willRespondToMouseClickEvents() final;
 
     RenderButton* renderer() const;
 
 private:
     HTMLButtonElement(const QualifiedName& tagName, Document&, HTMLFormElement*);
 
     enum Type { SUBMIT, RESET, BUTTON };
 
-    const AtomicString& formControlType() const final;
+    const AtomString& formControlType() const final;
 
     RenderPtr<RenderElement> createElementRenderer(RenderStyle&&, const RenderTreePosition&) final;
 
-    void parseAttribute(const QualifiedName&, const AtomicString&) final;
+    int defaultTabIndex() const final;
+
+    void parseAttribute(const QualifiedName&, const AtomString&) final;
     bool isPresentationAttribute(const QualifiedName&) const final;
     void defaultEventHandler(Event&) final;
 
     bool appendFormData(DOMFormData&, bool) final;
 
     bool isEnumeratable() const final { return true; }
     bool supportLabels() const final { return true; }
+    bool isInteractiveContent() const final { return true; }
 
     bool isSuccessfulSubmitButton() const final;
     bool matchesDefaultPseudoClass() const final;
     bool isActivatedSubmit() const final;
     void setActivatedSubmit(bool flag) final;
