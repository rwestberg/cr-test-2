diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StructureInlines.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StructureInlines.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StructureInlines.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StructureInlines.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -33,10 +33,24 @@
 #include "StructureChain.h"
 #include "StructureRareDataInlines.h"
 
 namespace JSC {
 
+inline Structure* Structure::create(VM& vm, JSGlobalObject* globalObject, JSValue prototype, const TypeInfo& typeInfo, const ClassInfo* classInfo, IndexingType indexingType, unsigned inlineCapacity)
+{
+    ASSERT(vm.structureStructure);
+    ASSERT(classInfo);
+    if (auto* object = prototype.getObject()) {
+        ASSERT(!object->anyObjectInChainMayInterceptIndexedAccesses(vm) || hasSlowPutArrayStorage(indexingType) || !hasIndexedProperties(indexingType));
+        object->didBecomePrototype();
+    }
+
+    Structure* structure = new (NotNull, allocateCell<Structure>(vm.heap)) Structure(vm, globalObject, prototype, typeInfo, classInfo, indexingType, inlineCapacity);
+    structure->finishCreation(vm);
+    return structure;
+}
+
 inline Structure* Structure::createStructure(VM& vm)
 {
     ASSERT(!vm.structureStructure);
     Structure* structure = new (NotNull, allocateCell<Structure>(vm.heap)) Structure(vm);
     structure->finishCreation(vm, CreatingEarlyCell);
@@ -92,19 +106,19 @@
     return object->structure();
 }
 
 ALWAYS_INLINE JSValue Structure::storedPrototype(const JSObject* object) const
 {
-    ASSERT(object->structure() == this);
+    ASSERT(!isMainThread() || object->structure() == this);
     if (hasMonoProto())
         return storedPrototype();
     return object->getDirect(knownPolyProtoOffset);
 }
 
 ALWAYS_INLINE JSObject* Structure::storedPrototypeObject(const JSObject* object) const
 {
-    ASSERT(object->structure() == this);
+    ASSERT(!isMainThread() || object->structure() == this);
     if (hasMonoProto())
         return storedPrototypeObject();
     JSValue proto = object->getDirect(knownPolyProtoOffset);
     if (proto.isNull())
         return nullptr;
@@ -313,11 +327,11 @@
     if (LIKELY(!map))
         return;
     WatchpointSet* set = map->get(offset);
     if (LIKELY(!set))
         return;
-    set->fireAll(*vm(), "Property did get replaced");
+    set->fireAll(vm(), "Property did get replaced");
 }
 
 inline WatchpointSet* Structure::propertyReplacementWatchpointSet(PropertyOffset offset)
 {
     ConcurrentJSLocker locker(m_lock);
@@ -491,10 +505,11 @@
     return remove(propertyName, func);
 }
 
 ALWAYS_INLINE void Structure::setPrototypeWithoutTransition(VM& vm, JSValue prototype)
 {
+    ASSERT(isValidPrototype(prototype));
     m_prototype.set(vm, this, prototype);
 }
 
 ALWAYS_INLINE void Structure::setGlobalObject(VM& vm, JSGlobalObject* globalObject)
 {
@@ -542,11 +557,11 @@
         return false;
 
     if (a->storedPrototype() == b->storedPrototype())
         return false;
 
-    VM& vm = *a->vm();
+    VM& vm = a->vm();
     JSObject* aObj = a->storedPrototypeObject();
     JSObject* bObj = b->storedPrototypeObject();
     while (aObj && bObj) {
         a = aObj->structure(vm);
         b = bObj->structure(vm);
