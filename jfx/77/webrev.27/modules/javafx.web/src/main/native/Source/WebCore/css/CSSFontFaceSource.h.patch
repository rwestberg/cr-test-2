diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFaceSource.h b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFaceSource.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFaceSource.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFaceSource.h
@@ -26,11 +26,12 @@
 #pragma once
 
 #include "CachedFontClient.h"
 #include "CachedResourceHandle.h"
 #include <JavaScriptCore/ArrayBufferView.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/WeakPtr.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
 class CSSFontFace;
 class CSSFontSelector;
@@ -62,11 +63,11 @@
         Success,
         Failure
     };
     Status status() const { return m_status; }
 
-    const AtomicString& familyNameOrURI() const { return m_familyNameOrURI; }
+    const AtomString& familyNameOrURI() const { return m_familyNameOrURI; }
 
     void opportunisticallyStartFontDataURLLoading(CSSFontSelector&);
 
     void load(CSSFontSelector*);
     RefPtr<Font> font(const FontDescription&, bool syntheticBold, bool syntheticItalic, const FontFeatureSettings&, const FontVariantSettings&, FontSelectionSpecifiedCapabilities);
@@ -82,22 +83,25 @@
 
     void fontLoaded(CachedFont&) override;
 
     void setStatus(Status);
 
-    AtomicString m_familyNameOrURI; // URI for remote, built-in font name for local.
+    AtomString m_familyNameOrURI; // URI for remote, built-in font name for local.
     CachedResourceHandle<CachedFont> m_font; // For remote fonts, a pointer to our cached resource.
     CSSFontFace& m_face; // Our owning font face.
 
     RefPtr<SharedBuffer> m_generatedOTFBuffer;
     RefPtr<JSC::ArrayBufferView> m_immediateSource;
     std::unique_ptr<FontCustomPlatformData> m_immediateFontCustomPlatformData;
 
 #if ENABLE(SVG_FONTS)
-    RefPtr<SVGFontFaceElement> m_svgFontFaceElement;
+    WeakPtr<SVGFontFaceElement> m_svgFontFaceElement;
 #endif
     std::unique_ptr<FontCustomPlatformData> m_inDocumentCustomPlatformData;
 
     Status m_status { Status::Pending };
+#if ENABLE(SVG_FONTS)
+    bool m_hasSVGFontFaceElement;
+#endif
 };
 
 } // namespace WebCore
