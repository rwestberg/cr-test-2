diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/DeviceOrientationEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/DeviceOrientationEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/DeviceOrientationEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/DeviceOrientationEvent.h
@@ -23,19 +23,20 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include "DeviceOrientationOrMotionEvent.h"
 #include "Event.h"
 
 namespace WebCore {
 
 class DeviceOrientationData;
 
-class DeviceOrientationEvent final : public Event {
+class DeviceOrientationEvent final : public Event, public DeviceOrientationOrMotionEvent {
 public:
-    static Ref<DeviceOrientationEvent> create(const AtomicString& eventType, DeviceOrientationData* orientation)
+    static Ref<DeviceOrientationEvent> create(const AtomString& eventType, DeviceOrientationData* orientation)
     {
         return adoptRef(*new DeviceOrientationEvent(eventType, orientation));
     }
 
     static Ref<DeviceOrientationEvent> createForBindings()
@@ -51,20 +52,20 @@
 
 #if PLATFORM(IOS_FAMILY)
     Optional<double> compassHeading() const;
     Optional<double> compassAccuracy() const;
 
-    void initDeviceOrientationEvent(const AtomicString& type, bool bubbles, bool cancelable, Optional<double> alpha, Optional<double> beta, Optional<double> gamma, Optional<double> compassHeading, Optional<double> compassAccuracy);
+    void initDeviceOrientationEvent(const AtomString& type, bool bubbles, bool cancelable, Optional<double> alpha, Optional<double> beta, Optional<double> gamma, Optional<double> compassHeading, Optional<double> compassAccuracy);
 #else
     Optional<bool> absolute() const;
 
-    void initDeviceOrientationEvent(const AtomicString& type, bool bubbles, bool cancelable, Optional<double> alpha, Optional<double> beta, Optional<double> gamma, Optional<bool> absolute);
+    void initDeviceOrientationEvent(const AtomString& type, bool bubbles, bool cancelable, Optional<double> alpha, Optional<double> beta, Optional<double> gamma, Optional<bool> absolute);
 #endif
 
 private:
     DeviceOrientationEvent();
-    DeviceOrientationEvent(const AtomicString& eventType, DeviceOrientationData*);
+    DeviceOrientationEvent(const AtomString& eventType, DeviceOrientationData*);
 
     EventInterface eventInterface() const override;
 
     RefPtr<DeviceOrientationData> m_orientation;
 };
