diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCJSValue.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCJSValue.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCJSValue.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCJSValue.cpp
@@ -1,9 +1,9 @@
 /*
  *  Copyright (C) 1999-2001 Harri Porten (porten@kde.org)
  *  Copyright (C) 2001 Peter Kelly (pmk@post.com)
- *  Copyright (C) 2003-2017 Apple Inc. All rights reserved.
+ *  Copyright (C) 2003-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Library General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -160,22 +160,31 @@
     EXCEPTION_ASSERT(!!scope.exception() == !obj);
     if (UNLIKELY(!obj))
         return false;
     JSValue prototype;
     if (propertyName != vm.propertyNames->underscoreProto) {
-        for (; !obj->structure(vm)->hasReadOnlyOrGetterSetterPropertiesExcludingProto(); obj = asObject(prototype)) {
+        while (true) {
+            Structure* structure = obj->structure(vm);
+            if (structure->hasReadOnlyOrGetterSetterPropertiesExcludingProto() || structure->typeInfo().hasPutPropertySecurityCheck())
+                break;
             prototype = obj->getPrototype(vm, exec);
             RETURN_IF_EXCEPTION(scope, false);
 
             if (prototype.isNull())
                 return typeError(exec, scope, slot.isStrictMode(), ReadonlyPropertyWriteError);
+            obj = asObject(prototype);
         }
     }
 
     for (; ; obj = asObject(prototype)) {
+        Structure* structure = obj->structure(vm);
+        if (UNLIKELY(structure->typeInfo().hasPutPropertySecurityCheck())) {
+            obj->methodTable(vm)->doPutPropertySecurityCheck(obj, exec, propertyName, slot);
+            RETURN_IF_EXCEPTION(scope, false);
+        }
         unsigned attributes;
-        PropertyOffset offset = obj->structure(vm)->get(vm, propertyName, attributes);
+        PropertyOffset offset = structure->get(vm, propertyName, attributes);
         if (offset != invalidOffset) {
             if (attributes & PropertyAttribute::ReadOnly)
                 return typeError(exec, scope, slot.isStrictMode(), ReadonlyPropertyWriteError);
 
             JSValue gs = obj->getDirect(offset);
@@ -204,11 +213,11 @@
     VM& vm = exec->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     if (propertyName > MAX_ARRAY_INDEX) {
         PutPropertySlot slot(*this, shouldThrow);
-        return putToPrimitive(exec, Identifier::from(exec, propertyName), value, slot);
+        return putToPrimitive(exec, Identifier::from(vm, propertyName), value, slot);
     }
 
     JSObject* prototype = synthesizePrototype(exec);
     EXCEPTION_ASSERT(!!scope.exception() == !prototype);
     if (UNLIKELY(!prototype))
@@ -257,13 +266,13 @@
             out.print("String");
             if (string->isRope())
                 out.print(" (rope)");
             const StringImpl* impl = string->tryGetValueImpl();
             if (impl) {
-                if (impl->isAtomic())
+                if (impl->isAtom())
                     out.print(" (atomic)");
-                if (impl->isAtomic())
+                if (impl->isAtom())
                     out.print(" (identifier)");
                 if (impl->isSymbol())
                     out.print(" (symbol)");
             } else
                 out.print(" (unresolved)");
@@ -304,11 +313,11 @@
     else if (isInt32())
         out.printf("%d", asInt32());
     else if (isDouble())
         out.printf("%lf", asDouble());
     else if (isCell()) {
-        VM& vm = *asCell()->vm();
+        VM& vm = asCell()->vm();
         if (asCell()->inherits<JSString>(vm)) {
             JSString* string = asString(asCell());
             const StringImpl* impl = string->tryGetValueImpl();
             if (impl)
                 out.print("\"", impl, "\"");
@@ -349,23 +358,23 @@
     VM& vm = exec->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     auto errorValue = [&] () -> JSString* {
         if (returnEmptyStringOnError)
-            return jsEmptyString(exec);
+            return jsEmptyString(vm);
         return nullptr;
     };
 
     ASSERT(!isString());
     if (isInt32()) {
         auto integer = asInt32();
         if (static_cast<unsigned>(integer) <= 9)
             return vm.smallStrings.singleCharacterString(integer + '0');
-        return jsNontrivialString(&vm, vm.numericStrings.add(integer));
+        return jsNontrivialString(vm, vm.numericStrings.add(integer));
     }
     if (isDouble())
-        return jsString(&vm, vm.numericStrings.add(asDouble()));
+        return jsString(vm, vm.numericStrings.add(asDouble()));
     if (isTrue())
         return vm.smallStrings.trueString();
     if (isFalse())
         return vm.smallStrings.falseString();
     if (isNull())
@@ -378,11 +387,11 @@
     }
     if (isBigInt()) {
         JSBigInt* bigInt = asBigInt(*this);
         if (auto digit = bigInt->singleDigitValueForString())
             return vm.smallStrings.singleCharacterString(*digit + '0');
-        JSString* returnString = jsNontrivialString(&vm, bigInt->toString(exec, 10));
+        JSString* returnString = jsNontrivialString(vm, bigInt->toString(exec, 10));
         RETURN_IF_EXCEPTION(scope, errorValue());
         return returnString;
     }
 
     ASSERT(isCell());
