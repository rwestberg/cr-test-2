diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/API/JSMarkingConstraintPrivate.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/API/JSMarkingConstraintPrivate.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/API/JSMarkingConstraintPrivate.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/API/JSMarkingConstraintPrivate.cpp
@@ -38,16 +38,16 @@
 
 struct Marker : JSMarker {
     SlotVisitor* visitor;
 };
 
-bool isMarked(JSMarkerRef, JSObjectRef objectRef)
+bool isMarked(JSMarkerRef markerRef, JSObjectRef objectRef)
 {
     if (!objectRef)
         return true; // Null is an immortal object.
 
-    return Heap::isMarked(toJS(objectRef));
+    return static_cast<Marker*>(markerRef)->visitor->vm().heap.isMarked(toJS(objectRef));
 }
 
 void mark(JSMarkerRef markerRef, JSObjectRef objectRef)
 {
     if (!objectRef)
@@ -69,11 +69,11 @@
     // that we expect this constraint to mark things even during a stop-the-world full GC, but
     // we don't expect it to be able to mark anything at the very start of a GC before anything
     // else gets marked.
     ConstraintVolatility volatility = ConstraintVolatility::GreyedByMarking;
 
-    auto constraint = std::make_unique<SimpleMarkingConstraint>(
+    auto constraint = makeUnique<SimpleMarkingConstraint>(
         toCString("Amc", constraintIndex, "(", RawPointer(bitwise_cast<void*>(constraintCallback)), ")"),
         toCString("API Marking Constraint #", constraintIndex, " (", RawPointer(bitwise_cast<void*>(constraintCallback)), ", ", RawPointer(userData), ")"),
         [constraintCallback, userData]
         (SlotVisitor& slotVisitor) {
             Marker marker;
