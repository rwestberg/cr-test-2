diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/MerchantValidationEvent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/MerchantValidationEvent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/MerchantValidationEvent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/MerchantValidationEvent.cpp
@@ -31,16 +31,16 @@
 #include "Document.h"
 #include "PaymentRequest.h"
 
 namespace WebCore {
 
-Ref<MerchantValidationEvent> MerchantValidationEvent::create(const AtomicString& type, const String& methodName, URL&& validationURL)
+Ref<MerchantValidationEvent> MerchantValidationEvent::create(const AtomString& type, const String& methodName, URL&& validationURL)
 {
     return adoptRef(*new MerchantValidationEvent(type, methodName, WTFMove(validationURL)));
 }
 
-ExceptionOr<Ref<MerchantValidationEvent>> MerchantValidationEvent::create(Document& document, const AtomicString& type, Init&& eventInit)
+ExceptionOr<Ref<MerchantValidationEvent>> MerchantValidationEvent::create(Document& document, const AtomString& type, Init&& eventInit)
 {
     URL validationURL { document.url(), eventInit.validationURL };
     if (!validationURL.isValid())
         return Exception { TypeError };
 
@@ -52,20 +52,20 @@
     }
 
     return adoptRef(*new MerchantValidationEvent(type, WTFMove(methodName), WTFMove(validationURL), WTFMove(eventInit)));
 }
 
-MerchantValidationEvent::MerchantValidationEvent(const AtomicString& type, const String& methodName, URL&& validationURL)
+MerchantValidationEvent::MerchantValidationEvent(const AtomString& type, const String& methodName, URL&& validationURL)
     : Event { type, Event::CanBubble::No, Event::IsCancelable::No }
     , m_methodName { methodName }
     , m_validationURL { WTFMove(validationURL) }
 {
     ASSERT(isTrusted());
     ASSERT(m_validationURL.isValid());
 }
 
-MerchantValidationEvent::MerchantValidationEvent(const AtomicString& type, String&& methodName, URL&& validationURL, Init&& eventInit)
+MerchantValidationEvent::MerchantValidationEvent(const AtomString& type, String&& methodName, URL&& validationURL, Init&& eventInit)
     : Event { type, WTFMove(eventInit), IsTrusted::No }
     , m_methodName { WTFMove(methodName) }
     , m_validationURL { WTFMove(validationURL) }
 {
     ASSERT(!isTrusted());
