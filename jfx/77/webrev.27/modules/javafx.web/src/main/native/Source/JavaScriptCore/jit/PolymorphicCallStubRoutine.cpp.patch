diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/PolymorphicCallStubRoutine.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/PolymorphicCallStubRoutine.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/PolymorphicCallStubRoutine.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/PolymorphicCallStubRoutine.cpp
@@ -55,13 +55,10 @@
         remove();
 }
 
 void PolymorphicCallNode::clearCallLinkInfo()
 {
-    if (Options::dumpDisassembly())
-        dataLog("Clearing call link info for polymorphic call at ", m_callLinkInfo->callReturnLocation(), ", ", m_callLinkInfo->codeOrigin(), "\n");
-
     m_callLinkInfo = nullptr;
 }
 
 void PolymorphicCallCase::dump(PrintStream& out) const
 {
@@ -128,14 +125,14 @@
         if (node.hasCallLinkInfo(info))
             node.clearCallLinkInfo();
     }
 }
 
-bool PolymorphicCallStubRoutine::visitWeak(VM&)
+bool PolymorphicCallStubRoutine::visitWeak(VM& vm)
 {
     for (auto& variant : m_variants) {
-        if (!Heap::isMarked(variant.get()))
+        if (!vm.heap.isMarked(variant.get()))
             return false;
     }
     return true;
 }
 
