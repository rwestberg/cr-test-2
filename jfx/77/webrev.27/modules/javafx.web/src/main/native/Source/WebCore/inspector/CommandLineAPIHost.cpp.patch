diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/CommandLineAPIHost.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/CommandLineAPIHost.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/CommandLineAPIHost.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/CommandLineAPIHost.cpp
@@ -31,22 +31,20 @@
 #include "config.h"
 #include "CommandLineAPIHost.h"
 
 #include "Database.h"
 #include "Document.h"
-#include "InspectorDOMAgent.h"
+#include "EventTarget.h"
 #include "InspectorDOMStorageAgent.h"
 #include "InspectorDatabaseAgent.h"
 #include "JSCommandLineAPIHost.h"
 #include "JSDOMGlobalObject.h"
 #include "JSEventListener.h"
 #include "Pasteboard.h"
 #include "Storage.h"
 #include "WebConsoleAgent.h"
-#include <JavaScriptCore/ConsoleMessage.h>
 #include <JavaScriptCore/InspectorAgent.h>
-#include <JavaScriptCore/InspectorConsoleAgent.h>
 #include <JavaScriptCore/JSCInlines.h>
 #include <JavaScriptCore/JSLock.h>
 #include <JavaScriptCore/ScriptValue.h>
 #include <wtf/JSONValues.h>
 #include <wtf/RefPtr.h>
@@ -61,94 +59,87 @@
 {
     return adoptRef(*new CommandLineAPIHost);
 }
 
 CommandLineAPIHost::CommandLineAPIHost()
-    : m_inspectedObject(std::make_unique<InspectableObject>())
+    : m_inspectedObject(makeUnique<InspectableObject>())
 {
 }
 
 CommandLineAPIHost::~CommandLineAPIHost() = default;
 
 void CommandLineAPIHost::disconnect()
 {
-    m_inspectorAgent = nullptr;
-    m_consoleAgent = nullptr;
-    m_domAgent = nullptr;
-    m_domStorageAgent = nullptr;
-    m_databaseAgent = nullptr;
+
+    m_instrumentingAgents = nullptr;
 }
 
 void CommandLineAPIHost::inspect(JSC::ExecState& state, JSC::JSValue valueToInspect, JSC::JSValue hintsValue)
 {
-    if (!m_inspectorAgent)
+    if (!m_instrumentingAgents)
+        return;
+
+    auto* inspectorAgent = m_instrumentingAgents->inspectorAgent();
+    if (!inspectorAgent)
         return;
 
     RefPtr<JSON::Object> hintsObject;
     if (!Inspector::toInspectorValue(state, hintsValue)->asObject(hintsObject))
         return;
 
     auto remoteObject = BindingTraits<Inspector::Protocol::Runtime::RemoteObject>::runtimeCast(Inspector::toInspectorValue(state, valueToInspect));
-    m_inspectorAgent->inspect(WTFMove(remoteObject), WTFMove(hintsObject));
+    inspectorAgent->inspect(WTFMove(remoteObject), WTFMove(hintsObject));
 }
 
-static Vector<CommandLineAPIHost::ListenerEntry> listenerEntriesFromListenerInfo(ExecState& state, Document& document, const EventListenerInfo& listenerInfo)
+CommandLineAPIHost::EventListenersRecord CommandLineAPIHost::getEventListeners(ExecState& state, EventTarget& target)
 {
-    VM& vm = state.vm();
-
-    Vector<CommandLineAPIHost::ListenerEntry> entries;
-    for (auto& eventListener : listenerInfo.eventListenerVector) {
-        if (!is<JSEventListener>(eventListener->callback())) {
-            ASSERT_NOT_REACHED();
-            continue;
-        }
-
-        auto& jsListener = downcast<JSEventListener>(eventListener->callback());
+    auto* scriptExecutionContext = target.scriptExecutionContext();
+    if (!scriptExecutionContext)
+        return { };
 
-        // Hide listeners from other contexts.
-        if (&jsListener.isolatedWorld() != &currentWorld(state))
-            continue;
+    EventListenersRecord result;
 
-        auto function = jsListener.jsFunction(document);
-        if (!function)
-            continue;
+    VM& vm = state.vm();
 
-        entries.append({ JSC::Strong<JSC::JSObject>(vm, function), eventListener->useCapture(), eventListener->isPassive(), eventListener->isOnce() });
-    }
+    for (auto& eventType : target.eventTypes()) {
+        Vector<CommandLineAPIHost::ListenerEntry> entries;
 
-    return entries;
-}
+        for (auto& eventListener : target.eventListeners(eventType)) {
+            if (!is<JSEventListener>(eventListener->callback()))
+                continue;
 
-auto CommandLineAPIHost::getEventListeners(JSC::ExecState& state, Node* node) -> EventListenersRecord
-{
-    if (!m_domAgent)
-        return { };
+            auto& jsListener = downcast<JSEventListener>(eventListener->callback());
 
-    if (!node)
-        return { };
+            // Hide listeners from other contexts.
+            if (&jsListener.isolatedWorld() != &currentWorld(state))
+                continue;
 
-    Vector<EventListenerInfo> listenerInfoArray;
-    m_domAgent->getEventListeners(node, listenerInfoArray, false);
+            auto* function = jsListener.jsFunction(*scriptExecutionContext);
+            if (!function)
+                continue;
 
-    EventListenersRecord result;
+            entries.append({ Strong<JSObject>(vm, function), eventListener->useCapture(), eventListener->isPassive(), eventListener->isOnce() });
+        }
 
-    for (auto& listenerInfo : listenerInfoArray) {
-        auto entries = listenerEntriesFromListenerInfo(state, node->document(), listenerInfo);
-        if (entries.isEmpty())
-            continue;
-        result.append({ listenerInfo.eventType, WTFMove(entries) });
+        if (!entries.isEmpty())
+            result.append({ eventType, WTFMove(entries) });
     }
 
     return result;
 }
 
 void CommandLineAPIHost::clearConsoleMessages()
 {
-    if (m_consoleAgent) {
-        ErrorString unused;
-        m_consoleAgent->clearMessages(unused);
-    }
+    if (!m_instrumentingAgents)
+        return;
+
+    auto* consoleAgent = m_instrumentingAgents->webConsoleAgent();
+    if (!consoleAgent)
+        return;
+
+    ErrorString ignored;
+    consoleAgent->clearMessages(ignored);
 }
 
 void CommandLineAPIHost::copyText(const String& text)
 {
     Pasteboard::createForCopyAndPaste()->writePlainText(text, Pasteboard::CannotSmartReplace);
@@ -174,20 +165,20 @@
     return scriptValue ? scriptValue : jsUndefined();
 }
 
 String CommandLineAPIHost::databaseId(Database& database)
 {
-    if (m_databaseAgent)
-        return m_databaseAgent->databaseId(database);
+    if (m_instrumentingAgents) {
+        if (auto* databaseAgent = m_instrumentingAgents->inspectorDatabaseAgent())
+            return databaseAgent->databaseId(database);
+    }
     return { };
 }
 
 String CommandLineAPIHost::storageId(Storage& storage)
 {
-    if (m_domStorageAgent)
-        return m_domStorageAgent->storageId(storage);
-    return { };
+    return InspectorDOMStorageAgent::storageId(storage);
 }
 
 JSValue CommandLineAPIHost::wrapper(ExecState* exec, JSDOMGlobalObject* globalObject)
 {
     JSValue value = m_wrappers.getWrapper(globalObject);
@@ -203,9 +194,9 @@
 }
 
 void CommandLineAPIHost::clearAllWrappers()
 {
     m_wrappers.clearAllWrappers();
-    m_inspectedObject = std::make_unique<InspectableObject>();
+    m_inspectedObject = makeUnique<InspectableObject>();
 }
 
 } // namespace WebCore
