diff a/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParser.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParser.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParser.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParser.cpp
@@ -144,11 +144,11 @@
 
     CSSParser parser(context);
     return parser.parseValue(declaration, propertyID, string, important);
 }
 
-CSSParser::ParseResult CSSParser::parseCustomPropertyValue(MutableStyleProperties& declaration, const AtomicString& propertyName, const String& string, bool important, const CSSParserContext& context)
+CSSParser::ParseResult CSSParser::parseCustomPropertyValue(MutableStyleProperties& declaration, const AtomString& propertyName, const String& string, bool important, const CSSParserContext& context)
 {
     return CSSParserImpl::parseCustomPropertyValue(&declaration, propertyName, string, important, context);
 }
 
 CSSParser::ParseResult CSSParser::parseValue(MutableStyleProperties& declaration, CSSPropertyID propertyID, const String& string, bool important)
@@ -244,17 +244,12 @@
     return CSSParserImpl::parseKeyframeKeyList(selector);
 }
 
 RefPtr<CSSValue> CSSParser::parseFontFaceDescriptor(CSSPropertyID propertyID, const String& propertyValue, const CSSParserContext& context)
 {
-    StringBuilder builder;
-    builder.appendLiteral("@font-face { ");
-    builder.append(getPropertyNameString(propertyID));
-    builder.appendLiteral(" : ");
-    builder.append(propertyValue);
-    builder.appendLiteral("; }");
-    RefPtr<StyleRuleBase> rule = parseRule(context, nullptr, builder.toString());
+    String string = makeString("@font-face { ", getPropertyNameString(propertyID), " : ", propertyValue, "; }");
+    RefPtr<StyleRuleBase> rule = parseRule(context, nullptr, string);
     if (!rule || !rule->isFontFaceRule())
         return nullptr;
     return downcast<StyleRuleFontFace>(*rule.get()).properties().getPropertyCSSValue(propertyID);
 }
 
