diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFace.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFace.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFace.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFace.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2007, 2008, 2011, 2013 Apple Inc. All rights reserved.
+ * Copyright (C) 2007-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -75,14 +75,14 @@
         if (!item.isLocal()) {
             const Settings* settings = document ? &document->settings() : nullptr;
             bool allowDownloading = foundSVGFont || (settings && settings->downloadableBinaryFontsEnabled());
             if (allowDownloading && item.isSupportedFormat() && document) {
                 if (CachedFont* cachedFont = item.cachedFont(document, foundSVGFont, isInitiatingElementInUserAgentShadowTree))
-                    source = std::make_unique<CSSFontFaceSource>(fontFace, item.resource(), cachedFont);
+                    source = makeUnique<CSSFontFaceSource>(fontFace, item.resource(), cachedFont);
             }
         } else
-            source = std::make_unique<CSSFontFaceSource>(fontFace, item.resource(), nullptr, fontFaceElement);
+            source = makeUnique<CSSFontFaceSource>(fontFace, item.resource(), nullptr, fontFaceElement);
 
         if (source)
             fontFace.adoptSource(WTFMove(source));
     }
     fontFace.sourcesPopulated();
@@ -120,10 +120,15 @@
     });
 
     return true;
 }
 
+FontFace* CSSFontFace::existingWrapper()
+{
+    return m_wrapper.get();
+}
+
 static FontSelectionRange calculateWeightRange(CSSValue& value)
 {
     if (value.isValueList()) {
         auto& valueList = downcast<CSSValueList>(value);
         ASSERT(valueList.length() == 2);
@@ -471,12 +476,10 @@
     return false;
 }
 
 void CSSFontFace::fontLoadEventOccurred()
 {
-    Ref<CSSFontFace> protectedThis(*this);
-
     // If the font is already in the cache, CSSFontFaceSource may report it's loaded before it is added here as a source.
     // Let's not pump the state machine until we've got all our sources. font() and load() are smart enough to act correctly
     // when a source is failed or succeeded before we have asked it to load.
     if (m_sourcesPopulated)
         pump(ExternalResourceDownloadPolicy::Forbid);
@@ -489,10 +492,12 @@
     });
 }
 
 void CSSFontFace::timeoutFired()
 {
+    Ref<CSSFontFace> protectedThis(*this);
+
     switch (status()) {
     case Status::Loading:
         setStatus(Status::TimedOut);
         break;
     case Status::TimedOut:
@@ -587,10 +592,17 @@
     if (m_fontSelector && m_fontSelector->document())
         return m_fontSelector->document()->settings().shouldAllowUserInstalledFonts() ? AllowUserInstalledFonts::Yes : AllowUserInstalledFonts::No;
     return AllowUserInstalledFonts::Yes;
 }
 
+bool CSSFontFace::shouldAllowDesignSystemUIFonts() const
+{
+    if (m_fontSelector && m_fontSelector->document())
+        return m_fontSelector->document()->settings().shouldAllowDesignSystemUIFonts();
+    return false;
+}
+
 static Settings::FontLoadTimingOverride fontLoadTimingOverride(CSSFontSelector* fontSelector)
 {
     auto overrideValue = Settings::FontLoadTimingOverride::None;
     if (fontSelector && fontSelector->document())
         overrideValue = fontSelector->document()->settings().fontLoadTimingOverride();
@@ -682,10 +694,12 @@
     }
 }
 
 void CSSFontFace::fontLoaded(CSSFontFaceSource&)
 {
+    Ref<CSSFontFace> protectedThis(*this);
+
     fontLoadEventOccurred();
 }
 
 bool CSSFontFace::shouldIgnoreFontLoadCompletions() const
 {
@@ -781,10 +795,12 @@
 RefPtr<Font> CSSFontFace::font(const FontDescription& fontDescription, bool syntheticBold, bool syntheticItalic, ExternalResourceDownloadPolicy policy)
 {
     if (computeFailureState())
         return nullptr;
 
+    Ref<CSSFontFace> protectedThis(*this);
+
     // Our status is derived from the first non-failed source. However, this source may
     // return null from font(), which means we need to continue looping through the remainder
     // of the sources to try to find a font to use. These subsequent tries should not affect
     // our own state, though.
     size_t startIndex = pump(policy);
