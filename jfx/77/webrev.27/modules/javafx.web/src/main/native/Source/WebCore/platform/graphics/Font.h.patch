diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Font.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Font.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Font.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Font.h
@@ -49,11 +49,11 @@
 #if USE(CG)
 #include <pal/spi/cg/CoreGraphicsSPI.h>
 #endif
 
 #if USE(DIRECT2D)
-interface IDWriteFactory;
+interface IDWriteFactory5;
 interface IDWriteGdiInterop;
 #endif
 
 namespace WebCore {
 
@@ -202,10 +202,14 @@
     const BitVector& glyphsSupportedByAllSmallCaps() const;
     const BitVector& glyphsSupportedByPetiteCaps() const;
     const BitVector& glyphsSupportedByAllPetiteCaps() const;
 #endif
 
+#if HAVE(DISALLOWABLE_USER_INSTALLED_FONTS)
+    bool isUserInstalledFont() const;
+#endif
+
     bool canRenderCombiningCharacterSequence(const UChar*, size_t) const;
     bool applyTransforms(GlyphBufferGlyph*, GlyphBufferAdvance*, size_t glyphCount, bool enableKerning, bool requiresShaping) const;
 
 #if PLATFORM(WIN)
     SCRIPT_FONTPROPERTIES* scriptFontProperties() const;
@@ -213,15 +217,10 @@
     static void setShouldApplyMacAscentHack(bool);
     static bool shouldApplyMacAscentHack();
     static float ascentConsideringMacAscentHack(const WCHAR*, float ascent, float descent);
 #endif
 
-#if USE(DIRECT2D)
-    WEBCORE_EXPORT static IDWriteFactory* systemDWriteFactory();
-    WEBCORE_EXPORT static IDWriteGdiInterop* systemDWriteGdiInterop();
-#endif
-
 private:
     Font(const FontPlatformData&, Origin, Interstitial, Visibility, OrientationFallback);
 
     void platformInit();
     void platformGlyphInit();
@@ -263,13 +262,11 @@
 #if ENABLE(OPENTYPE_VERTICAL)
     RefPtr<OpenTypeVerticalData> m_verticalData;
 #endif
 
     struct DerivedFonts {
-#if !COMPILER(MSVC)
-        WTF_MAKE_FAST_ALLOCATED;
-#endif
+        WTF_MAKE_STRUCT_FAST_ALLOCATED;
     public:
 
         RefPtr<Font> smallCapsFont;
         RefPtr<Font> noSynthesizableFeaturesFont;
         RefPtr<Font> emphasisMarkFont;
@@ -339,11 +336,11 @@
             return bounds;
     }
 
     bounds = platformBoundsForGlyph(glyph);
     if (!m_glyphToBoundsMap)
-        m_glyphToBoundsMap = std::make_unique<GlyphMetricsMap<FloatRect>>();
+        m_glyphToBoundsMap = makeUnique<GlyphMetricsMap<FloatRect>>();
     m_glyphToBoundsMap->setMetricsForGlyph(glyph, bounds);
     return bounds;
 }
 
 ALWAYS_INLINE float Font::widthForGlyph(Glyph glyph) const
