diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/MutationEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/MutationEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/MutationEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/MutationEvent.h
@@ -34,31 +34,32 @@
         MODIFICATION = 1,
         ADDITION = 2,
         REMOVAL = 3
     };
 
-    static Ref<MutationEvent> create(const AtomicString& type, CanBubble canBubble, Node* relatedNode = nullptr, const String& prevValue = String(), const String& newValue = String())
+    static Ref<MutationEvent> create(const AtomString& type, CanBubble canBubble, Node* relatedNode = nullptr, const String& prevValue = String(), const String& newValue = String())
     {
         return adoptRef(*new MutationEvent(type, canBubble, IsCancelable::No, relatedNode, prevValue, newValue));
     }
 
     static Ref<MutationEvent> createForBindings()
     {
         return adoptRef(*new MutationEvent);
     }
 
-    WEBCORE_EXPORT void initMutationEvent(const AtomicString& type, bool canBubble, bool cancelable, Node* relatedNode, const String& prevValue, const String& newValue, const String& attrName, unsigned short attrChange);
+    WEBCORE_EXPORT void initMutationEvent(const AtomString& type, bool canBubble, bool cancelable, Node* relatedNode, const String& prevValue, const String& newValue, const String& attrName, unsigned short attrChange);
 
     Node* relatedNode() const { return m_relatedNode.get(); }
     String prevValue() const { return m_prevValue; }
     String newValue() const { return m_newValue; }
     String attrName() const { return m_attrName; }
     unsigned short attrChange() const { return m_attrChange; }
 
 private:
     MutationEvent() = default;
-    MutationEvent(const AtomicString& type, CanBubble, IsCancelable, Node* relatedNode, const String& prevValue, const String& newValue);
+    MutationEvent(const AtomString& type, CanBubble, IsCancelable, Node* relatedNode, const String& prevValue, const String& newValue);
+
 #if PLATFORM(JAVA) // FIXME-java: used in JavaEvent.cpp, or enable RTTI
     bool isMutationEvent() const override final { return true; }
 #endif
 
     EventInterface eventInterface() const final;
