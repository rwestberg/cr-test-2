diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLDocument.h b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLDocument.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLDocument.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLDocument.h
@@ -27,54 +27,49 @@
 namespace WebCore {
 
 class HTMLDocument : public Document {
     WTF_MAKE_ISO_ALLOCATED(HTMLDocument);
 public:
-    static Ref<HTMLDocument> create(Frame*, const URL&);
+    static Ref<HTMLDocument> create(PAL::SessionID, Frame*, const URL&);
     static Ref<HTMLDocument> createSynthesizedDocument(Frame&, const URL&);
     virtual ~HTMLDocument();
 
     WEBCORE_EXPORT int width();
     WEBCORE_EXPORT int height();
 
-    Optional<Variant<RefPtr<WindowProxy>, RefPtr<Element>, RefPtr<HTMLCollection>>> namedItem(const AtomicString&);
-    Vector<AtomicString> supportedPropertyNames() const;
+    Optional<Variant<RefPtr<WindowProxy>, RefPtr<Element>, RefPtr<HTMLCollection>>> namedItem(const AtomString&);
+    Vector<AtomString> supportedPropertyNames() const;
 
-    Element* documentNamedItem(const AtomicStringImpl& name) const { return m_documentNamedItem.getElementByDocumentNamedItem(name, *this); }
-    bool hasDocumentNamedItem(const AtomicStringImpl& name) const { return m_documentNamedItem.contains(name); }
-    bool documentNamedItemContainsMultipleElements(const AtomicStringImpl& name) const { return m_documentNamedItem.containsMultiple(name); }
-    void addDocumentNamedItem(const AtomicStringImpl&, Element&);
-    void removeDocumentNamedItem(const AtomicStringImpl&, Element&);
+    Element* documentNamedItem(const AtomStringImpl& name) const { return m_documentNamedItem.getElementByDocumentNamedItem(name, *this); }
+    bool hasDocumentNamedItem(const AtomStringImpl& name) const { return m_documentNamedItem.contains(name); }
+    bool documentNamedItemContainsMultipleElements(const AtomStringImpl& name) const { return m_documentNamedItem.containsMultiple(name); }
+    void addDocumentNamedItem(const AtomStringImpl&, Element&);
+    void removeDocumentNamedItem(const AtomStringImpl&, Element&);
 
-    Element* windowNamedItem(const AtomicStringImpl& name) const { return m_windowNamedItem.getElementByWindowNamedItem(name, *this); }
-    bool hasWindowNamedItem(const AtomicStringImpl& name) const { return m_windowNamedItem.contains(name); }
-    bool windowNamedItemContainsMultipleElements(const AtomicStringImpl& name) const { return m_windowNamedItem.containsMultiple(name); }
-    void addWindowNamedItem(const AtomicStringImpl&, Element&);
-    void removeWindowNamedItem(const AtomicStringImpl&, Element&);
+    Element* windowNamedItem(const AtomStringImpl& name) const { return m_windowNamedItem.getElementByWindowNamedItem(name, *this); }
+    bool hasWindowNamedItem(const AtomStringImpl& name) const { return m_windowNamedItem.contains(name); }
+    bool windowNamedItemContainsMultipleElements(const AtomStringImpl& name) const { return m_windowNamedItem.containsMultiple(name); }
+    void addWindowNamedItem(const AtomStringImpl&, Element&);
+    void removeWindowNamedItem(const AtomStringImpl&, Element&);
 
     static bool isCaseSensitiveAttribute(const QualifiedName&);
 
 protected:
-    HTMLDocument(Frame*, const URL&, DocumentClassFlags = 0, unsigned constructionFlags = 0);
+    HTMLDocument(PAL::SessionID, Frame*, const URL&, DocumentClassFlags = 0, unsigned constructionFlags = 0);
 
 private:
     bool isFrameSet() const final;
     Ref<DocumentParser> createParser() override;
     Ref<Document> cloneDocumentWithoutChildren() const final;
 
     TreeScopeOrderedMap m_documentNamedItem;
     TreeScopeOrderedMap m_windowNamedItem;
 };
 
-inline Ref<HTMLDocument> HTMLDocument::create(Frame* frame, const URL& url)
+inline Ref<HTMLDocument> HTMLDocument::create(PAL::SessionID sessionID, Frame* frame, const URL& url)
 {
-    return adoptRef(*new HTMLDocument(frame, url, HTMLDocumentClass));
-}
-
-inline Ref<HTMLDocument> HTMLDocument::createSynthesizedDocument(Frame& frame, const URL& url)
-{
-    return adoptRef(*new HTMLDocument(&frame, url, HTMLDocumentClass, Synthesized));
+    return adoptRef(*new HTMLDocument(sessionID, frame, url, HTMLDocumentClass));
 }
 
 } // namespace WebCore
 
 SPECIALIZE_TYPE_TRAITS_BEGIN(WebCore::HTMLDocument)
