diff a/modules/javafx.web/src/main/native/Source/WebCore/css/MediaQueryEvaluator.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/MediaQueryEvaluator.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/MediaQueryEvaluator.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/MediaQueryEvaluator.cpp
@@ -72,22 +72,22 @@
     return ts;
 }
 #endif
 
 typedef bool (*MediaQueryFunction)(CSSValue*, const CSSToLengthConversionData&, Frame&, MediaFeaturePrefix);
-typedef HashMap<AtomicStringImpl*, MediaQueryFunction> MediaQueryFunctionMap;
+typedef HashMap<AtomStringImpl*, MediaQueryFunction> MediaQueryFunctionMap;
 
-static bool isAccessibilitySettingsDependent(const AtomicString& mediaFeature)
+static bool isAccessibilitySettingsDependent(const AtomString& mediaFeature)
 {
     return mediaFeature == MediaFeatureNames::invertedColors
         || mediaFeature == MediaFeatureNames::maxMonochrome
         || mediaFeature == MediaFeatureNames::minMonochrome
         || mediaFeature == MediaFeatureNames::monochrome
         || mediaFeature == MediaFeatureNames::prefersReducedMotion;
 }
 
-static bool isViewportDependent(const AtomicString& mediaFeature)
+static bool isViewportDependent(const AtomString& mediaFeature)
 {
     return mediaFeature == MediaFeatureNames::width
         || mediaFeature == MediaFeatureNames::height
         || mediaFeature == MediaFeatureNames::minWidth
         || mediaFeature == MediaFeatureNames::minHeight
@@ -97,11 +97,11 @@
         || mediaFeature == MediaFeatureNames::aspectRatio
         || mediaFeature == MediaFeatureNames::minAspectRatio
         || mediaFeature == MediaFeatureNames::maxAspectRatio;
 }
 
-static bool isAppearanceDependent(const AtomicString& mediaFeature)
+static bool isAppearanceDependent(const AtomString& mediaFeature)
 {
     return mediaFeature == MediaFeatureNames::prefersDarkInterface
 #if ENABLE(DARK_MODE_CSS)
         || mediaFeature == MediaFeatureNames::prefersColorScheme
 #endif
@@ -691,45 +691,66 @@
 
 static bool hoverEvaluate(CSSValue* value, const CSSToLengthConversionData&, Frame&, MediaFeaturePrefix)
 {
     if (!is<CSSPrimitiveValue>(value)) {
 #if ENABLE(TOUCH_EVENTS)
-        return false;
+        return !screenIsTouchPrimaryInputDevice();
 #else
         return true;
 #endif
     }
 
     auto keyword = downcast<CSSPrimitiveValue>(*value).valueID();
 #if ENABLE(TOUCH_EVENTS)
-    return keyword == CSSValueNone;
-#else
-    return keyword == CSSValueHover;
+    if (screenIsTouchPrimaryInputDevice())
+        return keyword == CSSValueNone;
 #endif
+    return keyword == CSSValueHover;
 }
 
-static bool anyHoverEvaluate(CSSValue* value, const CSSToLengthConversionData& cssToLengthConversionData, Frame& frame, MediaFeaturePrefix prefix)
+static bool anyHoverEvaluate(CSSValue* value, const CSSToLengthConversionData&, Frame&, MediaFeaturePrefix)
 {
-    return hoverEvaluate(value, cssToLengthConversionData, frame, prefix);
+    if (!is<CSSPrimitiveValue>(value)) {
+#if ENABLE(TOUCH_EVENTS)
+        return !screenHasTouchDevice();
+#else
+        return true;
+#endif
+    }
+
+    auto keyword = downcast<CSSPrimitiveValue>(*value).valueID();
+#if ENABLE(TOUCH_EVENTS)
+    if (screenHasTouchDevice())
+        return keyword == CSSValueNone;
+#endif
+    return keyword == CSSValueHover;
 }
 
 static bool pointerEvaluate(CSSValue* value, const CSSToLengthConversionData&, Frame&, MediaFeaturePrefix)
 {
     if (!is<CSSPrimitiveValue>(value))
         return true;
 
     auto keyword = downcast<CSSPrimitiveValue>(*value).valueID();
 #if ENABLE(TOUCH_EVENTS)
-    return keyword == CSSValueCoarse;
-#else
-    return keyword == CSSValueFine;
+    if (screenIsTouchPrimaryInputDevice())
+        return keyword == CSSValueCoarse;
 #endif
+    return keyword == CSSValueFine;
 }
 
-static bool anyPointerEvaluate(CSSValue* value, const CSSToLengthConversionData& cssToLengthConversionData, Frame& frame, MediaFeaturePrefix prefix)
+static bool anyPointerEvaluate(CSSValue* value, const CSSToLengthConversionData&, Frame&, MediaFeaturePrefix)
 {
-    return pointerEvaluate(value, cssToLengthConversionData, frame, prefix);
+    if (!is<CSSPrimitiveValue>(value))
+        return true;
+
+    auto keyword = downcast<CSSPrimitiveValue>(*value).valueID();
+#if ENABLE(TOUCH_EVENTS)
+    if (screenHasTouchDevice())
+        return keyword == CSSValueCoarse;
+#endif
+    return keyword == CSSValueFine;
 }
 
 static bool prefersDarkInterfaceEvaluate(CSSValue* value, const CSSToLengthConversionData&, Frame& frame, MediaFeaturePrefix)
 {
     bool prefersDarkInterface = false;
@@ -744,12 +765,10 @@
 }
 
 #if ENABLE(DARK_MODE_CSS)
 static bool prefersColorSchemeEvaluate(CSSValue* value, const CSSToLengthConversionData&, Frame& frame, MediaFeaturePrefix)
 {
-    ASSERT(RuntimeEnabledFeatures::sharedFeatures().darkModeCSSEnabled());
-
     if (!value)
         return true;
 
     if (!is<CSSPrimitiveValue>(value))
         return false;
@@ -819,11 +838,11 @@
     return false;
 }
 #endif // ENABLE(APPLICATION_MANIFEST)
 
 // Use this function instead of calling add directly to avoid inlining.
-static void add(MediaQueryFunctionMap& map, AtomicStringImpl* key, MediaQueryFunction value)
+static void add(MediaQueryFunctionMap& map, AtomStringImpl* key, MediaQueryFunction value)
 {
     map.add(key, value);
 }
 
 bool MediaQueryEvaluator::evaluate(const MediaQueryExpression& expression) const
