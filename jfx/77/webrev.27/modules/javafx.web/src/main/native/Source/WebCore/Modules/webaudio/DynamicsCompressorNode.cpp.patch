diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/DynamicsCompressorNode.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/DynamicsCompressorNode.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/DynamicsCompressorNode.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/DynamicsCompressorNode.cpp
@@ -30,24 +30,27 @@
 
 #include "AudioContext.h"
 #include "AudioNodeInput.h"
 #include "AudioNodeOutput.h"
 #include "DynamicsCompressor.h"
+#include <wtf/IsoMallocInlines.h>
 
 // Set output to stereo by default.
 static const unsigned defaultNumberOfOutputChannels = 2;
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(DynamicsCompressorNode);
+
 DynamicsCompressorNode::DynamicsCompressorNode(AudioContext& context, float sampleRate)
     : AudioNode(context, sampleRate)
 {
-    addInput(std::make_unique<AudioNodeInput>(this));
-    addOutput(std::make_unique<AudioNodeOutput>(this, defaultNumberOfOutputChannels));
-
     setNodeType(NodeTypeDynamicsCompressor);
 
+    addInput(makeUnique<AudioNodeInput>(this));
+    addOutput(makeUnique<AudioNodeOutput>(this, defaultNumberOfOutputChannels));
+
     m_threshold = AudioParam::create(context, "threshold", -24, -100, 0);
     m_knee = AudioParam::create(context, "knee", 30, 0, 40);
     m_ratio = AudioParam::create(context, "ratio", 12, 1, 20);
     m_reduction = AudioParam::create(context, "reduction", 0, -20, 0);
     m_attack = AudioParam::create(context, "attack", 0.003, 0, 1);
@@ -93,11 +96,11 @@
 {
     if (isInitialized())
         return;
 
     AudioNode::initialize();
-    m_dynamicsCompressor = std::make_unique<DynamicsCompressor>(sampleRate(), defaultNumberOfOutputChannels);
+    m_dynamicsCompressor = makeUnique<DynamicsCompressor>(sampleRate(), defaultNumberOfOutputChannels);
 }
 
 void DynamicsCompressorNode::uninitialize()
 {
     if (!isInitialized())
