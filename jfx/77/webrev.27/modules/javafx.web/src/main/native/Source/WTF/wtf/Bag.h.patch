diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/Bag.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/Bag.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/Bag.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/Bag.h
@@ -26,35 +26,39 @@
 #pragma once
 
 #include <wtf/DumbPtrTraits.h>
 #include <wtf/FastMalloc.h>
 #include <wtf/Noncopyable.h>
+#include <wtf/Packed.h>
 
 namespace WTF {
 
 namespace Private {
 
-template<typename T>
+template<typename T, typename PassedPtrTraits = DumbPtrTraits<T>>
 class BagNode {
     WTF_MAKE_FAST_ALLOCATED;
 public:
+    using PtrTraits = typename PassedPtrTraits::template RebindTraits<BagNode>;
+
     template<typename... Args>
     BagNode(Args&&... args)
         : m_item(std::forward<Args>(args)...)
     { }
 
     T m_item;
-    BagNode* m_next { nullptr };
+    typename PtrTraits::StorageType m_next { nullptr };
 };
 
 } // namespace Private
 
-template<typename T, typename PtrTraits = DumbPtrTraits<Private::BagNode<T>>>
-class Bag {
+template<typename T, typename PassedPtrTraits = DumbPtrTraits<T>>
+class Bag final {
     WTF_MAKE_NONCOPYABLE(Bag);
     WTF_MAKE_FAST_ALLOCATED;
-    using Node = Private::BagNode<T>;
+    using Node = Private::BagNode<T, PassedPtrTraits>;
+    using PtrTraits = typename PassedPtrTraits::template RebindTraits<Node>;
 
 public:
     Bag() = default;
 
     template<typename U>
@@ -63,29 +67,21 @@
         ASSERT(!m_head);
         m_head = other.unwrappedHead();
         other.m_head = nullptr;
     }
 
-    template<typename U>
-    Bag& operator=(Bag<T, U>&& other)
-    {
-        m_head = other.unwrappedHead();
-        other.m_head = nullptr;
-        return *this;
-    }
-
     ~Bag()
     {
         clear();
     }
 
     void clear()
     {
         Node* head = this->unwrappedHead();
         while (head) {
             Node* current = head;
-            head = current->m_next;
+            head = Node::PtrTraits::unwrap(current->m_next);
             delete current;
         }
         m_head = nullptr;
     }
 
@@ -97,10 +93,11 @@
         m_head = newNode;
         return &newNode->m_item;
     }
 
     class iterator {
+        WTF_MAKE_FAST_ALLOCATED;
     public:
         iterator()
             : m_node(0)
         {
         }
@@ -110,11 +107,11 @@
 
         T* operator*() const { return &m_node->m_item; }
 
         iterator& operator++()
         {
-            m_node = m_node->m_next;
+            m_node = Node::PtrTraits::unwrap(m_node->m_next);
             return *this;
         }
 
         bool operator==(const iterator& other) const
         {
@@ -154,8 +151,12 @@
     Node* unwrappedHead() const { return PtrTraits::unwrap(m_head); }
 
     typename PtrTraits::StorageType m_head { nullptr };
 };
 
+template<typename T>
+using PackedBag = Bag<T, PackedPtrTraits<T>>;
+
 } // namespace WTF
 
 using WTF::Bag;
+using WTF::PackedBag;
