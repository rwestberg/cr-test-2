diff a/modules/javafx.web/src/main/native/Source/WebCore/animation/WebAnimation.cpp b/modules/javafx.web/src/main/native/Source/WebCore/animation/WebAnimation.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/animation/WebAnimation.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/animation/WebAnimation.cpp
@@ -34,14 +34,18 @@
 #include "EventNames.h"
 #include "JSWebAnimation.h"
 #include "KeyframeEffect.h"
 #include "Microtasks.h"
 #include "WebAnimationUtilities.h"
+#include <wtf/IsoMallocInlines.h>
+#include <wtf/Optional.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(WebAnimation);
+
 Ref<WebAnimation> WebAnimation::create(Document& document, AnimationEffect* effect)
 {
     auto result = adoptRef(*new WebAnimation(document));
     result->setEffect(effect);
     result->setTimeline(&document.timeline());
@@ -525,11 +529,11 @@
 
     // For animation, current time is resolved and either of the following conditions are true:
     // animation's effective playback rate > 0 and current time ≥ target effect end; or
     // animation's effective playback rate < 0 and current time ≤ 0,
     // → finished
-    if (animationCurrentTime && ((effectivePlaybackRate() > 0 && animationCurrentTime.value() >= effectEndTime()) || (effectivePlaybackRate() < 0 && animationCurrentTime.value() <= 0_s)))
+    if (animationCurrentTime && ((effectivePlaybackRate() > 0 && (*animationCurrentTime + timeEpsilon) >= effectEndTime()) || (effectivePlaybackRate() < 0 && (*animationCurrentTime - timeEpsilon) <= 0_s)))
         return PlayState::Finished;
 
     // Otherwise → running
     return PlayState::Running;
 }
@@ -592,11 +596,11 @@
     timingDidChange(DidSeek::No, SynchronouslyNotify::No);
 
     invalidateEffect();
 }
 
-void WebAnimation::enqueueAnimationPlaybackEvent(const AtomicString& type, Optional<Seconds> currentTime, Optional<Seconds> timelineTime)
+void WebAnimation::enqueueAnimationPlaybackEvent(const AtomString& type, Optional<Seconds> currentTime, Optional<Seconds> timelineTime)
 {
     auto event = AnimationPlaybackEvent::create(type, currentTime, timelineTime);
     event->setTarget(this);
 
     if (is<DocumentTimeline>(m_timeline)) {
@@ -771,11 +775,11 @@
             finishNotificationSteps();
         } else if (!m_finishNotificationStepsMicrotaskPending) {
             // Otherwise, if synchronously notify is false, queue a microtask to run finish notification steps for animation unless there
             // is already a microtask queued to run those steps for animation.
             m_finishNotificationStepsMicrotaskPending = true;
-            MicrotaskQueue::mainThreadQueue().append(std::make_unique<VoidMicrotask>([this, protectedThis = makeRef(*this)] () {
+            MicrotaskQueue::mainThreadQueue().append(makeUnique<VoidMicrotask>([this, protectedThis = makeRef(*this)] () {
                 if (m_finishNotificationStepsMicrotaskPending) {
                     m_finishNotificationStepsMicrotaskPending = false;
                     finishNotificationSteps();
                 }
             }));
@@ -1151,19 +1155,29 @@
     return "Animation";
 }
 
 bool WebAnimation::canSuspendForDocumentSuspension() const
 {
-    return !hasPendingActivity();
+    // Use the base class's implementation of hasPendingActivity() since we wouldn't want the custom implementation
+    // in this class designed to keep JS wrappers alive to interfere with the ability for a page using animations
+    // to enter the page cache.
+    return !ActiveDOMObject::hasPendingActivity();
 }
 
 void WebAnimation::stop()
 {
+    ActiveDOMObject::stop();
     m_isStopped = true;
     removeAllEventListeners();
 }
 
+bool WebAnimation::hasPendingActivity() const
+{
+    // Keep the JS wrapper alive if the animation is considered relevant or could become relevant again by virtue of having a timeline.
+    return m_timeline || m_isRelevant || ActiveDOMObject::hasPendingActivity();
+}
+
 void WebAnimation::updateRelevance()
 {
     m_isRelevant = computeRelevance();
 }
 
