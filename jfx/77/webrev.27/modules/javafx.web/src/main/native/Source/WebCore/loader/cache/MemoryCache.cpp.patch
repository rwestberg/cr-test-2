diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/MemoryCache.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/MemoryCache.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/MemoryCache.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/MemoryCache.cpp
@@ -84,11 +84,11 @@
 auto MemoryCache::ensureSessionResourceMap(PAL::SessionID sessionID) -> CachedResourceMap&
 {
     ASSERT(sessionID.isValid());
     auto& map = m_sessionResources.add(sessionID, nullptr).iterator->value;
     if (!map)
-        map = std::make_unique<CachedResourceMap>();
+        map = makeUnique<CachedResourceMap>();
     return *map;
 }
 
 bool MemoryCache::shouldRemoveFragmentIdentifier(const URL& originalURL)
 {
@@ -214,11 +214,11 @@
 {
     ASSERT(image);
     removeImageFromCache(url, domainForCachePartition); // Remove cache entry if it already exists.
 
     auto bitmapImage = BitmapImage::create(WTFMove(image), nullptr);
-    auto cachedImage = std::make_unique<CachedImage>(url, bitmapImage.ptr(), sessionID, cookieJar, domainForCachePartition);
+    auto cachedImage = makeUnique<CachedImage>(url, bitmapImage.ptr(), sessionID, cookieJar, domainForCachePartition);
 
     cachedImage->addClient(dummyCachedImageClient());
     cachedImage->setDecodedSize(bitmapImage->decodedSize());
 
     return add(*cachedImage.release());
@@ -471,11 +471,11 @@
     resource.m_lruIndex = queueIndex;
 #endif
 
     m_allResources.reserveCapacity(queueIndex + 1);
     while (m_allResources.size() <= queueIndex)
-        m_allResources.uncheckedAppend(std::make_unique<LRUList>());
+        m_allResources.uncheckedAppend(makeUnique<LRUList>());
     return *m_allResources[queueIndex];
 }
 
 void MemoryCache::removeFromLRUList(CachedResource& resource)
 {
