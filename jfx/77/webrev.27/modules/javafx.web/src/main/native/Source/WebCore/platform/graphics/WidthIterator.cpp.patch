diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/WidthIterator.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/WidthIterator.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/WidthIterator.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/WidthIterator.cpp
@@ -63,11 +63,11 @@
     }
 }
 
 struct OriginalAdvancesForCharacterTreatedAsSpace {
 public:
-    OriginalAdvancesForCharacterTreatedAsSpace(bool isSpace, float advanceBefore, float advanceAt)
+    explicit OriginalAdvancesForCharacterTreatedAsSpace(bool isSpace, float advanceBefore, float advanceAt)
         : characterIsSpace(isSpace)
         , advanceBeforeCharacter(advanceBefore)
         , advanceAtCharacter(advanceAt)
     {
     }
@@ -274,12 +274,11 @@
                 forbidTrailingExpansion = m_run.ltr() ? currentIsLastCharacter : !currentCharacter;
             bool ideograph = (expandAroundIdeographs && FontCascade::isCJKIdeographOrSymbol(character));
             if (treatAsSpace || ideograph || forceLeadingExpansion || forceTrailingExpansion) {
                 // Distribute the run's total expansion evenly over all expansion opportunities in the run.
                 if (m_expansion) {
-                    bool expandLeft, expandRight;
-                    std::tie(expandLeft, expandRight) = expansionLocation(ideograph, treatAsSpace, m_run.ltr(), m_isAfterExpansion, forbidLeadingExpansion, forbidTrailingExpansion, forceLeadingExpansion, forceTrailingExpansion);
+                    auto [expandLeft, expandRight] = expansionLocation(ideograph, treatAsSpace, m_run.ltr(), m_isAfterExpansion, forbidLeadingExpansion, forbidTrailingExpansion, forceLeadingExpansion, forceTrailingExpansion);
                     if (expandLeft) {
                         if (m_run.ltr()) {
                             // Increase previous width
                             m_expansion -= m_expansionPerOpportunity;
                             m_runWidthSoFar += m_expansionPerOpportunity;
