diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/animation/SMILTimeContainer.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/animation/SMILTimeContainer.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/animation/SMILTimeContainer.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/animation/SMILTimeContainer.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2008 Apple Inc. All rights reserved.
+ * Copyright (C) 2008-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -40,11 +40,10 @@
 class SVGSVGElement;
 
 class SMILTimeContainer final : public RefCounted<SMILTimeContainer>  {
 public:
     static Ref<SMILTimeContainer> create(SVGSVGElement& owner) { return adoptRef(*new SMILTimeContainer(owner)); }
-    ~SMILTimeContainer();
 
     void schedule(SVGSMILElement*, SVGElement*, const QualifiedName&);
     void unschedule(SVGSMILElement*, SVGElement*, const QualifiedName&);
     void notifyIntervalsChanged();
 
@@ -68,31 +67,27 @@
 
     void timerFired();
     void startTimer(SMILTime elapsed, SMILTime fireTime, SMILTime minimumDelay = 0);
     void updateAnimations(SMILTime elapsed, bool seekToTime = false);
 
+    typedef std::pair<SVGElement*, QualifiedName> ElementAttributePair;
+    typedef Vector<SVGSMILElement*> AnimationsVector;
+    typedef HashMap<ElementAttributePair, std::unique_ptr<AnimationsVector>> GroupedAnimationsMap;
+
+    void processAnimations(const AnimationsVector&, Function<void(SVGSMILElement*)>&&);
+    void processScheduledAnimations(Function<void(SVGSMILElement*)>&&);
     void updateDocumentOrderIndexes();
-    void sortByPriority(Vector<SVGSMILElement*>& smilElements, SMILTime elapsed);
+    void sortByPriority(AnimationsVector& smilElements, SMILTime elapsed);
 
     MonotonicTime m_beginTime;
     MonotonicTime m_pauseTime;
     Seconds m_accumulatedActiveTime { 0_s };
     MonotonicTime m_resumeTime;
     Seconds m_presetStartTime { 0_s };
 
     bool m_documentOrderIndexesDirty { false };
-
     Timer m_timer;
-
-    typedef std::pair<SVGElement*, QualifiedName> ElementAttributePair;
-    typedef Vector<SVGSMILElement*> AnimationsVector;
-    typedef HashMap<ElementAttributePair, std::unique_ptr<AnimationsVector>> GroupedAnimationsMap;
     GroupedAnimationsMap m_scheduledAnimations;
-
     SVGSVGElement& m_ownerSVGElement;
-
-#ifndef NDEBUG
-    bool m_preventScheduledAnimationsChanges { false };
-#endif
 };
 
 } // namespace WebCore
