diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/PannerNode.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/PannerNode.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/PannerNode.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/PannerNode.cpp
@@ -32,14 +32,17 @@
 #include "AudioContext.h"
 #include "AudioNodeInput.h"
 #include "AudioNodeOutput.h"
 #include "HRTFPanner.h"
 #include "ScriptExecutionContext.h"
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/MathExtras.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(PannerNode);
+
 static void fixNANs(double &x)
 {
     if (std::isnan(x) || std::isinf(x))
         x = 0.0;
 }
@@ -48,15 +51,17 @@
     : AudioNode(context, sampleRate)
     , m_panningModel(PanningModelType::HRTF)
     , m_lastGain(-1.0)
     , m_connectionCount(0)
 {
+    setNodeType(NodeTypePanner);
+
     // Load the HRTF database asynchronously so we don't block the Javascript thread while creating the HRTF database.
     m_hrtfDatabaseLoader = HRTFDatabaseLoader::createAndLoadAsynchronouslyIfNecessary(context.sampleRate());
 
-    addInput(std::make_unique<AudioNodeInput>(this));
-    addOutput(std::make_unique<AudioNodeOutput>(this, 2));
+    addInput(makeUnique<AudioNodeInput>(this));
+    addOutput(makeUnique<AudioNodeOutput>(this, 2));
 
     // Node-specific default mixing rules.
     m_channelCount = 2;
     m_channelCountMode = ClampedMax;
     m_channelInterpretation = AudioBus::Speakers;
@@ -66,12 +71,10 @@
 
     m_position = FloatPoint3D(0, 0, 0);
     m_orientation = FloatPoint3D(1, 0, 0);
     m_velocity = FloatPoint3D(0, 0, 0);
 
-    setNodeType(NodeTypePanner);
-
     initialize();
 }
 
 PannerNode::~PannerNode()
 {
