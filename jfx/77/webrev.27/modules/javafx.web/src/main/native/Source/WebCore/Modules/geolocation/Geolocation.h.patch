diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/Geolocation.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/Geolocation.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/Geolocation.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/Geolocation.h
@@ -28,13 +28,13 @@
 
 #if ENABLE(GEOLOCATION)
 
 #include "ActiveDOMObject.h"
 #include "Document.h"
-#include "Geoposition.h"
+#include "GeolocationPosition.h"
+#include "GeolocationPositionError.h"
 #include "PositionCallback.h"
-#include "PositionError.h"
 #include "PositionErrorCallback.h"
 #include "PositionOptions.h"
 #include "ScriptWrappable.h"
 #include "Timer.h"
 #include <wtf/HashMap.h>
@@ -43,24 +43,25 @@
 namespace WebCore {
 
 class Frame;
 class GeoNotifier;
 class GeolocationError;
+class Navigator;
 class Page;
 class ScriptExecutionContext;
 class SecurityOrigin;
 struct PositionOptions;
 
-class Geolocation : public ScriptWrappable, public RefCounted<Geolocation>, public ActiveDOMObject {
+class Geolocation final : public ScriptWrappable, public RefCounted<Geolocation>, public ActiveDOMObject {
+    WTF_MAKE_ISO_ALLOCATED(Geolocation);
     friend class GeoNotifier;
 public:
-    static Ref<Geolocation> create(ScriptExecutionContext*);
+    static Ref<Geolocation> create(Navigator&);
     WEBCORE_EXPORT ~Geolocation();
 
     WEBCORE_EXPORT void resetAllGeolocationPermission();
     Document* document() const { return downcast<Document>(scriptExecutionContext()); }
-    Frame* frame() const { return document() ? document()->frame() : nullptr; }
 
     void getCurrentPosition(Ref<PositionCallback>&&, RefPtr<PositionErrorCallback>&&, PositionOptions&&);
     int watchPosition(Ref<PositionCallback>&&, RefPtr<PositionErrorCallback>&&, PositionOptions&&);
     void clearWatch(int watchID);
 
@@ -70,14 +71,17 @@
 
     void positionChanged();
     void setError(GeolocationError&);
     bool shouldBlockGeolocationRequests();
 
+    Navigator* navigator();
+    WEBCORE_EXPORT Frame* frame() const;
+
 private:
-    explicit Geolocation(ScriptExecutionContext*);
+    explicit Geolocation(Navigator&);
 
-    Geoposition* lastPosition();
+    GeolocationPosition* lastPosition();
 
     // ActiveDOMObject
     void stop() override;
     bool canSuspendForDocumentSuspension() const override;
     void suspend(ReasonForSuspension) override;
@@ -109,12 +113,12 @@
         NotifierToIdMap m_notifierToIdMap;
     };
 
     bool hasListeners() const { return !m_oneShots.isEmpty() || !m_watchers.isEmpty(); }
 
-    void sendError(GeoNotifierVector&, PositionError&);
-    void sendPosition(GeoNotifierVector&, Geoposition&);
+    void sendError(GeoNotifierVector&, GeolocationPositionError&);
+    void sendPosition(GeoNotifierVector&, GeolocationPosition&);
 
     static void extractNotifiersWithCachedPosition(GeoNotifierVector& notifiers, GeoNotifierVector* cached);
     static void copyToSet(const GeoNotifierVector&, GeoNotifierSet&);
 
     static void stopTimer(GeoNotifierVector&);
@@ -123,12 +127,12 @@
     void stopTimers();
 
     void cancelRequests(GeoNotifierVector&);
     void cancelAllRequests();
 
-    void makeSuccessCallbacks(Geoposition&);
-    void handleError(PositionError&);
+    void makeSuccessCallbacks(GeolocationPosition&);
+    void handleError(GeolocationPositionError&);
 
     void requestPermission();
 
     bool startUpdating(GeoNotifier*);
     void stopUpdating();
@@ -141,29 +145,24 @@
     void requestTimedOut(GeoNotifier*);
     void requestUsesCachedPosition(GeoNotifier*);
     bool haveSuitableCachedPosition(const PositionOptions&);
     void makeCachedPositionCallbacks();
 
+    void resumeTimerFired();
+
+    WeakPtr<Navigator> m_navigator;
     GeoNotifierSet m_oneShots;
     Watchers m_watchers;
     GeoNotifierSet m_pendingForPermissionNotifiers;
-    RefPtr<Geoposition> m_lastPosition;
-
-    enum {
-        Unknown,
-        InProgress,
-        Yes,
-        No
-    } m_allowGeolocation;
-    bool m_isSuspended;
-    bool m_resetOnResume;
-    bool m_hasChangedPosition;
-    RefPtr<PositionError> m_errorWaitingForResume;
+    RefPtr<GeolocationPosition> m_lastPosition;
 
-    void resumeTimerFired();
+    enum { Unknown, InProgress, Yes, No } m_allowGeolocation { Unknown };
+    bool m_isSuspended { false };
+    bool m_resetOnResume { false };
+    bool m_hasChangedPosition { false };
+    RefPtr<GeolocationPositionError> m_errorWaitingForResume;
     Timer m_resumeTimer;
-
     GeoNotifierSet m_requestsAwaitingCachedPosition;
 };
 
 } // namespace WebCore
 
