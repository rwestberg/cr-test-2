diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLLIElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLLIElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLLIElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLLIElement.cpp
@@ -61,11 +61,11 @@
     if (name == typeAttr)
         return true;
     return HTMLElement::isPresentationAttribute(name);
 }
 
-void HTMLLIElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomicString& value, MutableStyleProperties& style)
+void HTMLLIElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomString& value, MutableStyleProperties& style)
 {
     if (name == typeAttr) {
         if (value == "a")
             addPropertyToPresentationAttributeStyle(style, CSSPropertyListStyleType, CSSValueLowerAlpha);
         else if (value == "A")
@@ -80,11 +80,11 @@
             addPropertyToPresentationAttributeStyle(style, CSSPropertyListStyleType, value);
     } else
         HTMLElement::collectStyleForPresentationAttribute(name, value, style);
 }
 
-void HTMLLIElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLLIElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == valueAttr) {
         if (renderer() && renderer()->isListItem())
             parseValue(value);
     } else
@@ -112,11 +112,11 @@
         listItemRenderer.setNotInList(true);
 
     parseValue(attributeWithoutSynchronization(valueAttr));
 }
 
-inline void HTMLLIElement::parseValue(const AtomicString& value)
+inline void HTMLLIElement::parseValue(const AtomString& value)
 {
     ASSERT(renderer());
 
     bool valueOK;
     int requestedValue = value.toInt(&valueOK);
