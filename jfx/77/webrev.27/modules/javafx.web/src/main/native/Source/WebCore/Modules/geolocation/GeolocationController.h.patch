diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/GeolocationController.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/GeolocationController.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/GeolocationController.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/GeolocationController.h
@@ -36,11 +36,11 @@
 
 namespace WebCore {
 
 class GeolocationClient;
 class GeolocationError;
-class GeolocationPosition;
+class GeolocationPositionData;
 
 class GeolocationController : public Supplement<Page>, private ActivityStateChangeObserver {
     WTF_MAKE_FAST_ALLOCATED;
     WTF_MAKE_NONCOPYABLE(GeolocationController);
 public:
@@ -51,14 +51,14 @@
     void removeObserver(Geolocation&);
 
     void requestPermission(Geolocation&);
     void cancelPermissionRequest(Geolocation&);
 
-    WEBCORE_EXPORT void positionChanged(const Optional<GeolocationPosition>&);
+    WEBCORE_EXPORT void positionChanged(const Optional<GeolocationPositionData>&);
     WEBCORE_EXPORT void errorOccurred(GeolocationError&);
 
-    Optional<GeolocationPosition> lastPosition();
+    Optional<GeolocationPositionData> lastPosition();
 
     GeolocationClient& client() { return m_client; }
 
     WEBCORE_EXPORT static const char* supplementName();
     static GeolocationController* from(Page* page) { return static_cast<GeolocationController*>(Supplement<Page>::from(page, supplementName())); }
@@ -67,11 +67,11 @@
     Page& m_page;
     GeolocationClient& m_client;
 
     void activityStateDidChange(OptionSet<ActivityState::Flag> oldActivityState, OptionSet<ActivityState::Flag> newActivityState) override;
 
-    Optional<GeolocationPosition> m_lastPosition;
+    Optional<GeolocationPositionData> m_lastPosition;
 
     typedef HashSet<Ref<Geolocation>> ObserversSet;
     // All observers; both those requesting high accuracy and those not.
     ObserversSet m_observers;
     ObserversSet m_highAccuracyObservers;
