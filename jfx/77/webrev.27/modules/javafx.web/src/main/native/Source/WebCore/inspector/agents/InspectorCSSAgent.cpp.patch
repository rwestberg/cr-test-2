diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorCSSAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorCSSAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorCSSAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorCSSAgent.cpp
@@ -41,26 +41,29 @@
 #include "DOMWindow.h"
 #include "FontCache.h"
 #include "Frame.h"
 #include "HTMLHeadElement.h"
 #include "HTMLStyleElement.h"
+#include "InspectorDOMAgent.h"
 #include "InspectorHistory.h"
 #include "InspectorPageAgent.h"
 #include "InstrumentingAgents.h"
 #include "Node.h"
 #include "NodeList.h"
 #include "PseudoElement.h"
+#include "RenderStyleConstants.h"
 #include "SVGStyleElement.h"
 #include "SelectorChecker.h"
 #include "ShadowRoot.h"
 #include "StyleProperties.h"
 #include "StylePropertyShorthand.h"
 #include "StyleResolver.h"
 #include "StyleRule.h"
 #include "StyleScope.h"
 #include "StyleSheetList.h"
 #include <JavaScriptCore/InspectorProtocolObjects.h>
+#include <wtf/Optional.h>
 #include <wtf/Ref.h>
 #include <wtf/Vector.h>
 #include <wtf/text/CString.h>
 #include <wtf/text/StringConcatenateNumbers.h>
 
@@ -290,70 +293,58 @@
     if (!is<CSSStyleRule>(rule))
         return nullptr;
     return downcast<CSSStyleRule>(&rule);
 }
 
-InspectorCSSAgent::InspectorCSSAgent(WebAgentContext& context, InspectorDOMAgent* domAgent)
+InspectorCSSAgent::InspectorCSSAgent(WebAgentContext& context)
     : InspectorAgentBase("CSS"_s, context)
-    , m_frontendDispatcher(std::make_unique<CSSFrontendDispatcher>(context.frontendRouter))
+    , m_frontendDispatcher(makeUnique<CSSFrontendDispatcher>(context.frontendRouter))
     , m_backendDispatcher(CSSBackendDispatcher::create(context.backendDispatcher, this))
-    , m_domAgent(domAgent)
 {
-    m_domAgent->setDOMListener(this);
 }
 
-InspectorCSSAgent::~InspectorCSSAgent()
-{
-    ASSERT(!m_domAgent);
-    reset();
-}
+InspectorCSSAgent::~InspectorCSSAgent() = default;
 
 void InspectorCSSAgent::didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*)
 {
 }
 
 void InspectorCSSAgent::willDestroyFrontendAndBackend(Inspector::DisconnectReason)
 {
-    resetNonPersistentData();
-
     String unused;
     disable(unused);
 }
 
-void InspectorCSSAgent::discardAgent()
-{
-    m_domAgent->setDOMListener(nullptr);
-    m_domAgent = nullptr;
-}
-
 void InspectorCSSAgent::reset()
 {
     // FIXME: Should we be resetting on main frame navigations?
     m_idToInspectorStyleSheet.clear();
     m_cssStyleSheetToInspectorStyleSheet.clear();
     m_nodeToInspectorStyleSheet.clear();
     m_documentToInspectorStyleSheet.clear();
     m_documentToKnownCSSStyleSheets.clear();
-    resetNonPersistentData();
-}
-
-void InspectorCSSAgent::resetNonPersistentData()
-{
     resetPseudoStates();
 }
 
 void InspectorCSSAgent::enable(ErrorString&)
 {
+    if (m_instrumentingAgents.inspectorCSSAgent() == this)
+        return;
+
     m_instrumentingAgents.setInspectorCSSAgent(this);
 
-    for (auto* document : m_domAgent->documents())
-        activeStyleSheetsUpdated(*document);
+    if (auto* domAgent = m_instrumentingAgents.inspectorDOMAgent()) {
+        for (auto* document : domAgent->documents())
+            activeStyleSheetsUpdated(*document);
+    }
 }
 
 void InspectorCSSAgent::disable(ErrorString&)
 {
     m_instrumentingAgents.setInspectorCSSAgent(nullptr);
+
+    reset();
 }
 
 void InspectorCSSAgent::documentDetached(Document& document)
 {
     Vector<CSSStyleSheet*> emptyList;
@@ -411,11 +402,15 @@
 bool InspectorCSSAgent::forcePseudoState(const Element& element, CSSSelector::PseudoClassType pseudoClassType)
 {
     if (m_nodeIdToForcedPseudoState.isEmpty())
         return false;
 
-    int nodeId = m_domAgent->boundNodeId(&element);
+    auto* domAgent = m_instrumentingAgents.inspectorDOMAgent();
+    if (!domAgent)
+        return false;
+
+    int nodeId = domAgent->boundNodeId(&element);
     if (!nodeId)
         return false;
 
     unsigned forcedPseudoState = m_nodeIdToForcedPseudoState.get(nodeId);
     switch (pseudoClassType) {
@@ -430,10 +425,46 @@
     default:
         return false;
     }
 }
 
+static Optional<Inspector::Protocol::CSS::PseudoId> protocolValueForPseudoId(PseudoId pseudoId)
+{
+    switch (pseudoId) {
+    case PseudoId::FirstLine:
+        return Inspector::Protocol::CSS::PseudoId::FirstLine;
+    case PseudoId::FirstLetter:
+        return Inspector::Protocol::CSS::PseudoId::FirstLetter;
+    case PseudoId::Marker:
+        return Inspector::Protocol::CSS::PseudoId::Marker;
+    case PseudoId::Before:
+        return Inspector::Protocol::CSS::PseudoId::Before;
+    case PseudoId::After:
+        return Inspector::Protocol::CSS::PseudoId::After;
+    case PseudoId::Selection:
+        return Inspector::Protocol::CSS::PseudoId::Selection;
+    case PseudoId::Scrollbar:
+        return Inspector::Protocol::CSS::PseudoId::Scrollbar;
+    case PseudoId::ScrollbarThumb:
+        return Inspector::Protocol::CSS::PseudoId::ScrollbarThumb;
+    case PseudoId::ScrollbarButton:
+        return Inspector::Protocol::CSS::PseudoId::ScrollbarButton;
+    case PseudoId::ScrollbarTrack:
+        return Inspector::Protocol::CSS::PseudoId::ScrollbarTrack;
+    case PseudoId::ScrollbarTrackPiece:
+        return Inspector::Protocol::CSS::PseudoId::ScrollbarTrackPiece;
+    case PseudoId::ScrollbarCorner:
+        return Inspector::Protocol::CSS::PseudoId::ScrollbarCorner;
+    case PseudoId::Resizer:
+        return Inspector::Protocol::CSS::PseudoId::Resizer;
+
+    default:
+        ASSERT_NOT_REACHED();
+        return { };
+    }
+}
+
 void InspectorCSSAgent::getMatchedStylesForNode(ErrorString& errorString, int nodeId, const bool* includePseudo, const bool* includeInherited, RefPtr<JSON::ArrayOf<Inspector::Protocol::CSS::RuleMatch>>& matchedCSSRules, RefPtr<JSON::ArrayOf<Inspector::Protocol::CSS::PseudoIdMatches>>& pseudoIdMatches, RefPtr<JSON::ArrayOf<Inspector::Protocol::CSS::InheritedStyleEntry>>& inheritedEntries)
 {
     Element* element = elementForId(errorString, nodeId);
     if (!element)
         return;
@@ -441,11 +472,11 @@
     Element* originalElement = element;
     PseudoId elementPseudoId = element->pseudoId();
     if (elementPseudoId != PseudoId::None) {
         element = downcast<PseudoElement>(*element).hostElement();
         if (!element) {
-            errorString = "Pseudo element has no parent"_s;
+            errorString = "Missing parent of pseudo-element node for given nodeId"_s;
             return;
         }
     }
 
     // Matched rules.
@@ -456,17 +487,19 @@
     if (!originalElement->isPseudoElement()) {
         // Pseudo elements.
         if (!includePseudo || *includePseudo) {
             auto pseudoElements = JSON::ArrayOf<Inspector::Protocol::CSS::PseudoIdMatches>::create();
             for (PseudoId pseudoId = PseudoId::FirstPublicPseudoId; pseudoId < PseudoId::AfterLastInternalPseudoId; pseudoId = static_cast<PseudoId>(static_cast<unsigned>(pseudoId) + 1)) {
-                auto matchedRules = styleResolver.pseudoStyleRulesForElement(element, pseudoId, StyleResolver::AllCSSRules);
-                if (!matchedRules.isEmpty()) {
-                    auto matches = Inspector::Protocol::CSS::PseudoIdMatches::create()
-                        .setPseudoId(static_cast<int>(pseudoId))
-                        .setMatches(buildArrayForMatchedRuleList(matchedRules, styleResolver, *element, pseudoId))
-                        .release();
-                    pseudoElements->addItem(WTFMove(matches));
+                if (auto protocolPseudoId = protocolValueForPseudoId(pseudoId)) {
+                    auto matchedRules = styleResolver.pseudoStyleRulesForElement(element, pseudoId, StyleResolver::AllCSSRules);
+                    if (!matchedRules.isEmpty()) {
+                        auto matches = Inspector::Protocol::CSS::PseudoIdMatches::create()
+                            .setPseudoId(protocolPseudoId.value())
+                            .setMatches(buildArrayForMatchedRuleList(matchedRules, styleResolver, *element, pseudoId))
+                            .release();
+                        pseudoElements->addItem(WTFMove(matches));
+                    }
                 }
             }
 
             pseudoIdMatches = WTFMove(pseudoElements);
         }
@@ -532,12 +565,14 @@
 }
 
 void InspectorCSSAgent::collectAllStyleSheets(Vector<InspectorStyleSheet*>& result)
 {
     Vector<CSSStyleSheet*> cssStyleSheets;
-    for (auto* document : m_domAgent->documents())
-        collectAllDocumentStyleSheets(*document, cssStyleSheets);
+    if (auto* domAgent = m_instrumentingAgents.inspectorDOMAgent()) {
+        for (auto* document : domAgent->documents())
+            collectAllDocumentStyleSheets(*document, cssStyleSheets);
+    }
 
     for (auto* cssStyleSheet : cssStyleSheets)
         result.append(bindStyleSheet(cssStyleSheet));
 }
 
@@ -585,11 +620,17 @@
 {
     InspectorStyleSheet* inspectorStyleSheet = assertStyleSheetForId(errorString, styleSheetId);
     if (!inspectorStyleSheet)
         return;
 
-    auto result = m_domAgent->history()->perform(std::make_unique<SetStyleSheetTextAction>(inspectorStyleSheet, text));
+    auto* domAgent = m_instrumentingAgents.inspectorDOMAgent();
+    if (!domAgent) {
+        errorString = "DOM domain must be enabled"_s;
+        return;
+    }
+
+    auto result = domAgent->history()->perform(makeUnique<SetStyleSheetTextAction>(inspectorStyleSheet, text));
     if (result.hasException())
         errorString = InspectorDOMAgent::toErrorString(result.releaseException());
 }
 
 void InspectorCSSAgent::setStyleText(ErrorString& errorString, const JSON::Object& fullStyleId, const String& text, RefPtr<Inspector::Protocol::CSS::CSSStyle>& result)
@@ -599,11 +640,17 @@
 
     InspectorStyleSheet* inspectorStyleSheet = assertStyleSheetForId(errorString, compoundId.styleSheetId());
     if (!inspectorStyleSheet)
         return;
 
-    auto performResult = m_domAgent->history()->perform(std::make_unique<SetStyleTextAction>(inspectorStyleSheet, compoundId, text));
+    auto* domAgent = m_instrumentingAgents.inspectorDOMAgent();
+    if (!domAgent) {
+        errorString = "DOM domain must be enabled"_s;
+        return;
+    }
+
+    auto performResult = domAgent->history()->perform(makeUnique<SetStyleTextAction>(inspectorStyleSheet, compoundId, text));
     if (performResult.hasException()) {
         errorString = InspectorDOMAgent::toErrorString(performResult.releaseException());
         return;
     }
 
@@ -617,36 +664,46 @@
 
     InspectorStyleSheet* inspectorStyleSheet = assertStyleSheetForId(errorString, compoundId.styleSheetId());
     if (!inspectorStyleSheet)
         return;
 
-    auto performResult = m_domAgent->history()->perform(std::make_unique<SetRuleSelectorAction>(inspectorStyleSheet, compoundId, selector));
+    auto* domAgent = m_instrumentingAgents.inspectorDOMAgent();
+    if (!domAgent) {
+        errorString = "DOM domain must be enabled"_s;
+        return;
+    }
+
+    auto performResult = domAgent->history()->perform(makeUnique<SetRuleSelectorAction>(inspectorStyleSheet, compoundId, selector));
     if (performResult.hasException()) {
         errorString = InspectorDOMAgent::toErrorString(performResult.releaseException());
         return;
     }
 
     result = inspectorStyleSheet->buildObjectForRule(inspectorStyleSheet->ruleForId(compoundId), nullptr);
 }
 
 void InspectorCSSAgent::createStyleSheet(ErrorString& errorString, const String& frameId, String* styleSheetId)
 {
-    Frame* frame = m_domAgent->pageAgent()->frameForId(frameId);
-    if (!frame) {
-        errorString = "No frame for given id found"_s;
+    auto* pageAgent = m_instrumentingAgents.inspectorPageAgent();
+    if (!pageAgent) {
+        errorString = "Page domain must be enabled"_s;
         return;
     }
 
+    auto* frame = pageAgent->assertFrame(errorString, frameId);
+    if (!frame)
+        return;
+
     Document* document = frame->document();
     if (!document) {
-        errorString = "No document for frame"_s;
+        errorString = "Missing document of frame for given frameId"_s;
         return;
     }
 
     InspectorStyleSheet* inspectorStyleSheet = createInspectorStyleSheetForDocument(*document);
     if (!inspectorStyleSheet) {
-        errorString = "Could not create stylesheet for the frame."_s;
+        errorString = "Could not create style sheet for document of frame for given frameId"_s;
         return;
     }
 
     *styleSheetId = inspectorStyleSheet->id();
 }
@@ -655,11 +712,11 @@
 {
     if (!document.isHTMLDocument() && !document.isSVGDocument())
         return nullptr;
 
     auto styleElement = HTMLStyleElement::create(document);
-    styleElement->setAttributeWithoutSynchronization(HTMLNames::typeAttr, AtomicString("text/css", AtomicString::ConstructFromLiteral));
+    styleElement->setAttributeWithoutSynchronization(HTMLNames::typeAttr, AtomString("text/css", AtomString::ConstructFromLiteral));
 
     ContainerNode* targetNode;
     // HEAD is absent in ImageDocuments, for example.
     if (auto* head = document.head())
         targetNode = head;
@@ -693,18 +750,22 @@
 }
 
 void InspectorCSSAgent::addRule(ErrorString& errorString, const String& styleSheetId, const String& selector, RefPtr<Inspector::Protocol::CSS::CSSRule>& result)
 {
     InspectorStyleSheet* inspectorStyleSheet = assertStyleSheetForId(errorString, styleSheetId);
-    if (!inspectorStyleSheet) {
-        errorString = "No target stylesheet found"_s;
+    if (!inspectorStyleSheet)
+        return;
+
+    auto* domAgent = m_instrumentingAgents.inspectorDOMAgent();
+    if (!domAgent) {
+        errorString = "DOM domain must be enabled"_s;
         return;
     }
 
-    auto action = std::make_unique<AddRuleAction>(inspectorStyleSheet, selector);
+    auto action = makeUnique<AddRuleAction>(inspectorStyleSheet, selector);
     auto& rawAction = *action;
-    auto performResult = m_domAgent->history()->perform(WTFMove(action));
+    auto performResult = domAgent->history()->perform(WTFMove(action));
     if (performResult.hasException()) {
         errorString = InspectorDOMAgent::toErrorString(performResult.releaseException());
         return;
     }
 
@@ -746,11 +807,11 @@
 
         if (CSSParserFastPaths::isKeywordPropertyID(propertyID)) {
             auto values = JSON::ArrayOf<String>::create();
             for (int j = firstCSSValueKeyword; j <= lastCSSValueKeyword; ++j) {
                 CSSValueID valueID = convertToCSSValueID(j);
-                if (CSSParserFastPaths::isValidKeywordPropertyAndValue(propertyID, valueID, HTMLStandardMode))
+                if (CSSParserFastPaths::isValidKeywordPropertyAndValue(propertyID, valueID, strictCSSParserContext()))
                     values->addItem(getValueNameString(valueID));
             }
             if (values->length())
                 property->setValues(WTFMove(values));
         }
@@ -774,11 +835,17 @@
     fontFamilyNames = WTFMove(families);
 }
 
 void InspectorCSSAgent::forcePseudoState(ErrorString& errorString, int nodeId, const JSON::Array& forcedPseudoClasses)
 {
-    Element* element = m_domAgent->assertElement(errorString, nodeId);
+    auto* domAgent = m_instrumentingAgents.inspectorDOMAgent();
+    if (!domAgent) {
+        errorString = "DOM domain must be enabled"_s;
+        return;
+    }
+
+    Element* element = domAgent->assertElement(errorString, nodeId);
     if (!element)
         return;
 
     // Return early if the forced pseudo state was already set correctly.
     unsigned forcedPseudoState = computePseudoClassMask(forcedPseudoClasses);
@@ -800,28 +867,25 @@
 
 InspectorStyleSheetForInlineStyle& InspectorCSSAgent::asInspectorStyleSheet(StyledElement& element)
 {
     return m_nodeToInspectorStyleSheet.ensure(&element, [this, &element] {
         String newStyleSheetId = String::number(m_lastStyleSheetId++);
-        auto inspectorStyleSheet = InspectorStyleSheetForInlineStyle::create(m_domAgent->pageAgent(), newStyleSheetId, element, Inspector::Protocol::CSS::StyleSheetOrigin::Regular, this);
+        auto inspectorStyleSheet = InspectorStyleSheetForInlineStyle::create(m_instrumentingAgents.inspectorPageAgent(), newStyleSheetId, element, Inspector::Protocol::CSS::StyleSheetOrigin::Regular, this);
         m_idToInspectorStyleSheet.set(newStyleSheetId, inspectorStyleSheet.copyRef());
         return inspectorStyleSheet;
     }).iterator->value;
 }
 
 Element* InspectorCSSAgent::elementForId(ErrorString& errorString, int nodeId)
 {
-    Node* node = m_domAgent->nodeForId(nodeId);
-    if (!node) {
-        errorString = "No node with given id found"_s;
-        return nullptr;
-    }
-    if (!is<Element>(*node)) {
-        errorString = "Not an element node"_s;
+    auto* domAgent = m_instrumentingAgents.inspectorDOMAgent();
+    if (!domAgent) {
+        errorString = "DOM domain must be enabled"_s;
         return nullptr;
     }
-    return downcast<Element>(node);
+
+    return domAgent->assertElement(errorString, nodeId);
 }
 
 String InspectorCSSAgent::unbindStyleSheet(InspectorStyleSheet* inspectorStyleSheet)
 {
     String id = inspectorStyleSheet->id();
@@ -835,11 +899,11 @@
 {
     RefPtr<InspectorStyleSheet> inspectorStyleSheet = m_cssStyleSheetToInspectorStyleSheet.get(styleSheet);
     if (!inspectorStyleSheet) {
         String id = String::number(m_lastStyleSheetId++);
         Document* document = styleSheet->ownerDocument();
-        inspectorStyleSheet = InspectorStyleSheet::create(m_domAgent->pageAgent(), id, styleSheet, detectOrigin(styleSheet, document), InspectorDOMAgent::documentURLString(document), this);
+        inspectorStyleSheet = InspectorStyleSheet::create(m_instrumentingAgents.inspectorPageAgent(), id, styleSheet, detectOrigin(styleSheet, document), InspectorDOMAgent::documentURLString(document), this);
         m_idToInspectorStyleSheet.set(id, inspectorStyleSheet);
         m_cssStyleSheetToInspectorStyleSheet.set(styleSheet, inspectorStyleSheet);
         if (m_creatingViaInspectorStyleSheet) {
             auto& inspectorStyleSheetsForDocument = m_documentToInspectorStyleSheet.add(document, Vector<RefPtr<InspectorStyleSheet>>()).iterator->value;
             inspectorStyleSheetsForDocument.append(inspectorStyleSheet);
@@ -850,11 +914,11 @@
 
 InspectorStyleSheet* InspectorCSSAgent::assertStyleSheetForId(ErrorString& errorString, const String& styleSheetId)
 {
     IdToInspectorStyleSheet::iterator it = m_idToInspectorStyleSheet.find(styleSheetId);
     if (it == m_idToInspectorStyleSheet.end()) {
-        errorString = "No stylesheet with given id found"_s;
+        errorString = "Missing style sheet for given styleSheetId"_s;
         return nullptr;
     }
     return it->value.get();
 }
 
@@ -941,11 +1005,11 @@
             .setMatchingSelectors(WTFMove(matchingSelectors))
             .release();
         result->addItem(WTFMove(match));
     }
 
-    return WTFMove(result);
+    return result;
 }
 
 RefPtr<Inspector::Protocol::CSS::CSSStyle> InspectorCSSAgent::buildObjectForAttributesStyle(StyledElement& element)
 {
     // FIXME: Ugliness below.
