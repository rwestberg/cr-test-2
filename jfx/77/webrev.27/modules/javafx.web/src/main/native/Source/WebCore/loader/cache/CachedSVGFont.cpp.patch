diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedSVGFont.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedSVGFont.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedSVGFont.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedSVGFont.cpp
@@ -38,23 +38,19 @@
 #include "SharedBuffer.h"
 #include "TextResourceDecoder.h"
 #include "TypedElementDescendantIterator.h"
 #include "SVGToOTFFontConversion.h"
 
-#if USE(DIRECT2D)
-#include <dwrite.h>
-#endif
-
 namespace WebCore {
 
 CachedSVGFont::CachedSVGFont(CachedResourceRequest&& request, const PAL::SessionID& sessionID, const CookieJar* cookieJar)
     : CachedFont(WTFMove(request), sessionID, cookieJar, Type::SVGFontResource)
     , m_externalSVGFontElement(nullptr)
 {
 }
 
-RefPtr<Font> CachedSVGFont::createFont(const FontDescription& fontDescription, const AtomicString& remoteURI, bool syntheticBold, bool syntheticItalic, const FontFeatureSettings& fontFaceFeatures, const FontVariantSettings& fontFaceVariantSettings, FontSelectionSpecifiedCapabilities fontFaceCapabilities)
+RefPtr<Font> CachedSVGFont::createFont(const FontDescription& fontDescription, const AtomString& remoteURI, bool syntheticBold, bool syntheticItalic, const FontFeatureSettings& fontFaceFeatures, const FontVariantSettings& fontFaceVariantSettings, FontSelectionSpecifiedCapabilities fontFaceCapabilities)
 {
     ASSERT(firstFontFace(remoteURI));
     return CachedFont::createFont(fontDescription, remoteURI, syntheticBold, syntheticItalic, fontFaceFeatures, fontFaceVariantSettings, fontFaceCapabilities);
 }
 
@@ -63,18 +59,18 @@
     if (m_externalSVGDocument)
         return FontPlatformData(fontDescription.computedPixelSize(), bold, italic);
     return CachedFont::platformDataFromCustomData(fontDescription, bold, italic, fontFaceFeatures, fontFaceVariantSettings, fontFaceCapabilities);
 }
 
-bool CachedSVGFont::ensureCustomFontData(const AtomicString& remoteURI)
+bool CachedSVGFont::ensureCustomFontData(const AtomString& remoteURI)
 {
     if (!m_externalSVGDocument && !errorOccurred() && !isLoading() && m_data) {
         bool sawError = false;
         {
             // We may get here during render tree updates when events are forbidden.
             // Frameless document can't run scripts or call back to the client so this is safe.
-            m_externalSVGDocument = SVGDocument::create(nullptr, URL());
+            m_externalSVGDocument = SVGDocument::create(sessionID(), nullptr, URL());
             auto decoder = TextResourceDecoder::create("application/xml");
 
             ScriptDisallowedScope::DisableAssertionsInScope disabledScope;
 
             m_externalSVGDocument->setContent(decoder->decodeAndFlush(m_data->data(), m_data->size()));
@@ -112,11 +108,11 @@
             return &element;
     }
     return nullptr;
 }
 
-SVGFontElement* CachedSVGFont::maybeInitializeExternalSVGFontElement(const AtomicString& remoteURI)
+SVGFontElement* CachedSVGFont::maybeInitializeExternalSVGFontElement(const AtomString& remoteURI)
 {
     if (m_externalSVGFontElement)
         return m_externalSVGFontElement;
     String fragmentIdentifier;
     size_t start = remoteURI.find('#');
@@ -124,11 +120,11 @@
         fragmentIdentifier = remoteURI.string().substring(start + 1);
     m_externalSVGFontElement = getSVGFontById(fragmentIdentifier);
     return m_externalSVGFontElement;
 }
 
-SVGFontFaceElement* CachedSVGFont::firstFontFace(const AtomicString& remoteURI)
+SVGFontFaceElement* CachedSVGFont::firstFontFace(const AtomString& remoteURI)
 {
     if (!maybeInitializeExternalSVGFontElement(remoteURI))
         return nullptr;
 
     if (auto* firstFontFace = childrenOfType<SVGFontFaceElement>(*m_externalSVGFontElement).first())
