diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GenericArgumentsInlines.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GenericArgumentsInlines.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GenericArgumentsInlines.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GenericArgumentsInlines.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2015-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -36,11 +36,11 @@
     Type* thisObject = static_cast<Type*>(thisCell);
     ASSERT_GC_OBJECT_INHERITS(thisObject, info());
     Base::visitChildren(thisCell, visitor);
 
     if (thisObject->m_modifiedArgumentsDescriptor)
-        visitor.markAuxiliary(thisObject->m_modifiedArgumentsDescriptor.get());
+        visitor.markAuxiliary(thisObject->m_modifiedArgumentsDescriptor.getUnsafe());
 }
 
 template<typename Type>
 bool GenericArguments<Type>::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName ident, PropertySlot& slot)
 {
@@ -90,22 +90,22 @@
 }
 
 template<typename Type>
 void GenericArguments<Type>::getOwnPropertyNames(JSObject* object, ExecState* exec, PropertyNameArray& array, EnumerationMode mode)
 {
+    VM& vm = exec->vm();
     Type* thisObject = jsCast<Type*>(object);
 
     if (array.includeStringProperties()) {
         for (unsigned i = 0; i < thisObject->internalLength(); ++i) {
             if (!thisObject->isMappedArgument(i))
                 continue;
-            array.add(Identifier::from(exec, i));
+            array.add(Identifier::from(vm, i));
         }
     }
 
     if (mode.includeDontEnumProperties() && !thisObject->overrodeThings()) {
-        VM& vm = exec->vm();
         array.add(vm.propertyNames->length);
         array.add(vm.propertyNames->callee);
         if (array.includeSymbolProperties())
             array.add(vm.propertyNames->iteratorSymbol);
     }
@@ -263,11 +263,11 @@
     RELEASE_ASSERT(!m_modifiedArgumentsDescriptor);
 
     if (argsLength) {
         void* backingStore = vm.gigacageAuxiliarySpace(m_modifiedArgumentsDescriptor.kind).allocateNonVirtual(vm, WTF::roundUpToMultipleOf<8>(argsLength), nullptr, AllocationFailureMode::Assert);
         bool* modifiedArguments = static_cast<bool*>(backingStore);
-        m_modifiedArgumentsDescriptor.set(vm, this, modifiedArguments);
+        m_modifiedArgumentsDescriptor.set(vm, this, modifiedArguments, argsLength);
         for (unsigned i = argsLength; i--;)
             modifiedArguments[i] = false;
     }
 }
 
@@ -281,20 +281,20 @@
 template<typename Type>
 void GenericArguments<Type>::setModifiedArgumentDescriptor(VM& vm, unsigned index, unsigned length)
 {
     initModifiedArgumentsDescriptorIfNecessary(vm, length);
     if (index < length)
-        m_modifiedArgumentsDescriptor[index] = true;
+        m_modifiedArgumentsDescriptor.at(index, length) = true;
 }
 
 template<typename Type>
 bool GenericArguments<Type>::isModifiedArgumentDescriptor(unsigned index, unsigned length)
 {
     if (!m_modifiedArgumentsDescriptor)
         return false;
     if (index < length)
-        return m_modifiedArgumentsDescriptor[index];
+        return m_modifiedArgumentsDescriptor.at(index, length);
     return false;
 }
 
 template<typename Type>
 void GenericArguments<Type>::copyToArguments(ExecState* exec, VirtualRegister firstElementDest, unsigned offset, unsigned length)
