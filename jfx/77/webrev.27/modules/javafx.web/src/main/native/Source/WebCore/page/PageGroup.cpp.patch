diff a/modules/javafx.web/src/main/native/Source/WebCore/page/PageGroup.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/PageGroup.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/PageGroup.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/PageGroup.cpp
@@ -91,10 +91,13 @@
 
 void PageGroup::addPage(Page& page)
 {
     ASSERT(!m_pages.contains(&page));
     m_pages.add(&page);
+
+    if (m_isLegacyPrivateBrowsingEnabledForTesting)
+        page.enableLegacyPrivateBrowsing(true);
 }
 
 void PageGroup::removePage(Page& page)
 {
     ASSERT(m_pages.contains(&page));
@@ -111,16 +114,27 @@
 
 CaptionUserPreferences& PageGroup::captionPreferences()
 {
     if (!m_captionPreferences) {
 #if PLATFORM(MAC) || HAVE(MEDIA_ACCESSIBILITY_FRAMEWORK)
-        m_captionPreferences = std::make_unique<CaptionUserPreferencesMediaAF>(*this);
+        m_captionPreferences = makeUnique<CaptionUserPreferencesMediaAF>(*this);
 #else
-        m_captionPreferences = std::make_unique<CaptionUserPreferences>(*this);
+        m_captionPreferences = makeUnique<CaptionUserPreferences>(*this);
 #endif
     }
 
     return *m_captionPreferences.get();
 }
 #endif
 
+void PageGroup::enableLegacyPrivateBrowsingForTesting(bool enabled)
+{
+    if (m_isLegacyPrivateBrowsingEnabledForTesting == enabled)
+        return;
+
+    m_isLegacyPrivateBrowsingEnabledForTesting = enabled;
+
+    for (auto* page : m_pages)
+        page->enableLegacyPrivateBrowsing(enabled);
+}
+
 } // namespace WebCore
