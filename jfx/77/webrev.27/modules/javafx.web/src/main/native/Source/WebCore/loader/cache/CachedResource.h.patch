diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResource.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResource.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResource.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResource.h
@@ -72,10 +72,11 @@
 #endif
         MediaResource,
         RawResource,
         Icon,
         Beacon,
+        Ping,
         SVGDocumentResource
 #if ENABLE(XSLT)
         , XSLStyleSheet
 #endif
         , LinkPrefetch
@@ -120,11 +121,11 @@
     const CookieJar* cookieJar() const { return m_cookieJar.get(); }
     Type type() const { return m_type; }
     String mimeType() const { return m_response.mimeType(); }
     long long expectedContentLength() const { return m_response.expectedContentLength(); }
 
-    static bool shouldUsePingLoad(Type type) { return type == Type::Beacon; }
+    static bool shouldUsePingLoad(Type type) { return type == Type::Beacon || type == Type::Ping; }
 
     ResourceLoadPriority loadPriority() const { return m_loadPriority; }
     void setLoadPriority(const Optional<ResourceLoadPriority>&);
 
     WEBCORE_EXPORT void addClient(CachedResourceClient&);
@@ -166,18 +167,20 @@
 
     bool areAllClientsXMLHttpRequests() const;
 
     bool isImage() const { return type() == Type::ImageResource; }
     // FIXME: CachedRawResource could be a main resource, an audio/video resource, or a raw XHR/icon resource.
-    bool isMainOrMediaOrIconOrRawResource() const { return type() == Type::MainResource || type() == Type::MediaResource || type() == Type::Icon || type() == Type::RawResource || type() == Type::Beacon; }
+    bool isMainOrMediaOrIconOrRawResource() const { return type() == Type::MainResource || type() == Type::MediaResource || type() == Type::Icon || type() == Type::RawResource || type() == Type::Beacon || type() == Type::Ping; }
 
     // Whether this request should impact request counting and delay window.onload.
     bool ignoreForRequestCount() const
     {
         return m_ignoreForRequestCount
             || type() == Type::MainResource
             || type() == Type::LinkPrefetch
+            || type() == Type::Beacon
+            || type() == Type::Ping
             || type() == Type::Icon
             || type() == Type::RawResource;
     }
 
     void setIgnoreForRequestCount(bool ignoreForRequestCount) { m_ignoreForRequestCount = ignoreForRequestCount; }
@@ -212,11 +215,11 @@
     ResourceResponse::Tainting responseTainting() const { return m_responseTainting; }
 
     void loadFrom(const CachedResource&);
 
     SecurityOrigin* origin() const { return m_origin.get(); }
-    AtomicString initiatorName() const { return m_initiatorName; }
+    AtomString initiatorName() const { return m_initiatorName; }
 
     bool canDelete() const { return !hasClients() && !m_loader && !m_preloadCount && !m_handleCount && !m_resourceToRevalidate && !m_proxyResource; }
     bool hasOneHandle() const { return m_handleCount == 1; }
 
     bool isExpired() const;
@@ -342,11 +345,11 @@
 
     String m_fragmentIdentifierForRequest;
 
     ResourceError m_error;
     RefPtr<SecurityOrigin> m_origin;
-    AtomicString m_initiatorName;
+    AtomString m_initiatorName;
 
     RedirectChainCacheStatus m_redirectChainCacheStatus;
 
     unsigned m_encodedSize { 0 };
     unsigned m_decodedSize { 0 };
@@ -376,13 +379,11 @@
     unsigned m_lruIndex { 0 };
 #endif
 };
 
 class CachedResource::Callback {
-#if !COMPILER(MSVC)
     WTF_MAKE_FAST_ALLOCATED;
-#endif
 public:
     Callback(CachedResource&, CachedResourceClient&);
 
     void cancel();
 
