diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/SlotAssignment.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/SlotAssignment.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/SlotAssignment.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/SlotAssignment.h
@@ -29,12 +29,12 @@
 #include "ShadowRoot.h"
 #include <wtf/HashMap.h>
 #include <wtf/HashSet.h>
 #include <wtf/Vector.h>
 #include <wtf/WeakPtr.h>
-#include <wtf/text/AtomicString.h>
-#include <wtf/text/AtomicStringHash.h>
+#include <wtf/text/AtomString.h>
+#include <wtf/text/AtomStringHash.h>
 
 namespace WebCore {
 
 class Element;
 class HTMLSlotElement;
@@ -44,23 +44,23 @@
     WTF_MAKE_NONCOPYABLE(SlotAssignment); WTF_MAKE_FAST_ALLOCATED;
 public:
     SlotAssignment();
     virtual ~SlotAssignment();
 
-    static const AtomicString& defaultSlotName() { return emptyAtom(); }
+    static const AtomString& defaultSlotName() { return emptyAtom(); }
 
     HTMLSlotElement* findAssignedSlot(const Node&, ShadowRoot&);
 
-    void renameSlotElement(HTMLSlotElement&, const AtomicString& oldName, const AtomicString& newName, ShadowRoot&);
-    void addSlotElementByName(const AtomicString&, HTMLSlotElement&, ShadowRoot&);
-    void removeSlotElementByName(const AtomicString&, HTMLSlotElement&, ContainerNode* oldParentOfRemovedTreeForRemoval, ShadowRoot&);
+    void renameSlotElement(HTMLSlotElement&, const AtomString& oldName, const AtomString& newName, ShadowRoot&);
+    void addSlotElementByName(const AtomString&, HTMLSlotElement&, ShadowRoot&);
+    void removeSlotElementByName(const AtomString&, HTMLSlotElement&, ContainerNode* oldParentOfRemovedTreeForRemoval, ShadowRoot&);
     void slotFallbackDidChange(HTMLSlotElement&, ShadowRoot&);
     void resolveSlotsBeforeNodeInsertionOrRemoval(ShadowRoot&);
     void willRemoveAllChildren(ShadowRoot&);
 
-    void didChangeSlot(const AtomicString&, ShadowRoot&);
-    void enqueueSlotChangeEvent(const AtomicString&, ShadowRoot&);
+    void didChangeSlot(const AtomString&, ShadowRoot&);
+    void enqueueSlotChangeEvent(const AtomString&, ShadowRoot&);
 
     const Vector<Node*>* assignedNodesForSlot(const HTMLSlotElement&, ShadowRoot&);
 
     virtual void hostChildElementDidChange(const Element&, ShadowRoot&);
 
@@ -83,19 +83,19 @@
 
     bool hasAssignedNodes(ShadowRoot&, Slot&);
     enum class SlotMutationType { Insertion, Removal };
     void resolveSlotsAfterSlotMutation(ShadowRoot&, SlotMutationType, ContainerNode* oldParentOfRemovedTree = nullptr);
 
-    virtual const AtomicString& slotNameForHostChild(const Node&) const;
+    virtual const AtomString& slotNameForHostChild(const Node&) const;
 
     HTMLSlotElement* findFirstSlotElement(Slot&, ShadowRoot&);
     void resolveAllSlotElements(ShadowRoot&);
 
     void assignSlots(ShadowRoot&);
-    void assignToSlot(Node& child, const AtomicString& slotName);
+    void assignToSlot(Node& child, const AtomString& slotName);
 
-    HashMap<AtomicString, std::unique_ptr<Slot>> m_slots;
+    HashMap<AtomString, std::unique_ptr<Slot>> m_slots;
 
 #ifndef NDEBUG
     HashSet<HTMLSlotElement*> m_slotElementsForConsistencyCheck;
 #endif
 
@@ -134,11 +134,11 @@
 {
     if (m_slotAssignment)
         m_slotAssignment->hostChildElementDidChange(childElement, *this);
 }
 
-inline void ShadowRoot::hostChildElementDidChangeSlotAttribute(Element& element, const AtomicString& oldValue, const AtomicString& newValue)
+inline void ShadowRoot::hostChildElementDidChangeSlotAttribute(Element& element, const AtomString& oldValue, const AtomString& newValue)
 {
     if (!m_slotAssignment)
         return;
     m_slotAssignment->didChangeSlot(oldValue, *this);
     m_slotAssignment->didChangeSlot(newValue, *this);
