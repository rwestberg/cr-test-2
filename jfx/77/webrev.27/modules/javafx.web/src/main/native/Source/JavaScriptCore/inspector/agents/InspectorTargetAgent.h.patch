diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorTargetAgent.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorTargetAgent.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorTargetAgent.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorTargetAgent.h
@@ -38,18 +38,16 @@
 
 class JS_EXPORT_PRIVATE InspectorTargetAgent : public InspectorAgentBase, public TargetBackendDispatcherHandler {
     WTF_MAKE_NONCOPYABLE(InspectorTargetAgent);
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    InspectorTargetAgent(FrontendRouter&, BackendDispatcher&);
-    virtual ~InspectorTargetAgent() = default;
+    virtual ~InspectorTargetAgent();
 
+    // InspectorAgentBase
     void didCreateFrontendAndBackend(FrontendRouter*, BackendDispatcher*) final;
     void willDestroyFrontendAndBackend(DisconnectReason) final;
 
-    virtual FrontendChannel& frontendChannel() = 0;
-
     // TargetBackendDispatcherHandler
     void exists(ErrorString&) final;
     void sendMessageToTarget(ErrorString&, const String& targetId, const String& message) final;
 
     // Target lifecycle.
@@ -57,10 +55,15 @@
     void targetDestroyed(InspectorTarget&);
 
     // Target messages.
     void sendMessageFromTargetToFrontend(const String& targetId, const String& message);
 
+protected:
+    InspectorTargetAgent(FrontendRouter&, BackendDispatcher&);
+
+    virtual FrontendChannel& frontendChannel() = 0;
+
 private:
     void connectToTargets();
     void disconnectFromTargets();
 
     std::unique_ptr<TargetFrontendDispatcher> m_frontendDispatcher;
