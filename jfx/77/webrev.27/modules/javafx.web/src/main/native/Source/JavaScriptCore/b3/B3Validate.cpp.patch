diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Validate.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Validate.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Validate.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Validate.cpp
@@ -70,10 +70,17 @@
         HashSet<BasicBlock*> blocks;
         HashSet<Value*> valueInProc;
         HashMap<Value*, unsigned> valueInBlock;
         HashMap<Value*, BasicBlock*> valueOwner;
         HashMap<Value*, unsigned> valueIndex;
+        HashMap<Value*, Vector<Optional<Type>>> extractions;
+
+        for (unsigned tuple = 0; tuple < m_procedure.tuples().size(); ++tuple) {
+            VALIDATE(m_procedure.tuples()[tuple].size(), ("In tuple ", tuple));
+            for (unsigned i = 0; i < m_procedure.tuples()[tuple].size(); ++i)
+                VALIDATE(m_procedure.tuples()[tuple][i].isNumeric(), ("In tuple ", tuple, " at index", i));
+        }
 
         for (BasicBlock* block : m_procedure) {
             blocks.add(block);
             for (unsigned i = 0; i < block->size(); ++i) {
                 Value* value = block->at(i);
@@ -202,38 +209,38 @@
                 switch (value->opcode()) {
                 case Div:
                 case Mod:
                     if (value->isChill()) {
                         VALIDATE(value->opcode() == Div || value->opcode() == Mod, ("At ", *value));
-                        VALIDATE(isInt(value->type()), ("At ", *value));
+                        VALIDATE(value->type().isInt(), ("At ", *value));
                     }
                     break;
                 default:
                     VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                     break;
                 }
                 VALIDATE(value->numChildren() == 2, ("At ", *value));
                 VALIDATE(value->type() == value->child(0)->type(), ("At ", *value));
                 VALIDATE(value->type() == value->child(1)->type(), ("At ", *value));
-                VALIDATE(value->type() != Void, ("At ", *value));
+                VALIDATE(value->type().isNumeric(), ("At ", *value));
                 break;
             case Neg:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() == 1, ("At ", *value));
                 VALIDATE(value->type() == value->child(0)->type(), ("At ", *value));
-                VALIDATE(value->type() != Void, ("At ", *value));
+                VALIDATE(value->type().isNumeric(), ("At ", *value));
                 break;
             case Shl:
             case SShr:
             case ZShr:
             case RotR:
                 case RotL:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() == 2, ("At ", *value));
                 VALIDATE(value->type() == value->child(0)->type(), ("At ", *value));
                 VALIDATE(value->child(1)->type() == Int32, ("At ", *value));
-                VALIDATE(isInt(value->type()), ("At ", *value));
+                VALIDATE(value->type().isInt(), ("At ", *value));
                 break;
             case BitwiseCast:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() == 1, ("At ", *value));
                 VALIDATE(value->type() != value->child(0)->type(), ("At ", *value));
@@ -259,12 +266,12 @@
                 VALIDATE(value->type() == Int64, ("At ", *value));
                 break;
             case Clz:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() == 1, ("At ", *value));
-                VALIDATE(isInt(value->child(0)->type()), ("At ", *value));
-                VALIDATE(isInt(value->type()), ("At ", *value));
+                VALIDATE(value->child(0)->type().isInt(), ("At ", *value));
+                VALIDATE(value->type().isInt(), ("At ", *value));
                 break;
             case Trunc:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() == 1, ("At ", *value));
                 VALIDATE(
@@ -276,23 +283,23 @@
             case Ceil:
             case Floor:
             case Sqrt:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() == 1, ("At ", *value));
-                VALIDATE(isFloat(value->child(0)->type()), ("At ", *value));
-                VALIDATE(isFloat(value->type()), ("At ", *value));
+                VALIDATE(value->child(0)->type().isFloat(), ("At ", *value));
+                VALIDATE(value->type().isFloat(), ("At ", *value));
                 break;
             case IToD:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() == 1, ("At ", *value));
-                VALIDATE(isInt(value->child(0)->type()), ("At ", *value));
+                VALIDATE(value->child(0)->type().isInt(), ("At ", *value));
                 VALIDATE(value->type() == Double, ("At ", *value));
                 break;
             case IToF:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() == 1, ("At ", *value));
-                VALIDATE(isInt(value->child(0)->type()), ("At ", *value));
+                VALIDATE(value->child(0)->type().isInt(), ("At ", *value));
                 VALIDATE(value->type() == Float, ("At ", *value));
                 break;
             case FloatToDouble:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() == 1, ("At ", *value));
@@ -321,24 +328,24 @@
             case AboveEqual:
             case BelowEqual:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() == 2, ("At ", *value));
                 VALIDATE(value->child(0)->type() == value->child(1)->type(), ("At ", *value));
-                VALIDATE(isInt(value->child(0)->type()), ("At ", *value));
+                VALIDATE(value->child(0)->type().isInt(), ("At ", *value));
                 VALIDATE(value->type() == Int32, ("At ", *value));
                 break;
             case EqualOrUnordered:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() == 2, ("At ", *value));
                 VALIDATE(value->child(0)->type() == value->child(1)->type(), ("At ", *value));
-                VALIDATE(isFloat(value->child(0)->type()), ("At ", *value));
+                VALIDATE(value->child(0)->type().isFloat(), ("At ", *value));
                 VALIDATE(value->type() == Int32, ("At ", *value));
                 break;
             case Select:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() == 3, ("At ", *value));
-                VALIDATE(isInt(value->child(0)->type()), ("At ", *value));
+                VALIDATE(value->child(0)->type().isInt(), ("At ", *value));
                 VALIDATE(value->type() == value->child(1)->type(), ("At ", *value));
                 VALIDATE(value->type() == value->child(2)->type(), ("At ", *value));
                 break;
             case Load8Z:
             case Load8S:
@@ -353,11 +360,11 @@
                 break;
             case Load:
                 VALIDATE(!value->kind().isChill(), ("At ", *value));
                 VALIDATE(value->numChildren() == 1, ("At ", *value));
                 VALIDATE(value->child(0)->type() == pointerType(), ("At ", *value));
-                VALIDATE(value->type() != Void, ("At ", *value));
+                VALIDATE(value->type().isNumeric(), ("At ", *value));
                 validateFence(value);
                 validateStackAccess(value);
                 break;
             case Store8:
             case Store16:
@@ -380,21 +387,21 @@
             case AtomicWeakCAS:
                 VALIDATE(!value->kind().isChill(), ("At ", *value));
                 VALIDATE(value->numChildren() == 3, ("At ", *value));
                 VALIDATE(value->type() == Int32, ("At ", *value));
                 VALIDATE(value->child(0)->type() == value->child(1)->type(), ("At ", *value));
-                VALIDATE(isInt(value->child(0)->type()), ("At ", *value));
+                VALIDATE(value->child(0)->type().isInt(), ("At ", *value));
                 VALIDATE(value->child(2)->type() == pointerType(), ("At ", *value));
                 validateAtomic(value);
                 validateStackAccess(value);
                 break;
             case AtomicStrongCAS:
                 VALIDATE(!value->kind().isChill(), ("At ", *value));
                 VALIDATE(value->numChildren() == 3, ("At ", *value));
                 VALIDATE(value->type() == value->child(0)->type(), ("At ", *value));
                 VALIDATE(value->type() == value->child(1)->type(), ("At ", *value));
-                VALIDATE(isInt(value->type()), ("At ", *value));
+                VALIDATE(value->type().isInt(), ("At ", *value));
                 VALIDATE(value->child(2)->type() == pointerType(), ("At ", *value));
                 validateAtomic(value);
                 validateStackAccess(value);
                 break;
             case AtomicXchgAdd:
@@ -404,20 +411,20 @@
             case AtomicXchgXor:
             case AtomicXchg:
                 VALIDATE(!value->kind().isChill(), ("At ", *value));
                 VALIDATE(value->numChildren() == 2, ("At ", *value));
                 VALIDATE(value->type() == value->child(0)->type(), ("At ", *value));
-                VALIDATE(isInt(value->type()), ("At ", *value));
+                VALIDATE(value->type().isInt(), ("At ", *value));
                 VALIDATE(value->child(1)->type() == pointerType(), ("At ", *value));
                 validateAtomic(value);
                 validateStackAccess(value);
                 break;
             case Depend:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() == 1, ("At ", *value));
                 VALIDATE(value->type() == value->child(0)->type(), ("At ", *value));
-                VALIDATE(isInt(value->type()), ("At ", *value));
+                VALIDATE(value->type().isInt(), ("At ", *value));
                 break;
             case WasmAddress:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() == 1, ("At ", *value));
                 VALIDATE(value->child(0)->type() == pointerType(), ("At ", *value));
@@ -428,31 +435,47 @@
                 VALIDATE(value->numChildren() >= 1, ("At ", *value));
                 VALIDATE(value->child(0)->type() == pointerType(), ("At ", *value));
                 break;
             case Patchpoint:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
-                if (value->type() == Void)
-                    VALIDATE(value->as<PatchpointValue>()->resultConstraint == ValueRep::WarmAny, ("At ", *value));
-                else
-                    validateStackmapConstraint(value, ConstrainedValue(value, value->as<PatchpointValue>()->resultConstraint), ConstraintRole::Def);
+                if (value->type() == Void) {
+                    VALIDATE(value->as<PatchpointValue>()->resultConstraints.size() == 1, ("At ", *value));
+                    VALIDATE(value->as<PatchpointValue>()->resultConstraints[0] == ValueRep::WarmAny, ("At ", *value));
+                } else {
+                    if (value->type().isNumeric()) {
+                        VALIDATE(value->as<PatchpointValue>()->resultConstraints.size() == 1, ("At ", *value));
+                        validateStackmapConstraint(value, ConstrainedValue(value, value->as<PatchpointValue>()->resultConstraints[0]), ConstraintRole::Def);
+                    } else {
+                        VALIDATE(m_procedure.isValidTuple(value->type()), ("At ", *value));
+                        VALIDATE(value->as<PatchpointValue>()->resultConstraints.size() == m_procedure.tupleForType(value->type()).size(), ("At ", *value));
+                        for (unsigned i = 0; i < value->as<PatchpointValue>()->resultConstraints.size(); ++i)
+                            validateStackmapConstraint(value, ConstrainedValue(value, value->as<PatchpointValue>()->resultConstraints[i]), ConstraintRole::Def, i);
+                    }
+                }
                 validateStackmap(value);
                 break;
+            case Extract: {
+                VALIDATE(value->numChildren() == 1, ("At ", *value));
+                VALIDATE(value->child(0)->type() == Tuple, ("At ", *value));
+                VALIDATE(value->type().isNumeric(), ("At ", *value));
+                break;
+            }
             case CheckAdd:
             case CheckSub:
             case CheckMul:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() >= 2, ("At ", *value));
-                VALIDATE(isInt(value->child(0)->type()), ("At ", *value));
-                VALIDATE(isInt(value->child(1)->type()), ("At ", *value));
+                VALIDATE(value->child(0)->type().isInt(), ("At ", *value));
+                VALIDATE(value->child(1)->type().isInt(), ("At ", *value));
                 VALIDATE(value->as<StackmapValue>()->constrainedChild(0).rep() == ValueRep::WarmAny, ("At ", *value));
                 VALIDATE(value->as<StackmapValue>()->constrainedChild(1).rep() == ValueRep::WarmAny, ("At ", *value));
                 validateStackmap(value);
                 break;
             case Check:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() >= 1, ("At ", *value));
-                VALIDATE(isInt(value->child(0)->type()), ("At ", *value));
+                VALIDATE(value->child(0)->type().isInt(), ("At ", *value));
                 VALIDATE(value->as<StackmapValue>()->constrainedChild(0).rep() == ValueRep::WarmAny, ("At ", *value));
                 validateStackmap(value);
                 break;
             case WasmBoundsCheck:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
@@ -470,10 +493,11 @@
             case Upsilon:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() == 1, ("At ", *value));
                 VALIDATE(value->as<UpsilonValue>()->phi(), ("At ", *value));
                 VALIDATE(value->as<UpsilonValue>()->phi()->opcode() == Phi, ("At ", *value));
+                VALIDATE(value->child(0)->type() != Void, ("At ", *value));
                 VALIDATE(value->child(0)->type() == value->as<UpsilonValue>()->phi()->type(), ("At ", *value));
                 VALIDATE(valueInProc.contains(value->as<UpsilonValue>()->phi()), ("At ", *value));
                 break;
             case Phi:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
@@ -499,18 +523,18 @@
                 VALIDATE(!valueOwner.get(value)->numSuccessors(), ("At ", *value));
                 break;
             case Branch:
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() == 1, ("At ", *value));
-                VALIDATE(isInt(value->child(0)->type()), ("At ", *value));
+                VALIDATE(value->child(0)->type().isInt(), ("At ", *value));
                 VALIDATE(value->type() == Void, ("At ", *value));
                 VALIDATE(valueOwner.get(value)->numSuccessors() == 2, ("At ", *value));
                 break;
             case Switch: {
                 VALIDATE(!value->kind().hasExtraBits(), ("At ", *value));
                 VALIDATE(value->numChildren() == 1, ("At ", *value));
-                VALIDATE(isInt(value->child(0)->type()), ("At ", *value));
+                VALIDATE(value->child(0)->type().isInt(), ("At ", *value));
                 VALIDATE(value->type() == Void, ("At ", *value));
                 VALIDATE(value->as<SwitchValue>()->hasFallThrough(valueOwner.get(value)), ("At ", *value));
                 // This validates the same thing as hasFallThrough, but more explicitly. We want to
                 // make sure that if anyone tries to change the definition of hasFallThrough, they
                 // will feel some pain here, since this is fundamental.
@@ -558,11 +582,11 @@
 
     enum class ConstraintRole {
         Use,
         Def
     };
-    void validateStackmapConstraint(Value* context, const ConstrainedValue& value, ConstraintRole role = ConstraintRole::Use)
+    void validateStackmapConstraint(Value* context, const ConstrainedValue& value, ConstraintRole role = ConstraintRole::Use, unsigned tupleIndex = 0)
     {
         switch (value.rep().kind()) {
         case ValueRep::WarmAny:
         case ValueRep::SomeRegister:
         case ValueRep::StackArgument:
@@ -578,16 +602,24 @@
         case ValueRep::SomeEarlyRegister:
             VALIDATE(role == ConstraintRole::Def, ("At ", *context, ": ", value));
             break;
         case ValueRep::Register:
         case ValueRep::LateRegister:
+        case ValueRep::SomeLateRegister:
             if (value.rep().kind() == ValueRep::LateRegister)
                 VALIDATE(role == ConstraintRole::Use, ("At ", *context, ": ", value));
-            if (value.rep().reg().isGPR())
-                VALIDATE(isInt(value.value()->type()), ("At ", *context, ": ", value));
-            else
-                VALIDATE(isFloat(value.value()->type()), ("At ", *context, ": ", value));
+            if (value.rep().reg().isGPR()) {
+                if (value.value()->type().isTuple())
+                    VALIDATE(m_procedure.extractFromTuple(value.value()->type(), tupleIndex).isInt(), ("At ", *context, ": ", value));
+                else
+                    VALIDATE(value.value()->type().isInt(), ("At ", *context, ": ", value));
+            } else {
+                if (value.value()->type().isTuple())
+                    VALIDATE(m_procedure.extractFromTuple(value.value()->type(), tupleIndex).isFloat(), ("At ", *context, ": ", value));
+                else
+                    VALIDATE(value.value()->type().isFloat(), ("At ", *context, ": ", value));
+            }
             break;
         default:
             VALIDATE(false, ("At ", *context, ": ", value));
             break;
         }
