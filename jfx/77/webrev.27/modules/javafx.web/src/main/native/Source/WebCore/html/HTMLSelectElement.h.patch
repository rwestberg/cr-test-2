diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLSelectElement.h b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLSelectElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLSelectElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLSelectElement.h
@@ -82,11 +82,11 @@
 
     // Called by the bindings for the unnamed index-setter.
     ExceptionOr<void> setItem(unsigned index, HTMLOptionElement*);
     ExceptionOr<void> setLength(unsigned);
 
-    WEBCORE_EXPORT HTMLOptionElement* namedItem(const AtomicString& name);
+    WEBCORE_EXPORT HTMLOptionElement* namedItem(const AtomString& name);
     WEBCORE_EXPORT HTMLOptionElement* item(unsigned index);
 
     void scrollToSelection();
 
     void listBoxSelectItem(int listIndex, bool allowMultiplySelections, bool shift, bool fireOnChangeNow = true);
@@ -108,12 +108,13 @@
 
 protected:
     HTMLSelectElement(const QualifiedName&, Document&, HTMLFormElement*);
 
 private:
-    const AtomicString& formControlType() const final;
+    const AtomString& formControlType() const final;
 
+    int defaultTabIndex() const final;
     bool isKeyboardFocusable(KeyboardEvent*) const final;
     bool isMouseFocusable() const final;
 
     void dispatchFocusEvent(RefPtr<Element>&& oldFocusedElement, FocusDirection) final;
     void dispatchBlurEvent(RefPtr<Element>&& newFocusedElement) final;
@@ -121,14 +122,16 @@
     bool canStartSelection() const final { return false; }
 
     bool isEnumeratable() const final { return true; }
     bool supportLabels() const final { return true; }
 
+    bool isInteractiveContent() const final { return true; }
+
     FormControlState saveFormControlState() const final;
     void restoreFormControlState(const FormControlState&) final;
 
-    void parseAttribute(const QualifiedName&, const AtomicString&) final;
+    void parseAttribute(const QualifiedName&, const AtomString&) final;
     bool isPresentationAttribute(const QualifiedName&) const final;
 
     bool childShouldCreateRenderer(const Node&) const final;
     RenderPtr<RenderElement> createElementRenderer(RenderStyle&&, const RenderTreePosition&) final;
     bool appendFormData(DOMFormData&, bool) final;
@@ -161,11 +164,11 @@
         UserDriven = 1 << 2,
     };
     typedef unsigned SelectOptionFlags;
     void selectOption(int optionIndex, SelectOptionFlags = 0);
     void deselectItemsWithoutValidation(HTMLElement* elementToExclude = nullptr);
-    void parseMultipleAttribute(const AtomicString&);
+    void parseMultipleAttribute(const AtomString&);
     int lastSelectedListIndex() const;
     void updateSelectedState(int listIndex, bool multi, bool shift);
     void menuListDefaultEventHandler(Event&);
     bool platformHandleKeydownEvent(KeyboardEvent*);
     void listBoxDefaultEventHandler(Event&);
