diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBValue.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBValue.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBValue.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBValue.h
@@ -26,11 +26,10 @@
 #pragma once
 
 #if ENABLE(INDEXED_DATABASE)
 
 #include "ThreadSafeDataBuffer.h"
-#include <pal/SessionID.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 class SerializedScriptValue;
@@ -39,39 +38,35 @@
     WTF_MAKE_FAST_ALLOCATED;
 public:
     WEBCORE_EXPORT IDBValue();
     IDBValue(const SerializedScriptValue&);
     IDBValue(const ThreadSafeDataBuffer&);
-    IDBValue(const SerializedScriptValue&, const Vector<String>& blobURLs, const PAL::SessionID&, const Vector<String>& blobFilePaths);
-    IDBValue(const ThreadSafeDataBuffer&, Vector<String>&& blobURLs, const PAL::SessionID&, Vector<String>&& blobFilePaths);
-    IDBValue(const ThreadSafeDataBuffer&, const Vector<String>& blobURLs, const PAL::SessionID&, const Vector<String>& blobFilePaths);
+    IDBValue(const SerializedScriptValue&, const Vector<String>& blobURLs, const Vector<String>& blobFilePaths);
+    IDBValue(const ThreadSafeDataBuffer&, Vector<String>&& blobURLs, Vector<String>&& blobFilePaths);
+    IDBValue(const ThreadSafeDataBuffer&, const Vector<String>& blobURLs, const Vector<String>& blobFilePaths);
 
     void setAsIsolatedCopy(const IDBValue&);
     IDBValue isolatedCopy() const;
 
     const ThreadSafeDataBuffer& data() const { return m_data; }
     const Vector<String>& blobURLs() const { return m_blobURLs; }
-    const PAL::SessionID& sessionID() const { return m_sessionID; }
     const Vector<String>& blobFilePaths() const { return m_blobFilePaths; }
 
     template<class Encoder> void encode(Encoder&) const;
     template<class Decoder> static Optional<IDBValue> decode(Decoder&);
 
 private:
     ThreadSafeDataBuffer m_data;
     Vector<String> m_blobURLs;
-    PAL::SessionID m_sessionID;
     Vector<String> m_blobFilePaths;
 };
 
-
 template<class Encoder>
 void IDBValue::encode(Encoder& encoder) const
 {
     encoder << m_data;
     encoder << m_blobURLs;
-    encoder << m_sessionID;
     encoder << m_blobFilePaths;
 }
 
 template<class Decoder>
 Optional<IDBValue> IDBValue::decode(Decoder& decoder)
@@ -81,17 +76,14 @@
         return WTF::nullopt;
 
     if (!decoder.decode(result.m_blobURLs))
         return WTF::nullopt;
 
-    if (!decoder.decode(result.m_sessionID))
-        return WTF::nullopt;
-
     if (!decoder.decode(result.m_blobFilePaths))
         return WTF::nullopt;
 
-    return WTFMove(result);
+    return result;
 }
 
 } // namespace WebCore
 
 #endif // ENABLE(INDEXED_DATABASE)
