diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Font.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Font.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Font.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Font.cpp
@@ -37,20 +37,16 @@
 #include "FontCache.h"
 #include "FontCascade.h"
 #include "OpenTypeMathData.h"
 #include <wtf/MathExtras.h>
 #include <wtf/NeverDestroyed.h>
-#include <wtf/text/AtomicStringHash.h>
+#include <wtf/text/AtomStringHash.h>
 
 #if ENABLE(OPENTYPE_VERTICAL)
 #include "OpenTypeVerticalData.h"
 #endif
 
-#if USE(DIRECT2D)
-#include <dwrite.h>
-#endif
-
 namespace WebCore {
 
 unsigned GlyphPage::s_count = 0;
 
 const float smallCapsFontSizeMultiplier = 0.7f;
@@ -356,11 +352,11 @@
 
     bool haveGlyphs = fillGlyphPage(glyphPage, buffer.data(), bufferLength, font);
     if (!haveGlyphs)
         return nullptr;
 
-    return WTFMove(glyphPage);
+    return glyphPage;
 }
 
 const GlyphPage* Font::glyphPage(unsigned pageNumber) const
 {
     if (!pageNumber) {
@@ -392,11 +388,11 @@
 }
 
 auto Font::ensureDerivedFontData() const -> DerivedFonts&
 {
     if (!m_derivedFontData)
-        m_derivedFontData = std::make_unique<DerivedFonts>();
+        m_derivedFontData = makeUnique<DerivedFonts>();
     return *m_derivedFontData;
 }
 
 const Font& Font::verticalRightOrientationFont() const
 {
@@ -515,11 +511,11 @@
 public:
     CharacterFallbackMapKey()
     {
     }
 
-    CharacterFallbackMapKey(const AtomicString& locale, UChar32 character, IsForPlatformFont isForPlatformFont)
+    CharacterFallbackMapKey(const AtomString& locale, UChar32 character, IsForPlatformFont isForPlatformFont)
         : locale(locale)
         , character(character)
         , isForPlatformFont(isForPlatformFont == IsForPlatformFont::Yes)
     {
     }
@@ -539,11 +535,11 @@
     static const bool emptyValueIsZero = true;
 
 private:
     friend struct CharacterFallbackMapKeyHash;
 
-    AtomicString locale;
+    AtomString locale;
     UChar32 character { 0 };
     bool isForPlatformFont { false };
 };
 
 struct CharacterFallbackMapKeyHash {
