diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLLinkElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLLinkElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLLinkElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLLinkElement.cpp
@@ -156,11 +156,11 @@
         ASSERT(m_styleScope);
         m_styleScope->didChangeActiveStyleSheetCandidates();
     }
 }
 
-void HTMLLinkElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLLinkElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == relAttr) {
         m_relAttribute = LinkRelAttribute(document(), value);
         if (m_relList)
             m_relList->associatedAttributeValueChanged(value);
@@ -214,21 +214,21 @@
     if (!isConnected() || &document() != originalDocument.ptr())
         return false;
     return true;
 }
 
-void HTMLLinkElement::setCrossOrigin(const AtomicString& value)
+void HTMLLinkElement::setCrossOrigin(const AtomString& value)
 {
     setAttributeWithoutSynchronization(crossoriginAttr, value);
 }
 
 String HTMLLinkElement::crossOrigin() const
 {
     return parseCORSSettingsAttribute(attributeWithoutSynchronization(crossoriginAttr));
 }
 
-void HTMLLinkElement::setAs(const AtomicString& value)
+void HTMLLinkElement::setAs(const AtomString& value)
 {
     setAttributeWithoutSynchronization(asAttr, value);
 }
 
 String HTMLLinkElement::as() const
@@ -243,11 +243,11 @@
                 || equalLettersIgnoringASCIICase(as, "audio")))
 #if ENABLE(VIDEO_TRACK)
         || equalLettersIgnoringASCIICase(as, "track")
 #endif
         || equalLettersIgnoringASCIICase(as, "font"))
-        return as;
+        return as.convertToASCIILowercase();
     return String();
 }
 
 void HTMLLinkElement::process()
 {
@@ -260,12 +260,22 @@
     if (m_isHandlingBeforeLoad)
         return;
 
     URL url = getNonEmptyURLAttribute(hrefAttr);
 
-    if (!m_linkLoader.loadLink(m_relAttribute, url, attributeWithoutSynchronization(asAttr), attributeWithoutSynchronization(mediaAttr), attributeWithoutSynchronization(typeAttr), attributeWithoutSynchronization(crossoriginAttr), document()))
-        return;
+    LinkLoadParameters params {
+        m_relAttribute,
+        url,
+        attributeWithoutSynchronization(asAttr),
+        attributeWithoutSynchronization(mediaAttr),
+        attributeWithoutSynchronization(typeAttr),
+        attributeWithoutSynchronization(crossoriginAttr),
+        attributeWithoutSynchronization(imagesrcsetAttr),
+        attributeWithoutSynchronization(imagesizesAttr)
+    };
+
+    m_linkLoader.loadLink(params, document());
 
     bool treatAsStyleSheet = m_relAttribute.isStyleSheet
         || (document().settings().treatsAnyTextCSSLinkAsStylesheet() && m_type.containsIgnoringASCIICase("text/css"));
 
     if (m_disabledState != Disabled && treatAsStyleSheet && document().frame() && url.isValid()) {
@@ -469,11 +479,11 @@
 }
 
 DOMTokenList& HTMLLinkElement::sizes()
 {
     if (!m_sizes)
-        m_sizes = std::make_unique<DOMTokenList>(*this, sizesAttr);
+        m_sizes = makeUnique<DOMTokenList>(*this, sizesAttr);
     return *m_sizes;
 }
 
 void HTMLLinkElement::linkLoaded()
 {
@@ -510,11 +520,11 @@
 }
 
 DOMTokenList& HTMLLinkElement::relList()
 {
     if (!m_relList)
-        m_relList = std::make_unique<DOMTokenList>(*this, HTMLNames::relAttr, [](Document& document, StringView token) {
+        m_relList = makeUnique<DOMTokenList>(*this, HTMLNames::relAttr, [](Document& document, StringView token) {
             return LinkRelAttribute::isSupported(document, token);
         });
     return *m_relList;
 }
 
@@ -563,21 +573,21 @@
 URL HTMLLinkElement::href() const
 {
     return document().completeURL(attributeWithoutSynchronization(hrefAttr));
 }
 
-const AtomicString& HTMLLinkElement::rel() const
+const AtomString& HTMLLinkElement::rel() const
 {
     return attributeWithoutSynchronization(relAttr);
 }
 
 String HTMLLinkElement::target() const
 {
     return attributeWithoutSynchronization(targetAttr);
 }
 
-const AtomicString& HTMLLinkElement::type() const
+const AtomString& HTMLLinkElement::type() const
 {
     return attributeWithoutSynchronization(typeAttr);
 }
 
 Optional<LinkIconType> HTMLLinkElement::iconType() const
