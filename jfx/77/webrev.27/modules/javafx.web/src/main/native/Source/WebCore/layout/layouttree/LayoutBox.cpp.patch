diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/layouttree/LayoutBox.cpp b/modules/javafx.web/src/main/native/Source/WebCore/layout/layouttree/LayoutBox.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/layouttree/LayoutBox.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/layouttree/LayoutBox.cpp
@@ -27,10 +27,11 @@
 #include "LayoutBox.h"
 
 #if ENABLE(LAYOUT_FORMATTING_CONTEXT)
 
 #include "LayoutContainer.h"
+#include "LayoutPhase.h"
 #include "RenderStyle.h"
 #include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 namespace Layout {
@@ -39,27 +40,38 @@
 
 Box::Box(Optional<ElementAttributes> attributes, RenderStyle&& style, BaseTypeFlags baseTypeFlags)
     : m_style(WTFMove(style))
     , m_elementAttributes(attributes)
     , m_baseTypeFlags(baseTypeFlags)
+    , m_hasRareData(false)
+    , m_isAnonymous(false)
 {
     if (isReplaced())
-        m_replaced = std::make_unique<Replaced>(*this);
+        ensureRareData().replaced = makeUnique<Replaced>(*this);
 }
 
 Box::Box(Optional<ElementAttributes> attributes, RenderStyle&& style)
     : Box(attributes, WTFMove(style), BaseTypeFlag::BoxFlag)
 {
 }
 
+Box::Box(String textContent, RenderStyle&& style)
+    : Box({ }, WTFMove(style), BaseTypeFlag::BoxFlag)
+{
+    setTextContent(textContent);
+}
+
 Box::~Box()
 {
+    removeRareData();
 }
 
 bool Box::establishesFormattingContext() const
 {
-    return establishesBlockFormattingContext() || establishesInlineFormattingContext();
+    // We need the final tree structure to tell whether a box establishes a certain formatting context.
+    ASSERT(!Phase::isInTreeBuilding());
+    return establishesBlockFormattingContext() || establishesInlineFormattingContext() || establishesTableFormattingContext();
 }
 
 bool Box::establishesBlockFormattingContext() const
 {
     // Initial Containing Block always creates a new (inital) block formatting context.
@@ -80,10 +92,38 @@
         return true;
 
     return false;
 }
 
+bool Box::establishesInlineFormattingContext() const
+{
+    // 9.4.2 Inline formatting contexts
+    // An inline formatting context is established by a block container box that contains no block-level boxes.
+    if (!isBlockContainerBox())
+        return false;
+
+    if (!isContainer())
+        return false;
+
+    // FIXME ???
+    if (!downcast<Container>(*this).firstInFlowChild())
+        return false;
+
+    // It's enough to check the first in-flow child since we can't have both block and inline level sibling boxes.
+    return downcast<Container>(*this).firstInFlowChild()->isInlineLevelBox();
+}
+
+bool Box::establishesInlineFormattingContextOnly() const
+{
+    return establishesInlineFormattingContext() && !establishesBlockFormattingContext();
+}
+
+bool Box::establishesTableFormattingContext() const
+{
+    return isTableBox();
+}
+
 bool Box::establishesBlockFormattingContextOnly() const
 {
     return establishesBlockFormattingContext() && !establishesInlineFormattingContext();
 }
 
@@ -132,12 +172,19 @@
 bool Box::hasFloatClear() const
 {
     return m_style.clear() != Clear::None;
 }
 
+bool Box::isFloatAvoider() const
+{
+    return establishesBlockFormattingContext() || isFloatingPositioned();
+}
+
 const Container* Box::containingBlock() const
 {
+    // Finding the containing block by traversing the tree during tree construction could provide incorrect result.
+    ASSERT(!Phase::isInTreeBuilding());
     // The containing block in which the root element lives is a rectangle called the initial containing block.
     // For other elements, if the element's position is 'relative' or 'static', the containing block is formed by the
     // content edge of the nearest block container ancestor box.
     // If the element has 'position: fixed', the containing block is established by the viewport
     // If the element has 'position: absolute', the containing block is established by the nearest ancestor with a
@@ -167,20 +214,30 @@
     return nullptr;
 }
 
 const Container& Box::formattingContextRoot() const
 {
-    for (auto* ancestor = containingBlock(); ancestor; ancestor = ancestor->containingBlock()) {
-        if (ancestor->establishesFormattingContext())
-            return *ancestor;
-    }
-
-    // Initial containing block always establishes a formatting context.
-    if (isInitialContainingBlock())
-        return downcast<Container>(*this);
-
-    RELEASE_ASSERT_NOT_REACHED();
+    // Finding the context root by traversing the tree during tree construction could provide incorrect result.
+    ASSERT(!Phase::isInTreeBuilding());
+    // We should never need to ask this question on the ICB.
+    ASSERT(!isInitialContainingBlock());
+    // A box lives in the same formatting context as its containing block unless the containing block establishes a formatting context.
+    // However relatively positioned (inflow) inline container lives in the formatting context where its parent lives unless
+    // the parent establishes a formatting context.
+    //
+    // <div id=outer style="position: absolute"><div id=inner><span style="position: relative">content</span></div></div>
+    // While the relatively positioned inline container (span) is placed relative to its containing block "outer", it lives in the inline
+    // formatting context established by "inner".
+    const Container* ancestor = nullptr;
+    if (isInlineLevelBox() && isInFlowPositioned())
+        ancestor = parent();
+    else
+        ancestor = containingBlock();
+    ASSERT(ancestor);
+    if (ancestor->establishesFormattingContext())
+        return *ancestor;
+    return ancestor->formattingContextRoot();
 }
 
 const Container& Box::initialContainingBlock() const
 {
     if (isInitialContainingBlock())
@@ -190,14 +247,23 @@
     for (; parent->parent(); parent = parent->parent()) { }
 
     return *parent;
 }
 
-bool Box::isDescendantOf(const Container& container) const
+bool Box::isDescendantOf(const Container& ancestorCandidate) const
+{
+    for (auto* ancestor = parent(); ancestor; ancestor = ancestor->parent()) {
+        if (ancestor == &ancestorCandidate)
+            return true;
+    }
+    return false;
+}
+
+bool Box::isContainingBlockDescendantOf(const Container& ancestorCandidate) const
 {
     for (auto* ancestor = containingBlock(); ancestor; ancestor = ancestor->containingBlock()) {
-        if (ancestor == &container)
+        if (ancestor == &ancestorCandidate)
             return true;
     }
     return false;
 }
 
@@ -208,25 +274,24 @@
 
 bool Box::isBlockLevelBox() const
 {
     // Block level elements generate block level boxes.
     auto display = m_style.display();
-    return display == DisplayType::Block || display == DisplayType::ListItem || display == DisplayType::Table;
+    return display == DisplayType::Block || display == DisplayType::ListItem || (display == DisplayType::Table && !isTableWrapperBox());
 }
 
 bool Box::isInlineLevelBox() const
 {
     // Inline level elements generate inline level boxes.
     auto display = m_style.display();
-    return display == DisplayType::Inline || display == DisplayType::InlineBlock || display == DisplayType::InlineTable;
+    return display == DisplayType::Inline || isInlineBlockBox() || display == DisplayType::InlineTable;
 }
 
 bool Box::isBlockContainerBox() const
 {
-    // Inline level elements generate inline level boxes.
     auto display = m_style.display();
-    return display == DisplayType::Block || display == DisplayType::ListItem || display == DisplayType::InlineBlock || display == DisplayType::TableCell || display == DisplayType::TableCaption; // TODO && !replaced element
+    return display == DisplayType::Block || display == DisplayType::ListItem || isInlineBlockBox() || isTableWrapperBox() || isTableCell() || isTableCaption(); // TODO && !replaced element
 }
 
 bool Box::isInitialContainingBlock() const
 {
     return !parent();
@@ -300,17 +365,99 @@
     // Applies to: all elements except table-row-group, table-header-group, table-footer-group, table-row, table-column-group and table-column
     if (isAnonymous())
         return false;
 
     auto elementType = m_elementAttributes.value().elementType;
-    return elementType != ElementType::TableRowGroup
-        && elementType != ElementType::TableHeaderGroup
+    return elementType != ElementType::TableHeaderGroup
+        && elementType != ElementType::TableBodyGroup
         && elementType != ElementType::TableFooterGroup
         && elementType != ElementType::TableRow
         && elementType != ElementType::TableColumnGroup
         && elementType != ElementType::TableColumn;
 }
 
+void Box::setTextContent(String textContent)
+{
+    ASSERT(isInlineLevelBox());
+    ensureRareData().textContent = textContent;
+}
+
+bool Box::hasTextContent() const
+{
+    ASSERT(isInlineLevelBox());
+    return hasRareData() && !rareData().textContent.isNull();
+}
+
+String Box::textContent() const
+{
+    ASSERT(hasRareData());
+    ASSERT(isInlineLevelBox());
+    return rareData().textContent;
+}
+
+const Replaced* Box::replaced() const
+{
+    return const_cast<Box*>(this)->replaced();
+}
+
+Replaced* Box::replaced()
+{
+    if (!isReplaced()) {
+        ASSERT(!hasRareData() || !rareData().replaced.get());
+        return nullptr;
+    }
+    ASSERT(hasRareData() && rareData().replaced.get());
+    return rareData().replaced.get();
+}
+
+void Box::setRowSpan(unsigned rowSpan)
+{
+    ensureRareData().rowSpan = rowSpan;
+}
+
+void Box::setColumnSpan(unsigned columnSpan)
+{
+    ensureRareData().columnSpan = columnSpan;
+}
+
+unsigned Box::rowSpan() const
+{
+    if (!hasRareData())
+        return 1;
+    return rareData().rowSpan;
+}
+
+unsigned Box::columnSpan() const
+{
+    if (!hasRareData())
+        return 1;
+    return rareData().columnSpan;
+}
+
+Box::RareDataMap& Box::rareDataMap()
+{
+    static NeverDestroyed<RareDataMap> map;
+    return map;
+}
+
+const Box::BoxRareData& Box::rareData() const
+{
+    ASSERT(hasRareData());
+    return *rareDataMap().get(this);
+}
+
+Box::BoxRareData& Box::ensureRareData()
+{
+    setHasRareData(true);
+    return *rareDataMap().ensure(this, [] { return makeUnique<BoxRareData>(); }).iterator->value;
+}
+
+void Box::removeRareData()
+{
+    rareDataMap().remove(this);
+    setHasRareData(false);
+}
+
 }
 }
 
 #endif
