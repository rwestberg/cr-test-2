diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/mathml/RenderMathMLMenclose.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/mathml/RenderMathMLMenclose.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/mathml/RenderMathMLMenclose.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/mathml/RenderMathMLMenclose.cpp
@@ -57,11 +57,11 @@
 // - OverbarExtraAscender = UnderbarExtraAscender = \xi_8
 // FIXME: OverBar and UnderBar parameters should be read from the MATH tables.
 // See https://bugs.webkit.org/show_bug.cgi?id=122297
 LayoutUnit RenderMathMLMenclose::ruleThickness() const
 {
-    return 0.05f * style().fontCascade().size();
+    return LayoutUnit(0.05f * style().fontCascade().size());
 }
 
 RenderMathMLMenclose::SpaceAroundContent RenderMathMLMenclose::spaceAroundContent(LayoutUnit contentWidth, LayoutUnit contentHeight) const
 {
     SpaceAroundContent space;
@@ -137,11 +137,11 @@
     // - The radii of the ellipse are \sqrt{2}contentWidth/2 and \sqrt{2}contentHeight/2
     // - The thickness of the ellipse is \xi_8
     // - We add extra margin of \xi_8
     // Then for example the top space is \sqrt{2}contentHeight/2 - contentHeight/2 + \xi_8/2 + \xi_8.
     if (hasNotation(MathMLMencloseElement::Circle)) {
-        LayoutUnit extraSpace = (contentWidth * (sqrtOfTwoFloat - 1) + 3 * thickness) / 2;
+        LayoutUnit extraSpace { (contentWidth * (sqrtOfTwoFloat - 1) + 3 * thickness) / 2 };
         space.left = std::max(space.left, extraSpace);
         space.right = std::max(space.right, extraSpace);
         extraSpace = (contentHeight * (sqrtOfTwoFloat - 1) + 3 * thickness) / 2;
         space.top = std::max(space.top, extraSpace);
         space.bottom = std::max(space.bottom, extraSpace);
@@ -188,10 +188,12 @@
 
     m_contentRect = LayoutRect(space.left, space.top, contentWidth, contentAscent + contentDescent);
 
     layoutPositionedObjects(relayoutChildren);
 
+    updateScrollInfoAfterLayout();
+
     clearNeedsLayout();
 }
 
 // GraphicsContext::drawLine does not seem appropriate to draw menclose lines.
 // To avoid unexpected behaviors and inconsistency with other notations, we just use strokePath.
