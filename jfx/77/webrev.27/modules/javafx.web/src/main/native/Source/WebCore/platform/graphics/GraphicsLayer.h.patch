diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsLayer.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsLayer.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsLayer.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsLayer.h
@@ -25,18 +25,20 @@
 
 #pragma once
 
 #include "Animation.h"
 #include "Color.h"
+#include "EventRegion.h"
 #include "FilterOperations.h"
 #include "FloatPoint.h"
 #include "FloatPoint3D.h"
 #include "FloatRoundedRect.h"
 #include "FloatSize.h"
 #include "GraphicsLayerClient.h"
 #include "Path.h"
 #include "PlatformLayer.h"
+#include "Region.h"
 #include "ScrollableArea.h"
 #include "TransformOperations.h"
 #include "WindRule.h"
 #include <wtf/Function.h>
 #include <wtf/TypeCasts.h>
@@ -107,11 +109,11 @@
     {
     }
 
     std::unique_ptr<AnimationValue> clone() const override
     {
-        return std::make_unique<FloatAnimationValue>(*this);
+        return makeUnique<FloatAnimationValue>(*this);
     }
 
     float value() const { return m_value; }
 
 private:
@@ -128,11 +130,11 @@
     {
     }
 
     std::unique_ptr<AnimationValue> clone() const override
     {
-        return std::make_unique<TransformAnimationValue>(*this);
+        return makeUnique<TransformAnimationValue>(*this);
     }
 
     TransformAnimationValue(const TransformAnimationValue& other)
         : AnimationValue(other)
     {
@@ -159,11 +161,11 @@
     {
     }
 
     std::unique_ptr<AnimationValue> clone() const override
     {
-        return std::make_unique<FilterAnimationValue>(*this);
+        return makeUnique<FilterAnimationValue>(*this);
     }
 
     FilterAnimationValue(const FilterAnimationValue& other)
         : AnimationValue(other)
     {
@@ -236,10 +238,11 @@
 public:
     enum class Type : uint8_t {
         Normal,
         PageTiledBacking,
         ScrollContainer,
+        ScrolledContents,
         Shape
     };
 
     WEBCORE_EXPORT static Ref<GraphicsLayer> create(GraphicsLayerFactory*, GraphicsLayerClient&, Type = Type::Normal);
 
@@ -409,12 +412,12 @@
     BlendMode blendMode() const { return m_blendMode; }
     virtual void setBlendMode(BlendMode blendMode) { m_blendMode = blendMode; }
 #endif
 
     // Some GraphicsLayers paint only the foreground or the background content
-    GraphicsLayerPaintingPhase paintingPhase() const { return m_paintingPhase; }
-    void setPaintingPhase(GraphicsLayerPaintingPhase phase) { m_paintingPhase = phase; }
+    OptionSet<GraphicsLayerPaintingPhase> paintingPhase() const { return m_paintingPhase; }
+    void setPaintingPhase(OptionSet<GraphicsLayerPaintingPhase>);
 
     enum ShouldClipToLayer {
         DoNotClipToLayer,
         ClipToLayer
     };
@@ -450,10 +453,13 @@
     virtual void setShapeLayerPath(const Path&);
 
     WindRule shapeLayerWindRule() const;
     virtual void setShapeLayerWindRule(WindRule);
 
+    const EventRegion& eventRegion() const { return m_eventRegion; }
+    virtual void setEventRegion(EventRegion&&);
+
     // Transitions are identified by a special animation name that cannot clash with a keyframe identifier.
     static String animationNameForTransition(AnimatedPropertyID);
 
     // Return true if the animation is handled by the compositing system. If this returns
     // false, the animation will be run by CSSAnimationController.
@@ -549,13 +555,13 @@
     virtual bool appliesPageScale() const { return m_appliesPageScale; }
 
     float pageScaleFactor() const { return client().pageScaleFactor(); }
     float deviceScaleFactor() const { return client().deviceScaleFactor(); }
 
-    // Whether this layer is viewport constrained, implying that it's moved around externally from GraphicsLayer (e.g. by the scrolling tree).
-    virtual void setIsViewportConstrained(bool) { }
-    virtual bool isViewportConstrained() const { return false; }
+    // Whether this layer can throw away backing store to save memory. False for layers that can be revealed by async scrolling.
+    virtual void setAllowsBackingStoreDetaching(bool) { }
+    virtual bool allowsBackingStoreDetaching() const { return true; }
 
     virtual void deviceOrPageScaleFactorChanged() { }
     WEBCORE_EXPORT void noteDeviceOrPageScaleFactorChangedIncludingDescendants();
 
     void setIsInWindow(bool);
@@ -568,10 +574,12 @@
 
     // If the exposed rect of this layer changes, returns true if this or descendant layers need a flush,
     // for example to allocate new tiles.
     virtual bool visibleRectChangeRequiresFlush(const FloatRect& /* clipRect */) const { return false; }
 
+    static FloatRect adjustCoverageRectForMovement(const FloatRect& coverageRect, const FloatRect& previousVisibleRect, const FloatRect& currentVisibleRect);
+
     // Return a string with a human readable form of the layer tree, If debug is true
     // pointers for the layers and timing data will be included in the returned string.
     WEBCORE_EXPORT String layerTreeAsText(LayerTreeAsTextBehavior = LayerTreeAsTextBehaviorNormal) const;
 
     // For testing.
@@ -585,13 +593,10 @@
     WEBCORE_EXPORT virtual double backingStoreMemoryEstimate() const;
 
     virtual bool backingStoreAttached() const { return true; }
     virtual bool backingStoreAttachedForTesting() const { return backingStoreAttached(); }
 
-    void setCanDetachBackingStore(bool b) { m_canDetachBackingStore = b; }
-    bool canDetachBackingStore() const { return m_canDetachBackingStore; }
-
     virtual TiledBacking* tiledBacking() const { return 0; }
 
     void resetTrackedRepaints();
     void addRepaintRect(const FloatRect&);
 
@@ -683,11 +688,11 @@
     BlendMode m_blendMode { BlendMode::Normal };
 #endif
 
     const Type m_type;
     CustomAppearance m_customAppearance { CustomAppearance::None };
-    GraphicsLayerPaintingPhase m_paintingPhase { GraphicsLayerPaintAllWithOverflowClip };
+    OptionSet<GraphicsLayerPaintingPhase> m_paintingPhase { GraphicsLayerPaintingPhase::Foreground, GraphicsLayerPaintingPhase::Background };
     CompositingCoordinatesOrientation m_contentsOrientation { CompositingCoordinatesOrientation::TopDown }; // affects orientation of layer contents
 
     bool m_beingDestroyed : 1;
     bool m_contentsOpaque : 1;
     bool m_supportsSubpixelAntialiasedText : 1;
@@ -724,16 +729,18 @@
     FloatSize m_contentsTilePhase;
     FloatSize m_contentsTileSize;
     FloatRoundedRect m_backdropFiltersRect;
     Optional<FloatRect> m_animationExtent;
 
+    EventRegion m_eventRegion;
 #if USE(CA)
     WindRule m_shapeLayerWindRule { WindRule::NonZero };
     Path m_shapeLayerPath;
 #endif
 };
 
+WEBCORE_EXPORT WTF::TextStream& operator<<(WTF::TextStream&, const WebCore::GraphicsLayerPaintingPhase);
 WEBCORE_EXPORT WTF::TextStream& operator<<(WTF::TextStream&, const Vector<GraphicsLayer::PlatformLayerID>&);
 WEBCORE_EXPORT WTF::TextStream& operator<<(WTF::TextStream&, const GraphicsLayer::CustomAppearance&);
 
 } // namespace WebCore
 
