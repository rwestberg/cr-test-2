diff a/modules/javafx.web/src/main/native/Source/WebCore/storage/StorageEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/storage/StorageEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/storage/StorageEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/storage/StorageEvent.h
@@ -32,41 +32,41 @@
 
 class Storage;
 
 class StorageEvent : public Event {
 public:
-    static Ref<StorageEvent> create(const AtomicString& type, const String& key, const String& oldValue, const String& newValue, const String& url, Storage* storageArea);
+    static Ref<StorageEvent> create(const AtomString& type, const String& key, const String& oldValue, const String& newValue, const String& url, Storage* storageArea);
     static Ref<StorageEvent> createForBindings();
 
     struct Init : EventInit {
         String key;
         String oldValue;
         String newValue;
         String url;
         RefPtr<Storage> storageArea;
     };
 
-    static Ref<StorageEvent> create(const AtomicString&, const Init&, IsTrusted = IsTrusted::No);
+    static Ref<StorageEvent> create(const AtomString&, const Init&, IsTrusted = IsTrusted::No);
     virtual ~StorageEvent();
 
     const String& key() const { return m_key; }
     const String& oldValue() const { return m_oldValue; }
     const String& newValue() const { return m_newValue; }
     const String& url() const { return m_url; }
     Storage* storageArea() const { return m_storageArea.get(); }
 
-    void initStorageEvent(const AtomicString& type, bool canBubble, bool cancelable, const String& key, const String& oldValue, const String& newValue, const String& url, Storage* storageArea);
+    void initStorageEvent(const AtomString& type, bool canBubble, bool cancelable, const String& key, const String& oldValue, const String& newValue, const String& url, Storage* storageArea);
 
     // Needed once we support init<blank>EventNS
     // void initStorageEventNS(in DOMString namespaceURI, in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMString keyArg, in DOMString oldValueArg, in DOMString newValueArg, in DOMString urlArg, Storage storageAreaArg);
 
     EventInterface eventInterface() const override;
 
 private:
     StorageEvent();
-    StorageEvent(const AtomicString& type, const String& key, const String& oldValue, const String& newValue, const String& url, Storage* storageArea);
-    StorageEvent(const AtomicString&, const Init&, IsTrusted);
+    StorageEvent(const AtomString& type, const String& key, const String& oldValue, const String& newValue, const String& url, Storage* storageArea);
+    StorageEvent(const AtomString&, const Init&, IsTrusted);
 
     String m_key;
     String m_oldValue;
     String m_newValue;
     String m_url;
