diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/graphics/filters/SVGFilterBuilder.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/graphics/filters/SVGFilterBuilder.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/graphics/filters/SVGFilterBuilder.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/graphics/filters/SVGFilterBuilder.h
@@ -22,19 +22,20 @@
 
 #include "FilterEffect.h"
 #include "SVGUnitTypes.h"
 #include <wtf/HashMap.h>
 #include <wtf/HashSet.h>
-#include <wtf/text/AtomicStringHash.h>
+#include <wtf/text/AtomStringHash.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 class RenderObject;
 class SVGFilterElement;
 
 class SVGFilterBuilder {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     typedef HashSet<FilterEffect*> FilterEffectSet;
 
     SVGFilterBuilder(RefPtr<FilterEffect> sourceGraphic);
 
@@ -42,13 +43,13 @@
     FloatRect targetBoundingBox() const { return m_targetBoundingBox; }
 
     SVGUnitTypes::SVGUnitType primitiveUnits() const { return m_primitiveUnits; }
     void setPrimitiveUnits(SVGUnitTypes::SVGUnitType units) { m_primitiveUnits = units; }
 
-    void add(const AtomicString& id, RefPtr<FilterEffect>);
+    void add(const AtomString& id, RefPtr<FilterEffect>);
 
-    RefPtr<FilterEffect> getEffectById(const AtomicString&) const;
+    RefPtr<FilterEffect> getEffectById(const AtomString&) const;
     FilterEffect* lastEffect() const { return m_lastEffect.get(); }
 
     void appendEffectToEffectReferences(RefPtr<FilterEffect>&&, RenderObject*);
 
     inline FilterEffectSet& effectReferences(FilterEffect* effect)
@@ -69,12 +70,12 @@
     {
         for (auto& effect : m_builtinEffects.values())
             m_effectReferences.add(effect, FilterEffectSet());
     }
 
-    HashMap<AtomicString, RefPtr<FilterEffect>> m_builtinEffects;
-    HashMap<AtomicString, RefPtr<FilterEffect>> m_namedEffects;
+    HashMap<AtomString, RefPtr<FilterEffect>> m_builtinEffects;
+    HashMap<AtomString, RefPtr<FilterEffect>> m_namedEffects;
     // The value is a list, which contains those filter effects,
     // which depends on the key filter effect.
     HashMap<RefPtr<FilterEffect>, FilterEffectSet> m_effectReferences;
     HashMap<RenderObject*, FilterEffect*> m_effectRenderer;
 
