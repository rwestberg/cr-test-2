diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/CryptoRandom.cpp b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/CryptoRandom.cpp
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/CryptoRandom.cpp
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/CryptoRandom.cpp
@@ -31,11 +31,11 @@
 #include "CryptoRandom.h"
 
 #include "BAssert.h"
 #include "BPlatform.h"
 #include "Mutex.h"
-#include "PerProcess.h"
+#include "StaticPerProcess.h"
 #include "VMAllocate.h"
 #include <mutex>
 
 #if !BOS(DARWIN)
 #include <errno.h>
@@ -57,11 +57,11 @@
     uint8_t i;
     uint8_t j;
     uint8_t s[256];
 };
 
-class ARC4RandomNumberGenerator {
+class ARC4RandomNumberGenerator : public StaticPerProcess<ARC4RandomNumberGenerator> {
 public:
     ARC4RandomNumberGenerator(const std::lock_guard<Mutex>&);
 
     uint32_t randomNumber();
     void randomValues(void* buffer, size_t length);
@@ -72,12 +72,13 @@
     void stirIfNeeded();
     inline uint8_t getByte();
 
     ARC4Stream m_stream;
     int m_count;
-    Mutex m_mutex;
 };
+DECLARE_STATIC_PER_PROCESS_STORAGE(ARC4RandomNumberGenerator);
+DEFINE_STATIC_PER_PROCESS_STORAGE(ARC4RandomNumberGenerator);
 
 ARC4Stream::ARC4Stream()
 {
     for (int n = 0; n < 256; n++)
         s[n] = n;
@@ -161,11 +162,11 @@
     return (m_stream.s[(si + sj) & 0xff]);
 }
 
 void ARC4RandomNumberGenerator::randomValues(void* buffer, size_t length)
 {
-    std::lock_guard<Mutex> lock(m_mutex);
+    std::lock_guard<Mutex> lock(mutex());
 
     unsigned char* result = reinterpret_cast<unsigned char*>(buffer);
     stirIfNeeded();
     while (length--) {
         m_count--;
@@ -174,10 +175,10 @@
     }
 }
 
 void cryptoRandom(void* buffer, size_t length)
 {
-    PerProcess<ARC4RandomNumberGenerator>::get()->randomValues(buffer, length);
+    ARC4RandomNumberGenerator::get()->randomValues(buffer, length);
 }
 
 } // namespace bmalloc
 
