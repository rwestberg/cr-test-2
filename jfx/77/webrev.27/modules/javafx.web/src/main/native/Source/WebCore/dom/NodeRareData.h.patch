diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/NodeRareData.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/NodeRareData.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/NodeRareData.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/NodeRareData.h
@@ -27,11 +27,12 @@
 #include "LiveNodeList.h"
 #include "MutationObserverRegistration.h"
 #include "QualifiedName.h"
 #include "TagCollection.h"
 #include <wtf/HashSet.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/StdLibExtras.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
 class LabelsNodeList;
 class NameNodeList;
@@ -93,35 +94,35 @@
             return;
         m_emptyChildNodeList = nullptr;
     }
 
     struct NodeListCacheMapEntryHash {
-        static unsigned hash(const std::pair<unsigned char, AtomicString>& entry)
+        static unsigned hash(const std::pair<unsigned char, AtomString>& entry)
         {
-            return DefaultHash<AtomicString>::Hash::hash(entry.second) + entry.first;
+            return DefaultHash<AtomString>::Hash::hash(entry.second) + entry.first;
         }
-        static bool equal(const std::pair<unsigned char, AtomicString>& a, const std::pair<unsigned char, AtomicString>& b) { return a.first == b.first && DefaultHash<AtomicString>::Hash::equal(a.second, b.second); }
-        static const bool safeToCompareToEmptyOrDeleted = DefaultHash<AtomicString>::Hash::safeToCompareToEmptyOrDeleted;
+        static bool equal(const std::pair<unsigned char, AtomString>& a, const std::pair<unsigned char, AtomString>& b) { return a.first == b.first && DefaultHash<AtomString>::Hash::equal(a.second, b.second); }
+        static const bool safeToCompareToEmptyOrDeleted = DefaultHash<AtomString>::Hash::safeToCompareToEmptyOrDeleted;
     };
 
-    typedef HashMap<std::pair<unsigned char, AtomicString>, LiveNodeList*, NodeListCacheMapEntryHash> NodeListAtomicNameCacheMap;
-    typedef HashMap<std::pair<unsigned char, AtomicString>, HTMLCollection*, NodeListCacheMapEntryHash> CollectionCacheMap;
+    typedef HashMap<std::pair<unsigned char, AtomString>, LiveNodeList*, NodeListCacheMapEntryHash> NodeListAtomicNameCacheMap;
+    typedef HashMap<std::pair<unsigned char, AtomString>, HTMLCollection*, NodeListCacheMapEntryHash> CollectionCacheMap;
     typedef HashMap<QualifiedName, TagCollectionNS*> TagCollectionNSCache;
 
     template<typename T, typename ContainerType>
-    ALWAYS_INLINE Ref<T> addCacheWithAtomicName(ContainerType& container, const AtomicString& name)
+    ALWAYS_INLINE Ref<T> addCacheWithAtomicName(ContainerType& container, const AtomString& name)
     {
         NodeListAtomicNameCacheMap::AddResult result = m_atomicNameCaches.fastAdd(namedNodeListKey<T>(name), nullptr);
         if (!result.isNewEntry)
             return static_cast<T&>(*result.iterator->value);
 
         auto list = T::create(container, name);
         result.iterator->value = &list.get();
         return list;
     }
 
-    ALWAYS_INLINE Ref<TagCollectionNS> addCachedTagCollectionNS(ContainerNode& node, const AtomicString& namespaceURI, const AtomicString& localName)
+    ALWAYS_INLINE Ref<TagCollectionNS> addCachedTagCollectionNS(ContainerNode& node, const AtomString& namespaceURI, const AtomString& localName)
     {
         QualifiedName name(nullAtom(), localName, namespaceURI);
         TagCollectionNSCache::AddResult result = m_tagCollectionNSCache.fastAdd(name, nullptr);
         if (!result.isNewEntry)
             return *result.iterator->value;
@@ -130,11 +131,11 @@
         result.iterator->value = list.ptr();
         return list;
     }
 
     template<typename T, typename ContainerType>
-    ALWAYS_INLINE Ref<T> addCachedCollection(ContainerType& container, CollectionType collectionType, const AtomicString& name)
+    ALWAYS_INLINE Ref<T> addCachedCollection(ContainerType& container, CollectionType collectionType, const AtomString& name)
     {
         CollectionCacheMap::AddResult result = m_cachedCollections.fastAdd(namedCollectionKey(collectionType, name), nullptr);
         if (!result.isNewEntry)
             return static_cast<T&>(*result.iterator->value);
 
@@ -160,28 +161,28 @@
     {
         return static_cast<T*>(m_cachedCollections.get(namedCollectionKey(collectionType, starAtom())));
     }
 
     template <class NodeListType>
-    void removeCacheWithAtomicName(NodeListType* list, const AtomicString& name = starAtom())
+    void removeCacheWithAtomicName(NodeListType* list, const AtomString& name = starAtom())
     {
         ASSERT(list == m_atomicNameCaches.get(namedNodeListKey<NodeListType>(name)));
         if (deleteThisAndUpdateNodeRareDataIfAboutToRemoveLastList(list->ownerNode()))
             return;
         m_atomicNameCaches.remove(namedNodeListKey<NodeListType>(name));
     }
 
-    void removeCachedTagCollectionNS(HTMLCollection& collection, const AtomicString& namespaceURI, const AtomicString& localName)
+    void removeCachedTagCollectionNS(HTMLCollection& collection, const AtomString& namespaceURI, const AtomString& localName)
     {
         QualifiedName name(nullAtom(), localName, namespaceURI);
         ASSERT(&collection == m_tagCollectionNSCache.get(name));
         if (deleteThisAndUpdateNodeRareDataIfAboutToRemoveLastList(collection.ownerNode()))
             return;
         m_tagCollectionNSCache.remove(name);
     }
 
-    void removeCachedCollection(HTMLCollection* collection, const AtomicString& name = starAtom())
+    void removeCachedCollection(HTMLCollection* collection, const AtomString& name = starAtom())
     {
         ASSERT(collection == m_cachedCollections.get(namedCollectionKey(collection->type(), name)));
         if (deleteThisAndUpdateNodeRareDataIfAboutToRemoveLastList(collection->ownerNode()))
             return;
         m_cachedCollections.remove(namedCollectionKey(collection->type(), name));
@@ -213,19 +214,19 @@
         for (auto& collection : m_cachedCollections.values())
             collection->invalidateCacheForDocument(oldDocument);
     }
 
 private:
-    std::pair<unsigned char, AtomicString> namedCollectionKey(CollectionType type, const AtomicString& name)
+    std::pair<unsigned char, AtomString> namedCollectionKey(CollectionType type, const AtomString& name)
     {
-        return std::pair<unsigned char, AtomicString>(type, name);
+        return std::pair<unsigned char, AtomString>(type, name);
     }
 
     template <class NodeListType>
-    std::pair<unsigned char, AtomicString> namedNodeListKey(const AtomicString& name)
+    std::pair<unsigned char, AtomString> namedNodeListKey(const AtomString& name)
     {
-        return std::pair<unsigned char, AtomicString>(NodeListTypeIdentifier<NodeListType>::value(), name);
+        return std::pair<unsigned char, AtomString>(NodeListTypeIdentifier<NodeListType>::value(), name);
     }
 
     bool deleteThisAndUpdateNodeRareDataIfAboutToRemoveLastList(Node&);
 
     // These two are currently mutually exclusive and could be unioned. Not very important as this class is large anyway.
@@ -244,53 +245,57 @@
     HashSet<MutationObserverRegistration*> transientRegistry;
 
     NodeMutationObserverData() { }
 };
 
-class NodeRareData : public NodeRareDataBase {
+class NodeRareData {
     WTF_MAKE_NONCOPYABLE(NodeRareData); WTF_MAKE_FAST_ALLOCATED;
 public:
 #if defined(DUMP_NODE_STATISTICS) && DUMP_NODE_STATISTICS
     enum class UseType : uint16_t {
         ConnectedFrameCount = 1 << 0,
         NodeList = 1 << 1,
         MutationObserver = 1 << 2,
 
         TabIndex = 1 << 3,
-        StyleFlags = 1 << 4,
-        MinimumSize = 1 << 5,
-        ScrollingPosition = 1 << 6,
-        ComputedStyle = 1 << 7,
-        Dataset = 1 << 8,
-        ClassList = 1 << 9,
-        ShadowRoot = 1 << 10,
-        CustomElementQueue = 1 << 11,
-        AttributeMap = 1 << 12,
-        InteractionObserver = 1 << 13,
-        PseudoElements = 1 << 14,
+        MinimumSize = 1 << 4,
+        ScrollingPosition = 1 << 5,
+        ComputedStyle = 1 << 6,
+        Dataset = 1 << 7,
+        ClassList = 1 << 8,
+        ShadowRoot = 1 << 9,
+        CustomElementQueue = 1 << 10,
+        AttributeMap = 1 << 11,
+        InteractionObserver = 1 << 12,
+        PseudoElements = 1 << 13,
     };
 #endif
 
-    NodeRareData(RenderObject* renderer)
-        : NodeRareDataBase(renderer)
-        , m_connectedFrameCount(0)
-    { }
+    enum class Type { Element, Node };
+
+    NodeRareData(Type type = Type::Node)
+        : m_connectedFrameCount(0)
+        , m_isElementRareData(type == Type::Element)
+    {
+    }
+
+    bool isElementRareData() { return m_isElementRareData; }
 
     void clearNodeLists() { m_nodeLists = nullptr; }
     NodeListsNodeData* nodeLists() const { return m_nodeLists.get(); }
     NodeListsNodeData& ensureNodeLists()
     {
         if (!m_nodeLists)
-            m_nodeLists = std::make_unique<NodeListsNodeData>();
+            m_nodeLists = makeUnique<NodeListsNodeData>();
         return *m_nodeLists;
     }
 
     NodeMutationObserverData* mutationObserverData() { return m_mutationObserverData.get(); }
     NodeMutationObserverData& ensureMutationObserverData()
     {
         if (!m_mutationObserverData)
-            m_mutationObserverData = std::make_unique<NodeMutationObserverData>();
+            m_mutationObserverData = makeUnique<NodeMutationObserverData>();
         return *m_mutationObserverData;
     }
 
     unsigned connectedSubframeCount() const { return m_connectedFrameCount; }
     void incrementConnectedSubframeCount(unsigned amount)
@@ -317,11 +322,12 @@
         return result;
     }
 #endif
 
 private:
-    unsigned m_connectedFrameCount : 10; // Must fit Page::maxNumberOfFrames.
+    unsigned m_connectedFrameCount : 31; // Must fit Page::maxNumberOfFrames.
+    unsigned m_isElementRareData : 1;
 
     std::unique_ptr<NodeListsNodeData> m_nodeLists;
     std::unique_ptr<NodeMutationObserverData> m_mutationObserverData;
 };
 
@@ -333,16 +339,10 @@
         return false;
     ownerNode.clearNodeLists();
     return true;
 }
 
-inline NodeRareData* Node::rareData() const
-{
-    ASSERT_WITH_SECURITY_IMPLICATION(hasRareData());
-    return static_cast<NodeRareData*>(m_data.m_rareData);
-}
-
 inline NodeRareData& Node::ensureRareData()
 {
     if (!hasRareData())
         materializeRareData();
     return *rareData();
