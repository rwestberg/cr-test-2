diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/ParserTokens.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/ParserTokens.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/ParserTokens.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/ParserTokens.h
@@ -134,10 +134,11 @@
     POWEQUAL,
     XOREQUAL,
     OREQUAL,
     DOTDOTDOT,
     ARROWFUNCTION,
+    QUESTIONDOT,
     LastUntaggedToken,
 
     // Begin tagged tokens
     PLUSPLUS = 0 | UnaryOpTokenFlag,
     MINUSMINUS = 1 | UnaryOpTokenFlag,
@@ -146,34 +147,35 @@
     EXCLAMATION = 4 | UnaryOpTokenFlag,
     TILDE = 5 | UnaryOpTokenFlag,
     TYPEOF = 6 | UnaryOpTokenFlag | KeywordTokenFlag,
     VOIDTOKEN = 7 | UnaryOpTokenFlag | KeywordTokenFlag,
     DELETETOKEN = 8 | UnaryOpTokenFlag | KeywordTokenFlag,
-    OR = 0 | BINARY_OP_PRECEDENCE(1),
-    AND = 1 | BINARY_OP_PRECEDENCE(2),
-    BITOR = 2 | BINARY_OP_PRECEDENCE(3),
-    BITXOR = 3 | BINARY_OP_PRECEDENCE(4),
-    BITAND = 4 | BINARY_OP_PRECEDENCE(5),
-    EQEQ = 5 | BINARY_OP_PRECEDENCE(6),
-    NE = 6 | BINARY_OP_PRECEDENCE(6),
-    STREQ = 7 | BINARY_OP_PRECEDENCE(6),
-    STRNEQ = 8 | BINARY_OP_PRECEDENCE(6),
-    LT = 9 | BINARY_OP_PRECEDENCE(7),
-    GT = 10 | BINARY_OP_PRECEDENCE(7),
-    LE = 11 | BINARY_OP_PRECEDENCE(7),
-    GE = 12 | BINARY_OP_PRECEDENCE(7),
-    INSTANCEOF = 13 | BINARY_OP_PRECEDENCE(7) | KeywordTokenFlag,
-    INTOKEN = 14 | IN_OP_PRECEDENCE(7) | KeywordTokenFlag,
-    LSHIFT = 15 | BINARY_OP_PRECEDENCE(8),
-    RSHIFT = 16 | BINARY_OP_PRECEDENCE(8),
-    URSHIFT = 17 | BINARY_OP_PRECEDENCE(8),
-    PLUS = 18 | BINARY_OP_PRECEDENCE(9) | UnaryOpTokenFlag,
-    MINUS = 19 | BINARY_OP_PRECEDENCE(9) | UnaryOpTokenFlag,
-    TIMES = 20 | BINARY_OP_PRECEDENCE(10),
-    DIVIDE = 21 | BINARY_OP_PRECEDENCE(10),
-    MOD = 22 | BINARY_OP_PRECEDENCE(10),
-    POW = 23 | BINARY_OP_PRECEDENCE(11) | RightAssociativeBinaryOpTokenFlag, // Make sure that POW has the highest operator precedence.
+    COALESCE = 0 | BINARY_OP_PRECEDENCE(1),
+    OR = 0 | BINARY_OP_PRECEDENCE(2),
+    AND = 0 | BINARY_OP_PRECEDENCE(3),
+    BITOR = 0 | BINARY_OP_PRECEDENCE(4),
+    BITXOR = 0 | BINARY_OP_PRECEDENCE(5),
+    BITAND = 0 | BINARY_OP_PRECEDENCE(6),
+    EQEQ = 0 | BINARY_OP_PRECEDENCE(7),
+    NE = 1 | BINARY_OP_PRECEDENCE(7),
+    STREQ = 2 | BINARY_OP_PRECEDENCE(7),
+    STRNEQ = 3 | BINARY_OP_PRECEDENCE(7),
+    LT = 0 | BINARY_OP_PRECEDENCE(8),
+    GT = 1 | BINARY_OP_PRECEDENCE(8),
+    LE = 2 | BINARY_OP_PRECEDENCE(8),
+    GE = 3 | BINARY_OP_PRECEDENCE(8),
+    INSTANCEOF = 4 | BINARY_OP_PRECEDENCE(8) | KeywordTokenFlag,
+    INTOKEN = 5 | IN_OP_PRECEDENCE(8) | KeywordTokenFlag,
+    LSHIFT = 0 | BINARY_OP_PRECEDENCE(9),
+    RSHIFT = 1 | BINARY_OP_PRECEDENCE(9),
+    URSHIFT = 2 | BINARY_OP_PRECEDENCE(9),
+    PLUS = 0 | BINARY_OP_PRECEDENCE(10) | UnaryOpTokenFlag,
+    MINUS = 1 | BINARY_OP_PRECEDENCE(10) | UnaryOpTokenFlag,
+    TIMES = 0 | BINARY_OP_PRECEDENCE(11),
+    DIVIDE = 1 | BINARY_OP_PRECEDENCE(11),
+    MOD = 2 | BINARY_OP_PRECEDENCE(11),
+    POW = 0 | BINARY_OP_PRECEDENCE(12) | RightAssociativeBinaryOpTokenFlag, // Make sure that POW has the highest operator precedence.
     ERRORTOK = 0 | ErrorTokenFlag,
     UNTERMINATED_IDENTIFIER_ESCAPE_ERRORTOK = 0 | ErrorTokenFlag | UnterminatedErrorTokenFlag,
     INVALID_IDENTIFIER_ESCAPE_ERRORTOK = 1 | ErrorTokenFlag,
     UNTERMINATED_IDENTIFIER_UNICODE_ESCAPE_ERRORTOK = 2 | ErrorTokenFlag | UnterminatedErrorTokenFlag,
     INVALID_IDENTIFIER_UNICODE_ESCAPE_ERRORTOK = 3 | ErrorTokenFlag,
