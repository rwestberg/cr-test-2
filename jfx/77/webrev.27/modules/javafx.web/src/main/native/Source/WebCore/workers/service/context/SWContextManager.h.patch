diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/context/SWContextManager.h b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/context/SWContextManager.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/context/SWContextManager.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/context/SWContextManager.h
@@ -60,10 +60,12 @@
 
         using FindClientByIdentifierCallback = CompletionHandler<void(ExceptionOr<Optional<ServiceWorkerClientData>>&&)>;
         virtual void findClientByIdentifier(ServiceWorkerIdentifier, ServiceWorkerClientIdentifier, FindClientByIdentifierCallback&&) = 0;
         virtual void matchAll(ServiceWorkerIdentifier, const ServiceWorkerClientQueryOptions&, ServiceWorkerClientsMatchAllCallback&&) = 0;
         virtual void claim(ServiceWorkerIdentifier, CompletionHandler<void()>&&) = 0;
+
+        virtual bool isThrottleable() const = 0;
     };
 
     WEBCORE_EXPORT void setConnection(std::unique_ptr<Connection>&&);
     WEBCORE_EXPORT Connection* connection() const;
 
@@ -85,11 +87,11 @@
 
 private:
     SWContextManager() = default;
 
     void startedServiceWorker(Optional<ServiceWorkerJobDataIdentifier>, ServiceWorkerIdentifier, const String& exceptionMessage);
-    void serviceWorkerFailedToTerminate(ServiceWorkerIdentifier);
+    NO_RETURN_DUE_TO_CRASH void serviceWorkerFailedToTerminate(ServiceWorkerIdentifier);
 
     HashMap<ServiceWorkerIdentifier, RefPtr<ServiceWorkerThreadProxy>> m_workerMap;
     std::unique_ptr<Connection> m_connection;
     ServiceWorkerCreationCallback* m_serviceWorkerCreationCallback { nullptr };
 
