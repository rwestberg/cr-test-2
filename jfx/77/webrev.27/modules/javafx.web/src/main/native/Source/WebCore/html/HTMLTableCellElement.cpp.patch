diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTableCellElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTableCellElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTableCellElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTableCellElement.cpp
@@ -95,11 +95,11 @@
     if (name == nowrapAttr || name == widthAttr || name == heightAttr)
         return true;
     return HTMLTablePartElement::isPresentationAttribute(name);
 }
 
-void HTMLTableCellElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomicString& value, MutableStyleProperties& style)
+void HTMLTableCellElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomString& value, MutableStyleProperties& style)
 {
     if (name == nowrapAttr)
         addPropertyToPresentationAttributeStyle(style, CSSPropertyWhiteSpace, CSSValueWebkitNowrap);
     else if (name == widthAttr) {
         if (!value.isEmpty()) {
@@ -115,11 +115,11 @@
         }
     } else
         HTMLTablePartElement::collectStyleForPresentationAttribute(name, value, style);
 }
 
-void HTMLTableCellElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLTableCellElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == rowspanAttr) {
         if (is<RenderTableCell>(renderer()))
             downcast<RenderTableCell>(*renderer()).colSpanOrRowSpanChanged();
     } else if (name == colspanAttr) {
@@ -151,32 +151,32 @@
     return attributeWithoutSynchronization(axisAttr);
 }
 
 void HTMLTableCellElement::setColSpan(unsigned n)
 {
-    setAttributeWithoutSynchronization(colspanAttr, AtomicString::number(limitToOnlyHTMLNonNegative(n, 1)));
+    setAttributeWithoutSynchronization(colspanAttr, AtomString::number(limitToOnlyHTMLNonNegative(n, 1)));
 }
 
 String HTMLTableCellElement::headers() const
 {
     return attributeWithoutSynchronization(headersAttr);
 }
 
 void HTMLTableCellElement::setRowSpanForBindings(unsigned n)
 {
-    setAttributeWithoutSynchronization(rowspanAttr, AtomicString::number(limitToOnlyHTMLNonNegative(n, 1)));
+    setAttributeWithoutSynchronization(rowspanAttr, AtomString::number(limitToOnlyHTMLNonNegative(n, 1)));
 }
 
-const AtomicString& HTMLTableCellElement::scope() const
+const AtomString& HTMLTableCellElement::scope() const
 {
     // https://html.spec.whatwg.org/multipage/tables.html#attr-th-scope
-    static NeverDestroyed<const AtomicString> row("row", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<const AtomicString> col("col", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<const AtomicString> rowgroup("rowgroup", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<const AtomicString> colgroup("colgroup", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> row("row", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> col("col", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> rowgroup("rowgroup", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> colgroup("colgroup", AtomString::ConstructFromLiteral);
 
-    const AtomicString& value = attributeWithoutSynchronization(HTMLNames::scopeAttr);
+    const AtomString& value = attributeWithoutSynchronization(HTMLNames::scopeAttr);
 
     if (equalIgnoringASCIICase(value, row))
         return row;
     if (equalIgnoringASCIICase(value, col))
         return col;
@@ -185,11 +185,11 @@
     if (equalIgnoringASCIICase(value, colgroup))
         return colgroup;
     return emptyAtom();
 }
 
-void HTMLTableCellElement::setScope(const AtomicString& scope)
+void HTMLTableCellElement::setScope(const AtomString& scope)
 {
     setAttributeWithoutSynchronization(scopeAttr, scope);
 }
 
 void HTMLTableCellElement::addSubresourceAttributeURLs(ListHashSet<URL>& urls) const
