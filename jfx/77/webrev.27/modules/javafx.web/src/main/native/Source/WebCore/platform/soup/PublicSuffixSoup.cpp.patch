diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/soup/PublicSuffixSoup.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/soup/PublicSuffixSoup.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/soup/PublicSuffixSoup.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/soup/PublicSuffixSoup.cpp
@@ -36,27 +36,35 @@
 bool isPublicSuffix(const String& domain)
 {
     if (domain.isEmpty())
         return false;
 
-    return soup_tld_domain_is_public_suffix(domain.utf8().data());
+    return soup_tld_domain_is_public_suffix(domain.convertToASCIILowercase().utf8().data());
 }
 
 String topPrivatelyControlledDomain(const String& domain)
 {
     if (domain.isEmpty())
         return String();
+    if (!domain.isAllASCII())
+        return domain;
+
+    String lowercaseDomain = domain.convertToASCIILowercase();
+
+    if (lowercaseDomain == "localhost")
+        return lowercaseDomain;
 
     GUniqueOutPtr<GError> error;
-    CString domainUTF8 = domain.utf8();
+    CString domainUTF8 = lowercaseDomain.utf8();
+
     if (const char* baseDomain = soup_tld_get_base_domain(domainUTF8.data(), &error.outPtr()))
         return String::fromUTF8(baseDomain);
 
-    if (g_error_matches(error.get(), SOUP_TLD_ERROR, SOUP_TLD_ERROR_NO_BASE_DOMAIN) || g_error_matches(error.get(), SOUP_TLD_ERROR, SOUP_TLD_ERROR_NOT_ENOUGH_DOMAINS))
+    if (g_error_matches(error.get(), SOUP_TLD_ERROR, SOUP_TLD_ERROR_INVALID_HOSTNAME) || g_error_matches(error.get(), SOUP_TLD_ERROR, SOUP_TLD_ERROR_NOT_ENOUGH_DOMAINS) || g_error_matches(error.get(), SOUP_TLD_ERROR, SOUP_TLD_ERROR_NO_BASE_DOMAIN))
         return String();
 
-    if (g_error_matches(error.get(), SOUP_TLD_ERROR, SOUP_TLD_ERROR_IS_IP_ADDRESS) || g_error_matches(error.get(), SOUP_TLD_ERROR, SOUP_TLD_ERROR_INVALID_HOSTNAME))
+    if (g_error_matches(error.get(), SOUP_TLD_ERROR, SOUP_TLD_ERROR_IS_IP_ADDRESS))
         return domain;
 
     ASSERT_NOT_REACHED();
     return String();
 }
