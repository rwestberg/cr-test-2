diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLDotExpression.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLDotExpression.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLDotExpression.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLDotExpression.h
@@ -25,47 +25,46 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
-#include "WHLSLLexer.h"
 #include "WHLSLPropertyAccessExpression.h"
+#include <wtf/FastMalloc.h>
 #include <wtf/UniqueRef.h>
 #include <wtf/text/StringConcatenate.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class DotExpression : public PropertyAccessExpression {
+class DotExpression final : public PropertyAccessExpression {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    DotExpression(Lexer::Token&& origin, UniqueRef<Expression>&& base, String&& fieldName)
-        : PropertyAccessExpression(WTFMove(origin), WTFMove(base))
+    DotExpression(CodeLocation location, UniqueRef<Expression>&& base, String&& fieldName)
+        : PropertyAccessExpression(location, Kind::Dot, WTFMove(base))
         , m_fieldName(WTFMove(fieldName))
     {
     }
 
-    virtual ~DotExpression() = default;
+    ~DotExpression() = default;
 
     DotExpression(const DotExpression&) = delete;
     DotExpression(DotExpression&&) = default;
 
-    bool isDotExpression() const override { return true; }
-
-    String getFunctionName() const override
+    String getterFunctionName() const
     {
         return makeString("operator.", m_fieldName);
     }
 
-    String setFunctionName() const override
+    String setterFunctionName() const
     {
         return makeString("operator.", m_fieldName, "=");
     }
 
-    String andFunctionName() const override
+    String anderFunctionName() const
     {
         return makeString("operator&.", m_fieldName);
     }
 
     String& fieldName() { return m_fieldName; }
@@ -78,8 +77,10 @@
 
 }
 
 }
 
+DEFINE_DEFAULT_DELETE(DotExpression)
+
 SPECIALIZE_TYPE_TRAITS_WHLSL_EXPRESSION(DotExpression, isDotExpression())
 
 #endif
