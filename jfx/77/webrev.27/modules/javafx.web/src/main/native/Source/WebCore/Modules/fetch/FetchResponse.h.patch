diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchResponse.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchResponse.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchResponse.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchResponse.h
@@ -100,10 +100,11 @@
 
     using ConsumeDataByChunkCallback = WTF::Function<void(ExceptionOr<ReadableStreamChunk*>&&)>;
     void consumeBodyReceivedByChunk(ConsumeDataByChunkCallback&&);
 
     WEBCORE_EXPORT ResourceResponse resourceResponse() const;
+    ResourceResponse::Tainting tainting() const { return m_internalResponse.tainting(); }
 
     uint64_t bodySizeWithPadding() const { return m_bodySizeWithPadding; }
     void setBodySizeWithPadding(uint64_t size) { m_bodySizeWithPadding = size; }
     uint64_t opaqueLoadIdentifier() const { return m_opaqueLoadIdentifier; }
 
@@ -125,10 +126,11 @@
 #endif
 
     void addAbortSteps(Ref<AbortSignal>&&);
 
     class BodyLoader final : public FetchLoaderClient {
+        WTF_MAKE_FAST_ALLOCATED;
     public:
         BodyLoader(FetchResponse&, NotificationCallback&&);
         ~BodyLoader();
 
         bool start(ScriptExecutionContext&, const FetchRequest&);
@@ -138,10 +140,11 @@
 
 #if ENABLE(STREAMS_API)
         RefPtr<SharedBuffer> startStreaming();
 #endif
         NotificationCallback takeNotificationCallback() { return WTFMove(m_responseCallback); }
+        ConsumeDataByChunkCallback takeConsumeDataCallback() { return WTFMove(m_consumeDataCallback); }
 
     private:
         // FetchLoaderClient API
         void didSucceed() final;
         void didFail(const ResourceError&) final;
@@ -150,15 +153,16 @@
 
         FetchResponse& m_response;
         NotificationCallback m_responseCallback;
         ConsumeDataByChunkCallback m_consumeDataCallback;
         std::unique_ptr<FetchLoader> m_loader;
+        Ref<PendingActivity<FetchResponse>> m_pendingActivity;
     };
 
     mutable Optional<ResourceResponse> m_filteredResponse;
     ResourceResponse m_internalResponse;
-    Optional<BodyLoader> m_bodyLoader;
+    std::unique_ptr<BodyLoader> m_bodyLoader;
     mutable String m_responseURL;
     // Opaque responses will padd their body size when used with Cache API.
     uint64_t m_bodySizeWithPadding { 0 };
     uint64_t m_opaqueLoadIdentifier { 0 };
     RefPtr<AbortSignal> m_abortSignal;
