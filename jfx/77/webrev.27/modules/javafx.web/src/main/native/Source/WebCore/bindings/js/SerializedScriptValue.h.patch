diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/SerializedScriptValue.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/SerializedScriptValue.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/SerializedScriptValue.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/SerializedScriptValue.h
@@ -76,11 +76,11 @@
 
     static Ref<SerializedScriptValue> nullValue();
 
     WEBCORE_EXPORT JSC::JSValue deserialize(JSC::ExecState&, JSC::JSGlobalObject*, SerializationErrorMode = SerializationErrorMode::Throwing);
     WEBCORE_EXPORT JSC::JSValue deserialize(JSC::ExecState&, JSC::JSGlobalObject*, const Vector<RefPtr<MessagePort>>&, SerializationErrorMode = SerializationErrorMode::Throwing);
-    JSC::JSValue deserialize(JSC::ExecState&, JSC::JSGlobalObject*, const Vector<RefPtr<MessagePort>>&, const Vector<String>& blobURLs, const PAL::SessionID&, const Vector<String>& blobFilePaths, SerializationErrorMode = SerializationErrorMode::Throwing);
+    JSC::JSValue deserialize(JSC::ExecState&, JSC::JSGlobalObject*, const Vector<RefPtr<MessagePort>>&, const Vector<String>& blobURLs, const Vector<String>& blobFilePaths, SerializationErrorMode = SerializationErrorMode::Throwing);
 
     static uint32_t wireFormatVersion();
 
     String toString();
 
@@ -91,13 +91,12 @@
     const Vector<uint8_t>& data() const { return m_data; }
     bool hasBlobURLs() const { return !m_blobURLs.isEmpty(); }
 
 #if ENABLE(INDEXED_DATABASE)
     Vector<String> blobURLsIsolatedCopy() const;
-    const PAL::SessionID& sessionID() const { return m_sessionID; }
-    void writeBlobsToDiskForIndexedDB(CompletionHandler<void(IDBValue&&)>&&);
-    IDBValue writeBlobsToDiskForIndexedDBSynchronously();
+    void writeBlobsToDiskForIndexedDB(PAL::SessionID, CompletionHandler<void(IDBValue&&)>&&);
+    IDBValue writeBlobsToDiskForIndexedDBSynchronously(PAL::SessionID);
 #endif // ENABLE(INDEXED_DATABASE)
 
     static Ref<SerializedScriptValue> createFromWireBytes(Vector<uint8_t>&& data)
     {
         return adoptRef(*new SerializedScriptValue(WTFMove(data)));
@@ -110,11 +109,11 @@
     WEBCORE_EXPORT ~SerializedScriptValue();
 
 private:
     WEBCORE_EXPORT SerializedScriptValue(Vector<unsigned char>&&);
     WEBCORE_EXPORT SerializedScriptValue(Vector<unsigned char>&&, std::unique_ptr<ArrayBufferContentsArray>);
-    SerializedScriptValue(Vector<unsigned char>&&, const Vector<String>& blobURLs, const PAL::SessionID&, std::unique_ptr<ArrayBufferContentsArray>, std::unique_ptr<ArrayBufferContentsArray> sharedBuffers, Vector<std::pair<std::unique_ptr<ImageBuffer>, bool>>&& imageBuffers
+    SerializedScriptValue(Vector<unsigned char>&&, const Vector<String>& blobURLs, std::unique_ptr<ArrayBufferContentsArray>, std::unique_ptr<ArrayBufferContentsArray> sharedBuffers, Vector<std::pair<std::unique_ptr<ImageBuffer>, bool>>&& imageBuffers
 #if ENABLE(WEBASSEMBLY)
         , std::unique_ptr<WasmModuleArray>
 #endif
         );
 
@@ -124,11 +123,10 @@
     Vector<std::pair<std::unique_ptr<ImageBuffer>, bool>> m_imageBuffers;
 #if ENABLE(WEBASSEMBLY)
     std::unique_ptr<WasmModuleArray> m_wasmModulesArray;
 #endif
     Vector<String> m_blobURLs;
-    PAL::SessionID m_sessionID;
 };
 
 template<class Encoder>
 void SerializedScriptValue::encode(Encoder& encoder) const
 {
@@ -164,11 +162,11 @@
     uint64_t arrayLength;
     if (!decoder.decode(arrayLength))
         return nullptr;
     ASSERT(arrayLength);
 
-    auto arrayBufferContentsArray = std::make_unique<ArrayBufferContentsArray>();
+    auto arrayBufferContentsArray = makeUnique<ArrayBufferContentsArray>();
     while (arrayLength--) {
         unsigned bufferSize;
         if (!decoder.decode(bufferSize))
             return nullptr;
 
