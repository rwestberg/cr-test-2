diff a/modules/javafx.web/src/main/native/Source/WebCore/editing/DeleteSelectionCommand.cpp b/modules/javafx.web/src/main/native/Source/WebCore/editing/DeleteSelectionCommand.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/editing/DeleteSelectionCommand.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/editing/DeleteSelectionCommand.cpp
@@ -170,10 +170,50 @@
         newExtent = start;
     }
     setStartingSelection(VisibleSelection(newBase, newExtent, startingSelection().isDirectional()));
 }
 
+bool DeleteSelectionCommand::shouldSmartDeleteParagraphSpacers()
+{
+    return document().editingBehavior().shouldSmartInsertDeleteParagraphs();
+}
+
+void DeleteSelectionCommand::smartDeleteParagraphSpacers()
+{
+    VisiblePosition visibleStart { m_upstreamStart };
+    VisiblePosition visibleEnd { m_downstreamEnd };
+    bool selectionEndsInParagraphSeperator = isEndOfParagraph(visibleEnd);
+    bool selectionEndIsEndOfContent = endOfEditableContent(visibleEnd) == visibleEnd;
+    bool startAndEndInSameUnsplittableElement = unsplittableElementForPosition(visibleStart.deepEquivalent()) == unsplittableElementForPosition(visibleEnd.deepEquivalent());
+    visibleStart = visibleStart.previous(CannotCrossEditingBoundary);
+    visibleEnd = visibleEnd.next(CannotCrossEditingBoundary);
+    bool previousPositionIsBlankParagraph = isBlankParagraph(visibleStart);
+    bool endPositonIsBlankParagraph = isBlankParagraph(visibleEnd);
+    bool hasBlankParagraphAfterEndOrIsEndOfContent = !selectionEndIsEndOfContent && (endPositonIsBlankParagraph || selectionEndsInParagraphSeperator);
+    if (startAndEndInSameUnsplittableElement && previousPositionIsBlankParagraph && hasBlankParagraphAfterEndOrIsEndOfContent) {
+        m_needPlaceholder = false;
+        Position position;
+        if (endPositonIsBlankParagraph)
+            position = startOfNextParagraph(startOfNextParagraph(m_downstreamEnd)).deepEquivalent();
+        else
+            position = VisiblePosition(m_downstreamEnd).next().deepEquivalent();
+        m_upstreamEnd = position.upstream();
+        m_downstreamEnd = position.downstream();
+        m_trailingWhitespace = m_downstreamEnd.trailingWhitespacePosition(VP_DEFAULT_AFFINITY);
+        setStartingSelectionOnSmartDelete(m_upstreamStart, m_downstreamEnd);
+    }
+    if (startAndEndInSameUnsplittableElement && selectionEndIsEndOfContent && previousPositionIsBlankParagraph && selectionEndsInParagraphSeperator) {
+        m_needPlaceholder = false;
+        VisiblePosition endOfParagraphBeforeStart = endOfParagraph(VisiblePosition { m_upstreamStart }.previous().previous());
+        Position position = endOfParagraphBeforeStart.deepEquivalent();
+        m_upstreamStart = position.upstream();
+        m_downstreamStart = position.downstream();
+        m_leadingWhitespace = m_upstreamStart.leadingWhitespacePosition(DOWNSTREAM);
+        setStartingSelectionOnSmartDelete(m_upstreamStart, m_upstreamEnd);
+    }
+}
+
 bool DeleteSelectionCommand::initializePositionData()
 {
     Position start, end;
     initializeStartEnd(start, end);
 
@@ -263,10 +303,13 @@
             m_downstreamEnd = pos.downstream();
             m_trailingWhitespace = m_downstreamEnd.trailingWhitespacePosition(VP_DEFAULT_AFFINITY);
 
             setStartingSelectionOnSmartDelete(m_downstreamStart, m_downstreamEnd);
         }
+
+        if (shouldSmartDeleteParagraphSpacers())
+            smartDeleteParagraphSpacers();
     }
 
     // We must pass call parentAnchoredEquivalent on the positions since some editing positions
     // that appear inside their nodes aren't really inside them.  [hr, 0] is one example.
     // FIXME: parentAnchoredEquivalent should eventually be moved into enclosing element getters
@@ -565,11 +608,13 @@
                 } else
                     node = NodeTraversal::next(*node);
             }
         }
 
-        if (m_downstreamEnd.deprecatedNode() != startNode && !m_upstreamStart.deprecatedNode()->isDescendantOf(m_downstreamEnd.deprecatedNode()) && m_downstreamEnd.anchorNode()->isConnected() && m_downstreamEnd.deprecatedEditingOffset() >= caretMinOffset(*m_downstreamEnd.deprecatedNode())) {
+        if (!m_downstreamEnd.isNull() && !m_downstreamEnd.isOrphan() && m_downstreamEnd.deprecatedNode() != startNode
+            && !m_upstreamStart.deprecatedNode()->isDescendantOf(m_downstreamEnd.deprecatedNode())
+            && m_downstreamEnd.deprecatedEditingOffset() >= caretMinOffset(*m_downstreamEnd.deprecatedNode())) {
             if (m_downstreamEnd.atLastEditingPositionForNode() && !canHaveChildrenForEditing(*m_downstreamEnd.deprecatedNode())) {
                 // The node itself is fully selected, not just its contents.  Delete it.
                 removeNode(*m_downstreamEnd.deprecatedNode());
             } else {
                 if (is<Text>(*m_downstreamEnd.deprecatedNode())) {
@@ -634,11 +679,11 @@
 
     // It shouldn't have been asked to both try and merge content into the start block and prune it.
     ASSERT(!m_pruneStartBlockIfNecessary);
 
     // FIXME: Deletion should adjust selection endpoints as it removes nodes so that we never get into this state (4099839).
-    if (!m_downstreamEnd.anchorNode()->isConnected() || !m_upstreamStart.anchorNode()->isConnected())
+    if (m_downstreamEnd.isNull() || m_upstreamStart.isNull() || !m_downstreamEnd.anchorNode()->isConnected() || !m_upstreamStart.anchorNode()->isConnected())
          return;
 
     // FIXME: The deletion algorithm shouldn't let this happen.
     if (comparePositions(m_upstreamStart, m_downstreamEnd) > 0)
         return;
