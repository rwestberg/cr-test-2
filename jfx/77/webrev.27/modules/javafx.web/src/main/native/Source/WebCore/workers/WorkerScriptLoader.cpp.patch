diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerScriptLoader.cpp b/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerScriptLoader.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerScriptLoader.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerScriptLoader.cpp
@@ -26,10 +26,11 @@
 
 #include "config.h"
 #include "WorkerScriptLoader.h"
 
 #include "ContentSecurityPolicy.h"
+#include "Exception.h"
 #include "FetchIdioms.h"
 #include "MIMETypeRegistry.h"
 #include "ResourceResponse.h"
 #include "ScriptExecutionContext.h"
 #include "ServiceWorker.h"
@@ -112,11 +113,11 @@
     m_url = scriptRequest.url();
     m_destination = fetchOptions.destination;
 
     ASSERT(scriptRequest.httpMethod() == "GET");
 
-    auto request = std::make_unique<ResourceRequest>(WTFMove(scriptRequest));
+    auto request = makeUnique<ResourceRequest>(WTFMove(scriptRequest));
     if (!request)
         return;
 
     // Only used for loading worker scripts in classic mode.
     // FIXME: We should add an option to set credential mode.
@@ -144,11 +145,11 @@
     return m_responseURL;
 }
 
 std::unique_ptr<ResourceRequest> WorkerScriptLoader::createResourceRequest(const String& initiatorIdentifier)
 {
-    auto request = std::make_unique<ResourceRequest>(m_url);
+    auto request = makeUnique<ResourceRequest>(m_url);
     request->setHTTPMethod("GET"_s);
     request->setInitiatorIdentifier(initiatorIdentifier);
     return request;
 }
 
