diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/RunLoop.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/RunLoop.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/RunLoop.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/RunLoop.h
@@ -66,15 +66,19 @@
 
 #if USE(GLIB_EVENT_LOOP)
     WTF_EXPORT_PRIVATE GMainContext* mainContext() const { return m_mainContext.get(); }
 #endif
 
-#if USE(GENERIC_EVENT_LOOP)
+#if USE(GENERIC_EVENT_LOOP) || USE(WINDOWS_EVENT_LOOP)
     // Run the single iteration of the RunLoop. It consumes the pending tasks and expired timers, but it won't be blocked.
     WTF_EXPORT_PRIVATE static void iterate();
 #endif
 
+#if USE(WINDOWS_EVENT_LOOP)
+    static void registerRunLoopMessageWindowClass();
+#endif
+
 #if USE(GLIB_EVENT_LOOP) || USE(GENERIC_EVENT_LOOP)
     WTF_EXPORT_PRIVATE void dispatchAfter(Seconds, Function<void()>&&);
 #endif
 
     class TimerBase {
@@ -108,15 +112,15 @@
 
         Ref<RunLoop> m_runLoop;
 
 #if USE(WINDOWS_EVENT_LOOP)
         bool isActive(const AbstractLocker&) const;
-        static void timerFired(RunLoop*, uint64_t ID);
-        uint64_t m_ID;
+        void timerFired();
         MonotonicTime m_nextFireDate;
         Seconds m_interval;
-        bool m_isRepeating;
+        bool m_isRepeating { false };
+        bool m_isActive { false };
 #elif USE(COCOA_EVENT_LOOP)
         static void timerFired(CFRunLoopTimerRef, void*);
         RetainPtr<CFRunLoopTimerRef> m_timer;
 #elif USE(GLIB_EVENT_LOOP)
         void updateReadyTime();
@@ -137,20 +141,22 @@
     public:
         typedef void (TimerFiredClass::*TimerFiredFunction)();
 
         Timer(RunLoop& runLoop, TimerFiredClass* o, TimerFiredFunction f)
             : TimerBase(runLoop)
-            , m_object(o)
             , m_function(f)
+            , m_object(o)
         {
         }
 
     private:
         void fired() override { (m_object->*m_function)(); }
 
-        TimerFiredClass* m_object;
+        // This order should be maintained due to MSVC bug.
+        // http://computer-programming-forum.com/7-vc.net/6fbc30265f860ad1.htm
         TimerFiredFunction m_function;
+        TimerFiredClass* m_object;
     };
 
     class Holder;
 
 private:
@@ -160,18 +166,15 @@
 
     Lock m_functionQueueLock;
     Deque<Function<void()>> m_functionQueue;
 
 #if USE(WINDOWS_EVENT_LOOP)
-    static bool registerRunLoopMessageWindowClass();
     static LRESULT CALLBACK RunLoopWndProc(HWND, UINT, WPARAM, LPARAM);
     LRESULT wndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);
     HWND m_runLoopMessageWindow;
 
-    typedef HashMap<uint64_t, TimerBase*> TimerMap;
-    Lock m_activeTimersLock;
-    TimerMap m_activeTimers;
+    Lock m_loopLock;
 #elif USE(COCOA_EVENT_LOOP)
     static void performWork(void*);
     RetainPtr<CFRunLoopRef> m_runLoop;
     RetainPtr<CFRunLoopSourceRef> m_runLoopSource;
 #elif USE(GLIB_EVENT_LOOP)
