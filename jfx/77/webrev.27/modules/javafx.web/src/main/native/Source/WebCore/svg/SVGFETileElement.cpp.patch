diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFETileElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFETileElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFETileElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFETileElement.cpp
@@ -35,30 +35,26 @@
 
 inline SVGFETileElement::SVGFETileElement(const QualifiedName& tagName, Document& document)
     : SVGFilterPrimitiveStandardAttributes(tagName, document)
 {
     ASSERT(hasTagName(SVGNames::feTileTag));
-    registerAttributes();
+
+    static std::once_flag onceFlag;
+    std::call_once(onceFlag, [] {
+        PropertyRegistry::registerProperty<SVGNames::inAttr, &SVGFETileElement::m_in1>();
+    });
 }
 
 Ref<SVGFETileElement> SVGFETileElement::create(const QualifiedName& tagName, Document& document)
 {
     return adoptRef(*new SVGFETileElement(tagName, document));
 }
 
-void SVGFETileElement::registerAttributes()
-{
-    auto& registry = attributeRegistry();
-    if (!registry.isEmpty())
-        return;
-    registry.registerAttribute<SVGNames::inAttr, &SVGFETileElement::m_in1>();
-}
-
-void SVGFETileElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void SVGFETileElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == SVGNames::inAttr) {
-        m_in1.setValue(value);
+        m_in1->setBaseValInternal(value);
         return;
     }
 
     SVGFilterPrimitiveStandardAttributes::parseAttribute(name, value);
 }
@@ -72,18 +68,18 @@
     }
 
     SVGFilterPrimitiveStandardAttributes::svgAttributeChanged(attrName);
 }
 
-RefPtr<FilterEffect> SVGFETileElement::build(SVGFilterBuilder* filterBuilder, Filter& filter)
+RefPtr<FilterEffect> SVGFETileElement::build(SVGFilterBuilder* filterBuilder, Filter& filter) const
 {
     auto input1 = filterBuilder->getEffectById(in1());
 
     if (!input1)
         return nullptr;
 
     auto effect = FETile::create(filter);
     effect->inputEffects().append(input1);
-    return WTFMove(effect);
+    return effect;
 }
 
 }
