diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLScriptElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLScriptElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLScriptElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLScriptElement.cpp
@@ -26,10 +26,11 @@
 #include "Document.h"
 #include "Event.h"
 #include "EventNames.h"
 #include "HTMLNames.h"
 #include "HTMLParserIdioms.h"
+#include "RuntimeEnabledFeatures.h"
 #include "Text.h"
 #include <wtf/IsoMallocInlines.h>
 #include <wtf/Ref.h>
 
 namespace WebCore {
@@ -59,11 +60,11 @@
 {
     HTMLElement::childrenChanged(change);
     ScriptElement::childrenChanged(change);
 }
 
-void HTMLScriptElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLScriptElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == srcAttr)
         handleSourceAttribute(value);
     else if (name == asyncAttr)
         handleAsyncAttribute();
@@ -97,11 +98,11 @@
 bool HTMLScriptElement::async() const
 {
     return hasAttributeWithoutSynchronization(asyncAttr) || forceAsync();
 }
 
-void HTMLScriptElement::setCrossOrigin(const AtomicString& value)
+void HTMLScriptElement::setCrossOrigin(const AtomString& value)
 {
     setAttributeWithoutSynchronization(crossoriginAttr, value);
 }
 
 String HTMLScriptElement::crossOrigin() const
@@ -182,6 +183,23 @@
 Ref<Element> HTMLScriptElement::cloneElementWithoutAttributesAndChildren(Document& targetDocument)
 {
     return adoptRef(*new HTMLScriptElement(tagQName(), targetDocument, false, alreadyStarted()));
 }
 
+void HTMLScriptElement::setReferrerPolicyForBindings(const AtomString& value)
+{
+    setAttributeWithoutSynchronization(referrerpolicyAttr, value);
+}
+
+String HTMLScriptElement::referrerPolicyForBindings() const
+{
+    return referrerPolicyToString(referrerPolicy());
+}
+
+ReferrerPolicy HTMLScriptElement::referrerPolicy() const
+{
+    if (RuntimeEnabledFeatures::sharedFeatures().referrerPolicyAttributeEnabled())
+        return parseReferrerPolicy(attributeWithoutSynchronization(referrerpolicyAttr), ReferrerPolicySource::ReferrerPolicyAttribute).valueOr(ReferrerPolicy::EmptyString);
+    return ReferrerPolicy::EmptyString;
+}
+
 }
