diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/freetype/FontCacheFreeType.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/freetype/FontCacheFreeType.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/freetype/FontCacheFreeType.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/freetype/FontCacheFreeType.cpp
@@ -22,10 +22,11 @@
 #include "config.h"
 #include "FontCache.h"
 
 #include "CairoUniquePtr.h"
 #include "CairoUtilities.h"
+#include "CharacterProperties.h"
 #include "FcUniquePtr.h"
 #include "FloatConversion.h"
 #include "Font.h"
 #include "FontDescription.h"
 #include "FontCacheFreeType.h"
@@ -34,10 +35,12 @@
 #include "UTF16UChar32Iterator.h"
 #include <cairo-ft.h>
 #include <cairo.h>
 #include <fontconfig/fcfreetype.h>
 #include <wtf/Assertions.h>
+#include <wtf/HashFunctions.h>
+#include <wtf/HashMap.h>
 #include <wtf/text/CString.h>
 
 #if PLATFORM(GTK)
 #include "GtkUtilities.h"
 #endif
@@ -116,38 +119,154 @@
         && FcPatternGetInteger(pattern, FC_SLANT, 0, &actualFontSlant) == FcResultMatch) {
         syntheticOblique = actualFontSlant == FC_SLANT_ROMAN;
     }
 }
 
-RefPtr<Font> FontCache::systemFallbackForCharacters(const FontDescription& description, const Font*, IsForPlatformFont, PreferColoredFont preferColoredFont, const UChar* characters, unsigned length)
-{
-    FcUniquePtr<FcCharSet> fontConfigCharSet(FcCharSetCreate());
-    UTF16UChar32Iterator iterator(characters, length);
-    UChar32 character = iterator.next();
-    while (character != iterator.end()) {
-        FcCharSetAddChar(fontConfigCharSet.get(), character);
-        character = iterator.next();
+struct CachedPattern {
+    // The pattern is owned by the CachedFontSet.
+    FcPattern* pattern { nullptr };
+    FcCharSet* charSet { nullptr };
+};
+
+class CachedFontSet {
+    WTF_MAKE_NONCOPYABLE(CachedFontSet); WTF_MAKE_FAST_ALLOCATED;
+public:
+    explicit CachedFontSet(RefPtr<FcPattern>&& pattern)
+        : m_pattern(WTFMove(pattern))
+    {
+        FcResult result;
+        m_fontSet.reset(FcFontSort(nullptr, m_pattern.get(), FcTrue, nullptr, &result));
+        for (int i = 0; i < m_fontSet->nfont; ++i) {
+            FcPattern* pattern = m_fontSet->fonts[i];
+            FcCharSet* charSet;
+
+            if (FcPatternGetCharSet(pattern, FC_CHARSET, 0, &charSet) == FcResultMatch)
+                m_patterns.append({ pattern, charSet });
+        }
     }
 
-    RefPtr<FcPattern> pattern = adoptRef(FcPatternCreate());
-    FcPatternAddCharSet(pattern.get(), FC_CHARSET, fontConfigCharSet.get());
+    RefPtr<FcPattern> bestForCharacters(const UChar* characters, unsigned length)
+    {
+        if (m_patterns.isEmpty()) {
+            FcResult result;
+            return adoptRef(FcFontMatch(nullptr, m_pattern.get(), &result));
+        }
 
-    FcPatternAddBool(pattern.get(), FC_SCALABLE, FcTrue);
+        FcUniquePtr<FcCharSet> fontConfigCharSet(FcCharSetCreate());
+        UTF16UChar32Iterator iterator(characters, length);
+        UChar32 character = iterator.next();
+        bool hasNonIgnorableCharacters = false;
+        while (character != iterator.end()) {
+            if (!isDefaultIgnorableCodePoint(character)) {
+                FcCharSetAddChar(fontConfigCharSet.get(), character);
+                hasNonIgnorableCharacters = true;
+            }
+            character = iterator.next();
+        }
+
+        FcPattern* bestPattern = nullptr;
+        int minScore = std::numeric_limits<int>::max();
+        if (hasNonIgnorableCharacters) {
+            for (const auto& cachedPattern : m_patterns) {
+                if (!cachedPattern.charSet)
+                    continue;
+
+                int score = FcCharSetSubtractCount(fontConfigCharSet.get(), cachedPattern.charSet);
+                if (!score)
+                    return adoptRef(FcFontRenderPrepare(nullptr, m_pattern.get(), cachedPattern.pattern));
+
+                if (score < minScore) {
+                    bestPattern = cachedPattern.pattern;
+                    minScore = score;
+                }
+            }
+        }
+
+        if (bestPattern)
+            return adoptRef(FcFontRenderPrepare(nullptr, m_pattern.get(), bestPattern));
+
+        // If there aren't fonts with the given characters or all characters are ignorable, the first one is the best match.
+        return adoptRef(FcFontRenderPrepare(nullptr, m_pattern.get(), m_patterns[0].pattern));
+    }
+
+private:
+    RefPtr<FcPattern> m_pattern;
+    FcUniquePtr<FcFontSet> m_fontSet;
+    Vector<CachedPattern> m_patterns;
+};
+
+struct FallbackFontDescriptionKey {
+    FallbackFontDescriptionKey() = default;
+
+    FallbackFontDescriptionKey(const FontDescription& description, FontCache::PreferColoredFont preferColoredFont)
+        : descriptionKey(description)
+        , coloredFont(preferColoredFont == FontCache::PreferColoredFont::Yes)
+    {
+    }
+
+    explicit FallbackFontDescriptionKey(WTF::HashTableDeletedValueType deletedValue)
+        : descriptionKey(deletedValue)
+    {
+    }
+
+    bool operator==(const FallbackFontDescriptionKey& other) const
+    {
+        return descriptionKey == other.descriptionKey && coloredFont == other.coloredFont;
+    }
+
+    bool operator!=(const FallbackFontDescriptionKey& other) const
+    {
+        return !(*this == other);
+    }
+
+    bool isHashTableDeletedValue() const { return descriptionKey.isHashTableDeletedValue(); }
+
+    unsigned computeHash() const
+    {
+        return WTF::pairIntHash(descriptionKey.computeHash(), WTF::DefaultHash<bool>::Hash::hash(coloredFont));
+    }
+
+    FontDescriptionKey descriptionKey;
+    bool coloredFont { false };
+};
+
+struct FallbackFontDescriptionKeyHash {
+    static unsigned hash(const FallbackFontDescriptionKey& key) { return key.computeHash(); }
+    static bool equal(const FallbackFontDescriptionKey& a, const FallbackFontDescriptionKey& b) { return a == b; }
+    static const bool safeToCompareToEmptyOrDeleted = true;
+};
+
+using SystemFallbackCache = HashMap<FallbackFontDescriptionKey, std::unique_ptr<CachedFontSet>, FallbackFontDescriptionKeyHash, SimpleClassHashTraits<FallbackFontDescriptionKey>>;
+static SystemFallbackCache& systemFallbackCache()
+{
+    static NeverDestroyed<SystemFallbackCache> cache;
+    return cache.get();
+}
+
+RefPtr<Font> FontCache::systemFallbackForCharacters(const FontDescription& description, const Font*, IsForPlatformFont, PreferColoredFont preferColoredFont, const UChar* characters, unsigned length)
+{
+    auto addResult = systemFallbackCache().ensure(FallbackFontDescriptionKey(description, preferColoredFont), [&description, preferColoredFont]() -> std::unique_ptr<CachedFontSet> {
+        RefPtr<FcPattern> pattern = adoptRef(FcPatternCreate());
+        FcPatternAddBool(pattern.get(), FC_SCALABLE, FcTrue);
 #ifdef FC_COLOR
-    if (preferColoredFont == PreferColoredFont::Yes)
-        FcPatternAddBool(pattern.get(), FC_COLOR, FcTrue);
+        if (preferColoredFont == PreferColoredFont::Yes)
+            FcPatternAddBool(pattern.get(), FC_COLOR, FcTrue);
 #endif
+        if (!configurePatternForFontDescription(pattern.get(), description))
+            return nullptr;
 
-    if (!configurePatternForFontDescription(pattern.get(), description))
-        return nullptr;
+        FcConfigSubstitute(nullptr, pattern.get(), FcMatchPattern);
+        cairo_ft_font_options_substitute(getDefaultCairoFontOptions(), pattern.get());
+        FcDefaultSubstitute(pattern.get());
 
-    FcConfigSubstitute(nullptr, pattern.get(), FcMatchPattern);
-    cairo_ft_font_options_substitute(getDefaultCairoFontOptions(), pattern.get());
-    FcDefaultSubstitute(pattern.get());
+        return makeUnique<CachedFontSet>(WTFMove(pattern));
+    });
 
-    FcResult fontConfigResult;
-    RefPtr<FcPattern> resultPattern = adoptRef(FcFontMatch(nullptr, pattern.get(), &fontConfigResult));
+    if (!addResult.iterator->value)
+        return nullptr;
+
+    RefPtr<FcPattern> resultPattern = addResult.iterator->value->bestForCharacters(characters, length);
     if (!resultPattern)
         return nullptr;
 
     bool fixedWidth, syntheticBold, syntheticOblique;
     getFontPropertiesFromPattern(resultPattern.get(), description, fixedWidth, syntheticBold, syntheticOblique);
@@ -155,10 +274,15 @@
     RefPtr<cairo_font_face_t> fontFace = adoptRef(cairo_ft_font_face_create_for_pattern(resultPattern.get()));
     FontPlatformData alternateFontData(fontFace.get(), resultPattern.get(), description.computedPixelSize(), fixedWidth, syntheticBold, syntheticOblique, description.orientation());
     return fontForPlatformData(alternateFontData);
 }
 
+void FontCache::platformPurgeInactiveFontData()
+{
+    systemFallbackCache().clear();
+}
+
 static Vector<String> patternToFamilies(FcPattern& pattern)
 {
     char* patternChars = reinterpret_cast<char*>(FcPatternFormat(&pattern, reinterpret_cast<const FcChar8*>("%{family}")));
     String patternString = String::fromUTF8(patternChars);
     free(patternChars);
@@ -184,28 +308,33 @@
     }
 
     return fontFamilies;
 }
 
+bool FontCache::isSystemFontForbiddenForEditing(const String&)
+{
+    return false;
+}
+
 Ref<Font> FontCache::lastResortFallbackFont(const FontDescription& fontDescription)
 {
     // We want to return a fallback font here, otherwise the logic preventing FontConfig
     // matches for non-fallback fonts might return 0. See isFallbackFontAllowed.
-    static AtomicString timesStr("serif");
+    static AtomString timesStr("serif");
     if (RefPtr<Font> font = fontForFamily(fontDescription, timesStr))
         return *font;
 
     // This could be reached due to improperly-installed or misconfigured fontconfig.
     RELEASE_ASSERT_NOT_REACHED();
 }
 
-Vector<FontSelectionCapabilities> FontCache::getFontSelectionCapabilitiesInFamily(const AtomicString&, AllowUserInstalledFonts)
+Vector<FontSelectionCapabilities> FontCache::getFontSelectionCapabilitiesInFamily(const AtomString&, AllowUserInstalledFonts)
 {
     return { };
 }
 
-static String getFamilyNameStringFromFamily(const AtomicString& family)
+static String getFamilyNameStringFromFamily(const AtomString& family)
 {
     // If we're creating a fallback font (e.g. "-webkit-monospace"), convert the name into
     // the fallback name (like "monospace") that fontconfig understands.
     if (family.length() && !family.startsWith("-webkit-"))
         return family.string();
@@ -369,11 +498,11 @@
         || equalLettersIgnoringASCIICase(familyNameString, "-webkit-system-ui")
 #endif
         || equalLettersIgnoringASCIICase(familyNameString, "cursive");
 }
 
-std::unique_ptr<FontPlatformData> FontCache::createFontPlatformData(const FontDescription& fontDescription, const AtomicString& family, const FontFeatureSettings*, const FontVariantSettings*, FontSelectionSpecifiedCapabilities)
+std::unique_ptr<FontPlatformData> FontCache::createFontPlatformData(const FontDescription& fontDescription, const AtomString& family, const FontFeatureSettings*, const FontVariantSettings*, FontSelectionSpecifiedCapabilities)
 {
     // The CSS font matching algorithm (http://www.w3.org/TR/css3-fonts/#font-matching-algorithm)
     // says that we must find an exact match for font family, slant (italic or oblique can be used)
     // and font weight (we only match bold/non-bold here).
     RefPtr<FcPattern> pattern = adoptRef(FcPatternCreate());
@@ -448,21 +577,21 @@
         auto variants = buildVariationSettings(freeTypeFace, fontDescription);
         if (!variants.isEmpty())
             FcPatternAddString(resultPattern.get(), FC_FONT_VARIATIONS, reinterpret_cast<const FcChar8*>(variants.utf8().data()));
     }
 #endif
-    auto platformData = std::make_unique<FontPlatformData>(fontFace.get(), resultPattern.get(), fontDescription.computedPixelSize(), fixedWidth, syntheticBold, syntheticOblique, fontDescription.orientation());
+    auto platformData = makeUnique<FontPlatformData>(fontFace.get(), resultPattern.get(), fontDescription.computedPixelSize(), fixedWidth, syntheticBold, syntheticOblique, fontDescription.orientation());
     // Verify that this font has an encoding compatible with Fontconfig. Fontconfig currently
     // supports three encodings in FcFreeTypeCharIndex: Unicode, Symbol and AppleRoman.
     // If this font doesn't have one of these three encodings, don't select it.
     if (!platformData->hasCompatibleCharmap())
         return nullptr;
 
     return platformData;
 }
 
-const AtomicString& FontCache::platformAlternateFamilyName(const AtomicString&)
+const AtomString& FontCache::platformAlternateFamilyName(const AtomString&)
 {
     return nullAtom();
 }
 
 #if ENABLE(VARIATION_FONTS)
@@ -520,11 +649,11 @@
         builder.append(variation.key[0]);
         builder.append(variation.key[1]);
         builder.append(variation.key[2]);
         builder.append(variation.key[3]);
         builder.append('=');
-        builder.appendNumber(variation.value);
+        builder.appendFixedPrecisionNumber(variation.value);
     }
     return builder.toString();
 }
 #endif // ENABLE(VARIATION_FONTS)
 
