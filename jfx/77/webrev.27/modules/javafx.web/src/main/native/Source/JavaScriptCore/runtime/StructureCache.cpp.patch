diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StructureCache.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StructureCache.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StructureCache.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StructureCache.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -24,20 +24,21 @@
  */
 
 #include "config.h"
 #include "StructureCache.h"
 
-#include "IndexingType.h"
 #include "JSGlobalObject.h"
 #include "JSCInlines.h"
+#include <wtf/Locker.h>
 
 namespace JSC {
 
 inline Structure* StructureCache::createEmptyStructure(JSGlobalObject* globalObject, JSObject* prototype, const TypeInfo& typeInfo, const ClassInfo* classInfo, IndexingType indexingType, unsigned inlineCapacity, bool makePolyProtoStructure, FunctionExecutable* executable)
 {
     RELEASE_ASSERT(!!prototype); // We use nullptr inside the HashMap for prototype to mean poly proto, so user's of this API must provide non-null prototypes.
 
+    // We don't need to lock here because only the main thread can get here, and only the main thread can mutate the cache
     PrototypeKey key { makePolyProtoStructure ? nullptr : prototype, executable, inlineCapacity, classInfo, globalObject };
     if (Structure* structure = m_structures.get(key)) {
         if (makePolyProtoStructure) {
             prototype->didBecomePrototype();
             RELEASE_ASSERT(structure->hasPolyProto());
@@ -56,15 +57,28 @@
             Structure::PolyProto, vm, globalObject, prototype, typeInfo, classInfo, indexingType, inlineCapacity);
     } else {
         structure = Structure::create(
             vm, globalObject, prototype, typeInfo, classInfo, indexingType, inlineCapacity);
     }
+    auto locker = holdLock(m_lock);
     m_structures.set(key, structure);
-
     return structure;
 }
 
+Structure* StructureCache::emptyObjectStructureConcurrently(JSGlobalObject* globalObject, JSObject* prototype, unsigned inlineCapacity)
+{
+    RELEASE_ASSERT(!!prototype); // We use nullptr inside the HashMap for prototype to mean poly proto, so user's of this API must provide non-null prototypes.
+
+    PrototypeKey key { prototype, nullptr, inlineCapacity, JSFinalObject::info(), globalObject };
+    auto locker = holdLock(m_lock);
+    if (Structure* structure = m_structures.get(key)) {
+        ASSERT(prototype->mayBePrototype());
+        return structure;
+    }
+    return nullptr;
+}
+
 Structure* StructureCache::emptyStructureForPrototypeFromBaseStructure(JSGlobalObject* globalObject, JSObject* prototype, Structure* baseStructure)
 {
     // We currently do not have inline capacity static analysis for subclasses and all internal function constructors have a default inline capacity of 0.
     IndexingType indexingType = baseStructure->indexingType();
     if (prototype->anyObjectInChainMayInterceptIndexedAccesses(globalObject->vm()) && hasIndexedProperties(indexingType))
