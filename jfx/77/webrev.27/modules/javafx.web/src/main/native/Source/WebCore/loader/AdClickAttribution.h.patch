diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/AdClickAttribution.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/AdClickAttribution.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/AdClickAttribution.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/AdClickAttribution.h
@@ -23,68 +23,181 @@
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
-#include "PublicSuffix.h"
-#include <wtf/Noncopyable.h>
+#include "RegistrableDomain.h"
+#include <wtf/CompletionHandler.h>
 #include <wtf/Optional.h>
+#include <wtf/URL.h>
 #include <wtf/WallTime.h>
+#include <wtf/text/StringHash.h>
 #include <wtf/text/WTFString.h>
 
-namespace WTF {
-class URL;
-}
-
 namespace WebCore {
 
 class AdClickAttribution {
 public:
     using CampaignId = uint32_t;
     using ConversionData = uint32_t;
     using PriorityValue = uint32_t;
 
-    static constexpr uint32_t MaxEntropy = 64;
+    static constexpr uint32_t MaxEntropy = 63;
 
     struct Campaign {
+        Campaign() = default;
         explicit Campaign(CampaignId id)
             : id { id }
         {
         }
 
         bool isValid() const
         {
-            return id < MaxEntropy;
+            return id <= MaxEntropy;
         }
 
-        CampaignId id;
+        CampaignId id { 0 };
     };
 
     struct Source {
-        explicit Source(const String& host)
-#if ENABLE(PUBLIC_SUFFIX_LIST)
-            : registrableDomain { WebCore::topPrivatelyControlledDomain(host) }
-#else
-            : registrableDomain { emptyString() }
-#endif
+        Source() = default;
+        explicit Source(const URL& url)
+            : registrableDomain { url }
+        {
+        }
+
+        explicit Source(const RegistrableDomain& domain)
+            : registrableDomain { domain }
+        {
+        }
+
+        explicit Source(WTF::HashTableDeletedValueType)
+            : registrableDomain(WTF::HashTableDeletedValue)
+        {
+        }
+
+        bool operator==(const Source& other) const
+        {
+            return registrableDomain == other.registrableDomain;
+        }
+
+        bool matches(const URL& url) const
+        {
+            return registrableDomain.matches(url);
+        }
+
+        bool isHashTableDeletedValue() const
+        {
+            return registrableDomain.isHashTableDeletedValue();
+        }
+
+        static Source deletedValue()
+        {
+            return Source { WTF::HashTableDeletedValue };
+        }
+
+        static void constructDeletedValue(Source& source)
+        {
+            new (&source) Source;
+            source = Source::deletedValue();
+        }
+
+        void deleteValue()
+        {
+            registrableDomain = RegistrableDomain { WTF::HashTableDeletedValue };
+        }
+
+        bool isDeletedValue() const
+        {
+            return isHashTableDeletedValue();
+        }
+
+        RegistrableDomain registrableDomain;
+    };
+
+    struct SourceHash {
+        static unsigned hash(const Source& source)
+        {
+            return source.registrableDomain.hash();
+        }
+
+        static bool equal(const Source& a, const Source& b)
         {
+            return a == b;
         }
 
-        String registrableDomain;
+        static const bool safeToCompareToEmptyOrDeleted = false;
     };
 
     struct Destination {
-        explicit Destination(const String& host)
-#if ENABLE(PUBLIC_SUFFIX_LIST)
-            : registrableDomain { WebCore::topPrivatelyControlledDomain(host) }
-#else
-            : registrableDomain { emptyString() }
-#endif
+        Destination() = default;
+        explicit Destination(const URL& url)
+            : registrableDomain { RegistrableDomain { url } }
+        {
+        }
+
+        explicit Destination(WTF::HashTableDeletedValueType)
+            : registrableDomain { WTF::HashTableDeletedValue }
+        {
+        }
+
+        explicit Destination(RegistrableDomain&& domain)
+            : registrableDomain { WTFMove(domain) }
         {
         }
 
-        String registrableDomain;
+        bool operator==(const Destination& other) const
+        {
+            return registrableDomain == other.registrableDomain;
+        }
+
+        bool matches(const URL& url) const
+        {
+            return registrableDomain == RegistrableDomain { url };
+        }
+
+        bool isHashTableDeletedValue() const
+        {
+            return registrableDomain.isHashTableDeletedValue();
+        }
+
+        static Destination deletedValue()
+        {
+            return Destination { WTF::HashTableDeletedValue };
+        }
+
+        static void constructDeletedValue(Destination& destination)
+        {
+            new (&destination) Destination;
+            destination = Destination::deletedValue();
+        }
+
+        void deleteValue()
+        {
+            registrableDomain = RegistrableDomain { WTF::HashTableDeletedValue };
+        }
+
+        bool isDeletedValue() const
+        {
+            return isHashTableDeletedValue();
+        }
+
+        RegistrableDomain registrableDomain;
+    };
+
+    struct DestinationHash {
+        static unsigned hash(const Destination& destination)
+        {
+            return destination.registrableDomain.hash();
+        }
+
+        static bool equal(const Destination& a, const Destination& b)
+        {
+            return a == b;
+        }
+
+        static const bool safeToCompareToEmptyOrDeleted = false;
     };
 
     struct Priority {
         explicit Priority(PriorityValue value)
         : value { value }
@@ -93,46 +206,65 @@
 
         PriorityValue value;
     };
 
     struct Conversion {
-        explicit Conversion(ConversionData data, Priority priority)
+        enum class WasSent : bool { No, Yes };
+
+        Conversion(ConversionData data, Priority priority, WasSent wasSent = WasSent::No)
             : data { data }
             , priority { priority.value }
+            , wasSent { wasSent }
         {
         }
 
         bool isValid() const
         {
-            return data < MaxEntropy && priority < MaxEntropy;
+            return data <= MaxEntropy && priority <= MaxEntropy;
         }
 
         ConversionData data;
         PriorityValue priority;
+        WasSent wasSent = WasSent::No;
 
         template<class Encoder> void encode(Encoder&) const;
         template<class Decoder> static Optional<Conversion> decode(Decoder&);
     };
 
+    AdClickAttribution() = default;
     AdClickAttribution(Campaign campaign, const Source& source, const Destination& destination)
         : m_campaign { campaign }
         , m_source { source }
         , m_destination { destination }
         , m_timeOfAdClick { WallTime::now() }
     {
     }
 
-    WEBCORE_EXPORT void setConversion(Conversion&&);
+    WEBCORE_EXPORT static Optional<Conversion> parseConversionRequest(const URL& redirectURL);
+    WEBCORE_EXPORT Optional<Seconds> convertAndGetEarliestTimeToSend(Conversion&&);
+    WEBCORE_EXPORT bool hasHigherPriorityThan(const AdClickAttribution&) const;
     WEBCORE_EXPORT URL url() const;
+    WEBCORE_EXPORT URL urlForTesting(const URL& baseURLForTesting) const;
     WEBCORE_EXPORT URL referrer() const;
+    const Source& source() const { return m_source; };
+    const Destination& destination() const { return m_destination; };
     Optional<WallTime> earliestTimeToSend() const { return m_earliestTimeToSend; };
+    WEBCORE_EXPORT void markAsExpired();
+    WEBCORE_EXPORT bool hasExpired() const;
+    WEBCORE_EXPORT void markConversionAsSent();
+    WEBCORE_EXPORT bool wasConversionSent() const;
+
+    bool isEmpty() const { return m_source.registrableDomain.isEmpty(); };
+
+    WEBCORE_EXPORT String toString() const;
 
     template<class Encoder> void encode(Encoder&) const;
     template<class Decoder> static Optional<AdClickAttribution> decode(Decoder&);
 
 private:
     bool isValid() const;
+    static bool debugModeEnabled();
 
     Campaign m_campaign;
     Source m_source;
     Destination m_destination;
     WallTime m_timeOfAdClick;
@@ -153,16 +285,16 @@
     Optional<CampaignId> campaignId;
     decoder >> campaignId;
     if (!campaignId)
         return WTF::nullopt;
 
-    Optional<String> sourceRegistrableDomain;
+    Optional<RegistrableDomain> sourceRegistrableDomain;
     decoder >> sourceRegistrableDomain;
     if (!sourceRegistrableDomain)
         return WTF::nullopt;
 
-    Optional<String> destinationRegistrableDomain;
+    Optional<RegistrableDomain> destinationRegistrableDomain;
     decoder >> destinationRegistrableDomain;
     if (!destinationRegistrableDomain)
         return WTF::nullopt;
 
     Optional<WallTime> timeOfAdClick;
@@ -188,11 +320,11 @@
 }
 
 template<class Encoder>
 void AdClickAttribution::Conversion::encode(Encoder& encoder) const
 {
-    encoder << data << priority;
+    encoder << data << priority << wasSent;
 }
 
 template<class Decoder>
 Optional<AdClickAttribution::Conversion> AdClickAttribution::Conversion::decode(Decoder& decoder)
 {
@@ -204,9 +336,36 @@
     Optional<PriorityValue> priority;
     decoder >> priority;
     if (!priority)
         return WTF::nullopt;
 
-    return Conversion { WTFMove(*data), Priority { WTFMove(*priority) } };
+    Optional<WasSent> wasSent;
+    decoder >> wasSent;
+    if (!wasSent)
+        return WTF::nullopt;
+
+    return Conversion { WTFMove(*data), Priority { *priority }, *wasSent };
 }
 
 } // namespace WebCore
+
+namespace WTF {
+template<typename T> struct DefaultHash;
+
+template<> struct DefaultHash<WebCore::AdClickAttribution::Source> {
+    typedef WebCore::AdClickAttribution::SourceHash Hash;
+};
+template<> struct HashTraits<WebCore::AdClickAttribution::Source> : GenericHashTraits<WebCore::AdClickAttribution::Source> {
+    static WebCore::AdClickAttribution::Source emptyValue() { return { }; }
+    static void constructDeletedValue(WebCore::AdClickAttribution::Source& slot) { WebCore::AdClickAttribution::Source::constructDeletedValue(slot); }
+    static bool isDeletedValue(const WebCore::AdClickAttribution::Source& slot) { return slot.isDeletedValue(); }
+};
+
+template<> struct DefaultHash<WebCore::AdClickAttribution::Destination> {
+    typedef WebCore::AdClickAttribution::DestinationHash Hash;
+};
+template<> struct HashTraits<WebCore::AdClickAttribution::Destination> : GenericHashTraits<WebCore::AdClickAttribution::Destination> {
+    static WebCore::AdClickAttribution::Destination emptyValue() { return { }; }
+    static void constructDeletedValue(WebCore::AdClickAttribution::Destination& slot) { WebCore::AdClickAttribution::Destination::constructDeletedValue(slot); }
+    static bool isDeletedValue(const WebCore::AdClickAttribution::Destination& slot) { return slot.isDeletedValue(); }
+};
+}
