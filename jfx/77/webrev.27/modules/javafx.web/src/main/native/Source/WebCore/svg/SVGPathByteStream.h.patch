diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPathByteStream.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPathByteStream.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPathByteStream.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPathByteStream.h
@@ -1,8 +1,8 @@
 /*
  * Copyright (C) Research In Motion Limited 2010. All rights reserved.
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -47,10 +47,16 @@
 public:
     typedef Vector<unsigned char> Data;
     typedef Data::const_iterator DataIterator;
 
     SVGPathByteStream() { }
+
+    SVGPathByteStream(const String& string)
+    {
+        buildSVGPathByteStreamFromString(string, *this, UnalteredParsing);
+    }
+
     SVGPathByteStream(const SVGPathByteStream& other)
     {
         *this = other;
     }
 
@@ -78,11 +84,11 @@
     bool operator==(const SVGPathByteStream& other) const { return m_data == other.m_data; }
     bool operator!=(const SVGPathByteStream& other) const { return !(*this == other); }
 
     std::unique_ptr<SVGPathByteStream> copy() const
     {
-        return std::make_unique<SVGPathByteStream>(*this);
+        return makeUnique<SVGPathByteStream>(*this);
     }
 
     DataIterator begin() const { return m_data.begin(); }
     DataIterator end() const { return m_data.end(); }
 
@@ -90,26 +96,10 @@
     void append(const SVGPathByteStream& other) { m_data.appendVector(other.m_data); }
     void clear() { m_data.clear(); }
     bool isEmpty() const { return m_data.isEmpty(); }
     unsigned size() const { return m_data.size(); }
 
-    // Only defined to let SVGAnimatedPathAnimator use the standard list code paths - this method is never called.
-    void resize(unsigned) { }
-
 private:
     Data m_data;
 };
 
-template<>
-struct SVGPropertyTraits<SVGPathByteStream> {
-    static SVGPathByteStream initialValue() { return SVGPathByteStream(); }
-    static SVGPathByteStream fromString(const String& string)
-    {
-        SVGPathByteStream byteStream;
-        buildSVGPathByteStreamFromString(string, byteStream, UnalteredParsing);
-        return byteStream;
-    }
-    static Optional<SVGPathByteStream> parse(const QualifiedName&, const String&) { ASSERT_NOT_REACHED(); return { }; }
-    static String toString(const SVGPathByteStream&) { ASSERT_NOT_REACHED(); return emptyString(); }
-};
-
 } // namespace WebCore
