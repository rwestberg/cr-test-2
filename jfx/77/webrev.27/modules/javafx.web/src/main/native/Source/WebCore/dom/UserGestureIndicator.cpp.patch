diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/UserGestureIndicator.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/UserGestureIndicator.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/UserGestureIndicator.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/UserGestureIndicator.cpp
@@ -29,10 +29,11 @@
 #include "Document.h"
 #include "Frame.h"
 #include "ResourceLoadObserver.h"
 #include <wtf/MainThread.h>
 #include <wtf/NeverDestroyed.h>
+#include <wtf/Optional.h>
 
 namespace WebCore {
 
 static RefPtr<UserGestureToken>& currentToken()
 {
@@ -67,28 +68,35 @@
             }
         }
     }
 }
 
-UserGestureIndicator::UserGestureIndicator(RefPtr<UserGestureToken> token)
+UserGestureIndicator::UserGestureIndicator(RefPtr<UserGestureToken> token, UserGestureToken::GestureScope scope)
 {
     // Silently ignore UserGestureIndicators on non main threads.
     if (!isMainThread())
         return;
 
     // It is only safe to use currentToken() on the main thread.
     m_previousToken = currentToken();
 
-    if (token)
+    if (token) {
+        token->setScope(scope);
         currentToken() = token;
+    }
 }
 
 UserGestureIndicator::~UserGestureIndicator()
 {
     if (!isMainThread())
         return;
 
+    if (auto token = currentToken()) {
+        token->resetDOMPasteAccess();
+        token->resetScope();
+    }
+
     currentToken() = m_previousToken;
 }
 
 RefPtr<UserGestureToken> UserGestureIndicator::currentUserGesture()
 {
