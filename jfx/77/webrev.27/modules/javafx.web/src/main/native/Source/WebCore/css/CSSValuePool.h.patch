diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSValuePool.h b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSValuePool.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSValuePool.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSValuePool.h
@@ -35,11 +35,11 @@
 #include "ColorHash.h"
 #include <utility>
 #include <wtf/HashMap.h>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/RefPtr.h>
-#include <wtf/text/AtomicStringHash.h>
+#include <wtf/text/AtomStringHash.h>
 
 namespace WebCore {
 
 class CSSValueList;
 
@@ -48,11 +48,11 @@
 class CSSValuePool {
     WTF_MAKE_FAST_ALLOCATED;
 public:
     static CSSValuePool& singleton();
 
-    RefPtr<CSSValueList> createFontFaceValue(const AtomicString&);
+    RefPtr<CSSValueList> createFontFaceValue(const AtomString&);
     Ref<CSSPrimitiveValue> createFontFamilyValue(const String&, FromSystemFontID = FromSystemFontID::No);
     Ref<CSSInheritedValue> createInheritedValue() { return m_inheritedValue.get(); }
     Ref<CSSInitialValue> createImplicitInitialValue() { return m_implicitInitialValue.get(); }
     Ref<CSSInitialValue> createExplicitInitialValue() { return m_explicitInitialValue.get(); }
     Ref<CSSUnsetValue> createUnsetValue() { return m_unsetValue.get(); }
@@ -72,11 +72,11 @@
     CSSValuePool();
 
     typedef HashMap<Color, RefPtr<CSSPrimitiveValue>> ColorValueCache;
     ColorValueCache m_colorValueCache;
 
-    typedef HashMap<AtomicString, RefPtr<CSSValueList>> FontFaceValueCache;
+    typedef HashMap<AtomString, RefPtr<CSSValueList>> FontFaceValueCache;
     FontFaceValueCache m_fontFaceValueCache;
 
     typedef HashMap<std::pair<String, bool>, RefPtr<CSSPrimitiveValue>> FontFamilyValueCache;
     FontFamilyValueCache m_fontFamilyValueCache;
 
