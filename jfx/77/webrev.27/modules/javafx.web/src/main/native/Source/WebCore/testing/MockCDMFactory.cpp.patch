diff a/modules/javafx.web/src/main/native/Source/WebCore/testing/MockCDMFactory.cpp b/modules/javafx.web/src/main/native/Source/WebCore/testing/MockCDMFactory.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/testing/MockCDMFactory.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/testing/MockCDMFactory.cpp
@@ -98,19 +98,19 @@
         m_supportedDataTypes.append(type);
 }
 
 std::unique_ptr<CDMPrivate> MockCDMFactory::createCDM(const String&)
 {
-    return std::make_unique<MockCDM>(makeWeakPtr(*this));
+    return makeUnique<MockCDM>(makeWeakPtr(*this));
 }
 
 MockCDM::MockCDM(WeakPtr<MockCDMFactory> factory)
     : m_factory(WTFMove(factory))
 {
 }
 
-bool MockCDM::supportsInitDataType(const AtomicString& initDataType) const
+bool MockCDM::supportsInitDataType(const AtomString& initDataType) const
 {
     if (m_factory)
         return m_factory->supportedDataTypes().contains(initDataType);
     return false;
 }
@@ -195,11 +195,11 @@
 bool MockCDM::supportsSessions() const
 {
     return m_factory && m_factory->supportsSessions();
 }
 
-bool MockCDM::supportsInitData(const AtomicString& initDataType, const SharedBuffer& initData) const
+bool MockCDM::supportsInitData(const AtomString& initDataType, const SharedBuffer& initData) const
 {
     if (!supportsInitDataType(initDataType))
         return false;
 
     UNUSED_PARAM(initData);
@@ -267,11 +267,11 @@
     return Succeeded;
 }
 
 CDMInstance::SuccessValue MockCDMInstance::setServerCertificate(Ref<SharedBuffer>&& certificate)
 {
-    StringView certificateStringView(reinterpret_cast<const LChar*>(certificate->data()), certificate->size());
+    StringView certificateStringView(certificate->data(), certificate->size());
 
     if (equalIgnoringASCIICase(certificateStringView, "valid"))
         return Succeeded;
     return Failed;
 }
@@ -297,11 +297,11 @@
 MockCDMInstanceSession::MockCDMInstanceSession(WeakPtr<MockCDMInstance>&& instance)
     : m_instance(WTFMove(instance))
 {
 }
 
-void MockCDMInstanceSession::requestLicense(LicenseType licenseType, const AtomicString& initDataType, Ref<SharedBuffer>&& initData, LicenseCallback&& callback)
+void MockCDMInstanceSession::requestLicense(LicenseType licenseType, const AtomString& initDataType, Ref<SharedBuffer>&& initData, LicenseCallback&& callback)
 {
     MockCDMFactory* factory = m_instance ? m_instance->factory() : nullptr;
     if (!factory) {
         callback(SharedBuffer::create(), emptyAtom(), false, SuccessValue::Failed);
         return;
