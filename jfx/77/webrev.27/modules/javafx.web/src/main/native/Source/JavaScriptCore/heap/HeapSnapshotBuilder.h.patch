diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/HeapSnapshotBuilder.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/HeapSnapshotBuilder.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/HeapSnapshotBuilder.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/HeapSnapshotBuilder.h
@@ -23,16 +23,14 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
-#include "SlotVisitor.h"
+#include "HeapAnalyzer.h"
 #include <functional>
 #include <wtf/Lock.h>
 #include <wtf/Vector.h>
-#include <wtf/text/UniquedStringImpl.h>
-#include <wtf/text/WTFString.h>
 
 namespace JSC {
 
 class ConservativeRoots;
 class HeapProfiler;
@@ -100,11 +98,11 @@
     } u;
 
     EdgeType type;
 };
 
-class JS_EXPORT_PRIVATE HeapSnapshotBuilder {
+class JS_EXPORT_PRIVATE HeapSnapshotBuilder final : public HeapAnalyzer {
     WTF_MAKE_FAST_ALLOCATED;
 public:
     enum SnapshotType { InspectorSnapshot, GCDebuggingSnapshot };
 
     HeapSnapshotBuilder(HeapProfiler&, SnapshotType = SnapshotType::InspectorSnapshot);
@@ -114,17 +112,17 @@
 
     // Performs a garbage collection that builds a snapshot of all live cells.
     void buildSnapshot();
 
     // A root or marked cell.
-    void appendNode(JSCell*);
+    void analyzeNode(JSCell*);
 
     // A reference from one cell to another.
-    void appendEdge(JSCell* from, JSCell* to, SlotVisitor::RootMarkReason);
-    void appendPropertyNameEdge(JSCell* from, JSCell* to, UniquedStringImpl* propertyName);
-    void appendVariableNameEdge(JSCell* from, JSCell* to, UniquedStringImpl* variableName);
-    void appendIndexEdge(JSCell* from, JSCell* to, uint32_t index);
+    void analyzeEdge(JSCell* from, JSCell* to, SlotVisitor::RootMarkReason);
+    void analyzePropertyNameEdge(JSCell* from, JSCell* to, UniquedStringImpl* propertyName);
+    void analyzeVariableNameEdge(JSCell* from, JSCell* to, UniquedStringImpl* variableName);
+    void analyzeIndexEdge(JSCell* from, JSCell* to, uint32_t index);
 
     void setOpaqueRootReachabilityReasonForCell(JSCell*, const char*);
     void setWrappedObjectForCell(JSCell*, void*);
     void setLabelForCell(JSCell*, const String&);
 
