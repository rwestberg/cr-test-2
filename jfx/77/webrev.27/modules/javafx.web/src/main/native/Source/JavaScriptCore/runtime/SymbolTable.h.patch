diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolTable.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolTable.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolTable.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolTable.h
@@ -343,11 +343,10 @@
 
         RefPtr<WatchpointSet> m_watchpoints;
     };
 
     SymbolTableEntry& copySlow(const SymbolTableEntry&);
-    JS_EXPORT_PRIVATE void notifyWriteSlow(VM&, JSValue, const FireDetail&);
 
     bool isFat() const
     {
         return !(m_bits & SlimFlag);
     }
@@ -448,10 +447,16 @@
     typedef HashMap<RefPtr<UniquedStringImpl>, GlobalVariableID, IdentifierRepHash> UniqueIDMap;
     typedef HashMap<RefPtr<UniquedStringImpl>, RefPtr<TypeSet>, IdentifierRepHash> UniqueTypeSetMap;
     typedef HashMap<VarOffset, RefPtr<UniquedStringImpl>> OffsetToVariableMap;
     typedef Vector<SymbolTableEntry*> LocalToEntryVec;
 
+    template<typename CellType, SubspaceAccess>
+    static IsoSubspace* subspaceFor(VM& vm)
+    {
+        return &vm.symbolTableSpace;
+    }
+
     static SymbolTable* create(VM& vm)
     {
         SymbolTable* symbolTable = new (NotNull, allocateCell<SymbolTable>(vm.heap)) SymbolTable(vm);
         symbolTable->finishCreation(vm);
         return symbolTable;
@@ -629,12 +634,13 @@
     }
 
     void setArgumentsLength(VM& vm, uint32_t length)
     {
         if (UNLIKELY(!m_arguments))
-            m_arguments.set(vm, this, ScopedArgumentsTable::create(vm));
-        m_arguments.set(vm, this, m_arguments->setLength(vm, length));
+            m_arguments.set(vm, this, ScopedArgumentsTable::create(vm, length));
+        else
+            m_arguments.set(vm, this, m_arguments->setLength(vm, length));
     }
 
     ScopeOffset argumentOffset(uint32_t i) const
     {
         ASSERT_WITH_SECURITY_IMPLICATION(m_arguments);
@@ -684,16 +690,23 @@
     void prepareForTypeProfiling(const ConcurrentJSLocker&);
 
     CodeBlock* rareDataCodeBlock();
     void setRareDataCodeBlock(CodeBlock*);
 
-    InferredValue* singletonScope() { return m_singletonScope.get(); }
+    InferredValue<JSScope>& singleton() { return m_singleton; }
+
+    void notifyCreation(VM& vm, JSScope* scope, const char* reason)
+    {
+        m_singleton.notifyWrite(vm, this, scope, reason);
+    }
 
     static void visitChildren(JSCell*, SlotVisitor&);
 
     DECLARE_EXPORT_INFO;
 
+    void finalizeUnconditionally(VM&);
+
 private:
     JS_EXPORT_PRIVATE SymbolTable(VM&);
     ~SymbolTable();
 
     JS_EXPORT_PRIVATE void finishCreation(VM&);
@@ -706,19 +719,20 @@
     unsigned m_usesNonStrictEval : 1;
     unsigned m_nestedLexicalScope : 1; // Non-function LexicalScope.
     unsigned m_scopeType : 3; // ScopeType
 
     struct SymbolTableRareData {
+        WTF_MAKE_STRUCT_FAST_ALLOCATED;
         UniqueIDMap m_uniqueIDMap;
         OffsetToVariableMap m_offsetToVariableMap;
         UniqueTypeSetMap m_uniqueTypeSetMap;
         WriteBarrier<CodeBlock> m_codeBlock;
     };
     std::unique_ptr<SymbolTableRareData> m_rareData;
 
     WriteBarrier<ScopedArgumentsTable> m_arguments;
-    WriteBarrier<InferredValue> m_singletonScope;
+    InferredValue<JSScope> m_singleton;
 
     std::unique_ptr<LocalToEntryVec> m_localToEntry;
 };
 
 } // namespace JSC
