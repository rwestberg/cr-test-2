diff a/modules/javafx.web/src/main/native/Source/WebCore/css/FontFaceSet.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/FontFaceSet.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/FontFaceSet.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/FontFaceSet.cpp
@@ -26,16 +26,20 @@
 #include "config.h"
 #include "FontFaceSet.h"
 
 #include "Document.h"
 #include "FontFace.h"
+#include "FrameLoader.h"
 #include "JSDOMBinding.h"
 #include "JSFontFace.h"
 #include "JSFontFaceSet.h"
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(FontFaceSet);
+
 Ref<FontFaceSet> FontFaceSet::create(Document& document, const Vector<RefPtr<FontFace>>& initialFaces)
 {
     Ref<FontFaceSet> result = adoptRef(*new FontFaceSet(document, initialFaces));
     result->suspendIfNeeded();
     return result;
@@ -61,12 +65,16 @@
 FontFaceSet::FontFaceSet(Document& document, CSSFontFaceSet& backing)
     : ActiveDOMObject(document)
     , m_backing(backing)
     , m_readyPromise(*this, &FontFaceSet::readyPromiseResolve)
 {
-    if (!backing.hasActiveFontFaces())
+    if (document.frame())
+        m_isFirstLayoutDone = document.frame()->loader().stateMachine().firstLayoutDone();
+
+    if (m_isFirstLayoutDone && !backing.hasActiveFontFaces())
         m_readyPromise.resolve(*this);
+
     m_backing->addClient(*this);
 }
 
 FontFaceSet::~FontFaceSet()
 {
@@ -186,16 +194,23 @@
 }
 
 void FontFaceSet::startedLoading()
 {
     // FIXME: Fire a "loading" event asynchronously.
-    m_readyPromise.clear();
+}
+
+void FontFaceSet::didFirstLayout()
+{
+    m_isFirstLayoutDone = true;
+    if (!m_backing->hasActiveFontFaces() && !m_readyPromise.isFulfilled())
+        m_readyPromise.resolve(*this);
 }
 
 void FontFaceSet::completedLoading()
 {
-    m_readyPromise.resolve(*this);
+    if (m_isFirstLayoutDone && !m_readyPromise.isFulfilled())
+        m_readyPromise.resolve(*this);
 }
 
 void FontFaceSet::faceFinished(CSSFontFace& face, CSSFontFace::Status newStatus)
 {
     if (!face.existingWrapper())
