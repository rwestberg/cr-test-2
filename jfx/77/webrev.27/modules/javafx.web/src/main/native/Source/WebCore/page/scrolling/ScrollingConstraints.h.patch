diff a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingConstraints.h b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingConstraints.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingConstraints.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingConstraints.h
@@ -24,13 +24,38 @@
  */
 
 #pragma once
 
 #include "FloatRect.h"
+#include "ScrollTypes.h"
 
 namespace WebCore {
 
+class AbsolutePositionConstraints {
+    WTF_MAKE_FAST_ALLOCATED;
+public:
+    AbsolutePositionConstraints() = default;
+
+    bool operator==(const AbsolutePositionConstraints& other) const
+    {
+        return alignmentOffset() == other.alignmentOffset()
+            && layerPositionAtLastLayout() == other.layerPositionAtLastLayout();
+    }
+
+    bool operator!=(const AbsolutePositionConstraints& other) const { return !(*this == other); }
+
+    FloatSize alignmentOffset() const { return m_alignmentOffset; }
+    void setAlignmentOffset(FloatSize offset) { m_alignmentOffset = offset; }
+
+    FloatPoint layerPositionAtLastLayout() const { return m_layerPositionAtLastLayout; }
+    void setLayerPositionAtLastLayout(FloatPoint position) { m_layerPositionAtLastLayout = position; }
+
+private:
+    FloatSize m_alignmentOffset;
+    FloatPoint m_layerPositionAtLastLayout;
+};
+
 // ViewportConstraints classes encapsulate data and logic required to reposition elements whose layout
 // depends on the viewport rect (positions fixed and sticky), when scrolling and zooming.
 class ViewportConstraints {
     WTF_MAKE_FAST_ALLOCATED;
 public:
@@ -45,26 +70,21 @@
         AnchorEdgeTop = 1 << 2,
         AnchorEdgeBottom = 1 << 3
     };
     typedef unsigned AnchorEdges;
 
-    ViewportConstraints(const ViewportConstraints& other)
-        : m_alignmentOffset(other.m_alignmentOffset)
-        , m_anchorEdges(other.m_anchorEdges)
-    { }
-
     virtual ~ViewportConstraints() = default;
 
     virtual ConstraintType constraintType() const = 0;
 
     AnchorEdges anchorEdges() const { return m_anchorEdges; }
     bool hasAnchorEdge(AnchorEdgeFlags flag) const { return m_anchorEdges & flag; }
     void addAnchorEdge(AnchorEdgeFlags edgeFlag) { m_anchorEdges |= edgeFlag; }
     void setAnchorEdges(AnchorEdges edges) { m_anchorEdges = edges; }
 
     FloatSize alignmentOffset() const { return m_alignmentOffset; }
-    void setAlignmentOffset(const FloatSize& offset) { m_alignmentOffset = offset; }
+    void setAlignmentOffset(FloatSize offset) { m_alignmentOffset = offset; }
 
 protected:
     ViewportConstraints()
         : m_anchorEdges(0)
     { }
@@ -77,23 +97,17 @@
 public:
     FixedPositionViewportConstraints()
         : ViewportConstraints()
     { }
 
-    FixedPositionViewportConstraints(const FixedPositionViewportConstraints& other)
-        : ViewportConstraints(other)
-        , m_viewportRectAtLastLayout(other.m_viewportRectAtLastLayout)
-        , m_layerPositionAtLastLayout(other.m_layerPositionAtLastLayout)
-    { }
-
     WEBCORE_EXPORT FloatPoint layerPositionForViewportRect(const FloatRect& viewportRect) const;
 
     const FloatRect& viewportRectAtLastLayout() const { return m_viewportRectAtLastLayout; }
     void setViewportRectAtLastLayout(const FloatRect& rect) { m_viewportRectAtLastLayout = rect; }
 
     const FloatPoint& layerPositionAtLastLayout() const { return m_layerPositionAtLastLayout; }
-    void setLayerPositionAtLastLayout(const FloatPoint& point) { m_layerPositionAtLastLayout = point; }
+    void setLayerPositionAtLastLayout(FloatPoint position) { m_layerPositionAtLastLayout = position; }
 
     bool operator==(const FixedPositionViewportConstraints& other) const
     {
         return m_alignmentOffset == other.m_alignmentOffset
             && m_anchorEdges == other.m_anchorEdges
@@ -117,32 +131,19 @@
         , m_rightOffset(0)
         , m_topOffset(0)
         , m_bottomOffset(0)
     { }
 
-    StickyPositionViewportConstraints(const StickyPositionViewportConstraints& other)
-        : ViewportConstraints(other)
-        , m_leftOffset(other.m_leftOffset)
-        , m_rightOffset(other.m_rightOffset)
-        , m_topOffset(other.m_topOffset)
-        , m_bottomOffset(other.m_bottomOffset)
-        , m_constrainingRectAtLastLayout(other.m_constrainingRectAtLastLayout)
-        , m_containingBlockRect(other.m_containingBlockRect)
-        , m_stickyBoxRect(other.m_stickyBoxRect)
-        , m_stickyOffsetAtLastLayout(other.m_stickyOffsetAtLastLayout)
-        , m_layerPositionAtLastLayout(other.m_layerPositionAtLastLayout)
-    { }
-
     FloatSize computeStickyOffset(const FloatRect& constrainingRect) const;
 
     const FloatSize stickyOffsetAtLastLayout() const { return m_stickyOffsetAtLastLayout; }
-    void setStickyOffsetAtLastLayout(const FloatSize& offset) { m_stickyOffsetAtLastLayout = offset; }
+    void setStickyOffsetAtLastLayout(FloatSize offset) { m_stickyOffsetAtLastLayout = offset; }
 
     WEBCORE_EXPORT FloatPoint layerPositionForConstrainingRect(const FloatRect& constrainingRect) const;
 
     const FloatPoint& layerPositionAtLastLayout() const { return m_layerPositionAtLastLayout; }
-    void setLayerPositionAtLastLayout(const FloatPoint& point) { m_layerPositionAtLastLayout = point; }
+    void setLayerPositionAtLastLayout(FloatPoint position) { m_layerPositionAtLastLayout = position; }
 
     float leftOffset() const { return m_leftOffset; }
     float rightOffset() const { return m_rightOffset; }
     float topOffset() const { return m_topOffset; }
     float bottomOffset() const { return m_bottomOffset; }
@@ -193,9 +194,12 @@
     FloatRect m_stickyBoxRect;
     FloatSize m_stickyOffsetAtLastLayout;
     FloatPoint m_layerPositionAtLastLayout;
 };
 
+
+WEBCORE_EXPORT WTF::TextStream& operator<<(WTF::TextStream&, ScrollPositioningBehavior);
+WEBCORE_EXPORT WTF::TextStream& operator<<(WTF::TextStream&, const AbsolutePositionConstraints&);
 WEBCORE_EXPORT WTF::TextStream& operator<<(WTF::TextStream&, const FixedPositionViewportConstraints&);
 WEBCORE_EXPORT WTF::TextStream& operator<<(WTF::TextStream&, const StickyPositionViewportConstraints&);
 
 } // namespace WebCore
