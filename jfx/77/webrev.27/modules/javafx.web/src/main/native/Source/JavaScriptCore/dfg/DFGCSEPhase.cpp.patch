diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGCSEPhase.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGCSEPhase.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGCSEPhase.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGCSEPhase.cpp
@@ -134,11 +134,11 @@
         ASSERT(result == m_debugImpureData.get(location));
 #endif
         return result;
     }
 
-    void clobber(AbstractHeap heap)
+    void clobber(AbstractHeap heap, bool clobberConservatively)
     {
         switch (heap.kind()) {
         case World: {
             clear();
             break;
@@ -147,19 +147,49 @@
             break;
         case Stack: {
             ASSERT(!heap.payload().isTop());
             ASSERT(heap.payload().value() == heap.payload().value32());
             m_abstractHeapStackMap.remove(heap.payload().value32());
-            clobber(m_fallbackStackMap, heap);
+            if (clobberConservatively)
+                m_fallbackStackMap.clear();
+            else
+                clobber(m_fallbackStackMap, heap);
             break;
         }
         default:
-            clobber(m_heapMap, heap);
+            if (clobberConservatively)
+                m_heapMap.clear();
+            else
+                clobber(m_heapMap, heap);
             break;
         }
 #if !defined(NDEBUG)
-        m_debugImpureData.removeIf([heap](const HashMap<HeapLocation, LazyNode>::KeyValuePairType& pair) -> bool {
+        m_debugImpureData.removeIf([heap, clobberConservatively, this](const HashMap<HeapLocation, LazyNode>::KeyValuePairType& pair) -> bool {
+            switch (heap.kind()) {
+            case World:
+            case SideState:
+                break;
+            case Stack: {
+                if (!clobberConservatively)
+                    break;
+                if (pair.key.heap().kind() == Stack) {
+                    auto iterator = m_abstractHeapStackMap.find(pair.key.heap().payload().value32());
+                    if (iterator != m_abstractHeapStackMap.end() && iterator->value->key == pair.key)
+                        return false;
+                    return true;
+                }
+                break;
+            }
+            default: {
+                if (!clobberConservatively)
+                    break;
+                AbstractHeapKind kind = pair.key.heap().kind();
+                if (kind != World && kind != SideState && kind != Stack)
+                    return true;
+                break;
+            }
+            }
             return heap.overlaps(pair.key.heap());
         });
         ASSERT(m_debugImpureData.size()
             == (m_heapMap.size()
                 + m_abstractHeapStackMap.size()
@@ -255,11 +285,11 @@
         map.removeIf([heap](const std::unique_ptr<ImpureDataSlot>& slot) -> bool {
             return heap.overlaps(slot->key.heap());
         });
     }
 
-    // The majority of Impure Stack Slotsare unique per value.
+    // The majority of Impure Stack Slots are unique per value.
     // This is very useful for fast clobber(), we can just remove the slot addressed by AbstractHeap
     // in O(1).
     //
     // When there are conflict, any additional HeapLocation is added in the fallback map.
     // This works well because fallbackStackMap remains tiny.
@@ -282,10 +312,11 @@
 public:
     LocalCSEPhase(Graph& graph)
         : Phase(graph, "local common subexpression elimination")
         , m_smallBlock(graph)
         , m_largeBlock(graph)
+        , m_hugeBlock(graph)
     {
     }
 
     bool run()
     {
@@ -301,12 +332,14 @@
             if (!block)
                 continue;
 
             if (block->size() <= SmallMaps::capacity)
                 changed |= m_smallBlock.run(block);
-            else
+            else if (block->size() <= Options::maxDFGNodesInBasicBlockForPreciseAnalysis())
                 changed |= m_largeBlock.run(block);
+            else
+                changed |= m_hugeBlock.run(block);
         }
 
         return changed;
     }
 
@@ -398,11 +431,58 @@
             m_impureMap.clear();
         }
 
         void write(AbstractHeap heap)
         {
-            m_impureMap.clobber(heap);
+            bool clobberConservatively = false;
+            m_impureMap.clobber(heap, clobberConservatively);
+        }
+
+        Node* addPure(PureValue value, Node* node)
+        {
+            auto result = m_pureMap.add(value, node);
+            if (result.isNewEntry)
+                return nullptr;
+            return result.iterator->value;
+        }
+
+        LazyNode findReplacement(HeapLocation location)
+        {
+            return m_impureMap.get(location);
+        }
+
+        LazyNode addImpure(const HeapLocation& location, const LazyNode& node)
+        {
+            if (const ImpureDataSlot* slot = m_impureMap.add(location, node))
+                return slot->value;
+            return LazyNode();
+        }
+
+    private:
+        HashMap<PureValue, Node*> m_pureMap;
+        ImpureMap m_impureMap;
+    };
+
+    // This is used only for huge basic blocks. Our usual CSE is quadratic complexity for # of DFG nodes in a basic block.
+    // HugeMaps model results conservatively to avoid an O(N^2) algorithm. In particular, we clear all the slots of the specified heap kind
+    // in ImpureMap instead of iterating slots and removing a matched slot. This change makes the complexity O(N).
+    // FIXME: We can make LargeMap O(N) without introducing conservative behavior if we track clobbering by hierarchical epochs.
+    // https://bugs.webkit.org/show_bug.cgi?id=200014
+    class HugeMaps {
+    public:
+        HugeMaps() = default;
+
+        void clear()
+        {
+            m_pureMap.clear();
+            m_impureMap.clear();
+        }
+
+        void write(AbstractHeap heap)
+        {
+            bool clobberConservatively = true;
+            m_impureMap.clobber(heap, clobberConservatively);
         }
 
         Node* addPure(PureValue value, Node* node)
         {
             auto result = m_pureMap.add(value, node);
@@ -579,10 +659,11 @@
         InsertionSet m_insertionSet;
     };
 
     BlockCSE<SmallMaps> m_smallBlock;
     BlockCSE<LargeMaps> m_largeBlock;
+    BlockCSE<HugeMaps> m_hugeBlock;
 };
 
 class GlobalCSEPhase : public Phase {
 public:
     GlobalCSEPhase(Graph& graph)
@@ -666,11 +747,12 @@
 
     void read(AbstractHeap) { }
 
     void write(AbstractHeap heap)
     {
-        m_impureData->availableAtTail.clobber(heap);
+        bool clobberConservatively = false;
+        m_impureData->availableAtTail.clobber(heap, clobberConservatively);
         m_writesSoFar.add(heap);
     }
 
     void def(PureValue value)
     {
