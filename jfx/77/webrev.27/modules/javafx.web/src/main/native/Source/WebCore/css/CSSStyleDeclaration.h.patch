diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSStyleDeclaration.h b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSStyleDeclaration.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSStyleDeclaration.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSStyleDeclaration.h
@@ -21,13 +21,10 @@
 #pragma once
 
 #include "CSSPropertyNames.h"
 #include "ExceptionOr.h"
 #include "ScriptWrappable.h"
-#include <wtf/Forward.h>
-#include <wtf/Optional.h>
-#include <wtf/Variant.h>
 
 namespace WebCore {
 
 class CSSProperty;
 class CSSRule;
@@ -37,11 +34,12 @@
 class MutableStyleProperties;
 class StyleProperties;
 class StyledElement;
 
 class CSSStyleDeclaration : public ScriptWrappable {
-    WTF_MAKE_NONCOPYABLE(CSSStyleDeclaration); WTF_MAKE_FAST_ALLOCATED;
+    WTF_MAKE_NONCOPYABLE(CSSStyleDeclaration);
+    WTF_MAKE_ISO_ALLOCATED(CSSStyleDeclaration);
 public:
     virtual ~CSSStyleDeclaration() = default;
 
     virtual void ref() = 0;
     virtual void deref() = 0;
@@ -73,15 +71,15 @@
     virtual Ref<MutableStyleProperties> copyProperties() const = 0;
 
     virtual CSSStyleSheet* parentStyleSheet() const { return nullptr; }
 
     // Bindings support.
-    Optional<Variant<String, double>> namedItem(const AtomicString&);
-    ExceptionOr<void> setNamedItem(const AtomicString& name, String value, bool& propertySupported);
-    Vector<AtomicString> supportedPropertyNames() const;
+    Optional<Variant<String, double>> namedItem(const AtomString&);
+    ExceptionOr<void> setNamedItem(const AtomString& name, String value, bool& propertySupported);
+    Vector<AtomString> supportedPropertyNames() const;
 
-    static CSSPropertyID getCSSPropertyIDFromJavaScriptPropertyName(const AtomicString&);
+    static CSSPropertyID getCSSPropertyIDFromJavaScriptPropertyName(const AtomString&);
 protected:
     CSSStyleDeclaration() = default;
 };
 
 } // namespace WebCore
