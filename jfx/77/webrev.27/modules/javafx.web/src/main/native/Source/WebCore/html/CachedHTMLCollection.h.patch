diff a/modules/javafx.web/src/main/native/Source/WebCore/html/CachedHTMLCollection.h b/modules/javafx.web/src/main/native/Source/WebCore/html/CachedHTMLCollection.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/CachedHTMLCollection.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/CachedHTMLCollection.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2015-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -26,23 +26,25 @@
 #pragma once
 
 #include "CollectionTraversal.h"
 #include "HTMLCollection.h"
 #include "HTMLElement.h"
+#include <wtf/IsoMalloc.h>
 
 namespace WebCore {
 
 template <typename HTMLCollectionClass, CollectionTraversalType traversalType>
 class CachedHTMLCollection : public HTMLCollection {
+    WTF_MAKE_ISO_NONALLOCATABLE(CachedHTMLCollection);
 public:
     CachedHTMLCollection(ContainerNode& base, CollectionType);
 
     virtual ~CachedHTMLCollection();
 
     unsigned length() const final { return m_indexCache.nodeCount(collection()); }
     Element* item(unsigned offset) const override { return m_indexCache.nodeAt(collection(), offset); }
-    Element* namedItem(const AtomicString& name) const override;
+    Element* namedItem(const AtomString& name) const override;
     size_t memoryCost() const final
     {
         // memoryCost() may be invoked concurrently from a GC thread, and we need to be careful about what data we access here and how.
         // Accessing m_indexCache.memoryCost() is safe because because it doesn't involve any pointer chasing.
         // HTMLCollection::memoryCost() ensures its own thread safety.
@@ -125,11 +127,11 @@
 {
     return is<HTMLElement>(element) && nameShouldBeVisibleInDocumentAll(downcast<HTMLElement>(element));
 }
 
 template <typename HTMLCollectionClass, CollectionTraversalType traversalType>
-Element* CachedHTMLCollection<HTMLCollectionClass, traversalType>::namedItem(const AtomicString& name) const
+Element* CachedHTMLCollection<HTMLCollectionClass, traversalType>::namedItem(const AtomString& name) const
 {
     // http://msdn.microsoft.com/workshop/author/dhtml/reference/methods/nameditem.asp
     // This method first searches for an object with a matching id
     // attribute. If a match is not found, the method then searches for an
     // object with a matching name attribute, but only on those elements
