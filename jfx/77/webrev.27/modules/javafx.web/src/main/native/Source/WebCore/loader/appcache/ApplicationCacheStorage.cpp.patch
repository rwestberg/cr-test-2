diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheStorage.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheStorage.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheStorage.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheStorage.cpp
@@ -1059,11 +1059,11 @@
     ASSERT(find(header, headerLength, ':') != notFound);
     unsigned colonPosition = find(header, headerLength, ':');
 
     // Save memory by putting the header names into atomic strings so each is stored only once,
     // even though the setHTTPHeaderField function does not require an atomic string.
-    AtomicString headerName { header, colonPosition };
+    AtomString headerName { header, colonPosition };
     String headerValue { header + colonPosition + 1, headerLength - colonPosition - 1 };
 
     response.setHTTPHeaderField(headerName, headerValue);
 }
 
@@ -1199,11 +1199,11 @@
 
     cache->setFallbackURLs(fallbackURLs);
 
     cache->setStorageID(storageID);
 
-    return WTFMove(cache);
+    return cache;
 }
 
 void ApplicationCacheStorage::remove(ApplicationCache* cache)
 {
     SQLiteTransactionInProgressAutoCounter transactionCounter;
@@ -1323,11 +1323,11 @@
 
     Vector<URL> urls;
     while (selectURLs.step() == SQLITE_ROW)
         urls.append(URL({ }, selectURLs.getColumnText(0)));
 
-    return WTFMove(urls);
+    return urls;
 }
 
 bool ApplicationCacheStorage::deleteCacheGroupRecord(const String& manifestURL)
 {
     ASSERT(SQLiteDatabaseTracker::hasTransactionInProgress());
