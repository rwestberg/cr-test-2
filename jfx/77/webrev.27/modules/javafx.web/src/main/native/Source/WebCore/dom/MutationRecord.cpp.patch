diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/MutationRecord.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/MutationRecord.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/MutationRecord.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/MutationRecord.cpp
@@ -59,11 +59,11 @@
         , m_nextSibling(WTFMove(nextSibling))
     {
     }
 
 private:
-    const AtomicString& type() override;
+    const AtomString& type() override;
     Node* target() override { return m_target.ptr(); }
     NodeList* addedNodes() override { return m_addedNodes.get(); }
     NodeList* removedNodes() override { return m_removedNodes.get(); }
     Node* previousSibling() override { return m_previousSibling.get(); }
     Node* nextSibling() override { return m_nextSibling.get(); }
@@ -116,53 +116,53 @@
     RefPtr<NodeList> m_removedNodes;
 };
 
 class AttributesRecord final : public RecordWithEmptyNodeLists {
 public:
-    AttributesRecord(Element& target, const QualifiedName& name, const AtomicString& oldValue)
+    AttributesRecord(Element& target, const QualifiedName& name, const AtomString& oldValue)
         : RecordWithEmptyNodeLists(target, oldValue)
         , m_attributeName(name.localName())
         , m_attributeNamespace(name.namespaceURI())
     {
     }
 
 private:
-    const AtomicString& type() override;
-    const AtomicString& attributeName() override { return m_attributeName; }
-    const AtomicString& attributeNamespace() override { return m_attributeNamespace; }
+    const AtomString& type() override;
+    const AtomString& attributeName() override { return m_attributeName; }
+    const AtomString& attributeNamespace() override { return m_attributeNamespace; }
 
-    AtomicString m_attributeName;
-    AtomicString m_attributeNamespace;
+    AtomString m_attributeName;
+    AtomString m_attributeNamespace;
 };
 
 class CharacterDataRecord : public RecordWithEmptyNodeLists {
 public:
     CharacterDataRecord(CharacterData& target, const String& oldValue)
         : RecordWithEmptyNodeLists(target, oldValue)
     {
     }
 
 private:
-    const AtomicString& type() override;
+    const AtomString& type() override;
 };
 
 class MutationRecordWithNullOldValue final : public MutationRecord {
 public:
     MutationRecordWithNullOldValue(MutationRecord& record)
         : m_record(record)
     {
     }
 
 private:
-    const AtomicString& type() override { return m_record->type(); }
+    const AtomString& type() override { return m_record->type(); }
     Node* target() override { return m_record->target(); }
     NodeList* addedNodes() override { return m_record->addedNodes(); }
     NodeList* removedNodes() override { return m_record->removedNodes(); }
     Node* previousSibling() override { return m_record->previousSibling(); }
     Node* nextSibling() override { return m_record->nextSibling(); }
-    const AtomicString& attributeName() override { return m_record->attributeName(); }
-    const AtomicString& attributeNamespace() override { return m_record->attributeNamespace(); }
+    const AtomString& attributeName() override { return m_record->attributeName(); }
+    const AtomString& attributeNamespace() override { return m_record->attributeNamespace(); }
 
     String oldValue() override { return String(); }
 
     void visitNodesConcurrently(JSC::SlotVisitor& visitor) const final
     {
@@ -170,36 +170,36 @@
     }
 
     Ref<MutationRecord> m_record;
 };
 
-const AtomicString& ChildListRecord::type()
+const AtomString& ChildListRecord::type()
 {
-    static NeverDestroyed<AtomicString> childList("childList", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> childList("childList", AtomString::ConstructFromLiteral);
     return childList;
 }
 
-const AtomicString& AttributesRecord::type()
+const AtomString& AttributesRecord::type()
 {
-    static NeverDestroyed<AtomicString> attributes("attributes", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> attributes("attributes", AtomString::ConstructFromLiteral);
     return attributes;
 }
 
-const AtomicString& CharacterDataRecord::type()
+const AtomString& CharacterDataRecord::type()
 {
-    static NeverDestroyed<AtomicString> characterData("characterData", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> characterData("characterData", AtomString::ConstructFromLiteral);
     return characterData;
 }
 
 } // namespace
 
 Ref<MutationRecord> MutationRecord::createChildList(ContainerNode& target, Ref<NodeList>&& added, Ref<NodeList>&& removed, RefPtr<Node>&& previousSibling, RefPtr<Node>&& nextSibling)
 {
     return adoptRef(static_cast<MutationRecord&>(*new ChildListRecord(target, WTFMove(added), WTFMove(removed), WTFMove(previousSibling), WTFMove(nextSibling))));
 }
 
-Ref<MutationRecord> MutationRecord::createAttributes(Element& target, const QualifiedName& name, const AtomicString& oldValue)
+Ref<MutationRecord> MutationRecord::createAttributes(Element& target, const QualifiedName& name, const AtomString& oldValue)
 {
     return adoptRef(static_cast<MutationRecord&>(*new AttributesRecord(target, name, oldValue)));
 }
 
 Ref<MutationRecord> MutationRecord::createCharacterData(CharacterData& target, const String& oldValue)
