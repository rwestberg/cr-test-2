diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/SocketStreamHandleImpl.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/SocketStreamHandleImpl.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/SocketStreamHandleImpl.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/SocketStreamHandleImpl.cpp
@@ -24,10 +24,12 @@
  */
 
 #include "config.h"
 #include "SocketStreamHandleImpl.h"
 
+#if !USE(SOUP)
+
 #include "CookieRequestHeaderFieldProxy.h"
 #include "NetworkStorageSession.h"
 #include "SocketStreamHandleClient.h"
 #include "StorageSessionProvider.h"
 #include <wtf/Function.h>
@@ -80,13 +82,11 @@
 static Optional<std::pair<Vector<uint8_t>, bool>> cookieDataForHandshake(const NetworkStorageSession* networkStorageSession, const CookieRequestHeaderFieldProxy& headerFieldProxy)
 {
     if (!networkStorageSession)
         return WTF::nullopt;
 
-    String cookieDataString;
-    bool secureCookiesAccessed = false;
-    std::tie(cookieDataString, secureCookiesAccessed) = networkStorageSession->cookieRequestHeaderFieldValue(headerFieldProxy);
+    auto [cookieDataString, secureCookiesAccessed] = networkStorageSession->cookieRequestHeaderFieldValue(headerFieldProxy);
     if (cookieDataString.isEmpty())
         return std::pair<Vector<uint8_t>, bool> { { }, secureCookiesAccessed };
 
     CString cookieData = cookieDataString.utf8();
 
@@ -185,5 +185,7 @@
 {
     return m_buffer.size();
 }
 
 } // namespace WebCore
+
+#endif // !USE(SOUP)
