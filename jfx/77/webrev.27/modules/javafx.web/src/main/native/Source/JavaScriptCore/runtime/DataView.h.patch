diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DataView.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DataView.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DataView.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DataView.h
@@ -36,15 +36,10 @@
 
 public:
     JS_EXPORT_PRIVATE static Ref<DataView> create(RefPtr<ArrayBuffer>&&, unsigned byteOffset, unsigned length);
     static Ref<DataView> create(RefPtr<ArrayBuffer>&&);
 
-    unsigned byteLength() const override
-    {
-        return m_byteLength;
-    }
-
     TypedArrayType getType() const override
     {
         return TypeDataView;
     }
 
@@ -60,11 +55,11 @@
             }
             *status = true;
         } else
             RELEASE_ASSERT(offset + sizeof(T) <= byteLength());
         return flipBytesIfLittleEndian(
-            *reinterpret_cast<T*>(static_cast<uint8_t*>(m_baseAddress.get()) + offset),
+            *reinterpret_cast<T*>(static_cast<uint8_t*>(m_baseAddress.get(byteLength())) + offset),
             littleEndian);
     }
 
     template<typename T>
     T read(unsigned& offset, bool littleEndian, bool* status = 0)
@@ -84,14 +79,11 @@
                 return;
             }
             *status = true;
         } else
             RELEASE_ASSERT(offset + sizeof(T) <= byteLength());
-        *reinterpret_cast<T*>(static_cast<uint8_t*>(m_baseAddress.get()) + offset) =
+        *reinterpret_cast<T*>(static_cast<uint8_t*>(m_baseAddress.get(byteLength())) + offset) =
             flipBytesIfLittleEndian(value, littleEndian);
     }
-
-private:
-    unsigned m_byteLength;
 };
 
 } // namespace JSC
