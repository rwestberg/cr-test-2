diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/assembler/CPU.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/assembler/CPU.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/assembler/CPU.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/assembler/CPU.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2008-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2008-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -24,10 +24,11 @@
  */
 
 #pragma once
 
 #include "Options.h"
+#include <wtf/NumberOfCores.h>
 
 namespace JSC {
 
 #if USE(JSVALUE64)
 using CPURegister = int64_t;
@@ -53,10 +54,19 @@
 #else
     return false;
 #endif
 }
 
+constexpr bool isARM64E()
+{
+#if CPU(ARM64E)
+    return true;
+#else
+    return false;
+#endif
+}
+
 constexpr bool isX86()
 {
 #if CPU(X86_64) || CPU(X86)
     return true;
 #else
@@ -129,7 +139,21 @@
 inline bool hasSensibleDoubleToInt()
 {
     return optimizeForX86();
 }
 
+#if (CPU(X86) || CPU(X86_64)) && OS(DARWIN)
+bool isKernTCSMAvailable();
+bool enableKernTCSM();
+int kernTCSMAwareNumberOfProcessorCores();
+int64_t hwL3CacheSize();
+int32_t hwPhysicalCPUMax();
+#else
+ALWAYS_INLINE bool isKernTCSMAvailable() { return false; }
+ALWAYS_INLINE bool enableKernTCSM() { return false; }
+ALWAYS_INLINE int kernTCSMAwareNumberOfProcessorCores() { return WTF::numberOfProcessorCores(); }
+ALWAYS_INLINE int64_t hwL3CacheSize() { return 0; }
+ALWAYS_INLINE int32_t hwPhysicalCPUMax() { return kernTCSMAwareNumberOfProcessorCores(); }
+#endif
+
 } // namespace JSC
 
