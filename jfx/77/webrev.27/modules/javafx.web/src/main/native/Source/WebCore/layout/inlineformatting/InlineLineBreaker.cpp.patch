diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/inlineformatting/InlineLineBreaker.cpp b/modules/javafx.web/src/main/native/Source/WebCore/layout/inlineformatting/InlineLineBreaker.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/inlineformatting/InlineLineBreaker.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/inlineformatting/InlineLineBreaker.cpp
@@ -26,175 +26,77 @@
 #include "config.h"
 #include "InlineLineBreaker.h"
 
 #if ENABLE(LAYOUT_FORMATTING_CONTEXT)
 
-#include "FontCascade.h"
 #include "Hyphenation.h"
-#include "InlineRunProvider.h"
-#include "TextUtil.h"
-#include <wtf/IsoMallocInlines.h>
+#include "InlineItem.h"
+#include "InlineTextItem.h"
+#include "LayoutState.h"
 
 namespace WebCore {
 namespace Layout {
 
-WTF_MAKE_ISO_ALLOCATED_IMPL(InlineLineBreaker);
-
-InlineLineBreaker::InlineLineBreaker(const LayoutState& layoutState, const InlineContent& inlineContent, const Vector<InlineRunProvider::Run>& inlineRuns)
-    : m_layoutState(layoutState)
-    , m_inlineContent(inlineContent)
-    , m_inlineRuns(inlineRuns)
-{
-}
-
-Optional<InlineLineBreaker::Run> InlineLineBreaker::nextRun(LayoutUnit contentLogicalLeft, LayoutUnit availableWidth, bool lineIsEmpty)
+LineBreaker::BreakingContext LineBreaker::breakingContext(const InlineItem& inlineItem, LayoutUnit logicalWidth, const LineContext& lineContext)
 {
-    if (isAtContentEnd())
-        return WTF::nullopt;
-
-    InlineRunProvider::Run currentInlineRun = m_inlineRuns[m_currentRunIndex];
-    // Adjust the current run if it is split midword.
-    if (m_splitPosition) {
-        ASSERT(currentInlineRun.isText());
-        m_splitPosition = WTF::nullopt;
-    }
+    // First content always stays on line.
+    if (lineContext.isEmpty || logicalWidth <= lineContext.availableWidth)
+        return { BreakingBehavior::Keep, isAtBreakingOpportunity(inlineItem) };
 
-    if (currentInlineRun.isLineBreak()) {
-        ++m_currentRunIndex;
-        return Run { Run::Position::LineEnd, 0, currentInlineRun };
-    }
+    if (inlineItem.isHardLineBreak())
+        return { BreakingBehavior::Keep, isAtBreakingOpportunity(inlineItem) };
 
-    auto contentWidth = runWidth(currentInlineRun, contentLogicalLeft);
-    // 1. Plenty of space left.
-    if (contentWidth <= availableWidth) {
-        ++m_currentRunIndex;
-        return Run { lineIsEmpty ? Run::Position::LineBegin : Run::Position::Undetermined, contentWidth, currentInlineRun };
-    }
+    if (is<InlineTextItem>(inlineItem))
+        return { wordBreakingBehavior(downcast<InlineTextItem>(inlineItem), lineContext.isEmpty), isAtBreakingOpportunity(inlineItem) };
 
-    // 2. No space left whatsoever.
-    if (availableWidth <= 0) {
-        ++m_currentRunIndex;
-        return Run { Run::Position::LineBegin, contentWidth, currentInlineRun };
-    }
-
-    // 3. Some space left. Let's find out what we need to do with this run.
-    auto breakingBehavior = lineBreakingBehavior(currentInlineRun, lineIsEmpty);
-    if (breakingBehavior == LineBreakingBehavior::Keep) {
-        ++m_currentRunIndex;
-        return Run { lineIsEmpty ? Run::Position::LineBegin : Run::Position::Undetermined, contentWidth, currentInlineRun };
-    }
-
-    if (breakingBehavior == LineBreakingBehavior::WrapToNextLine) {
-        ++m_currentRunIndex;
-        return Run { Run::Position::LineBegin, contentWidth, currentInlineRun };
-    }
-
-    ASSERT(breakingBehavior == LineBreakingBehavior::Break);
-    // Split content.
-    return splitRun(currentInlineRun, contentLogicalLeft, availableWidth, lineIsEmpty);
+    // Wrap non-text boxes to the next line unless we can trim trailing whitespace.
+    auto availableWidth = lineContext.availableWidth + lineContext.trimmableWidth;
+    if (logicalWidth <= availableWidth)
+        return { BreakingBehavior::Keep, isAtBreakingOpportunity(inlineItem) };
+    return { BreakingBehavior::Wrap, isAtBreakingOpportunity(inlineItem) };
 }
 
-bool InlineLineBreaker::isAtContentEnd() const
+LineBreaker::BreakingBehavior LineBreaker::wordBreakingBehavior(const InlineTextItem& inlineItem, bool lineIsEmpty) const
 {
-    return m_currentRunIndex == m_inlineRuns.size();
-}
-
-InlineLineBreaker::LineBreakingBehavior InlineLineBreaker::lineBreakingBehavior(const InlineRunProvider::Run& inlineRun, bool lineIsEmpty)
-{
-    // Line breaking behaviour:
+    // Word breaking behaviour:
     // 1. Whitesapce collapse on -> push whitespace to next line.
     // 2. Whitespace collapse off -> whitespace is split where possible.
     // 3. Non-whitespace -> first run on the line -> either split or kept on the line. (depends on overflow-wrap)
     // 4. Non-whitespace -> already content on the line -> either gets split (word-break: break-all) or gets pushed to the next line.
     // (Hyphenate when possible)
     // 5. Non-text type -> next line
-    auto& style = inlineRun.style();
-
-    if (inlineRun.isWhitespace())
-        return style.collapseWhiteSpace() ? LineBreakingBehavior::WrapToNextLine : LineBreakingBehavior::Break;
+    auto& style = inlineItem.style();
 
-    if (inlineRun.isNonWhitespace()) {
-        auto shouldHypenate = !m_hyphenationIsDisabled && style.hyphens() == Hyphens::Auto && canHyphenate(style.locale());
-        if (shouldHypenate)
-            return LineBreakingBehavior::Break;
+    if (inlineItem.isWhitespace())
+        return style.collapseWhiteSpace() ? BreakingBehavior::Wrap : BreakingBehavior::Split;
 
-        if (style.autoWrap()) {
-            // Break any word
-            if (style.wordBreak() == WordBreak::BreakAll)
-                return LineBreakingBehavior::Break;
+    auto shouldHypenate = !m_hyphenationIsDisabled && style.hyphens() == Hyphens::Auto && canHyphenate(style.locale());
+    if (shouldHypenate)
+        return BreakingBehavior::Split;
 
-            // Break first run on line.
-            if (lineIsEmpty && style.breakWords() && style.preserveNewline())
-                return LineBreakingBehavior::Break;
-        }
+    if (style.autoWrap()) {
+        // Break any word
+        if (style.wordBreak() == WordBreak::BreakAll)
+            return BreakingBehavior::Split;
 
-        // Non-breakable non-whitespace run.
-        return lineIsEmpty ? LineBreakingBehavior::Keep : LineBreakingBehavior::WrapToNextLine;
+        // Break first run on line.
+        if (lineIsEmpty && style.breakWords() && style.preserveNewline())
+            return BreakingBehavior::Split;
     }
 
-    ASSERT(inlineRun.isBox() || inlineRun.isFloat());
-    // Non-text inline runs.
-    return LineBreakingBehavior::WrapToNextLine;
-}
-
-LayoutUnit InlineLineBreaker::runWidth(const InlineRunProvider::Run& inlineRun, LayoutUnit contentLogicalLeft) const
-{
-    ASSERT(!inlineRun.isLineBreak());
-
-    if (inlineRun.isText())
-        return textWidth(inlineRun, contentLogicalLeft);
-
-    ASSERT(inlineRun.isBox() || inlineRun.isFloat());
-    auto& inlineItem = inlineRun.inlineItem();
-    auto& layoutBox = inlineItem.layoutBox();
-    ASSERT(m_layoutState.hasDisplayBox(layoutBox));
-    auto& displayBox = m_layoutState.displayBoxForLayoutBox(layoutBox);
-    return inlineItem.nonBreakableStart() + displayBox.width() + inlineItem.nonBreakableEnd();
+    // Non-breakable non-whitespace run.
+    return lineIsEmpty ? BreakingBehavior::Keep : BreakingBehavior::Wrap;
 }
 
-LayoutUnit InlineLineBreaker::textWidth(const InlineRunProvider::Run& inlineRun, LayoutUnit contentLogicalLeft) const
+bool LineBreaker::isAtBreakingOpportunity(const InlineItem& inlineItem)
 {
-    // FIXME: Find a way to merge this and InlineFormattingContext::Geometry::runWidth.
-    auto& inlineItem = inlineRun.inlineItem();
-    auto textContext = inlineRun.textContext();
-    auto startPosition = textContext->start();
-    auto length = textContext->isCollapsed() ? 1 : textContext->length();
-
-    // FIXME: It does not do proper kerning/ligature handling.
-    LayoutUnit width;
-    auto iterator = m_inlineContent.find(const_cast<InlineItem*>(&inlineItem));
-#if !ASSERT_DISABLED
-    auto inlineItemEnd = m_inlineContent.end();
-#endif
-    while (length) {
-        ASSERT(iterator != inlineItemEnd);
-        auto& currentInlineItem = **iterator;
-        auto inlineItemLength = currentInlineItem.textContent().length();
-        auto endPosition = std::min<ItemPosition>(startPosition + length, inlineItemLength);
-        auto textWidth = TextUtil::width(currentInlineItem, startPosition, endPosition, contentLogicalLeft);
-
-        auto nonBreakableStart = !startPosition ? currentInlineItem.nonBreakableStart() : 0_lu;
-        auto nonBreakableEnd =  endPosition == inlineItemLength ? currentInlineItem.nonBreakableEnd() : 0_lu;
-        auto contentWidth = nonBreakableStart + textWidth + nonBreakableEnd;
-        contentLogicalLeft += contentWidth;
-        width += contentWidth;
-        length -= (endPosition - startPosition);
-
-        startPosition = 0;
-        ++iterator;
-    }
-    return width;
-}
+    if (inlineItem.isHardLineBreak())
+        return true;
 
-InlineLineBreaker::Run InlineLineBreaker::splitRun(const InlineRunProvider::Run& inlineRun, LayoutUnit, LayoutUnit, bool)
-{
-    return { Run::Position::Undetermined, { }, inlineRun };
-}
-
-Optional<ItemPosition> InlineLineBreaker::adjustSplitPositionWithHyphenation(const InlineRunProvider::Run&, ItemPosition, LayoutUnit, LayoutUnit, bool) const
-{
-    return { };
+    if (is<InlineTextItem>(inlineItem))
+        return downcast<InlineTextItem>(inlineItem).isWhitespace();
+    return !inlineItem.isFloat() && !inlineItem.isContainerStart() && !inlineItem.isContainerEnd();
 }
 
 }
 }
 #endif
