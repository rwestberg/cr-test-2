diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeMediaSourceSettings.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeMediaSourceSettings.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeMediaSourceSettings.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeMediaSourceSettings.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013-2015 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -29,11 +29,11 @@
 
 #include "RealtimeMediaSourceSupportedConstraints.h"
 #include <wtf/OptionSet.h>
 #include <wtf/RefCounted.h>
 #include <wtf/Vector.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
 class RealtimeMediaSourceSettings {
 public:
@@ -100,16 +100,16 @@
     bool supportsEchoCancellation() const { return m_supportedConstraints.supportsEchoCancellation(); }
     bool echoCancellation() const { return m_echoCancellation; }
     void setEchoCancellation(bool echoCancellation) { m_echoCancellation = echoCancellation; }
 
     bool supportsDeviceId() const { return m_supportedConstraints.supportsDeviceId(); }
-    const AtomicString& deviceId() const { return m_deviceId; }
-    void setDeviceId(const AtomicString& deviceId) { m_deviceId = deviceId; }
+    const AtomString& deviceId() const { return m_deviceId; }
+    void setDeviceId(const AtomString& deviceId) { m_deviceId = deviceId; }
 
     bool supportsGroupId() const { return m_supportedConstraints.supportsGroupId(); }
-    const AtomicString& groupId() const { return m_groupId; }
-    void setGroupId(const AtomicString& groupId) { m_groupId = groupId; }
+    const AtomString& groupId() const { return m_groupId; }
+    void setGroupId(const AtomString& groupId) { m_groupId = groupId; }
 
     enum class DisplaySurfaceType {
         Monitor,
         Window,
         Application,
@@ -126,16 +126,18 @@
     void setLogicalSurface(bool logicalSurface) { m_logicalSurface = logicalSurface; }
 
     const RealtimeMediaSourceSupportedConstraints& supportedConstraints() const { return m_supportedConstraints; }
     void setSupportedConstraints(const RealtimeMediaSourceSupportedConstraints& supportedConstraints) { m_supportedConstraints = supportedConstraints; }
 
-    const AtomicString& label() const { return m_label; }
-    void setLabel(const AtomicString& label) { m_label = label; }
+    const AtomString& label() const { return m_label; }
+    void setLabel(const AtomString& label) { m_label = label; }
 
     template<class Encoder> void encode(Encoder&) const;
     template<class Decoder> static bool decode(Decoder&, RealtimeMediaSourceSettings&);
 
+    static String convertFlagsToString(const OptionSet<RealtimeMediaSourceSettings::Flag>);
+
 private:
     uint32_t m_width { 0 };
     uint32_t m_height { 0 };
     float m_aspectRatio { 0 };
     float m_frameRate { 0 };
@@ -143,13 +145,13 @@
     double m_volume { 0 };
     uint32_t m_sampleRate { 0 };
     uint32_t m_sampleSize { 0 };
     bool m_echoCancellation { 0 };
 
-    AtomicString m_deviceId;
-    AtomicString m_groupId;
-    AtomicString m_label;
+    AtomString m_deviceId;
+    AtomString m_groupId;
+    AtomString m_label;
 
     DisplaySurfaceType m_displaySurface { DisplaySurfaceType::Invalid };
     bool m_logicalSurface { 0 };
 
     RealtimeMediaSourceSupportedConstraints m_supportedConstraints;
@@ -189,10 +191,12 @@
         && decoder.decode(settings.m_label)
         && decoder.decode(settings.m_supportedConstraints)
         && decoder.decodeEnum(settings.m_facingMode);
 }
 
+String convertEnumerationToString(RealtimeMediaSourceSettings::VideoFacingMode);
+
 } // namespace WebCore
 
 namespace WTF {
 
 template <> struct EnumTraits<WebCore::RealtimeMediaSourceSettings::VideoFacingMode> {
@@ -204,8 +208,27 @@
         WebCore::RealtimeMediaSourceSettings::VideoFacingMode::Left,
         WebCore::RealtimeMediaSourceSettings::VideoFacingMode::Right
     >;
 };
 
-}
+template<typename Type>
+struct LogArgument;
+
+template <>
+struct LogArgument<WebCore::RealtimeMediaSourceSettings::VideoFacingMode> {
+    static String toString(const WebCore::RealtimeMediaSourceSettings::VideoFacingMode mode)
+    {
+        return convertEnumerationToString(mode);
+    }
+};
+
+template <>
+struct LogArgument<OptionSet<WebCore::RealtimeMediaSourceSettings::Flag>> {
+    static String toString(const OptionSet<WebCore::RealtimeMediaSourceSettings::Flag> flags)
+    {
+        return WebCore::RealtimeMediaSourceSettings::convertFlagsToString(flags);
+    }
+};
+
+}; // namespace WTF
 
 #endif
