diff a/modules/javafx.web/src/main/native/Source/WebCore/html/FormAssociatedElement.h b/modules/javafx.web/src/main/native/Source/WebCore/html/FormAssociatedElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/FormAssociatedElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/FormAssociatedElement.h
@@ -23,10 +23,11 @@
 
 #pragma once
 
 #include "FormNamedItem.h"
 #include "Node.h"
+#include <wtf/WeakPtr.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 class ContainerNode;
@@ -45,21 +46,21 @@
 
     void ref() { refFormAssociatedElement(); }
     void deref() { derefFormAssociatedElement(); }
 
     static HTMLFormElement* findAssociatedForm(const HTMLElement*, HTMLFormElement*);
-    HTMLFormElement* form() const { return m_form; }
+    WEBCORE_EXPORT HTMLFormElement* form() const;
     ValidityState* validity();
 
     virtual bool isFormControlElement() const = 0;
     virtual bool isFormControlElementWithState() const;
     virtual bool isEnumeratable() const = 0;
 
     // Returns the 'name' attribute value. If this element has no name
     // attribute, it returns an empty string instead of null string.
     // Note that the 'name' IDL attribute doesn't use this function.
-    virtual const AtomicString& name() const;
+    virtual const AtomString& name() const;
 
     // Override in derived classes to get the encoded name=value pair for submitting.
     // Return true for a successful control (see HTML4-17.13.2).
     virtual bool appendFormData(DOMFormData&, bool) { return false; }
 
@@ -115,11 +116,11 @@
     void resetFormAttributeTargetObserver();
 
     bool isFormAssociatedElement() const final { return true; }
 
     std::unique_ptr<FormAttributeTargetObserver> m_formAttributeTargetObserver;
-    HTMLFormElement* m_form;
-    HTMLFormElement* m_formSetByParser;
+    WeakPtr<HTMLFormElement> m_form;
+    WeakPtr<HTMLFormElement> m_formSetByParser;
     String m_customValidationMessage;
 };
 
 } // namespace
