diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTextContentElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTextContentElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTextContentElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTextContentElement.cpp
@@ -1,9 +1,9 @@
 /*
  * Copyright (C) 2004, 2005, 2007, 2008 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005, 2006, 2007, 2008 Rob Buis <buis@kde.org>
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -28,11 +28,10 @@
 #include "Frame.h"
 #include "FrameSelection.h"
 #include "RenderObject.h"
 #include "RenderSVGResource.h"
 #include "RenderSVGText.h"
-#include "SVGDocumentExtensions.h"
 #include "SVGNames.h"
 #include "SVGPoint.h"
 #include "SVGRect.h"
 #include "SVGTextQuery.h"
 #include "XMLNames.h"
@@ -45,11 +44,15 @@
 
 SVGTextContentElement::SVGTextContentElement(const QualifiedName& tagName, Document& document)
     : SVGGraphicsElement(tagName, document)
     , SVGExternalResourcesRequired(this)
 {
-    registerAttributes();
+    static std::once_flag onceFlag;
+    std::call_once(onceFlag, [] {
+        PropertyRegistry::registerProperty<SVGNames::textLengthAttr, &SVGTextContentElement::m_textLength>();
+        PropertyRegistry::registerProperty<SVGNames::lengthAdjustAttr, SVGLengthAdjustType, &SVGTextContentElement::m_lengthAdjust>();
+    });
 }
 
 unsigned SVGTextContentElement::getNumberOfChars()
 {
     document().updateLayoutIgnorePendingStylesheets();
@@ -143,11 +146,11 @@
     if (name.matches(XMLNames::spaceAttr))
         return true;
     return SVGGraphicsElement::isPresentationAttribute(name);
 }
 
-void SVGTextContentElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomicString& value, MutableStyleProperties& style)
+void SVGTextContentElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomString& value, MutableStyleProperties& style)
 {
     if (name.matches(XMLNames::spaceAttr)) {
         if (value == "preserve")
             addPropertyToPresentationAttributeStyle(style, CSSPropertyWhiteSpace, CSSValuePre);
         else
@@ -156,41 +159,32 @@
     }
 
     SVGGraphicsElement::collectStyleForPresentationAttribute(name, value, style);
 }
 
-void SVGTextContentElement::registerAttributes()
-{
-    auto& registry = attributeRegistry();
-    if (!registry.isEmpty())
-        return;
-    registry.registerAttribute(SVGAnimatedCustomLengthAttributeAccessor::singleton<SVGNames::textLengthAttr, &SVGTextContentElement::m_textLength>());
-    registry.registerAttribute<SVGNames::lengthAdjustAttr, SVGLengthAdjustType, &SVGTextContentElement::m_lengthAdjust>();
-}
-
-void SVGTextContentElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void SVGTextContentElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     SVGParsingError parseError = NoError;
 
     if (name == SVGNames::lengthAdjustAttr) {
         auto propertyValue = SVGPropertyTraits<SVGLengthAdjustType>::fromString(value);
         if (propertyValue > 0)
-            m_lengthAdjust.setValue(propertyValue);
+            m_lengthAdjust->setBaseValInternal<SVGLengthAdjustType>(propertyValue);
     } else if (name == SVGNames::textLengthAttr)
-        m_textLength.setValue(SVGLengthValue::construct(LengthModeOther, value, parseError, ForbidNegativeLengths));
+        m_textLength->setBaseValInternal(SVGLengthValue::construct(LengthModeOther, value, parseError, ForbidNegativeLengths));
 
     reportAttributeParsingError(parseError, name, value);
 
     SVGGraphicsElement::parseAttribute(name, value);
     SVGExternalResourcesRequired::parseAttribute(name, value);
 }
 
 void SVGTextContentElement::svgAttributeChanged(const QualifiedName& attrName)
 {
-    if (isKnownAttribute(attrName)) {
+    if (PropertyRegistry::isKnownAttribute(attrName)) {
         if (attrName == SVGNames::textLengthAttr)
-            m_specifiedTextLength = m_textLength.value();
+            m_specifiedTextLength = m_textLength->baseVal()->value();
 
         if (auto renderer = this->renderer()) {
             InstanceInvalidationGuard guard(*this);
             RenderSVGResource::markForLayoutAndParentResourceInvalidation(*renderer);
         }
@@ -199,10 +193,18 @@
 
     SVGGraphicsElement::svgAttributeChanged(attrName);
     SVGExternalResourcesRequired::svgAttributeChanged(attrName);
 }
 
+SVGAnimatedLength& SVGTextContentElement::textLengthAnimated()
+{
+    static NeverDestroyed<SVGLengthValue> defaultTextLength(LengthModeOther);
+    if (m_textLength->baseVal()->value() == defaultTextLength)
+        m_textLength->baseVal()->value().newValueSpecifiedUnits(LengthTypeNumber, getComputedTextLength());
+    return m_textLength;
+}
+
 bool SVGTextContentElement::selfHasRelativeLengths() const
 {
     // Any element of the <text> subtree is advertized as using relative lengths.
     // On any window size change, we have to relayout the text subtree, as the
     // effective 'on-screen' font size may change.
