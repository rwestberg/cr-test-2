diff a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/DOM/JavaDocument.cpp b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/DOM/JavaDocument.cpp
--- a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/DOM/JavaDocument.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/DOM/JavaDocument.cpp
@@ -37,10 +37,11 @@
 #include <WebCore/DocumentFragment.h>
 #include <WebCore/DocumentType.h>
 #include <WebCore/Element.h>
 #include <WebCore/Event.h>
 #include <WebCore/EventListener.h>
+#include <WebCore/FullscreenManager.h>
 #include <WebCore/HTMLCollection.h>
 #include <WebCore/HTMLElement.h>
 #include <WebCore/HTMLHeadElement.h>
 #include <WebCore/HTMLScriptElement.h>
 #include <WebCore/Node.h>
@@ -325,35 +326,35 @@
 }
 
 JNIEXPORT jboolean JNICALL Java_com_sun_webkit_dom_DocumentImpl_getWebkitIsFullScreenImpl(JNIEnv*, jclass, jlong peer)
 {
     WebCore::JSMainThreadNullState state;
-    return IMPL->webkitIsFullScreen();
+    return IMPL->fullscreenManager().isFullscreen();
 }
 
 JNIEXPORT jboolean JNICALL Java_com_sun_webkit_dom_DocumentImpl_getWebkitFullScreenKeyboardInputAllowedImpl(JNIEnv*, jclass, jlong peer)
 {
     WebCore::JSMainThreadNullState state;
-    return IMPL->webkitFullScreenKeyboardInputAllowed();
+    return IMPL->fullscreenManager().isFullscreenKeyboardInputAllowed();
 }
 
 JNIEXPORT jlong JNICALL Java_com_sun_webkit_dom_DocumentImpl_getWebkitCurrentFullScreenElementImpl(JNIEnv* env, jclass, jlong peer)
 {
     WebCore::JSMainThreadNullState state;
-    return JavaReturn<Element>(env, WTF::getPtr(IMPL->webkitCurrentFullScreenElement()));
+    return JavaReturn<Element>(env, WTF::getPtr(IMPL->fullscreenManager().currentFullscreenElement()));
 }
 
 JNIEXPORT jboolean JNICALL Java_com_sun_webkit_dom_DocumentImpl_getWebkitFullscreenEnabledImpl(JNIEnv*, jclass, jlong peer)
 {
     WebCore::JSMainThreadNullState state;
-    return IMPL->webkitFullscreenEnabled();
+    return IMPL->fullscreenManager().isFullscreenEnabled();
 }
 
 JNIEXPORT jlong JNICALL Java_com_sun_webkit_dom_DocumentImpl_getWebkitFullscreenElementImpl(JNIEnv* env, jclass, jlong peer)
 {
     WebCore::JSMainThreadNullState state;
-    return JavaReturn<Element>(env, WTF::getPtr(IMPL->webkitFullscreenElement()));
+    return JavaReturn<Element>(env, WTF::getPtr(IMPL->fullscreenManager().fullscreenElement()));
 }
 
 JNIEXPORT jstring JNICALL Java_com_sun_webkit_dom_DocumentImpl_getVisibilityStateImpl(JNIEnv* env, jclass, jlong peer)
 {
     const char* visibility {};
@@ -1416,10 +1417,15 @@
 {
     WebCore::JSMainThreadNullState state;
     return JavaReturn<XPathNSResolver>(env, WTF::getPtr(IMPL->createNSResolver(static_cast<Node*>(jlong_to_ptr(nodeResolver)))));
 }
 
+// - (DOMXPathResult *)evaluate:(NSString *)expression
+// contextNode:(DOMNode *)contextNode
+// resolver:(id <DOMXPathNSResolver>)resolver
+// type:(unsigned short)type
+// inResult:(DOMXPathResult *)inResult WEBKIT_AVAILABLE_MAC(10_5);
 
 JNIEXPORT jlong JNICALL Java_com_sun_webkit_dom_DocumentImpl_evaluateImpl(JNIEnv* env, jclass, jlong peer
     , jstring expression
     , jlong contextNode
     , jlong resolver
@@ -1538,18 +1544,18 @@
 
 
 JNIEXPORT void JNICALL Java_com_sun_webkit_dom_DocumentImpl_webkitCancelFullScreenImpl(JNIEnv*, jclass, jlong peer)
 {
     WebCore::JSMainThreadNullState state;
-    IMPL->webkitCancelFullScreen();
+    IMPL->fullscreenManager().cancelFullscreen();
 }
 
 
 JNIEXPORT void JNICALL Java_com_sun_webkit_dom_DocumentImpl_webkitExitFullscreenImpl(JNIEnv*, jclass, jlong peer)
 {
     WebCore::JSMainThreadNullState state;
-    IMPL->webkitExitFullscreen();
+    IMPL->fullscreenManager().exitFullscreen();
 }
 
 
 JNIEXPORT jlong JNICALL Java_com_sun_webkit_dom_DocumentImpl_getElementByIdImpl(JNIEnv* env, jclass, jlong peer
     , jstring elementId)
