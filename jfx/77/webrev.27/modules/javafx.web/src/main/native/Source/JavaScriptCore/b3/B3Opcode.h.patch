diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Opcode.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Opcode.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Opcode.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Opcode.h
@@ -35,11 +35,11 @@
 namespace JSC { namespace B3 {
 
 // Warning: In B3, an Opcode is just one part of a Kind. Kind is used the way that an opcode
 // would be used in simple IRs. See B3Kind.h.
 
-enum Opcode : int16_t {
+enum Opcode : uint8_t {
     // A no-op that returns Void, useful for when you want to remove a value.
     Nop,
 
     // Polymorphic identity, usable with any value type.
     Identity,
@@ -294,10 +294,14 @@
     // It's legal to request that a stackmap argument is in some register and it's legal to request
     // that a stackmap argument is at some offset from the top of the argument passing area on the
     // stack.
     Patchpoint,
 
+    // This is a projection out of a tuple. Currently only Patchpoints, Get, and Phi can produce tuples.
+    // It's assumumed that each entry in a tuple has a fixed Numeric B3 Type (i.e. not Void or Tuple).
+    Extract,
+
     // Checked math. Use the CheckValue class. Like a Patchpoint, this takes a code generation
     // callback. That callback gets to emit some code after the epilogue, and gets to link the jump
     // from the check, and the choice of registers. You also get to supply a stackmap. Note that you
     // are not allowed to jump back into the mainline code from your slow path, since the compiler
     // will assume that the execution of these instructions proves that overflow didn't happen. For
@@ -396,11 +400,11 @@
     }
 }
 
 inline Opcode opcodeForConstant(Type type)
 {
-    switch (type) {
+    switch (type.kind()) {
     case Int32: return Const32;
     case Int64: return Const64;
     case Float: return ConstFloat;
     case Double: return ConstDouble;
     default:
@@ -463,11 +467,11 @@
     default:
         return false;
     }
 }
 
-inline bool isAtomic(Opcode opcode)
+inline bool isAtom(Opcode opcode)
 {
     switch (opcode) {
     case AtomicWeakCAS:
     case AtomicStrongCAS:
     case AtomicXchgAdd:
@@ -508,11 +512,11 @@
     }
 }
 
 inline bool isMemoryAccess(Opcode opcode)
 {
-    return isAtomic(opcode) || isLoadStore(opcode);
+    return isAtom(opcode) || isLoadStore(opcode);
 }
 
 inline Opcode signExtendOpcode(Width width)
 {
     switch (width) {
