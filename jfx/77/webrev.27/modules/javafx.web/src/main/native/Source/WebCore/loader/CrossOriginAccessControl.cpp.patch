diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/CrossOriginAccessControl.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/CrossOriginAccessControl.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/CrossOriginAccessControl.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/CrossOriginAccessControl.cpp
@@ -36,11 +36,11 @@
 #include "SchemeRegistry.h"
 #include "SecurityOrigin.h"
 #include "SecurityPolicy.h"
 #include <mutex>
 #include <wtf/NeverDestroyed.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 #include <wtf/text/StringBuilder.h>
 
 namespace WebCore {
 
 bool isOnAccessControlSimpleRequestMethodWhitelist(const String& method)
@@ -203,14 +203,14 @@
     }
 
     if (!passesAccessControlCheck(response, storedCredentialsPolicy, securityOrigin, errorDescription))
         return false;
 
-    auto result = std::make_unique<CrossOriginPreflightResultCacheItem>(storedCredentialsPolicy);
+    auto result = makeUnique<CrossOriginPreflightResultCacheItem>(storedCredentialsPolicy);
     if (!result->parse(response)
-        || !result->allowsCrossOriginMethod(request.httpMethod(), errorDescription)
-        || !result->allowsCrossOriginHeaders(request.httpHeaderFields(), errorDescription)) {
+        || !result->allowsCrossOriginMethod(request.httpMethod(), storedCredentialsPolicy, errorDescription)
+        || !result->allowsCrossOriginHeaders(request.httpHeaderFields(), storedCredentialsPolicy, errorDescription)) {
         return false;
     }
 
     CrossOriginPreflightResultCache::singleton().appendEntry(securityOrigin.toString(), request.url(), WTFMove(result));
     return true;
@@ -228,11 +228,11 @@
 
     if (policy == CrossOriginResourcePolicy::SameSite) {
         if (origin.isUnique())
             return true;
 #if ENABLE(PUBLIC_SUFFIX_LIST)
-        if (!registrableDomainsAreEqual(response.url(), ResourceRequest::partitionName(origin.host())))
+        if (!RegistrableDomain::uncheckedCreateFromHost(origin.host()).matches(response.url()))
             return true;
 #endif
         if (origin.protocol() == "http" && response.url().protocol() == "https")
             return true;
     }
