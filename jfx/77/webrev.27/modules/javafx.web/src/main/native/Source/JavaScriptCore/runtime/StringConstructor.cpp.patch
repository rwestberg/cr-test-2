diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StringConstructor.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StringConstructor.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StringConstructor.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StringConstructor.cpp
@@ -1,8 +1,8 @@
 /*
  *  Copyright (C) 1999-2001 Harri Porten (porten@kde.org)
- *  Copyright (C) 2004-2008, 2016 Apple Inc. All rights reserved.
+ *  Copyright (C) 2004-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Lesser General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -61,11 +61,11 @@
 {
 }
 
 void StringConstructor::finishCreation(VM& vm, StringPrototype* stringPrototype)
 {
-    Base::finishCreation(vm, stringPrototype->classInfo(vm)->className);
+    Base::finishCreation(vm, vm.propertyNames->String.string(), NameVisibility::Visible, NameAdditionMode::WithoutStructureTransition);
     putDirectWithoutTransition(vm, vm.propertyNames->prototype, stringPrototype, PropertyAttribute::ReadOnly | PropertyAttribute::DontEnum | PropertyAttribute::DontDelete);
     putDirectWithoutTransition(vm, vm.propertyNames->length, jsNumber(1), PropertyAttribute::ReadOnly | PropertyAttribute::DontEnum);
 }
 
 // ------------------------------ Functions --------------------------------
@@ -78,11 +78,11 @@
     unsigned length = exec->argumentCount();
     if (LIKELY(length == 1)) {
         scope.release();
         unsigned code = exec->uncheckedArgument(0).toUInt32(exec);
         // Not checking for an exception here is ok because jsSingleCharacterString will just fetch an unused string if there's an exception.
-        return JSValue::encode(jsSingleCharacterString(exec, code));
+        return JSValue::encode(jsSingleCharacterString(vm, code));
     }
 
     LChar* buf8Bit;
     auto impl8Bit = StringImpl::createUninitialized(length, buf8Bit);
     for (unsigned i = 0; i < length; ++i) {
@@ -96,20 +96,20 @@
             ++i;
             for (; i < length; ++i) {
                 buf16Bit[i] = static_cast<UChar>(exec->uncheckedArgument(i).toUInt32(exec));
                 RETURN_IF_EXCEPTION(scope, encodedJSValue());
             }
-            RELEASE_AND_RETURN(scope, JSValue::encode(jsString(exec, WTFMove(impl16Bit))));
+            RELEASE_AND_RETURN(scope, JSValue::encode(jsString(vm, WTFMove(impl16Bit))));
         }
         buf8Bit[i] = static_cast<LChar>(character);
     }
-    RELEASE_AND_RETURN(scope, JSValue::encode(jsString(exec, WTFMove(impl8Bit))));
+    RELEASE_AND_RETURN(scope, JSValue::encode(jsString(vm, WTFMove(impl8Bit))));
 }
 
 JSString* JSC_HOST_CALL stringFromCharCode(ExecState* exec, int32_t arg)
 {
-    return jsSingleCharacterString(exec, arg);
+    return jsSingleCharacterString(exec->vm(), arg);
 }
 
 static EncodedJSValue JSC_HOST_CALL stringFromCodePoint(ExecState* exec)
 {
     VM& vm = exec->vm();
@@ -134,11 +134,11 @@
             builder.append(U16_LEAD(codePoint));
             builder.append(U16_TRAIL(codePoint));
         }
     }
 
-    RELEASE_AND_RETURN(scope, JSValue::encode(jsString(exec, builder.toString())));
+    RELEASE_AND_RETURN(scope, JSValue::encode(jsString(vm, builder.toString())));
 }
 
 static EncodedJSValue JSC_HOST_CALL constructWithStringConstructor(ExecState* exec)
 {
     VM& vm = exec->vm();
@@ -155,18 +155,20 @@
     return JSValue::encode(StringObject::create(vm, structure, str));
 }
 
 JSString* stringConstructor(ExecState* exec, JSValue argument)
 {
+    VM& vm = exec->vm();
     if (argument.isSymbol())
-        return jsNontrivialString(exec, asSymbol(argument)->descriptiveString());
+        return jsNontrivialString(vm, asSymbol(argument)->descriptiveString());
     return argument.toString(exec);
 }
 
 static EncodedJSValue JSC_HOST_CALL callStringConstructor(ExecState* exec)
 {
+    VM& vm = exec->vm();
     if (!exec->argumentCount())
-        return JSValue::encode(jsEmptyString(exec));
+        return JSValue::encode(jsEmptyString(vm));
     return JSValue::encode(stringConstructor(exec, exec->uncheckedArgument(0)));
 }
 
 } // namespace JSC
