diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLInferTypes.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLInferTypes.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLInferTypes.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLInferTypes.h
@@ -45,17 +45,17 @@
 }
 
 bool matches(const AST::UnnamedType&, const AST::UnnamedType&);
 bool matches(const AST::NamedType&, const AST::NamedType&);
 bool matches(const AST::UnnamedType&, const AST::NamedType&);
-// FIXME: Is anyone actually using the return type here?
-Optional<UniqueRef<AST::UnnamedType>> matchAndCommit(AST::UnnamedType&, AST::ResolvableType&);
-Optional<UniqueRef<AST::UnnamedType>> matchAndCommit(AST::NamedType&, AST::ResolvableType&);
-Optional<UniqueRef<AST::UnnamedType>> matchAndCommit(AST::ResolvableType&, AST::ResolvableType&);
-Optional<UniqueRef<AST::UnnamedType>> commit(AST::ResolvableType&);
+RefPtr<AST::UnnamedType> matchAndCommit(AST::UnnamedType&, AST::ResolvableType&);
+RefPtr<AST::UnnamedType> matchAndCommit(AST::NamedType&, AST::ResolvableType&);
+RefPtr<AST::UnnamedType> matchAndCommit(AST::ResolvableType&, AST::ResolvableType&);
+RefPtr<AST::UnnamedType> commit(AST::ResolvableType&);
 bool inferTypesForTypeArguments(AST::NamedType& possibleType, AST::TypeArguments&);
-bool inferTypesForCall(AST::FunctionDeclaration& possibleFunction, Vector<std::reference_wrapper<ResolvingType>>& argumentTypes, Optional<std::reference_wrapper<AST::NamedType>>& castReturnType);
+bool inferTypesForCall(AST::FunctionDeclaration& possibleFunction, Vector<std::reference_wrapper<ResolvingType>>& argumentTypes, const AST::NamedType* castReturnType);
+bool inferTypesForCall(AST::FunctionDeclaration& possibleFunction, Vector<std::reference_wrapper<ResolvingType>>& argumentTypes, const AST::UnnamedType* castReturnType);
 
 }
 
 }
 
