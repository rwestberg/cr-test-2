diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSDateMath.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSDateMath.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSDateMath.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSDateMath.cpp
@@ -129,18 +129,20 @@
 // NOTE: The implementation relies on the fact that no time zones have
 // more than one daylight savings offset change per month.
 // If this function is called with NaN it returns NaN.
 static LocalTimeOffset localTimeOffset(VM& vm, double ms, WTF::TimeType inputTimeType = WTF::UTCTime)
 {
-    LocalTimeOffsetCache& cache = vm.localTimeOffsetCache;
+    LocalTimeOffsetCache& cache = inputTimeType == WTF::LocalTime
+        ? vm.localTimeOffsetCache : vm.utcTimeOffsetCache;
+
     double start = cache.start;
     double end = cache.end;
-    WTF::TimeType cachedTimeType = cache.timeType;
 
-    if (cachedTimeType == inputTimeType && start <= ms) {
+    if (start <= ms) {
         // If the time fits in the cached interval, return the cached offset.
-        if (ms <= end) return cache.offset;
+        if (ms <= end)
+            return cache.offset;
 
         // Compute a possible new interval end.
         double newEnd = end + cache.increment;
 
         if (ms <= newEnd) {
@@ -181,19 +183,19 @@
     LocalTimeOffset offset = calculateLocalTimeOffset(ms, inputTimeType);
     cache.offset = offset;
     cache.start = ms;
     cache.end = ms;
     cache.increment = msPerMonth;
-    cache.timeType = inputTimeType;
     return offset;
 }
 
 double gregorianDateTimeToMS(VM& vm, const GregorianDateTime& t, double milliSeconds, WTF::TimeType inputTimeType)
 {
     double day = dateToDaysFrom1970(t.year(), t.month(), t.monthDay());
     double ms = timeToMS(t.hour(), t.minute(), t.second(), milliSeconds);
     double localTimeResult = (day * WTF::msPerDay) + ms;
+
     double localToUTCTimeOffset = inputTimeType == LocalTime
         ? localTimeOffset(vm, localTimeResult, inputTimeType).offset : 0;
 
     return localTimeResult - localToUTCTimeOffset;
 }
