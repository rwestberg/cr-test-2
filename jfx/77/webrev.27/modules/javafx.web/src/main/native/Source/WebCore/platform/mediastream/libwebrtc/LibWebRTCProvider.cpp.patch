diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/libwebrtc/LibWebRTCProvider.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/libwebrtc/LibWebRTCProvider.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/libwebrtc/LibWebRTCProvider.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/libwebrtc/LibWebRTCProvider.cpp
@@ -77,13 +77,14 @@
         result.SetIP("127.0.0.1");
     return result;
 }
 
 class BasicPacketSocketFactory : public rtc::BasicPacketSocketFactory {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     explicit BasicPacketSocketFactory(rtc::Thread& networkThread)
-        : m_socketFactory(makeUniqueRef<rtc::BasicPacketSocketFactory>(&networkThread))
+        : m_socketFactory(makeUniqueRefWithoutFastMallocCheck<rtc::BasicPacketSocketFactory>(&networkThread))
     {
     }
 
     void setDisableNonLocalhostConnections(bool disableNonLocalhostConnections) { m_disableNonLocalhostConnections = disableNonLocalhostConnections; }
 
@@ -118,23 +119,57 @@
 
 private:
     void OnMessage(rtc::Message*);
 };
 
-static void initializePeerConnectionFactoryAndThreads(PeerConnectionFactoryAndThreads& factoryAndThreads)
+static void doReleaseLogging(rtc::LoggingSeverity severity, const char* message)
 {
-    ASSERT(!factoryAndThreads.networkThread);
+#if RELEASE_LOG_DISABLED
+    UNUSED_PARAM(severity);
+    UNUSED_PARAM(message);
+#else
+    if (severity == rtc::LS_ERROR)
+        RELEASE_LOG_ERROR(WebRTC, "LibWebRTC error: %{public}s", message);
+    else
+        RELEASE_LOG(WebRTC, "LibWebRTC message: %{public}s", message);
+#endif
+}
+
+static void setLogging(rtc::LoggingSeverity level)
+{
+    rtc::LogMessage::SetLogOutput(level, (level == rtc::LS_NONE) ? nullptr : doReleaseLogging);
+}
 
+static rtc::LoggingSeverity computeLogLevel()
+{
 #if defined(NDEBUG)
 #if !LOG_DISABLED || !RELEASE_LOG_DISABLED
-    rtc::LogMessage::LogToDebug(LogWebRTC.state != WTFLogChannelOn ? rtc::LS_NONE : rtc::LS_INFO);
+    if (LogWebRTC.state != WTFLogChannelState::On)
+        return rtc::LS_ERROR;
+
+    switch (LogWebRTC.level) {
+    case WTFLogLevel::Always:
+    case WTFLogLevel::Error:
+        return rtc::LS_ERROR;
+    case WTFLogLevel::Warning:
+        return rtc::LS_WARNING;
+    case WTFLogLevel::Info:
+        return rtc::LS_INFO;
+    case WTFLogLevel::Debug:
+        return rtc::LS_VERBOSE;
+    }
 #else
-    rtc::LogMessage::LogToDebug(rtc::LS_NONE);
+    return rtc::LS_NONE;
 #endif
 #else
-    rtc::LogMessage::LogToDebug(LogWebRTC.state != WTFLogChannelOn ? rtc::LS_WARNING : rtc::LS_INFO);
+    return (LogWebRTC.state != WTFLogChannelState::On) ? rtc::LS_WARNING : rtc::LS_INFO;
 #endif
+}
+
+static void initializePeerConnectionFactoryAndThreads(PeerConnectionFactoryAndThreads& factoryAndThreads)
+{
+    ASSERT(!factoryAndThreads.networkThread);
 
     factoryAndThreads.networkThread = factoryAndThreads.networkThreadWithSocketServer ? rtc::Thread::CreateWithSocketServer() : rtc::Thread::Create();
     factoryAndThreads.networkThread->SetName("WebKitWebRTCNetwork", nullptr);
     bool result = factoryAndThreads.networkThread->Start();
     ASSERT_UNUSED(result, result);
@@ -143,11 +178,11 @@
     factoryAndThreads.signalingThread->SetName("WebKitWebRTCSignaling", nullptr);
 
     result = factoryAndThreads.signalingThread->Start();
     ASSERT(result);
 
-    factoryAndThreads.audioDeviceModule = std::make_unique<LibWebRTCAudioModule>();
+    factoryAndThreads.audioDeviceModule = makeUnique<LibWebRTCAudioModule>();
 }
 
 static inline PeerConnectionFactoryAndThreads& staticFactoryAndThreads()
 {
     static NeverDestroyed<PeerConnectionFactoryAndThreads> factoryAndThreads;
@@ -192,10 +227,18 @@
 {
     PeerConnectionFactoryAndThreads& threads = staticFactoryAndThreads();
     threads.signalingThread->Post(RTC_FROM_HERE, &threads, 1, new ThreadMessageData(WTFMove(callback)));
 }
 
+void LibWebRTCProvider::setEnableLogging(bool enableLogging)
+{
+    if (!m_enableLogging)
+        return;
+    m_enableLogging = enableLogging;
+    setLogging(enableLogging ? computeLogLevel() : rtc::LS_NONE);
+}
+
 webrtc::PeerConnectionFactoryInterface* LibWebRTCProvider::factory()
 {
     if (m_factory)
         return m_factory.get();
 
@@ -237,33 +280,44 @@
 void LibWebRTCProvider::enableEnumeratingAllNetworkInterfaces()
 {
     m_enableEnumeratingAllNetworkInterfaces = true;
 }
 
-rtc::scoped_refptr<webrtc::PeerConnectionInterface> LibWebRTCProvider::createPeerConnection(webrtc::PeerConnectionObserver& observer, webrtc::PeerConnectionInterface::RTCConfiguration&& configuration)
+rtc::scoped_refptr<webrtc::PeerConnectionInterface> LibWebRTCProvider::createPeerConnection(webrtc::PeerConnectionObserver& observer, rtc::PacketSocketFactory*, webrtc::PeerConnectionInterface::RTCConfiguration&& configuration)
 {
     // Default WK1 implementation.
     ASSERT(m_useNetworkThreadWithSocketServer);
     auto& factoryAndThreads = getStaticFactoryAndThreads(m_useNetworkThreadWithSocketServer);
 
     if (!factoryAndThreads.networkManager)
-        factoryAndThreads.networkManager = std::make_unique<rtc::BasicNetworkManager>();
+        factoryAndThreads.networkManager = makeUniqueWithoutFastMallocCheck<rtc::BasicNetworkManager>();
 
     if (!factoryAndThreads.packetSocketFactory)
-        factoryAndThreads.packetSocketFactory = std::make_unique<BasicPacketSocketFactory>(*factoryAndThreads.networkThread);
+        factoryAndThreads.packetSocketFactory = makeUnique<BasicPacketSocketFactory>(*factoryAndThreads.networkThread);
     factoryAndThreads.packetSocketFactory->setDisableNonLocalhostConnections(m_disableNonLocalhostConnections);
 
     return createPeerConnection(observer, *factoryAndThreads.networkManager, *factoryAndThreads.packetSocketFactory, WTFMove(configuration), nullptr);
 }
 
+void LibWebRTCProvider::setEnableWebRTCEncryption(bool enableWebRTCEncryption)
+{
+    auto* factory = this->factory();
+    if (!factory)
+        return;
+
+    webrtc::PeerConnectionFactoryInterface::Options options;
+    options.disable_encryption = !enableWebRTCEncryption;
+    m_factory->SetOptions(options);
+}
+
 rtc::scoped_refptr<webrtc::PeerConnectionInterface> LibWebRTCProvider::createPeerConnection(webrtc::PeerConnectionObserver& observer, rtc::NetworkManager& networkManager, rtc::PacketSocketFactory& packetSocketFactory, webrtc::PeerConnectionInterface::RTCConfiguration&& configuration, std::unique_ptr<webrtc::AsyncResolverFactory>&& asyncResolveFactory)
 {
     auto& factoryAndThreads = getStaticFactoryAndThreads(m_useNetworkThreadWithSocketServer);
 
     std::unique_ptr<cricket::BasicPortAllocator> portAllocator;
     factoryAndThreads.signalingThread->Invoke<void>(RTC_FROM_HERE, [&]() {
-        auto basicPortAllocator = std::make_unique<cricket::BasicPortAllocator>(&networkManager, &packetSocketFactory);
+        auto basicPortAllocator = makeUniqueWithoutFastMallocCheck<cricket::BasicPortAllocator>(&networkManager, &packetSocketFactory);
         if (!m_enableEnumeratingAllNetworkInterfaces)
             basicPortAllocator->set_flags(basicPortAllocator->flags() | cricket::PORTALLOCATOR_DISABLE_ADAPTER_ENUMERATION);
         portAllocator = WTFMove(basicPortAllocator);
     });
 
@@ -280,11 +334,11 @@
 
 rtc::RTCCertificateGenerator& LibWebRTCProvider::certificateGenerator()
 {
     auto& factoryAndThreads = getStaticFactoryAndThreads(m_useNetworkThreadWithSocketServer);
     if (!factoryAndThreads.certificateGenerator)
-        factoryAndThreads.certificateGenerator = std::make_unique<rtc::RTCCertificateGenerator>(factoryAndThreads.signalingThread.get(), factoryAndThreads.networkThread.get());
+        factoryAndThreads.certificateGenerator = makeUniqueWithoutFastMallocCheck<rtc::RTCCertificateGenerator>(factoryAndThreads.signalingThread.get(), factoryAndThreads.networkThread.get());
 
     return *factoryAndThreads.certificateGenerator;
 }
 
 static inline Optional<cricket::MediaType> typeFromKind(const String& kind)
