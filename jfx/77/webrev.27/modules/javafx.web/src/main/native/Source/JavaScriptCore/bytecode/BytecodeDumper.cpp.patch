diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/BytecodeDumper.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/BytecodeDumper.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/BytecodeDumper.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/BytecodeDumper.cpp
@@ -1,8 +1,8 @@
 /*
  * Copyright (C) 2017 Yusuke Suzuki <utatane.tea@gmail.com>
- * Copyright (C) 2017-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -42,11 +42,11 @@
 #include "UnlinkedMetadataTableInlines.h"
 
 namespace JSC {
 
 template<class Block>
-VM* BytecodeDumper<Block>::vm() const
+VM& BytecodeDumper<Block>::vm() const
 {
     return block()->vm();
 }
 
 template<class Block>
@@ -191,26 +191,30 @@
 
 template<class Block>
 void BytecodeDumper<Block>::dumpBlock(Block* block, const InstructionStream& instructions, PrintStream& out, const ICStatusMap& statusMap)
 {
     size_t instructionCount = 0;
-    size_t wideInstructionCount = 0;
+    size_t wide16InstructionCount = 0;
+    size_t wide32InstructionCount = 0;
     size_t instructionWithMetadataCount = 0;
 
     for (const auto& instruction : instructions) {
-        if (instruction->isWide())
-            ++wideInstructionCount;
-        if (instruction->opcodeID() < NUMBER_OF_BYTECODE_WITH_METADATA)
+        if (instruction->isWide16())
+            ++wide16InstructionCount;
+        else if (instruction->isWide32())
+            ++wide32InstructionCount;
+        if (instruction->hasMetadata())
             ++instructionWithMetadataCount;
         ++instructionCount;
     }
 
     out.print(*block);
     out.printf(
-        ": %lu instructions (%lu wide instructions, %lu instructions with metadata); %lu bytes (%lu metadata bytes); %d parameter(s); %d callee register(s); %d variable(s)",
+        ": %lu instructions (%lu 16-bit instructions, %lu 32-bit instructions, %lu instructions with metadata); %lu bytes (%lu metadata bytes); %d parameter(s); %d callee register(s); %d variable(s)",
         static_cast<unsigned long>(instructionCount),
-        static_cast<unsigned long>(wideInstructionCount),
+        static_cast<unsigned long>(wide16InstructionCount),
+        static_cast<unsigned long>(wide32InstructionCount),
         static_cast<unsigned long>(instructionWithMetadataCount),
         static_cast<unsigned long>(instructions.sizeInBytes() + block->metadataSizeInBytes()),
         static_cast<unsigned long>(block->metadataSizeInBytes()),
         block->numParameters(), block->numCalleeLocals(), block->numVars());
     out.print("; scope at ", block->scopeRegister());
