diff a/modules/javafx.web/src/main/native/Source/WebCore/html/track/TrackEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/html/track/TrackEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/track/TrackEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/track/TrackEvent.h
@@ -36,31 +36,31 @@
 
 class TrackEvent final : public Event {
 public:
     virtual ~TrackEvent();
 
-    static Ref<TrackEvent> create(const AtomicString& type, CanBubble canBubble, IsCancelable cancelable, Ref<TrackBase>&& track)
+    static Ref<TrackEvent> create(const AtomString& type, CanBubble canBubble, IsCancelable cancelable, Ref<TrackBase>&& track)
     {
         return adoptRef(*new TrackEvent(type, canBubble, cancelable, WTFMove(track)));
     }
 
     using TrackEventTrack = Variant<RefPtr<VideoTrack>, RefPtr<AudioTrack>, RefPtr<TextTrack>>;
 
     struct Init : public EventInit {
         Optional<TrackEventTrack> track;
     };
 
-    static Ref<TrackEvent> create(const AtomicString& type, Init&& initializer, IsTrusted isTrusted = IsTrusted::No)
+    static Ref<TrackEvent> create(const AtomString& type, Init&& initializer, IsTrusted isTrusted = IsTrusted::No)
     {
         return adoptRef(*new TrackEvent(type, WTFMove(initializer), isTrusted));
     }
 
     Optional<TrackEventTrack> track() const { return m_track; }
 
 private:
-    TrackEvent(const AtomicString& type, CanBubble, IsCancelable, Ref<TrackBase>&&);
-    TrackEvent(const AtomicString& type, Init&& initializer, IsTrusted);
+    TrackEvent(const AtomString& type, CanBubble, IsCancelable, Ref<TrackBase>&&);
+    TrackEvent(const AtomString& type, Init&& initializer, IsTrusted);
 
     EventInterface eventInterface() const override;
 
     Optional<TrackEventTrack> m_track;
 };
