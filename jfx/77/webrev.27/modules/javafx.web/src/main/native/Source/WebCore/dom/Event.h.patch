diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/Event.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/Event.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/Event.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/Event.h
@@ -28,11 +28,11 @@
 #include "EventInterfaces.h"
 #include "ExceptionOr.h"
 #include "ScriptWrappable.h"
 #include <wtf/MonotonicTime.h>
 #include <wtf/TypeCasts.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
 class EventPath;
 class EventTarget;
@@ -50,22 +50,22 @@
         CAPTURING_PHASE = 1,
         AT_TARGET = 2,
         BUBBLING_PHASE = 3
     };
 
-    WEBCORE_EXPORT static Ref<Event> create(const AtomicString& type, CanBubble, IsCancelable, IsComposed = IsComposed::No);
+    WEBCORE_EXPORT static Ref<Event> create(const AtomString& type, CanBubble, IsCancelable, IsComposed = IsComposed::No);
     static Ref<Event> createForBindings();
-    static Ref<Event> create(const AtomicString& type, const EventInit&, IsTrusted = IsTrusted::No);
+    static Ref<Event> create(const AtomString& type, const EventInit&, IsTrusted = IsTrusted::No);
 
     virtual ~Event();
 
-    WEBCORE_EXPORT void initEvent(const AtomicString& type, bool canBubble, bool cancelable);
+    WEBCORE_EXPORT void initEvent(const AtomString& type, bool canBubble, bool cancelable);
 
     bool isInitialized() const { return m_isInitialized; }
 
-    const AtomicString& type() const { return m_type; }
-    void setType(const AtomicString& type) { m_type = type; }
+    const AtomString& type() const { return m_type; }
+    void setType(const AtomString& type) { m_type = type; }
 
     EventTarget* target() const { return m_target.get(); }
     void setTarget(RefPtr<EventTarget>&&);
 
     EventTarget* currentTarget() const { return m_currentTarget.get(); }
@@ -145,18 +145,18 @@
     virtual EventTarget* relatedTarget() const { return nullptr; }
     virtual void setRelatedTarget(EventTarget&) { }
 
 protected:
     explicit Event(IsTrusted = IsTrusted::No);
-    Event(const AtomicString& type, CanBubble, IsCancelable, IsComposed = IsComposed::No);
-    Event(const AtomicString& type, CanBubble, IsCancelable, IsComposed, MonotonicTime timestamp, IsTrusted isTrusted = IsTrusted::Yes);
-    Event(const AtomicString& type, const EventInit&, IsTrusted);
+    Event(const AtomString& type, CanBubble, IsCancelable, IsComposed = IsComposed::No);
+    Event(const AtomString& type, CanBubble, IsCancelable, IsComposed, MonotonicTime timestamp, IsTrusted isTrusted = IsTrusted::Yes);
+    Event(const AtomString& type, const EventInit&, IsTrusted);
 
     virtual void receivedTarget() { }
 
 private:
-    explicit Event(MonotonicTime createTime, const AtomicString& type, IsTrusted, CanBubble, IsCancelable, IsComposed);
+    explicit Event(MonotonicTime createTime, const AtomString& type, IsTrusted, CanBubble, IsCancelable, IsComposed);
 
     void setCanceledFlagIfPossible();
 
     unsigned m_isInitialized : 1;
     unsigned m_canBubble : 1;
@@ -171,11 +171,11 @@
     unsigned m_isTrusted : 1;
     unsigned m_isExecutingPassiveEventListener : 1;
 
     unsigned m_eventPhase : 2;
 
-    AtomicString m_type;
+    AtomString m_type;
 
     RefPtr<EventTarget> m_currentTarget;
     const EventPath* m_eventPath { nullptr };
     RefPtr<EventTarget> m_target;
     MonotonicTime m_createTime;
