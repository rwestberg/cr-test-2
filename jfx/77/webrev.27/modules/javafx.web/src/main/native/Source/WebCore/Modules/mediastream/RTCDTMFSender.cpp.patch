diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCDTMFSender.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCDTMFSender.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCDTMFSender.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCDTMFSender.cpp
@@ -24,108 +24,134 @@
  */
 
 #include "config.h"
 #include "RTCDTMFSender.h"
 
-#if ENABLE(WEB_RTC_DTMF)
+#if ENABLE(WEB_RTC)
 
-#include "MediaStreamTrack.h"
-#include "RTCDTMFSenderHandler.h"
+#include "RTCDTMFSenderBackend.h"
 #include "RTCDTMFToneChangeEvent.h"
 #include "ScriptExecutionContext.h"
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
-static const long minToneDurationMs = 40;
-static const long defaultToneDurationMs = 100;
-static const long maxToneDurationMs = 6000;
-static const long minInterToneGapMs = 30;
-static const long defaultInterToneGapMs = 70;
+WTF_MAKE_ISO_ALLOCATED_IMPL(RTCDTMFSender);
 
-RTCDTMFSender::RTCDTMFSender(ScriptExecutionContext& context, RefPtr<MediaStreamTrack>&& track)
+static const size_t minToneDurationMs = 40;
+static const size_t maxToneDurationMs = 6000;
+static const size_t minInterToneGapMs = 30;
+
+RTCDTMFSender::RTCDTMFSender(ScriptExecutionContext& context, RTCRtpSender& sender, std::unique_ptr<RTCDTMFSenderBackend>&& backend)
     : ActiveDOMObject(&context)
-    , m_track(WTFMove(track))
-    , m_duration(defaultToneDurationMs)
-    , m_interToneGap(defaultInterToneGapMs)
-    , m_stopped(false)
-    , m_scheduledEventTimer(*this, &RTCDTMFSender::scheduledEventTimerFired)
+    , m_toneTimer(*this, &RTCDTMFSender::toneTimerFired)
+    , m_sender(makeWeakPtr(sender))
+    , m_backend(WTFMove(backend))
 {
+    m_backend->onTonePlayed([this](const String&) {
+        onTonePlayed();
+    });
+    suspendIfNeeded();
 }
 
 RTCDTMFSender::~RTCDTMFSender() = default;
 
 bool RTCDTMFSender::canInsertDTMF() const
 {
-    return false;
+    if (!m_sender || m_sender->isStopped())
+        return false;
+
+    auto currentDirection = m_sender->currentTransceiverDirection();
+    if (!currentDirection)
+        return false;
+    if (*currentDirection != RTCRtpTransceiverDirection::Sendrecv && *currentDirection != RTCRtpTransceiverDirection::Sendonly)
+        return false;
+
+    return m_backend && m_backend->canInsertDTMF();
 }
 
-MediaStreamTrack* RTCDTMFSender::track() const
+String RTCDTMFSender::toneBuffer() const
 {
-    return m_track.get();
+    return m_tones;
 }
 
-String RTCDTMFSender::toneBuffer() const
+static inline bool isToneCharacterInvalid(UChar character)
 {
-    return { };
+    if (character >= '0' && character <= '9')
+        return false;
+    if (character >= 'A' && character <= 'D')
+        return false;
+    return character != '#' && character != '*' && character != ',';
 }
 
-ExceptionOr<void> RTCDTMFSender::insertDTMF(const String&, Optional<int> duration, Optional<int> interToneGap)
+ExceptionOr<void> RTCDTMFSender::insertDTMF(const String& tones, size_t duration, size_t interToneGap)
 {
     if (!canInsertDTMF())
-        return Exception { NotSupportedError };
+        return Exception { InvalidStateError, "Cannot insert DTMF"_s };
 
-    if (duration && (duration.value() > maxToneDurationMs || duration.value() < minToneDurationMs))
-        return Exception { SyntaxError };
+    auto normalizedTones = tones.convertToUppercaseWithoutLocale();
+    if (normalizedTones.find(isToneCharacterInvalid) != notFound)
+        return Exception { InvalidCharacterError, "Tones are not valid"_s };
 
-    if (interToneGap && interToneGap.value() < minInterToneGapMs)
-        return Exception { SyntaxError };
+    m_tones = WTFMove(normalizedTones);
+    m_duration = clampTo(duration, minToneDurationMs, maxToneDurationMs);
+    m_interToneGap = std::max(interToneGap, minInterToneGapMs);
 
-    m_duration = duration.valueOr(defaultToneDurationMs);
-    m_interToneGap = interToneGap.valueOr(defaultInterToneGapMs);
+    if (m_tones.isEmpty() || m_isPendingPlayoutTask)
+        return { };
 
-    return Exception { SyntaxError };
+    m_isPendingPlayoutTask = true;
+    scriptExecutionContext()->postTask([this, protectedThis = makeRef(*this)](auto&) {
+        playNextTone();
+    });
+    return { };
 }
 
-void RTCDTMFSender::didPlayTone(const String& tone)
+void RTCDTMFSender::playNextTone()
 {
-    scheduleDispatchEvent(RTCDTMFToneChangeEvent::create(tone));
+    if (m_tones.isEmpty()) {
+        m_isPendingPlayoutTask = false;
+        dispatchEvent(RTCDTMFToneChangeEvent::create({ }));
+        return;
+    }
+
+    if (!canInsertDTMF()) {
+        m_isPendingPlayoutTask = false;
+        return;
+    }
+
+    auto currentTone = m_tones.substring(0, 1);
+    m_tones.remove(0);
+
+    m_backend->playTone(currentTone, m_duration, m_interToneGap);
+    dispatchEvent(RTCDTMFToneChangeEvent::create(currentTone));
 }
 
-void RTCDTMFSender::stop()
+void RTCDTMFSender::onTonePlayed()
 {
-    m_stopped = true;
+    m_toneTimer.startOneShot(1_ms * m_interToneGap);
 }
 
-const char* RTCDTMFSender::activeDOMObjectName() const
+void RTCDTMFSender::toneTimerFired()
 {
-    return "RTCDTMFSender";
+    playNextTone();
 }
 
-bool RTCDTMFSender::canSuspendForDocumentSuspension() const
+void RTCDTMFSender::stop()
 {
-    // FIXME: We should try and do better here.
-    return false;
+    m_backend = nullptr;
+    m_toneTimer.stop();
 }
 
-void RTCDTMFSender::scheduleDispatchEvent(Ref<Event>&& event)
+const char* RTCDTMFSender::activeDOMObjectName() const
 {
-    m_scheduledEvents.append(WTFMove(event));
-
-    if (!m_scheduledEventTimer.isActive())
-        m_scheduledEventTimer.startOneShot(0_s);
+    return "RTCDTMFSender";
 }
 
-void RTCDTMFSender::scheduledEventTimerFired()
+bool RTCDTMFSender::canSuspendForDocumentSuspension() const
 {
-    if (m_stopped)
-        return;
-
-    Vector<Ref<Event>> events;
-    events.swap(m_scheduledEvents);
-
-    for (auto& event : events)
-        dispatchEvent(event);
+    return !m_sender || m_sender->isStopped();
 }
 
 } // namespace WebCore
 
 #endif // ENABLE(WEB_RTC)
