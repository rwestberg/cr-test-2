diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITCall32_64.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITCall32_64.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITCall32_64.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITCall32_64.cpp
@@ -158,11 +158,11 @@
 
     if (Op::opcodeID == op_call && shouldEmitProfiling()) {
         emitLoad(registerOffset + CallFrame::argumentOffsetIncludingThis(0), regT0, regT1);
         Jump done = branchIfNotCell(regT0);
         load32(Address(regT1, JSCell::structureIDOffset()), regT1);
-        store32(regT1, metadata.m_arrayProfile.addressOfLastSeenStructureID());
+        store32(regT1, metadata.m_callLinkInfo.m_arrayProfile.addressOfLastSeenStructureID());
         done.link(this);
     }
 
     addPtr(TrustedImm32(registerOffset * sizeof(Register) + sizeof(CallerFrameAndPC)), callFrameRegister, stackPointerRegister);
     store32(TrustedImm32(argCount), Address(stackPointerRegister, CallFrameSlot::argumentCount * static_cast<int>(sizeof(Register)) + PayloadOffset - sizeof(CallerFrameAndPC)));
@@ -252,11 +252,11 @@
     int callee = bytecode.m_callee.offset();
 
     addPtr(TrustedImm32(registerOffset * sizeof(Register) + sizeof(CallerFrameAndPC)), callFrameRegister, stackPointerRegister);
 
     emitLoad(callee, regT1, regT0);
-    emitDumbVirtualCall(*vm(), info);
+    emitDumbVirtualCall(vm(), info);
     addPtr(TrustedImm32(stackPointerOffsetFor(m_codeBlock) * sizeof(Register)), callFrameRegister, stackPointerRegister);
     checkStackPointerAlignment();
 
     sampleCodeBlock(m_codeBlock);
 
