diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGComponentTransferFunctionElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGComponentTransferFunctionElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGComponentTransferFunctionElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGComponentTransferFunctionElement.cpp
@@ -1,9 +1,9 @@
 /*
  * Copyright (C) 2004, 2005, 2007 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005, 2006 Rob Buis <buis@kde.org>
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -22,77 +22,68 @@
 #include "config.h"
 #include "SVGComponentTransferFunctionElement.h"
 
 #include "SVGFEComponentTransferElement.h"
 #include "SVGNames.h"
-#include "SVGNumberListValues.h"
 #include <wtf/IsoMallocInlines.h>
 #include <wtf/NeverDestroyed.h>
 
 namespace WebCore {
 
 WTF_MAKE_ISO_ALLOCATED_IMPL(SVGComponentTransferFunctionElement);
 
 SVGComponentTransferFunctionElement::SVGComponentTransferFunctionElement(const QualifiedName& tagName, Document& document)
     : SVGElement(tagName, document)
 {
-    registerAttributes();
+    static std::once_flag onceFlag;
+    std::call_once(onceFlag, [] {
+        PropertyRegistry::registerProperty<SVGNames::typeAttr, ComponentTransferType, &SVGComponentTransferFunctionElement::m_type>();
+        PropertyRegistry::registerProperty<SVGNames::tableValuesAttr, &SVGComponentTransferFunctionElement::m_tableValues>();
+        PropertyRegistry::registerProperty<SVGNames::slopeAttr, &SVGComponentTransferFunctionElement::m_slope>();
+        PropertyRegistry::registerProperty<SVGNames::interceptAttr, &SVGComponentTransferFunctionElement::m_intercept>();
+        PropertyRegistry::registerProperty<SVGNames::amplitudeAttr, &SVGComponentTransferFunctionElement::m_amplitude>();
+        PropertyRegistry::registerProperty<SVGNames::exponentAttr, &SVGComponentTransferFunctionElement::m_exponent>();
+        PropertyRegistry::registerProperty<SVGNames::offsetAttr, &SVGComponentTransferFunctionElement::m_offset>();
+    });
 }
 
-void SVGComponentTransferFunctionElement::registerAttributes()
-{
-    auto& registry = attributeRegistry();
-    if (!registry.isEmpty())
-        return;
-    registry.registerAttribute<SVGNames::typeAttr, ComponentTransferType, &SVGComponentTransferFunctionElement::m_type>();
-    registry.registerAttribute<SVGNames::tableValuesAttr, &SVGComponentTransferFunctionElement::m_tableValues>();
-    registry.registerAttribute<SVGNames::slopeAttr, &SVGComponentTransferFunctionElement::m_slope>();
-    registry.registerAttribute<SVGNames::interceptAttr, &SVGComponentTransferFunctionElement::m_intercept>();
-    registry.registerAttribute<SVGNames::amplitudeAttr, &SVGComponentTransferFunctionElement::m_amplitude>();
-    registry.registerAttribute<SVGNames::exponentAttr, &SVGComponentTransferFunctionElement::m_exponent>();
-    registry.registerAttribute<SVGNames::offsetAttr, &SVGComponentTransferFunctionElement::m_offset>();
-}
-
-void SVGComponentTransferFunctionElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void SVGComponentTransferFunctionElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == SVGNames::typeAttr) {
         ComponentTransferType propertyValue = SVGPropertyTraits<ComponentTransferType>::fromString(value);
         if (propertyValue > 0)
-            m_type.setValue(propertyValue);
+            m_type->setBaseValInternal<ComponentTransferType>(propertyValue);
         return;
     }
 
     if (name == SVGNames::tableValuesAttr) {
-        SVGNumberListValues newList;
-        newList.parse(value);
-        m_tableValues.detachAnimatedListWrappers(attributeOwnerProxy(), newList.size());
-        m_tableValues.setValue(WTFMove(newList));
+        m_tableValues->baseVal()->parse(value);
         return;
     }
 
     if (name == SVGNames::slopeAttr) {
-        m_slope.setValue(value.toFloat());
+        m_slope->setBaseValInternal(value.toFloat());
         return;
     }
 
     if (name == SVGNames::interceptAttr) {
-        m_intercept.setValue(value.toFloat());
+        m_intercept->setBaseValInternal(value.toFloat());
         return;
     }
 
     if (name == SVGNames::amplitudeAttr) {
-        m_amplitude.setValue(value.toFloat());
+        m_amplitude->setBaseValInternal(value.toFloat());
         return;
     }
 
     if (name == SVGNames::exponentAttr) {
-        m_exponent.setValue(value.toFloat());
+        m_exponent->setBaseValInternal(value.toFloat());
         return;
     }
 
     if (name == SVGNames::offsetAttr) {
-        m_offset.setValue(value.toFloat());
+        m_offset->setBaseValInternal(value.toFloat());
         return;
     }
 
     SVGElement::parseAttribute(name, value);
 }
