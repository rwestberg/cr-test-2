diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmModuleInformation.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmModuleInformation.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmModuleInformation.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmModuleInformation.h
@@ -27,10 +27,11 @@
 
 #if ENABLE(WEBASSEMBLY)
 
 #include "WasmFormat.h"
 
+#include <wtf/BitVector.h>
 #include <wtf/Optional.h>
 
 namespace JSC { namespace Wasm {
 
 struct ModuleInformation : public ThreadSafeRefCounted<ModuleInformation> {
@@ -62,11 +63,14 @@
     uint32_t internalFunctionCount() const { return internalFunctionSignatureIndices.size(); }
 
     // Currently, our wasm implementation allows only one memory and table.
     // If we need to remove this limitation, we would have MemoryInformation and TableInformation in the Vectors.
     uint32_t memoryCount() const { return memory ? 1 : 0; }
-    uint32_t tableCount() const { return tableInformation ? 1 : 0; }
+    uint32_t tableCount() const { return tables.size(); }
+
+    const BitVector& referencedFunctions() const { return m_referencedFunctions; }
+    void addReferencedFunction(unsigned index) const { m_referencedFunctions.set(index); }
 
     Vector<Import> imports;
     Vector<SignatureIndex> importFunctionSignatureIndices;
     Vector<SignatureIndex> internalFunctionSignatureIndices;
     Vector<Ref<Signature>> usedSignatures;
@@ -77,15 +81,18 @@
 
     Vector<Export> exports;
     Optional<uint32_t> startFunctionIndexSpace;
     Vector<Segment::Ptr> data;
     Vector<Element> elements;
-    TableInformation tableInformation;
+    Vector<TableInformation> tables;
     Vector<Global> globals;
     unsigned firstInternalGlobal { 0 };
+    uint32_t codeSectionSize { 0 };
     Vector<CustomSection> customSections;
     Ref<NameSection> nameSection;
+
+    mutable BitVector m_referencedFunctions;
 };
 
 
 } } // namespace JSC::Wasm
 
