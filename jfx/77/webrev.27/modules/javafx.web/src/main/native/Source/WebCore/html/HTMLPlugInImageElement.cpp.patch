diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLPlugInImageElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLPlugInImageElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLPlugInImageElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLPlugInImageElement.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2008-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2008-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -152,27 +152,35 @@
         return frame->loader().client().objectContentType(document().completeURL(m_url), m_serviceType) == ObjectContentType::Image;
 
     return Image::supportsType(m_serviceType);
 }
 
-// We don't use m_url, as it may not be the final URL that the object loads, depending on <param> values.
-bool HTMLPlugInImageElement::allowedToLoadFrameURL(const String& url)
+bool HTMLPlugInImageElement::canLoadURL(const String& relativeURL) const
 {
-    URL completeURL = document().completeURL(url);
-    if (contentFrame() && WTF::protocolIsJavaScript(completeURL) && !document().securityOrigin().canAccess(contentDocument()->securityOrigin()))
-        return false;
-    return document().frame()->isURLAllowed(completeURL);
+    return canLoadURL(document().completeURL(relativeURL));
+}
+
+// Note that unlike HTMLFrameElementBase::canLoadURL this uses SecurityOrigin::canAccess.
+bool HTMLPlugInImageElement::canLoadURL(const URL& completeURL) const
+{
+    if (WTF::protocolIsJavaScript(completeURL)) {
+        RefPtr<Document> contentDocument = this->contentDocument();
+        if (contentDocument && !document().securityOrigin().canAccess(contentDocument->securityOrigin()))
+            return false;
+    }
+
+    return !isProhibitedSelfReference(completeURL);
 }
 
 // We don't use m_url, or m_serviceType as they may not be the final values
 // that <object> uses depending on <param> values.
-bool HTMLPlugInImageElement::wouldLoadAsPlugIn(const String& url, const String& serviceType)
+bool HTMLPlugInImageElement::wouldLoadAsPlugIn(const String& relativeURL, const String& serviceType)
 {
     ASSERT(document().frame());
     URL completedURL;
-    if (!url.isEmpty())
-        completedURL = document().completeURL(url);
+    if (!relativeURL.isEmpty())
+        completedURL = document().completeURL(relativeURL);
     return document().frame()->loader().client().objectContentType(completedURL, serviceType) == ObjectContentType::PlugIn;
 }
 
 RenderPtr<RenderElement> HTMLPlugInImageElement::createElementRenderer(RenderStyle&& style, const RenderTreePosition& insertionPosition)
 {
@@ -189,11 +197,11 @@
     }
 
     if (displayState() == DisplayingSnapshot) {
         auto renderSnapshottedPlugIn = createRenderer<RenderSnapshottedPlugIn>(*this, WTFMove(style));
         renderSnapshottedPlugIn->updateSnapshot(m_snapshotImage.get());
-        return WTFMove(renderSnapshottedPlugIn);
+        return renderSnapshottedPlugIn;
     }
 
     if (useFallbackContent())
         return RenderElement::createFor(*this, WTFMove(style));
 
@@ -277,11 +285,11 @@
     // accurately until after style resolution.
 
     if (renderer() && !useFallbackContent()) {
         if (isImageType()) {
             if (!m_imageLoader)
-                m_imageLoader = std::make_unique<HTMLImageLoader>(*this);
+                m_imageLoader = makeUnique<HTMLImageLoader>(*this);
             if (m_needsImageReload)
                 m_imageLoader->updateFromElementIgnoringPreviousError();
             else
                 m_imageLoader->updateFromElement();
         } else {
@@ -395,11 +403,11 @@
     // If no snapshot was found then we want the overlay to be visible.
     argList.append(toJS<IDLBoolean>(!m_snapshotImage));
     ASSERT(!argList.hasOverflowed());
 
     // It is expected the JS file provides a createOverlay(shadowRoot, title, subtitle) function.
-    auto* overlay = globalObject.get(&state, JSC::Identifier::fromString(&state, "createOverlay")).toObject(&state);
+    auto* overlay = globalObject.get(&state, JSC::Identifier::fromString(vm, "createOverlay")).toObject(&state);
     ASSERT(!overlay == !!scope.exception());
     if (!overlay) {
         scope.clearException();
         return;
     }
@@ -412,11 +420,11 @@
     scope.clearException();
 }
 
 bool HTMLPlugInImageElement::partOfSnapshotOverlay(const EventTarget* target) const
 {
-    static NeverDestroyed<AtomicString> selector(".snapshot-overlay", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> selector(".snapshot-overlay", AtomString::ConstructFromLiteral);
     auto shadow = userAgentShadowRoot();
     if (!shadow)
         return false;
     if (!is<Node>(target))
         return false;
@@ -760,19 +768,19 @@
         }
     }
     HTMLPlugInElement::defaultEventHandler(event);
 }
 
-bool HTMLPlugInImageElement::allowedToLoadPluginContent(const String& url, const String& mimeType) const
+bool HTMLPlugInImageElement::canLoadPlugInContent(const String& relativeURL, const String& mimeType) const
 {
     // Elements in user agent show tree should load whatever the embedding document policy is.
     if (isInUserAgentShadowTree())
         return true;
 
     URL completedURL;
-    if (!url.isEmpty())
-        completedURL = document().completeURL(url);
+    if (!relativeURL.isEmpty())
+        completedURL = document().completeURL(relativeURL);
 
     ASSERT(document().contentSecurityPolicy());
     const ContentSecurityPolicy& contentSecurityPolicy = *document().contentSecurityPolicy();
 
     contentSecurityPolicy.upgradeInsecureRequestIfNeeded(completedURL, ContentSecurityPolicy::InsecureRequestType::Load);
@@ -783,26 +791,26 @@
     auto& declaredMimeType = document().isPluginDocument() && document().ownerElement() ?
         document().ownerElement()->attributeWithoutSynchronization(HTMLNames::typeAttr) : attributeWithoutSynchronization(HTMLNames::typeAttr);
     return contentSecurityPolicy.allowPluginType(mimeType, declaredMimeType, completedURL);
 }
 
-bool HTMLPlugInImageElement::requestObject(const String& url, const String& mimeType, const Vector<String>& paramNames, const Vector<String>& paramValues)
+bool HTMLPlugInImageElement::requestObject(const String& relativeURL, const String& mimeType, const Vector<String>& paramNames, const Vector<String>& paramValues)
 {
     ASSERT(document().frame());
 
-    if (url.isEmpty() && mimeType.isEmpty())
+    if (relativeURL.isEmpty() && mimeType.isEmpty())
         return false;
 
-    if (!allowedToLoadPluginContent(url, mimeType)) {
+    if (!canLoadPlugInContent(relativeURL, mimeType)) {
         renderEmbeddedObject()->setPluginUnavailabilityReason(RenderEmbeddedObject::PluginBlockedByContentSecurityPolicy);
         return false;
     }
 
-    if (HTMLPlugInElement::requestObject(url, mimeType, paramNames, paramValues))
+    if (HTMLPlugInElement::requestObject(relativeURL, mimeType, paramNames, paramValues))
         return true;
 
-    return document().frame()->loader().subframeLoader().requestObject(*this, url, getNameAttribute(), mimeType, paramNames, paramValues);
+    return document().frame()->loader().subframeLoader().requestObject(*this, relativeURL, getNameAttribute(), mimeType, paramNames, paramValues);
 }
 
 void HTMLPlugInImageElement::updateImageLoaderWithNewURLSoon()
 {
     if (m_needsImageReload)
