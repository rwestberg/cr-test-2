diff a/modules/javafx.web/src/main/native/Source/WebCore/page/Frame.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/Frame.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/Frame.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/Frame.cpp
@@ -3,11 +3,11 @@
  *                     1999 Lars Knoll <knoll@kde.org>
  *                     1999 Antti Koivisto <koivisto@kde.org>
  *                     2000 Simon Hausmann <hausmann@kde.org>
  *                     2000 Stefan Schimanski <1Stein@gmx.de>
  *                     2001 George Staikos <staikos@kde.org>
- * Copyright (C) 2004-2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2004-2019 Apple Inc. All rights reserved.
  * Copyright (C) 2005 Alexey Proskuryakov <ap@nypop.com>
  * Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies)
  * Copyright (C) 2008 Eric Seidel <eric@webkit.org>
  * Copyright (C) 2008 Google Inc.
  *
@@ -93,10 +93,11 @@
 #include "StyleScope.h"
 #include "TextNodeTraversal.h"
 #include "TextResourceDecoder.h"
 #include "UserContentController.h"
 #include "UserContentURLPattern.h"
+#include "UserGestureIndicator.h"
 #include "UserScript.h"
 #include "UserTypingGestureIndicator.h"
 #include "VisibleUnits.h"
 #include "markup.h"
 #include "npruntime_impl.h"
@@ -104,24 +105,23 @@
 #include <JavaScriptCore/RegularExpression.h>
 #include <wtf/RefCountedLeakCounter.h>
 #include <wtf/StdLibExtras.h>
 #include <wtf/text/StringBuilder.h>
 
-#if PLATFORM(IOS_FAMILY)
-#include "WKContentObservation.h"
-#endif
-
 namespace WebCore {
 
 using namespace HTMLNames;
 
 #if PLATFORM(IOS_FAMILY)
 static const Seconds scrollFrequency { 1000_s / 60. };
 #endif
 
 DEFINE_DEBUG_ONLY_GLOBAL(WTF::RefCountedLeakCounter, frameCounter, ("Frame"));
 
+// We prewarm local storage for at most 5 origins in a given page.
+static const unsigned maxlocalStoragePrewarmingCount { 5 };
+
 static inline Frame* parentFromOwnerElement(HTMLFrameOwnerElement* ownerElement)
 {
     if (!ownerElement)
         return 0;
     return ownerElement->document().frame();
@@ -153,17 +153,12 @@
     , m_ownerElement(ownerElement)
     , m_script(makeUniqueRef<ScriptController>(*this))
     , m_editor(makeUniqueRef<Editor>(*this))
     , m_selection(makeUniqueRef<FrameSelection>(this))
     , m_animationController(makeUniqueRef<CSSAnimationController>(*this))
-#if PLATFORM(IOS_FAMILY)
-    , m_overflowAutoScrollTimer(*this, &Frame::overflowAutoScrollTimerFired)
-    , m_selectionChangeCallbacksDisabled(false)
-#endif
     , m_pageZoomFactor(parentPageZoomFactor(this))
     , m_textZoomFactor(parentTextZoomFactor(this))
-    , m_activeDOMObjectsAndAnimationsSuspendedCount(0)
     , m_eventHandler(makeUniqueRef<EventHandler>(*this))
 {
     ProcessWarming::initializeNames();
 
     if (ownerElement) {
@@ -501,164 +496,59 @@
 
     return matchLabelsAgainstString(labels, element->attributeWithoutSynchronization(idAttr));
 }
 
 #if PLATFORM(IOS_FAMILY)
-void Frame::scrollOverflowLayer(RenderLayer* layer, const IntRect& visibleRect, const IntRect& exposeRect)
-{
-    if (!layer)
-        return;
-
-    RenderBox* box = layer->renderBox();
-    if (!box)
-        return;
-
-    if (visibleRect.intersects(exposeRect))
-        return;
-
-    // FIXME: Why isn't this just calling RenderLayer::scrollRectToVisible()?
-    ScrollOffset scrollOffset = layer->scrollOffset();
-    int exposeLeft = exposeRect.x();
-    int exposeRight = exposeLeft + exposeRect.width();
-    int clientWidth = roundToInt(box->clientWidth());
-    if (exposeLeft <= 0)
-        scrollOffset.setX(std::max(0, scrollOffset.x() + exposeLeft - clientWidth / 2));
-    else if (exposeRight >= clientWidth)
-        scrollOffset.setX(std::min(box->scrollWidth() - clientWidth, scrollOffset.x() + clientWidth / 2));
-
-    int exposeTop = exposeRect.y();
-    int exposeBottom = exposeTop + exposeRect.height();
-    int clientHeight = roundToInt(box->clientHeight());
-    if (exposeTop <= 0)
-        scrollOffset.setY(std::max(0, scrollOffset.y() + exposeTop - clientHeight / 2));
-    else if (exposeBottom >= clientHeight)
-        scrollOffset.setY(std::min(box->scrollHeight() - clientHeight, scrollOffset.y() + clientHeight / 2));
-
-    layer->scrollToOffset(scrollOffset, ScrollClamping::Unclamped);
-    selection().setCaretRectNeedsUpdate();
-    selection().updateAppearance();
-}
 
-void Frame::overflowAutoScrollTimerFired()
+void Frame::setSelectionChangeCallbacksDisabled(bool selectionChangeCallbacksDisabled)
 {
-    if (!eventHandler().mousePressed() || checkOverflowScroll(PerformOverflowScroll) == OverflowScrollNone) {
-        if (m_overflowAutoScrollTimer.isActive())
-            m_overflowAutoScrollTimer.stop();
-    }
+    m_selectionChangeCallbacksDisabled = selectionChangeCallbacksDisabled;
 }
 
-void Frame::startOverflowAutoScroll(const IntPoint& mousePosition)
+bool Frame::selectionChangeCallbacksDisabled() const
 {
-    m_overflowAutoScrollPos = mousePosition;
-
-    if (m_overflowAutoScrollTimer.isActive())
-        return;
-
-    if (checkOverflowScroll(DoNotPerformOverflowScroll) == OverflowScrollNone)
-        return;
-
-    m_overflowAutoScrollTimer.startRepeating(scrollFrequency);
-    m_overflowAutoScrollDelta = 3;
+    return m_selectionChangeCallbacksDisabled;
 }
+#endif // PLATFORM(IOS_FAMILY)
 
-int Frame::checkOverflowScroll(OverflowScrollAction action)
+bool Frame::requestDOMPasteAccess()
 {
-    Position extent = selection().selection().extent();
-    if (extent.isNull())
-        return OverflowScrollNone;
-
-    RenderObject* renderer = extent.deprecatedNode()->renderer();
-    if (!renderer)
-        return OverflowScrollNone;
-
-    FrameView* view = this->view();
-    if (!view)
-        return OverflowScrollNone;
-
-    RenderBlock* containingBlock = renderer->containingBlock();
-    if (!containingBlock || !containingBlock->hasOverflowClip())
-        return OverflowScrollNone;
-    RenderLayer* layer = containingBlock->layer();
-    ASSERT(layer);
-
-    IntRect visibleRect = IntRect(view->scrollX(), view->scrollY(), view->visibleWidth(), view->visibleHeight());
-    IntPoint position = m_overflowAutoScrollPos;
-    if (visibleRect.contains(position.x(), position.y()))
-        return OverflowScrollNone;
-
-    int scrollType = 0;
-    int deltaX = 0;
-    int deltaY = 0;
-    IntPoint selectionPosition;
-
-    // This constant will make the selection draw a little bit beyond the edge of the visible area.
-    // This prevents a visual glitch, in that you can fail to select a portion of a character that
-    // is being rendered right at the edge of the visible rectangle.
-    // FIXME: This probably needs improvement, and may need to take the font size into account.
-    static const int scrollBoundsAdjustment = 3;
-
-    // FIXME: Make a small buffer at the end of a visible rectangle so that autoscrolling works
-    // even if the visible extends to the limits of the screen.
-    if (position.x() < visibleRect.x()) {
-        scrollType |= OverflowScrollLeft;
-        if (action == PerformOverflowScroll) {
-            deltaX -= static_cast<int>(m_overflowAutoScrollDelta);
-            selectionPosition.setX(view->scrollX() - scrollBoundsAdjustment);
-        }
-    } else if (position.x() > visibleRect.maxX()) {
-        scrollType |= OverflowScrollRight;
-        if (action == PerformOverflowScroll) {
-            deltaX += static_cast<int>(m_overflowAutoScrollDelta);
-            selectionPosition.setX(view->scrollX() + view->visibleWidth() + scrollBoundsAdjustment);
-        }
-    }
+    if (m_settings->javaScriptCanAccessClipboard() && m_settings->DOMPasteAllowed())
+        return true;
 
-    if (position.y() < visibleRect.y()) {
-        scrollType |= OverflowScrollUp;
-        if (action == PerformOverflowScroll) {
-            deltaY -= static_cast<int>(m_overflowAutoScrollDelta);
-            selectionPosition.setY(view->scrollY() - scrollBoundsAdjustment);
-        }
-    } else if (position.y() > visibleRect.maxY()) {
-        scrollType |= OverflowScrollDown;
-        if (action == PerformOverflowScroll) {
-            deltaY += static_cast<int>(m_overflowAutoScrollDelta);
-            selectionPosition.setY(view->scrollY() + view->visibleHeight() + scrollBoundsAdjustment);
-        }
-    }
-
-    Ref<Frame> protectedThis(*this);
+    if (!m_settings->domPasteAccessRequestsEnabled() || !m_doc)
+        return false;
 
-    if (action == PerformOverflowScroll && (deltaX || deltaY)) {
-        layer->scrollToOffset(layer->scrollOffset() + IntSize(deltaX, deltaY), ScrollClamping::Unclamped);
+    auto gestureToken = UserGestureIndicator::currentUserGesture();
+    if (!gestureToken || !gestureToken->processingUserGesture())
+        return false;
 
-        // Handle making selection.
-        VisiblePosition visiblePosition(renderer->positionForPoint(selectionPosition, nullptr));
-        if (visiblePosition.isNotNull()) {
-            VisibleSelection visibleSelection = selection().selection();
-            visibleSelection.setExtent(visiblePosition);
-            if (selection().granularity() != CharacterGranularity)
-                visibleSelection.expandUsingGranularity(selection().granularity());
-            if (selection().shouldChangeSelection(visibleSelection))
-                selection().setSelection(visibleSelection);
+    switch (gestureToken->domPasteAccessPolicy()) {
+    case DOMPasteAccessPolicy::Granted:
+        return true;
+    case DOMPasteAccessPolicy::Denied:
+        return false;
+    case DOMPasteAccessPolicy::NotRequestedYet: {
+        auto* client = m_editor->client();
+        if (!client)
+            return false;
+
+        auto response = client->requestDOMPasteAccess(m_doc->originIdentifierForPasteboard());
+        gestureToken->didRequestDOMPasteAccess(response);
+        switch (response) {
+        case DOMPasteAccessResponse::GrantedForCommand:
+        case DOMPasteAccessResponse::GrantedForGesture:
+            return true;
+        case DOMPasteAccessResponse::DeniedForGesture:
+            return false;
         }
-
-        m_overflowAutoScrollDelta *= 1.02f; // Accelerate the scroll
     }
-    return scrollType;
-}
-
-void Frame::setSelectionChangeCallbacksDisabled(bool selectionChangeCallbacksDisabled)
-{
-    m_selectionChangeCallbacksDisabled = selectionChangeCallbacksDisabled;
-}
+    }
 
-bool Frame::selectionChangeCallbacksDisabled() const
-{
-    return m_selectionChangeCallbacksDisabled;
+    ASSERT_NOT_REACHED();
+    return false;
 }
-#endif // PLATFORM(IOS_FAMILY)
 
 void Frame::setPrinting(bool printing, const FloatSize& pageSize, const FloatSize& originalPageSize, float maximumShrinkRatio, AdjustViewSizeOrNot shouldAdjustViewSize)
 {
     if (!view())
         return;
@@ -732,12 +622,14 @@
         return;
     if (script.injectedFrames() == InjectInTopFrameOnly && !isMainFrame())
         return;
     if (!UserContentURLPattern::matchesPatterns(document->url(), script.whitelist(), script.blacklist()))
         return;
+    if (!m_script->shouldAllowUserAgentScripts(*document))
+        return;
 
-    document->topDocument().setAsRunningUserScripts();
+    document->setAsRunningUserScripts();
     loader().client().willInjectUserScript(world);
     m_script->evaluateInWorld(ScriptSourceCode(script.source(), URL(script.url())), world);
 }
 
 RenderView* Frame::contentRenderer() const
@@ -802,17 +694,10 @@
         page()->focusController().setFocusedFrame(nullptr);
 
     if (page() && page()->scrollingCoordinator() && m_view)
         page()->scrollingCoordinator()->willDestroyScrollableArea(*m_view);
 
-#if PLATFORM(IOS_FAMILY)
-    if (WebThreadCountOfObservedDOMTimers() > 0 && m_page) {
-        LOG(ContentObservation, "Frame::willDetachPage: remove registered timers.");
-        m_page->chrome().client().clearContentChangeObservers(*this);
-    }
-#endif
-
     script().clearScriptObjects();
     script().updatePlatformScriptObjects();
 
     // We promise that the Frame is always connected to a Page while the render tree is live.
     //
@@ -844,11 +729,11 @@
     return document() ? document()->displayStringModifiedByEncoding(str) : str;
 }
 
 VisiblePosition Frame::visiblePositionForPoint(const IntPoint& framePoint) const
 {
-    HitTestResult result = eventHandler().hitTestResultAtPoint(framePoint, HitTestRequest::ReadOnly | HitTestRequest::Active);
+    HitTestResult result = eventHandler().hitTestResultAtPoint(framePoint, HitTestRequest::ReadOnly | HitTestRequest::Active | HitTestRequest::AllowChildFrameContent);
     Node* node = result.innerNonSharedNode();
     if (!node)
         return VisiblePosition();
     auto renderer = node->renderer();
     if (!renderer)
@@ -866,11 +751,11 @@
 
     IntPoint pt = view()->windowToContents(point);
     HitTestResult result = HitTestResult(pt);
 
     if (contentRenderer())
-        result = eventHandler().hitTestResultAtPoint(pt);
+        result = eventHandler().hitTestResultAtPoint(pt, HitTestRequest::ReadOnly | HitTestRequest::Active | HitTestRequest::DisallowUserAgentShadowContent | HitTestRequest::AllowChildFrameContent);
     return result.innerNode() ? &result.innerNode()->document() : 0;
 }
 
 RefPtr<Range> Frame::rangeForPoint(const IntPoint& framePoint)
 {
@@ -1079,27 +964,10 @@
 
     if (RenderView* root = contentRenderer())
         root->compositor().deviceOrPageScaleFactorChanged();
 }
 
-bool Frame::isURLAllowed(const URL& url) const
-{
-    // We allow one level of self-reference because some sites depend on that,
-    // but we don't allow more than one.
-    if (m_page->subframeCount() >= Page::maxNumberOfFrames)
-        return false;
-    bool foundSelfReference = false;
-    for (const Frame* frame = this; frame; frame = frame->tree().parent()) {
-        if (equalIgnoringFragmentIdentifier(frame->document()->url(), url)) {
-            if (foundSelfReference)
-                return false;
-            foundSelfReference = true;
-        }
-    }
-    return true;
-}
-
 bool Frame::isAlwaysOnLoggingAllowed() const
 {
     return page() && page()->isAlwaysOnLoggingAllowed();
 }
 
@@ -1108,10 +976,23 @@
     ASSERT(isMainFrame());
     while (Frame* child = tree().firstChild())
         tree().removeChild(*child);
 }
 
+void Frame::didPrewarmLocalStorage()
+{
+    ASSERT(isMainFrame());
+    ASSERT(m_localStoragePrewarmingCount < maxlocalStoragePrewarmingCount);
+    ++m_localStoragePrewarmingCount;
+}
+
+bool Frame::mayPrewarmLocalStorage() const
+{
+    ASSERT(isMainFrame());
+    return m_localStoragePrewarmingCount < maxlocalStoragePrewarmingCount;
+}
+
 void Frame::selfOnlyRef()
 {
     ASSERT(isMainFrame());
     if (m_selfOnlyRefCount++)
         return;
@@ -1130,6 +1011,11 @@
         dropChildren();
 
     deref();
 }
 
+PAL::SessionID Frame::sessionID() const
+{
+    return m_loader->client().sessionID();
+}
+
 } // namespace WebCore
