diff a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/AXObjectCacheAtk.cpp b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/AXObjectCacheAtk.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/AXObjectCacheAtk.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/AXObjectCacheAtk.cpp
@@ -18,11 +18,11 @@
  */
 
 #include "config.h"
 #include "AXObjectCache.h"
 
-#if HAVE(ACCESSIBILITY)
+#if ENABLE(ACCESSIBILITY)
 
 #include "AccessibilityObject.h"
 #include "AccessibilityRenderObject.h"
 #include "Document.h"
 #include "Element.h"
@@ -36,17 +36,17 @@
 
 namespace WebCore {
 
 static AtkObject* wrapperParent(WebKitAccessible* wrapper)
 {
-            // Look for the right object to emit the signal from, but using the implementation
-            // of atk_object_get_parent from AtkObject class (which uses a cached pointer if set)
-            // since the accessibility hierarchy in WebCore will no longer be navigable.
-            gpointer webkitAccessibleClass = g_type_class_peek_parent(WEBKIT_ACCESSIBLE_GET_CLASS(wrapper));
-            gpointer atkObjectClass = g_type_class_peek_parent(webkitAccessibleClass);
-            AtkObject* atkParent = ATK_OBJECT_CLASS(atkObjectClass)->get_parent(ATK_OBJECT(wrapper));
-            // We don't want to emit any signal from an object outside WebKit's world.
+    // Look for the right object to emit the signal from, but using the implementation
+    // of atk_object_get_parent from AtkObject class (which uses a cached pointer if set)
+    // since the accessibility hierarchy in WebCore will no longer be navigable.
+    gpointer webkitAccessibleClass = g_type_class_peek_parent(WEBKIT_ACCESSIBLE_GET_CLASS(wrapper));
+    gpointer atkObjectClass = g_type_class_peek_parent(webkitAccessibleClass);
+    AtkObject* atkParent = ATK_OBJECT_CLASS(atkObjectClass)->get_parent(ATK_OBJECT(wrapper));
+    // We don't want to emit any signal from an object outside WebKit's world.
     return WEBKIT_IS_ACCESSIBLE(atkParent) ? atkParent : nullptr;
 }
 
 void AXObjectCache::detachWrapper(AccessibilityObject* obj, AccessibilityDetachmentType detachmentType)
 {
@@ -92,18 +92,18 @@
     for (auto& coreObject : m_deferredAttachedWrapperObjectList) {
         auto* wrapper = coreObject->wrapper();
         if (!wrapper)
             continue;
 
-    // Don't emit the signal for objects whose parents won't be exposed directly.
+        // Don't emit the signal for objects whose parents won't be exposed directly.
         auto* coreParent = coreObject->parentObjectUnignored();
-    if (!coreParent || coreParent->accessibilityIsIgnoredByDefault())
+        if (!coreParent || coreParent->accessibilityIsIgnoredByDefault())
             continue;
 
-    // Look for the right object to emit the signal from.
+        // Look for the right object to emit the signal from.
         auto* atkParent = coreParent->wrapper();
-    if (!atkParent)
+        if (!atkParent)
             continue;
 
         size_t index = coreParent->children(false).find(coreObject);
         g_signal_emit_by_name(atkParent, "children-changed::add", index != notFound ? index : -1, wrapper);
     }
@@ -238,17 +238,14 @@
         if (ATK_IS_VALUE(axObject)) {
             AtkPropertyValues propertyValues;
             propertyValues.property_name = "accessible-value";
 
             memset(&propertyValues.new_value,  0, sizeof(GValue));
-#if ATK_CHECK_VERSION(2,11,92)
+
             double value;
             atk_value_get_value_and_text(ATK_VALUE(axObject), &value, nullptr);
             g_value_set_double(g_value_init(&propertyValues.new_value, G_TYPE_DOUBLE), value);
-#else
-            atk_value_get_current_value(ATK_VALUE(axObject), &propertyValues.new_value);
-#endif
 
             g_signal_emit_by_name(axObject, "property-change::accessible-value", &propertyValues, NULL);
         }
         break;
 
@@ -286,13 +283,11 @@
     case AXPressedStateChanged:
         atk_object_notify_state_change(axObject, ATK_STATE_PRESSED, coreObject->isPressed());
         break;
 
     case AXReadOnlyStatusChanged:
-#if ATK_CHECK_VERSION(2,15,3)
         atk_object_notify_state_change(axObject, ATK_STATE_READ_ONLY, !coreObject->canSetValueAttribute());
-#endif
         break;
 
     case AXRequiredStatusChanged:
         atk_object_notify_state_change(axObject, ATK_STATE_REQUIRED, coreObject->isRequired());
         break;
