diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoTLSInlines.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoTLSInlines.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoTLSInlines.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoTLSInlines.h
@@ -94,11 +94,11 @@
         }
         break;
     }
 
     // If debug heap is enabled, s_mallocFallbackState becomes MallocFallbackState::FallBackToMalloc.
-    BASSERT(!PerProcess<Environment>::get()->isDebugHeapEnabled());
+    BASSERT(!Environment::get()->isDebugHeapEnabled());
 
     IsoTLS* tls = ensureHeapAndEntries(handle);
 
     return tls->allocateFast<Config>(handle.allocatorOffset(), abortOnFailure);
 }
@@ -111,17 +111,17 @@
     // Note that this bounds check would be here even if we didn't have to support DebugHeap,
     // since we don't want unpredictable behavior if offset or m_extent ever got corrupted.
     if (!tls || offset >= tls->m_extent)
         deallocateSlow<Config>(handle, p);
     else
-        tls->deallocateFast<Config>(offset, p);
+        tls->deallocateFast<Config>(handle, offset, p);
 }
 
-template<typename Config>
-void IsoTLS::deallocateFast(unsigned offset, void* p)
+template<typename Config, typename Type>
+void IsoTLS::deallocateFast(api::IsoHeap<Type>& handle, unsigned offset, void* p)
 {
-    reinterpret_cast<IsoDeallocator<Config>*>(m_data + offset)->deallocate(p);
+    reinterpret_cast<IsoDeallocator<Config>*>(m_data + offset)->deallocate(handle, p);
 }
 
 template<typename Config, typename Type>
 BNO_INLINE void IsoTLS::deallocateSlow(api::IsoHeap<Type>& handle, void* p)
 {
@@ -137,17 +137,17 @@
         }
         break;
     }
 
     // If debug heap is enabled, s_mallocFallbackState becomes MallocFallbackState::FallBackToMalloc.
-    BASSERT(!PerProcess<Environment>::get()->isDebugHeapEnabled());
+    BASSERT(!Environment::get()->isDebugHeapEnabled());
 
     RELEASE_BASSERT(handle.isInitialized());
 
     IsoTLS* tls = ensureEntries(std::max(handle.allocatorOffset(), handle.deallocatorOffset()));
 
-    tls->deallocateFast<Config>(handle.deallocatorOffset(), p);
+    tls->deallocateFast<Config>(handle, handle.deallocatorOffset(), p);
 }
 
 inline IsoTLS* IsoTLS::get()
 {
 #if HAVE_PTHREAD_MACHDEP_H
@@ -171,17 +171,12 @@
 template<typename Type>
 void IsoTLS::ensureHeap(api::IsoHeap<Type>& handle)
 {
     if (!handle.isInitialized()) {
         std::lock_guard<Mutex> locker(handle.m_initializationLock);
-        if (!handle.isInitialized()) {
-            auto* heap = new IsoHeapImpl<typename api::IsoHeap<Type>::Config>();
-            std::atomic_thread_fence(std::memory_order_seq_cst);
-            handle.setAllocatorOffset(heap->allocatorOffset());
-            handle.setDeallocatorOffset(heap->deallocatorOffset());
-            handle.m_impl = heap;
-        }
+        if (!handle.isInitialized())
+            handle.initialize();
     }
 }
 
 template<typename Type>
 BNO_INLINE IsoTLS* IsoTLS::ensureHeapAndEntries(api::IsoHeap<Type>& handle)
