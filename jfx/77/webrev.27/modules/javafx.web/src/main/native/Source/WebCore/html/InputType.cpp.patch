diff a/modules/javafx.web/src/main/native/Source/WebCore/html/InputType.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/InputType.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/InputType.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/InputType.cpp
@@ -82,13 +82,13 @@
 namespace WebCore {
 
 using namespace HTMLNames;
 
 typedef bool (RuntimeEnabledFeatures::*InputTypeConditionalFunction)() const;
-typedef const AtomicString& (*InputTypeNameFunction)();
+typedef const AtomString& (*InputTypeNameFunction)();
 typedef Ref<InputType> (*InputTypeFactoryFunction)(HTMLInputElement&);
-typedef HashMap<AtomicString, InputTypeFactoryFunction, ASCIICaseInsensitiveHash> InputTypeFactoryMap;
+typedef HashMap<AtomString, InputTypeFactoryFunction, ASCIICaseInsensitiveHash> InputTypeFactoryMap;
 
 template<class T>
 static Ref<InputType> createInputType(HTMLInputElement& element)
 {
     return adoptRef(*new T(element));
@@ -147,11 +147,11 @@
             map.add(inputType.nameFunction(), inputType.factoryFunction);
     }
     return map;
 }
 
-Ref<InputType> InputType::create(HTMLInputElement& element, const AtomicString& typeName)
+Ref<InputType> InputType::create(HTMLInputElement& element, const AtomString& typeName)
 {
     if (!typeName.isEmpty()) {
         static const auto factoryMap = makeNeverDestroyed(createInputTypeFactoryMap());
         if (auto factory = factoryMap.get().get(typeName))
             return factory(element);
@@ -451,12 +451,13 @@
 
 void InputType::handleDOMActivateEvent(Event&)
 {
 }
 
-void InputType::handleKeydownEvent(KeyboardEvent&)
+auto InputType::handleKeydownEvent(KeyboardEvent&) -> ShouldCallBaseEventHandler
 {
+    return ShouldCallBaseEventHandler::Yes;
 }
 
 void InputType::handleKeypressEvent(KeyboardEvent&)
 {
 }
@@ -794,10 +795,15 @@
 bool InputType::isImageButton() const
 {
     return false;
 }
 
+bool InputType::isInteractiveContent() const
+{
+    return true;
+}
+
 bool InputType::supportLabels() const
 {
     return true;
 }
 
