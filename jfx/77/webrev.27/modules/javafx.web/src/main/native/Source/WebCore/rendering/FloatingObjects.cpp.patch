diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/FloatingObjects.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/FloatingObjects.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/FloatingObjects.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/FloatingObjects.cpp
@@ -73,24 +73,24 @@
 {
 }
 
 std::unique_ptr<FloatingObject> FloatingObject::create(RenderBox& renderer)
 {
-    auto object = std::make_unique<FloatingObject>(renderer);
+    auto object = makeUnique<FloatingObject>(renderer);
     object->setShouldPaint(!renderer.hasSelfPaintingLayer()); // If a layer exists, the float will paint itself. Otherwise someone else will.
     object->setIsDescendant(true);
     return object;
 }
 
 std::unique_ptr<FloatingObject> FloatingObject::copyToNewContainer(LayoutSize offset, bool shouldPaint, bool isDescendant) const
 {
-    return std::make_unique<FloatingObject>(renderer(), type(), LayoutRect(frameRect().location() - offset, frameRect().size()), marginOffset(), shouldPaint, isDescendant);
+    return makeUnique<FloatingObject>(renderer(), type(), LayoutRect(frameRect().location() - offset, frameRect().size()), marginOffset(), shouldPaint, isDescendant);
 }
 
 std::unique_ptr<FloatingObject> FloatingObject::cloneForNewParent() const
 {
-    auto cloneObject = std::make_unique<FloatingObject>(renderer(), type(), m_frameRect, m_marginOffset, m_shouldPaint, m_isDescendant);
+    auto cloneObject = makeUnique<FloatingObject>(renderer(), type(), m_frameRect, m_marginOffset, m_shouldPaint, m_isDescendant);
     cloneObject->m_paginationStrut = m_paginationStrut;
     cloneObject->m_isPlaced = m_isPlaced;
     return cloneObject;
 }
 
@@ -370,11 +370,11 @@
 {
     ASSERT(!m_placedFloatsTree);
     if (m_set.isEmpty())
         return;
 
-    m_placedFloatsTree = std::make_unique<FloatingObjectTree>();
+    m_placedFloatsTree = makeUnique<FloatingObjectTree>();
     for (auto it = m_set.begin(), end = m_set.end(); it != end; ++it) {
         FloatingObject* floatingObject = it->get();
         if (floatingObject->isPlaced())
             m_placedFloatsTree->add(intervalForFloatingObject(floatingObject));
     }
