diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/java/ImageBufferJava.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/java/ImageBufferJava.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/java/ImageBufferJava.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/java/ImageBufferJava.cpp
@@ -401,55 +401,48 @@
     }
 
     m_data.update();
 }
 
-void ImageBuffer::drawConsuming(std::unique_ptr<ImageBuffer> imageBuffer, GraphicsContext& destContext, const FloatRect& destRect, const FloatRect& srcRect, CompositeOperator op, BlendMode blendMode)
+void ImageBuffer::drawConsuming(std::unique_ptr<ImageBuffer> imageBuffer, GraphicsContext& destContext, const FloatRect& destRect, const FloatRect& srcRect, const ImagePaintingOptions& options)
 {
-    imageBuffer->draw(destContext, destRect, srcRect, op, blendMode);
+    imageBuffer->draw(destContext, destRect, srcRect, options);
 }
 
 void ImageBuffer::draw(
     GraphicsContext& context,
     const FloatRect& destRect,
     const FloatRect& srcRect,
-    CompositeOperator op,
-    BlendMode bm)
+    const ImagePaintingOptions& options)
 {
     RefPtr<Image> imageCopy = copyImage();
     context.drawImage(
         *imageCopy,
         destRect,
         srcRect,
-        ImagePaintingOptions(
-            op,
-            bm,
-            DecodingMode::Synchronous,
-            DoNotRespectImageOrientation)
+        options
         );
 }
 
 void ImageBuffer::drawPattern(
     GraphicsContext& context,
     const FloatRect& destRect,
     const FloatRect& srcRect,
     const AffineTransform& patternTransform,
     const FloatPoint& phase,
     const FloatSize& spacing,
-    CompositeOperator op,
-    BlendMode bm) // todo tav new param
+    const ImagePaintingOptions& options) // todo tav new param
 {
     RefPtr<Image> imageCopy = copyImage();
     imageCopy->drawPattern(
         context,
         destRect,
         srcRect,
         patternTransform,
         phase,
         spacing,
-        op,
-        bm);
+        options);
 }
 
 RefPtr<Image> ImageBuffer::sinkIntoImage(std::unique_ptr<ImageBuffer> imageBuffer, PreserveResolution preserveResolution)
 {
     return imageBuffer->copyImage(DontCopyBackingStore, preserveResolution);
