diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/cocoa/MainThreadCocoa.mm b/modules/javafx.web/src/main/native/Source/WTF/wtf/cocoa/MainThreadCocoa.mm
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/cocoa/MainThreadCocoa.mm
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/cocoa/MainThreadCocoa.mm
@@ -138,10 +138,24 @@
 
     ASSERT(mainThreadNSThread);
     [staticMainThreadCaller performSelector:@selector(call) onThread:mainThreadNSThread withObject:nil waitUntilDone:NO];
 }
 
+void dispatchAsyncOnMainThreadWithWebThreadLockIfNeeded(void (^block)())
+{
+#if USE(WEB_THREAD)
+    if (WebCoreWebThreadIsEnabled && WebCoreWebThreadIsEnabled()) {
+        dispatch_async(dispatch_get_main_queue(), ^{
+            WebCoreWebThreadLock();
+            block();
+        });
+        return;
+    }
+#endif
+    dispatch_async(dispatch_get_main_queue(), block);
+}
+
 void callOnWebThreadOrDispatchAsyncOnMainThread(void (^block)())
 {
 #if USE(WEB_THREAD)
     if (WebCoreWebThreadIsEnabled && WebCoreWebThreadIsEnabled()) {
         WebCoreWebThreadRun(block);
@@ -165,10 +179,15 @@
 bool isMainThreadIfInitialized()
 {
     return isMainThread();
 }
 
+bool isMainThreadInitialized()
+{
+    return true;
+}
+
 bool isUIThread()
 {
     return pthread_main_np();
 }
 
@@ -223,8 +242,13 @@
     if (mainThreadEstablishedAsPthreadMain)
         return pthread_main_np();
     return pthread_equal(pthread_self(), mainThreadPthread);
 }
 
+bool isMainThreadInitialized()
+{
+    return mainThreadEstablishedAsPthreadMain || mainThreadPthread;
+}
+
 #endif // USE(WEB_THREAD)
 
 } // namespace WTF
