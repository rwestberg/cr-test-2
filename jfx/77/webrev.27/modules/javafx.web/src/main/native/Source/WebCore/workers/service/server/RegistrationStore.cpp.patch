diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/RegistrationStore.cpp b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/RegistrationStore.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/RegistrationStore.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/RegistrationStore.cpp
@@ -48,55 +48,86 @@
     if (m_databasePushTimer.isActive())
         return;
     m_databasePushTimer.startOneShot(0_s);
 }
 
-void RegistrationStore::pushChangesToDatabase(WTF::CompletionHandler<void()>&& completionHandler)
+void RegistrationStore::pushChangesToDatabase(CompletionHandler<void()>&& completionHandler)
 {
-    Vector<ServiceWorkerContextData> changesToPush;
-    changesToPush.reserveInitialCapacity(m_updatedRegistrations.size());
-    for (auto& value : m_updatedRegistrations.values())
-        changesToPush.uncheckedAppend(WTFMove(value));
+    if (m_isSuspended) {
+        m_needsPushingChanges = true;
+        return;
+    }
 
+    m_database->pushChanges(m_updatedRegistrations, WTFMove(completionHandler));
     m_updatedRegistrations.clear();
-    m_database->pushChanges(WTFMove(changesToPush), WTFMove(completionHandler));
 }
 
-void RegistrationStore::clearAll(WTF::CompletionHandler<void()>&& completionHandler)
+void RegistrationStore::clearAll(CompletionHandler<void()>&& completionHandler)
 {
+    m_needsPushingChanges = false;
     m_updatedRegistrations.clear();
     m_databasePushTimer.stop();
     m_database->clearAll(WTFMove(completionHandler));
 }
 
-void RegistrationStore::flushChanges(WTF::CompletionHandler<void()>&& completionHandler)
+void RegistrationStore::flushChanges(CompletionHandler<void()>&& completionHandler)
 {
     if (m_databasePushTimer.isActive()) {
         pushChangesToDatabase(WTFMove(completionHandler));
         m_databasePushTimer.stop();
         return;
     }
     completionHandler();
 }
 
+void RegistrationStore::startSuspension(CompletionHandler<void()>&& completionHandler)
+{
+    m_isSuspended = true;
+    closeDatabase(WTFMove(completionHandler));
+}
+
+void RegistrationStore::closeDatabase(CompletionHandler<void()>&& completionHandler)
+{
+    m_database->close(WTFMove(completionHandler));
+}
+
+void RegistrationStore::endSuspension()
+{
+    m_isSuspended = false;
+    if (m_needsPushingChanges)
+        scheduleDatabasePushIfNecessary();
+}
+
 void RegistrationStore::updateRegistration(const ServiceWorkerContextData& data)
 {
+    ASSERT(isMainThread());
+    ASSERT(!data.registration.key.isEmpty());
+    if (data.registration.key.isEmpty())
+        return;
+
     m_updatedRegistrations.set(data.registration.key, data);
     scheduleDatabasePushIfNecessary();
 }
 
-void RegistrationStore::removeRegistration(SWServerRegistration& registration)
+void RegistrationStore::removeRegistration(const ServiceWorkerRegistrationKey& key)
 {
-    ServiceWorkerContextData contextData;
-    contextData.registration.key = registration.key();
-    m_updatedRegistrations.set(registration.key(), WTFMove(contextData));
+    ASSERT(isMainThread());
+    ASSERT(!key.isEmpty());
+    if (key.isEmpty())
+        return;
+
+    m_updatedRegistrations.set(key, WTF::nullopt);
     scheduleDatabasePushIfNecessary();
 }
 
-void RegistrationStore::addRegistrationFromDatabase(ServiceWorkerContextData&& context)
+void RegistrationStore::addRegistrationFromDatabase(ServiceWorkerContextData&& data)
 {
-    m_server.addRegistrationFromStore(WTFMove(context));
+    ASSERT(!data.registration.key.isEmpty());
+    if (data.registration.key.isEmpty())
+        return;
+
+    m_server.addRegistrationFromStore(WTFMove(data));
 }
 
 void RegistrationStore::databaseFailedToOpen()
 {
     m_server.registrationStoreDatabaseFailedToOpen();
