diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/tools/VMInspector.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/tools/VMInspector.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/tools/VMInspector.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/tools/VMInspector.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -372,11 +372,11 @@
     CodeBlock* codeBlock = callFrame->codeBlock();
     if (!codeBlock) {
         dataLog("Dumping host frame registers not supported.\n");
         return;
     }
-    VM& vm = *codeBlock->vm();
+    VM& vm = codeBlock->vm();
     auto valueAsString = [&] (JSValue v) -> CString {
         if (!v.isCell() || VMInspector::isValidCell(&vm.heap, reinterpret_cast<JSCell*>(JSValue::encode(v))))
             return toCString(v);
         return "";
     };
@@ -495,11 +495,11 @@
     unsigned& m_indentation;
 };
 
 void VMInspector::dumpCellMemoryToStream(JSCell* cell, PrintStream& out)
 {
-    VM& vm = *cell->vm();
+    VM& vm = cell->vm();
     StructureID structureID = cell->structureID();
     Structure* structure = cell->structure(vm);
     IndexingType indexingTypeAndMisc = cell->indexingTypeAndMisc();
     IndexingType indexingType = structure->indexingType();
     IndexingType indexingMode = structure->indexingMode();
@@ -624,6 +624,19 @@
         INDENT dumpSlot(slots, slotIndex);
 
 #undef INDENT
 }
 
+void VMInspector::dumpSubspaceHashes(VM* vm)
+{
+    unsigned count = 0;
+    vm->heap.objectSpace().forEachSubspace([&] (const Subspace& subspace) -> IterationStatus {
+        const char* name = subspace.name();
+        unsigned hash = StringHasher::computeHash(name);
+        void* hashAsPtr = reinterpret_cast<void*>(static_cast<uintptr_t>(hash));
+        dataLogLn("    [", count++, "] ", name, " Hash:", RawPointer(hashAsPtr));
+        return IterationStatus::Continue;
+    });
+    dataLogLn();
+}
+
 } // namespace JSC
