diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IntlDateTimeFormat.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IntlDateTimeFormat.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IntlDateTimeFormat.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IntlDateTimeFormat.cpp
@@ -1,8 +1,8 @@
 /*
  * Copyright (C) 2015 Andy VanWagoner (andy@vanwagoner.family)
- * Copyright (C) 2016-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -314,11 +314,11 @@
     // Defaults is always "date".
     if (needDefaults) {
         // a. For each of the property names "year", "month", "day":
         // i. Let status be CreateDatePropertyOrThrow(options, prop, "numeric").
         // ii. ReturnIfAbrupt(status).
-        JSString* numeric = jsNontrivialString(&exec, "numeric"_s);
+        JSString* numeric = jsNontrivialString(vm, "numeric"_s);
 
         options->putDirect(vm, vm.propertyNames->year, numeric);
         RETURN_IF_EXCEPTION(scope, nullptr);
 
         options->putDirect(vm, vm.propertyNames->month, numeric);
@@ -631,11 +631,11 @@
 
     String skeleton = skeletonBuilder.toString();
     StringView skeletonView(skeleton);
     Vector<UChar, 32> patternBuffer(32);
     status = U_ZERO_ERROR;
-    auto patternLength = udatpg_getBestPattern(generator, skeletonView.upconvertedCharacters(), skeletonView.length(), patternBuffer.data(), patternBuffer.size(), &status);
+    auto patternLength = udatpg_getBestPatternWithOptions(generator, skeletonView.upconvertedCharacters(), skeletonView.length(), UDATPG_MATCH_HOUR_FIELD_LENGTH, patternBuffer.data(), patternBuffer.size(), &status);
     if (status == U_BUFFER_OVERFLOW_ERROR) {
         status = U_ZERO_ERROR;
         patternBuffer.grow(patternLength);
         udatpg_getBestPattern(generator, skeletonView.upconvertedCharacters(), skeletonView.length(), patternBuffer.data(), patternLength, &status);
     }
@@ -846,46 +846,46 @@
         initializeDateTimeFormat(exec, jsUndefined(), jsUndefined());
         scope.assertNoException();
     }
 
     JSObject* options = constructEmptyObject(&exec);
-    options->putDirect(vm, vm.propertyNames->locale, jsNontrivialString(&exec, m_locale));
-    options->putDirect(vm, vm.propertyNames->calendar, jsNontrivialString(&exec, m_calendar));
-    options->putDirect(vm, vm.propertyNames->numberingSystem, jsNontrivialString(&exec, m_numberingSystem));
-    options->putDirect(vm, vm.propertyNames->timeZone, jsNontrivialString(&exec, m_timeZone));
+    options->putDirect(vm, vm.propertyNames->locale, jsNontrivialString(vm, m_locale));
+    options->putDirect(vm, vm.propertyNames->calendar, jsNontrivialString(vm, m_calendar));
+    options->putDirect(vm, vm.propertyNames->numberingSystem, jsNontrivialString(vm, m_numberingSystem));
+    options->putDirect(vm, vm.propertyNames->timeZone, jsNontrivialString(vm, m_timeZone));
 
     if (m_weekday != Weekday::None)
-        options->putDirect(vm, vm.propertyNames->weekday, jsNontrivialString(&exec, weekdayString(m_weekday)));
+        options->putDirect(vm, vm.propertyNames->weekday, jsNontrivialString(vm, weekdayString(m_weekday)));
 
     if (m_era != Era::None)
-        options->putDirect(vm, vm.propertyNames->era, jsNontrivialString(&exec, eraString(m_era)));
+        options->putDirect(vm, vm.propertyNames->era, jsNontrivialString(vm, eraString(m_era)));
 
     if (m_year != Year::None)
-        options->putDirect(vm, vm.propertyNames->year, jsNontrivialString(&exec, yearString(m_year)));
+        options->putDirect(vm, vm.propertyNames->year, jsNontrivialString(vm, yearString(m_year)));
 
     if (m_month != Month::None)
-        options->putDirect(vm, vm.propertyNames->month, jsNontrivialString(&exec, monthString(m_month)));
+        options->putDirect(vm, vm.propertyNames->month, jsNontrivialString(vm, monthString(m_month)));
 
     if (m_day != Day::None)
-        options->putDirect(vm, vm.propertyNames->day, jsNontrivialString(&exec, dayString(m_day)));
+        options->putDirect(vm, vm.propertyNames->day, jsNontrivialString(vm, dayString(m_day)));
 
     if (m_hour != Hour::None)
-        options->putDirect(vm, vm.propertyNames->hour, jsNontrivialString(&exec, hourString(m_hour)));
+        options->putDirect(vm, vm.propertyNames->hour, jsNontrivialString(vm, hourString(m_hour)));
 
     if (!m_hourCycle.isNull()) {
-        options->putDirect(vm, vm.propertyNames->hourCycle, jsNontrivialString(&exec, m_hourCycle));
+        options->putDirect(vm, vm.propertyNames->hourCycle, jsNontrivialString(vm, m_hourCycle));
         options->putDirect(vm, vm.propertyNames->hour12, jsBoolean(m_hourCycle == "h11" || m_hourCycle == "h12"));
     }
 
     if (m_minute != Minute::None)
-        options->putDirect(vm, vm.propertyNames->minute, jsNontrivialString(&exec, minuteString(m_minute)));
+        options->putDirect(vm, vm.propertyNames->minute, jsNontrivialString(vm, minuteString(m_minute)));
 
     if (m_second != Second::None)
-        options->putDirect(vm, vm.propertyNames->second, jsNontrivialString(&exec, secondString(m_second)));
+        options->putDirect(vm, vm.propertyNames->second, jsNontrivialString(vm, secondString(m_second)));
 
     if (m_timeZoneName != TimeZoneName::None)
-        options->putDirect(vm, vm.propertyNames->timeZoneName, jsNontrivialString(&exec, timeZoneNameString(m_timeZoneName)));
+        options->putDirect(vm, vm.propertyNames->timeZoneName, jsNontrivialString(vm, timeZoneNameString(m_timeZoneName)));
 
     return options;
 }
 
 JSValue IntlDateTimeFormat::format(ExecState& exec, double value)
@@ -913,11 +913,11 @@
         udat_format(m_dateFormat.get(), value, result.data(), resultLength, nullptr, &status);
     }
     if (U_FAILURE(status))
         return throwTypeError(&exec, scope, "failed to format date value"_s);
 
-    return jsString(&exec, String(result.data(), resultLength));
+    return jsString(vm, String(result.data(), resultLength));
 }
 
 #if JSC_ICU_HAS_UFIELDPOSITER
 ASCIILiteral IntlDateTimeFormat::partTypeString(UDateFormatField field)
 {
@@ -975,13 +975,14 @@
     case UDAT_RELATED_YEAR_FIELD:
     case UDAT_TIME_SEPARATOR_FIELD:
 #if U_ICU_VERSION_MAJOR_NUM < 58 || !defined(U_HIDE_DEPRECATED_API)
     case UDAT_FIELD_COUNT:
 #endif
+    // Any newer additions to the UDateFormatField enum should just be considered an "unknown" part.
+    default:
         return "unknown"_s;
     }
-    // Any newer additions to the UDateFormatField enum should just be considered an "unknown" part.
     return "unknown"_s;
 }
 
 
 JSValue IntlDateTimeFormat::formatToParts(ExecState& exec, double value)
@@ -1015,34 +1016,34 @@
     JSArray* parts = JSArray::tryCreate(vm, globalObject->arrayStructureForIndexingTypeDuringAllocation(ArrayWithContiguous), 0);
     if (!parts)
         return throwOutOfMemoryError(&exec, scope);
 
     auto resultString = String(result.data(), resultLength);
-    auto typePropertyName = Identifier::fromString(&vm, "type");
-    auto literalString = jsString(&exec, "literal"_s);
+    auto typePropertyName = Identifier::fromString(vm, "type");
+    auto literalString = jsString(vm, "literal"_s);
 
     int32_t previousEndIndex = 0;
     int32_t beginIndex = 0;
     int32_t endIndex = 0;
     while (previousEndIndex < resultLength) {
         auto fieldType = ufieldpositer_next(fields.get(), &beginIndex, &endIndex);
         if (fieldType < 0)
             beginIndex = endIndex = resultLength;
 
         if (previousEndIndex < beginIndex) {
-            auto value = jsString(&exec, resultString.substring(previousEndIndex, beginIndex - previousEndIndex));
+            auto value = jsString(vm, resultString.substring(previousEndIndex, beginIndex - previousEndIndex));
             JSObject* part = constructEmptyObject(&exec);
             part->putDirect(vm, typePropertyName, literalString);
             part->putDirect(vm, vm.propertyNames->value, value);
             parts->push(&exec, part);
             RETURN_IF_EXCEPTION(scope, { });
         }
         previousEndIndex = endIndex;
 
         if (fieldType >= 0) {
-            auto type = jsString(&exec, partTypeString(UDateFormatField(fieldType)));
-            auto value = jsString(&exec, resultString.substring(beginIndex, endIndex - beginIndex));
+            auto type = jsString(vm, partTypeString(UDateFormatField(fieldType)));
+            auto value = jsString(vm, resultString.substring(beginIndex, endIndex - beginIndex));
             JSObject* part = constructEmptyObject(&exec);
             part->putDirect(vm, typePropertyName, type);
             part->putDirect(vm, vm.propertyNames->value, value);
             parts->push(&exec, part);
             RETURN_IF_EXCEPTION(scope, { });
