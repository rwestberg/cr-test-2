diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/ProgressEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/ProgressEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/ProgressEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/ProgressEvent.h
@@ -29,22 +29,22 @@
 
 namespace WebCore {
 
 class ProgressEvent : public Event {
 public:
-    static Ref<ProgressEvent> create(const AtomicString& type, bool lengthComputable, unsigned long long loaded, unsigned long long total)
+    static Ref<ProgressEvent> create(const AtomString& type, bool lengthComputable, unsigned long long loaded, unsigned long long total)
     {
         return adoptRef(*new ProgressEvent(type, lengthComputable, loaded, total));
     }
 
     struct Init : EventInit {
         bool lengthComputable { false };
         unsigned long long loaded { 0 };
         unsigned long long total { 0 };
     };
 
-    static Ref<ProgressEvent> create(const AtomicString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
+    static Ref<ProgressEvent> create(const AtomString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
     {
         return adoptRef(*new ProgressEvent(type, initializer, isTrusted));
     }
 
     bool lengthComputable() const { return m_lengthComputable; }
@@ -52,12 +52,12 @@
     unsigned long long total() const { return m_total; }
 
     EventInterface eventInterface() const override;
 
 protected:
-    ProgressEvent(const AtomicString& type, bool lengthComputable, unsigned long long loaded, unsigned long long total);
-    ProgressEvent(const AtomicString&, const Init&, IsTrusted);
+    ProgressEvent(const AtomString& type, bool lengthComputable, unsigned long long loaded, unsigned long long total);
+    ProgressEvent(const AtomString&, const Init&, IsTrusted);
 
 private:
     bool m_lengthComputable;
     unsigned long long m_loaded;
     unsigned long long m_total;
