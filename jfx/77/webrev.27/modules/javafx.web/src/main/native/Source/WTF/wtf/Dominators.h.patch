diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/Dominators.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/Dominators.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/Dominators.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/Dominators.h
@@ -36,10 +36,11 @@
 // that regard this code is kind of specialized for the various JSC compilers, but you could use it
 // for non-compiler things if you are OK with referring to your "nodes" as "blocks".
 
 template<typename Graph>
 class Dominators {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     using List = typename Graph::List;
 
     Dominators(Graph& graph, bool selfCheck = false)
         : m_graph(graph)
@@ -306,10 +307,11 @@
     // walking the dominator tree and computing pre and post numbers. We then use the range inclusion
     // check trick that was first discovered by Paul F. Dietz in 1982 in "Maintaining order in a linked
     // list" (see http://dl.acm.org/citation.cfm?id=802184).
 
     class LengauerTarjan {
+        WTF_MAKE_FAST_ALLOCATED;
     public:
         LengauerTarjan(Graph& graph)
             : m_graph(graph)
             , m_data(graph.template newMap<BlockData>())
         {
@@ -473,10 +475,12 @@
                 ancestorOfBlock = m_data[ancestorOfBlock].ancestor;
             }
         }
 
         struct BlockData {
+            WTF_MAKE_STRUCT_FAST_ALLOCATED;
+
             BlockData()
                 : parent(nullptr)
                 , preNumber(UINT_MAX)
                 , semiNumber(UINT_MAX)
                 , ancestor(nullptr)
@@ -498,10 +502,11 @@
         typename Graph::template Map<BlockData> m_data;
         Vector<typename Graph::Node> m_blockByPreNumber;
     };
 
     class NaiveDominators {
+        WTF_MAKE_FAST_ALLOCATED;
     public:
         NaiveDominators(Graph& graph)
             : m_graph(graph)
         {
             // This implements a naive dominator solver.
@@ -603,10 +608,12 @@
         Vector<FastBitVector> m_results; // For each block, the bitvector of blocks that dominate it.
         FastBitVector m_scratch; // A temporary bitvector with bit for each block. We recycle this to save new/deletes.
     };
 
     struct ValidationContext {
+        WTF_MAKE_STRUCT_FAST_ALLOCATED;
+
         ValidationContext(Graph& graph, Dominators& dominators)
             : graph(graph)
             , dominators(dominators)
             , naiveDominators(graph)
         {
@@ -667,10 +674,12 @@
         Graph& graph;
         Dominators& dominators;
         NaiveDominators naiveDominators;
 
         struct Error {
+            WTF_MAKE_STRUCT_FAST_ALLOCATED;
+
             typename Graph::Node from;
             typename Graph::Node to;
             const char* message;
         };
 
@@ -724,10 +733,12 @@
                 });
         }
     }
 
     struct BlockData {
+        WTF_MAKE_STRUCT_FAST_ALLOCATED;
+
         BlockData()
             : idomParent(nullptr)
             , preNumber(UINT_MAX)
             , postNumber(UINT_MAX)
         {
