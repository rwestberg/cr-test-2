diff a/modules/javafx.web/src/main/native/Source/WebCore/editing/MarkupAccumulator.cpp b/modules/javafx.web/src/main/native/Source/WebCore/editing/MarkupAccumulator.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/editing/MarkupAccumulator.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/editing/MarkupAccumulator.cpp
@@ -92,11 +92,11 @@
 
     // From https://html.spec.whatwg.org/#serialising-html-fragments:
     // If current node is an area, base, basefont, bgsound, br, col, embed, frame, hr, img,
     // input, keygen, link, meta, param, source, track or wbr element, then continue on to
     // the next child node at this point.
-    static const AtomicStringImpl* const localNames[] = {
+    static const AtomStringImpl* const localNames[] = {
         areaTag->localName().impl(),
         baseTag->localName().impl(),
         basefontTag->localName().impl(),
         bgsoundTag->localName().impl(),
         brTag->localName().impl(),
@@ -148,16 +148,16 @@
     size_t positionAfterLastEntity = 0;
     for (size_t i = 0; i < length; ++i) {
         CharacterType character = text[i];
         uint8_t substitution = character < WTF_ARRAY_LENGTH(entityMap) ? entityMap[character] : static_cast<uint8_t>(EntitySubstitutionNullIndex);
         if (UNLIKELY(substitution != EntitySubstitutionNullIndex) && entitySubstitutionList[substitution].mask & entityMask) {
-            result.append(text + positionAfterLastEntity, i - positionAfterLastEntity);
-            result.append(entitySubstitutionList[substitution].characters, entitySubstitutionList[substitution].length);
+            result.appendCharacters(text + positionAfterLastEntity, i - positionAfterLastEntity);
+            result.appendCharacters(entitySubstitutionList[substitution].characters, entitySubstitutionList[substitution].length);
             positionAfterLastEntity = i + 1;
         }
     }
-    result.append(text + positionAfterLastEntity, length - positionAfterLastEntity);
+    result.appendCharacters(text + positionAfterLastEntity, length - positionAfterLastEntity);
 }
 
 void MarkupAccumulator::appendCharactersReplacingEntities(StringBuilder& result, const String& source, unsigned offset, unsigned length, EntityMask entityMask)
 {
     if (!(offset + length))
@@ -290,23 +290,22 @@
 }
 
 void MarkupAccumulator::appendQuotedURLAttributeValue(StringBuilder& result, const Element& element, const Attribute& attribute)
 {
     ASSERT(element.isURLAttribute(attribute));
-    const String resolvedURLString = resolveURLIfNeeded(element, attribute.value());
+    String resolvedURLString = resolveURLIfNeeded(element, attribute.value());
     UChar quoteChar = '"';
-    String strippedURLString = resolvedURLString.stripWhiteSpace();
-    if (WTF::protocolIsJavaScript(strippedURLString)) {
+    if (WTF::protocolIsJavaScript(resolvedURLString)) {
         // minimal escaping for javascript urls
-        if (strippedURLString.contains('"')) {
-            if (strippedURLString.contains('\''))
-                strippedURLString.replaceWithLiteral('"', "&quot;");
+        if (resolvedURLString.contains('"')) {
+            if (resolvedURLString.contains('\''))
+                resolvedURLString.replaceWithLiteral('"', "&quot;");
             else
                 quoteChar = '\'';
         }
         result.append(quoteChar);
-        result.append(strippedURLString);
+        result.append(resolvedURLString);
         result.append(quoteChar);
         return;
     }
 
     // FIXME: This does not fully match other browsers. Firefox percent-escapes non-ASCII characters for innerHTML.
@@ -316,11 +315,11 @@
 }
 
 bool MarkupAccumulator::shouldAddNamespaceElement(const Element& element)
 {
     // Don't add namespace attribute if it is already defined for this elem.
-    const AtomicString& prefix = element.prefix();
+    const AtomString& prefix = element.prefix();
     if (prefix.isEmpty())
         return !element.hasAttribute(xmlnsAtom());
 
     static NeverDestroyed<String> xmlnsWithColon(MAKE_STATIC_STRING_IMPL("xmlns:"));
     return !element.hasAttribute(xmlnsWithColon.get() + prefix);
@@ -345,11 +344,11 @@
     }
 
     return true;
 }
 
-void MarkupAccumulator::appendNamespace(StringBuilder& result, const AtomicString& prefix, const AtomicString& namespaceURI, Namespaces& namespaces, bool allowEmptyDefaultNS)
+void MarkupAccumulator::appendNamespace(StringBuilder& result, const AtomString& prefix, const AtomString& namespaceURI, Namespaces& namespaces, bool allowEmptyDefaultNS)
 {
     namespaces.checkConsistency();
     if (namespaceURI.isEmpty()) {
         // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-xhtml-syntax.html#xml-fragment-serialization-algorithm
         if (allowEmptyDefaultNS && namespaces.get(emptyAtom().impl())) {
@@ -359,12 +358,12 @@
         }
         return;
     }
 
     // Use emptyAtom()s's impl() for both null and empty strings since the HashMap can't handle 0 as a key
-    AtomicStringImpl* pre = prefix.isEmpty() ? emptyAtom().impl() : prefix.impl();
-    AtomicStringImpl* foundNS = namespaces.get(pre);
+    AtomStringImpl* pre = prefix.isEmpty() ? emptyAtom().impl() : prefix.impl();
+    AtomStringImpl* foundNS = namespaces.get(pre);
     if (foundNS != namespaceURI.impl()) {
         namespaces.set(pre, namespaceURI.impl());
         // Add namespace to prefix pair so we can do constraint checking later.
         if (inXMLFragmentSerialization() && !prefix.isEmpty())
             namespaces.set(namespaceURI.impl(), pre);
@@ -513,64 +512,83 @@
         result.append('/');
     }
     result.append('>');
 }
 
-static inline bool attributeIsInSerializedNamespace(const Attribute& attribute)
-{
-    return attribute.namespaceURI() == XMLNames::xmlNamespaceURI
-        || attribute.namespaceURI() == XLinkNames::xlinkNamespaceURI
-        || attribute.namespaceURI() == XMLNSNames::xmlnsNamespaceURI;
-}
-
 void MarkupAccumulator::generateUniquePrefix(QualifiedName& prefixedName, const Namespaces& namespaces)
 {
     // http://www.w3.org/TR/DOM-Level-3-Core/namespaces-algorithms.html#normalizeDocumentAlgo
     // Find a prefix following the pattern "NS" + index (starting at 1) and make sure this
     // prefix is not declared in the current scope.
     StringBuilder builder;
     do {
         builder.clear();
         builder.appendLiteral("NS");
         builder.appendNumber(++m_prefixLevel);
-        const AtomicString& name = builder.toAtomicString();
+        const AtomString& name = builder.toAtomString();
         if (!namespaces.get(name.impl())) {
             prefixedName.setPrefix(name);
             return;
         }
     } while (true);
 }
 
-void MarkupAccumulator::appendAttribute(StringBuilder& result, const Element& element, const Attribute& attribute, Namespaces* namespaces)
+// https://html.spec.whatwg.org/#attribute's-serialised-name
+static String htmlAttributeSerialization(const Attribute& attribute)
 {
-    bool isSerializingHTML = element.document().isHTMLDocument() && !inXMLFragmentSerialization();
+    if (attribute.namespaceURI().isEmpty())
+        return attribute.name().localName();
 
-    result.append(' ');
+    QualifiedName prefixedName = attribute.name();
+    if (attribute.namespaceURI() == XMLNames::xmlNamespaceURI)
+        prefixedName.setPrefix(xmlAtom());
+    else if (attribute.namespaceURI() == XMLNSNames::xmlnsNamespaceURI) {
+        if (prefixedName.localName() == xmlnsAtom())
+            return xmlnsAtom();
+        prefixedName.setPrefix(xmlnsAtom());
+    } else if (attribute.namespaceURI() == XLinkNames::xlinkNamespaceURI)
+        prefixedName.setPrefix(AtomString("xlink", AtomString::ConstructFromLiteral));
+    return prefixedName.toString();
+}
 
+// https://w3c.github.io/DOM-Parsing/#dfn-xml-serialization-of-the-attributes
+QualifiedName MarkupAccumulator::xmlAttributeSerialization(const Attribute& attribute, Namespaces* namespaces)
+{
     QualifiedName prefixedName = attribute.name();
-    if (isSerializingHTML && !attributeIsInSerializedNamespace(attribute))
-        result.append(attribute.name().localName());
-    else {
-        if (!attribute.namespaceURI().isEmpty()) {
-            if (attribute.namespaceURI() == XMLNames::xmlNamespaceURI) {
-                // Always use xml as prefix if the namespace is the XML namespace.
-                prefixedName.setPrefix(xmlAtom());
-            } else {
-                AtomicStringImpl* foundNS = namespaces && attribute.prefix().impl() ? namespaces->get(attribute.prefix().impl()) : 0;
-                bool prefixIsAlreadyMappedToOtherNS = foundNS && foundNS != attribute.namespaceURI().impl();
-                if (attribute.prefix().isEmpty() || !foundNS || prefixIsAlreadyMappedToOtherNS) {
-                    if (AtomicStringImpl* prefix = namespaces ? namespaces->get(attribute.namespaceURI().impl()) : 0)
-                        prefixedName.setPrefix(AtomicString(prefix));
-                    else {
-                        bool shouldBeDeclaredUsingAppendNamespace = !attribute.prefix().isEmpty() && !foundNS;
-                        if (!shouldBeDeclaredUsingAppendNamespace && attribute.localName() != xmlnsAtom() && namespaces)
-                            generateUniquePrefix(prefixedName, *namespaces);
-                    }
+    if (!attribute.namespaceURI().isEmpty()) {
+        if (attribute.namespaceURI() == XMLNames::xmlNamespaceURI) {
+            // Always use xml as prefix if the namespace is the XML namespace.
+            prefixedName.setPrefix(xmlAtom());
+        } else {
+            AtomStringImpl* foundNS = namespaces && attribute.prefix().impl() ? namespaces->get(attribute.prefix().impl()) : nullptr;
+            bool prefixIsAlreadyMappedToOtherNS = foundNS && foundNS != attribute.namespaceURI().impl();
+            if (attribute.prefix().isEmpty() || !foundNS || prefixIsAlreadyMappedToOtherNS) {
+                if (AtomStringImpl* prefix = namespaces ? namespaces->get(attribute.namespaceURI().impl()) : nullptr)
+                    prefixedName.setPrefix(AtomString(prefix));
+                else {
+                    bool shouldBeDeclaredUsingAppendNamespace = !attribute.prefix().isEmpty() && !foundNS;
+                    if (!shouldBeDeclaredUsingAppendNamespace && attribute.localName() != xmlnsAtom() && namespaces)
+                        generateUniquePrefix(prefixedName, *namespaces);
                 }
             }
         }
-        result.append(prefixedName.toString());
+    }
+    return prefixedName;
+}
+
+void MarkupAccumulator::appendAttribute(StringBuilder& result, const Element& element, const Attribute& attribute, Namespaces* namespaces)
+{
+    bool isSerializingHTML = element.document().isHTMLDocument() && !inXMLFragmentSerialization();
+
+    result.append(' ');
+
+    Optional<QualifiedName> effectiveXMLPrefixedName;
+    if (isSerializingHTML)
+        result.append(htmlAttributeSerialization(attribute));
+    else {
+        effectiveXMLPrefixedName = xmlAttributeSerialization(attribute, namespaces);
+        result.append(effectiveXMLPrefixedName->toString());
     }
 
     result.append('=');
 
     if (element.isURLAttribute(attribute))
@@ -580,11 +598,11 @@
         appendAttributeValue(result, attribute.value(), isSerializingHTML);
         result.append('"');
     }
 
     if (!isSerializingHTML && namespaces && shouldAddNamespaceAttribute(attribute, *namespaces))
-        appendNamespace(result, prefixedName.prefix(), prefixedName.namespaceURI(), *namespaces);
+        appendNamespace(result, effectiveXMLPrefixedName->prefix(), effectiveXMLPrefixedName->namespaceURI(), *namespaces);
 }
 
 void MarkupAccumulator::appendCDATASection(StringBuilder& result, const String& section)
 {
     // FIXME: CDATA content is not escaped, but XMLSerializer (and possibly other callers) should raise an exception if it includes "]]>".
