diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/ShadowRoot.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/ShadowRoot.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/ShadowRoot.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/ShadowRoot.cpp
@@ -56,20 +56,20 @@
 
 ShadowRoot::ShadowRoot(Document& document, ShadowRootMode type)
     : DocumentFragment(document, CreateShadowRoot)
     , TreeScope(*this, document)
     , m_type(type)
-    , m_styleScope(std::make_unique<Style::Scope>(*this))
+    , m_styleScope(makeUnique<Style::Scope>(*this))
 {
 }
 
 
 ShadowRoot::ShadowRoot(Document& document, std::unique_ptr<SlotAssignment>&& slotAssignment)
     : DocumentFragment(document, CreateShadowRoot)
     , TreeScope(*this, document)
     , m_type(ShadowRootMode::UserAgent)
-    , m_styleScope(std::make_unique<Style::Scope>(*this))
+    , m_styleScope(makeUnique<Style::Scope>(*this))
     , m_slotAssignment(WTFMove(slotAssignment))
 {
 }
 
 
@@ -145,11 +145,11 @@
 {
     setDocumentScope(newDocument);
     RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(!parentTreeScope() || &parentTreeScope()->documentScope() == &newDocument);
 
     // Style scopes are document specific.
-    m_styleScope = std::make_unique<Style::Scope>(*this);
+    m_styleScope = makeUnique<Style::Scope>(*this);
     RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(&m_styleScope->document() == &newDocument);
 }
 
 Style::Scope& ShadowRoot::styleScope()
 {
@@ -216,26 +216,26 @@
     if (!m_slotAssignment)
         return nullptr;
     return m_slotAssignment->findAssignedSlot(node, *this);
 }
 
-void ShadowRoot::renameSlotElement(HTMLSlotElement& slot, const AtomicString& oldName, const AtomicString& newName)
+void ShadowRoot::renameSlotElement(HTMLSlotElement& slot, const AtomString& oldName, const AtomString& newName)
 {
     ASSERT(m_slotAssignment);
     return m_slotAssignment->renameSlotElement(slot, oldName, newName, *this);
 }
 
-void ShadowRoot::addSlotElementByName(const AtomicString& name, HTMLSlotElement& slot)
+void ShadowRoot::addSlotElementByName(const AtomString& name, HTMLSlotElement& slot)
 {
     ASSERT(&slot.rootNode() == this);
     if (!m_slotAssignment)
-        m_slotAssignment = std::make_unique<SlotAssignment>();
+        m_slotAssignment = makeUnique<SlotAssignment>();
 
     return m_slotAssignment->addSlotElementByName(name, slot, *this);
 }
 
-void ShadowRoot::removeSlotElementByName(const AtomicString& name, HTMLSlotElement& slot, ContainerNode& oldParentOfRemovedTree)
+void ShadowRoot::removeSlotElementByName(const AtomString& name, HTMLSlotElement& slot, ContainerNode& oldParentOfRemovedTree)
 {
     ASSERT(m_slotAssignment);
     return m_slotAssignment->removeSlotElementByName(name, slot, &oldParentOfRemovedTree, *this);
 }
 
