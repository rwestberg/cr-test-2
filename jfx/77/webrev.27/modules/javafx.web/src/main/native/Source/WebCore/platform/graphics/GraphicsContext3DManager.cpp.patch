diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsContext3DManager.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsContext3DManager.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsContext3DManager.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsContext3DManager.cpp
@@ -33,11 +33,11 @@
 
 #if HAVE(APPLE_GRAPHICS_CONTROL)
 #include <sys/sysctl.h>
 #endif
 
-#if PLATFORM(MAC)
+#if PLATFORM(MAC) && USE(OPENGL)
 #include "SwitchingGPUClient.h"
 #include <OpenGL/OpenGL.h>
 #endif
 
 namespace WebCore {
@@ -132,11 +132,12 @@
 }
 #endif
 
 void GraphicsContext3DManager::updateAllContexts()
 {
-#if PLATFORM(MAC)
+    // FIXME: determine whether to do anything when using ANGLE.
+#if PLATFORM(MAC) && USE(OPENGL)
     for (const auto& context : m_contexts) {
         context->updateCGLContext();
         context->dispatchContextChangedNotification();
     }
 #endif
@@ -170,11 +171,12 @@
     m_contextWindowMap.set(context, window);
 }
 
 void GraphicsContext3DManager::removeContext(GraphicsContext3D* context)
 {
-    ASSERT(m_contexts.contains(context));
+    if (!m_contexts.contains(context))
+        return;
     m_contexts.removeFirst(context);
     m_contextWindowMap.remove(context);
     removeContextRequiringHighPerformance(context);
 
 #if PLATFORM(MAC) && !ENABLE(WEBPROCESS_WINDOWSERVER_BLOCKING)
@@ -204,10 +206,13 @@
     updateHighPerformanceState();
 }
 
 void GraphicsContext3DManager::removeContextRequiringHighPerformance(GraphicsContext3D* context)
 {
+    if (!context)
+        return;
+
     if (!m_contextsRequiringHighPerformance.contains(context))
         return;
 
     LOG(WebGL, "This context (%p) no longer requires the high-performance GPU.", context);
     m_contextsRequiringHighPerformance.remove(context);
@@ -215,11 +220,11 @@
     updateHighPerformanceState();
 }
 
 void GraphicsContext3DManager::updateHighPerformanceState()
 {
-#if PLATFORM(MAC)
+#if PLATFORM(MAC) && USE(OPENGL)
     if (!hasLowAndHighPowerGPUs())
         return;
 
     if (m_contextsRequiringHighPerformance.size()) {
 
@@ -255,11 +260,11 @@
 {
     if (m_contextsRequiringHighPerformance.size())
         return;
 
     m_requestingHighPerformance = false;
-#if PLATFORM(MAC)
+#if PLATFORM(MAC) && USE(OPENGL)
     SwitchingGPUClient::singleton().releaseHighPerformanceGPU();
 #endif
 }
 
 void GraphicsContext3DManager::recycleContextIfNecessary()
