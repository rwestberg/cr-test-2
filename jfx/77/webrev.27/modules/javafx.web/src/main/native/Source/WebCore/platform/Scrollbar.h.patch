diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/Scrollbar.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/Scrollbar.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/Scrollbar.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/Scrollbar.h
@@ -54,11 +54,11 @@
     static int pageStep(int viewWidthOrHeight) { return pageStep(viewWidthOrHeight, viewWidthOrHeight); }
     static float pageStepDelta(int widthOrHeight) { return std::max(std::max(static_cast<float>(widthOrHeight) * Scrollbar::minFractionToStepWhenPaging(), static_cast<float>(widthOrHeight) - Scrollbar::maxOverlapBetweenPages()), 1.0f); }
 
     ScrollableArea& scrollableArea() const { return m_scrollableArea; }
 
-    virtual bool isCustomScrollbar() const { return false; }
+    bool isCustomScrollbar() const { return m_isCustomScrollbar; }
     ScrollbarOrientation orientation() const { return m_orientation; }
 
     int value() const { return lroundf(m_currentPos); }
     float currentPos() const { return m_currentPos; }
     int pressedPos() const { return m_pressedPos; }
@@ -130,11 +130,11 @@
 #endif
 
     bool supportsUpdateOnSecondaryThread() const;
 
 protected:
-    Scrollbar(ScrollableArea&, ScrollbarOrientation, ScrollbarControlSize, ScrollbarTheme* = nullptr);
+    Scrollbar(ScrollableArea&, ScrollbarOrientation, ScrollbarControlSize, ScrollbarTheme* = nullptr, bool isCustomScrollbar = false);
 
     void updateThumb();
     virtual void updateThumbPosition();
     virtual void updateThumbProportion();
 
@@ -163,10 +163,11 @@
     int m_pressedPos { 0 };
     bool m_draggingDocument { false };
     int m_documentDragPos { 0 };
 
     bool m_enabled { true };
+    bool m_isCustomScrollbar { false };
 
     Timer m_scrollTimer;
 
     bool m_suppressInvalidation { false };
 
