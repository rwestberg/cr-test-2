diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/sql/SQLiteDatabase.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/sql/SQLiteDatabase.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/sql/SQLiteDatabase.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/sql/SQLiteDatabase.h
@@ -51,22 +51,23 @@
     friend class SQLiteTransaction;
 public:
     WEBCORE_EXPORT SQLiteDatabase();
     WEBCORE_EXPORT ~SQLiteDatabase();
 
-    WEBCORE_EXPORT bool open(const String& filename, bool forWebSQLDatabase = false);
+    enum class OpenMode { ReadOnly, ReadWrite, ReadWriteCreate };
+    WEBCORE_EXPORT bool open(const String& filename, OpenMode = OpenMode::ReadWriteCreate);
     bool isOpen() const { return m_db; }
     WEBCORE_EXPORT void close();
 
     void updateLastChangesCount();
 
     WEBCORE_EXPORT bool executeCommand(const String&);
     bool returnsAtLeastOneResult(const String&);
 
     WEBCORE_EXPORT bool tableExists(const String&);
     void clearAllTables();
-    int runVacuumCommand();
+    WEBCORE_EXPORT int runVacuumCommand();
     int runIncrementalVacuumCommand();
 
     bool transactionInProgress() const { return m_transactionInProgress; }
 
     // Aborts the current database operation. This is thread safe.
@@ -135,14 +136,17 @@
     WEBCORE_EXPORT void disableThreadingChecks();
 #else
     WEBCORE_EXPORT void disableThreadingChecks() {}
 #endif
 
+    WEBCORE_EXPORT static void setIsDatabaseOpeningForbidden(bool);
+
 private:
     static int authorizerFunction(void*, int, const char*, const char*, const char*, const char*);
 
     void enableAuthorizer(bool enable);
+    void useWALJournalMode();
 
     int pageSize();
 
     void overrideUnauthorizedFunctions();
 
@@ -152,10 +156,12 @@
     bool m_transactionInProgress { false };
 #ifndef NDEBUG
     bool m_sharable { false };
 #endif
 
+    bool m_useWAL { false };
+
     Lock m_authorizerLock;
     RefPtr<DatabaseAuthorizer> m_authorizer;
 
     Lock m_lockingMutex;
     RefPtr<Thread> m_openingThread { nullptr };
