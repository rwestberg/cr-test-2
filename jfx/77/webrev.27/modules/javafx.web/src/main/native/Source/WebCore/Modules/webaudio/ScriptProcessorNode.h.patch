diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/ScriptProcessorNode.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/ScriptProcessorNode.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/ScriptProcessorNode.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/ScriptProcessorNode.h
@@ -43,10 +43,11 @@
 // This basic implementation supports no more than one input and output.
 // The "onaudioprocess" attribute is an event listener which will get called periodically with an AudioProcessingEvent which has
 // AudioBuffers for each input and output.
 
 class ScriptProcessorNode final : public AudioNode {
+    WTF_MAKE_ISO_ALLOCATED(ScriptProcessorNode);
 public:
     // bufferSize must be one of the following values: 256, 512, 1024, 2048, 4096, 8192, 16384.
     // This value controls how frequently the onaudioprocess event handler is called and how many sample-frames need to be processed each call.
     // Lower numbers for bufferSize will result in a lower (better) latency. Higher numbers will be necessary to avoid audio breakup and glitches.
     // The value chosen must carefully balance between latency and audio quality.
@@ -68,12 +69,12 @@
 
     ScriptProcessorNode(AudioContext&, float sampleRate, size_t bufferSize, unsigned numberOfInputChannels, unsigned numberOfOutputChannels);
 
     void fireProcessEvent();
 
-    bool addEventListener(const AtomicString& eventType, Ref<EventListener>&&, const AddEventListenerOptions&) override;
-    bool removeEventListener(const AtomicString& eventType, EventListener&, const ListenerOptions&) override;
+    bool addEventListener(const AtomString& eventType, Ref<EventListener>&&, const AddEventListenerOptions&) override;
+    bool removeEventListener(const AtomString& eventType, EventListener&, const ListenerOptions&) override;
     void removeAllEventListeners() override;
 
     // Double buffering
     unsigned doubleBufferIndex() const { return m_doubleBufferIndex; }
     void swapBuffers() { m_doubleBufferIndex = 1 - m_doubleBufferIndex; }
