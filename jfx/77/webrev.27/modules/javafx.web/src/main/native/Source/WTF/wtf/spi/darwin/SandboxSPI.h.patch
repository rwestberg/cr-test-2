diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/spi/darwin/SandboxSPI.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/spi/darwin/SandboxSPI.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/spi/darwin/SandboxSPI.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/spi/darwin/SandboxSPI.h
@@ -44,13 +44,10 @@
 
 typedef struct {
     char* builtin;
     unsigned char* data;
     size_t size;
-#if PLATFORM(MAC) && __MAC_OS_X_VERSION_MIN_REQUIRED < 101300
-    char* trace;
-#endif
 } *sandbox_profile_t;
 
 typedef struct {
     const char **params;
     size_t size;
@@ -59,12 +56,16 @@
 
 extern const char *const APP_SANDBOX_READ;
 extern const char *const APP_SANDBOX_READ_WRITE;
 extern const enum sandbox_filter_type SANDBOX_CHECK_NO_REPORT;
 
+extern const uint32_t SANDBOX_EXTENSION_USER_INTENT;
+
 char *sandbox_extension_issue_file(const char *extension_class, const char *path, uint32_t flags);
 char *sandbox_extension_issue_generic(const char *extension_class, uint32_t flags);
+char *sandbox_extension_issue_mach_to_process_by_pid(const char *extension_class, const char *name, uint32_t flags, pid_t);
+char *sandbox_extension_issue_file_to_process_by_pid(const char *extension_class, const char *path, uint32_t flags, pid_t);
 int sandbox_check(pid_t, const char *operation, enum sandbox_filter_type, ...);
 int sandbox_check_by_audit_token(audit_token_t, const char *operation, enum sandbox_filter_type, ...);
 int sandbox_container_path_for_pid(pid_t, char *buffer, size_t bufsize);
 int sandbox_extension_release(int64_t extension_handle);
 int sandbox_init_with_parameters(const char *profile, uint64_t flags, const char *const parameters[], char **errorbuf);
