diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/CrossThreadCopier.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/CrossThreadCopier.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/CrossThreadCopier.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/CrossThreadCopier.h
@@ -29,10 +29,11 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include <type_traits>
 #include <wtf/Assertions.h>
 #include <wtf/Forward.h>
 #include <wtf/HashSet.h>
 #include <wtf/RefPtr.h>
 #include <wtf/ThreadSafeRefCounted.h>
@@ -75,13 +76,13 @@
 template<typename T> struct CrossThreadCopierBase<true, false, T> : public CrossThreadCopierPassThrough<T> {
 };
 
 // Classes that have an isolatedCopy() method get a default specialization.
 template<class T> struct CrossThreadCopierBase<false, false, T> {
-    static T copy(const T& value)
+    template<typename U> static auto copy(U&& value)
     {
-        return value.isolatedCopy();
+        return std::forward<U>(value).isolatedCopy();
     }
 };
 
 // Custom copy methods.
 template<typename T> struct CrossThreadCopierBase<false, true, T> {
@@ -142,24 +143,32 @@
             destination.add(CrossThreadCopier<K>::copy(keyValue.key), CrossThreadCopier<V>::copy(keyValue.value));
         return destination;
     }
 };
 
+// Default specialization for pairs of CrossThreadCopyable classes
+template<typename F, typename S> struct CrossThreadCopierBase<false, false, std::pair<F, S> > {
+    typedef std::pair<F, S> Type;
+    static Type copy(const Type& source)
+    {
+        return std::make_pair(CrossThreadCopier<F>::copy(source.first), CrossThreadCopier<S>::copy(source.second));
+    }
+};
+
 // Default specialization for Optional of CrossThreadCopyable class.
 template<typename T> struct CrossThreadCopierBase<false, false, Optional<T>> {
-    typedef Optional<T> Type;
-    static Type copy(const Type& source)
+    template<typename U> static Optional<T> copy(U&& source)
     {
         if (!source)
             return WTF::nullopt;
-        return CrossThreadCopier<T>::copy(*source);
+        return CrossThreadCopier<T>::copy(std::forward<U>(source).value());
     }
 };
 
-template<typename T> T crossThreadCopy(const T& source)
+template<typename T> auto crossThreadCopy(T&& source)
 {
-    return CrossThreadCopier<T>::copy(source);
+    return CrossThreadCopier<std::remove_cv_t<std::remove_reference_t<T>>>::copy(std::forward<T>(source));
 }
 
 } // namespace WTF
 
 using WTF::CrossThreadCopierBaseHelper;
