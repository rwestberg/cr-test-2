diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheHost.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheHost.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheHost.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheHost.cpp
@@ -28,10 +28,11 @@
 
 #include "ApplicationCache.h"
 #include "ApplicationCacheGroup.h"
 #include "ApplicationCacheResource.h"
 #include "ContentSecurityPolicy.h"
+#include "CustomHeaderFields.h"
 #include "DocumentLoader.h"
 #include "DOMApplicationCache.h"
 #include "EventNames.h"
 #include "Frame.h"
 #include "FrameLoader.h"
@@ -294,14 +295,14 @@
 }
 
 void ApplicationCacheHost::setDOMApplicationCache(DOMApplicationCache* domApplicationCache)
 {
     ASSERT(!m_domApplicationCache || !domApplicationCache);
-    m_domApplicationCache = domApplicationCache;
+    m_domApplicationCache = makeWeakPtr(domApplicationCache);
 }
 
-void ApplicationCacheHost::notifyDOMApplicationCache(const AtomicString& eventType, int total, int done)
+void ApplicationCacheHost::notifyDOMApplicationCache(const AtomString& eventType, int total, int done)
 {
     if (eventType != eventNames().progressEvent)
         InspectorInstrumentation::updateApplicationCacheStatus(m_documentLoader.frame());
 
     if (m_defersEvents) {
@@ -368,21 +369,22 @@
 
     // FIXME: Add "Creation Time" and "Update Time" to Application Caches.
     return { cache->manifestResource()->url(), 0, 0, cache->estimatedSizeInStorage() };
 }
 
-static Ref<Event> createApplicationCacheEvent(const AtomicString& eventType, int total, int done)
+static Ref<Event> createApplicationCacheEvent(const AtomString& eventType, int total, int done)
 {
     if (eventType == eventNames().progressEvent)
         return ProgressEvent::create(eventType, true, done, total);
     return Event::create(eventType, Event::CanBubble::No, Event::IsCancelable::No);
 }
 
-void ApplicationCacheHost::dispatchDOMEvent(const AtomicString& eventType, int total, int done)
+void ApplicationCacheHost::dispatchDOMEvent(const AtomString& eventType, int total, int done)
 {
-    if (!m_domApplicationCache)
+    if (!m_domApplicationCache || !m_domApplicationCache->frame())
         return;
+
     m_domApplicationCache->dispatchEvent(createApplicationCacheEvent(eventType, total, done));
 }
 
 void ApplicationCacheHost::setCandidateApplicationCacheGroup(ApplicationCacheGroup* group)
 {
