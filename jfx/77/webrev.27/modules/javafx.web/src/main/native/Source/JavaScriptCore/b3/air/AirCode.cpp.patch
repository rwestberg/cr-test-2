diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirCode.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirCode.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirCode.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirCode.cpp
@@ -77,12 +77,13 @@
                 [&] (Reg reg) {
                     if (calleeSave.get(reg))
                         calleeSaveRegs.append(reg);
                 });
             if (Options::airRandomizeRegs()) {
-                shuffleVector(volatileRegs, [&] (unsigned limit) { return m_weakRandom.getUint32(limit); });
-                shuffleVector(calleeSaveRegs, [&] (unsigned limit) { return m_weakRandom.getUint32(limit); });
+                WeakRandom random(Options::airRandomizeRegsSeed() ? Options::airRandomizeRegsSeed() : m_weakRandom.getUint32());
+                shuffleVector(volatileRegs, [&] (unsigned limit) { return random.getUint32(limit); });
+                shuffleVector(calleeSaveRegs, [&] (unsigned limit) { return random.getUint32(limit); });
             }
             Vector<Reg> result;
             result.appendVector(volatileRegs);
             result.appendVector(calleeSaveRegs);
             setRegsInPriorityOrder(bank, result);
@@ -176,11 +177,11 @@
 
 CCallSpecial* Code::cCallSpecial()
 {
     if (!m_cCallSpecial) {
         m_cCallSpecial = static_cast<CCallSpecial*>(
-            addSpecial(std::make_unique<CCallSpecial>()));
+            addSpecial(makeUnique<CCallSpecial>()));
     }
 
     return m_cCallSpecial;
 }
 
