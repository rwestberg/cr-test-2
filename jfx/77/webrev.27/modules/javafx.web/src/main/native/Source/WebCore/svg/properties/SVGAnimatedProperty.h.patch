diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGAnimatedProperty.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGAnimatedProperty.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGAnimatedProperty.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGAnimatedProperty.h
@@ -1,93 +1,77 @@
 /*
- * Copyright (C) Research In Motion Limited 2010. All rights reserved.
- * Copyright (C) 2013 Samsung Electronics. All rights reserved.
- * Copyright (C) 2016-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc.  All rights reserved.
  *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Library General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
  *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Library General Public License for more details.
- *
- * You should have received a copy of the GNU Library General Public License
- * along with this library; see the file COPYING.LIB.  If not, write to
- * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
- * Boston, MA 02110-1301, USA.
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
-#include "QualifiedName.h"
-#include "SVGAnimatedPropertyDescription.h"
-#include "SVGAnimatedPropertyType.h"
+#include "SVGPropertyOwner.h"
+#include <wtf/Optional.h>
 #include <wtf/RefCounted.h>
+#include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 class SVGElement;
-class SVGProperty;
 
-class SVGAnimatedProperty : public RefCounted<SVGAnimatedProperty> {
+class SVGAnimatedProperty : public RefCounted<SVGAnimatedProperty>, public SVGPropertyOwner {
 public:
-    virtual ~SVGAnimatedProperty();
-    virtual bool isAnimating() const { return false; }
-    virtual bool isAnimatedListTearOff() const { return false; }
-
-    SVGElement* contextElement() const { return m_contextElement.get(); }
-    const QualifiedName& attributeName() const { return m_attributeName; }
-    AnimatedPropertyType animatedPropertyType() const { return m_animatedPropertyType; }
-    bool isReadOnly() const { return m_isReadOnly; }
-    void setIsReadOnly() { m_isReadOnly = true; }
+    virtual ~SVGAnimatedProperty() = default;
 
-    void commitChange();
+    // Manage the relationship with the owner.
+    bool isAttached() const { return m_contextElement; }
+    void detach() { m_contextElement = nullptr; }
+    SVGElement* contextElement() const { return m_contextElement; }
 
-    template<typename TearOffType, typename PropertyType, AnimatedPropertyType animatedType>
-    static RefPtr<SVGAnimatedProperty> lookupOrCreateAnimatedProperty(SVGElement& element, const QualifiedName& attributeName, const AtomicString& identifier, PropertyType& property, AnimatedPropertyState animatedState)
-    {
-        SVGAnimatedPropertyDescription key(&element, identifier);
+    virtual String baseValAsString() const { return emptyString(); }
+    virtual String animValAsString() const { return emptyString(); }
 
-        auto result = animatedPropertyCache().add(key, nullptr);
-        if (!result.isNewEntry)
-            return result.iterator->value;
+    // Control the synchronization between the attribute and its reflection in baseVal.
+    virtual bool isDirty() const { return false; }
+    virtual void setDirty() { }
+    virtual Optional<String> synchronize() { return WTF::nullopt; }
 
-        auto wrapper = TearOffType::create(&element, attributeName, animatedType, property);
-        if (animatedState == PropertyIsReadOnly)
-            wrapper->setIsReadOnly();
-
-        // Cache the raw pointer but return a RefPtr<>. This will break the cyclic reference
-        // between SVGAnimatedProperty and SVGElement once the property pointer is not needed.
-        result.iterator->value = wrapper.ptr();
-        return static_reference_cast<SVGAnimatedProperty>(wrapper);
-    }
+    // Control the animation life cycle.
+    bool isAnimating() const { return m_isAnimating; }
+    virtual void startAnimation() { m_isAnimating = true; }
+    virtual void stopAnimation() { m_isAnimating = false; }
 
-    static RefPtr<SVGAnimatedProperty> lookupAnimatedProperty(const SVGElement& element, const AtomicString& identifier)
-    {
-        SVGAnimatedPropertyDescription key(const_cast<SVGElement*>(&element), identifier);
-        return animatedPropertyCache().get(key);
-    }
+    // Attach/Detach the animVal of the traget element's property by the instance element's property.
+    virtual void instanceStartAnimation(SVGAnimatedProperty&) { m_isAnimating = true; }
+    virtual void instanceStopAnimation() { m_isAnimating = false; }
 
 protected:
-    SVGAnimatedProperty(SVGElement*, const QualifiedName&, AnimatedPropertyType);
-
-private:
-    // Caching facilities.
-    using Cache = HashMap<SVGAnimatedPropertyDescription, SVGAnimatedProperty*, SVGAnimatedPropertyDescriptionHash, SVGAnimatedPropertyDescriptionHashTraits>;
-    static Cache& animatedPropertyCache()
+    SVGAnimatedProperty(SVGElement* contextElement)
+        : m_contextElement(contextElement)
     {
-        static NeverDestroyed<Cache> cache;
-        return cache;
     }
 
-    RefPtr<SVGElement> m_contextElement;
-    const QualifiedName& m_attributeName;
-    AnimatedPropertyType m_animatedPropertyType;
+    SVGPropertyOwner* owner() const override;
+    void commitPropertyChange(SVGProperty*) override;
 
-protected:
-    bool m_isReadOnly { false };
+    SVGElement* m_contextElement { nullptr };
+    bool m_isAnimating { false };
 };
 
 } // namespace WebCore
+
