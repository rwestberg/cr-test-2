diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/tools/HeapVerifier.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/tools/HeapVerifier.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/tools/HeapVerifier.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/tools/HeapVerifier.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2014-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2014-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -142,16 +142,16 @@
 {
     RELEASE_ASSERT(m_heap->collectionScope());
     CollectionScope scope = currentCycle().scope;
     MonotonicTime gcCycleTimestamp = currentCycle().timestamp;
     dataLog("Verifying heap in [p", getCurrentProcessID(), ", ", Thread::current(), "] vm ",
-        RawPointer(m_heap->vm()), " on ", scope, " GC @ ", gcCycleTimestamp, "\n");
+        RawPointer(&m_heap->vm()), " on ", scope, " GC @ ", gcCycleTimestamp, "\n");
 }
 
 bool HeapVerifier::verifyCellList(Phase phase, CellList& list)
 {
-    VM& vm = *m_heap->vm();
+    VM& vm = m_heap->vm();
     auto& liveCells = list.cells();
 
     bool listNamePrinted = false;
     auto printHeaderIfNeeded = scopedLambda<void()>([&] () {
         if (listNamePrinted)
@@ -220,11 +220,11 @@
     }
 
     if (expectedVM) {
         VM& vm = *expectedVM;
 
-        VM* cellVM = cell->vm();
+        VM* cellVM = &cell->vm();
         if (cellVM != expectedVM) {
             printHeaderAndCell();
             dataLog(" is from a different VM: expected:", RawPointer(expectedVM), " actual:", RawPointer(cellVM), "\n");
             return false;
         }
@@ -253,11 +253,11 @@
             printHeaderAndCell();
             dataLog(" has structure ", RawPointer(structure), " whose structureID is NULL\n");
             return false;
         }
 
-        VM* structureVM = structure->vm();
+        VM* structureVM = &structure->vm();
         if (structureVM != expectedVM) {
             printHeaderAndCell();
             dataLog(" has structure ", RawPointer(structure), " from a different VM: expected:", RawPointer(expectedVM), " actual:", RawPointer(structureVM), "\n");
             return false;
         }
@@ -303,11 +303,11 @@
             printHeaderAndCell();
             dataLog(" has structure ", RawPointer(structure), " whose structure ", RawPointer(structureStructure), " has a NULL structureID\n");
             return false;
         }
 
-        VM* structureStructureVM = structureStructure->vm();
+        VM* structureStructureVM = &structureStructure->vm();
         if (structureStructureVM != expectedVM) {
             printHeaderAndCell();
             dataLog(" has structure ", RawPointer(structure), " whose structure ", RawPointer(structureStructure), " is from a different VM: expected:", RawPointer(expectedVM), " actual:", RawPointer(structureStructureVM), "\n");
             return false;
         }
@@ -328,11 +328,11 @@
         }
 
         CodeBlock* codeBlock = jsDynamicCast<CodeBlock*>(vm, cell);
         if (UNLIKELY(codeBlock)) {
             bool success = true;
-            codeBlock->forEachValueProfile([&](ValueProfile& valueProfile) {
+            codeBlock->forEachValueProfile([&](ValueProfile& valueProfile, bool) {
                 for (unsigned i = 0; i < ValueProfile::totalNumberOfBuckets; ++i) {
                     JSValue value = JSValue::decode(valueProfile.m_buckets[i]);
                     if (!value)
                         continue;
                     if (!value.isCell())
@@ -363,11 +363,11 @@
 }
 
 void HeapVerifier::reportCell(CellProfile& profile, int cycleIndex, HeapVerifier::GCCycle& cycle, CellList& list, const char* prefix)
 {
     HeapCell* cell = profile.cell();
-    VM* vm = m_heap->vm();
+    VM& vm = m_heap->vm();
 
     if (prefix)
         dataLog(prefix);
 
     dataLog("FOUND");
@@ -385,11 +385,11 @@
     if (profile.className())
         dataLog(" [", profile.className(), "]");
 
     if (profile.isLive() && profile.isJSCell()) {
         JSCell* jsCell = profile.jsCell();
-        Structure* structure = jsCell->structure(*vm);
+        Structure* structure = jsCell->structure(vm);
         dataLog(" structure:", RawPointer(structure));
         if (jsCell->isObject()) {
             JSObject* obj = static_cast<JSObject*>(cell);
             Butterfly* butterfly = obj->butterfly();
             void* butterflyBase = butterfly->base(structure);
@@ -397,11 +397,11 @@
             dataLog(" butterfly:", RawPointer(butterfly), " (base:", RawPointer(butterflyBase), ")");
         }
     }
 
     dataLog(" in ", cycle.scope, " GC[", cycleIndex, "] in '", list.name(), "' list in VM ",
-        RawPointer(vm), " recorded at time ", profile.timestamp(), "\n");
+        RawPointer(&vm), " recorded at time ", profile.timestamp(), "\n");
     if (profile.stackTrace())
         dataLog(*profile.stackTrace());
 }
 
 void HeapVerifier::checkIfRecorded(HeapCell* cell)
