diff a/modules/javafx.web/src/main/native/Source/WebCore/html/FileListCreator.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/FileListCreator.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/FileListCreator.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/FileListCreator.cpp
@@ -37,11 +37,11 @@
 FileListCreator::~FileListCreator()
 {
     ASSERT(!m_completionHander);
 }
 
-static void appendDirectoryFiles(const String& directory, const String& relativePath, Vector<Ref<File>>& fileObjects)
+static void appendDirectoryFiles(PAL::SessionID sessionID, const String& directory, const String& relativePath, Vector<Ref<File>>& fileObjects)
 {
     for (auto& childPath : FileSystem::listDirectory(directory, "*")) {
         auto metadata = FileSystem::fileMetadata(childPath);
         if (!metadata)
             continue;
@@ -49,43 +49,43 @@
         if (metadata.value().isHidden)
             continue;
 
         String childRelativePath = relativePath + "/" + FileSystem::pathGetFileName(childPath);
         if (metadata.value().type == FileMetadata::Type::Directory)
-            appendDirectoryFiles(childPath, childRelativePath, fileObjects);
+            appendDirectoryFiles(sessionID, childPath, childRelativePath, fileObjects);
         else if (metadata.value().type == FileMetadata::Type::File)
-            fileObjects.append(File::createWithRelativePath(childPath, childRelativePath));
+            fileObjects.append(File::createWithRelativePath(sessionID, childPath, childRelativePath));
     }
 }
 
-FileListCreator::FileListCreator(const Vector<FileChooserFileInfo>& paths, ShouldResolveDirectories shouldResolveDirectories, CompletionHandler&& completionHandler)
+FileListCreator::FileListCreator(PAL::SessionID sessionID, const Vector<FileChooserFileInfo>& paths, ShouldResolveDirectories shouldResolveDirectories, CompletionHandler&& completionHandler)
 {
     if (shouldResolveDirectories == ShouldResolveDirectories::No)
-        completionHandler(createFileList<ShouldResolveDirectories::No>(paths));
+        completionHandler(createFileList<ShouldResolveDirectories::No>(sessionID, paths));
     else {
         // Resolve directories on a background thread to avoid blocking the main thread.
         m_completionHander = WTFMove(completionHandler);
         m_workQueue = WorkQueue::create("FileListCreator Work Queue");
-        m_workQueue->dispatch([this, protectedThis = makeRef(*this), paths = crossThreadCopy(paths)]() mutable {
-            auto fileList = createFileList<ShouldResolveDirectories::Yes>(paths);
+        m_workQueue->dispatch([this, protectedThis = makeRef(*this), sessionID, paths = crossThreadCopy(paths)]() mutable {
+            auto fileList = createFileList<ShouldResolveDirectories::Yes>(sessionID, paths);
             callOnMainThread([this, protectedThis = WTFMove(protectedThis), fileList = WTFMove(fileList)]() mutable {
                 if (auto completionHander = WTFMove(m_completionHander))
                     completionHander(WTFMove(fileList));
             });
         });
     }
 }
 
 template<FileListCreator::ShouldResolveDirectories shouldResolveDirectories>
-Ref<FileList> FileListCreator::createFileList(const Vector<FileChooserFileInfo>& paths)
+Ref<FileList> FileListCreator::createFileList(PAL::SessionID sessionID, const Vector<FileChooserFileInfo>& paths)
 {
     Vector<Ref<File>> fileObjects;
     for (auto& info : paths) {
         if (shouldResolveDirectories == ShouldResolveDirectories::Yes && FileSystem::fileIsDirectory(info.path, FileSystem::ShouldFollowSymbolicLinks::No))
-            appendDirectoryFiles(info.path, FileSystem::pathGetFileName(info.path), fileObjects);
+            appendDirectoryFiles(sessionID, info.path, FileSystem::pathGetFileName(info.path), fileObjects);
         else
-            fileObjects.append(File::createWithName(info.path, info.displayName));
+            fileObjects.append(File::create(sessionID, info.path, info.displayName));
     }
     return FileList::create(WTFMove(fileObjects));
 }
 
 void FileListCreator::cancel()
