diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirAllocateRegistersByGraphColoring.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirAllocateRegistersByGraphColoring.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirAllocateRegistersByGraphColoring.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirAllocateRegistersByGraphColoring.cpp
@@ -322,11 +322,11 @@
     }
 
     void assignColors()
     {
         ASSERT(m_simplifyWorklist.isEmpty());
-        ASSERT(!m_spillWorklist.bitCount());
+        ASSERT(m_spillWorklist.isEmpty());
 
         // Reclaim as much memory as possible.
         m_interferenceEdges.clear();
 
         m_degrees.clear();
@@ -667,20 +667,20 @@
             while (m_simplifyWorklist.size()) {
                 simplify();
                 assertInvariants();
             }
 
-            if (m_spillWorklist.bitCount()) {
+            if (!m_spillWorklist.isEmpty()) {
                 selectSpill();
                 changed = true;
                 ASSERT(m_simplifyWorklist.size() == 1);
             }
         } while (changed);
 
         if (!ASSERT_DISABLED) {
             ASSERT(!m_simplifyWorklist.size());
-            ASSERT(!m_spillWorklist.bitCount());
+            ASSERT(m_spillWorklist.isEmpty());
             IndexType firstNonRegIndex = m_lastPrecoloredRegisterIndex + 1;
             for (IndexType i = firstNonRegIndex; i < m_degrees.size(); ++i)
                 ASSERT(hasBeenSimplified(i));
         }
 
@@ -990,18 +990,18 @@
                 simplify();
             else if (!m_worklistMoves.isEmpty())
                 coalesce();
             else if (!m_freezeWorklist.isEmpty())
                 freeze();
-            else if (m_spillWorklist.bitCount())
+            else if (!m_spillWorklist.isEmpty())
                 selectSpill();
 
             if (traceDebug) {
                 dataLog("After Graph simplification iteration\n");
                 dumpWorkLists(WTF::dataFile());
             }
-        } while (!m_simplifyWorklist.isEmpty() || !m_worklistMoves.isEmpty() || !m_freezeWorklist.isEmpty() || m_spillWorklist.bitCount());
+        } while (!m_simplifyWorklist.isEmpty() || !m_worklistMoves.isEmpty() || !m_freezeWorklist.isEmpty() || !m_spillWorklist.isEmpty());
 
         assignColors();
     }
 
 protected:
