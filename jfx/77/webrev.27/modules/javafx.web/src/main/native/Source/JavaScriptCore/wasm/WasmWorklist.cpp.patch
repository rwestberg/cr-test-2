diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmWorklist.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmWorklist.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmWorklist.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmWorklist.cpp
@@ -26,14 +26,13 @@
 #include "config.h"
 #include "WasmWorklist.h"
 
 #if ENABLE(WEBASSEMBLY)
 
+#include "CPU.h"
 #include "WasmPlan.h"
 
-#include <wtf/NumberOfCores.h>
-
 namespace JSC { namespace Wasm {
 
 namespace WasmWorklistInternal {
 static const bool verbose = false;
 }
@@ -205,15 +204,15 @@
 
 Worklist::Worklist()
     : m_lock(Box<Lock>::create())
     , m_planEnqueued(AutomaticThreadCondition::create())
 {
-    unsigned numberOfCompilationThreads = Options::useConcurrentJIT() ? WTF::numberOfProcessorCores() : 1;
+    unsigned numberOfCompilationThreads = Options::useConcurrentJIT() ? kernTCSMAwareNumberOfProcessorCores() : 1;
     m_threads.reserveCapacity(numberOfCompilationThreads);
     LockHolder locker(*m_lock);
     for (unsigned i = 0; i < numberOfCompilationThreads; i++)
-        m_threads.uncheckedAppend(std::make_unique<Worklist::Thread>(locker, *this));
+        m_threads.uncheckedAppend(makeUnique<Worklist::Thread>(locker, *this));
 }
 
 Worklist::~Worklist()
 {
     {
