diff a/modules/javafx.web/src/main/native/Source/WebCore/page/NavigatorBase.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/NavigatorBase.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/NavigatorBase.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/NavigatorBase.cpp
@@ -26,10 +26,11 @@
 
 #include "config.h"
 #include "NavigatorBase.h"
 
 #include "Document.h"
+#include "RuntimeEnabledFeatures.h"
 #include "ServiceWorkerContainer.h"
 #include <mutex>
 #include <wtf/Language.h>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/NumberOfCores.h>
@@ -42,24 +43,10 @@
 
 #if PLATFORM(IOS_FAMILY)
 #include "Device.h"
 #endif
 
-#ifndef WEBCORE_NAVIGATOR_PLATFORM
-#if PLATFORM(IOS_FAMILY)
-#define WEBCORE_NAVIGATOR_PLATFORM deviceName()
-#elif OS(MAC_OS_X) && (CPU(PPC) || CPU(PPC64))
-#define WEBCORE_NAVIGATOR_PLATFORM "MacPPC"_s
-#elif OS(MAC_OS_X) && (CPU(X86) || CPU(X86_64))
-#define WEBCORE_NAVIGATOR_PLATFORM "MacIntel"_s
-#elif OS(WINDOWS)
-#define WEBCORE_NAVIGATOR_PLATFORM "Win32"_s
-#else
-#define WEBCORE_NAVIGATOR_PLATFORM emptyString()
-#endif
-#endif // ifndef WEBCORE_NAVIGATOR_PLATFORM
-
 #ifndef WEBCORE_NAVIGATOR_PRODUCT
 #define WEBCORE_NAVIGATOR_PRODUCT "Gecko"_s
 #endif // ifndef WEBCORE_NAVIGATOR_PRODUCT
 
 #ifndef WEBCORE_NAVIGATOR_PRODUCT_SUB
@@ -75,17 +62,12 @@
 #endif // ifndef WEBCORE_NAVIGATOR_VENDOR_SUB
 
 namespace WebCore {
 
 NavigatorBase::NavigatorBase(ScriptExecutionContext* context)
-#if ENABLE(SERVICE_WORKER)
-    : m_serviceWorkerContainer(makeUniqueRef<ServiceWorkerContainer>(context, *this))
-#endif
+    : ContextDestructionObserver(context)
 {
-#if !ENABLE(SERVICE_WORKER)
-    UNUSED_PARAM(context);
-#endif
 }
 
 NavigatorBase::~NavigatorBase() = default;
 
 String NavigatorBase::appName()
@@ -98,21 +80,28 @@
     // Version is everything in the user agent string past the "Mozilla/" prefix.
     const String& agent = userAgent();
     return agent.substring(agent.find('/') + 1);
 }
 
-const String& NavigatorBase::platform() const
+String NavigatorBase::platform() const
 {
-    static NeverDestroyed<String> defaultPlatform = WEBCORE_NAVIGATOR_PLATFORM;
 #if OS(LINUX)
-    if (!String(WEBCORE_NAVIGATOR_PLATFORM).isEmpty())
-        return defaultPlatform;
-    struct utsname osname;
-    static NeverDestroyed<String> platformName(uname(&osname) >= 0 ? String(osname.sysname) + " "_str + String(osname.machine) : emptyString());
-    return platformName;
+    static LazyNeverDestroyed<String> platformName;
+    static std::once_flag onceKey;
+    std::call_once(onceKey, [] {
+        struct utsname osname;
+        platformName.construct(uname(&osname) >= 0 ? String(osname.sysname) + " "_str + String(osname.machine) : String(""_s));
+    });
+    return platformName->isolatedCopy();
+#elif PLATFORM(IOS_FAMILY)
+    return deviceName();
+#elif OS(MAC_OS_X)
+    return "MacIntel"_s;
+#elif OS(WINDOWS)
+    return "Win32"_s;
 #else
-    return defaultPlatform;
+    return ""_s;
 #endif
 }
 
 String NavigatorBase::appCodeName()
 {
@@ -149,19 +138,27 @@
     // We intentionally expose only the primary language for privacy reasons.
     return { defaultLanguage() };
 }
 
 #if ENABLE(SERVICE_WORKER)
+ServiceWorkerContainer* NavigatorBase::serviceWorkerIfExists()
+{
+    return m_serviceWorkerContainer.get();
+}
+
 ServiceWorkerContainer& NavigatorBase::serviceWorker()
 {
-    return m_serviceWorkerContainer;
+    ASSERT(RuntimeEnabledFeatures::sharedFeatures().serviceWorkerEnabled());
+    if (!m_serviceWorkerContainer)
+        m_serviceWorkerContainer = makeUnique<ServiceWorkerContainer>(scriptExecutionContext(), *this);
+    return *m_serviceWorkerContainer;
 }
 
 ExceptionOr<ServiceWorkerContainer&> NavigatorBase::serviceWorker(ScriptExecutionContext& context)
 {
     if (is<Document>(context) && downcast<Document>(context).isSandboxed(SandboxOrigin))
         return Exception { SecurityError, "Service Worker is disabled because the context is sandboxed and lacks the 'allow-same-origin' flag" };
-    return m_serviceWorkerContainer.get();
+    return serviceWorker();
 }
 #endif
 
 } // namespace WebCore
