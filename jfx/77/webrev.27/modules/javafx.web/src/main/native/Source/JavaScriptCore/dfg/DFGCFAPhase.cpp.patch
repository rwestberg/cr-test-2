diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGCFAPhase.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGCFAPhase.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGCFAPhase.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGCFAPhase.cpp
@@ -29,10 +29,11 @@
 #if ENABLE(DFG_JIT)
 
 #include "DFGAbstractInterpreterInlines.h"
 #include "DFGBlockSet.h"
 #include "DFGClobberSet.h"
+#include "DFGClobberize.h"
 #include "DFGGraph.h"
 #include "DFGInPlaceAbstractState.h"
 #include "DFGPhase.h"
 #include "DFGSafeToExecute.h"
 #include "OperandsInlines.h"
@@ -160,10 +161,14 @@
     bool injectOSR(BasicBlock* block)
     {
         if (m_verbose)
             dataLog("   Found must-handle block: ", *block, "\n");
 
+        // This merges snapshot of stack values while CFA phase want to have proven types and values. This is somewhat tricky.
+        // But this is OK as long as DFG OSR entry validates the inputs with *proven* AbstracValue values. And it turns out that this
+        // type widening is critical to navier-stokes. Without it, navier-stokes has more strict constraint on OSR entry and
+        // fails OSR entry repeatedly.
         bool changed = false;
         const Operands<Optional<JSValue>>& mustHandleValues = m_graph.m_plan.mustHandleValues();
         for (size_t i = mustHandleValues.size(); i--;) {
             int operand = mustHandleValues.operandForIndex(i);
             Optional<JSValue> value = mustHandleValues[i];
@@ -181,13 +186,11 @@
 
             if (m_verbose)
                 dataLog("   Widening ", VirtualRegister(operand), " with ", value.value(), "\n");
 
             AbstractValue& target = block->valuesAtHead.operand(operand);
-            changed |= target.mergeOSREntryValue(m_graph, value.value());
-            target.fixTypeForRepresentation(
-                m_graph, resultFor(node->variableAccessData()->flushFormat()), node);
+            changed |= target.mergeOSREntryValue(m_graph, value.value(), node->variableAccessData(), node);
         }
 
         if (changed || !block->cfaHasVisited) {
             block->cfaShouldRevisit = true;
             return true;
