diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpObject.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpObject.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpObject.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpObject.h
@@ -30,10 +30,12 @@
 class RegExpObject final : public JSNonFinalObject {
 public:
     using Base = JSNonFinalObject;
     static const unsigned StructureFlags = Base::StructureFlags | OverridesGetOwnPropertySlot | OverridesGetPropertyNames;
 
+    static constexpr uintptr_t lastIndexIsNotWritableFlag = 1;
+
     static RegExpObject* create(VM& vm, Structure* structure, RegExp* regExp)
     {
         RegExpObject* object = new (NotNull, allocateCell<RegExpObject>(vm.heap)) RegExpObject(vm, structure, regExp);
         object->finishCreation(vm);
         return object;
@@ -44,19 +46,28 @@
         auto* object = create(vm, structure, regExp);
         object->m_lastIndex.set(vm, object, lastIndex);
         return object;
     }
 
-    void setRegExp(VM& vm, RegExp* r) { m_regExp.set(vm, this, r); }
-    RegExp* regExp() const { return m_regExp.get(); }
+    void setRegExp(VM& vm, RegExp* regExp)
+    {
+        uintptr_t result = (m_regExpAndLastIndexIsNotWritableFlag & lastIndexIsNotWritableFlag) | bitwise_cast<uintptr_t>(regExp);
+        m_regExpAndLastIndexIsNotWritableFlag = result;
+        vm.heap.writeBarrier(this, regExp);
+    }
+
+    RegExp* regExp() const
+    {
+        return bitwise_cast<RegExp*>(m_regExpAndLastIndexIsNotWritableFlag & (~lastIndexIsNotWritableFlag));
+    }
 
     bool setLastIndex(ExecState* exec, size_t lastIndex)
     {
         VM& vm = exec->vm();
         auto scope = DECLARE_THROW_SCOPE(vm);
 
-        if (LIKELY(m_lastIndexIsWritable)) {
+        if (LIKELY(lastIndexIsWritable())) {
             m_lastIndex.setWithoutWriteBarrier(jsNumber(lastIndex));
             return true;
         }
         throwTypeError(exec, scope, ReadonlyPropertyWriteError);
         return false;
@@ -64,15 +75,14 @@
     bool setLastIndex(ExecState* exec, JSValue lastIndex, bool shouldThrow)
     {
         VM& vm = exec->vm();
         auto scope = DECLARE_THROW_SCOPE(vm);
 
-        if (LIKELY(m_lastIndexIsWritable)) {
+        if (LIKELY(lastIndexIsWritable())) {
             m_lastIndex.set(vm, this, lastIndex);
             return true;
         }
-
         return typeError(exec, scope, shouldThrow, ReadonlyPropertyWriteError);
     }
     JSValue getLastIndex() const
     {
         return m_lastIndex.get();
@@ -93,25 +103,20 @@
     static Structure* createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
     {
         return Structure::create(vm, globalObject, prototype, TypeInfo(RegExpObjectType, StructureFlags), info());
     }
 
-    static ptrdiff_t offsetOfRegExp()
+    static ptrdiff_t offsetOfRegExpAndLastIndexIsNotWritableFlag()
     {
-        return OBJECT_OFFSETOF(RegExpObject, m_regExp);
+        return OBJECT_OFFSETOF(RegExpObject, m_regExpAndLastIndexIsNotWritableFlag);
     }
 
     static ptrdiff_t offsetOfLastIndex()
     {
         return OBJECT_OFFSETOF(RegExpObject, m_lastIndex);
     }
 
-    static ptrdiff_t offsetOfLastIndexIsWritable()
-    {
-        return OBJECT_OFFSETOF(RegExpObject, m_lastIndexIsWritable);
-    }
-
     static size_t allocationSize(Checked<size_t> inlineCapacity)
     {
         ASSERT_UNUSED(inlineCapacity, !inlineCapacity);
         return sizeof(RegExpObject);
     }
@@ -120,20 +125,29 @@
     JS_EXPORT_PRIVATE RegExpObject(VM&, Structure*, RegExp*);
     JS_EXPORT_PRIVATE void finishCreation(VM&);
 
     static void visitChildren(JSCell*, SlotVisitor&);
 
+    bool lastIndexIsWritable() const
+    {
+        return !(m_regExpAndLastIndexIsNotWritableFlag & lastIndexIsNotWritableFlag);
+    }
+
+    void setLastIndexIsNotWritable()
+    {
+        m_regExpAndLastIndexIsNotWritableFlag = (m_regExpAndLastIndexIsNotWritableFlag | lastIndexIsNotWritableFlag);
+    }
+
     JS_EXPORT_PRIVATE static bool deleteProperty(JSCell*, ExecState*, PropertyName);
     JS_EXPORT_PRIVATE static void getOwnNonIndexPropertyNames(JSObject*, ExecState*, PropertyNameArray&, EnumerationMode);
     JS_EXPORT_PRIVATE static void getPropertyNames(JSObject*, ExecState*, PropertyNameArray&, EnumerationMode);
     JS_EXPORT_PRIVATE static void getGenericPropertyNames(JSObject*, ExecState*, PropertyNameArray&, EnumerationMode);
     JS_EXPORT_PRIVATE static bool defineOwnProperty(JSObject*, ExecState*, PropertyName, const PropertyDescriptor&, bool shouldThrow);
 
 private:
     MatchResult matchInline(ExecState*, JSGlobalObject*, JSString*);
 
-    WriteBarrier<RegExp> m_regExp;
+    uintptr_t m_regExpAndLastIndexIsNotWritableFlag { 0 };
     WriteBarrier<Unknown> m_lastIndex;
-    uint8_t m_lastIndexIsWritable;
 };
 
 } // namespace JSC
