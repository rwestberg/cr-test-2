diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTableElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTableElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTableElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTableElement.cpp
@@ -276,11 +276,11 @@
         element.invalidateStyleForSubtree();
 
     return cellChanged;
 }
 
-static bool getBordersFromFrameAttributeValue(const AtomicString& value, bool& borderTop, bool& borderRight, bool& borderBottom, bool& borderLeft)
+static bool getBordersFromFrameAttributeValue(const AtomString& value, bool& borderTop, bool& borderRight, bool& borderBottom, bool& borderLeft)
 {
     borderTop = false;
     borderRight = false;
     borderBottom = false;
     borderLeft = false;
@@ -302,11 +302,11 @@
     else if (!equalLettersIgnoringASCIICase(value, "void"))
         return false;
     return true;
 }
 
-void HTMLTableElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomicString& value, MutableStyleProperties& style)
+void HTMLTableElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomString& value, MutableStyleProperties& style)
 {
     if (name == widthAttr)
         addHTMLLengthToStyle(style, CSSPropertyWidth, value);
     else if (name == heightAttr)
         addHTMLLengthToStyle(style, CSSPropertyHeight, value);
@@ -366,11 +366,11 @@
     if (name == widthAttr || name == heightAttr || name == bgcolorAttr || name == backgroundAttr || name == valignAttr || name == vspaceAttr || name == hspaceAttr || name == cellspacingAttr || name == borderAttr || name == bordercolorAttr || name == frameAttr || name == rulesAttr)
         return true;
     return HTMLElement::isPresentationAttribute(name);
 }
 
-void HTMLTableElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLTableElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     CellBorders bordersBefore = cellBorders();
     unsigned short oldPadding = m_padding;
 
     if (name == borderAttr)  {
@@ -509,11 +509,11 @@
     }
 
     if (m_padding)
         style->setProperty(CSSPropertyPadding, cssValuePool.createValue(m_padding, CSSPrimitiveValue::CSS_PX));
 
-    return WTFMove(style);
+    return style;
 }
 
 const StyleProperties* HTMLTableElement::additionalCellStyle()
 {
     if (!m_sharedCellStyle)
@@ -564,16 +564,16 @@
 Ref<HTMLCollection> HTMLTableElement::tBodies()
 {
     return ensureRareData().ensureNodeLists().addCachedCollection<GenericCachedHTMLCollection<CollectionTypeTraits<TableTBodies>::traversalType>>(*this, TableTBodies);
 }
 
-const AtomicString& HTMLTableElement::rules() const
+const AtomString& HTMLTableElement::rules() const
 {
     return attributeWithoutSynchronization(rulesAttr);
 }
 
-const AtomicString& HTMLTableElement::summary() const
+const AtomString& HTMLTableElement::summary() const
 {
     return attributeWithoutSynchronization(summaryAttr);
 }
 
 void HTMLTableElement::addSubresourceAttributeURLs(ListHashSet<URL>& urls) const
