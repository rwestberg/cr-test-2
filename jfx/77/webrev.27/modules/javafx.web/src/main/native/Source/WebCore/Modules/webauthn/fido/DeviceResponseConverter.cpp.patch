diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/fido/DeviceResponseConverter.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/fido/DeviceResponseConverter.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/fido/DeviceResponseConverter.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/fido/DeviceResponseConverter.cpp
@@ -34,10 +34,11 @@
 
 #include "AuthenticatorSupportedOptions.h"
 #include "CBORReader.h"
 #include "CBORWriter.h"
 #include "WebAuthenticationConstants.h"
+#include "WebAuthenticationUtils.h"
 #include <wtf/StdSet.h>
 #include <wtf/Vector.h>
 
 namespace fido {
 using namespace WebCore;
@@ -82,11 +83,11 @@
 }
 
 
 // Decodes byte array response from authenticator to CBOR value object and
 // checks for correct encoding format.
-Optional<PublicKeyCredentialData> readCTAPMakeCredentialResponse(const Vector<uint8_t>& inBuffer)
+Optional<PublicKeyCredentialData> readCTAPMakeCredentialResponse(const Vector<uint8_t>& inBuffer, const WebCore::AttestationConveyancePreference& attestation)
 {
     if (inBuffer.size() <= kResponseCodeLength)
         return WTF::nullopt;
 
     Vector<uint8_t> buffer;
@@ -113,17 +114,25 @@
     it = decodedMap.find(CBOR(3));
     if (it == decodedMap.end() || !it->second.isMap())
         return WTF::nullopt;
     auto attStmt = it->second.clone();
 
-    CBOR::MapValue attestationObjectMap;
-    attestationObjectMap[CBOR("authData")] = WTFMove(authenticatorData);
-    attestationObjectMap[CBOR("fmt")] = WTFMove(format);
-    attestationObjectMap[CBOR("attStmt")] = WTFMove(attStmt);
-    auto attestationObject = cbor::CBORWriter::write(CBOR(WTFMove(attestationObjectMap)));
+    Optional<Vector<uint8_t>> attestationObject;
+    if (attestation == AttestationConveyancePreference::None) {
+        // The reason why we can't directly pass authenticatorData/format/attStmt to buildAttestationObject
+        // is that they are CBORValue instead of the raw type.
+        // Also, format and attStmt are omitted as they are not useful in none attestation.
+        attestationObject = buildAttestationObject(Vector<uint8_t>(authenticatorData.getByteString()), "", { }, attestation);
+    } else {
+        CBOR::MapValue attestationObjectMap;
+        attestationObjectMap[CBOR("authData")] = WTFMove(authenticatorData);
+        attestationObjectMap[CBOR("fmt")] = WTFMove(format);
+        attestationObjectMap[CBOR("attStmt")] = WTFMove(attStmt);
+        attestationObject = cbor::CBORWriter::write(CBOR(WTFMove(attestationObjectMap)));
+    }
 
-    return PublicKeyCredentialData { ArrayBuffer::create(credentialId.data(), credentialId.size()), true, nullptr, ArrayBuffer::create(attestationObject.value().data(), attestationObject.value().size()), nullptr, nullptr, nullptr };
+    return PublicKeyCredentialData { ArrayBuffer::create(credentialId.data(), credentialId.size()), true, nullptr, ArrayBuffer::create(attestationObject.value().data(), attestationObject.value().size()), nullptr, nullptr, nullptr, WTF::nullopt };
 }
 
 Optional<PublicKeyCredentialData> readCTAPGetAssertionResponse(const Vector<uint8_t>& inBuffer)
 {
     if (inBuffer.size() <= kResponseCodeLength)
@@ -168,11 +177,11 @@
             return WTF::nullopt;
         auto& id = itr->second.getByteString();
         userHandle = ArrayBuffer::create(id.data(), id.size());
     }
 
-    return PublicKeyCredentialData { WTFMove(credentialId), false, nullptr, nullptr, ArrayBuffer::create(authData.data(), authData.size()), ArrayBuffer::create(signature.data(), signature.size()), WTFMove(userHandle) };
+    return PublicKeyCredentialData { WTFMove(credentialId), false, nullptr, nullptr, ArrayBuffer::create(authData.data(), authData.size()), ArrayBuffer::create(signature.data(), signature.size()), WTFMove(userHandle), WTF::nullopt };
 }
 
 Optional<AuthenticatorGetInfoResponse> readCTAPGetInfoResponse(const Vector<uint8_t>& inBuffer)
 {
     if (inBuffer.size() <= kResponseCodeLength || getResponseCode(inBuffer) != CtapDeviceResponseCode::kSuccess)
