diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLTypeDefinition.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLTypeDefinition.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLTypeDefinition.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLTypeDefinition.h
@@ -25,58 +25,55 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
-#include "WHLSLLexer.h"
+#include "WHLSLCodeLocation.h"
 #include "WHLSLNamedType.h"
-#include "WHLSLNode.h"
 #include "WHLSLUnnamedType.h"
+#include <wtf/FastMalloc.h>
 #include <wtf/UniqueRef.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class TypeDefinition : public NamedType {
+class TypeDefinition final : public NamedType {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    TypeDefinition(Lexer::Token&& origin, String&& name, UniqueRef<UnnamedType>&& type)
-        : NamedType(WTFMove(origin), WTFMove(name))
+    TypeDefinition(CodeLocation location, String&& name, Ref<UnnamedType> type)
+        : NamedType(Kind::TypeDefinition, location, WTFMove(name))
         , m_type(WTFMove(type))
     {
     }
 
-    virtual ~TypeDefinition() = default;
+    ~TypeDefinition() = default;
 
     TypeDefinition(const TypeDefinition&) = delete;
     TypeDefinition(TypeDefinition&&) = default;
 
-    bool isTypeDefinition() const override { return true; }
-
     UnnamedType& type() { return m_type; }
 
-    const Type& unifyNode() const override
-    {
-        return m_type->unifyNode();
-    }
-
-    Type& unifyNode() override
+private:
+    friend class Type;
+    Type& unifyNodeImpl()
     {
         return m_type->unifyNode();
     }
 
-private:
-    UniqueRef<UnnamedType> m_type;
+    Ref<UnnamedType> m_type;
 };
 
 } // namespace AST
 
 }
 
 }
 
-SPECIALIZE_TYPE_TRAITS_WHLSL_NAMED_TYPE(TypeDefinition, isTypeDefinition())
+DEFINE_DEFAULT_DELETE(TypeDefinition)
+
+SPECIALIZE_TYPE_TRAITS_WHLSL_TYPE(TypeDefinition, isTypeDefinition())
 
 #endif
