diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/cached-powers.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/cached-powers.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/cached-powers.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/cached-powers.h
@@ -32,35 +32,35 @@
 
 namespace WTF {
 namespace double_conversion {
 
 class PowersOfTenCache {
-    public:
+ public:
 
-        // Not all powers of ten are cached. The decimal exponent of two neighboring
-        // cached numbers will differ by kDecimalExponentDistance.
-        static const int kDecimalExponentDistance;
+  // Not all powers of ten are cached. The decimal exponent of two neighboring
+  // cached numbers will differ by kDecimalExponentDistance.
+  static const int kDecimalExponentDistance;
 
-        static const int kMinDecimalExponent;
-        static const int kMaxDecimalExponent;
+  static const int kMinDecimalExponent;
+  static const int kMaxDecimalExponent;
 
-        // Returns a cached power-of-ten with a binary exponent in the range
-        // [min_exponent; max_exponent] (boundaries included).
-        static void GetCachedPowerForBinaryExponentRange(int min_exponent,
-                                                         int max_exponent,
-                                                         DiyFp* power,
-                                                         int* decimal_exponent);
+  // Returns a cached power-of-ten with a binary exponent in the range
+  // [min_exponent; max_exponent] (boundaries included).
+  static void GetCachedPowerForBinaryExponentRange(int min_exponent,
+                                                   int max_exponent,
+                                                   DiyFp* power,
+                                                   int* decimal_exponent);
 
-        // Returns a cached power of ten x ~= 10^k such that
-        //   k <= decimal_exponent < k + kCachedPowersDecimalDistance.
-        // The given decimal_exponent must satisfy
-        //   kMinDecimalExponent <= requested_exponent, and
-        //   requested_exponent < kMaxDecimalExponent + kDecimalExponentDistance.
-        static void GetCachedPowerForDecimalExponent(int requested_exponent,
-                                                     DiyFp* power,
-                                                     int* found_exponent);
+  // Returns a cached power of ten x ~= 10^k such that
+  //   k <= decimal_exponent < k + kCachedPowersDecimalDistance.
+  // The given decimal_exponent must satisfy
+  //   kMinDecimalExponent <= requested_exponent, and
+  //   requested_exponent < kMaxDecimalExponent + kDecimalExponentDistance.
+  static void GetCachedPowerForDecimalExponent(int requested_exponent,
+                                               DiyFp* power,
+                                               int* found_exponent);
 };
 
 }  // namespace double_conversion
-} // namespace WTF
+}  // namespace WTF
 
 #endif  // DOUBLE_CONVERSION_CACHED_POWERS_H_
