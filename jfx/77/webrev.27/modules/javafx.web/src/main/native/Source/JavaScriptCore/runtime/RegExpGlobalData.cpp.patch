diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpGlobalData.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpGlobalData.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpGlobalData.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpGlobalData.cpp
@@ -24,41 +24,55 @@
  */
 
 #include "config.h"
 #include "RegExpGlobalData.h"
 
+#include "JSCInlines.h"
+#include "JSString.h"
+
 namespace JSC {
 
 void RegExpGlobalData::visitAggregate(SlotVisitor& visitor)
 {
     m_cachedResult.visitAggregate(visitor);
 }
 
 JSValue RegExpGlobalData::getBackref(ExecState* exec, JSGlobalObject* owner, unsigned i)
 {
+    VM& vm = exec->vm();
+    auto scope = DECLARE_THROW_SCOPE(vm);
+
     JSArray* array = m_cachedResult.lastResult(exec, owner);
+    RETURN_IF_EXCEPTION(scope, { });
 
     if (i < array->length()) {
         JSValue result = JSValue(array).get(exec, i);
+        RETURN_IF_EXCEPTION(scope, { });
         ASSERT(result.isString() || result.isUndefined());
         if (!result.isUndefined())
             return result;
     }
-    return jsEmptyString(exec);
+    return jsEmptyString(vm);
 }
 
 JSValue RegExpGlobalData::getLastParen(ExecState* exec, JSGlobalObject* owner)
 {
+    VM& vm = exec->vm();
+    auto scope = DECLARE_THROW_SCOPE(vm);
+
     JSArray* array = m_cachedResult.lastResult(exec, owner);
+    RETURN_IF_EXCEPTION(scope, { });
+
     unsigned length = array->length();
     if (length > 1) {
         JSValue result = JSValue(array).get(exec, length - 1);
+        RETURN_IF_EXCEPTION(scope, { });
         ASSERT(result.isString() || result.isUndefined());
         if (!result.isUndefined())
             return result;
     }
-    return jsEmptyString(exec);
+    return jsEmptyString(vm);
 }
 
 JSValue RegExpGlobalData::getLeftContext(ExecState* exec, JSGlobalObject* owner)
 {
     return m_cachedResult.leftContext(exec, owner);
