diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/EventTarget.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/EventTarget.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/EventTarget.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/EventTarget.h
@@ -34,10 +34,11 @@
 #include "EventTargetInterfaces.h"
 #include "ExceptionOr.h"
 #include "ScriptWrappable.h"
 #include <memory>
 #include <wtf/Forward.h>
+#include <wtf/IsoMalloc.h>
 #include <wtf/Variant.h>
 
 namespace WebCore {
 
 class DOMWrapperWorld;
@@ -49,10 +50,11 @@
     EventListenerMap eventListenerMap;
     bool isFiringEventListeners { false };
 };
 
 class EventTarget : public ScriptWrappable {
+    WTF_MAKE_ISO_ALLOCATED(EventTarget);
 public:
     void ref() { refEventTarget(); }
     void deref() { derefEventTarget(); }
 
     virtual EventTargetInterface eventTargetInterface() const = 0;
@@ -79,31 +81,33 @@
         Optional<bool> passive;
         bool once { false };
     };
 
     using AddEventListenerOptionsOrBoolean = Variant<AddEventListenerOptions, bool>;
-    WEBCORE_EXPORT void addEventListenerForBindings(const AtomicString& eventType, RefPtr<EventListener>&&, AddEventListenerOptionsOrBoolean&&);
+    WEBCORE_EXPORT void addEventListenerForBindings(const AtomString& eventType, RefPtr<EventListener>&&, AddEventListenerOptionsOrBoolean&&);
     using ListenerOptionsOrBoolean = Variant<ListenerOptions, bool>;
-    WEBCORE_EXPORT void removeEventListenerForBindings(const AtomicString& eventType, RefPtr<EventListener>&&, ListenerOptionsOrBoolean&&);
+    WEBCORE_EXPORT void removeEventListenerForBindings(const AtomString& eventType, RefPtr<EventListener>&&, ListenerOptionsOrBoolean&&);
     WEBCORE_EXPORT ExceptionOr<bool> dispatchEventForBindings(Event&);
 
-    virtual bool addEventListener(const AtomicString& eventType, Ref<EventListener>&&, const AddEventListenerOptions& = { });
-    virtual bool removeEventListener(const AtomicString& eventType, EventListener&, const ListenerOptions&);
+    WEBCORE_EXPORT virtual bool addEventListener(const AtomString& eventType, Ref<EventListener>&&, const AddEventListenerOptions& = { });
+    virtual bool removeEventListener(const AtomString& eventType, EventListener&, const ListenerOptions&);
 
     virtual void removeAllEventListeners();
     virtual void dispatchEvent(Event&);
     virtual void uncaughtExceptionInEventHandler();
 
     // Used for legacy "onevent" attributes.
-    bool setAttributeEventListener(const AtomicString& eventType, RefPtr<EventListener>&&, DOMWrapperWorld&);
-    EventListener* attributeEventListener(const AtomicString& eventType, DOMWrapperWorld&);
+    bool setAttributeEventListener(const AtomString& eventType, RefPtr<EventListener>&&, DOMWrapperWorld&);
+    EventListener* attributeEventListener(const AtomString& eventType, DOMWrapperWorld&);
 
     bool hasEventListeners() const;
-    bool hasEventListeners(const AtomicString& eventType) const;
-    bool hasCapturingEventListeners(const AtomicString& eventType);
-    bool hasActiveEventListeners(const AtomicString& eventType) const;
-    const EventListenerVector& eventListeners(const AtomicString& eventType);
+    bool hasEventListeners(const AtomString& eventType) const;
+    bool hasCapturingEventListeners(const AtomString& eventType);
+    bool hasActiveEventListeners(const AtomString& eventType) const;
+
+    Vector<AtomString> eventTypes();
+    const EventListenerVector& eventListeners(const AtomString& eventType);
 
     enum class EventInvokePhase { Capturing, Bubbling };
     void fireEventListeners(Event&, EventInvokePhase);
     bool isFiringEventListeners() const;
 
@@ -126,10 +130,11 @@
 
     friend class EventListenerIterator;
 };
 
 class EventTargetWithInlineData : public EventTarget {
+    WTF_MAKE_ISO_ALLOCATED(EventTargetWithInlineData);
 protected:
     EventTargetData* eventTargetData() final { return &m_eventTargetData; }
     EventTargetData* eventTargetDataConcurrently() final { return &m_eventTargetData; }
     EventTargetData& ensureEventTargetData() final { return m_eventTargetData; }
 private:
@@ -151,17 +156,17 @@
 {
     auto* data = eventTargetData();
     return data && !data->eventListenerMap.isEmpty();
 }
 
-inline bool EventTarget::hasEventListeners(const AtomicString& eventType) const
+inline bool EventTarget::hasEventListeners(const AtomString& eventType) const
 {
     auto* data = eventTargetData();
     return data && data->eventListenerMap.contains(eventType);
 }
 
-inline bool EventTarget::hasCapturingEventListeners(const AtomicString& eventType)
+inline bool EventTarget::hasCapturingEventListeners(const AtomString& eventType)
 {
     auto* data = eventTargetData();
     return data && data->eventListenerMap.containsCapturing(eventType);
 }
 
