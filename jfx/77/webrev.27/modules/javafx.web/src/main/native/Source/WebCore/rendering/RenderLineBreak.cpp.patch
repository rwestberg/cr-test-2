diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderLineBreak.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderLineBreak.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderLineBreak.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderLineBreak.cpp
@@ -87,11 +87,11 @@
     return fontMetrics.ascent(baselineType) + (lineHeight(firstLine, direction, linePositionMode) - fontMetrics.height()) / 2;
 }
 
 std::unique_ptr<InlineElementBox> RenderLineBreak::createInlineBox()
 {
-    return std::make_unique<InlineElementBox>(*this);
+    return makeUnique<InlineElementBox>(*this);
 }
 
 void RenderLineBreak::setInlineBoxWrapper(InlineElementBox* inlineBox)
 {
     ASSERT(!inlineBox || !m_inlineBoxWrapper);
@@ -246,12 +246,12 @@
     }
 
     auto* containingBlock = containingBlockForObjectInFlow();
     // Map rect, extended left to leftOffset, and right to rightOffset, through transforms to get minX and maxX.
     LogicalSelectionOffsetCaches cache(*containingBlock);
-    LayoutUnit leftOffset = containingBlock->logicalLeftSelectionOffset(*containingBlock, box->logicalTop(), cache);
-    LayoutUnit rightOffset = containingBlock->logicalRightSelectionOffset(*containingBlock, box->logicalTop(), cache);
+    LayoutUnit leftOffset = containingBlock->logicalLeftSelectionOffset(*containingBlock, LayoutUnit(box->logicalTop()), cache);
+    LayoutUnit rightOffset = containingBlock->logicalRightSelectionOffset(*containingBlock, LayoutUnit(box->logicalTop()), cache);
     LayoutRect extentsRect = rect;
     if (box->isHorizontal()) {
         extentsRect.setX(leftOffset);
         extentsRect.setWidth(rightOffset - leftOffset);
     } else {
