diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/AudioParam.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/AudioParam.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/AudioParam.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/AudioParam.h
@@ -31,18 +31,25 @@
 #include "AudioContext.h"
 #include "AudioParamTimeline.h"
 #include "AudioSummingJunction.h"
 #include <JavaScriptCore/Float32Array.h>
 #include <sys/types.h>
+#include <wtf/LoggerHelper.h>
 #include <wtf/RefCounted.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 class AudioNodeOutput;
 
-class AudioParam final : public AudioSummingJunction, public RefCounted<AudioParam> {
+class AudioParam final
+    : public AudioSummingJunction
+    , public RefCounted<AudioParam>
+#if !RELEASE_LOG_DISABLED
+    , private LoggerHelper
+#endif
+{
 public:
     static const double DefaultSmoothingConstant;
     static const double SnapThreshold;
 
     static Ref<AudioParam> create(AudioContext& context, const String& name, double defaultValue, double minValue, double maxValue, unsigned units = 0)
@@ -99,28 +106,24 @@
     // Connect an audio-rate signal to control this parameter.
     void connect(AudioNodeOutput*);
     void disconnect(AudioNodeOutput*);
 
 protected:
-    AudioParam(AudioContext& context, const String& name, double defaultValue, double minValue, double maxValue, unsigned units = 0)
-        : AudioSummingJunction(context)
-        , m_name(name)
-        , m_value(defaultValue)
-        , m_defaultValue(defaultValue)
-        , m_minValue(minValue)
-        , m_maxValue(maxValue)
-        , m_units(units)
-        , m_smoothedValue(defaultValue)
-        , m_smoothingConstant(DefaultSmoothingConstant)
-    {
-    }
+    AudioParam(AudioContext&, const String&, double defaultValue, double minValue, double maxValue, unsigned units = 0);
 
 private:
     // sampleAccurate corresponds to a-rate (audio rate) vs. k-rate in the Web Audio specification.
     void calculateFinalValues(float* values, unsigned numberOfValues, bool sampleAccurate);
     void calculateTimelineValues(float* values, unsigned numberOfValues);
 
+#if !RELEASE_LOG_DISABLED
+    const Logger& logger() const final { return m_logger.get(); }
+    const void* logIdentifier() const final { return m_logIdentifier; }
+    const char* logClassName() const final { return "AudioParam"; }
+    WTFLogChannel& logChannel() const final;
+#endif
+
     String m_name;
     double m_value;
     double m_defaultValue;
     double m_minValue;
     double m_maxValue;
@@ -129,8 +132,13 @@
     // Smoothing (de-zippering)
     double m_smoothedValue;
     double m_smoothingConstant;
 
     AudioParamTimeline m_timeline;
+
+#if !RELEASE_LOG_DISABLED
+    mutable Ref<const Logger> m_logger;
+    const void* m_logIdentifier;
+#endif
 };
 
 } // namespace WebCore
