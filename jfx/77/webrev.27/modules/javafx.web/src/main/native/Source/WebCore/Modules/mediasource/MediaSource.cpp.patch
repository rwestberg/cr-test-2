diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediasource/MediaSource.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediasource/MediaSource.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediasource/MediaSource.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediasource/MediaSource.cpp
@@ -46,13 +46,16 @@
 #include "SourceBufferList.h"
 #include "SourceBufferPrivate.h"
 #include "TextTrackList.h"
 #include "TimeRanges.h"
 #include "VideoTrackList.h"
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(MediaSource);
+
 String convertEnumerationToString(MediaSourcePrivate::AddStatus enumerationValue)
 {
     static const NeverDestroyed<String> values[] = {
         MAKE_STATIC_STRING_IMPL("Ok"),
         MAKE_STATIC_STRING_IMPL("NotSupported"),
@@ -173,23 +176,23 @@
 }
 
 std::unique_ptr<PlatformTimeRanges> MediaSource::buffered() const
 {
     if (m_buffered && m_activeSourceBuffers->length() && std::all_of(m_activeSourceBuffers->begin(), m_activeSourceBuffers->end(), [](auto& buffer) { return !buffer->isBufferedDirty(); }))
-        return std::make_unique<PlatformTimeRanges>(*m_buffered);
+        return makeUnique<PlatformTimeRanges>(*m_buffered);
 
-    m_buffered = std::make_unique<PlatformTimeRanges>();
+    m_buffered = makeUnique<PlatformTimeRanges>();
     for (auto& sourceBuffer : *m_activeSourceBuffers)
         sourceBuffer->setBufferedDirty(false);
 
     // Implements MediaSource algorithm for HTMLMediaElement.buffered.
     // https://dvcs.w3.org/hg/html-media/raw-file/default/media-source/media-source.html#htmlmediaelement-extensions
     Vector<PlatformTimeRanges> activeRanges = this->activeRanges();
 
     // 1. If activeSourceBuffers.length equals 0 then return an empty TimeRanges object and abort these steps.
     if (activeRanges.isEmpty())
-        return std::make_unique<PlatformTimeRanges>(*m_buffered);
+        return makeUnique<PlatformTimeRanges>(*m_buffered);
 
     // 2. Let active ranges be the ranges returned by buffered for each SourceBuffer object in activeSourceBuffers.
     // 3. Let highest end time be the largest range end time in the active ranges.
     MediaTime highestEndTime = MediaTime::zeroTime();
     for (auto& ranges : activeRanges) {
@@ -198,11 +201,11 @@
             highestEndTime = std::max(highestEndTime, ranges.end(length - 1));
     }
 
     // Return an empty range if all ranges are empty.
     if (!highestEndTime)
-        return std::make_unique<PlatformTimeRanges>(*m_buffered);
+        return makeUnique<PlatformTimeRanges>(*m_buffered);
 
     // 4. Let intersection ranges equal a TimeRange object containing a single range from 0 to highest end time.
     m_buffered->add(MediaTime::zeroTime(), highestEndTime);
 
     // 5. For each SourceBuffer object in activeSourceBuffers run the following steps:
@@ -216,11 +219,11 @@
         // 5.3 Let new intersection ranges equal the intersection between the intersection ranges and the source ranges.
         // 5.4 Replace the ranges in intersection ranges with the new intersection ranges.
         m_buffered->intersectWith(sourceRanges);
     }
 
-    return std::make_unique<PlatformTimeRanges>(*m_buffered);
+    return makeUnique<PlatformTimeRanges>(*m_buffered);
 }
 
 void MediaSource::seekToTime(const MediaTime& time)
 {
     if (isClosed())
@@ -339,11 +342,11 @@
     if (start < 0 || start > end)
         return Exception { TypeError };
 
     // Set live seekable range to be a new normalized TimeRanges object containing a single range
     // whose start position is start and end position is end.
-    m_liveSeekable = std::make_unique<PlatformTimeRanges>(MediaTime::createWithDouble(start), MediaTime::createWithDouble(end));
+    m_liveSeekable = makeUnique<PlatformTimeRanges>(MediaTime::createWithDouble(start), MediaTime::createWithDouble(end));
 
     return { };
 }
 
 ExceptionOr<void> MediaSource::clearLiveSeekableRange()
@@ -711,11 +714,11 @@
     // 8. Add the new object to sourceBuffers and fire a addsourcebuffer on that object.
     m_sourceBuffers->add(buffer.copyRef());
     regenerateActiveSourceBuffers();
 
     // 9. Return the new object to the caller.
-    return WTFMove(buffer);
+    return buffer;
 }
 
 ExceptionOr<void> MediaSource::removeSourceBuffer(SourceBuffer& buffer)
 {
     DEBUG_LOG(LOGIDENTIFIER);
@@ -1068,11 +1071,11 @@
 
     ASSERT_NOT_REACHED();
     return Exception { QuotaExceededError };
 }
 
-void MediaSource::scheduleEvent(const AtomicString& eventName)
+void MediaSource::scheduleEvent(const AtomString& eventName)
 {
     DEBUG_LOG(LOGIDENTIFIER, "scheduling '", eventName, "'");
 
     auto event = Event::create(eventName, Event::CanBubble::No, Event::IsCancelable::No);
     event->setTarget(this);
