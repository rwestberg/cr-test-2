diff a/modules/javafx.web/src/main/native/Source/WebCore/mathml/MathMLSelectElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/mathml/MathMLSelectElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/mathml/MathMLSelectElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/mathml/MathMLSelectElement.cpp
@@ -66,21 +66,21 @@
 // - "SVG1.1" which is mentioned in the W3C note.
 //   http://www.w3.org/Math/Documents/Notes/graphics.xml
 // - Other MIME Content-Types for MathML, SVG and HTML.
 //
 // We exclude "application/mathml+xml" which is ambiguous about whether it is Presentation or Content MathML. Authors must use a more explicit encoding value.
-bool MathMLSelectElement::isMathMLEncoding(const AtomicString& value)
+bool MathMLSelectElement::isMathMLEncoding(const AtomString& value)
 {
     return value == "application/mathml-presentation+xml" || value == "MathML-Presentation";
 }
 
-bool MathMLSelectElement::isSVGEncoding(const AtomicString& value)
+bool MathMLSelectElement::isSVGEncoding(const AtomString& value)
 {
     return value == "image/svg+xml" || value == "SVG1.1";
 }
 
-bool MathMLSelectElement::isHTMLEncoding(const AtomicString& value)
+bool MathMLSelectElement::isHTMLEncoding(const AtomString& value)
 {
     return value == "application/xhtml+xml" || value == "text/html";
 }
 
 bool MathMLSelectElement::childShouldCreateRenderer(const Node& child) const
@@ -98,11 +98,11 @@
 {
     updateSelectedChild();
     MathMLRowElement::childrenChanged(change);
 }
 
-void MathMLSelectElement::attributeChanged(const QualifiedName& name, const AtomicString& oldValue, const AtomicString& newValue, AttributeModificationReason reason)
+void MathMLSelectElement::attributeChanged(const QualifiedName& name, const AtomString& oldValue, const AtomString& newValue, AttributeModificationReason reason)
 {
     if (hasTagName(mactionTag) && (name == MathMLNames::actiontypeAttr || name == MathMLNames::selectionAttr))
         updateSelectedChild();
 
     MathMLRowElement::attributeChanged(name, oldValue, newValue, reason);
@@ -238,11 +238,11 @@
     if (!selectedChild || !selectedChild->nextElementSibling())
         newSelectedChildIndex = 1;
 
     // We update the attribute value of the selection attribute.
     // This will also call MathMLSelectElement::attributeChanged to update the selected child.
-    setAttributeWithoutSynchronization(MathMLNames::selectionAttr, AtomicString::number(newSelectedChildIndex));
+    setAttributeWithoutSynchronization(MathMLNames::selectionAttr, AtomString::number(newSelectedChildIndex));
 }
 
 }
 
 #endif // ENABLE(MATHML)
