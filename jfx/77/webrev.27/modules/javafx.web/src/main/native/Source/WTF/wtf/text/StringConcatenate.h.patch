diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringConcatenate.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringConcatenate.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringConcatenate.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringConcatenate.h
@@ -25,11 +25,11 @@
 
 #pragma once
 
 #include <cstring>
 #include <wtf/CheckedArithmetic.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 #include <wtf/text/StringView.h>
 
 // This macro is helpful for testing how many intermediate Strings are created while evaluating an
 // expression containing operator+.
 #ifndef WTF_STRINGTYPEADAPTER_COPIED_WTF_STRING
@@ -187,13 +187,13 @@
 
 private:
     const String& m_string;
 };
 
-template<> class StringTypeAdapter<AtomicString, void> : public StringTypeAdapter<String, void> {
+template<> class StringTypeAdapter<AtomString, void> : public StringTypeAdapter<String, void> {
 public:
-    StringTypeAdapter(const AtomicString& string)
+    StringTypeAdapter(const AtomString& string)
         : StringTypeAdapter<String, void> { string.string() }
     {
     }
 };
 
@@ -233,10 +233,62 @@
 private:
     const PaddingSpecification<UnderlyingElementType>& m_padding;
     StringTypeAdapter<UnderlyingElementType> m_underlyingAdapter;
 };
 
+template<unsigned N>
+struct Indentation {
+    unsigned operator++() { return ++value; }
+    unsigned operator++(int) { return value++; }
+    unsigned operator--() { return --value; }
+    unsigned operator--(int) { return value--; }
+
+    unsigned value { 0 };
+};
+
+
+template<unsigned N>
+struct IndentationScope {
+    IndentationScope(Indentation<N>& indentation)
+        : m_indentation(indentation)
+    {
+        ++m_indentation;
+    }
+    ~IndentationScope()
+    {
+        --m_indentation;
+    }
+
+    Indentation<N>& m_indentation;
+};
+
+template<unsigned N> class StringTypeAdapter<Indentation<N>, void> {
+public:
+    StringTypeAdapter(Indentation<N> indentation)
+        : m_indentation { indentation }
+    {
+    }
+
+    unsigned length()
+    {
+        return m_indentation.value * N;
+    }
+
+    bool is8Bit()
+    {
+        return true;
+    }
+
+    template<typename CharacterType> void writeTo(CharacterType* destination)
+    {
+        std::fill_n(destination, m_indentation.value * N, ' ');
+    }
+
+private:
+    Indentation<N> m_indentation;
+};
+
 template<typename Adapter>
 inline bool are8Bit(Adapter adapter)
 {
     return adapter.is8Bit();
 }
@@ -246,20 +298,20 @@
 {
     return adapter.is8Bit() && are8Bit(adapters...);
 }
 
 template<typename ResultType, typename Adapter>
-inline void makeStringAccumulator(ResultType* result, Adapter adapter)
+inline void stringTypeAdapterAccumulator(ResultType* result, Adapter adapter)
 {
     adapter.writeTo(result);
 }
 
 template<typename ResultType, typename Adapter, typename... Adapters>
-inline void makeStringAccumulator(ResultType* result, Adapter adapter, Adapters ...adapters)
+inline void stringTypeAdapterAccumulator(ResultType* result, Adapter adapter, Adapters ...adapters)
 {
     adapter.writeTo(result);
-    makeStringAccumulator(result + adapter.length(), adapters...);
+    stringTypeAdapterAccumulator(result + adapter.length(), adapters...);
 }
 
 template<typename StringTypeAdapter, typename... StringTypeAdapters>
 String tryMakeStringFromAdapters(StringTypeAdapter adapter, StringTypeAdapters ...adapters)
 {
@@ -274,23 +326,23 @@
         LChar* buffer;
         RefPtr<StringImpl> resultImpl = StringImpl::tryCreateUninitialized(length, buffer);
         if (!resultImpl)
             return String();
 
-        makeStringAccumulator(buffer, adapter, adapters...);
+        stringTypeAdapterAccumulator(buffer, adapter, adapters...);
 
-        return WTFMove(resultImpl);
+        return resultImpl;
     }
 
     UChar* buffer;
     RefPtr<StringImpl> resultImpl = StringImpl::tryCreateUninitialized(length, buffer);
     if (!resultImpl)
         return String();
 
-    makeStringAccumulator(buffer, adapter, adapters...);
+    stringTypeAdapterAccumulator(buffer, adapter, adapters...);
 
-    return WTFMove(resultImpl);
+    return resultImpl;
 }
 
 template<typename... StringTypes>
 String tryMakeString(StringTypes ...strings)
 {
@@ -306,10 +358,12 @@
     return result;
 }
 
 } // namespace WTF
 
+using WTF::Indentation;
+using WTF::IndentationScope;
 using WTF::makeString;
 using WTF::pad;
 using WTF::tryMakeString;
 
 #include <wtf/text/StringOperators.h>
