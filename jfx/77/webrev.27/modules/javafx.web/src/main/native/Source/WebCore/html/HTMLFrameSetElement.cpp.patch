diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFrameSetElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFrameSetElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFrameSetElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFrameSetElement.cpp
@@ -73,19 +73,19 @@
     if (name == bordercolorAttr)
         return true;
     return HTMLElement::isPresentationAttribute(name);
 }
 
-void HTMLFrameSetElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomicString& value, MutableStyleProperties& style)
+void HTMLFrameSetElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomString& value, MutableStyleProperties& style)
 {
     if (name == bordercolorAttr)
         addHTMLColorToStyle(style, CSSPropertyBorderColor, value);
     else
         HTMLElement::collectStyleForPresentationAttribute(name, value, style);
 }
 
-void HTMLFrameSetElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLFrameSetElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == rowsAttr) {
         // FIXME: What is the right thing to do when removing this attribute?
         // Why not treat it the same way we treat setting it to the empty string?
         if (!value.isNull()) {
@@ -229,20 +229,20 @@
         if (RefPtr<Frame> frame = document().frame())
             frame->loader().client().dispatchDidBecomeFrameset(document().isFrameSet());
     }
 }
 
-WindowProxy* HTMLFrameSetElement::namedItem(const AtomicString& name)
+WindowProxy* HTMLFrameSetElement::namedItem(const AtomString& name)
 {
     auto frameElement = makeRefPtr(children()->namedItem(name));
     if (!is<HTMLFrameElement>(frameElement))
         return nullptr;
 
     return downcast<HTMLFrameElement>(*frameElement).contentWindow();
 }
 
-Vector<AtomicString> HTMLFrameSetElement::supportedPropertyNames() const
+Vector<AtomString> HTMLFrameSetElement::supportedPropertyNames() const
 {
     // NOTE: Left empty as no specification defines this named getter and we
     //       have not historically exposed these named items for enumeration.
     return { };
 }
