diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/SlotVisitor.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/SlotVisitor.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/SlotVisitor.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/SlotVisitor.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2011-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -38,11 +38,11 @@
 
 class ConservativeRoots;
 class GCThreadSharedData;
 class Heap;
 class HeapCell;
-class HeapSnapshotBuilder;
+class HeapAnalyzer;
 class MarkedBlock;
 class MarkingConstraint;
 class MarkingConstraintSolver;
 template<typename T> class Weak;
 template<typename T, typename Traits> class WriteBarrierBase;
@@ -117,10 +117,12 @@
 
     bool containsOpaqueRoot(void*) const;
 
     bool isEmpty() { return m_collectorStack.isEmpty() && m_mutatorStack.isEmpty(); }
 
+    bool isFirstVisit() const { return m_isFirstVisit; }
+
     void didStartMarking();
     void reset();
     void clearMarkStacks();
 
     size_t bytesVisited() const { return m_bytesVisited; }
@@ -156,12 +158,12 @@
     void reportExternalMemoryVisited(size_t);
 #endif
 
     void dump(PrintStream&) const;
 
-    bool isBuildingHeapSnapshot() const { return !!m_heapSnapshotBuilder; }
-    HeapSnapshotBuilder* heapSnapshotBuilder() const { return m_heapSnapshotBuilder; }
+    bool isAnalyzingHeap() const { return !!m_heapAnalyzer; }
+    HeapAnalyzer* heapAnalyzer() const { return m_heapAnalyzer; }
 
     RootMarkReason rootMarkReason() const { return m_rootMarkReason; }
     void setRootMarkReason(RootMarkReason reason) { m_rootMarkReason = reason; }
 
     HeapVersion markingVersion() const { return m_markingVersion; }
@@ -209,12 +211,10 @@
     void appendToMarkStack(JSCell*);
 
     template<typename ContainerType>
     void appendToMarkStack(ContainerType&, JSCell*);
 
-    void appendToMutatorMarkStack(const JSCell*);
-
     void noteLiveAuxiliaryCell(HeapCell*);
 
     void visitChildren(const JSCell*);
 
     void propagateExternalMemoryVisitedIfNecessary();
@@ -225,30 +225,34 @@
     void donateAll(const AbstractLocker&);
 
     bool hasWork(const AbstractLocker&);
     bool didReachTermination(const AbstractLocker&);
 
+#if CPU(X86_64)
+    NEVER_INLINE NO_RETURN_DUE_TO_CRASH NOT_TAIL_CALLED void reportZappedCellAndCrash(JSCell*);
+#endif
+
     template<typename Func>
     IterationStatus forEachMarkStack(const Func&);
 
     MarkStackArray& correspondingGlobalStack(MarkStackArray&);
 
     MarkStackArray m_collectorStack;
     MarkStackArray m_mutatorStack;
-    bool m_ignoreNewOpaqueRoots { false }; // Useful as a debugging mode.
 
     size_t m_bytesVisited;
     size_t m_visitCount;
     size_t m_nonCellVisitCount { 0 }; // Used for incremental draining, ignored otherwise.
     Checked<size_t, RecordOverflow> m_extraMemorySize { 0 };
     bool m_isInParallelMode;
+    bool m_ignoreNewOpaqueRoots { false }; // Useful as a debugging mode.
 
     HeapVersion m_markingVersion;
 
     Heap& m_heap;
 
-    HeapSnapshotBuilder* m_heapSnapshotBuilder { nullptr };
+    HeapAnalyzer* m_heapAnalyzer { nullptr };
     JSCell* m_currentCell { nullptr };
     RootMarkReason m_rootMarkReason { RootMarkReason::None };
     bool m_isFirstVisit { false };
     bool m_mutatorIsStopped { false };
     bool m_canOptimizeForStoppedMutator { false };
@@ -257,10 +261,12 @@
     CString m_codeName;
 
     MarkingConstraint* m_currentConstraint { nullptr };
     MarkingConstraintSolver* m_currentSolver { nullptr };
 
+    // Put padding here to mitigate false sharing between multiple SlotVisitors.
+    char padding[64];
 public:
 #if !ASSERT_DISABLED
     bool m_isCheckingForDefaultMarkViolation;
     bool m_isDraining;
 #endif
