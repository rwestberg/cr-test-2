diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Structure.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Structure.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Structure.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Structure.h
@@ -136,15 +136,17 @@
     static IsoSubspace* subspaceFor(VM& vm)
     {
         return &vm.structureSpace;
     }
 
+    JS_EXPORT_PRIVATE static bool isValidPrototype(JSValue);
+
 protected:
     void finishCreation(VM& vm)
     {
         Base::finishCreation(vm);
-        ASSERT(m_prototype.get().isEmpty() || m_prototype.isObject() || m_prototype.isNull());
+        ASSERT(m_prototype.get().isEmpty() || isValidPrototype(m_prototype.get()));
     }
 
     void finishCreation(VM& vm, const Structure* previous)
     {
         this->finishCreation(vm);
@@ -297,11 +299,11 @@
     // to our heap footprint. For example, if the structure refers to a global object that is not
     // yet marked, then as far as we know, the decision to mark this Structure would lead to a large
     // increase in footprint because no other object refers to that global object. This method
     // returns true if all user-controlled (and hence unbounded in size) objects referenced from the
     // Structure are already marked.
-    bool isCheapDuringGC();
+    bool isCheapDuringGC(VM&);
 
     // Returns true if this structure is now marked.
     bool markIfCheap(SlotVisitor&);
 
     bool hasRareData() const
@@ -784,18 +786,6 @@
     PropertyOffset m_offset;
 
     uint32_t m_propertyHash;
 };
 
-// We deliberately put Structure::create here in Structure.h instead of StructureInlines.h, because
-// it is used everywhere. This is so we don't have to hunt down all the places where we would need
-// to #include StructureInlines.h otherwise.
-inline Structure* Structure::create(VM& vm, JSGlobalObject* globalObject, JSValue prototype, const TypeInfo& typeInfo, const ClassInfo* classInfo, IndexingType indexingType, unsigned inlineCapacity)
-{
-    ASSERT(vm.structureStructure);
-    ASSERT(classInfo);
-    Structure* structure = new (NotNull, allocateCell<Structure>(vm.heap)) Structure(vm, globalObject, prototype, typeInfo, classInfo, indexingType, inlineCapacity);
-    structure->finishCreation(vm);
-    return structure;
-}
-
 } // namespace JSC
