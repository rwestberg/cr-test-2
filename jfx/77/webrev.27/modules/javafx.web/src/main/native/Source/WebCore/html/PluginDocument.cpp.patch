diff a/modules/javafx.web/src/main/native/Source/WebCore/html/PluginDocument.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/PluginDocument.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/PluginDocument.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/PluginDocument.cpp
@@ -23,10 +23,11 @@
  */
 
 #include "config.h"
 #include "PluginDocument.h"
 
+#include "CustomHeaderFields.h"
 #include "DocumentLoader.h"
 #include "Frame.h"
 #include "FrameLoader.h"
 #include "FrameLoaderClient.h"
 #include "FrameView.h"
@@ -79,27 +80,27 @@
     // Should not be able to zoom into standalone plug-in documents.
     document.processViewport("user-scalable=no"_s, ViewportArguments::PluginDocument);
 #endif
 
     auto body = HTMLBodyElement::create(document);
-    body->setAttributeWithoutSynchronization(marginwidthAttr, AtomicString("0", AtomicString::ConstructFromLiteral));
-    body->setAttributeWithoutSynchronization(marginheightAttr, AtomicString("0", AtomicString::ConstructFromLiteral));
+    body->setAttributeWithoutSynchronization(marginwidthAttr, AtomString("0", AtomString::ConstructFromLiteral));
+    body->setAttributeWithoutSynchronization(marginheightAttr, AtomString("0", AtomString::ConstructFromLiteral));
 #if PLATFORM(IOS_FAMILY)
-    body->setAttribute(styleAttr, AtomicString("background-color: rgb(217,224,233)", AtomicString::ConstructFromLiteral));
+    body->setAttribute(styleAttr, AtomString("background-color: rgb(217,224,233)", AtomString::ConstructFromLiteral));
 #else
-    body->setAttribute(styleAttr, AtomicString("background-color: rgb(38,38,38)", AtomicString::ConstructFromLiteral));
+    body->setAttribute(styleAttr, AtomString("background-color: rgb(38,38,38)", AtomString::ConstructFromLiteral));
 #endif
 
     rootElement->appendChild(body);
 
     auto embedElement = HTMLEmbedElement::create(document);
 
     m_embedElement = embedElement.ptr();
-    embedElement->setAttributeWithoutSynchronization(widthAttr, AtomicString("100%", AtomicString::ConstructFromLiteral));
-    embedElement->setAttributeWithoutSynchronization(heightAttr, AtomicString("100%", AtomicString::ConstructFromLiteral));
+    embedElement->setAttributeWithoutSynchronization(widthAttr, AtomString("100%", AtomString::ConstructFromLiteral));
+    embedElement->setAttributeWithoutSynchronization(heightAttr, AtomString("100%", AtomString::ConstructFromLiteral));
 
-    embedElement->setAttributeWithoutSynchronization(nameAttr, AtomicString("plugin", AtomicString::ConstructFromLiteral));
+    embedElement->setAttributeWithoutSynchronization(nameAttr, AtomString("plugin", AtomString::ConstructFromLiteral));
     embedElement->setAttributeWithoutSynchronization(srcAttr, document.url().string());
 
     ASSERT(document.loader());
     if (auto loader = makeRefPtr(document.loader()))
         m_embedElement->setAttributeWithoutSynchronization(typeAttr, loader->writer().mimeType());
@@ -138,12 +139,12 @@
             frame->loader().activeDocumentLoader()->setMainResourceDataBufferingPolicy(DataBufferingPolicy::DoNotBufferData);
         }
     }
 }
 
-PluginDocument::PluginDocument(Frame* frame, const URL& url)
-    : HTMLDocument(frame, url, PluginDocumentClass)
+PluginDocument::PluginDocument(Frame& frame, const URL& url)
+    : HTMLDocument(frame.sessionID(), &frame, url, PluginDocumentClass)
 {
     setCompatibilityMode(DocumentCompatibilityMode::QuirksMode);
     lockCompatibilityMode();
 }
 
