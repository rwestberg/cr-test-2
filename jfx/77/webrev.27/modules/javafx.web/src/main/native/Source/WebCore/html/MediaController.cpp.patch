diff a/modules/javafx.web/src/main/native/Source/WebCore/html/MediaController.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/MediaController.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/MediaController.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/MediaController.cpp
@@ -30,16 +30,19 @@
 
 #include "EventNames.h"
 #include "HTMLMediaElement.h"
 #include "TimeRanges.h"
 #include <pal/system/Clock.h>
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/StdLibExtras.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(MediaController);
+
 Ref<MediaController> MediaController::create(ScriptExecutionContext& context)
 {
     return adoptRef(*new MediaController(context));
 }
 
@@ -282,29 +285,29 @@
 
     for (auto& mediaElement : m_mediaElements)
         mediaElement->updateVolume();
 }
 
-static const AtomicString& playbackStateWaiting()
+static const AtomString& playbackStateWaiting()
 {
-    static NeverDestroyed<AtomicString> waiting("waiting", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> waiting("waiting", AtomString::ConstructFromLiteral);
     return waiting;
 }
 
-static const AtomicString& playbackStatePlaying()
+static const AtomString& playbackStatePlaying()
 {
-    static NeverDestroyed<AtomicString> playing("playing", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> playing("playing", AtomString::ConstructFromLiteral);
     return playing;
 }
 
-static const AtomicString& playbackStateEnded()
+static const AtomString& playbackStateEnded()
 {
-    static NeverDestroyed<AtomicString> ended("ended", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> ended("ended", AtomString::ConstructFromLiteral);
     return ended;
 }
 
-const AtomicString& MediaController::playbackState() const
+const AtomString& MediaController::playbackState() const
 {
     switch (m_playbackState) {
     case WAITING:
         return playbackStateWaiting();
     case PLAYING:
@@ -321,11 +324,11 @@
 {
     updateReadyState();
     updatePlaybackState();
 }
 
-static AtomicString eventNameForReadyState(MediaControllerInterface::ReadyState state)
+static AtomString eventNameForReadyState(MediaControllerInterface::ReadyState state)
 {
     switch (state) {
     case MediaControllerInterface::HAVE_NOTHING:
         return eventNames().emptiedEvent;
     case MediaControllerInterface::HAVE_METADATA:
@@ -431,11 +434,11 @@
     }
 
     // If the MediaController's most recently reported playback state is not equal to new playback state
     // then queue a task to fire a simple event at the MediaController object, whose name is playing
     // if new playback state is playing, ended if new playback state is ended, and waiting otherwise.
-    AtomicString eventName;
+    AtomString eventName;
     switch (newPlaybackState) {
     case WAITING:
         eventName = eventNames().waitingEvent;
         m_clock->stop();
         m_timeupdateTimer.stop();
@@ -528,11 +531,11 @@
             allHaveEnded = false;
     }
     return allHaveEnded;
 }
 
-void MediaController::scheduleEvent(const AtomicString& eventName)
+void MediaController::scheduleEvent(const AtomString& eventName)
 {
     m_pendingEvents.append(Event::create(eventName, Event::CanBubble::No, Event::IsCancelable::Yes));
     if (!m_asyncEventTimer.isActive())
         m_asyncEventTimer.startOneShot(0_s);
 }
