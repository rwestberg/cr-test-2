diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/image-decoders/ico/ICOImageDecoder.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/image-decoders/ico/ICOImageDecoder.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/image-decoders/ico/ICOImageDecoder.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/image-decoders/ico/ICOImageDecoder.cpp
@@ -59,11 +59,11 @@
 
     ScalableImageDecoder::setData(data, allDataReceived);
 
     for (BMPReaders::iterator i(m_bmpReaders.begin()); i != m_bmpReaders.end(); ++i) {
         if (*i)
-            (*i)->setData(&data);
+            (*i)->setData(*m_data);
     }
     for (size_t i = 0; i < m_pngDecoders.size(); ++i)
         setDataForPNGDecoderAtIndex(i);
 }
 
@@ -193,12 +193,12 @@
     if (imageType == BMP) {
         if (!m_bmpReaders[index]) {
             // We need to have already sized m_frameBufferCache before this, and
             // we must not resize it again later (see caution in frameCount()).
             ASSERT(m_frameBufferCache.size() == m_dirEntries.size());
-            m_bmpReaders[index] = std::make_unique<BMPImageReader>(this, dirEntry.m_imageOffset, 0, true);
-            m_bmpReaders[index]->setData(m_data.get());
+            m_bmpReaders[index] = makeUnique<BMPImageReader>(this, dirEntry.m_imageOffset, 0, true);
+            m_bmpReaders[index]->setData(*m_data);
             m_bmpReaders[index]->setBuffer(&m_frameBufferCache[index]);
         }
         m_frameSize = dirEntry.m_size;
         bool result = m_bmpReaders[index]->decodeBMP(false);
         m_frameSize = IntSize();
