diff a/modules/javafx.web/src/main/native/Source/WebCore/animation/WebAnimation.h b/modules/javafx.web/src/main/native/Source/WebCore/animation/WebAnimation.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/animation/WebAnimation.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/animation/WebAnimation.h
@@ -28,16 +28,12 @@
 #include "ActiveDOMObject.h"
 #include "DOMPromiseProxy.h"
 #include "EventTarget.h"
 #include "ExceptionOr.h"
 #include "WebAnimationUtilities.h"
-#include <wtf/Forward.h>
 #include <wtf/Markable.h>
-#include <wtf/Optional.h>
-#include <wtf/Ref.h>
 #include <wtf/RefCounted.h>
-#include <wtf/RefPtr.h>
 #include <wtf/Seconds.h>
 #include <wtf/UniqueRef.h>
 #include <wtf/WeakPtr.h>
 
 namespace WebCore {
@@ -48,10 +44,11 @@
 class Document;
 class Element;
 class RenderStyle;
 
 class WebAnimation : public RefCounted<WebAnimation>, public CanMakeWeakPtr<WebAnimation>, public EventTargetWithInlineData, public ActiveDOMObject {
+    WTF_MAKE_ISO_ALLOCATED(WebAnimation);
 public:
     static Ref<WebAnimation> create(Document&, AnimationEffect*);
     static Ref<WebAnimation> create(Document&, AnimationEffect*, AnimationTimeline*);
     ~WebAnimation();
 
@@ -119,10 +116,12 @@
     void unsuspendEffectInvalidation();
     void setSuspended(bool);
     bool isSuspended() const { return m_isSuspended; }
     virtual void remove();
 
+    bool hasPendingActivity() const final;
+
     using RefCounted::ref;
     using RefCounted::deref;
 
 protected:
     explicit WebAnimation(Document&);
@@ -136,11 +135,11 @@
     enum class AutoRewind : uint8_t { Yes, No };
     enum class TimeToRunPendingTask : uint8_t { NotScheduled, ASAP, WhenReady };
 
     void timingDidChange(DidSeek, SynchronouslyNotify);
     void updateFinishedState(DidSeek, SynchronouslyNotify);
-    void enqueueAnimationPlaybackEvent(const AtomicString&, Optional<Seconds>, Optional<Seconds>);
+    void enqueueAnimationPlaybackEvent(const AtomString&, Optional<Seconds>, Optional<Seconds>);
     Seconds effectEndTime() const;
     WebAnimation& readyPromiseResolve();
     WebAnimation& finishedPromiseResolve();
     Optional<Seconds> currentTime(RespectHoldTime) const;
     ExceptionOr<void> silentlySetCurrentTime(Optional<Seconds>);
