diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/bmalloc.cpp b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/bmalloc.cpp
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/bmalloc.cpp
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/bmalloc.cpp
@@ -53,12 +53,12 @@
 
     void* result;
     if (auto* debugHeap = DebugHeap::tryGet())
         result = debugHeap->memalignLarge(alignment, size);
     else {
-    kind = mapToActiveHeapKind(kind);
-    Heap& heap = PerProcess<PerHeapKind<Heap>>::get()->at(kind);
+        kind = mapToActiveHeapKind(kind);
+        Heap& heap = PerProcess<PerHeapKind<Heap>>::get()->at(kind);
 
         std::unique_lock<Mutex> lock(Heap::mutex());
         result = heap.tryAllocateLarge(lock, alignment, size);
         if (result) {
             // Don't track this as dirty memory that dictates how we drive the scavenger.
@@ -90,26 +90,28 @@
 
 void scavenge()
 {
     scavengeThisThread();
 
-    if (!DebugHeap::tryGet())
-    PerProcess<Scavenger>::get()->scavenge();
+    if (DebugHeap* debugHeap = DebugHeap::tryGet())
+        debugHeap->scavenge();
+    else
+        Scavenger::get()->scavenge();
 }
 
 bool isEnabled(HeapKind)
 {
-    return !PerProcess<Environment>::get()->isDebugHeapEnabled();
+    return !Environment::get()->isDebugHeapEnabled();
 }
 
 #if BOS(DARWIN)
 void setScavengerThreadQOSClass(qos_class_t overrideClass)
 {
     if (DebugHeap::tryGet())
         return;
     std::unique_lock<Mutex> lock(Heap::mutex());
-    PerProcess<Scavenger>::get()->setScavengerThreadQOSClass(overrideClass);
+    Scavenger::get()->setScavengerThreadQOSClass(overrideClass);
 }
 #endif
 
 void commitAlignedPhysical(void* object, size_t size, HeapKind kind)
 {
@@ -128,10 +130,10 @@
 }
 
 void enableMiniMode()
 {
     if (!DebugHeap::tryGet())
-    PerProcess<Scavenger>::get()->enableMiniMode();
+        Scavenger::get()->enableMiniMode();
 }
 
 } } // namespace bmalloc::api
 
