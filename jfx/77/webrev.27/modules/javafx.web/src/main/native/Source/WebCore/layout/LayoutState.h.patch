diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/LayoutState.h b/modules/javafx.web/src/main/native/Source/WebCore/layout/LayoutState.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/LayoutState.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/LayoutState.h
@@ -25,30 +25,29 @@
 
 #pragma once
 
 #if ENABLE(LAYOUT_FORMATTING_CONTEXT)
 
+#include "LayoutContainer.h"
 #include <wtf/HashMap.h>
 #include <wtf/HashSet.h>
 #include <wtf/IsoMalloc.h>
 #include <wtf/OptionSet.h>
+#include <wtf/WeakPtr.h>
 
 namespace WebCore {
 
-#if ENABLE(LAYOUT_FORMATTING_CONTEXT)
 class RenderView;
-#endif
 
 namespace Display {
 class Box;
 }
 
 namespace Layout {
 
 enum class StyleDiff;
 class Box;
-class Container;
 class FormattingContext;
 class FormattingState;
 
 // LayoutState is the entry point for layout. It takes the initial containing block which acts as the root of the layout context.
 // LayoutState::layout() generates the display tree for the root container's subtree (it does not run layout on the root though).
@@ -59,13 +58,17 @@
 class LayoutState {
     WTF_MAKE_ISO_ALLOCATED(LayoutState);
 public:
     LayoutState(const Container& initialContainingBlock);
 
+    // FIXME: This is a temporary entry point for LFC layout.
+    static void run(const RenderView&);
+
     void updateLayout();
     void styleChanged(const Box&, StyleDiff);
-    void setInQuirksMode(bool inQuirksMode) { m_inQuirksMode = inQuirksMode; }
+    enum class QuirksMode { No, Limited, Yes };
+    void setQuirksMode(QuirksMode quirksMode) { m_quirksMode = quirksMode; }
 
     enum class UpdateType {
         Overflow = 1 << 0,
         Position = 1 << 1,
         Size     = 1 << 2,
@@ -86,11 +89,13 @@
 #endif
 
     Display::Box& displayBoxForLayoutBox(const Box& layoutBox) const;
     bool hasDisplayBox(const Box& layoutBox) const { return m_layoutToDisplayBox.contains(&layoutBox); }
 
-    bool inQuirksMode() const { return m_inQuirksMode; }
+    bool inQuirksMode() const { return m_quirksMode == QuirksMode::Yes; }
+    bool inLimitedQuirksMode() const { return m_quirksMode == QuirksMode::Limited; }
+    bool inNoQuirksMode() const { return m_quirksMode == QuirksMode::No; }
     // For testing purposes only
     void verifyAndOutputMismatchingLayoutTree(const RenderView&) const;
 
 private:
     const Container& initialContainingBlock() const { return *m_initialContainingBlock; }
@@ -101,11 +106,11 @@
     HashMap<const Box*, std::unique_ptr<FormattingState>> m_formattingStates;
 #ifndef NDEBUG
     HashSet<const FormattingContext*> m_formattingContextList;
 #endif
     mutable HashMap<const Box*, std::unique_ptr<Display::Box>> m_layoutToDisplayBox;
-    bool m_inQuirksMode { false };
+    QuirksMode m_quirksMode { QuirksMode::No };
 };
 
 #ifndef NDEBUG
 inline void LayoutState::registerFormattingContext(const FormattingContext& formattingContext)
 {
