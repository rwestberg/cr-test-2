diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGGeometryElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGGeometryElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGGeometryElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGGeometryElement.cpp
@@ -22,10 +22,12 @@
 
 #include "config.h"
 #include "SVGGeometryElement.h"
 
 #include "DOMPoint.h"
+#include "RenderSVGResource.h"
+#include "RenderSVGShape.h"
 #include "SVGDocumentExtensions.h"
 #include "SVGPathUtilities.h"
 #include "SVGPoint.h"
 #include <wtf/IsoMallocInlines.h>
 
@@ -34,11 +36,14 @@
 WTF_MAKE_ISO_ALLOCATED_IMPL(SVGGeometryElement);
 
 SVGGeometryElement::SVGGeometryElement(const QualifiedName& tagName, Document& document)
     : SVGGraphicsElement(tagName, document)
 {
-    registerAttributes();
+    static std::once_flag onceFlag;
+    std::call_once(onceFlag, [] {
+        PropertyRegistry::registerProperty<SVGNames::pathLengthAttr, &SVGGeometryElement::m_pathLength>();
+    });
 }
 
 float SVGGeometryElement::getTotalLength() const
 {
     document().updateLayoutIgnorePendingStylesheets();
@@ -85,23 +90,15 @@
 
     FloatPoint point {static_cast<float>(pointInit.x), static_cast<float>(pointInit.y)};
     return renderer->isPointInStroke(point);
 }
 
-void SVGGeometryElement::registerAttributes()
-{
-    auto& registry = attributeRegistry();
-    if (!registry.isEmpty())
-        return;
-    registry.registerAttribute<SVGNames::pathLengthAttr, &SVGGeometryElement::m_pathLength>();
-}
-
-void SVGGeometryElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void SVGGeometryElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == SVGNames::pathLengthAttr) {
-        m_pathLength.setValue(value.toFloat());
-        if (m_pathLength.value() < 0)
+        m_pathLength->setBaseValInternal(value.toFloat());
+        if (m_pathLength->baseVal() < 0)
             document().accessSVGExtensions().reportError("A negative value for path attribute <pathLength> is not allowed");
         return;
     }
 
     SVGGraphicsElement::parseAttribute(name, value);
