diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/CacheStorageConnection.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/CacheStorageConnection.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/CacheStorageConnection.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/CacheStorageConnection.cpp
@@ -31,66 +31,38 @@
 #include <wtf/RandomNumber.h>
 
 namespace WebCore {
 using namespace WebCore::DOMCacheEngine;
 
-void CacheStorageConnection::open(const ClientOrigin& origin, const String& cacheName, CacheIdentifierCallback&& callback)
+static inline uint64_t formDataSize(const FormData& formData, PAL::SessionID sessionID)
 {
-    uint64_t requestIdentifier = ++m_lastRequestIdentifier;
-    m_openAndRemoveCachePendingRequests.add(requestIdentifier, WTFMove(callback));
+    if (isMainThread())
+        return formData.lengthInBytes(sessionID);
 
-    doOpen(requestIdentifier, origin, cacheName);
-}
-
-void CacheStorageConnection::remove(uint64_t cacheIdentifier, CacheIdentifierCallback&& callback)
-{
-    uint64_t requestIdentifier = ++m_lastRequestIdentifier;
-    m_openAndRemoveCachePendingRequests.add(requestIdentifier, WTFMove(callback));
-
-    doRemove(requestIdentifier, cacheIdentifier);
-}
-
-void CacheStorageConnection::retrieveCaches(const ClientOrigin& origin, uint64_t updateCounter, CacheInfosCallback&& callback)
-{
-    uint64_t requestIdentifier = ++m_lastRequestIdentifier;
-    m_retrieveCachesPendingRequests.add(requestIdentifier, WTFMove(callback));
-
-    doRetrieveCaches(requestIdentifier, origin, updateCounter);
-}
-
-void CacheStorageConnection::retrieveRecords(uint64_t cacheIdentifier, const URL& url, RecordsCallback&& callback)
-{
-    uint64_t requestIdentifier = ++m_lastRequestIdentifier;
-    m_retrieveRecordsPendingRequests.add(requestIdentifier, WTFMove(callback));
-
-    doRetrieveRecords(requestIdentifier, cacheIdentifier, url);
-}
-
-void CacheStorageConnection::batchDeleteOperation(uint64_t cacheIdentifier, const ResourceRequest& request, CacheQueryOptions&& options, RecordIdentifiersCallback&& callback)
-{
-    uint64_t requestIdentifier = ++m_lastRequestIdentifier;
-    m_batchDeleteAndPutPendingRequests.add(requestIdentifier, WTFMove(callback));
-
-    doBatchDeleteOperation(requestIdentifier, cacheIdentifier, request, WTFMove(options));
+    uint64_t resultSize;
+    callOnMainThreadAndWait([sessionID, formData = formData.isolatedCopy(), &resultSize] {
+        resultSize = formData->lengthInBytes(sessionID);
+    });
+    return resultSize;
 }
 
-static inline uint64_t computeRealBodySize(const DOMCacheEngine::ResponseBody& body)
+uint64_t CacheStorageConnection::computeRealBodySize(const DOMCacheEngine::ResponseBody& body)
 {
     uint64_t result = 0;
-    WTF::switchOn(body, [&] (const Ref<WebCore::FormData>& formData) {
-        result = formData->lengthInBytes();
-    }, [&] (const Ref<WebCore::SharedBuffer>& buffer) {
+    WTF::switchOn(body, [&] (const Ref<FormData>& formData) {
+        result = formDataSize(formData, sessionID());
+    }, [&] (const Ref<SharedBuffer>& buffer) {
         result = buffer->size();
     }, [] (const std::nullptr_t&) {
     });
     return result;
 }
 
-uint64_t CacheStorageConnection::computeRecordBodySize(const FetchResponse& response, const DOMCacheEngine::ResponseBody& body, ResourceResponse::Tainting tainting)
+uint64_t CacheStorageConnection::computeRecordBodySize(const FetchResponse& response, const DOMCacheEngine::ResponseBody& body)
 {
     if (!response.opaqueLoadIdentifier()) {
-        ASSERT_UNUSED(tainting, tainting != ResourceResponse::Tainting::Opaque);
+        ASSERT(response.tainting() != ResourceResponse::Tainting::Opaque);
         return computeRealBodySize(body);
     }
 
     return m_opaqueResponseToSizeWithPaddingMap.ensure(response.opaqueLoadIdentifier(), [&] () {
         uint64_t realSize = computeRealBodySize(body);
@@ -102,44 +74,6 @@
         m_opaqueResponseToSizeWithPaddingMap.set(response.opaqueLoadIdentifier(), sizeWithPadding);
         return sizeWithPadding;
     }).iterator->value;
 }
 
-void CacheStorageConnection::batchPutOperation(uint64_t cacheIdentifier, Vector<Record>&& records, RecordIdentifiersCallback&& callback)
-{
-    uint64_t requestIdentifier = ++m_lastRequestIdentifier;
-    m_batchDeleteAndPutPendingRequests.add(requestIdentifier, WTFMove(callback));
-
-    doBatchPutOperation(requestIdentifier, cacheIdentifier, WTFMove(records));
-}
-
-void CacheStorageConnection::openOrRemoveCompleted(uint64_t requestIdentifier, const CacheIdentifierOrError& result)
-{
-    if (auto callback = m_openAndRemoveCachePendingRequests.take(requestIdentifier))
-        callback(result);
-}
-
-void CacheStorageConnection::updateCaches(uint64_t requestIdentifier, CacheInfosOrError&& result)
-{
-    if (auto callback = m_retrieveCachesPendingRequests.take(requestIdentifier))
-        callback(WTFMove(result));
-}
-
-void CacheStorageConnection::updateRecords(uint64_t requestIdentifier, RecordsOrError&& result)
-{
-    if (auto callback = m_retrieveRecordsPendingRequests.take(requestIdentifier))
-        callback(WTFMove(result));
-}
-
-void CacheStorageConnection::deleteRecordsCompleted(uint64_t requestIdentifier, Expected<Vector<uint64_t>, Error>&& result)
-{
-    if (auto callback = m_batchDeleteAndPutPendingRequests.take(requestIdentifier))
-        callback(WTFMove(result));
-}
-
-void CacheStorageConnection::putRecordsCompleted(uint64_t requestIdentifier, Expected<Vector<uint64_t>, Error>&& result)
-{
-    if (auto callback = m_batchDeleteAndPutPendingRequests.take(requestIdentifier))
-        callback(WTFMove(result));
-}
-
 } // namespace WebCore
