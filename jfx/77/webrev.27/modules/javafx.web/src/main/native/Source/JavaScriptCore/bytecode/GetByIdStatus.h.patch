diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/GetByIdStatus.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/GetByIdStatus.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/GetByIdStatus.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/GetByIdStatus.h
@@ -42,12 +42,13 @@
 class JSModuleNamespaceObject;
 class ModuleNamespaceAccessCase;
 class StructureStubInfo;
 
 class GetByIdStatus {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    enum State {
+    enum State : uint8_t {
         // It's uncached so we have no information.
         NoInformation,
         // It's cached for a simple access to a known object property with
         // a possible structure chain and a possible specific value.
         Simple,
@@ -139,11 +140,11 @@
     JSModuleNamespaceObject* moduleNamespaceObject() const { return m_moduleNamespaceObject; }
     JSModuleEnvironment* moduleEnvironment() const { return m_moduleEnvironment; }
     ScopeOffset scopeOffset() const { return m_scopeOffset; }
 
     void markIfCheap(SlotVisitor&);
-    bool finalize(); // Return true if this gets to live.
+    bool finalize(VM&); // Return true if this gets to live.
 
     void dump(PrintStream&) const;
 
 private:
 #if ENABLE(JIT)
@@ -154,14 +155,15 @@
 #endif
     static GetByIdStatus computeFromLLInt(CodeBlock*, unsigned bytecodeIndex, UniquedStringImpl* uid);
 
     bool appendVariant(const GetByIdVariant&);
 
-    State m_state;
+
     Vector<GetByIdVariant, 1> m_variants;
-    bool m_wasSeenInJIT { false };
     JSModuleNamespaceObject* m_moduleNamespaceObject { nullptr };
     JSModuleEnvironment* m_moduleEnvironment { nullptr };
     ScopeOffset m_scopeOffset { };
+    State m_state;
+    bool m_wasSeenInJIT { false };
 };
 
 } // namespace JSC
