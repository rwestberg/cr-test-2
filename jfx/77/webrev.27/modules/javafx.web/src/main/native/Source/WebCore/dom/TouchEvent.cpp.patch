diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/TouchEvent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/TouchEvent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/TouchEvent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/TouchEvent.cpp
@@ -34,31 +34,31 @@
 
 namespace WebCore {
 
 TouchEvent::TouchEvent() = default;
 
-TouchEvent::TouchEvent(TouchList* touches, TouchList* targetTouches, TouchList* changedTouches, const AtomicString& type,
+TouchEvent::TouchEvent(TouchList* touches, TouchList* targetTouches, TouchList* changedTouches, const AtomString& type,
     RefPtr<WindowProxy>&& view, const IntPoint& globalLocation, OptionSet<Modifier> modifiers)
     : MouseRelatedEvent(type, IsCancelable::Yes, MonotonicTime::now(), WTFMove(view), globalLocation, modifiers)
     , m_touches(touches)
     , m_targetTouches(targetTouches)
     , m_changedTouches(changedTouches)
 {
 }
 
-TouchEvent::TouchEvent(const AtomicString& type, const Init& initializer, IsTrusted isTrusted)
+TouchEvent::TouchEvent(const AtomString& type, const Init& initializer, IsTrusted isTrusted)
     : MouseRelatedEvent(type, initializer, isTrusted)
     , m_touches(initializer.touches ? initializer.touches : TouchList::create())
     , m_targetTouches(initializer.targetTouches ? initializer.targetTouches : TouchList::create())
     , m_changedTouches(initializer.changedTouches ? initializer.changedTouches : TouchList::create())
 {
 }
 
 TouchEvent::~TouchEvent() = default;
 
 void TouchEvent::initTouchEvent(TouchList* touches, TouchList* targetTouches,
-        TouchList* changedTouches, const AtomicString& type,
+        TouchList* changedTouches, const AtomString& type,
         RefPtr<WindowProxy>&& view, int screenX, int screenY, int clientX, int clientY,
         bool ctrlKey, bool altKey, bool shiftKey, bool metaKey)
 {
     if (isBeingDispatched())
         return;
