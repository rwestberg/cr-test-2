diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/PlatformDisplay.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/PlatformDisplay.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/PlatformDisplay.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/PlatformDisplay.cpp
@@ -40,11 +40,11 @@
 
 #if PLATFORM(WIN)
 #include "PlatformDisplayWin.h"
 #endif
 
-#if USE(LIBWPE)
+#if USE(WPE_RENDERER)
 #include "PlatformDisplayLibWPE.h"
 #endif
 
 #if PLATFORM(GTK)
 #include <gtk/gtk.h>
@@ -52,11 +52,11 @@
 
 #if PLATFORM(GTK) && PLATFORM(X11)
 #include <gdk/gdkx.h>
 #endif
 
-#if PLATFORM(GTK) && PLATFORM(WAYLAND) && !defined(GTK_API_VERSION_2)
+#if PLATFORM(GTK) && PLATFORM(WAYLAND)
 #include <gdk/gdkwayland.h>
 #endif
 
 #if USE(EGL)
 #if USE(LIBEPOXY)
@@ -72,13 +72,10 @@
 namespace WebCore {
 
 std::unique_ptr<PlatformDisplay> PlatformDisplay::createPlatformDisplay()
 {
 #if PLATFORM(GTK)
-#if defined(GTK_API_VERSION_2)
-    return PlatformDisplayX11::create(GDK_DISPLAY_XDISPLAY(gdk_display_get_default()));
-#else
     if (gtk_init_check(nullptr, nullptr)) {
         GdkDisplay* display = gdk_display_manager_get_default_display(gdk_display_manager_get());
 #if PLATFORM(X11)
         if (GDK_IS_X11_DISPLAY(display))
             return PlatformDisplayX11::create(GDK_DISPLAY_XDISPLAY(display));
@@ -86,14 +83,13 @@
 #if PLATFORM(WAYLAND)
         if (GDK_IS_WAYLAND_DISPLAY(display))
             return PlatformDisplayWayland::create(gdk_wayland_display_get_wl_display(display));
 #endif
     }
-#endif
 #endif // PLATFORM(GTK)
 
-#if USE(LIBWPE)
+#if USE(WPE_RENDERER)
     return PlatformDisplayLibWPE::create();
 #elif PLATFORM(WIN)
     return PlatformDisplayWin::create();
 #endif
 
@@ -152,10 +148,12 @@
 PlatformDisplay::~PlatformDisplay()
 {
 #if USE(EGL)
     ASSERT(m_eglDisplay == EGL_NO_DISPLAY);
 #endif
+    if (s_sharedDisplayForCompositing == this)
+        s_sharedDisplayForCompositing = nullptr;
 }
 
 #if USE(EGL) || USE(GLX)
 GLContext* PlatformDisplay::sharingGLContext()
 {
