diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFaceSet.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFaceSet.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFaceSet.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFaceSet.cpp
@@ -117,11 +117,11 @@
 
         Ref<CSSValueList> familyList = CSSValueList::createCommaSeparated();
         familyList->append(CSSValuePool::singleton().createFontFamilyValue(familyName));
         face->setFamilies(familyList.get());
         face->setFontSelectionCapabilities(item);
-        face->adoptSource(std::make_unique<CSSFontFaceSource>(face.get(), familyName));
+        face->adoptSource(makeUnique<CSSFontFaceSource>(face.get(), familyName));
         ASSERT(!face->computeFailureState());
         faces.append(WTFMove(face));
     }
     m_locallyInstalledFacesLookupTable.add(familyName, WTFMove(faces));
 }
@@ -349,12 +349,12 @@
     auto family = style->getPropertyCSSValue(CSSPropertyFontFamily);
     if (!is<CSSValueList>(family))
         return Exception { SyntaxError };
     CSSValueList& familyList = downcast<CSSValueList>(*family);
 
-    HashSet<AtomicString> uniqueFamilies;
-    Vector<AtomicString> familyOrder;
+    HashSet<AtomString> uniqueFamilies;
+    Vector<AtomString> familyOrder;
     for (auto& family : familyList) {
         auto& primitive = downcast<CSSPrimitiveValue>(family.get());
         if (!primitive.isFontFamily())
             continue;
         if (uniqueFamilies.add(primitive.fontFamily().familyName).isNewEntry)
@@ -384,11 +384,11 @@
 
     Vector<std::reference_wrapper<CSSFontFace>> result;
     result.reserveInitialCapacity(resultConstituents.size());
     for (auto* constituent : resultConstituents)
         result.uncheckedAppend(*constituent);
-    return WTFMove(result);
+    return result;
 }
 
 ExceptionOr<bool> CSSFontFaceSet::check(const String& font, const String& text)
 {
     auto matchingFaces = this->matchingFacesExcludingPreinstalledFonts(font, text);
@@ -400,11 +400,11 @@
             return false;
     }
     return true;
 }
 
-CSSSegmentedFontFace* CSSFontFaceSet::fontFace(FontSelectionRequest request, const AtomicString& family)
+CSSSegmentedFontFace* CSSFontFaceSet::fontFace(FontSelectionRequest request, const AtomString& family)
 {
     auto iterator = m_facesLookupTable.find(family);
     if (iterator == m_facesLookupTable.end())
         return nullptr;
     auto& familyFontFaces = iterator->value;
