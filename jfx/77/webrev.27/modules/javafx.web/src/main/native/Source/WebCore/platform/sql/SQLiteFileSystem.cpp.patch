diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/sql/SQLiteFileSystem.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/sql/SQLiteFileSystem.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/sql/SQLiteFileSystem.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/sql/SQLiteFileSystem.cpp
@@ -31,10 +31,11 @@
 #include "config.h"
 #include "SQLiteFileSystem.h"
 
 #include "SQLiteDatabase.h"
 #include "SQLiteStatement.h"
+#include <pal/crypto/CryptoDigest.h>
 #include <sqlite3.h>
 #include <wtf/FileSystem.h>
 
 #if PLATFORM(IOS_FAMILY)
 #include <pal/spi/ios/SQLite3SPI.h>
@@ -44,15 +45,10 @@
 
 SQLiteFileSystem::SQLiteFileSystem()
 {
 }
 
-int SQLiteFileSystem::openDatabase(const String& filename, sqlite3** database, bool)
-{
-    return sqlite3_open_v2(FileSystem::fileSystemRepresentation(filename).data(), database, SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE | SQLITE_OPEN_AUTOPROXY, nullptr);
-}
-
 String SQLiteFileSystem::appendDatabaseFileNameToPath(const String& path, const String& fileName)
 {
     return FileSystem::pathByAppendingComponent(path, fileName);
 }
 
@@ -102,12 +98,23 @@
 }
 #endif
 
 long long SQLiteFileSystem::getDatabaseFileSize(const String& fileName)
 {
-    long long size;
-    return FileSystem::getFileSize(fileName, size) ? size : 0;
+    long long fileSize = 0;
+    long long totalSize = 0;
+
+    if (FileSystem::getFileSize(fileName, fileSize))
+        totalSize += fileSize;
+
+    if (FileSystem::getFileSize(makeString(fileName, "-wal"_s), fileSize))
+        totalSize += fileSize;
+
+    if (FileSystem::getFileSize(makeString(fileName, "-shm"_s), fileSize))
+        totalSize += fileSize;
+
+    return totalSize;
 }
 
 Optional<WallTime> SQLiteFileSystem::databaseCreationTime(const String& fileName)
 {
     return FileSystem::getFileCreationTime(fileName);
@@ -116,6 +123,24 @@
 Optional<WallTime> SQLiteFileSystem::databaseModificationTime(const String& fileName)
 {
     return FileSystem::getFileModificationTime(fileName);
 }
 
+String SQLiteFileSystem::computeHashForFileName(const String& fileName)
+{
+    auto cryptoDigest = PAL::CryptoDigest::create(PAL::CryptoDigest::Algorithm::SHA_256);
+    cryptoDigest->addBytes(fileName.utf8().data(), fileName.utf8().length());
+    auto digest = cryptoDigest->computeHash();
+
+    // Convert digest to hex.
+    char* start = 0;
+    unsigned digestLength = digest.size();
+    CString result = CString::newUninitialized(digestLength * 2, start);
+    char* buffer = start;
+    for (size_t i = 0; i < digestLength; ++i) {
+        snprintf(buffer, 3, "%02X", digest.at(i));
+        buffer += 2;
+    }
+    return String::fromUTF8(result);
+}
+
 } // namespace WebCore
