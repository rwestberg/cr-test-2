diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLIntegerLiteralType.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLIntegerLiteralType.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLIntegerLiteralType.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLIntegerLiteralType.cpp
@@ -37,22 +37,17 @@
 
 namespace WHLSL {
 
 namespace AST {
 
-IntegerLiteralType::IntegerLiteralType(Lexer::Token&& origin, int value)
-    : m_value(value)
-    , m_preferredType(makeUniqueRef<TypeReference>(WTFMove(origin), "int"_str, TypeArguments()))
+IntegerLiteralType::IntegerLiteralType(CodeLocation location, int value)
+    : ResolvableType(Kind::IntegerLiteral)
+    , m_value(value)
+    , m_preferredType(TypeReference::create(location, "int"_str, TypeArguments()))
 {
 }
 
-IntegerLiteralType::~IntegerLiteralType() = default;
-
-IntegerLiteralType::IntegerLiteralType(IntegerLiteralType&&) = default;
-
-IntegerLiteralType& IntegerLiteralType::operator=(IntegerLiteralType&&) = default;
-
 bool IntegerLiteralType::canResolve(const Type& type) const
 {
     if (!is<NamedType>(type))
         return false;
     auto& namedType = downcast<NamedType>(type);
@@ -71,10 +66,19 @@
     if (matches(unnamedType, m_preferredType))
         return 0;
     return 1;
 }
 
+IntegerLiteralType IntegerLiteralType::clone() const
+{
+    IntegerLiteralType result(m_preferredType->codeLocation(), m_value);
+    if (auto* type = maybeResolvedType())
+        result.resolve(const_cast<AST::UnnamedType&>(*type));
+    result.m_preferredType = m_preferredType.copyRef();
+    return result;
+}
+
 } // namespace AST
 
 }
 
 }
