diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSArrayBufferView.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSArrayBufferView.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSArrayBufferView.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSArrayBufferView.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -48,15 +48,16 @@
 }
 
 JSArrayBufferView::ConstructionContext::ConstructionContext(
     Structure* structure, uint32_t length, void* vector)
     : m_structure(structure)
-    , m_vector(vector)
+    , m_vector(vector, length)
     , m_length(length)
     , m_mode(FastTypedArray)
     , m_butterfly(nullptr)
 {
+    ASSERT(vector == removeArrayPtrTag(vector));
     RELEASE_ASSERT(length <= fastSizeLimit);
 }
 
 JSArrayBufferView::ConstructionContext::ConstructionContext(
     VM& vm, Structure* structure, uint32_t length, uint32_t elementSize,
@@ -72,15 +73,15 @@
         temp = vm.primitiveGigacageAuxiliarySpace.allocateNonVirtual(vm, size, nullptr, AllocationFailureMode::ReturnNull);
         if (!temp)
             return;
 
         m_structure = structure;
-        m_vector = temp;
+        m_vector = VectorType(temp, length);
         m_mode = FastTypedArray;
 
         if (mode == ZeroFill) {
-            uint64_t* asWords = static_cast<uint64_t*>(m_vector.getMayBeNull());
+            uint64_t* asWords = static_cast<uint64_t*>(vector());
             for (unsigned i = size / sizeof(uint64_t); i--;)
                 asWords[i] = 0;
         }
 
         return;
@@ -89,15 +90,15 @@
     // Don't allow a typed array to use more than 2GB.
     if (length > static_cast<unsigned>(INT_MAX) / elementSize)
         return;
 
     size_t size = static_cast<size_t>(length) * static_cast<size_t>(elementSize);
-    m_vector = Gigacage::tryMalloc(Gigacage::Primitive, size);
+    m_vector = VectorType(Gigacage::tryMalloc(Gigacage::Primitive, size), length);
     if (!m_vector)
         return;
     if (mode == ZeroFill)
-        memset(m_vector.get(), 0, size);
+        memset(vector(), 0, size);
 
     vm.heap.reportExtraMemoryAllocated(static_cast<size_t>(length) * elementSize);
 
     m_structure = structure;
     m_mode = OversizeTypedArray;
@@ -108,11 +109,12 @@
     unsigned byteOffset, unsigned length)
     : m_structure(structure)
     , m_length(length)
     , m_mode(WastefulTypedArray)
 {
-    m_vector = static_cast<uint8_t*>(arrayBuffer->data()) + byteOffset;
+    ASSERT(arrayBuffer->data() == removeArrayPtrTag(arrayBuffer->data()));
+    m_vector = VectorType(static_cast<uint8_t*>(arrayBuffer->data()) + byteOffset, length);
     IndexingHeader indexingHeader;
     indexingHeader.setArrayBuffer(arrayBuffer.get());
     m_butterfly = Butterfly::create(vm, 0, 0, 0, true, indexingHeader, 0);
 }
 
@@ -122,20 +124,22 @@
     : m_structure(structure)
     , m_length(length)
     , m_mode(DataViewMode)
     , m_butterfly(0)
 {
-    m_vector = static_cast<uint8_t*>(arrayBuffer->data()) + byteOffset;
+    ASSERT(arrayBuffer->data() == removeArrayPtrTag(arrayBuffer->data()));
+    m_vector = VectorType(static_cast<uint8_t*>(arrayBuffer->data()) + byteOffset, length);
 }
 
 JSArrayBufferView::JSArrayBufferView(VM& vm, ConstructionContext& context)
     : Base(vm, context.structure(), nullptr)
     , m_length(context.length())
     , m_mode(context.mode())
 {
     setButterfly(vm, context.butterfly());
-    m_vector.setWithoutBarrier(context.vector());
+    ASSERT(context.vector() == removeArrayPtrTag(context.vector()));
+    m_vector.setWithoutBarrier(context.vector(), m_length);
 }
 
 void JSArrayBufferView::finishCreation(VM& vm)
 {
     Base::finishCreation(vm);
@@ -158,10 +162,11 @@
 }
 
 void JSArrayBufferView::visitChildren(JSCell* cell, SlotVisitor& visitor)
 {
     JSArrayBufferView* thisObject = jsCast<JSArrayBufferView*>(cell);
+    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
     Base::visitChildren(cell, visitor);
 
     if (thisObject->hasArrayBuffer()) {
         WTF::loadLoadFence();
         ArrayBuffer* buffer = thisObject->possiblySharedBuffer();
@@ -192,11 +197,11 @@
 void JSArrayBufferView::finalize(JSCell* cell)
 {
     JSArrayBufferView* thisObject = static_cast<JSArrayBufferView*>(cell);
     ASSERT(thisObject->m_mode == OversizeTypedArray || thisObject->m_mode == WastefulTypedArray);
     if (thisObject->m_mode == OversizeTypedArray)
-        Gigacage::free(Gigacage::Primitive, thisObject->m_vector.get());
+        Gigacage::free(Gigacage::Primitive, thisObject->vector());
 }
 
 JSArrayBuffer* JSArrayBufferView::unsharedJSBuffer(ExecState* exec)
 {
     VM& vm = exec->vm();
@@ -249,11 +254,11 @@
     // arrays, and did nothing but caused all of them to slow down and waste memory.
     // In that case, your memory footprint will double before the GC realizes what's
     // up. But if you do *anything* to trigger a GC watermark check, it will know
     // that you *had* done those allocations and it will GC appropriately.
     Heap* heap = Heap::heap(this);
-    VM& vm = *heap->vm();
+    VM& vm = heap->vm();
     DeferGCForAWhile deferGC(*heap);
 
     RELEASE_ASSERT(!hasIndexingHeader(vm));
     Structure* structure = this->structure(vm);
     setButterfly(vm, Butterfly::createOrGrowArrayRight(
@@ -281,11 +286,11 @@
     }
 
     {
         auto locker = holdLock(cellLock());
         butterfly()->indexingHeader()->setArrayBuffer(buffer.get());
-        m_vector.setWithoutBarrier(buffer->data());
+        m_vector.setWithoutBarrier(buffer->data(), m_length);
         WTF::storeStoreFence();
         m_mode = WastefulTypedArray;
     }
     heap->addReference(this, buffer.get());
 
