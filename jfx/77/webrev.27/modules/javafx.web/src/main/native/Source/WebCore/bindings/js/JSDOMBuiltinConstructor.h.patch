diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMBuiltinConstructor.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMBuiltinConstructor.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMBuiltinConstructor.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMBuiltinConstructor.h
@@ -89,32 +89,28 @@
     if (!object)
         return throwConstructorScriptExecutionContextUnavailableError(state, scope, info()->className);
     return callConstructor(state, *object);
 }
 
-template<typename JSClass> inline
+template<typename JSClass>
 typename std::enable_if<JSDOMObjectInspector<JSClass>::isSimpleWrapper, JSC::JSObject&>::type createJSObject(JSDOMBuiltinConstructor<JSClass>& constructor)
 {
-    auto& globalObject = *constructor.globalObject();
-    return *JSClass::create(getDOMStructure<JSClass>(globalObject.vm(), globalObject), &globalObject, JSClass::DOMWrapped::create());
+    return *createWrapper<typename JSClass::DOMWrapped>(constructor.globalObject(), JSClass::DOMWrapped::create());
 }
 
-template<typename JSClass> inline
+template<typename JSClass>
 typename std::enable_if<JSDOMObjectInspector<JSClass>::isBuiltin, JSC::JSObject&>::type createJSObject(JSDOMBuiltinConstructor<JSClass>& constructor)
 {
     auto& globalObject = *constructor.globalObject();
     return *JSClass::create(getDOMStructure<JSClass>(globalObject.vm(), globalObject), &globalObject);
 }
 
-template<typename JSClass> inline
+template<typename JSClass>
 typename std::enable_if<JSDOMObjectInspector<JSClass>::isComplexWrapper, JSC::JSObject*>::type createJSObject(JSDOMBuiltinConstructor<JSClass>& constructor)
 {
-    ScriptExecutionContext* context = constructor.scriptExecutionContext();
-    if (!context)
-        return nullptr;
-    auto& globalObject = *constructor.globalObject();
-    return JSClass::create(getDOMStructure<JSClass>(globalObject.vm(), globalObject), &globalObject, JSClass::DOMWrapped::create(*context));
+    auto* context = constructor.scriptExecutionContext();
+    return context ? createWrapper<typename JSClass::DOMWrapped>(constructor.globalObject(), JSClass::DOMWrapped::create(*context)) : nullptr;
 }
 
 template<typename JSClass> inline JSC::EncodedJSValue JSC_HOST_CALL JSDOMBuiltinConstructor<JSClass>::construct(JSC::ExecState* state)
 {
     ASSERT(state);
