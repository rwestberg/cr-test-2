diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSInjectedScriptHost.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSInjectedScriptHost.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSInjectedScriptHost.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSInjectedScriptHost.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013, 2015-2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -29,24 +29,28 @@
 #include "ArrayIteratorPrototype.h"
 #include "ArrayPrototype.h"
 #include "BuiltinNames.h"
 #include "Completion.h"
 #include "DateInstance.h"
+#include "DeferGC.h"
 #include "DirectArguments.h"
 #include "Error.h"
 #include "FunctionPrototype.h"
+#include "HeapAnalyzer.h"
 #include "HeapIterationScope.h"
+#include "HeapProfiler.h"
 #include "InjectedScriptHost.h"
 #include "IterationKind.h"
 #include "IteratorOperations.h"
 #include "IteratorPrototype.h"
 #include "JSArray.h"
 #include "JSBoundFunction.h"
 #include "JSCInlines.h"
 #include "JSFunction.h"
 #include "JSGlobalObjectFunctions.h"
 #include "JSInjectedScriptHostPrototype.h"
+#include "JSLock.h"
 #include "JSMap.h"
 #include "JSPromise.h"
 #include "JSPromisePrototype.h"
 #include "JSSet.h"
 #include "JSStringIterator.h"
@@ -57,17 +61,26 @@
 #include "MapIteratorPrototype.h"
 #include "MapPrototype.h"
 #include "MarkedSpaceInlines.h"
 #include "ObjectConstructor.h"
 #include "ObjectPrototype.h"
+#include "PreventCollectionScope.h"
 #include "ProxyObject.h"
 #include "RegExpObject.h"
 #include "ScopedArguments.h"
 #include "SetIteratorPrototype.h"
 #include "SetPrototype.h"
 #include "SourceCode.h"
 #include "TypedArrayInlines.h"
+#include <wtf/Function.h>
+#include <wtf/HashFunctions.h>
+#include <wtf/HashMap.h>
+#include <wtf/HashSet.h>
+#include <wtf/HashTraits.h>
+#include <wtf/Lock.h>
+#include <wtf/PrintStream.h>
+#include <wtf/text/StringConcatenate.h>
 
 using namespace JSC;
 
 namespace Inspector {
 
@@ -100,10 +113,18 @@
 {
     JSGlobalObject* globalObject = exec->lexicalGlobalObject();
     return globalObject->evalFunction();
 }
 
+JSValue JSInjectedScriptHost::savedResultAlias(ExecState* exec) const
+{
+    auto savedResultAlias = impl().savedResultAlias();
+    if (!savedResultAlias)
+        return jsUndefined();
+    return jsString(exec->vm(), savedResultAlias.value());
+}
+
 JSValue JSInjectedScriptHost::evaluateWithScopeExtension(ExecState* exec)
 {
     VM& vm = exec->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
@@ -126,12 +147,13 @@
 JSValue JSInjectedScriptHost::internalConstructorName(ExecState* exec)
 {
     if (exec->argumentCount() < 1)
         return jsUndefined();
 
+    VM& vm = exec->vm();
     JSObject* object = jsCast<JSObject*>(exec->uncheckedArgument(0).toThis(exec, NotStrictMode));
-    return jsString(exec, JSObject::calculatedClassName(object));
+    return jsString(vm, JSObject::calculatedClassName(object));
 }
 
 JSValue JSInjectedScriptHost::isHTMLAllCollection(ExecState* exec)
 {
     if (exec->argumentCount() < 1)
@@ -140,10 +162,25 @@
     VM& vm = exec->vm();
     JSValue value = exec->uncheckedArgument(0);
     return jsBoolean(impl().isHTMLAllCollection(vm, value));
 }
 
+JSValue JSInjectedScriptHost::isPromiseRejectedWithNativeGetterTypeError(ExecState* exec)
+{
+    VM& vm = exec->vm();
+    auto scope = DECLARE_THROW_SCOPE(vm);
+
+    auto* promise = jsDynamicCast<JSPromise*>(vm, exec->argument(0));
+    if (!promise || promise->status(vm) != JSPromise::Status::Rejected)
+        return throwTypeError(exec, scope, "InjectedScriptHost.isPromiseRejectedWithNativeGetterTypeError first argument must be a rejected Promise."_s);
+
+    bool result = false;
+    if (auto* errorInstance = jsDynamicCast<ErrorInstance*>(vm, promise->result(vm)))
+        result = errorInstance->isNativeGetterTypeError();
+    return jsBoolean(result);
+}
+
 JSValue JSInjectedScriptHost::subtype(ExecState* exec)
 {
     VM& vm = exec->vm();
     if (exec->argumentCount() < 1)
         return jsUndefined();
@@ -158,56 +195,56 @@
     if (value.isSymbol())
         return vm.smallStrings.symbolString();
 
     if (auto* object = jsDynamicCast<JSObject*>(vm, value)) {
         if (object->isErrorInstance())
-            return jsNontrivialString(exec, "error"_s);
+            return jsNontrivialString(vm, "error"_s);
 
         // Consider class constructor functions class objects.
         JSFunction* function = jsDynamicCast<JSFunction*>(vm, value);
         if (function && function->isClassConstructorFunction())
-            return jsNontrivialString(exec, "class"_s);
+            return jsNontrivialString(vm, "class"_s);
 
         if (object->inherits<JSArray>(vm))
-            return jsNontrivialString(exec, "array"_s);
+            return jsNontrivialString(vm, "array"_s);
         if (object->inherits<DirectArguments>(vm) || object->inherits<ScopedArguments>(vm))
-            return jsNontrivialString(exec, "array"_s);
+            return jsNontrivialString(vm, "array"_s);
 
         if (object->inherits<DateInstance>(vm))
-            return jsNontrivialString(exec, "date"_s);
+            return jsNontrivialString(vm, "date"_s);
         if (object->inherits<RegExpObject>(vm))
-            return jsNontrivialString(exec, "regexp"_s);
+            return jsNontrivialString(vm, "regexp"_s);
         if (object->inherits<ProxyObject>(vm))
-            return jsNontrivialString(exec, "proxy"_s);
+            return jsNontrivialString(vm, "proxy"_s);
 
         if (object->inherits<JSMap>(vm))
-            return jsNontrivialString(exec, "map"_s);
+            return jsNontrivialString(vm, "map"_s);
         if (object->inherits<JSSet>(vm))
-            return jsNontrivialString(exec, "set"_s);
+            return jsNontrivialString(vm, "set"_s);
         if (object->inherits<JSWeakMap>(vm))
-            return jsNontrivialString(exec, "weakmap"_s);
+            return jsNontrivialString(vm, "weakmap"_s);
         if (object->inherits<JSWeakSet>(vm))
-            return jsNontrivialString(exec, "weakset"_s);
+            return jsNontrivialString(vm, "weakset"_s);
 
         if (object->inherits<JSStringIterator>(vm))
-            return jsNontrivialString(exec, "iterator"_s);
+            return jsNontrivialString(vm, "iterator"_s);
 
         if (object->getDirect(vm, vm.propertyNames->builtinNames().arrayIteratorNextIndexPrivateName())
             || object->getDirect(vm, vm.propertyNames->builtinNames().mapBucketPrivateName())
             || object->getDirect(vm, vm.propertyNames->builtinNames().setBucketPrivateName()))
-            return jsNontrivialString(exec, "iterator"_s);
+            return jsNontrivialString(vm, "iterator"_s);
 
         if (object->inherits<JSInt8Array>(vm)
             || object->inherits<JSInt16Array>(vm)
             || object->inherits<JSInt32Array>(vm)
             || object->inherits<JSUint8Array>(vm)
             || object->inherits<JSUint8ClampedArray>(vm)
             || object->inherits<JSUint16Array>(vm)
             || object->inherits<JSUint32Array>(vm)
             || object->inherits<JSFloat32Array>(vm)
             || object->inherits<JSFloat64Array>(vm))
-            return jsNontrivialString(exec, "array"_s);
+            return jsNontrivialString(vm, "array"_s);
     }
 
     return impl().subtype(exec, value);
 }
 
@@ -238,34 +275,34 @@
     if (columnNumber)
         columnNumber -= 1;
 
     String scriptID = String::number(sourceCode->provider()->asID());
     JSObject* location = constructEmptyObject(exec);
-    location->putDirect(vm, Identifier::fromString(exec, "scriptId"), jsString(exec, scriptID));
-    location->putDirect(vm, Identifier::fromString(exec, "lineNumber"), jsNumber(lineNumber));
-    location->putDirect(vm, Identifier::fromString(exec, "columnNumber"), jsNumber(columnNumber));
+    location->putDirect(vm, Identifier::fromString(vm, "scriptId"), jsString(vm, scriptID));
+    location->putDirect(vm, Identifier::fromString(vm, "lineNumber"), jsNumber(lineNumber));
+    location->putDirect(vm, Identifier::fromString(vm, "columnNumber"), jsNumber(columnNumber));
 
     JSObject* result = constructEmptyObject(exec);
-    result->putDirect(vm, Identifier::fromString(exec, "location"), location);
+    result->putDirect(vm, Identifier::fromString(vm, "location"), location);
 
     String name = function->name(vm);
     if (!name.isEmpty())
-        result->putDirect(vm, Identifier::fromString(exec, "name"), jsString(exec, name));
+        result->putDirect(vm, Identifier::fromString(vm, "name"), jsString(vm, name));
 
     String displayName = function->displayName(vm);
     if (!displayName.isEmpty())
-        result->putDirect(vm, Identifier::fromString(exec, "displayName"), jsString(exec, displayName));
+        result->putDirect(vm, Identifier::fromString(vm, "displayName"), jsString(vm, displayName));
 
     return result;
 }
 
 static JSObject* constructInternalProperty(ExecState* exec, const String& name, JSValue value)
 {
     VM& vm = exec->vm();
     JSObject* result = constructEmptyObject(exec);
-    result->putDirect(vm, Identifier::fromString(exec, "name"), jsString(exec, name));
-    result->putDirect(vm, Identifier::fromString(exec, "value"), value);
+    result->putDirect(vm, Identifier::fromString(vm, "name"), jsString(vm, name));
+    result->putDirect(vm, Identifier::fromString(vm, "value"), value);
     return result;
 }
 
 JSValue JSInjectedScriptHost::getInternalProperties(ExecState* exec)
 {
@@ -285,20 +322,20 @@
         JSArray* array = constructEmptyArray(exec, nullptr);
         RETURN_IF_EXCEPTION(scope, JSValue());
         switch (promise->status(vm)) {
         case JSPromise::Status::Pending:
             scope.release();
-            array->putDirectIndex(exec, index++, constructInternalProperty(exec, "status"_s, jsNontrivialString(exec, "pending"_s)));
+            array->putDirectIndex(exec, index++, constructInternalProperty(exec, "status"_s, jsNontrivialString(vm, "pending"_s)));
             return array;
         case JSPromise::Status::Fulfilled:
-            array->putDirectIndex(exec, index++, constructInternalProperty(exec, "status"_s, jsNontrivialString(exec, "resolved"_s)));
+            array->putDirectIndex(exec, index++, constructInternalProperty(exec, "status"_s, jsNontrivialString(vm, "resolved"_s)));
             RETURN_IF_EXCEPTION(scope, JSValue());
             scope.release();
             array->putDirectIndex(exec, index++, constructInternalProperty(exec, "result"_s, promise->result(vm)));
             return array;
         case JSPromise::Status::Rejected:
-            array->putDirectIndex(exec, index++, constructInternalProperty(exec, "status"_s, jsNontrivialString(exec, "rejected"_s)));
+            array->putDirectIndex(exec, index++, constructInternalProperty(exec, "status"_s, jsNontrivialString(vm, "rejected"_s)));
             RETURN_IF_EXCEPTION(scope, JSValue());
             scope.release();
             array->putDirectIndex(exec, index++, constructInternalProperty(exec, "result"_s, promise->result(vm)));
             return array;
         }
@@ -366,11 +403,11 @@
             JSArray* array = constructEmptyArray(exec, nullptr, 2);
             RETURN_IF_EXCEPTION(scope, JSValue());
             array->putDirectIndex(exec, index++, constructInternalProperty(exec, "map", iteratedValue));
             RETURN_IF_EXCEPTION(scope, JSValue());
             scope.release();
-            array->putDirectIndex(exec, index++, constructInternalProperty(exec, "kind", jsNontrivialString(exec, kind)));
+            array->putDirectIndex(exec, index++, constructInternalProperty(exec, "kind", jsNontrivialString(vm, kind)));
             return array;
         }
 
         if (iteratorObject->getDirect(vm, vm.propertyNames->builtinNames().setBucketPrivateName())) {
             JSValue iteratedValue = iteratorObject->getDirect(vm, vm.propertyNames->builtinNames().iteratedObjectPrivateName());
@@ -390,11 +427,11 @@
             JSArray* array = constructEmptyArray(exec, nullptr, 2);
             RETURN_IF_EXCEPTION(scope, JSValue());
             array->putDirectIndex(exec, index++, constructInternalProperty(exec, "set", iteratedValue));
             RETURN_IF_EXCEPTION(scope, JSValue());
             scope.release();
-            array->putDirectIndex(exec, index++, constructInternalProperty(exec, "kind", jsNontrivialString(exec, kind)));
+            array->putDirectIndex(exec, index++, constructInternalProperty(exec, "kind", jsNontrivialString(vm, kind)));
             return array;
         }
     }
 
     if (JSStringIterator* stringIterator = jsDynamicCast<JSStringIterator*>(vm, value)) {
@@ -466,12 +503,12 @@
     MarkedArgumentBuffer buffer;
     weakMap->takeSnapshot(buffer, numberToFetch);
 
     for (unsigned index = 0; index < buffer.size(); index += 2) {
         JSObject* entry = constructEmptyObject(exec);
-        entry->putDirect(vm, Identifier::fromString(exec, "key"), buffer.at(index));
-        entry->putDirect(vm, Identifier::fromString(exec, "value"), buffer.at(index + 1));
+        entry->putDirect(vm, Identifier::fromString(vm, "key"), buffer.at(index));
+        entry->putDirect(vm, Identifier::fromString(vm, "value"), buffer.at(index + 1));
         array->putDirectIndex(exec, index / 2, entry);
         RETURN_IF_EXCEPTION(scope, JSValue());
     }
 
     return array;
@@ -516,11 +553,11 @@
     MarkedArgumentBuffer buffer;
     weakSet->takeSnapshot(buffer, numberToFetch);
 
     for (unsigned index = 0; index < buffer.size(); ++index) {
         JSObject* entry = constructEmptyObject(exec);
-        entry->putDirect(vm, Identifier::fromString(exec, "value"), buffer.at(index));
+        entry->putDirect(vm, Identifier::fromString(vm, "value"), buffer.at(index));
         array->putDirectIndex(exec, index, entry);
         RETURN_IF_EXCEPTION(scope, JSValue());
     }
 
     return array;
@@ -615,11 +652,11 @@
 
         JSValue nextValue = iteratorValue(exec, next);
         RETURN_IF_EXCEPTION(scope, { });
 
         JSObject* entry = constructEmptyObject(exec);
-        entry->putDirect(vm, Identifier::fromString(exec, "value"), nextValue);
+        entry->putDirect(vm, Identifier::fromString(vm, "value"), nextValue);
         array->putDirectIndex(exec, i, entry);
         if (UNLIKELY(scope.exception())) {
             scope.release();
             iteratorClose(exec, iterationRecord);
             break;
@@ -636,25 +673,25 @@
 
     // Check that the prototype chain of proto hasn't been modified to include value.
     return JSObject::defaultHasInstance(exec, proto, value);
 }
 
-JSValue JSInjectedScriptHost::queryObjects(ExecState* exec)
+JSValue JSInjectedScriptHost::queryInstances(ExecState* exec)
 {
     if (exec->argumentCount() < 1)
         return jsUndefined();
 
     VM& vm = exec->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     JSValue prototypeOrConstructor = exec->uncheckedArgument(0);
     if (!prototypeOrConstructor.isObject())
-        return throwTypeError(exec, scope, "queryObjects first argument must be an object."_s);
+        return throwTypeError(exec, scope, "queryInstances first argument must be an object."_s);
 
     JSObject* object = asObject(prototypeOrConstructor);
     if (object->inherits<ProxyObject>(vm))
-        return throwTypeError(exec, scope, "queryObjects cannot be called with a Proxy."_s);
+        return throwTypeError(exec, scope, "queryInstances cannot be called with a Proxy."_s);
 
     JSValue prototype = object;
 
     PropertySlot prototypeSlot(object, PropertySlot::InternalMethodType::VMInquiry);
     if (object->getPropertySlot(exec, vm.propertyNames->prototype, prototypeSlot)) {
@@ -667,28 +704,28 @@
             }
         }
     }
 
     if (object->inherits<ProxyObject>(vm) || prototype.inherits<ProxyObject>(vm))
-        return throwTypeError(exec, scope, "queryObjects cannot be called with a Proxy."_s);
+        return throwTypeError(exec, scope, "queryInstances cannot be called with a Proxy."_s);
 
     // FIXME: implement a way of distinguishing between internal and user-created objects.
     JSGlobalObject* lexicalGlobalObject = exec->lexicalGlobalObject();
     if (checkForbiddenPrototype(exec, object, lexicalGlobalObject->objectPrototype()))
-        return throwTypeError(exec, scope, "queryObjects cannot be called with Object."_s);
+        return throwTypeError(exec, scope, "queryInstances cannot be called with Object."_s);
     if (checkForbiddenPrototype(exec, object, lexicalGlobalObject->functionPrototype()))
-        return throwTypeError(exec, scope, "queryObjects cannot be called with Function."_s);
+        return throwTypeError(exec, scope, "queryInstances cannot be called with Function."_s);
     if (checkForbiddenPrototype(exec, object, lexicalGlobalObject->arrayPrototype()))
-        return throwTypeError(exec, scope, "queryObjects cannot be called with Array."_s);
+        return throwTypeError(exec, scope, "queryInstances cannot be called with Array."_s);
     if (checkForbiddenPrototype(exec, object, lexicalGlobalObject->mapPrototype()))
-        return throwTypeError(exec, scope, "queryObjects cannot be called with Map."_s);
+        return throwTypeError(exec, scope, "queryInstances cannot be called with Map."_s);
     if (checkForbiddenPrototype(exec, object, lexicalGlobalObject->jsSetPrototype()))
-        return throwTypeError(exec, scope, "queryObjects cannot be called with Set."_s);
+        return throwTypeError(exec, scope, "queryInstances cannot be called with Set."_s);
     if (checkForbiddenPrototype(exec, object, lexicalGlobalObject->promisePrototype()))
-        return throwTypeError(exec, scope, "queryObjects cannot be called with Promise."_s);
+        return throwTypeError(exec, scope, "queryInstances cannot be called with Promise."_s);
 
-    sanitizeStackForVM(&vm);
+    sanitizeStackForVM(vm);
     vm.heap.collectNow(Sync, CollectionScope::Full);
 
     JSArray* array = constructEmptyArray(exec, nullptr);
     RETURN_IF_EXCEPTION(scope, { });
 
@@ -710,6 +747,171 @@
     }
 
     return array;
 }
 
+class HeapHolderFinder final : public HeapAnalyzer {
+    WTF_MAKE_FAST_ALLOCATED;
+public:
+    HeapHolderFinder(HeapProfiler& profiler, JSCell* target)
+        : HeapAnalyzer()
+        , m_target(target)
+    {
+        ASSERT(!profiler.activeHeapAnalyzer());
+        profiler.setActiveHeapAnalyzer(this);
+        profiler.vm().heap.collectNow(Sync, CollectionScope::Full);
+        profiler.setActiveHeapAnalyzer(nullptr);
+
+        HashSet<JSCell*> queue;
+
+        // Filter `m_holders` based on whether they're reachable from a non-Debugger root.
+        HashSet<JSCell*> visited;
+        for (auto* root : m_rootsToInclude)
+            queue.add(root);
+        while (auto* from = queue.takeAny()) {
+            if (m_rootsToIgnore.contains(from))
+                continue;
+            if (!visited.add(from).isNewEntry)
+                continue;
+            for (auto* to : m_successors.get(from))
+                queue.add(to);
+        }
+
+        // If a known holder is not an object, also consider all of the holder's holders.
+        for (auto* holder : m_holders)
+            queue.add(holder);
+        while (auto* holder = queue.takeAny()) {
+            if (holder->isObject())
+                continue;
+
+            for (auto* from : m_predecessors.get(holder)) {
+                if (!m_holders.contains(from)) {
+                    m_holders.add(from);
+                    queue.add(from);
+                }
+            }
+        }
+
+        m_holders.removeIf([&] (auto* holder) {
+            return !holder->isObject() || !visited.contains(holder);
+        });
+    }
+
+    HashSet<JSCell*>& holders() { return m_holders; }
+
+    void analyzeEdge(JSCell* from, JSCell* to, SlotVisitor::RootMarkReason reason)
+    {
+        ASSERT(to);
+        ASSERT(to->vm().heapProfiler()->activeHeapAnalyzer() == this);
+
+        auto locker = holdLock(m_mutex);
+
+        if (from && from != to) {
+            m_successors.ensure(from, [] {
+                return HashSet<JSCell*>();
+            }).iterator->value.add(to);
+
+            m_predecessors.ensure(to, [] {
+                return HashSet<JSCell*>();
+            }).iterator->value.add(from);
+
+            if (to == m_target)
+                m_holders.add(from);
+        }
+
+        if (reason == SlotVisitor::RootMarkReason::Debugger)
+            m_rootsToIgnore.add(to);
+        else if (!from || reason != SlotVisitor::RootMarkReason::None)
+            m_rootsToInclude.add(to);
+    }
+    void analyzePropertyNameEdge(JSCell* from, JSCell* to, UniquedStringImpl*) { analyzeEdge(from, to, SlotVisitor::RootMarkReason::None); }
+    void analyzeVariableNameEdge(JSCell* from, JSCell* to, UniquedStringImpl*) { analyzeEdge(from, to, SlotVisitor::RootMarkReason::None); }
+    void analyzeIndexEdge(JSCell* from, JSCell* to, uint32_t) { analyzeEdge(from, to, SlotVisitor::RootMarkReason::None); }
+
+    void analyzeNode(JSCell*) { }
+    void setOpaqueRootReachabilityReasonForCell(JSCell*, const char*) { }
+    void setWrappedObjectForCell(JSCell*, void*) { }
+    void setLabelForCell(JSCell*, const String&) { }
+
+#ifndef NDEBUG
+    void dump(PrintStream& out) const
+    {
+        Indentation<4> indent;
+
+        HashSet<JSCell*> visited;
+
+        Function<void(JSCell*)> visit = [&] (auto* from) {
+            auto isFirstVisit = visited.add(from).isNewEntry;
+
+            out.print(makeString(indent));
+
+            out.print("[ "_s);
+            if (from == m_target)
+                out.print("T "_s);
+            if (m_holders.contains(from))
+                out.print("H "_s);
+            if (m_rootsToIgnore.contains(from))
+                out.print("- "_s);
+            else if (m_rootsToInclude.contains(from))
+                out.print("+ "_s);
+            if (!isFirstVisit)
+                out.print("V "_s);
+            out.print("] "_s);
+
+            from->dump(out);
+
+            out.println();
+
+            if (isFirstVisit) {
+                IndentationScope<4> scope(indent);
+                for (auto* to : m_successors.get(from))
+                    visit(to);
+            }
+        };
+
+        for (auto* from : m_rootsToInclude)
+            visit(from);
+    }
+#endif
+
+private:
+    Lock m_mutex;
+    HashMap<JSCell*, HashSet<JSCell*>> m_predecessors;
+    HashMap<JSCell*, HashSet<JSCell*>> m_successors;
+    HashSet<JSCell*> m_rootsToInclude;
+    HashSet<JSCell*> m_rootsToIgnore;
+    HashSet<JSCell*> m_holders;
+    const JSCell* m_target;
+};
+
+JSValue JSInjectedScriptHost::queryHolders(ExecState* exec)
+{
+    if (exec->argumentCount() < 1)
+        return jsUndefined();
+
+    VM& vm = exec->vm();
+    auto scope = DECLARE_THROW_SCOPE(vm);
+
+    JSValue target = exec->uncheckedArgument(0);
+    if (!target.isObject())
+        return throwTypeError(exec, scope, "queryHolders first argument must be an object."_s);
+
+    JSArray* result = constructEmptyArray(exec, nullptr);
+    RETURN_IF_EXCEPTION(scope, { });
+
+    {
+        DeferGC deferGC(vm.heap);
+        PreventCollectionScope preventCollectionScope(vm.heap);
+        sanitizeStackForVM(vm);
+
+        HeapHolderFinder holderFinder(vm.ensureHeapProfiler(), target.asCell());
+
+        auto holders = copyToVector(holderFinder.holders());
+        std::sort(holders.begin(), holders.end());
+        for (auto* holder : holders)
+            result->putDirectIndex(exec, result->length(), holder);
+    }
+
+    return result;
+}
+
 } // namespace Inspector
