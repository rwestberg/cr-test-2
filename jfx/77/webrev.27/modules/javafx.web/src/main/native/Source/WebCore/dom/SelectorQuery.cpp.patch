diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/SelectorQuery.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/SelectorQuery.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/SelectorQuery.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/SelectorQuery.cpp
@@ -219,11 +219,11 @@
 ALWAYS_INLINE void SelectorDataList::executeFastPathForIdSelector(const ContainerNode& rootNode, const SelectorData& selectorData, const CSSSelector* idSelector, typename SelectorQueryTrait::OutputType& output) const
 {
     ASSERT(m_selectors.size() == 1);
     ASSERT(idSelector);
 
-    const AtomicString& idToMatch = idSelector->value();
+    const AtomString& idToMatch = idSelector->value();
     if (UNLIKELY(rootNode.treeScope().containsMultipleElementsWithId(idToMatch))) {
         const Vector<Element*>* elements = rootNode.treeScope().getAllElementsById(idToMatch);
         ASSERT(elements);
         bool rootNodeIsTreeScopeRoot = isTreeScopeRoot(rootNode);
         for (auto& element : *elements) {
@@ -261,11 +261,11 @@
     } while (selector);
 
     bool inAdjacentChain = false;
     for (; selector; selector = selector->tagHistory()) {
         if (canBeUsedForIdFastPath(*selector)) {
-            const AtomicString& idToMatch = selector->value();
+            const AtomString& idToMatch = selector->value();
             if (ContainerNode* searchRoot = rootNode.treeScope().getElementById(idToMatch)) {
                 if (LIKELY(!rootNode.treeScope().containsMultipleElementsWithId(idToMatch))) {
                     if (inAdjacentChain)
                         searchRoot = searchRoot->parentNode();
                     if (searchRoot && (isTreeScopeRoot(rootNode) || searchRoot == &rootNode || searchRoot->isDescendantOf(rootNode)))
@@ -281,20 +281,20 @@
             inAdjacentChain = false;
     }
     return rootNode;
 }
 
-static ALWAYS_INLINE bool localNameMatches(const Element& element, const AtomicString& localName, const AtomicString& lowercaseLocalName)
+static ALWAYS_INLINE bool localNameMatches(const Element& element, const AtomString& localName, const AtomString& lowercaseLocalName)
 {
     if (element.isHTMLElement() && element.document().isHTMLDocument())
         return element.localName() == lowercaseLocalName;
     return element.localName() == localName;
 
 }
 
 template <typename SelectorQueryTrait>
-static inline void elementsForLocalName(const ContainerNode& rootNode, const AtomicString& localName, const AtomicString& lowercaseLocalName, typename SelectorQueryTrait::OutputType& output)
+static inline void elementsForLocalName(const ContainerNode& rootNode, const AtomString& localName, const AtomString& lowercaseLocalName, typename SelectorQueryTrait::OutputType& output)
 {
     if (localName == lowercaseLocalName) {
         for (auto& element : elementDescendants(const_cast<ContainerNode&>(rootNode))) {
             if (element.tagQName().localName() == localName) {
                 SelectorQueryTrait::appendOutputForElement(output, &element);
@@ -329,13 +329,13 @@
 {
     ASSERT(m_selectors.size() == 1);
     ASSERT(isSingleTagNameSelector(*selectorData.selector));
 
     const QualifiedName& tagQualifiedName = selectorData.selector->tagQName();
-    const AtomicString& selectorLocalName = tagQualifiedName.localName();
-    const AtomicString& selectorLowercaseLocalName = selectorData.selector->tagLowercaseLocalName();
-    const AtomicString& selectorNamespaceURI = tagQualifiedName.namespaceURI();
+    const AtomString& selectorLocalName = tagQualifiedName.localName();
+    const AtomString& selectorLowercaseLocalName = selectorData.selector->tagLowercaseLocalName();
+    const AtomString& selectorNamespaceURI = tagQualifiedName.namespaceURI();
 
     if (selectorNamespaceURI == starAtom()) {
         if (selectorLocalName != starAtom()) {
             // Common case: name defined, selectorNamespaceURI is a wildcard.
             elementsForLocalName<SelectorQueryTrait>(rootNode, selectorLocalName, selectorLowercaseLocalName, output);
@@ -359,11 +359,11 @@
 ALWAYS_INLINE void SelectorDataList::executeSingleClassNameSelectorData(const ContainerNode& rootNode, const SelectorData& selectorData, typename SelectorQueryTrait::OutputType& output) const
 {
     ASSERT(m_selectors.size() == 1);
     ASSERT(isSingleClassNameSelector(*selectorData.selector));
 
-    const AtomicString& className = selectorData.selector->value();
+    const AtomString& className = selectorData.selector->value();
     for (auto& element : elementDescendants(const_cast<ContainerNode&>(rootNode))) {
         if (element.hasClass() && element.classNames().contains(className)) {
             SelectorQueryTrait::appendOutputForElement(output, &element);
             if (SelectorQueryTrait::shouldOnlyMatchFirstElement)
                 return;
@@ -631,9 +631,9 @@
 
     const int maximumSelectorQueryCacheSize = 256;
     if (m_entries.size() == maximumSelectorQueryCacheSize)
         m_entries.remove(m_entries.random());
 
-    return *m_entries.add(selectors, std::make_unique<SelectorQuery>(WTFMove(selectorList))).iterator->value;
+    return *m_entries.add(selectors, makeUnique<SelectorQuery>(WTFMove(selectorList))).iterator->value;
 }
 
 }
