diff a/modules/javafx.web/src/main/native/Source/WebCore/html/track/TextTrack.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/track/TextTrack.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/track/TextTrack.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/track/TextTrack.cpp
@@ -40,47 +40,50 @@
 #include "SourceBuffer.h"
 #include "TextTrackCueList.h"
 #include "TextTrackList.h"
 #include "VTTRegion.h"
 #include "VTTRegionList.h"
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/NeverDestroyed.h>
 
 namespace WebCore {
 
-const AtomicString& TextTrack::subtitlesKeyword()
+WTF_MAKE_ISO_ALLOCATED_IMPL(TextTrack);
+
+const AtomString& TextTrack::subtitlesKeyword()
 {
-    static NeverDestroyed<const AtomicString> subtitles("subtitles", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> subtitles("subtitles", AtomString::ConstructFromLiteral);
     return subtitles;
 }
 
-static const AtomicString& captionsKeyword()
+static const AtomString& captionsKeyword()
 {
-    static NeverDestroyed<const AtomicString> captions("captions", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> captions("captions", AtomString::ConstructFromLiteral);
     return captions;
 }
 
-static const AtomicString& descriptionsKeyword()
+static const AtomString& descriptionsKeyword()
 {
-    static NeverDestroyed<const AtomicString> descriptions("descriptions", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> descriptions("descriptions", AtomString::ConstructFromLiteral);
     return descriptions;
 }
 
-static const AtomicString& chaptersKeyword()
+static const AtomString& chaptersKeyword()
 {
-    static NeverDestroyed<const AtomicString> chapters("chapters", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> chapters("chapters", AtomString::ConstructFromLiteral);
     return chapters;
 }
 
-static const AtomicString& metadataKeyword()
+static const AtomString& metadataKeyword()
 {
-    static NeverDestroyed<const AtomicString> metadata("metadata", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> metadata("metadata", AtomString::ConstructFromLiteral);
     return metadata;
 }
 
-static const AtomicString& forcedKeyword()
+static const AtomString& forcedKeyword()
 {
-    static NeverDestroyed<const AtomicString> forced("forced", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> forced("forced", AtomString::ConstructFromLiteral);
     return forced;
 }
 
 TextTrack* TextTrack::captionMenuOffItem()
 {
@@ -92,11 +95,11 @@
 {
     static TextTrack& automatic = TextTrack::create(nullptr, nullptr, "automatic menu item", emptyAtom(), emptyAtom(), emptyAtom()).leakRef();
     return &automatic;
 }
 
-TextTrack::TextTrack(ScriptExecutionContext* context, TextTrackClient* client, const AtomicString& kind, const AtomicString& id, const AtomicString& label, const AtomicString& language, TextTrackType type)
+TextTrack::TextTrack(ScriptExecutionContext* context, TextTrackClient* client, const AtomString& kind, const AtomString& id, const AtomString& label, const AtomString& language, TextTrackType type)
     : TrackBase(TrackBase::TextTrack, id, label, language)
     , ContextDestructionObserver(context)
     , m_client(client)
     , m_trackType(type)
 {
@@ -129,11 +132,11 @@
 bool TextTrack::enabled() const
 {
     return m_mode != Mode::Disabled;
 }
 
-bool TextTrack::isValidKindKeyword(const AtomicString& value)
+bool TextTrack::isValidKindKeyword(const AtomString& value)
 {
     if (value == subtitlesKeyword())
         return true;
     if (value == captionsKeyword())
         return true;
@@ -147,11 +150,11 @@
         return true;
 
     return false;
 }
 
-const AtomicString& TextTrack::kindKeyword() const
+const AtomString& TextTrack::kindKeyword() const
 {
     switch (m_kind) {
     case Kind::Captions:
         return captionsKeyword();
     case Kind::Chapters:
@@ -335,11 +338,11 @@
     if (cue.track() != this)
         return Exception { NotFoundError };
     if (!m_cues)
         return Exception { InvalidStateError };
 
-    DEBUG_LOG(LOGIDENTIFIER, cue);
+    INFO_LOG(LOGIDENTIFIER, cue);
 
     // 2. Remove cue from the method's TextTrack object's text track's text track list of cues.
     m_cues->remove(cue);
     cue.setIsActive(false);
     cue.setTrack(nullptr);
@@ -543,11 +546,11 @@
 {
     return m_kind == Kind::Forced;
 }
 
 #if ENABLE(MEDIA_SOURCE)
-void TextTrack::setLanguage(const AtomicString& language)
+void TextTrack::setLanguage(const AtomString& language)
 {
     // 11.1 language, on setting:
     // 1. If the value being assigned to this attribute is not an empty string or a BCP 47 language
     // tag[BCP47], then abort these steps.
     // BCP 47 validation is done in TrackBase::setLanguage() which is
