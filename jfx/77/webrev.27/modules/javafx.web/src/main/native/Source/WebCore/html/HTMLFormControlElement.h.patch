diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFormControlElement.h b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFormControlElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFormControlElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFormControlElement.h
@@ -53,11 +53,11 @@
     WEBCORE_EXPORT void setFormEnctype(const String&);
     WEBCORE_EXPORT String formMethod() const;
     WEBCORE_EXPORT void setFormMethod(const String&);
     bool formNoValidate() const;
     WEBCORE_EXPORT String formAction() const;
-    WEBCORE_EXPORT void setFormAction(const AtomicString&);
+    WEBCORE_EXPORT void setFormAction(const AtomString&);
 
     void setAncestorDisabled(bool isDisabled);
 
     virtual void reset() { }
 
@@ -75,13 +75,13 @@
 
     bool isEnumeratable() const override { return false; }
 
     bool isRequired() const;
 
-    const AtomicString& type() const { return formControlType(); }
+    const AtomString& type() const { return formControlType(); }
 
-    virtual const AtomicString& formControlType() const = 0;
+    virtual const AtomString& formControlType() const = 0;
 
     virtual bool canTriggerImplicitSubmission() const { return false; }
 
     // Override in derived classes to get the encoded name=value pair for submitting.
     // Return true for a successful control (see HTML4-17.13.2).
@@ -128,11 +128,11 @@
 protected:
     HTMLFormControlElement(const QualifiedName& tagName, Document&, HTMLFormElement*);
 
     bool disabledByAncestorFieldset() const { return m_disabledByAncestorFieldset; }
 
-    void parseAttribute(const QualifiedName&, const AtomicString&) override;
+    void parseAttribute(const QualifiedName&, const AtomString&) override;
     virtual void disabledAttributeChanged();
     virtual void disabledStateChanged();
     virtual void readOnlyStateChanged();
     virtual void requiredStateChanged();
     void didAttachRenderers() override;
@@ -165,19 +165,18 @@
     bool matchesValidPseudoClass() const override;
     bool matchesInvalidPseudoClass() const override;
 
     bool isFormControlElement() const final { return true; }
 
-    int tabIndex() const final;
-
     bool isValidFormControlElement() const;
 
     bool computeIsDisabledByFieldsetAncestor() const;
 
     HTMLElement& asHTMLElement() final { return *this; }
     const HTMLFormControlElement& asHTMLElement() const final { return *this; }
-    HTMLFormControlElement* asFormNamedItem() final { return this; }
+    FormNamedItem* asFormNamedItem() final { return this; }
+    FormAssociatedElement* asFormAssociatedElement() final { return this; }
 
     bool needsMouseFocusableQuirk() const;
 
     std::unique_ptr<ValidationMessage> m_validationMessage;
     unsigned m_disabled : 1;
