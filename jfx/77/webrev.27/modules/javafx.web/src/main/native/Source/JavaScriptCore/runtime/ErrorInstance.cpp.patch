diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ErrorInstance.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ErrorInstance.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ErrorInstance.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ErrorInstance.cpp
@@ -1,8 +1,8 @@
 /*
  *  Copyright (C) 1999-2000 Harri Porten (porten@kde.org)
- *  Copyright (C) 2003-2017 Apple Inc. All rights reserved.
+ *  Copyright (C) 2003-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Lesser General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -64,12 +64,12 @@
     unsigned line = 0;
     unsigned column = 0;
 
     CodeBlock* codeBlock;
     CodeOrigin codeOrigin = callFrame->codeOrigin();
-    if (codeOrigin && codeOrigin.inlineCallFrame)
-        codeBlock = baselineCodeBlockForInlineCallFrame(codeOrigin.inlineCallFrame);
+    if (codeOrigin && codeOrigin.inlineCallFrame())
+        codeBlock = baselineCodeBlockForInlineCallFrame(codeOrigin.inlineCallFrame());
     else
         codeBlock = callFrame->codeBlock();
 
     codeBlock->expressionRangeForBytecodeOffset(bytecodeOffset, divotPoint, startOffset, endOffset, line, column);
 
@@ -78,12 +78,12 @@
 
     StringView sourceString = codeBlock->source().provider()->source();
     if (!expressionStop || expressionStart > static_cast<int>(sourceString.length()))
         return;
 
-    VM* vm = &callFrame->vm();
-    JSValue jsMessage = exception->getDirect(*vm, vm->propertyNames->message);
+    VM& vm = callFrame->vm();
+    JSValue jsMessage = exception->getDirect(vm, vm.propertyNames->message);
     if (!jsMessage || !jsMessage.isString())
         return;
 
     String message = asString(jsMessage)->value(callFrame);
     if (expressionStart < expressionStop)
@@ -103,20 +103,20 @@
             stop++;
         while (stop > expressionStart && isStrWhiteSpace(sourceString[stop - 1]))
             stop--;
         message = appender(message, codeBlock->source().provider()->getRange(start, stop).toString(), type, ErrorInstance::FoundApproximateSource);
     }
-    exception->putDirect(*vm, vm->propertyNames->message, jsString(vm, message));
+    exception->putDirect(vm, vm.propertyNames->message, jsString(vm, message));
 
 }
 
 void ErrorInstance::finishCreation(ExecState* exec, VM& vm, const String& message, bool useCurrentFrame)
 {
     Base::finishCreation(vm);
     ASSERT(inherits(vm, info()));
     if (!message.isNull())
-        putDirect(vm, vm.propertyNames->message, jsString(&vm, message), static_cast<unsigned>(PropertyAttribute::DontEnum));
+        putDirect(vm, vm.propertyNames->message, jsString(vm, message), static_cast<unsigned>(PropertyAttribute::DontEnum));
 
     std::unique_ptr<Vector<StackFrame>> stackTrace = getStackTrace(exec, vm, this, useCurrentFrame);
     {
         auto locker = holdLock(cellLock());
         m_stackTrace = WTFMove(stackTrace);
@@ -210,11 +210,11 @@
 
     // We don't want to keep our stack traces alive forever if the user doesn't access the stack trace.
     // If we did, we might end up keeping functions (and their global objects) alive that happened to
     // get caught in a trace.
     for (const auto& frame : *m_stackTrace.get()) {
-        if (!frame.isMarked()) {
+        if (!frame.isMarked(vm)) {
             computeErrorInfo(vm);
             return;
         }
     }
 }
@@ -239,13 +239,13 @@
 
     if (!m_stackString.isNull()) {
         putDirect(vm, vm.propertyNames->line, jsNumber(m_line));
         putDirect(vm, vm.propertyNames->column, jsNumber(m_column));
         if (!m_sourceURL.isEmpty())
-            putDirect(vm, vm.propertyNames->sourceURL, jsString(&vm, WTFMove(m_sourceURL)));
+            putDirect(vm, vm.propertyNames->sourceURL, jsString(vm, WTFMove(m_sourceURL)));
 
-        putDirect(vm, vm.propertyNames->stack, jsString(&vm, WTFMove(m_stackString)), static_cast<unsigned>(PropertyAttribute::DontEnum));
+        putDirect(vm, vm.propertyNames->stack, jsString(vm, WTFMove(m_stackString)), static_cast<unsigned>(PropertyAttribute::DontEnum));
     }
 
     m_errorInfoMaterialized = true;
     return true;
 }
