diff a/modules/javafx.web/src/main/native/Source/WebCore/page/UserContentProvider.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/UserContentProvider.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/UserContentProvider.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/UserContentProvider.cpp
@@ -24,19 +24,21 @@
  */
 
 #include "config.h"
 #include "UserContentProvider.h"
 
+#include "CustomHeaderFields.h"
 #include "Document.h"
 #include "DocumentLoader.h"
 #include "Frame.h"
 #include "FrameLoader.h"
 #include "Page.h"
 
 #if ENABLE(CONTENT_EXTENSIONS)
 #include "ContentExtensionCompiler.h"
 #include "ContentExtensionsBackend.h"
+#include "ContentRuleListResults.h"
 #endif
 
 namespace WebCore {
 
 UserContentProvider::UserContentProvider()
@@ -99,19 +101,19 @@
     }
 
     return true;
 }
 
-ContentExtensions::BlockedStatus UserContentProvider::processContentExtensionRulesForLoad(const URL& url, ResourceType resourceType, DocumentLoader& initiatingDocumentLoader)
+ContentRuleListResults UserContentProvider::processContentRuleListsForLoad(const URL& url, OptionSet<ContentExtensions::ResourceType> resourceType, DocumentLoader& initiatingDocumentLoader)
 {
     if (!contentExtensionsEnabled(initiatingDocumentLoader))
         return { };
 
-    return userContentExtensionBackend().processContentExtensionRulesForLoad(url, resourceType, initiatingDocumentLoader);
+    return userContentExtensionBackend().processContentRuleListsForLoad(url, resourceType, initiatingDocumentLoader);
 }
 
-std::pair<Vector<ContentExtensions::Action>, Vector<String>> UserContentProvider::actionsForResourceLoad(const ResourceLoadInfo& resourceLoadInfo, DocumentLoader& initiatingDocumentLoader)
+Vector<ContentExtensions::ActionsFromContentRuleList> UserContentProvider::actionsForResourceLoad(const ContentExtensions::ResourceLoadInfo& resourceLoadInfo, DocumentLoader& initiatingDocumentLoader)
 {
     if (!contentExtensionsEnabled(initiatingDocumentLoader))
         return { };
 
     return userContentExtensionBackend().actionsForResourceLoad(resourceLoadInfo);
