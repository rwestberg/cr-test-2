diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/yarr/YarrParser.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/yarr/YarrParser.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/yarr/YarrParser.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/yarr/YarrParser.h
@@ -583,11 +583,11 @@
     }
 
     /*
      * parseCharacterClass():
      *
-     * Helper for parseTokens(); calls dirctly and indirectly (via parseCharacterClassEscape)
+     * Helper for parseTokens(); calls directly and indirectly (via parseCharacterClassEscape)
      * to an instance of CharacterClassParserDelegate, to describe the character class to the
      * delegate.
      */
     void parseCharacterClass()
     {
@@ -1031,21 +1031,21 @@
 
         int ch = tryConsumeIdentifierCharacter();
 
         if (isIdentifierStart(ch)) {
             StringBuilder identifierBuilder;
-            identifierBuilder.append(ch);
+            identifierBuilder.appendCharacter(ch);
 
             while (!atEndOfPattern()) {
                 ch = tryConsumeIdentifierCharacter();
                 if (ch == '>')
                     return Optional<String>(identifierBuilder.toString());
 
                 if (!isIdentifierPart(ch))
                     break;
 
-                identifierBuilder.append(ch);
+                identifierBuilder.appendCharacter(ch);
             }
         }
 
         restoreState(state);
 
@@ -1062,11 +1062,11 @@
         StringBuilder expressionBuilder;
         String unicodePropertyName;
         bool foundEquals = false;
         unsigned errors = 0;
 
-        expressionBuilder.append(consume());
+        expressionBuilder.appendCharacter(consume());
 
         while (!atEndOfPattern()) {
             int ch = peek();
             if (ch == '}') {
                 consume();
@@ -1097,11 +1097,11 @@
                 } else
                     errors++;
             } else if (!isUnicodePropertyValueExpressionChar(ch))
                 errors++;
             else
-                expressionBuilder.append(ch);
+                expressionBuilder.appendCharacter(ch);
         }
 
         m_errorCode = ErrorCode::InvalidUnicodePropertyExpression;
         return WTF::nullopt;
     }
