diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/WeakRandom.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/WeakRandom.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/WeakRandom.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/WeakRandom.h
@@ -36,11 +36,12 @@
 
 namespace WTF {
 
 // The code used to generate random numbers are inlined manually in JIT code.
 // So it needs to stay in sync with the JIT one.
-class WeakRandom {
+class WeakRandom final {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     WeakRandom(unsigned seed = cryptographicallyRandomNumber())
     {
         setSeed(seed);
     }
@@ -85,21 +86,36 @@
     }
 
     static unsigned lowOffset() { return OBJECT_OFFSETOF(WeakRandom, m_low); }
     static unsigned highOffset() { return OBJECT_OFFSETOF(WeakRandom, m_high); }
 
+    static constexpr uint64_t nextState(uint64_t x, uint64_t y)
+    {
+        x ^= x << 23;
+        x ^= x >> 17;
+        x ^= y ^ (y >> 26);
+        return x;
+    }
+
+    static constexpr uint64_t generate(unsigned seed)
+    {
+        if (!seed)
+            seed = 1;
+        uint64_t low = seed;
+        uint64_t high = seed;
+        high = nextState(low, high);
+        return low + high;
+    }
+
 private:
     uint64_t advance()
     {
         uint64_t x = m_low;
         uint64_t y = m_high;
         m_low = y;
-        x ^= x << 23;
-        x ^= x >> 17;
-        x ^= y ^ (y >> 26);
-        m_high = x;
-        return x + y;
+        m_high = nextState(x, y);
+        return m_high + m_low;
     }
 
     unsigned m_seed;
     uint64_t m_low;
     uint64_t m_high;
