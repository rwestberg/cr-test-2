diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGGeometryElement.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGGeometryElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGGeometryElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGGeometryElement.h
@@ -1,10 +1,10 @@
 /*
  * Copyright (C) 2004, 2005, 2006, 2008 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005, 2006, 2007 Rob Buis <buis@kde.org>
  * Copyright (C) 2018 Adobe Systems Incorporated. All rights reserved.
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -21,11 +21,10 @@
  */
 
 #pragma once
 
 #include "Path.h"
-#include "SVGAnimatedNumber.h"
 #include "SVGGraphicsElement.h"
 #include "SVGNames.h"
 
 namespace WebCore {
 
@@ -33,37 +32,31 @@
 class SVGPoint;
 
 class SVGGeometryElement : public SVGGraphicsElement {
     WTF_MAKE_ISO_ALLOCATED(SVGGeometryElement);
 public:
-
     virtual float getTotalLength() const;
     virtual Ref<SVGPoint> getPointAtLength(float distance) const;
 
     bool isPointInFill(DOMPointInit&&);
     bool isPointInStroke(DOMPointInit&&);
 
-    using AttributeOwnerProxy = SVGAttributeOwnerProxyImpl<SVGGeometryElement, SVGGraphicsElement>;
-    static auto& attributeRegistry() { return AttributeOwnerProxy::attributeRegistry(); }
+    using PropertyRegistry = SVGPropertyOwnerRegistry<SVGGeometryElement, SVGGraphicsElement>;
 
-    auto pathLengthAnimated() { return m_pathLength.animatedProperty(attributeOwnerProxy()); }
+    float pathLength() const { return m_pathLength->currentValue(); }
+    SVGAnimatedNumber& pathLengthAnimated() { return m_pathLength; }
 
 protected:
     SVGGeometryElement(const QualifiedName&, Document&);
 
-    void parseAttribute(const QualifiedName&, const AtomicString&) override;
+    void parseAttribute(const QualifiedName&, const AtomString&) override;
     void svgAttributeChanged(const QualifiedName&) override;
 
 private:
     bool isSVGGeometryElement() const override { return true; }
-    const SVGAttributeOwnerProxy& attributeOwnerProxy() const override { return m_attributeOwnerProxy; }
-
-    static void registerAttributes();
-    static bool isKnownAttribute(const QualifiedName& attributeName) { return AttributeOwnerProxy::isKnownAttribute(attributeName); }
 
-    AttributeOwnerProxy m_attributeOwnerProxy { *this };
-    SVGAnimatedNumberAttribute m_pathLength;
+    Ref<SVGAnimatedNumber> m_pathLength { SVGAnimatedNumber::create(this) };
 };
 
 } // namespace WebCore
 
 SPECIALIZE_TYPE_TRAITS_BEGIN(WebCore::SVGGeometryElement)
