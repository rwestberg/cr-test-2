diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ImageBackingStore.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ImageBackingStore.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ImageBackingStore.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ImageBackingStore.h
@@ -64,11 +64,11 @@
 
         if (!buffer.tryReserveCapacity(bufferSize))
             return false;
 
         buffer.grow(bufferSize);
-        m_pixels = SharedBuffer::create(WTFMove(buffer));
+        m_pixels = SharedBuffer::DataSegment::create(WTFMove(buffer));
         m_pixelsPtr = reinterpret_cast<RGBA32*>(const_cast<char*>(m_pixels->data()));
         m_size = size;
         m_frameRect = IntRect(IntPoint(), m_size);
         clear();
         return true;
@@ -199,11 +199,13 @@
     ImageBackingStore(const ImageBackingStore& other)
         : m_size(other.m_size)
         , m_premultiplyAlpha(other.m_premultiplyAlpha)
     {
         ASSERT(!m_size.isEmpty() && !isOverSize(m_size));
-        m_pixels = SharedBuffer::create(other.m_pixels->data(), other.m_pixels->size());
+        Vector<char> buffer;
+        buffer.append(other.m_pixels->data(), other.m_pixels->size());
+        m_pixels = SharedBuffer::DataSegment::create(WTFMove(buffer));
         m_pixelsPtr = reinterpret_cast<RGBA32*>(const_cast<char*>(m_pixels->data()));
     }
 
     bool inBounds(const IntPoint& point) const
     {
@@ -224,11 +226,11 @@
             return makePremultipliedRGBA(r, g, b, a, false);
 
         return makeRGBA(r, g, b, a);
     }
 
-    RefPtr<SharedBuffer> m_pixels;
+    RefPtr<SharedBuffer::DataSegment> m_pixels;
     RGBA32* m_pixelsPtr { nullptr };
     IntSize m_size;
     IntRect m_frameRect; // This will always just be the entire buffer except for GIF and PNG frames
     bool m_premultiplyAlpha { true };
 };
