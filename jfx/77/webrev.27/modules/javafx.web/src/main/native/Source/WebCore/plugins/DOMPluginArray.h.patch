diff a/modules/javafx.web/src/main/native/Source/WebCore/plugins/DOMPluginArray.h b/modules/javafx.web/src/main/native/Source/WebCore/plugins/DOMPluginArray.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/plugins/DOMPluginArray.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/plugins/DOMPluginArray.h
@@ -20,30 +20,38 @@
 
 #pragma once
 
 #include "DOMPlugin.h"
 #include "DOMWindowProperty.h"
+#include "Navigator.h"
 #include "ScriptWrappable.h"
 #include <wtf/RefCounted.h>
 
 namespace WebCore {
 
 class PluginData;
 
-class DOMPluginArray : public ScriptWrappable, public RefCounted<DOMPluginArray>, public DOMWindowProperty {
+class DOMPluginArray final : public ScriptWrappable, public RefCounted<DOMPluginArray> {
+    WTF_MAKE_ISO_ALLOCATED(DOMPluginArray);
 public:
-    static Ref<DOMPluginArray> create(DOMWindow* window) { return adoptRef(*new DOMPluginArray(window)); }
+    static Ref<DOMPluginArray> create(Navigator& navigator) { return adoptRef(*new DOMPluginArray(navigator)); }
     ~DOMPluginArray();
 
     unsigned length() const;
     RefPtr<DOMPlugin> item(unsigned index);
-    RefPtr<DOMPlugin> namedItem(const AtomicString& propertyName);
-    Vector<AtomicString> supportedPropertyNames();
+    RefPtr<DOMPlugin> namedItem(const AtomString& propertyName);
+    Vector<AtomString> supportedPropertyNames();
 
     void refresh(bool reloadPages);
 
+    Navigator* navigator() { return m_navigator.get(); }
+
 private:
-    explicit DOMPluginArray(DOMWindow*);
+    explicit DOMPluginArray(Navigator&);
+
     PluginData* pluginData() const;
+    Frame* frame() const { return m_navigator ? m_navigator->frame() : nullptr; }
+
+    WeakPtr<Navigator> m_navigator;
 };
 
 } // namespace WebCore
