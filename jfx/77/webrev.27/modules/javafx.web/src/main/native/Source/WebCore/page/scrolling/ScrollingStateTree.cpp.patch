diff a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingStateTree.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingStateTree.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingStateTree.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingStateTree.cpp
@@ -24,18 +24,20 @@
  */
 
 #include "config.h"
 #include "ScrollingStateTree.h"
 
-#if ENABLE(ASYNC_SCROLLING) || USE(COORDINATED_GRAPHICS)
+#if ENABLE(ASYNC_SCROLLING)
 
 #include "AsyncScrollingCoordinator.h"
 #include "Logging.h"
 #include "ScrollingStateFixedNode.h"
 #include "ScrollingStateFrameHostingNode.h"
 #include "ScrollingStateFrameScrollingNode.h"
+#include "ScrollingStateOverflowScrollProxyNode.h"
 #include "ScrollingStateOverflowScrollingNode.h"
+#include "ScrollingStatePositionedNode.h"
 #include "ScrollingStateStickyNode.h"
 #include <wtf/text/CString.h>
 #include <wtf/text/TextStream.h>
 
 namespace WebCore {
@@ -69,14 +71,18 @@
         return ScrollingStateFrameScrollingNode::create(*this, nodeType, nodeID);
     case ScrollingNodeType::FrameHosting:
         return ScrollingStateFrameHostingNode::create(*this, nodeID);
     case ScrollingNodeType::Overflow:
         return ScrollingStateOverflowScrollingNode::create(*this, nodeID);
+    case ScrollingNodeType::OverflowProxy:
+        return ScrollingStateOverflowScrollProxyNode::create(*this, nodeID);
     case ScrollingNodeType::Fixed:
         return ScrollingStateFixedNode::create(*this, nodeID);
     case ScrollingNodeType::Sticky:
         return ScrollingStateStickyNode::create(*this, nodeID);
+    case ScrollingNodeType::Positioned:
+        return ScrollingStatePositionedNode::create(*this, nodeID);
     }
     ASSERT_NOT_REACHED();
     return ScrollingStateFixedNode::create(*this, nodeID);
 }
 
@@ -201,11 +207,11 @@
         return;
 
     LOG_WITH_STREAM(Scrolling, stream << "ScrollingStateTree " << this << " unparentNode " << nodeID);
 
     // The node may not be found if clear() was recently called.
-    RefPtr<ScrollingStateNode> protectedNode = m_stateNodeMap.get(nodeID);
+    auto protectedNode = m_stateNodeMap.get(nodeID);
     if (!protectedNode)
         return;
 
     if (protectedNode == m_rootStateNode)
         m_rootStateNode = nullptr;
@@ -220,11 +226,11 @@
         return;
 
     LOG_WITH_STREAM(Scrolling, stream << "ScrollingStateTree " << this << " unparentChildrenAndDestroyNode " << nodeID);
 
     // The node may not be found if clear() was recently called.
-    RefPtr<ScrollingStateNode> protectedNode = m_stateNodeMap.take(nodeID);
+    auto protectedNode = m_stateNodeMap.take(nodeID);
     if (!protectedNode)
         return;
 
     if (protectedNode == m_rootStateNode)
         m_rootStateNode = nullptr;
@@ -248,17 +254,17 @@
         return;
 
     LOG_WITH_STREAM(Scrolling, stream << "ScrollingStateTree " << this << " detachAndDestroySubtree " << nodeID);
 
     // The node may not be found if clear() was recently called.
-    auto* node = m_stateNodeMap.take(nodeID);
+    auto node = m_stateNodeMap.take(nodeID);
     if (!node)
         return;
 
     // If the node was unparented, remove it from m_unparentedNodes (keeping it alive until this function returns).
     auto unparentedNode = m_unparentedNodes.take(nodeID);
-    removeNodeAndAllDescendants(node);
+    removeNodeAndAllDescendants(node.get());
 }
 
 void ScrollingStateTree::clear()
 {
     if (rootStateNode())
@@ -269,11 +275,11 @@
 }
 
 void ScrollingStateTree::nodeWasReattachedRecursive(ScrollingStateNode& node)
 {
     // When a node is re-attached, the ScrollingTree is recreating the ScrollingNode from scratch, so we need to set all the dirty bits.
-    node.setAllPropertiesChanged();
+    node.setPropertyChangedBitsAfterReattach();
 
     if (auto* children = node.children()) {
         for (auto& child : *children)
             nodeWasReattachedRecursive(*child);
     }
@@ -285,11 +291,11 @@
         // We expect temporarily to have unparented nodes when committing when connecting across iframe boundaries, but unparented nodes should not stick around for a long time.
         LOG(Scrolling, "Committing with %u unparented nodes", m_unparentedNodes.size());
     }
 
     // This function clones and resets the current state tree, but leaves the tree structure intact.
-    std::unique_ptr<ScrollingStateTree> treeStateClone = std::make_unique<ScrollingStateTree>();
+    std::unique_ptr<ScrollingStateTree> treeStateClone = makeUnique<ScrollingStateTree>();
     treeStateClone->setPreferredLayerRepresentation(preferredLayerRepresentation);
 
     if (m_rootStateNode)
         treeStateClone->setRootStateNode(static_reference_cast<ScrollingStateFrameScrollingNode>(m_rootStateNode->cloneAndReset(*treeStateClone)));
 
@@ -357,11 +363,36 @@
     auto it = m_stateNodeMap.find(scrollLayerID);
     if (it == m_stateNodeMap.end())
         return nullptr;
 
     ASSERT(it->value->scrollingNodeID() == scrollLayerID);
-    return it->value;
+    return it->value.get();
+}
+
+void ScrollingStateTree::reconcileLayerPositionsRecursive(ScrollingStateNode& currNode, const LayoutRect& layoutViewport, ScrollingLayerPositionAction action)
+{
+    currNode.reconcileLayerPositionForViewportRect(layoutViewport, action);
+
+    if (!currNode.children())
+        return;
+
+    for (auto& child : *currNode.children()) {
+        // Never need to cross frame boundaries, since viewport rect reconciliation is per frame.
+        if (is<ScrollingStateFrameScrollingNode>(child))
+            continue;
+
+        reconcileLayerPositionsRecursive(*child, layoutViewport, action);
+    }
+}
+
+void ScrollingStateTree::reconcileViewportConstrainedLayerPositions(ScrollingNodeID scrollingNodeID, const LayoutRect& layoutViewport, ScrollingLayerPositionAction action)
+{
+    auto* scrollingNode = stateNodeForID(scrollingNodeID);
+    if (!scrollingNode)
+        return;
+
+    reconcileLayerPositionsRecursive(*scrollingNode, layoutViewport, action);
 }
 
 } // namespace WebCore
 
 #ifndef NDEBUG
@@ -388,6 +419,6 @@
     showScrollingStateTree(&node->scrollingStateTree());
 }
 
 #endif
 
-#endif // ENABLE(ASYNC_SCROLLING) || USE(COORDINATED_GRAPHICS)
+#endif // ENABLE(ASYNC_SCROLLING)
