diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/Widget.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/Widget.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/Widget.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/Widget.cpp
@@ -36,12 +36,15 @@
 void Widget::init(PlatformWidget widget)
 {
     m_selfVisible = false;
     m_parentVisible = false;
     m_widget = widget;
-    if (m_widget)
-        retainPlatformWidget();
+}
+
+ScrollView* Widget::parent() const
+{
+    return m_parent.get();
 }
 
 void Widget::setParent(ScrollView* view)
 {
     ASSERT(!view || !m_parent);
@@ -93,10 +96,19 @@
         return parentScrollView->convertToRootView(parentRect);
     }
     return localRect;
 }
 
+FloatRect Widget::convertToRootView(const FloatRect& localRect) const
+{
+    if (const ScrollView* parentScrollView = parent()) {
+        FloatRect parentRect = convertToContainingView(localRect);
+        return parentScrollView->convertToRootView(parentRect);
+    }
+    return localRect;
+}
+
 IntPoint Widget::convertFromRootView(const IntPoint& rootPoint) const
 {
     if (const ScrollView* parentScrollView = parent()) {
         IntPoint parentPoint = parentScrollView->convertFromRootView(rootPoint);
         return convertFromContainingView(parentPoint);
@@ -111,10 +123,29 @@
         return parentScrollView->convertToRootView(parentPoint);
     }
     return localPoint;
 }
 
+
+FloatPoint Widget::convertFromRootView(const FloatPoint& rootPoint) const
+{
+    if (const ScrollView* parentScrollView = parent()) {
+        FloatPoint parentPoint = parentScrollView->convertFromRootView(rootPoint);
+        return convertFromContainingView(parentPoint);
+    }
+    return rootPoint;
+}
+
+FloatPoint Widget::convertToRootView(const FloatPoint& localPoint) const
+{
+    if (const ScrollView* parentScrollView = parent()) {
+        FloatPoint parentPoint = convertToContainingView(localPoint);
+        return parentScrollView->convertToRootView(parentPoint);
+    }
+    return localPoint;
+}
+
 IntRect Widget::convertFromContainingWindow(const IntRect& windowRect) const
 {
     if (const ScrollView* parentScrollView = parent()) {
         IntRect parentRect = parentScrollView->convertFromContainingWindow(windowRect);
         return convertFromContainingView(parentRect);
@@ -202,10 +233,15 @@
     }
 
     return parentRect;
 }
 
+FloatRect Widget::convertToContainingView(const FloatRect& localRect) const
+{
+    return convertToContainingView(IntRect(localRect));
+}
+
 FloatRect Widget::convertFromContainingView(const FloatRect& parentRect) const
 {
     return convertFromContainingView(IntRect(parentRect));
 }
 
@@ -223,10 +259,20 @@
         return parentScrollView->convertSelfToChild(this, parentPoint);
 
     return parentPoint;
 }
 
+FloatPoint Widget::convertToContainingView(const FloatPoint& localPoint) const
+{
+    return convertToContainingView(IntPoint(localPoint));
+}
+
+FloatPoint Widget::convertFromContainingView(const FloatPoint& parentPoint) const
+{
+    return convertFromContainingView(IntPoint(parentPoint));
+}
+
 #if !PLATFORM(COCOA) && !PLATFORM(GTK) && !PLATFORM(WIN) && !PLATFORM(JAVA)
 
 Widget::~Widget()
 {
     ASSERT(!parent());
