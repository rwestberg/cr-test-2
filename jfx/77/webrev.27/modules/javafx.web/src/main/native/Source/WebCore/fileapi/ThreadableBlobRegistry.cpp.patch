diff a/modules/javafx.web/src/main/native/Source/WebCore/fileapi/ThreadableBlobRegistry.cpp b/modules/javafx.web/src/main/native/Source/WebCore/fileapi/ThreadableBlobRegistry.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/fileapi/ThreadableBlobRegistry.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/fileapi/ThreadableBlobRegistry.cpp
@@ -62,113 +62,101 @@
     });
 
     return *map;
 }
 
-static void postToMainThread(CrossThreadTask&& task)
+void ThreadableBlobRegistry::registerFileBlobURL(PAL::SessionID sessionID, const URL& url, const String& path, const String& contentType)
 {
-    static std::once_flag onceFlag;
-    static CrossThreadQueue<CrossThreadTask>* queue;
-    std::call_once(onceFlag, [] {
-        queue = new CrossThreadQueue<CrossThreadTask>;
-    });
-
-    queue->append(WTFMove(task));
+    if (isMainThread()) {
+        blobRegistry().registerFileBlobURL(sessionID, url, BlobDataFileReference::create(path), contentType);
+        return;
+    }
 
-    callOnMainThread([] {
-        auto task = queue->tryGetMessage();
-        ASSERT(task);
-        task->performTask();
+    callOnMainThread([sessionID, url = url.isolatedCopy(), path = path.isolatedCopy(), contentType = contentType.isolatedCopy()] {
+        blobRegistry().registerFileBlobURL(sessionID, url, BlobDataFileReference::create(path), contentType);
     });
 }
 
-void ThreadableBlobRegistry::registerFileBlobURL(const URL& url, const String& path, const String& contentType)
-{
-    if (isMainThread())
-        blobRegistry().registerFileBlobURL(url, BlobDataFileReference::create(path), contentType);
-    else {
-        callOnMainThread([url = url.isolatedCopy(), path = path.isolatedCopy(), contentType = contentType.isolatedCopy()] {
-            blobRegistry().registerFileBlobURL(url, BlobDataFileReference::create(path), contentType);
-        });
-    }
-}
-
-void ThreadableBlobRegistry::registerBlobURL(const URL& url, Vector<BlobPart>&& blobParts, const String& contentType)
+void ThreadableBlobRegistry::registerBlobURL(PAL::SessionID sessionID, const URL& url, Vector<BlobPart>&& blobParts, const String& contentType)
 {
-    if (isMainThread())
-        blobRegistry().registerBlobURL(url, WTFMove(blobParts), contentType);
-    else {
-        for (auto& part : blobParts)
-            part.detachFromCurrentThread();
-        callOnMainThread([url = url.isolatedCopy(), blobParts = WTFMove(blobParts), contentType = contentType.isolatedCopy()]() mutable {
-            blobRegistry().registerBlobURL(url, WTFMove(blobParts), contentType);
-        });
+    if (isMainThread()) {
+        blobRegistry().registerBlobURL(sessionID, url, WTFMove(blobParts), contentType);
+        return;
     }
+    for (auto& part : blobParts)
+        part.detachFromCurrentThread();
+    callOnMainThread([sessionID, url = url.isolatedCopy(), blobParts = WTFMove(blobParts), contentType = contentType.isolatedCopy()]() mutable {
+        blobRegistry().registerBlobURL(sessionID, url, WTFMove(blobParts), contentType);
+    });
 }
 
-void ThreadableBlobRegistry::registerBlobURL(SecurityOrigin* origin, const URL& url, const URL& srcURL)
+void ThreadableBlobRegistry::registerBlobURL(PAL::SessionID sessionID, SecurityOrigin* origin, const URL& url, const URL& srcURL)
 {
     // If the blob URL contains null origin, as in the context with unique security origin or file URL, save the mapping between url and origin so that the origin can be retrived when doing security origin check.
     if (origin && BlobURL::getOrigin(url) == "null")
         originMap()->add(url.string(), origin);
 
-    if (isMainThread())
-        blobRegistry().registerBlobURL(url, srcURL);
-    else {
-        callOnMainThread([url = url.isolatedCopy(), srcURL = srcURL.isolatedCopy()] {
-            blobRegistry().registerBlobURL(url, srcURL);
-        });
+    if (isMainThread()) {
+        blobRegistry().registerBlobURL(sessionID, url, srcURL);
+        return;
     }
+
+    callOnMainThread([sessionID, url = url.isolatedCopy(), srcURL = srcURL.isolatedCopy()] {
+        blobRegistry().registerBlobURL(sessionID, url, srcURL);
+    });
 }
 
-void ThreadableBlobRegistry::registerBlobURLOptionallyFileBacked(const URL& url, const URL& srcURL, const String& fileBackedPath, const String& contentType)
+void ThreadableBlobRegistry::registerBlobURLOptionallyFileBacked(PAL::SessionID sessionID, const URL& url, const URL& srcURL, const String& fileBackedPath, const String& contentType)
 {
-    if (isMainThread())
-        blobRegistry().registerBlobURLOptionallyFileBacked(url, srcURL, BlobDataFileReference::create(fileBackedPath), contentType);
-    else
-        postToMainThread(createCrossThreadTask(ThreadableBlobRegistry::registerBlobURLOptionallyFileBacked, url, srcURL, fileBackedPath, contentType));
+    if (isMainThread()) {
+        blobRegistry().registerBlobURLOptionallyFileBacked(sessionID, url, srcURL, BlobDataFileReference::create(fileBackedPath), contentType);
+        return;
+    }
+    callOnMainThread([sessionID, url = url.isolatedCopy(), srcURL = srcURL.isolatedCopy(), fileBackedPath = fileBackedPath.isolatedCopy(), contentType = contentType.isolatedCopy()] {
+        blobRegistry().registerBlobURLOptionallyFileBacked(sessionID, url, srcURL, BlobDataFileReference::create(fileBackedPath), contentType);
+    });
 }
 
-void ThreadableBlobRegistry::registerBlobURLForSlice(const URL& newURL, const URL& srcURL, long long start, long long end)
+void ThreadableBlobRegistry::registerBlobURLForSlice(PAL::SessionID sessionID, const URL& newURL, const URL& srcURL, long long start, long long end)
 {
-    if (isMainThread())
-        blobRegistry().registerBlobURLForSlice(newURL, srcURL, start, end);
-    else {
-        callOnMainThread([newURL = newURL.isolatedCopy(), srcURL = srcURL.isolatedCopy(), start, end] {
-            blobRegistry().registerBlobURLForSlice(newURL, srcURL, start, end);
-        });
+    if (isMainThread()) {
+        blobRegistry().registerBlobURLForSlice(sessionID, newURL, srcURL, start, end);
+        return;
     }
+
+    callOnMainThread([sessionID, newURL = newURL.isolatedCopy(), srcURL = srcURL.isolatedCopy(), start, end] {
+        blobRegistry().registerBlobURLForSlice(sessionID, newURL, srcURL, start, end);
+    });
 }
 
-unsigned long long ThreadableBlobRegistry::blobSize(const URL& url)
+unsigned long long ThreadableBlobRegistry::blobSize(PAL::SessionID sessionID, const URL& url)
 {
-    unsigned long long resultSize;
     if (isMainThread())
-        resultSize = blobRegistry().blobSize(url);
-    else {
-        BinarySemaphore semaphore;
-        callOnMainThread([url = url.isolatedCopy(), &semaphore, &resultSize] {
-            resultSize = blobRegistry().blobSize(url);
-            semaphore.signal();
-        });
-        semaphore.wait();
-    }
+        return blobRegistry().blobSize(sessionID, url);
+
+    unsigned long long resultSize;
+    BinarySemaphore semaphore;
+    callOnMainThread([sessionID, url = url.isolatedCopy(), &semaphore, &resultSize] {
+        resultSize = blobRegistry().blobSize(sessionID, url);
+        semaphore.signal();
+    });
+    semaphore.wait();
     return resultSize;
 }
 
-void ThreadableBlobRegistry::unregisterBlobURL(const URL& url)
+void ThreadableBlobRegistry::unregisterBlobURL(PAL::SessionID sessionID, const URL& url)
 {
     if (BlobURL::getOrigin(url) == "null")
         originMap()->remove(url.string());
 
-    if (isMainThread())
-        blobRegistry().unregisterBlobURL(url);
-    else {
-        callOnMainThread([url = url.isolatedCopy()] {
-            blobRegistry().unregisterBlobURL(url);
-        });
+    if (isMainThread()) {
+        blobRegistry().unregisterBlobURL(sessionID, url);
+        return;
     }
+    callOnMainThread([sessionID, url = url.isolatedCopy()] {
+        blobRegistry().unregisterBlobURL(sessionID, url);
+    });
 }
 
 RefPtr<SecurityOrigin> ThreadableBlobRegistry::getCachedOrigin(const URL& url)
 {
     return originMap()->get(url.string());
