diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGStoreBarrierInsertionPhase.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGStoreBarrierInsertionPhase.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGStoreBarrierInsertionPhase.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGStoreBarrierInsertionPhase.cpp
@@ -93,24 +93,24 @@
         }
 
         case PhaseMode::Global: {
             DFG_ASSERT(m_graph, nullptr, m_graph.m_form == SSA);
 
-            m_state = std::make_unique<InPlaceAbstractState>(m_graph);
-            m_interpreter = std::make_unique<AbstractInterpreter<InPlaceAbstractState>>(m_graph, *m_state);
+            m_state = makeUnique<InPlaceAbstractState>(m_graph);
+            m_interpreter = makeUnique<AbstractInterpreter<InPlaceAbstractState>>(m_graph, *m_state);
 
             m_isConverged = false;
 
             // First run the analysis. Inside basic blocks we use an epoch-based analysis that
             // is very precise. At block boundaries, we just propagate which nodes may need a
             // barrier. This gives us a very nice bottom->top fixpoint: we start out assuming
             // that no node needs any barriers at block boundaries, and then we converge
             // towards believing that all nodes need barriers. "Needing a barrier" is like
             // saying that the node is in a past epoch. "Not needing a barrier" is like saying
             // that the node is in the current epoch.
-            m_stateAtHead = std::make_unique<BlockMap<HashSet<Node*>>>(m_graph);
-            m_stateAtTail = std::make_unique<BlockMap<HashSet<Node*>>>(m_graph);
+            m_stateAtHead = makeUnique<BlockMap<HashSet<Node*>>>(m_graph);
+            m_stateAtTail = makeUnique<BlockMap<HashSet<Node*>>>(m_graph);
 
             BlockList postOrder = m_graph.blocksInPostOrder();
 
             bool changed = true;
             while (changed) {
@@ -476,17 +476,11 @@
 
         NodeOrigin origin = m_node->origin;
         if (clobbersExitState(m_graph, m_node))
             origin = origin.withInvalidExit();
 
-        NodeType type;
-        if (Options::useConcurrentBarriers())
-            type = FencedStoreBarrier;
-        else
-            type = StoreBarrier;
-
-        m_insertionSet.insertNode(nodeIndex, SpecNone, type, origin, base);
+        m_insertionSet.insertNode(nodeIndex, SpecNone, FencedStoreBarrier, origin, base);
     }
 
     bool reallyInsertBarriers()
     {
         return mode == PhaseMode::Fast || m_isConverged;
