diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/win/FileSystemWin.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/win/FileSystemWin.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/win/FileSystemWin.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/win/FileSystemWin.cpp
@@ -49,11 +49,11 @@
 
 static const ULONGLONG kSecondsFromFileTimeToTimet = 11644473600;
 
 static bool getFindData(String path, WIN32_FIND_DATAW& findData)
 {
-    HANDLE handle = FindFirstFileW(stringToNullTerminatedWChar(path).data(), &findData);
+    HANDLE handle = FindFirstFileW(path.wideCharacters().data(), &findData);
     if (handle == INVALID_HANDLE_VALUE)
         return false;
     FindClose(handle);
     return true;
 }
@@ -150,17 +150,17 @@
     auto handle = openFile(path, FileOpenMode::Read);
     if (!isHandleValid(handle))
         return String();
 
     Vector<UChar> buffer(MAX_PATH);
-    if (::GetFinalPathNameByHandleW(handle, buffer.data(), buffer.size(), VOLUME_NAME_NT) >= MAX_PATH) {
+    if (::GetFinalPathNameByHandleW(handle, wcharFrom(buffer.data()), buffer.size(), VOLUME_NAME_NT) >= MAX_PATH) {
         closeFile(handle);
         return String();
     }
     closeFile(handle);
 
-    buffer.shrink(wcslen(buffer.data()));
+    buffer.shrink(wcslen(wcharFrom(buffer.data())));
     return String::adopt(WTFMove(buffer));
 }
 
 static inline bool isSymbolicLink(WIN32_FIND_DATAW findData)
 {
@@ -219,11 +219,11 @@
     return findDataToFileMetadata(findData);
 }
 
 bool createSymbolicLink(const String& targetPath, const String& symbolicLinkPath)
 {
-    return !::CreateSymbolicLinkW(stringToNullTerminatedWChar(symbolicLinkPath).data(), stringToNullTerminatedWChar(targetPath).data(), 0);
+    return !::CreateSymbolicLinkW(symbolicLinkPath.wideCharacters().data(), targetPath.wideCharacters().data(), 0);
 }
 
 bool fileExists(const String& path)
 {
     WIN32_FIND_DATAW findData;
@@ -231,41 +231,39 @@
 }
 
 bool deleteFile(const String& path)
 {
     String filename = path;
-    return !!DeleteFileW(stringToNullTerminatedWChar(filename).data());
+    return !!DeleteFileW(filename.wideCharacters().data());
 }
 
 bool deleteEmptyDirectory(const String& path)
 {
     String filename = path;
-    return !!RemoveDirectoryW(stringToNullTerminatedWChar(filename).data());
+    return !!RemoveDirectoryW(filename.wideCharacters().data());
 }
 
 bool moveFile(const String& oldPath, const String& newPath)
 {
     String oldFilename = oldPath;
     String newFilename = newPath;
-    return !!::MoveFileEx(stringToNullTerminatedWChar(oldFilename).data(), stringToNullTerminatedWChar(newFilename).data(), MOVEFILE_COPY_ALLOWED | MOVEFILE_REPLACE_EXISTING);
+    return !!::MoveFileEx(oldFilename.wideCharacters().data(), newFilename.wideCharacters().data(), MOVEFILE_COPY_ALLOWED | MOVEFILE_REPLACE_EXISTING);
 }
 
 String pathByAppendingComponent(const String& path, const String& component)
 {
     Vector<UChar> buffer(MAX_PATH);
-
     if (path.length() + 1 > buffer.size())
         return String();
 
     StringView(path).getCharactersWithUpconvert(buffer.data());
     buffer[path.length()] = '\0';
 
-    if (!PathAppendW(buffer.data(), stringToNullTerminatedWChar(component).data()))
+    if (!PathAppendW(wcharFrom(buffer.data()), component.wideCharacters().data()))
         return String();
 
-    buffer.shrink(wcslen(buffer.data()));
-
+    buffer.shrink(wcslen(wcharFrom(buffer.data())));
     return String::adopt(WTFMove(buffer));
 }
 
 String pathByAppendingComponents(StringView path, const Vector<StringView>& components)
 {
@@ -277,13 +275,11 @@
 
 #if !USE(CF)
 
 CString fileSystemRepresentation(const String& path)
 {
-    auto upconvertedCharacters = StringView(path).upconvertedCharacters();
-
-    const UChar* characters = upconvertedCharacters;
+    auto characters = wcharFrom(StringView(path).upconvertedCharacters());
     int size = WideCharToMultiByte(CP_ACP, 0, characters, path.length(), 0, 0, 0, 0) - 1;
 
     char* buffer;
     CString string = CString::newUninitialized(size, buffer);
 
@@ -295,11 +291,11 @@
 #endif // !USE(CF)
 
 bool makeAllDirectories(const String& path)
 {
     String fullPath = path;
-    if (SHCreateDirectoryEx(0, stringToNullTerminatedWChar(fullPath).data(), 0) != ERROR_SUCCESS) {
+    if (SHCreateDirectoryEx(0, fullPath.wideCharacters().data(), 0) != ERROR_SUCCESS) {
         DWORD error = GetLastError();
         if (error != ERROR_FILE_EXISTS && error != ERROR_ALREADY_EXISTS) {
             LOG_ERROR("Failed to create path %s", path.ascii().data());
             return false;
         }
@@ -312,11 +308,11 @@
     return "";
 }
 
 String pathGetFileName(const String& path)
 {
-    return nullTerminatedWCharToString(::PathFindFileName(stringToNullTerminatedWChar(path).data()));
+    return String(::PathFindFileName(path.wideCharacters().data()));
 }
 
 String directoryName(const String& path)
 {
     String name = path.left(path.length() - pathGetFileName(path).length());
@@ -348,13 +344,14 @@
 }
 
 static String storageDirectory(DWORD pathIdentifier)
 {
     Vector<UChar> buffer(MAX_PATH);
-    if (FAILED(SHGetFolderPathW(0, pathIdentifier | CSIDL_FLAG_CREATE, 0, 0, buffer.data())))
+    if (FAILED(SHGetFolderPathW(0, pathIdentifier | CSIDL_FLAG_CREATE, 0, 0, wcharFrom(buffer.data()))))
         return String();
-    buffer.resize(wcslen(buffer.data()));
+
+    buffer.shrink(wcslen(wcharFrom(buffer.data())));
     String directory = String::adopt(WTFMove(buffer));
 
     directory = pathByAppendingComponent(directory, "Apple Computer\\" + bundleName());
     if (!makeAllDirectories(directory))
         return String();
@@ -395,11 +392,11 @@
         for (int i = 0; i < randomPartLength; ++i)
             tempFile[i] = validChars[tempFile[i] % (sizeof(validChars) - 1)];
 
         ASSERT(wcslen(tempFile) == WTF_ARRAY_LENGTH(tempFile) - 1);
 
-        proposedPath = pathByAppendingComponent(nullTerminatedWCharToString(tempPath), nullTerminatedWCharToString(tempFile));
+        proposedPath = pathByAppendingComponent(tempPath, tempFile);
         if (proposedPath.isEmpty())
             break;
     } while (!action(proposedPath));
 
     return proposedPath;
@@ -409,11 +406,11 @@
 {
     handle = INVALID_HANDLE_VALUE;
 
     String proposedPath = generateTemporaryPath([&handle](const String& proposedPath) {
         // use CREATE_NEW to avoid overwriting an existing file with the same name
-        handle = ::CreateFileW(stringToNullTerminatedWChar(proposedPath).data(), GENERIC_READ | GENERIC_WRITE, 0, 0, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, 0);
+        handle = ::CreateFileW(proposedPath.wideCharacters().data(), GENERIC_READ | GENERIC_WRITE, 0, 0, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, 0);
 
         return isHandleValid(handle) || GetLastError() == ERROR_ALREADY_EXISTS;
     });
 
     if (!isHandleValid(handle))
@@ -440,11 +437,11 @@
     default:
         ASSERT_NOT_REACHED();
     }
 
     String destination = path;
-    return CreateFile(stringToNullTerminatedWChar(destination).data(), desiredAccess, shareMode, 0, creationDisposition, FILE_ATTRIBUTE_NORMAL, 0);
+    return CreateFile(destination.wideCharacters().data(), desiredAccess, shareMode, 0, creationDisposition, FILE_ATTRIBUTE_NORMAL, 0);
 }
 
 void closeFile(PlatformFileHandle& handle)
 {
     if (isHandleValid(handle)) {
@@ -471,10 +468,18 @@
         return -1;
 
     return largeOffset.QuadPart;
 }
 
+bool truncateFile(PlatformFileHandle handle, long long offset)
+{
+    FILE_END_OF_FILE_INFO eofInfo;
+    eofInfo.EndOfFile.QuadPart = offset;
+
+    return SetFileInformationByHandle(handle, FileEndOfFileInfo, &eofInfo, sizeof(FILE_END_OF_FILE_INFO));
+}
+
 int writeToFile(PlatformFileHandle handle, const char* data, int length)
 {
     if (!isHandleValid(handle))
         return -1;
 
@@ -497,13 +502,22 @@
     if (!success)
         return -1;
     return static_cast<int>(bytesRead);
 }
 
+bool hardLink(const String& source, const String& destination)
+{
+    return CreateHardLink(destination.wideCharacters().data(), source.wideCharacters().data(), nullptr);
+}
+
 bool hardLinkOrCopyFile(const String& source, const String& destination)
 {
-    return !!::CopyFile(stringToNullTerminatedWChar(source).data(), stringToNullTerminatedWChar(destination).data(), TRUE);
+    if (hardLink(source, destination))
+        return true;
+
+    // Hard link failed. Perform a copy instead.
+    return !!::CopyFile(source.wideCharacters().data(), destination.wideCharacters().data(), TRUE);
 }
 
 String localUserSpecificStorageDirectory()
 {
     return cachedStorageDirectory(CSIDL_LOCAL_APPDATA);
@@ -570,17 +584,56 @@
 bool deleteNonEmptyDirectory(const String& directoryPath)
 {
     SHFILEOPSTRUCT deleteOperation = {
         nullptr,
         FO_DELETE,
-        stringToNullTerminatedWChar(directoryPath).data(),
+        directoryPath.wideCharacters().data(),
         L"",
         FOF_NOCONFIRMATION | FOF_NOERRORUI | FOF_SILENT,
         false,
         0,
         L""
     };
     return !SHFileOperation(&deleteOperation);
 }
 
+bool unmapViewOfFile(void* buffer, size_t)
+{
+    return UnmapViewOfFile(buffer);
+}
+
+MappedFileData::MappedFileData(const String& filePath, MappedFileMode mode, bool& success)
+{
+    auto file = CreateFile(filePath.wideCharacters().data(), GENERIC_READ, 0, nullptr, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, nullptr);
+
+    success = mapFileHandle(file, mode);
+    closeFile(file);
+}
+
+bool MappedFileData::mapFileHandle(PlatformFileHandle handle, MappedFileMode)
+{
+    if (!isHandleValid(handle))
+        return false;
+
+    long long size;
+    if (!getFileSize(handle, size) || size > std::numeric_limits<size_t>::max() || size > std::numeric_limits<decltype(m_fileSize)>::max()) {
+        return false;
+    }
+
+    if (!size) {
+        return true;
+    }
+
+    auto mapping = CreateFileMapping(handle, nullptr, PAGE_READONLY, 0, 0, nullptr);
+    if (!mapping)
+        return false;
+
+    m_fileData = MapViewOfFile(mapping, FILE_MAP_READ, 0, 0, size);
+    CloseHandle(mapping);
+    if (!m_fileData)
+        return false;
+    m_fileSize = size;
+    return true;
+}
+
 } // namespace FileSystemImpl
 } // namespace WTF
