diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPURenderPipeline.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPURenderPipeline.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPURenderPipeline.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPURenderPipeline.h
@@ -25,11 +25,13 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
+#include "GPUObjectBase.h"
 #include "GPURenderPipelineDescriptor.h"
+#include <wtf/Optional.h>
 #include <wtf/RefCounted.h>
 #include <wtf/RefPtr.h>
 #include <wtf/RetainPtr.h>
 
 #if USE(METAL)
@@ -41,31 +43,31 @@
 
 class GPUDevice;
 
 using PlatformRenderPipeline = MTLRenderPipelineState;
 using PlatformRenderPipelineSmartPtr = RetainPtr<MTLRenderPipelineState>;
-using PrimitiveTopology = GPURenderPipelineDescriptor::PrimitiveTopology;
 
-class GPURenderPipeline : public RefCounted<GPURenderPipeline> {
+class GPURenderPipeline : public GPUObjectBase {
 public:
-    static RefPtr<GPURenderPipeline> create(const GPUDevice&, GPURenderPipelineDescriptor&&);
+    static RefPtr<GPURenderPipeline> tryCreate(const GPUDevice&, const GPURenderPipelineDescriptor&, GPUErrorScopes&);
 
 #if USE(METAL)
     MTLDepthStencilState *depthStencilState() const { return m_depthStencilState.get(); }
 #endif
     PlatformRenderPipeline* platformRenderPipeline() const { return m_platformRenderPipeline.get(); }
-    PrimitiveTopology primitiveTopology() const { return m_primitiveTopology; }
+    GPUPrimitiveTopology primitiveTopology() const { return m_primitiveTopology; }
+    Optional<GPUIndexFormat> indexFormat() const { return m_indexFormat; }
 
 private:
 #if USE(METAL)
-    GPURenderPipeline(RetainPtr<MTLDepthStencilState>&&, PlatformRenderPipelineSmartPtr&&, GPURenderPipelineDescriptor&&);
+    GPURenderPipeline(RetainPtr<MTLDepthStencilState>&&, PlatformRenderPipelineSmartPtr&&, GPUPrimitiveTopology, Optional<GPUIndexFormat>, GPUErrorScopes&);
 
     RetainPtr<MTLDepthStencilState> m_depthStencilState;
 #endif // USE(METAL)
     PlatformRenderPipelineSmartPtr m_platformRenderPipeline;
-    RefPtr<GPUPipelineLayout> m_layout;
-    PrimitiveTopology m_primitiveTopology;
+    GPUPrimitiveTopology m_primitiveTopology;
+    Optional<GPUIndexFormat> m_indexFormat;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(WEBGPU)
