diff a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLConstructionSite.h b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLConstructionSite.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLConstructionSite.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLConstructionSite.h
@@ -102,19 +102,19 @@
     void insertComment(AtomicHTMLToken&&);
     void insertCommentOnDocument(AtomicHTMLToken&&);
     void insertCommentOnHTMLHtmlElement(AtomicHTMLToken&&);
     void insertHTMLElement(AtomicHTMLToken&&);
     std::unique_ptr<CustomElementConstructionData> insertHTMLElementOrFindCustomElementInterface(AtomicHTMLToken&&);
-    void insertCustomElement(Ref<Element>&&, const AtomicString& localName, Vector<Attribute>&&);
+    void insertCustomElement(Ref<Element>&&, const AtomString& localName, Vector<Attribute>&&);
     void insertSelfClosingHTMLElement(AtomicHTMLToken&&);
     void insertFormattingElement(AtomicHTMLToken&&);
     void insertHTMLHeadElement(AtomicHTMLToken&&);
     void insertHTMLBodyElement(AtomicHTMLToken&&);
     void insertHTMLFormElement(AtomicHTMLToken&&, bool isDemoted = false);
     void insertScriptElement(AtomicHTMLToken&&);
     void insertTextNode(const String&, WhitespaceMode = WhitespaceUnknown);
-    void insertForeignElement(AtomicHTMLToken&&, const AtomicString& namespaceURI);
+    void insertForeignElement(AtomicHTMLToken&&, const AtomString& namespaceURI);
 
     void insertHTMLHtmlStartTagBeforeHTML(AtomicHTMLToken&&);
     void insertHTMLHtmlStartTagInBody(AtomicHTMLToken&&);
     void insertHTMLBodyStartTagInBody(AtomicHTMLToken&&);
 
@@ -132,11 +132,11 @@
 
     Optional<unsigned> indexOfFirstUnopenFormattingElement() const;
     void reconstructTheActiveFormattingElements();
 
     void generateImpliedEndTags();
-    void generateImpliedEndTagsWithExclusion(const AtomicString& tagName);
+    void generateImpliedEndTagsWithExclusion(const AtomString& tagName);
 
     bool inQuirksMode() { return m_inQuirksMode; }
 
     bool isEmpty() const { return !m_openElements.stackDepth(); }
     Element& currentElement() const { return m_openElements.top(); }
@@ -170,11 +170,11 @@
 
     private:
         SetForScope<bool> m_redirectAttachToFosterParentChange;
     };
 
-    static bool isFormattingTag(const AtomicString&);
+    static bool isFormattingTag(const AtomString&);
 
 private:
     // In the common case, this queue will have only one task because most
     // tokens produce only one DOM mutation.
     typedef Vector<HTMLConstructionSiteTask, 1> TaskQueue;
@@ -186,11 +186,11 @@
 
     void findFosterSite(HTMLConstructionSiteTask&);
 
     RefPtr<Element> createHTMLElementOrFindCustomElementInterface(AtomicHTMLToken&, JSCustomElementInterface**);
     Ref<Element> createHTMLElement(AtomicHTMLToken&);
-    Ref<Element> createElement(AtomicHTMLToken&, const AtomicString& namespaceURI);
+    Ref<Element> createElement(AtomicHTMLToken&, const AtomString& namespaceURI);
 
     void mergeAttributesFromTokenIntoElement(AtomicHTMLToken&&, Element&);
     void dispatchDocumentElementAvailableIfNeeded();
 
     Document& m_document;
