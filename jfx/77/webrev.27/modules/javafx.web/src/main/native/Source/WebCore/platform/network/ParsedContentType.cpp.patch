diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ParsedContentType.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ParsedContentType.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ParsedContentType.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ParsedContentType.cpp
@@ -133,17 +133,17 @@
 
     if (quotedStringEnd >= inputLength)
         return WTF::nullopt;
 
     if (input[quotedStringEnd++] != '"' || quotedStringEnd >= inputLength)
-            return WTF::nullopt;
+        return WTF::nullopt;
 
     bool lastCharacterWasBackslash = false;
     char currentCharacter;
     while ((currentCharacter = input[quotedStringEnd++]) != '"' || lastCharacterWasBackslash) {
         if (quotedStringEnd >= inputLength)
-                return WTF::nullopt;
+            return WTF::nullopt;
         if (currentCharacter == '\\' && !lastCharacterWasBackslash) {
             lastCharacterWasBackslash = true;
             continue;
         }
         if (lastCharacterWasBackslash)
@@ -290,23 +290,23 @@
         Optional<StringView> valueRange;
         if (index < contentTypeLength && m_contentType[index] == '"') {
             if (mode == Mode::MimeSniff) {
                 parameterValue = collectHTTPQuotedString(m_contentType, index);
                 parseToken(m_contentType, index, isNotSemicolon, mode);
-        } else
+            } else
                 valueRange = parseQuotedString(m_contentType, index);
         } else
             valueRange = parseToken(m_contentType, index, isNotSemicolon, mode, mode == Mode::MimeSniff);
 
 
         if (parameterValue.isNull()) {
-        if (!valueRange) {
-            if (mode == Mode::MimeSniff)
-                continue;
-            LOG_ERROR("Invalid Content-Type, invalid parameter value.");
-            return false;
-        }
+            if (!valueRange) {
+                if (mode == Mode::MimeSniff)
+                    continue;
+                LOG_ERROR("Invalid Content-Type, invalid parameter value.");
+                return false;
+            }
             parameterValue = valueRange->toString();
         }
 
         // Should we tolerate spaces here?
         if (mode == Mode::Rfc2045 && index < contentTypeLength && m_contentType[index++] != ';') {
@@ -344,10 +344,15 @@
 String ParsedContentType::charset() const
 {
     return parameterValueForName("charset");
 }
 
+void ParsedContentType::setCharset(String&& charset)
+{
+    m_parameterValues.set("charset"_s, WTFMove(charset));
+}
+
 String ParsedContentType::parameterValueForName(const String& name) const
 {
     return m_parameterValues.get(name);
 }
 
