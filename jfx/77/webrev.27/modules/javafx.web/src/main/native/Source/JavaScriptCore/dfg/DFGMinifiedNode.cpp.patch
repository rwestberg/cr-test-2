diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGMinifiedNode.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGMinifiedNode.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGMinifiedNode.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGMinifiedNode.cpp
@@ -26,26 +26,29 @@
 #include "config.h"
 #include "DFGMinifiedNode.h"
 
 #if ENABLE(DFG_JIT)
 
+#include "DFGMinifiedIDInlines.h"
 #include "DFGNode.h"
 #include "JSCInlines.h"
 
 namespace JSC { namespace DFG {
 
 MinifiedNode MinifiedNode::fromNode(Node* node)
 {
     ASSERT(belongsInMinifiedGraph(node->op()));
     MinifiedNode result;
     result.m_id = MinifiedID(node);
-    result.m_op = node->op();
+    result.m_hasConstant = hasConstant(node->op());
+    result.m_isPhantomDirectArguments = node->op() == PhantomDirectArguments;
+    result.m_isPhantomClonedArguments = node->op() == PhantomClonedArguments;
     if (hasConstant(node->op()))
         result.m_info = JSValue::encode(node->asJSValue());
     else {
         ASSERT(node->op() == PhantomDirectArguments || node->op() == PhantomClonedArguments);
-        result.m_info = bitwise_cast<uintptr_t>(node->origin.semantic.inlineCallFrame);
+        result.m_info = bitwise_cast<uintptr_t>(node->origin.semantic.inlineCallFrame());
     }
     return result;
 }
 
 } } // namespace JSC::DFG
