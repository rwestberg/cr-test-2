diff a/modules/javafx.web/src/main/native/Source/WebCore/html/BaseChooserOnlyDateAndTimeInputType.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/BaseChooserOnlyDateAndTimeInputType.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/BaseChooserOnlyDateAndTimeInputType.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/BaseChooserOnlyDateAndTimeInputType.cpp
@@ -59,11 +59,11 @@
         return;
 }
 
 void BaseChooserOnlyDateAndTimeInputType::createShadowSubtree()
 {
-    static NeverDestroyed<AtomicString> valueContainerPseudo("-webkit-date-and-time-value", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> valueContainerPseudo("-webkit-date-and-time-value", AtomString::ConstructFromLiteral);
 
     ASSERT(element());
     auto valueContainer = HTMLDivElement::create(element()->document());
     valueContainer->setPseudo(valueContainerPseudo);
     element()->userAgentShadowRoot()->appendChild(valueContainer);
@@ -111,14 +111,14 @@
 {
     if (m_dateTimeChooser)
         m_dateTimeChooser->endChooser();
 }
 
-void BaseChooserOnlyDateAndTimeInputType::handleKeydownEvent(KeyboardEvent& event)
+auto BaseChooserOnlyDateAndTimeInputType::handleKeydownEvent(KeyboardEvent& event) -> ShouldCallBaseEventHandler
 {
     ASSERT(element());
-    BaseClickableWithKeyInputType::handleKeydownEvent(*element(), event);
+    return BaseClickableWithKeyInputType::handleKeydownEvent(*element(), event);
 }
 
 void BaseChooserOnlyDateAndTimeInputType::handleKeypressEvent(KeyboardEvent& event)
 {
     ASSERT(element());
