diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCacheEngine.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCacheEngine.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCacheEngine.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCacheEngine.h
@@ -30,10 +30,11 @@
 #include "FetchOptions.h"
 #include "ResourceRequest.h"
 #include "ResourceResponse.h"
 #include "ScriptExecutionContext.h"
 #include "SharedBuffer.h"
+#include <wtf/CompletionHandler.h>
 
 namespace WebCore {
 
 struct CacheQueryOptions;
 
@@ -42,11 +43,12 @@
 enum class Error {
     NotImplemented,
     ReadDisk,
     WriteDisk,
     QuotaExceeded,
-    Internal
+    Internal,
+    Stopped
 };
 
 Exception convertToExceptionAndLog(ScriptExecutionContext*, Error);
 
 WEBCORE_EXPORT bool queryCacheMatch(const ResourceRequest& request, const ResourceRequest& cachedRequest, const ResourceResponse&, const CacheQueryOptions&);
@@ -96,23 +98,23 @@
     // True in case storing cache list on the filesystem failed.
     bool hadStorageError { false };
 };
 
 using CacheIdentifierOrError = Expected<CacheIdentifierOperationResult, Error>;
-using CacheIdentifierCallback = WTF::Function<void(const CacheIdentifierOrError&)>;
+using CacheIdentifierCallback = CompletionHandler<void(const CacheIdentifierOrError&)>;
 
 using RecordIdentifiersOrError = Expected<Vector<uint64_t>, Error>;
-using RecordIdentifiersCallback = WTF::Function<void(RecordIdentifiersOrError&&)>;
+using RecordIdentifiersCallback = CompletionHandler<void(RecordIdentifiersOrError&&)>;
 
 
 using CacheInfosOrError = Expected<CacheInfos, Error>;
-using CacheInfosCallback = WTF::Function<void(CacheInfosOrError&&)>;
+using CacheInfosCallback = CompletionHandler<void(CacheInfosOrError&&)>;
 
 using RecordsOrError = Expected<Vector<Record>, Error>;
-using RecordsCallback = WTF::Function<void(RecordsOrError&&)>;
+using RecordsCallback = CompletionHandler<void(RecordsOrError&&)>;
 
-using CompletionCallback = WTF::Function<void(Optional<Error>&&)>;
+using CompletionCallback = CompletionHandler<void(Optional<Error>&&)>;
 
 template<class Encoder> inline void CacheInfos::encode(Encoder& encoder) const
 {
     encoder << infos;
     encoder << updateCounter;
