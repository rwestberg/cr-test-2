diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLEffectfulExpressionStatement.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLEffectfulExpressionStatement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLEffectfulExpressionStatement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLEffectfulExpressionStatement.h
@@ -26,35 +26,34 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "WHLSLExpression.h"
-#include "WHLSLLexer.h"
 #include "WHLSLStatement.h"
+#include <wtf/FastMalloc.h>
 #include <wtf/UniqueRef.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class EffectfulExpressionStatement : public Statement {
+class EffectfulExpressionStatement final : public Statement {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     EffectfulExpressionStatement(UniqueRef<Expression>&& effectfulExpression)
-        : Statement(Lexer::Token(effectfulExpression->origin()))
+        : Statement(effectfulExpression->codeLocation(), Kind::EffectfulExpression)
         , m_effectfulExpression(WTFMove(effectfulExpression))
     {
     }
 
-    virtual ~EffectfulExpressionStatement() = default;
+    ~EffectfulExpressionStatement() = default;
 
     EffectfulExpressionStatement(const EffectfulExpressionStatement&) = delete;
     EffectfulExpressionStatement(EffectfulExpressionStatement&&) = default;
 
-    bool isEffectfulExpressionStatement() const override { return true; }
-
     Expression& effectfulExpression() { return m_effectfulExpression; }
 
 private:
     UniqueRef<Expression> m_effectfulExpression;
 };
@@ -63,8 +62,10 @@
 
 }
 
 }
 
+DEFINE_DEFAULT_DELETE(EffectfulExpressionStatement)
+
 SPECIALIZE_TYPE_TRAITS_WHLSL_STATEMENT(EffectfulExpressionStatement, isEffectfulExpressionStatement())
 
 #endif
