diff a/modules/javafx.web/src/main/native/Tools/Scripts/webkitdirs.pm b/modules/javafx.web/src/main/native/Tools/Scripts/webkitdirs.pm
--- a/modules/javafx.web/src/main/native/Tools/Scripts/webkitdirs.pm
+++ b/modules/javafx.web/src/main/native/Tools/Scripts/webkitdirs.pm
@@ -86,10 +86,11 @@
        &safariPath
        &sdkDirectory
        &sdkPlatformDirectory
        &setConfiguration
        &setupMacWebKitEnvironment
+       &setupUnixWebKitEnvironment
        &sharedCommandLineOptions
        &sharedCommandLineOptionsUsage
        &shutDownIOSSimulatorDevice
        &willUseIOSDeviceSDK
        &willUseIOSSimulatorSDK
@@ -107,10 +108,11 @@
     GTK         => "GTK",
     iOS         => "iOS",
     tvOS        => "tvOS",
     watchOS     => "watchOS",
     Mac         => "Mac",
+    MacCatalyst => "MacCatalyst",
     JSCOnly     => "JSCOnly",
     PlayStation => "PlayStation",
     WinCairo    => "WinCairo",
     Java     => "Java",
     WPE         => "WPE",
@@ -160,17 +162,15 @@
 
 my $unknownPortProhibited = 0;
 
 # Variables for Win32 support
 my $programFilesPath;
-my $vcBuildPath;
+my $msBuildPath;
 my $vsInstallDir;
-my $msBuildInstallDir;
 my $vsVersion;
 my $windowsSourceDir;
 my $winVersion;
-my $vsWhereFoundInstallation;
 
 # Defined in VCSUtils.
 sub exitStatus($);
 
 sub findMatchingArguments($$);
@@ -470,11 +470,15 @@
 sub jscPath($)
 {
     my ($productDir) = @_;
     my $jscName = "jsc";
     $jscName .= "_debug"  if configuration() eq "Debug_All";
-    $jscName .= ".exe" if (isAnyWindows());
+    if (isPlayStation()) {
+        $jscName .= ".elf";
+    } elsif (isAnyWindows()) {
+        $jscName .= ".exe";
+    }
     return "$productDir/$jscName" if -e "$productDir/$jscName";
     return "$productDir/JavaScriptCore.framework/Resources/$jscName";
 }
 
 sub argumentsForConfiguration()
@@ -488,10 +492,11 @@
     # These are determined automatically from stored configuration.
     push(@args, '--debug') if ($configuration =~ "^Debug");
     push(@args, '--release') if ($configuration =~ "^Release");
     push(@args, '--ios-device') if (defined $xcodeSDK && $xcodeSDK =~ /^iphoneos/);
     push(@args, '--ios-simulator') if (defined $xcodeSDK && $xcodeSDK =~ /^iphonesimulator/);
+    push(@args, '--maccatalyst') if (defined $xcodeSDK && $xcodeSDK =~ /^maccatalyst/);
     push(@args, '--32-bit') if ($architecture eq "x86" and !isWin64());
     push(@args, '--64-bit') if (isWin64());
     push(@args, '--gtk') if isGtk();
     push(@args, '--java') if isJava();
     push(@args, '--wpe') if isWPE();
@@ -574,10 +579,13 @@
         $xcodeSDK ||=  "watchos";
     }
     if (checkForArgumentAndRemoveFromARGV("--watchos-simulator")) {
         $xcodeSDK ||= "watchsimulator";
     }
+    if (checkForArgumentAndRemoveFromARGV("--maccatalyst")) {
+        $xcodeSDK ||= "maccatalyst";
+    }
     return if !defined $xcodeSDK;
     
     # Prefer the internal version of an sdk, if it exists.
     my @availableSDKs = availableXcodeSDKs();
 
@@ -609,10 +617,11 @@
     return "iphoneos" if $xcodeSDK =~ /iphoneos/i;
     return "iphonesimulator" if $xcodeSDK =~ /iphonesimulator/i;
     return "macosx" if $xcodeSDK =~ /macosx/i;
     return "watchos" if $xcodeSDK =~ /watchos/i;
     return "watchsimulator" if $xcodeSDK =~ /watchsimulator/i;
+    return "maccatalyst" if $xcodeSDK =~ /maccatalyst/i;
     die "Couldn't determine platform name from Xcode SDK";
 }
 
 sub XcodeSDKPath
 {
@@ -648,51 +657,18 @@
     my $programFilesPathX86 = $ENV{'PROGRAMFILES(X86)'} || "C:\\Program Files (x86)";
 
     return $programFilesPathX86;
 }
 
-sub requireModulesForVSWhere
+sub visualStudioInstallDirVSWhere
 {
-    require Encode;
-    require Encode::Locale;
-    require JSON::PP;
-}
-
-sub pickCurrentVisualStudioInstallation
-{
-    return $vsWhereFoundInstallation if defined $vsWhereFoundInstallation;
-
-    requireModulesForVSWhere();
-    determineSourceDir();
-
-    # Prefer Enterprise, then Professional, then Community, then
-    # anything else that provides MSBuild.
-    foreach my $productType ((
-        'Microsoft.VisualStudio.Product.Enterprise',
-        'Microsoft.VisualStudio.Product.Professional',
-        'Microsoft.VisualStudio.Product.Community',
-        undef
-    )) {
-        my $command = "$sourceDir/WebKitLibraries/win/tools/vswhere -nologo -latest -format json -requires Microsoft.Component.MSBuild";
-        if (defined $productType) {
-            $command .= " -products $productType";
-        }
-        my $vsWhereOut = `$command`;
-        my $installations = [];
-        eval {
-            $installations = JSON::PP::decode_json(Encode::encode('UTF-8' => Encode::decode(console_in => $vsWhereOut)));
-        };
-        print "Error getting Visual Studio Location: $@\n" if $@;
-        undef $@;
-
-        if (scalar @$installations) {
-            my $installation = $installations->[0];
-            $vsWhereFoundInstallation = $installation;
-            return $installation;
-        }
-    }
-    return undef;
+    my $vswhere = File::Spec->catdir(programFilesPathX86(), "Microsoft Visual Studio", "Installer", "vswhere.exe");
+    return unless -e $vswhere;
+    open(my $handle, "-|", $vswhere, qw(-nologo -latest -requires Microsoft.Component.MSBuild -property installationPath)) || return;
+    my $vsWhereOut = <$handle>;
+    $vsWhereOut =~ s/\r?\n//;
+    return $vsWhereOut;
 }
 
 sub visualStudioInstallDir
 {
     return $vsInstallDir if defined $vsInstallDir;
@@ -700,59 +676,32 @@
     if ($ENV{'VSINSTALLDIR'}) {
         $vsInstallDir = $ENV{'VSINSTALLDIR'};
         $vsInstallDir =~ s|[\\/]$||;
     } else {
         $vsInstallDir = visualStudioInstallDirVSWhere();
-        if (not -e $vsInstallDir) {
-            $vsInstallDir = visualStudioInstallDirFallback();
-        }
+        return unless defined $vsInstallDir;
     }
     chomp($vsInstallDir = `cygpath "$vsInstallDir"`) if isCygwin();
 
     print "Using Visual Studio: $vsInstallDir\n";
     return $vsInstallDir;
 }
 
-sub visualStudioInstallDirVSWhere
+sub msBuildPath
 {
-    pickCurrentVisualStudioInstallation();
-    if (defined($vsWhereFoundInstallation)) {
-        return $vsWhereFoundInstallation->{installationPath};
-    }
-    return undef;
-}
-
-sub visualStudioInstallDirFallback
-{
-    foreach my $productType ((
-        'Enterprise',
-        'Professional',
-        'Community',
-    )) {
-        my $installdir = File::Spec->catdir(programFilesPathX86(),
-            "Microsoft Visual Studio", "2017", $productType);
-        my $msbuilddir = File::Spec->catdir($installdir,
-            "MSBuild", "15.0", "bin");
-        if (-e $installdir && -e $msbuilddir) {
-            return $installdir;
-        }
-    }
-    return undef;
-}
-
-sub msBuildInstallDir
-{
-    return $msBuildInstallDir if defined $msBuildInstallDir;
-
     my $installDir = visualStudioInstallDir();
-    $msBuildInstallDir = File::Spec->catdir($installDir,
-        "MSBuild", "15.0", "bin");
 
-    chomp($msBuildInstallDir = `cygpath "$msBuildInstallDir"`) if isCygwin();
+    # FIXME: vswhere.exe should be used to find msbuild.exe after AppleWin will get vswhere with -find switch.
+    # <https://github.com/Microsoft/vswhere/wiki/Find-MSBuild>
+    # <https://github.com/Microsoft/vswhere/releases/tag/2.6.6%2Bd9dbe79db3>
+    my $path = File::Spec->catdir($installDir, "MSBuild", "Current", "bin", "MSBuild.exe");
+    $path = File::Spec->catdir($installDir, "MSBuild", "15.0", "bin", "MSBuild.exe") unless -e $path;
 
-    print "Using MSBuild: $msBuildInstallDir\n";
-    return $msBuildInstallDir;
+    chomp($path = `cygpath "$path"`) if isCygwin();
+
+    print "Using MSBuild: $path\n";
+    return $path;
 }
 
 sub determineConfigurationForVisualStudio
 {
     return if defined $configurationForVisualStudio;
@@ -780,11 +729,11 @@
     } else {
         if (usesPerConfigurationBuildDirectory()) {
             $configurationProductDir = "$baseProductDir";
         } else {
             $configurationProductDir = "$baseProductDir/$configuration";
-            $configurationProductDir .= "-" . xcodeSDKPlatformName() if isEmbeddedWebKit();
+            $configurationProductDir .= "-" . xcodeSDKPlatformName() if isEmbeddedWebKit() || isMacCatalystWebKit();
         }
     }
 }
 
 sub setConfigurationProductDir($)
@@ -830,13 +779,13 @@
 sub executableProductDir
 {
     my $productDirectory = productDir();
 
     my $binaryDirectory;
-    if (isAnyWindows()) {
+    if (isAnyWindows() && !isPlayStation()) {
         $binaryDirectory = isWin64() ? "bin64" : "bin32";
-    } elsif (isGtk() || isJSCOnly() || isWPE()) {
+    } elsif (isGtk() || isJSCOnly() || isWPE() || isPlayStation()) {
         $binaryDirectory = "bin";
     } else {
         return $productDirectory;
     }
 
@@ -910,12 +859,12 @@
     determineASanIsEnabled();
     determineLTOMode();
     determineXcodeSDK();
 
     my @options;
-    push @options, "-UseNewBuildSystem=NO";
     push @options, "-UseSanitizedBuildSystemEnvironment=YES";
+    push @options, "-ShowBuildOperationDuration=YES";
     push @options, ("-configuration", $configuration);
     push @options, ("-xcconfig", sourceDir() . "/Tools/asan/asan.xcconfig", "ASAN_IGNORE=" . sourceDir() . "/Tools/asan/webkit-asan-ignore.txt") if $asanIsEnabled;
     push @options, "WK_LTO_MODE=$ltoMode" if $ltoMode;
     push @options, @baseProductDirOption;
     push @options, "ARCHS=$architecture" if $architecture;
@@ -955,10 +904,19 @@
 sub XcodeStaticAnalyzerOption()
 {
     return "RUN_CLANG_STATIC_ANALYZER=YES";
 }
 
+sub canUseXCBuild()
+{
+    # if (`xcodebuild -version | grep "Build version"` =~ /Build version (\d+)([a-zA-Z])(\d+)([a-zA-Z]?)/) {
+    #     return $1 >= 11;
+    # }
+
+    return 0;
+}
+
 my $passedConfiguration;
 my $searchedForPassedConfiguration;
 sub determinePassedConfiguration
 {
     return if $searchedForPassedConfiguration;
@@ -1102,11 +1060,11 @@
     if (isJava()) {
         my $extension = isDarwin() ? ".dylib" : ".so";
         return "$configurationProductDir/lib/libjfxwebkit" . $extension;
     }
     if (isWPE()) {
-        return "$configurationProductDir/lib/libWPEWebKit-0.1.so";
+        return "$configurationProductDir/lib/libWPEWebKit-1.0.so";
     }
 
     die "Unsupported platform, can't determine built library locations.\nTry `build-webkit --help` for more information.\n";
 }
 
@@ -1247,10 +1205,12 @@
             $portName = iOS;
         } elsif (willUseAppleTVDeviceSDK() || willUseAppleTVSimulatorSDK()) {
             $portName = tvOS;
         } elsif (willUseWatchDeviceSDK() || willUseWatchSimulatorSDK()) {
             $portName = watchOS;
+        } elsif (willUseMacCatalystSDK()) {
+            $portName = MacCatalyst;
         } else {
             $portName = Mac;
         }
     } else {
         if ($unknownPortProhibited) {
@@ -1487,13 +1447,18 @@
 sub isAppleMacWebKit()
 {
     return portName() eq Mac;
 }
 
+sub isMacCatalystWebKit()
+{
+    return portName() eq MacCatalyst;
+}
+
 sub isAppleCocoaWebKit()
 {
-    return isAppleMacWebKit() || isEmbeddedWebKit();
+    return isAppleMacWebKit() || isEmbeddedWebKit() || isMacCatalystWebKit();
 }
 
 sub isAppleWinWebKit()
 {
     return portName() eq AppleWin;
@@ -1575,10 +1540,15 @@
 sub willUseWatchSimulatorSDK()
 {
     return xcodeSDKPlatformName() eq "watchsimulator";
 }
 
+sub willUseMacCatalystSDK()
+{
+    return xcodeSDKPlatformName() eq "maccatalyst";
+}
+
 sub determineNmPath()
 {
     return if $nmPath;
 
     if (isAppleCocoaWebKit()) {
@@ -1908,27 +1878,26 @@
 }
 
 sub setupCygwinEnv()
 {
     return if !isAnyWindows();
-    return if $vcBuildPath;
+    return if $msBuildPath;
 
     my $programFilesPath = programFilesPath();
-    my $visualStudioPath = File::Spec->catfile(visualStudioInstallDir(), qw(Common7 IDE devenv.com));
 
     print "Building results into: ", baseProductDir(), "\n";
     print "WEBKIT_OUTPUTDIR is set to: ", $ENV{"WEBKIT_OUTPUTDIR"}, "\n";
     print "WEBKIT_LIBRARIES is set to: ", $ENV{"WEBKIT_LIBRARIES"}, "\n";
     # FIXME (125180): Remove the following temporary 64-bit support once official support is available.
     print "WEBKIT_64_SUPPORT is set to: ", $ENV{"WEBKIT_64_SUPPORT"}, "\n" if isWin64();
 
     # We will actually use MSBuild to build WebKit, but we need to find the Visual Studio install (above) to make
     # sure we use the right options.
-    $vcBuildPath = File::Spec->catfile(msBuildInstallDir(), qw(MSBuild.exe));
-    if (! -e $vcBuildPath) {
+    $msBuildPath = msBuildPath();
+    if (! -e $msBuildPath) {
         print "*************************************************************\n";
-        print "Cannot find '$vcBuildPath'\n";
+        print "Cannot find '$msBuildPath'\n";
         print "Please make sure execute that the Microsoft .NET Framework SDK\n";
         print "is installed on this machine.\n";
         print "*************************************************************\n";
         die;
     }
@@ -1945,19 +1914,37 @@
 
     chomp($ENV{DSYMUTIL_NUM_THREADS} = `sysctl -n hw.activecpu`);
     return system "xcodebuild", "-project", "$project.xcodeproj", @extraOptions;
 }
 
-sub getMSBuildPlatformArgument()
+sub getVisualStudioToolset()
 {
     if (isPlayStation()) {
         return "";
     } elsif (isWin64()) {
-        return "/p:Platform=x64";
+        return "x64";
     } else {
-        return "/p:Platform=Win32";
+        return "Win32";
+    }
+}
+
+sub getMSBuildPlatformArgument()
+{
+    my $toolset = getVisualStudioToolset();
+    if (defined($toolset) && length($toolset)) {
+        return "/p:Platform=$toolset";
+    }
+    return "";
+}
+
+sub getCMakeWindowsToolsetArgument()
+{
+    my $toolset = getVisualStudioToolset();
+    if (defined($toolset) && length($toolset)) {
+        return "-A $toolset";
     }
+    return "";
 }
 
 sub buildVisualStudioProject
 {
     my ($project, $clean) = @_;
@@ -1984,11 +1971,11 @@
     chomp($warningLogFile = `cygpath -w "$warningLogFile"`) if isCygwin();
     my $warningLogging = "/flp1:LogFile=" . $warningLogFile . ";WarningsOnly";
 
     my $maxCPUCount = '/maxcpucount:' . numberOfCPUs();
 
-    my @command = ($vcBuildPath, "/verbosity:minimal", $project, $action, $config, $platform, "/fl", $errorLogging, "/fl1", $warningLogging, $maxCPUCount);
+    my @command = ($msBuildPath, "/verbosity:minimal", $project, $action, $config, $platform, "/fl", $errorLogging, "/fl1", $warningLogging, $maxCPUCount);
     print join(" ", @command), "\n";
     return system @command;
 }
 
 sub getJhbuildPath()
@@ -2091,11 +2078,11 @@
         return ();
     }
     if (isAppleCocoaWebKit()) {
         return ("xcrun");
     }
-    if (-e getJhbuildPath()) {
+    if (shouldUseJhbuild() and ! shouldUseFlatpak()) {
         my @prefix = (File::Spec->catfile(sourceDir(), "Tools", "jhbuild", "jhbuild-wrapper"));
         if (isGtk()) {
             push(@prefix, "--gtk");
         } elsif (isWPE()) {
             push(@prefix, "--wpe");
@@ -2181,10 +2168,19 @@
         if ($cacheFileModifiedTime < stat($winConfiguration)->mtime) {
             return 1;
         }
     }
 
+    # If a change on the JHBuild moduleset has been done, we need to clean the cache as well.
+    if (isGtk() || isWPE()) {
+        my $jhbuildRootDirectory = File::Spec->catdir(getJhbuildPath(), "Root");
+        # The script update-webkit-libs-jhbuild shall re-generate $jhbuildRootDirectory if the moduleset changed.
+        if (-d $jhbuildRootDirectory && $cacheFileModifiedTime < stat($jhbuildRootDirectory)->mtime) {
+            return 1;
+        }
+    }
+
     return 0;
 }
 
 sub removeCMakeCache(@)
 {
@@ -2233,11 +2229,10 @@
     } elsif (isAnyWindows()) {
         return File::Spec->catfile(baseProductDir(), configuration(), "WebKit.sln")
     } else {
         return File::Spec->catfile(baseProductDir(), configuration(), "Makefile")
     }
-    return 0;
 }
 
 sub generateBuildSystemFromCMakeProject
 {
     my ($prefixPath, @cmakeArgs) = @_;
@@ -2262,11 +2257,13 @@
         push @args, "-DCMAKE_BUILD_TYPE=Release";
     } elsif ($config =~ /debug/i) {
         push @args, "-DCMAKE_BUILD_TYPE=Debug";
     }
 
-    push @args, "-DENABLE_ADDRESS_SANITIZER=ON" if asanIsEnabled();
+    push @args, "-DENABLE_SANITIZERS=address" if asanIsEnabled();
+
+    push @args, "-DLTO_MODE=$ltoMode" if ltoMode();
 
     push @args, '-DCMAKE_TOOLCHAIN_FILE=Platform/PlayStation' if isPlayStation();
 
     if ($willUseNinja) {
         push @args, "-G";
@@ -2282,23 +2279,36 @@
             push @args, '"Visual Studio 15 2017 Win64"';
             push @args, '-DCMAKE_GENERATOR_TOOLSET="host=x64"';
         } else {
             push @args, '"Visual Studio 15 2017"';
         }
-    } elsif (isAnyWindows() && isWin64()) {
-        push @args, '-G "Visual Studio 15 2017 Win64"';
-        push @args, '-DCMAKE_GENERATOR_TOOLSET="host=x64"';
-    } elsif (isPlayStation()) {
-        push @args, '-G "Visual Studio 15"';
+    } else {
+        if (isAnyWindows()) {
+            push @args, getCMakeWindowsToolsetArgument();
+        }
+        if ((isAnyWindows() || isPlayStation()) && defined $ENV{VisualStudioVersion}) {
+            my $var = int($ENV{VisualStudioVersion});
+            push @args, qq(-G "Visual Studio $var");
+        }
     }
 
     # Do not show progress of generating bindings in interactive Ninja build not to leave noisy lines on tty
     push @args, '-DSHOW_BINDINGS_GENERATION_PROGRESS=1' unless ($willUseNinja && -t STDOUT);
 
     # Some ports have production mode, but build-webkit should always use developer mode.
     push @args, "-DDEVELOPER_MODE=ON" if isGtk() || isJSCOnly() || isWPE() || isWinCairo();
 
+    if (architecture() eq "x86_64" && shouldBuild32Bit() && !(isJava() && isCygwin())) {
+        # CMAKE_LIBRARY_ARCHITECTURE is needed to get the right .pc
+        # files in Debian-based systems, for the others
+        # CMAKE_PREFIX_PATH will get us /usr/lib, which should be the
+        # right path for 32bit. See FindPkgConfig.cmake.
+        push @cmakeArgs, '-DFORCE_32BIT=ON -DCMAKE_PREFIX_PATH="/usr" -DCMAKE_LIBRARY_ARCHITECTURE=x86';
+        $ENV{"CFLAGS"} =  "-m32" . ($ENV{"CFLAGS"} || "");
+        $ENV{"CXXFLAGS"} = "-m32" . ($ENV{"CXXFLAGS"} || "");
+        $ENV{"LDFLAGS"} = "-m32" . ($ENV{"LDFLAGS"} || "");
+    }
     push @args, @cmakeArgs if @cmakeArgs;
 
     my $cmakeSourceDir = isCygwin() ? windowsSourceDir() : sourceDir();
     push @args, '"' . $cmakeSourceDir . '"';
 
@@ -2323,12 +2333,10 @@
     if ($ENV{VERBOSE} && canUseNinja()) {
         push @makeArgs, "-v";
         push @makeArgs, "-d keeprsp" if (version->parse(determineNinjaVersion()) >= version->parse("1.4.0"));
     }
 
-    chomp($buildPath = `cygpath -m '$buildPath'`) if isCygwin();
-
     my $command = "cmake";
     my @args = ("--build", $buildPath, "--config", $config);
     push @args, ("--", @makeArgs) if @makeArgs;
 
     # GTK and JSCOnly can use a build script to preserve colors and pretty-printing.
@@ -2520,10 +2528,18 @@
     $ENV{WEBKIT_UNSET_DYLD_FRAMEWORK_PATH} = "YES";
 
     setUpGuardMallocIfNeeded();
 }
 
+sub setupUnixWebKitEnvironment($)
+{
+    my ($productDir) = @_;
+
+    $ENV{TEST_RUNNER_INJECTED_BUNDLE_FILENAME} = File::Spec->catfile($productDir, "lib", "libTestRunnerInjectedBundle.so");
+    $ENV{TEST_RUNNER_TEST_PLUGIN_PATH} = File::Spec->catdir($productDir, "lib", "plugins");
+}
+
 sub setupIOSWebKitEnvironment($)
 {
     my ($dyldFrameworkPath) = @_;
     $dyldFrameworkPath = File::Spec->rel2abs($dyldFrameworkPath);
 
@@ -2863,10 +2879,28 @@
     my @architectureFlags = ($architectureSwitch, architecture());
     print "Starting @{[basename($appPath)]} under lldb with DYLD_FRAMEWORK_PATH set to point to built WebKit in $productDir.\n";
     exec { $debuggerPath } $debuggerPath, @architectureFlags, $argumentsSeparator, $appPath, argumentsForRunAndDebugMacWebKitApp() or die;
 }
 
+sub execUnixAppForDebugging($)
+{
+    my ($appPath) = @_;
+
+    my $debuggerPath = `which gdb | head -1`;
+    chomp $debuggerPath;
+    die "Can't find the gdb executable.\n" unless -x $debuggerPath;
+
+    my $productDir = productDir();
+    setupUnixWebKitEnvironment($productDir);
+
+    my @cmdline = wrapperPrefixIfNeeded();
+    push @cmdline, $debuggerPath, "--args", $appPath;
+
+    print "Starting @{[basename($appPath)]} under gdb with build WebKit in $productDir.\n";
+    exec @cmdline, @ARGV or die;
+}
+
 sub debugSafari
 {
     if (isAppleMacWebKit()) {
         checkFrameworks();
         execMacWebKitAppForDebugging(safariPath());
@@ -2926,10 +2960,12 @@
 
 sub debugWebKitTestRunner
 {
     if (isAppleMacWebKit()) {
         execMacWebKitAppForDebugging(File::Spec->catfile(productDir(), "WebKitTestRunner"));
+    } elsif (isGtk() or isWPE()) {
+        execUnixAppForDebugging(File::Spec->catfile(productDir(), "bin", "WebKitTestRunner"));
     }
 
     return 1;
 }
 
