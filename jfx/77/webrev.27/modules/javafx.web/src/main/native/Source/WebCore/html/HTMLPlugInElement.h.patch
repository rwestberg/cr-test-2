diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLPlugInElement.h b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLPlugInElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLPlugInElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLPlugInElement.h
@@ -1,9 +1,9 @@
 /*
  * Copyright (C) 1999 Lars Knoll (knoll@kde.org)
  *           (C) 1999 Antti Koivisto (koivisto@kde.org)
- * Copyright (C) 2004-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2004-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -81,21 +81,23 @@
 
     virtual bool isPlugInImageElement() const { return false; }
 
     bool isUserObservable() const;
 
+    WEBCORE_EXPORT bool isBelowSizeThreshold() const;
+
     // Return whether or not the replacement content for blocked plugins is accessible to the user.
     WEBCORE_EXPORT bool setReplacement(RenderEmbeddedObject::PluginUnavailabilityReason, const String& unavailabilityDescription);
 
     WEBCORE_EXPORT bool isReplacementObscured();
 
 protected:
     HTMLPlugInElement(const QualifiedName& tagName, Document&);
 
     void willDetachRenderers() override;
     bool isPresentationAttribute(const QualifiedName&) const override;
-    void collectStyleForPresentationAttribute(const QualifiedName&, const AtomicString&, MutableStyleProperties&) override;
+    void collectStyleForPresentationAttribute(const QualifiedName&, const AtomString&, MutableStyleProperties&) override;
 
     virtual bool useFallbackContent() const { return false; }
 
     void defaultEventHandler(Event&) override;
 
@@ -119,10 +121,11 @@
 
     bool supportsFocus() const override;
 
     bool isKeyboardFocusable(KeyboardEvent*) const override;
     bool isPluginElement() const final;
+    bool canLoadScriptURL(const URL&) const final;
 
     RefPtr<JSC::Bindings::Instance> m_instance;
     Timer m_swapRendererTimer;
     RefPtr<PluginReplacement> m_pluginReplacement;
     bool m_isCapturingMouseEvents;
