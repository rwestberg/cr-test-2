diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLElement.cpp
@@ -82,11 +82,11 @@
     return adoptRef(*new HTMLElement(tagName, document));
 }
 
 String HTMLElement::nodeName() const
 {
-    // FIXME: Would be nice to have an AtomicString lookup based off uppercase
+    // FIXME: Would be nice to have an AtomString lookup based off uppercase
     // ASCII characters that does not have to copy the string on a hit in the hash.
     if (document().isHTMLDocument()) {
         if (LIKELY(!tagQName().hasPrefix()))
             return tagQName().localNameUpper();
         return Element::nodeName().convertToASCIIUppercase();
@@ -101,25 +101,25 @@
     // FIXME: For bdo element, dir="auto" should result in "bidi-override isolate" but we don't support having multiple values in unicode-bidi yet.
     // See https://bugs.webkit.org/show_bug.cgi?id=73164.
     return CSSValueIsolate;
 }
 
-unsigned HTMLElement::parseBorderWidthAttribute(const AtomicString& value) const
+unsigned HTMLElement::parseBorderWidthAttribute(const AtomString& value) const
 {
     if (auto optionalBorderWidth = parseHTMLNonNegativeInteger(value))
         return optionalBorderWidth.value();
 
     return hasTagName(tableTag) ? 1 : 0;
 }
 
-void HTMLElement::applyBorderAttributeToStyle(const AtomicString& value, MutableStyleProperties& style)
+void HTMLElement::applyBorderAttributeToStyle(const AtomString& value, MutableStyleProperties& style)
 {
     addPropertyToPresentationAttributeStyle(style, CSSPropertyBorderWidth, parseBorderWidthAttribute(value), CSSPrimitiveValue::CSS_PX);
     addPropertyToPresentationAttributeStyle(style, CSSPropertyBorderStyle, CSSValueSolid);
 }
 
-void HTMLElement::mapLanguageAttributeToLocale(const AtomicString& value, MutableStyleProperties& style)
+void HTMLElement::mapLanguageAttributeToLocale(const AtomString& value, MutableStyleProperties& style)
 {
     if (!value.isEmpty()) {
         // Have to quote so the locale id is treated as a string instead of as a CSS keyword.
         addPropertyToPresentationAttributeStyle(style, CSSPropertyWebkitLocale, serializeString(value));
     } else {
@@ -133,11 +133,11 @@
     if (name == alignAttr || name == contenteditableAttr || name == hiddenAttr || name == langAttr || name.matches(XMLNames::langAttr) || name == draggableAttr || name == dirAttr)
         return true;
     return StyledElement::isPresentationAttribute(name);
 }
 
-static bool isLTROrRTLIgnoringCase(const AtomicString& dirAttributeValue)
+static bool isLTROrRTLIgnoringCase(const AtomString& dirAttributeValue)
 {
     return equalLettersIgnoringASCIICase(dirAttributeValue, "rtl") || equalLettersIgnoringASCIICase(dirAttributeValue, "ltr");
 }
 
 enum class ContentEditableType {
@@ -145,11 +145,11 @@
     True,
     False,
     PlaintextOnly
 };
 
-static inline ContentEditableType contentEditableType(const AtomicString& value)
+static inline ContentEditableType contentEditableType(const AtomString& value)
 {
     if (value.isNull())
         return ContentEditableType::Inherit;
     if (value.isEmpty() || equalLettersIgnoringASCIICase(value, "true"))
         return ContentEditableType::True;
@@ -164,11 +164,11 @@
 static ContentEditableType contentEditableType(const HTMLElement& element)
 {
     return contentEditableType(element.attributeWithoutSynchronization(contenteditableAttr));
 }
 
-void HTMLElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomicString& value, MutableStyleProperties& style)
+void HTMLElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomString& value, MutableStyleProperties& style)
 {
     if (name == alignAttr) {
         if (equalLettersIgnoringASCIICase(value, "middle"))
             addPropertyToPresentationAttributeStyle(style, CSSPropertyTextAlign, CSSValueCenter);
         else
@@ -225,19 +225,10 @@
 {
     EventHandlerNameMap map;
 
     static const QualifiedName* const table[] = {
         &onabortAttr.get(),
-        &onaccessiblecontextmenuAttr.get(),
-        &onaccessibleclickAttr.get(),
-        &onaccessibledecrementAttr.get(),
-        &onaccessibledismissAttr.get(),
-        &onaccessiblefocusAttr.get(),
-        &onaccessibleincrementAttr.get(),
-        &onaccessiblescrollintoviewAttr.get(),
-        &onaccessiblesetvalueAttr.get(),
-        &onaccessibleselectAttr.get(),
         &onanimationendAttr.get(),
         &onanimationiterationAttr.get(),
         &onanimationstartAttr.get(),
         &onanimationcancelAttr.get(),
         &onautocompleteAttr.get(),
@@ -271,19 +262,21 @@
         &onfocusinAttr.get(),
         &onfocusoutAttr.get(),
         &ongesturechangeAttr.get(),
         &ongestureendAttr.get(),
         &ongesturestartAttr.get(),
+        &ongotpointercaptureAttr.get(),
         &oninputAttr.get(),
         &oninvalidAttr.get(),
         &onkeydownAttr.get(),
         &onkeypressAttr.get(),
         &onkeyupAttr.get(),
         &onloadAttr.get(),
         &onloadeddataAttr.get(),
         &onloadedmetadataAttr.get(),
         &onloadstartAttr.get(),
+        &onlostpointercaptureAttr.get(),
         &onmousedownAttr.get(),
         &onmouseenterAttr.get(),
         &onmouseleaveAttr.get(),
         &onmousemoveAttr.get(),
         &onmouseoutAttr.get(),
@@ -292,10 +285,18 @@
         &onmousewheelAttr.get(),
         &onpasteAttr.get(),
         &onpauseAttr.get(),
         &onplayAttr.get(),
         &onplayingAttr.get(),
+        &onpointerdownAttr.get(),
+        &onpointermoveAttr.get(),
+        &onpointerupAttr.get(),
+        &onpointercancelAttr.get(),
+        &onpointeroverAttr.get(),
+        &onpointeroutAttr.get(),
+        &onpointerenterAttr.get(),
+        &onpointerleaveAttr.get(),
         &onprogressAttr.get(),
         &onratechangeAttr.get(),
         &onresetAttr.get(),
         &onresizeAttr.get(),
         &onscrollAttr.get(),
@@ -344,11 +345,11 @@
 
     populateEventHandlerNameMap(map, table);
 
     struct UnusualMapping {
         const QualifiedName& attributeName;
-        const AtomicString& eventName;
+        const AtomString& eventName;
     };
 
     const UnusualMapping unusualPairsTable[] = {
         { onwebkitanimationendAttr, eventNames().webkitAnimationEndEvent },
         { onwebkitanimationiterationAttr, eventNames().webkitAnimationIterationEvent },
@@ -371,34 +372,34 @@
         // Not obvious how to do that simply, though.
         auto& attributeName = entry->localName();
 
         // Remove the "on" prefix. Requires some memory allocation and computing a hash, but by not
         // using pointers from eventNames(), the passed-in table can be initialized at compile time.
-        AtomicString eventName = attributeName.string().substring(2);
+        AtomString eventName = attributeName.string().substring(2);
 
         map.add(attributeName.impl(), WTFMove(eventName));
     }
 }
 
-const AtomicString& HTMLElement::eventNameForEventHandlerAttribute(const QualifiedName& attributeName, const EventHandlerNameMap& map)
+const AtomString& HTMLElement::eventNameForEventHandlerAttribute(const QualifiedName& attributeName, const EventHandlerNameMap& map)
 {
     ASSERT(!attributeName.localName().isNull());
 
     // Event handler attributes have no namespace.
     if (!attributeName.namespaceURI().isNull())
         return nullAtom();
 
     // Fast early return for names that don't start with "on".
-    AtomicStringImpl& localName = *attributeName.localName().impl();
+    AtomStringImpl& localName = *attributeName.localName().impl();
     if (localName.length() < 3 || localName[0] != 'o' || localName[1] != 'n')
         return nullAtom();
 
     auto it = map.find(&localName);
     return it == map.end() ? nullAtom() : it->value;
 }
 
-const AtomicString& HTMLElement::eventNameForEventHandlerAttribute(const QualifiedName& attributeName)
+const AtomString& HTMLElement::eventNameForEventHandlerAttribute(const QualifiedName& attributeName)
 {
     static NeverDestroyed<EventHandlerNameMap> map = createEventHandlerNameMap();
     return eventNameForEventHandlerAttribute(attributeName, map.get());
 }
 
@@ -433,11 +434,11 @@
 bool HTMLElement::matchesReadWritePseudoClass() const
 {
     return editabilityFromContentEditableAttr(*this) != Editability::ReadOnly;
 }
 
-void HTMLElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == dirAttr) {
         dirAttributeChanged(value);
         return;
     }
@@ -500,30 +501,30 @@
 
 // Returns the conforming 'dir' value associated with the state the attribute is in (in its canonical case), if any,
 // or the empty string if the attribute is in a state that has no associated keyword value or if the attribute is
 // not in a defined state (e.g. the attribute is missing and there is no missing value default).
 // http://www.whatwg.org/specs/web-apps/current-work/multipage/common-dom-interfaces.html#limited-to-only-known-values
-static inline const AtomicString& toValidDirValue(const AtomicString& value)
+static inline const AtomString& toValidDirValue(const AtomString& value)
 {
-    static NeverDestroyed<AtomicString> ltrValue("ltr", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<AtomicString> rtlValue("rtl", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<AtomicString> autoValue("auto", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> ltrValue("ltr", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> rtlValue("rtl", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> autoValue("auto", AtomString::ConstructFromLiteral);
     if (equalLettersIgnoringASCIICase(value, "ltr"))
         return ltrValue;
     if (equalLettersIgnoringASCIICase(value, "rtl"))
         return rtlValue;
     if (equalLettersIgnoringASCIICase(value, "auto"))
         return autoValue;
     return nullAtom();
 }
 
-const AtomicString& HTMLElement::dir() const
+const AtomString& HTMLElement::dir() const
 {
     return toValidDirValue(attributeWithoutSynchronization(dirAttr));
 }
 
-void HTMLElement::setDir(const AtomicString& value)
+void HTMLElement::setDir(const AtomString& value)
 {
     setAttributeWithoutSynchronization(dirAttr, value);
 }
 
 ExceptionOr<void> HTMLElement::setInnerText(const String& text)
@@ -597,11 +598,11 @@
             return result.releaseException();
     }
     return { };
 }
 
-void HTMLElement::applyAlignmentAttributeToStyle(const AtomicString& alignment, MutableStyleProperties& style)
+void HTMLElement::applyAlignmentAttributeToStyle(const AtomString& alignment, MutableStyleProperties& style)
 {
     // Vertical alignment with respect to the current baseline of the text
     // right or left means floating images.
     CSSValueID floatValue = CSSValueInvalid;
     CSSValueID verticalAlignValue = CSSValueInvalid;
@@ -660,15 +661,15 @@
 }
 
 ExceptionOr<void> HTMLElement::setContentEditable(const String& enabled)
 {
     if (equalLettersIgnoringASCIICase(enabled, "true"))
-        setAttributeWithoutSynchronization(contenteditableAttr, AtomicString("true", AtomicString::ConstructFromLiteral));
+        setAttributeWithoutSynchronization(contenteditableAttr, AtomString("true", AtomString::ConstructFromLiteral));
     else if (equalLettersIgnoringASCIICase(enabled, "false"))
-        setAttributeWithoutSynchronization(contenteditableAttr, AtomicString("false", AtomicString::ConstructFromLiteral));
+        setAttributeWithoutSynchronization(contenteditableAttr, AtomString("false", AtomString::ConstructFromLiteral));
     else if (equalLettersIgnoringASCIICase(enabled, "plaintext-only"))
-        setAttributeWithoutSynchronization(contenteditableAttr, AtomicString("plaintext-only", AtomicString::ConstructFromLiteral));
+        setAttributeWithoutSynchronization(contenteditableAttr, AtomString("plaintext-only", AtomString::ConstructFromLiteral));
     else if (equalLettersIgnoringASCIICase(enabled, "inherit"))
         removeAttribute(contenteditableAttr);
     else
         return Exception { SyntaxError };
     return { };
@@ -680,24 +681,24 @@
 }
 
 void HTMLElement::setDraggable(bool value)
 {
     setAttributeWithoutSynchronization(draggableAttr, value
-        ? AtomicString("true", AtomicString::ConstructFromLiteral)
-        : AtomicString("false", AtomicString::ConstructFromLiteral));
+        ? AtomString("true", AtomString::ConstructFromLiteral)
+        : AtomString("false", AtomString::ConstructFromLiteral));
 }
 
 bool HTMLElement::spellcheck() const
 {
     return isSpellCheckingEnabled();
 }
 
 void HTMLElement::setSpellcheck(bool enable)
 {
     setAttributeWithoutSynchronization(spellcheckAttr, enable
-        ? AtomicString("true", AtomicString::ConstructFromLiteral)
-        : AtomicString("false", AtomicString::ConstructFromLiteral));
+        ? AtomString("true", AtomString::ConstructFromLiteral)
+        : AtomString("false", AtomString::ConstructFromLiteral));
 }
 
 void HTMLElement::click()
 {
     simulateClick(*this, nullptr, SendNoEvents, DoNotShowPressedLook, SimulatedClickSource::Bindings);
@@ -711,21 +712,14 @@
 String HTMLElement::title() const
 {
     return attributeWithoutSynchronization(titleAttr);
 }
 
-int HTMLElement::tabIndex() const
-{
-    if (supportsFocus())
-        return Element::tabIndex();
-    return -1;
-}
-
 bool HTMLElement::translate() const
 {
     for (auto& element : lineageOfType<HTMLElement>(*this)) {
-        const AtomicString& value = element.attributeWithoutSynchronization(translateAttr);
+        const AtomString& value = element.attributeWithoutSynchronization(translateAttr);
         if (equalLettersIgnoringASCIICase(value, "yes") || (value.isEmpty() && !value.isNull()))
             return true;
         if (equalLettersIgnoringASCIICase(value, "no"))
             return false;
     }
@@ -760,10 +754,20 @@
 HTMLFormElement* HTMLElement::form() const
 {
     return HTMLFormElement::findClosestFormAncestor(*this);
 }
 
+FormNamedItem* HTMLElement::asFormNamedItem()
+{
+    return nullptr;
+}
+
+FormAssociatedElement* HTMLElement::asFormAssociatedElement()
+{
+    return nullptr;
+}
+
 static inline bool elementAffectsDirectionality(const Node& node)
 {
     if (!is<HTMLElement>(node))
         return false;
     const HTMLElement& element = downcast<HTMLElement>(node);
@@ -799,11 +803,11 @@
     adjustDirectionalityIfNeededAfterChildrenChanged(change.previousSiblingElement, change.type);
 }
 
 bool HTMLElement::hasDirectionAuto() const
 {
-    const AtomicString& direction = attributeWithoutSynchronization(dirAttr);
+    const AtomString& direction = attributeWithoutSynchronization(dirAttr);
     return (hasTagName(bdiTag) && direction.isNull()) || equalLettersIgnoringASCIICase(direction, "auto");
 }
 
 TextDirection HTMLElement::directionalityIfhasDirAutoAttribute(bool& isAuto) const
 {
@@ -859,11 +863,11 @@
     if (strongDirectionalityTextNode)
         *strongDirectionalityTextNode = nullptr;
     return TextDirection::LTR;
 }
 
-void HTMLElement::dirAttributeChanged(const AtomicString& value)
+void HTMLElement::dirAttributeChanged(const AtomString& value)
 {
     RefPtr<Element> parent = parentElement();
 
     if (is<HTMLElement>(parent) && parent->selfOrAncestorHasDirAutoAttribute())
         downcast<HTMLElement>(*parent).adjustDirectionalityIfNeededAfterChildAttributeChanged(this);
@@ -1064,21 +1068,21 @@
     return canBeActuallyDisabled() && isDisabledFormControl();
 }
 
 #if ENABLE(IOS_AUTOCORRECT_AND_AUTOCAPITALIZE)
 
-const AtomicString& HTMLElement::autocapitalize() const
+const AtomString& HTMLElement::autocapitalize() const
 {
     return stringForAutocapitalizeType(autocapitalizeType());
 }
 
 AutocapitalizeType HTMLElement::autocapitalizeType() const
 {
     return autocapitalizeTypeForAttributeValue(attributeWithoutSynchronization(HTMLNames::autocapitalizeAttr));
 }
 
-void HTMLElement::setAutocapitalize(const AtomicString& value)
+void HTMLElement::setAutocapitalize(const AtomString& value)
 {
     setAttributeWithoutSynchronization(autocapitalizeAttr, value);
 }
 
 bool HTMLElement::shouldAutocorrect() const
@@ -1088,26 +1092,31 @@
     return !equalLettersIgnoringASCIICase(autocorrectValue, "off");
 }
 
 void HTMLElement::setAutocorrect(bool autocorrect)
 {
-    setAttributeWithoutSynchronization(autocorrectAttr, autocorrect ? AtomicString("on", AtomicString::ConstructFromLiteral) : AtomicString("off", AtomicString::ConstructFromLiteral));
+    setAttributeWithoutSynchronization(autocorrectAttr, autocorrect ? AtomString("on", AtomString::ConstructFromLiteral) : AtomString("off", AtomString::ConstructFromLiteral));
 }
 
 #endif
 
 InputMode HTMLElement::canonicalInputMode() const
 {
-    return inputModeForAttributeValue(attributeWithoutSynchronization(inputmodeAttr));
+    auto mode = inputModeForAttributeValue(attributeWithoutSynchronization(inputmodeAttr));
+    if (mode == InputMode::Unspecified) {
+        if (document().quirks().needsInputModeNoneImplicitly(*this))
+            return InputMode::None;
+    }
+    return mode;
 }
 
-const AtomicString& HTMLElement::inputMode() const
+const AtomString& HTMLElement::inputMode() const
 {
     return stringForInputMode(canonicalInputMode());
 }
 
-void HTMLElement::setInputMode(const AtomicString& value)
+void HTMLElement::setInputMode(const AtomString& value)
 {
     setAttributeWithoutSynchronization(inputmodeAttr, value);
 }
 
 } // namespace WebCore
