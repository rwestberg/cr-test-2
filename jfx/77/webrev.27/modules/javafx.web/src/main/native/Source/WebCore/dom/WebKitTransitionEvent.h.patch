diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/WebKitTransitionEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/WebKitTransitionEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/WebKitTransitionEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/WebKitTransitionEvent.h
@@ -29,22 +29,22 @@
 
 namespace WebCore {
 
 class WebKitTransitionEvent final : public Event {
 public:
-    static Ref<WebKitTransitionEvent> create(const AtomicString& type, const String& propertyName, double elapsedTime, const String& pseudoElement)
+    static Ref<WebKitTransitionEvent> create(const AtomString& type, const String& propertyName, double elapsedTime, const String& pseudoElement)
     {
         return adoptRef(*new WebKitTransitionEvent(type, propertyName, elapsedTime, pseudoElement));
     }
 
     struct Init : EventInit {
         String propertyName;
         double elapsedTime { 0 };
         String pseudoElement;
     };
 
-    static Ref<WebKitTransitionEvent> create(const AtomicString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
+    static Ref<WebKitTransitionEvent> create(const AtomString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
     {
         return adoptRef(*new WebKitTransitionEvent(type, initializer, isTrusted));
     }
 
     virtual ~WebKitTransitionEvent();
@@ -54,12 +54,12 @@
     const String& pseudoElement() const;
 
     EventInterface eventInterface() const override;
 
 private:
-    WebKitTransitionEvent(const AtomicString& type, const String& propertyName, double elapsedTime, const String& pseudoElement);
-    WebKitTransitionEvent(const AtomicString& type, const Init& initializer, IsTrusted);
+    WebKitTransitionEvent(const AtomString& type, const String& propertyName, double elapsedTime, const String& pseudoElement);
+    WebKitTransitionEvent(const AtomString& type, const Init& initializer, IsTrusted);
 
     String m_propertyName;
     double m_elapsedTime;
     String m_pseudoElement;
 };
