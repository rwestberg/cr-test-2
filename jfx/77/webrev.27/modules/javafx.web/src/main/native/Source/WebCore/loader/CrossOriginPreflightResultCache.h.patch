diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/CrossOriginPreflightResultCache.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/CrossOriginPreflightResultCache.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/CrossOriginPreflightResultCache.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/CrossOriginPreflightResultCache.h
@@ -27,12 +27,12 @@
 #pragma once
 
 #include "StoredCredentialsPolicy.h"
 #include <wtf/HashMap.h>
 #include <wtf/HashSet.h>
+#include <wtf/MonotonicTime.h>
 #include <wtf/URLHash.h>
-#include <wtf/text/StringHash.h>
 
 namespace WebCore {
 
 class HTTPHeaderMap;
 class ResourceResponse;
@@ -44,12 +44,12 @@
         : m_storedCredentialsPolicy(storedCredentialsPolicy)
     {
     }
 
     WEBCORE_EXPORT bool parse(const ResourceResponse&);
-    WEBCORE_EXPORT bool allowsCrossOriginMethod(const String&, String& errorDescription) const;
-    WEBCORE_EXPORT bool allowsCrossOriginHeaders(const HTTPHeaderMap&, String& errorDescription) const;
+    WEBCORE_EXPORT bool allowsCrossOriginMethod(const String&, StoredCredentialsPolicy, String& errorDescription) const;
+    WEBCORE_EXPORT bool allowsCrossOriginHeaders(const HTTPHeaderMap&, StoredCredentialsPolicy, String& errorDescription) const;
     bool allowsRequest(StoredCredentialsPolicy, const String& method, const HTTPHeaderMap& requestHeaders) const;
 
 private:
     // FIXME: A better solution to holding onto the absolute expiration time might be
     // to start a timer for the expiration delta that removes this from the cache when
