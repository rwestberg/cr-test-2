diff a/modules/javafx.web/src/main/native/Source/WebCore/editing/CompositeEditCommand.h b/modules/javafx.web/src/main/native/Source/WebCore/editing/CompositeEditCommand.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/editing/CompositeEditCommand.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/editing/CompositeEditCommand.h
@@ -39,10 +39,11 @@
 class StaticRange;
 class StyledElement;
 class Text;
 
 class AccessibilityUndoReplacedText {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     AccessibilityUndoReplacedText() { }
     void configureRangeDeletedByReapplyWithStartingSelection(const VisibleSelection&);
     void configureRangeDeletedByReapplyWithEndingSelection(const VisibleSelection&);
     void setRangeDeletedByUnapply(const VisiblePositionIndexRange&);
@@ -150,10 +151,11 @@
     bool isRemovableBlock(const Node*);
     void insertNodeAfter(Ref<Node>&&, Node& refChild);
     void insertNodeAt(Ref<Node>&&, const Position&);
     void insertNodeAtTabSpanPosition(Ref<Node>&&, const Position&);
     void insertNodeBefore(Ref<Node>&&, Node& refChild, ShouldAssumeContentIsAlwaysEditable = DoNotAssumeContentIsAlwaysEditable);
+    void insertParagraphSeparatorAtPosition(const Position&, bool useDefaultParagraphElement = false, bool pasteBlockqutoeIntoUnquotedArea = false);
     void insertParagraphSeparator(bool useDefaultParagraphElement = false, bool pasteBlockqutoeIntoUnquotedArea = false);
     void insertLineBreak();
     void insertTextIntoNode(Text&, unsigned offset, const String& text);
     void mergeIdenticalElements(Element&, Element&);
     void rebalanceWhitespace();
@@ -173,11 +175,11 @@
     void prune(Node*);
     void replaceTextInNode(Text&, unsigned offset, unsigned count, const String& replacementText);
     Position replaceSelectedTextInNode(const String&);
     void replaceTextInNodePreservingMarkers(Text&, unsigned offset, unsigned count, const String& replacementText);
     Position positionOutsideTabSpan(const Position&);
-    void setNodeAttribute(Element&, const QualifiedName& attribute, const AtomicString& value);
+    void setNodeAttribute(Element&, const QualifiedName& attribute, const AtomString& value);
     void splitElement(Element&, Node& atChild);
     void splitTextNode(Text&, unsigned offset);
     void splitTextNodeContainingElement(Text&, unsigned offset);
     void wrapContentsInDummySpan(Element&);
 
