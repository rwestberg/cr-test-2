diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/image-decoders/jpeg/JPEGImageDecoder.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/image-decoders/jpeg/JPEGImageDecoder.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/image-decoders/jpeg/JPEGImageDecoder.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/image-decoders/jpeg/JPEGImageDecoder.cpp
@@ -191,11 +191,11 @@
             if (tag == orientationTag && type == shortType && count == 1)
                 return ImageOrientation::fromEXIFValue(readUint16(ifd + 8, isBigEndian));
         }
     }
 
-    return ImageOrientation();
+    return ImageOrientation::None;
 }
 
 class JPEGImageReader {
     WTF_MAKE_FAST_ALLOCATED;
 public:
@@ -266,11 +266,11 @@
         src->pub.next_input_byte += bytesToSkip;
 
         m_bytesToSkip = std::max(numBytes - bytesToSkip, static_cast<long>(0));
     }
 
-    bool decode(const SharedBuffer& data, bool onlySize)
+    bool decode(const SharedBuffer::DataSegment& data, bool onlySize)
     {
         m_decodingSizeOnly = onlySize;
 
         unsigned newByteCount = data.size() - m_bufferLength;
         unsigned readOffset = m_bufferLength - m_info.src->bytes_in_buffer;
@@ -500,19 +500,10 @@
 {
 }
 
 JPEGImageDecoder::~JPEGImageDecoder() = default;
 
-bool JPEGImageDecoder::setSize(const IntSize& size)
-{
-    if (!ScalableImageDecoder::setSize(size))
-        return false;
-
-    prepareScaleDataIfNecessary();
-    return true;
-}
-
 ScalableImageDecoderFrame* JPEGImageDecoder::frameBufferAtIndex(size_t index)
 {
     if (index)
         return 0;
 
@@ -554,75 +545,65 @@
         buffer.backingStore()->setPixel(currentAddress, jsample[0] * k / 255, jsample[1] * k / 255, jsample[2] * k / 255, 0xFF);
         break;
     }
 }
 
-template <J_COLOR_SPACE colorSpace, bool isScaled>
+template <J_COLOR_SPACE colorSpace>
 bool JPEGImageDecoder::outputScanlines(ScalableImageDecoderFrame& buffer)
 {
     JSAMPARRAY samples = m_reader->samples();
     jpeg_decompress_struct* info = m_reader->info();
-    int width = isScaled ? m_scaledColumns.size() : info->output_width;
+    int width = info->output_width;
 
     while (info->output_scanline < info->output_height) {
         // jpeg_read_scanlines will increase the scanline counter, so we
         // save the scanline before calling it.
         int sourceY = info->output_scanline;
         /* Request one scanline.  Returns 0 or 1 scanlines. */
         if (jpeg_read_scanlines(info, samples, 1) != 1)
             return false;
 
-        int destY = scaledY(sourceY);
-        if (destY < 0)
-            continue;
-
-        auto* currentAddress = buffer.backingStore()->pixelAt(0, destY);
+        auto* currentAddress = buffer.backingStore()->pixelAt(0, sourceY);
         for (int x = 0; x < width; ++x) {
-            setPixel<colorSpace>(buffer, currentAddress, samples, isScaled ? m_scaledColumns[x] : x);
+            setPixel<colorSpace>(buffer, currentAddress, samples, x);
             ++currentAddress;
         }
     }
     return true;
 }
 
-template <J_COLOR_SPACE colorSpace>
-bool JPEGImageDecoder::outputScanlines(ScalableImageDecoderFrame& buffer)
-{
-    return m_scaled ? outputScanlines<colorSpace, true>(buffer) : outputScanlines<colorSpace, false>(buffer);
-}
-
 bool JPEGImageDecoder::outputScanlines()
 {
     if (m_frameBufferCache.isEmpty())
         return false;
 
     // Initialize the framebuffer if needed.
     auto& buffer = m_frameBufferCache[0];
     if (buffer.isInvalid()) {
-        if (!buffer.initialize(scaledSize(), m_premultiplyAlpha))
+        if (!buffer.initialize(size(), m_premultiplyAlpha))
             return setFailed();
         buffer.setDecodingStatus(DecodingStatus::Partial);
         // The buffer is transparent outside the decoded area while the image is
         // loading. The completed image will be marked fully opaque in jpegComplete().
         buffer.setHasAlpha(true);
     }
 
     jpeg_decompress_struct* info = m_reader->info();
 
 #if defined(TURBO_JPEG_RGB_SWIZZLE)
-    if (!m_scaled && turboSwizzled(info->out_color_space)) {
+    if (turboSwizzled(info->out_color_space)) {
         while (info->output_scanline < info->output_height) {
             unsigned char* row = reinterpret_cast<unsigned char*>(buffer.backingStore()->pixelAt(0, info->output_scanline));
             if (jpeg_read_scanlines(info, &row, 1) != 1)
                 return false;
          }
          return true;
      }
 #endif
 
     switch (info->out_color_space) {
-    // The code inside outputScanlines<int, bool> will be executed
+    // The code inside outputScanlines<int> will be executed
     // for each pixel, so we want to avoid any extra comparisons there.
     // That is why we use template and template specializations here so
     // the proper code will be generated at compile time.
     case JCS_RGB:
         return outputScanlines<JCS_RGB>(buffer);
@@ -651,11 +632,11 @@
 {
     if (failed())
         return;
 
     if (!m_reader)
-        m_reader = std::make_unique<JPEGImageReader>(this);
+        m_reader = makeUnique<JPEGImageReader>(this);
 
     // If we couldn't decode the image but we've received all the data, decoding
     // has failed.
     if (!m_reader->decode(*m_data, onlySize) && allDataReceived)
         setFailed();
