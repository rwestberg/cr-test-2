diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringOperators.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringOperators.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringOperators.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringOperators.h
@@ -37,11 +37,11 @@
         if (!result)
             CRASH();
         return result;
     }
 
-    operator AtomicString() const
+    operator AtomString() const
     {
         return operator String();
     }
 
     bool is8Bit()
@@ -99,13 +99,13 @@
 inline StringAppend<const char*, String> operator+(const char* string1, const String& string2)
 {
     return StringAppend<const char*, String>(string1, string2);
 }
 
-inline StringAppend<const char*, AtomicString> operator+(const char* string1, const AtomicString& string2)
+inline StringAppend<const char*, AtomString> operator+(const char* string1, const AtomString& string2)
 {
-    return StringAppend<const char*, AtomicString>(string1, string2);
+    return StringAppend<const char*, AtomString>(string1, string2);
 }
 
 template<typename T, typename = std::enable_if_t<std::is_same<std::decay_t<T>, StringView>::value>>
 inline StringAppend<const char*, StringView> operator+(const char* string1, T string2)
 {
@@ -121,13 +121,13 @@
 inline StringAppend<const UChar*, String> operator+(const UChar* string1, const String& string2)
 {
     return StringAppend<const UChar*, String>(string1, string2);
 }
 
-inline StringAppend<const UChar*, AtomicString> operator+(const UChar* string1, const AtomicString& string2)
+inline StringAppend<const UChar*, AtomString> operator+(const UChar* string1, const AtomString& string2)
 {
-    return StringAppend<const UChar*, AtomicString>(string1, string2);
+    return StringAppend<const UChar*, AtomString>(string1, string2);
 }
 
 template<typename T, typename = std::enable_if_t<std::is_same<std::decay_t<T>, StringView>::value>>
 inline StringAppend<const UChar*, StringView> operator+(const UChar* string1, T string2)
 {
@@ -143,13 +143,13 @@
 inline StringAppend<ASCIILiteral, String> operator+(const ASCIILiteral& string1, const String& string2)
 {
     return StringAppend<ASCIILiteral, String>(string1, string2);
 }
 
-inline StringAppend<ASCIILiteral, AtomicString> operator+(const ASCIILiteral& string1, const AtomicString& string2)
+inline StringAppend<ASCIILiteral, AtomString> operator+(const ASCIILiteral& string1, const AtomString& string2)
 {
-    return StringAppend<ASCIILiteral, AtomicString>(string1, string2);
+    return StringAppend<ASCIILiteral, AtomString>(string1, string2);
 }
 
 template<typename T, typename = std::enable_if_t<std::is_same<std::decay_t<T>, StringView>::value>>
 inline StringAppend<ASCIILiteral, StringView> operator+(const ASCIILiteral& string1, T string2)
 {
