diff a/modules/javafx.web/src/main/native/Source/WebCore/page/EditorClient.h b/modules/javafx.web/src/main/native/Source/WebCore/page/EditorClient.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/EditorClient.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/EditorClient.h
@@ -34,10 +34,12 @@
 #include <wtf/Forward.h>
 #include <wtf/Vector.h>
 
 namespace WebCore {
 
+enum class DOMPasteAccessResponse : uint8_t;
+
 class DocumentFragment;
 class Element;
 class Frame;
 class KeyboardEvent;
 class Node;
@@ -92,14 +94,15 @@
     virtual void updateEditorStateAfterLayoutIfEditabilityChanged() = 0;
     virtual void didEndEditing() = 0;
     virtual void willWriteSelectionToPasteboard(Range*) = 0;
     virtual void didWriteSelectionToPasteboard() = 0;
     virtual void getClientPasteboardDataForRange(Range*, Vector<String>& pasteboardTypes, Vector<RefPtr<SharedBuffer>>& pasteboardData) = 0;
-    virtual String replacementURLForResource(Ref<SharedBuffer>&& resourceData, const String& mimeType) = 0;
     virtual void requestCandidatesForSelection(const VisibleSelection&) { }
     virtual void handleAcceptedCandidateWithSoftSpaces(TextCheckingResult) { }
 
+    virtual DOMPasteAccessResponse requestDOMPasteAccess(const String& originIdentifier) = 0;
+
     // Notify an input method that a composition was voluntarily discarded by WebCore, so that it could clean up too.
     // This function is not called when a composition is closed per a request from an input method.
     virtual void discardedComposition(Frame*) = 0;
     virtual void canceledComposition() = 0;
     virtual void didUpdateComposition() = 0;
@@ -114,12 +117,12 @@
     virtual bool canRedo() const = 0;
 
     virtual void undo() = 0;
     virtual void redo() = 0;
 
-    virtual void handleKeyboardEvent(KeyboardEvent*) = 0;
-    virtual void handleInputMethodKeydown(KeyboardEvent*) = 0;
+    virtual void handleKeyboardEvent(KeyboardEvent&) = 0;
+    virtual void handleInputMethodKeydown(KeyboardEvent&) = 0;
 
     virtual void textFieldDidBeginEditing(Element*) = 0;
     virtual void textFieldDidEndEditing(Element*) = 0;
     virtual void textDidChangeInTextField(Element*) = 0;
     virtual bool doTextFieldCommandFromEvent(Element*, KeyboardEvent*) = 0;
@@ -179,8 +182,12 @@
     // Support for global selections, used on platforms like the X Window System that treat
     // selection as a type of clipboard.
     virtual bool supportsGlobalSelection() { return false; }
 
     virtual bool performTwoStepDrop(DocumentFragment&, Range& destination, bool isMove) = 0;
+
+    virtual bool canShowFontPanel() const = 0;
+
+    virtual bool shouldAllowSingleClickToChangeSelection(Node&, const VisibleSelection&) const { return true; }
 };
 
 }
