diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/WritableStream.js b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/WritableStream.js
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/WritableStream.js
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/WritableStream.js
@@ -68,11 +68,11 @@
 function abort(reason)
 {
     "use strict";
 
     if (!@isWritableStream(this))
-        return @Promise.@reject(new @TypeError("The WritableStream.abort method can only be used on instances of WritableStream"));
+        return @Promise.@reject(@makeTypeError("The WritableStream.abort method can only be used on instances of WritableStream"));
 
     const state = @getByIdDirectPrivate(this, "state");
     if (state === @streamClosed)
         return @Promise.@resolve();
 
@@ -87,15 +87,15 @@
 function close()
 {
     "use strict";
 
     if (!@isWritableStream(this))
-        return @Promise.@reject(new @TypeError("The WritableStream.close method can only be used on instances of WritableStream"));
+        return @Promise.@reject(@makeTypeError("The WritableStream.close method can only be used on instances of WritableStream"));
 
     const state = @getByIdDirectPrivate(this, "state");
     if (state === @streamClosed || state === @streamClosing)
-        return @Promise.@reject(new @TypeError("Cannot close a WritableString that is closed or closing"));
+        return @Promise.@reject(@makeTypeError("Cannot close a WritableString that is closed or closing"));
 
     if (state === @streamErrored)
         return @Promise.@reject(@getByIdDirectPrivate(this, "storedError"));
 
     if (state === @streamWaiting)
@@ -111,15 +111,15 @@
 function write(chunk)
 {
     "use strict";
 
     if (!@isWritableStream(this))
-        return @Promise.@reject(new @TypeError("The WritableStream.write method can only be used on instances of WritableStream"));
+        return @Promise.@reject(@makeTypeError("The WritableStream.write method can only be used on instances of WritableStream"));
 
     const state = @getByIdDirectPrivate(this, "state");
     if (state === @streamClosed || state === @streamClosing)
-        return @Promise.@reject(new @TypeError("Cannot write on a WritableString that is closed or closing"));
+        return @Promise.@reject(@makeTypeError("Cannot write on a WritableString that is closed or closing"));
 
     if (state === @streamErrored)
         return @Promise.@reject(this.@storedError);
 
     @assert(state === @streamWritable || state === @streamWaiting);
@@ -152,22 +152,22 @@
 function closed()
 {
     "use strict";
 
     if (!@isWritableStream(this))
-        return @Promise.@reject(new @TypeError("The WritableStream.closed getter can only be used on instances of WritableStream"));
+        return @Promise.@reject(@makeGetterTypeError("WritableStream", "closed"));
 
     return @getByIdDirectPrivate(this, "closedPromiseCapability").@promise;
 }
 
 @getter
 function ready()
 {
     "use strict";
 
     if (!@isWritableStream(this))
-        return @Promise.@reject(new @TypeError("The WritableStream.ready getter can only be used on instances of WritableStream"));
+        return @Promise.@reject(@makeGetterTypeError("WritableStream", "ready"));
 
     return @getByIdDirectPrivate(this, "readyPromiseCapability").@promise;
 }
 
 @getter
