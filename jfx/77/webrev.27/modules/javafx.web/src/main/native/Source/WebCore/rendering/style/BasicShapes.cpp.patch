diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/BasicShapes.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/BasicShapes.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/BasicShapes.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/BasicShapes.cpp
@@ -196,11 +196,11 @@
     auto result =  BasicShapeCircle::create();
 
     result->setCenterX(m_centerX.blend(otherCircle.centerX(), progress));
     result->setCenterY(m_centerY.blend(otherCircle.centerY(), progress));
     result->setRadius(m_radius.blend(otherCircle.radius(), progress));
-    return WTFMove(result);
+    return result;
 }
 
 bool BasicShapeEllipse::operator==(const BasicShape& other) const
 {
     if (type() != other.type())
@@ -255,18 +255,18 @@
         || m_radiusY.type() != BasicShapeRadius::Value || otherEllipse.radiusY().type() != BasicShapeRadius::Value) {
         result->setCenterX(otherEllipse.centerX());
         result->setCenterY(otherEllipse.centerY());
         result->setRadiusX(otherEllipse.radiusX());
         result->setRadiusY(otherEllipse.radiusY());
-        return WTFMove(result);
+        return result;
     }
 
     result->setCenterX(m_centerX.blend(otherEllipse.centerX(), progress));
     result->setCenterY(m_centerY.blend(otherEllipse.centerY(), progress));
     result->setRadiusX(m_radiusX.blend(otherEllipse.radiusX(), progress));
     result->setRadiusY(m_radiusY.blend(otherEllipse.radiusY(), progress));
-    return WTFMove(result);
+    return result;
 }
 
 bool BasicShapePolygon::operator==(const BasicShape& other) const
 {
     if (type() != other.type())
@@ -309,21 +309,21 @@
     ASSERT(!(m_values.size() % 2));
 
     size_t length = m_values.size();
     auto result = BasicShapePolygon::create();
     if (!length)
-        return WTFMove(result);
+        return result;
 
     result->setWindRule(otherPolygon.windRule());
 
     for (size_t i = 0; i < length; i = i + 2) {
         result->appendPoint(
             WebCore::blend(otherPolygon.values().at(i), m_values.at(i), progress),
             WebCore::blend(otherPolygon.values().at(i + 1), m_values.at(i + 1), progress));
     }
 
-    return WTFMove(result);
+    return result;
 }
 
 BasicShapePath::BasicShapePath(std::unique_ptr<SVGPathByteStream>&& byteStream)
     : m_byteStream(WTFMove(byteStream))
 {
@@ -356,16 +356,16 @@
 {
     ASSERT(type() == from.type());
 
     auto& fromPath = downcast<BasicShapePath>(from);
 
-    auto resultingPathBytes = std::make_unique<SVGPathByteStream>();
+    auto resultingPathBytes = makeUnique<SVGPathByteStream>();
     buildAnimatedSVGPathByteStream(*fromPath.m_byteStream, *m_byteStream, *resultingPathBytes, progress);
 
     auto result = BasicShapePath::create(WTFMove(resultingPathBytes));
     result->setWindRule(windRule());
-    return WTFMove(result);
+    return result;
 }
 
 bool BasicShapeInset::operator==(const BasicShape& other) const
 {
     if (type() != other.type())
@@ -423,8 +423,8 @@
     result->setTopLeftRadius(WebCore::blend(fromInset.topLeftRadius(), topLeftRadius(), progress));
     result->setTopRightRadius(WebCore::blend(fromInset.topRightRadius(), topRightRadius(), progress));
     result->setBottomRightRadius(WebCore::blend(fromInset.bottomRightRadius(), bottomRightRadius(), progress));
     result->setBottomLeftRadius(WebCore::blend(fromInset.bottomLeftRadius(), bottomLeftRadius(), progress));
 
-    return WTFMove(result);
+    return result;
 }
 }
