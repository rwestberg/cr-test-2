diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/context/SWContextManager.cpp b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/context/SWContextManager.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/context/SWContextManager.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/context/SWContextManager.cpp
@@ -113,11 +113,11 @@
         return;
     }
 
     serviceWorker->setAsTerminatingOrTerminated();
 
-    m_pendingServiceWorkerTerminationRequests.add(identifier, std::make_unique<ServiceWorkerTerminationRequest>(*this, identifier, timeout));
+    m_pendingServiceWorkerTerminationRequests.add(identifier, makeUnique<ServiceWorkerTerminationRequest>(*this, identifier, timeout));
 
     auto& thread = serviceWorker->thread();
     thread.stop([this, identifier, serviceWorker = WTFMove(serviceWorker), completionHandler = WTFMove(completionHandler)]() mutable {
         m_pendingServiceWorkerTerminationRequests.remove(identifier);
 
@@ -149,11 +149,11 @@
         task(downcast<ServiceWorkerGlobalScope>(context));
     });
     return true;
 }
 
-NO_RETURN_DUE_TO_CRASH void SWContextManager::serviceWorkerFailedToTerminate(ServiceWorkerIdentifier serviceWorkerIdentifier)
+void SWContextManager::serviceWorkerFailedToTerminate(ServiceWorkerIdentifier serviceWorkerIdentifier)
 {
     UNUSED_PARAM(serviceWorkerIdentifier);
     RELEASE_LOG_ERROR(ServiceWorker, "Failed to terminate service worker with identifier %s, killing the service worker process", serviceWorkerIdentifier.loggingString().utf8().data());
     _exit(EXIT_FAILURE);
 }
