diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/worker/WorkerRuntimeAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/worker/WorkerRuntimeAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/worker/WorkerRuntimeAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/worker/WorkerRuntimeAgent.cpp
@@ -47,23 +47,16 @@
     , m_workerGlobalScope(context.workerGlobalScope)
 {
     ASSERT(context.workerGlobalScope.isContextThread());
 }
 
-void WorkerRuntimeAgent::didCreateFrontendAndBackend(FrontendRouter*, BackendDispatcher*)
-{
-}
-
-void WorkerRuntimeAgent::willDestroyFrontendAndBackend(DisconnectReason reason)
-{
-    InspectorRuntimeAgent::willDestroyFrontendAndBackend(reason);
-}
+WorkerRuntimeAgent::~WorkerRuntimeAgent() = default;
 
 InjectedScript WorkerRuntimeAgent::injectedScriptForEval(ErrorString& errorString, const int* executionContextId)
 {
     if (executionContextId) {
-        errorString = "Execution context id is not supported for workers as there is only one execution context."_s;
+        errorString = "executionContextId is not supported for workers as there is only one execution context"_s;
         return InjectedScript();
     }
 
     JSC::ExecState* scriptState = execStateFromWorkerGlobalScope(m_workerGlobalScope);
     return injectedScriptManager().injectedScriptFor(scriptState);
