diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSSelector.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSSelector.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSSelector.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSSelector.cpp
@@ -31,11 +31,11 @@
 #include "HTMLNames.h"
 #include "SelectorPseudoTypeMap.h"
 #include <wtf/Assertions.h>
 #include <wtf/StdLibExtras.h>
 #include <wtf/Vector.h>
-#include <wtf/text/AtomicStringHash.h>
+#include <wtf/text/AtomStringHash.h>
 #include <wtf/text/StringBuilder.h>
 
 namespace WebCore {
 
 using namespace HTMLNames;
@@ -61,12 +61,12 @@
     , m_caseInsensitiveAttributeValueMatching(false)
 #if !ASSERT_WITH_SECURITY_IMPLICATION_DISABLED
     , m_destructorHasBeenCalled(false)
 #endif
 {
-    const AtomicString& tagLocalName = tagQName.localName();
-    const AtomicString tagLocalNameASCIILowercase = tagLocalName.convertToASCIILowercase();
+    const AtomString& tagLocalName = tagQName.localName();
+    const AtomString tagLocalNameASCIILowercase = tagLocalName.convertToASCIILowercase();
 
     if (tagLocalName == tagLocalNameASCIILowercase) {
         m_data.m_tagQName = tagQName.impl();
         m_data.m_tagQName->ref();
     } else {
@@ -80,11 +80,11 @@
     ASSERT(match() != Tag);
     ASSERT(!m_hasNameWithCase);
     if (m_hasRareData)
         return;
     // Move the value to the rare data stucture.
-    AtomicString value { adoptRef(m_data.m_value) };
+    AtomString value { adoptRef(m_data.m_value) };
     m_data.m_rareData = &RareData::create(WTFMove(value)).leakRef();
     m_hasRareData = true;
 }
 
 static unsigned simpleSelectorSpecificityInternal(const CSSSelector& simpleSelector, bool isComputingMaximumSpecificity);
@@ -306,24 +306,22 @@
 
     ASSERT_NOT_REACHED();
     return PseudoId::None;
 }
 
-CSSSelector::PseudoElementType CSSSelector::parsePseudoElementType(const String& name)
+CSSSelector::PseudoElementType CSSSelector::parsePseudoElementType(StringView name)
 {
     if (name.isNull())
         return PseudoElementUnknown;
-
-    PseudoElementType type = parsePseudoElementString(*name.impl());
+    auto type = parsePseudoElementString(name);
     if (type == PseudoElementUnknown) {
         if (name.startsWith("-webkit-"))
             type = PseudoElementWebKitCustom;
     }
     return type;
 }
 
-
 bool CSSSelector::operator==(const CSSSelector& other) const
 {
     const CSSSelector* sel1 = this;
     const CSSSelector* sel2 = &other;
 
@@ -371,11 +369,11 @@
         break;
     }
 
 }
 
-static void appendLangArgumentList(StringBuilder& str, const Vector<AtomicString>& argumentList)
+static void appendLangArgumentList(StringBuilder& str, const Vector<AtomString>& argumentList)
 {
     unsigned argumentListSize = argumentList.size();
     for (unsigned i = 0; i < argumentListSize; ++i) {
         str.append('"');
         str.append(argumentList[i]);
@@ -430,10 +428,13 @@
                 str.appendLiteral(":-webkit-autofill");
                 break;
             case CSSSelector::PseudoClassAutofillStrongPassword:
                 str.appendLiteral(":-webkit-autofill-strong-password");
                 break;
+            case CSSSelector::PseudoClassAutofillStrongPasswordViewable:
+                str.appendLiteral(":-webkit-autofill-strong-password-viewable");
+                break;
             case CSSSelector::PseudoClassDrag:
                 str.appendLiteral(":-webkit-drag");
                 break;
             case CSSSelector::PseudoClassFullPageMedia:
                 str.appendLiteral(":-webkit-full-page-media");
@@ -669,11 +670,11 @@
                 str.appendLiteral("::");
                 str.append(cs->serializingValue());
             }
         } else if (cs->isAttributeSelector()) {
             str.append('[');
-            const AtomicString& prefix = cs->attribute().prefix();
+            const AtomString& prefix = cs->attribute().prefix();
             if (!prefix.isEmpty()) {
                 str.append(prefix);
                 str.append('|');
             }
             str.append(cs->attribute().localName());
@@ -757,17 +758,17 @@
     m_data.m_rareData->m_attribute = value;
     m_data.m_rareData->m_attributeCanonicalLocalName = convertToLowercase ? value.localName().convertToASCIILowercase() : value.localName();
     m_caseInsensitiveAttributeValueMatching = matchType == CaseInsensitive;
 }
 
-void CSSSelector::setArgument(const AtomicString& value)
+void CSSSelector::setArgument(const AtomString& value)
 {
     createRareData();
     m_data.m_rareData->m_argument = value;
 }
 
-void CSSSelector::setLangArgumentList(std::unique_ptr<Vector<AtomicString>> argumentList)
+void CSSSelector::setLangArgumentList(std::unique_ptr<Vector<AtomString>> argumentList)
 {
     createRareData();
     m_data.m_rareData->m_langArgumentList = WTFMove(argumentList);
 }
 
@@ -800,11 +801,11 @@
 {
     ASSERT(m_hasRareData);
     return m_data.m_rareData->m_b;
 }
 
-CSSSelector::RareData::RareData(AtomicString&& value)
+CSSSelector::RareData::RareData(AtomString&& value)
     : m_matchingValue(value)
     , m_serializingValue(value)
     , m_a(0)
     , m_b(0)
     , m_attribute(anyQName())
