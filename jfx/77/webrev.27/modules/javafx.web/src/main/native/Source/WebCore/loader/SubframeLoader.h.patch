diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/SubframeLoader.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/SubframeLoader.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/SubframeLoader.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/SubframeLoader.h
@@ -53,12 +53,12 @@
 public:
     explicit SubframeLoader(Frame&);
 
     void clear();
 
-    bool requestFrame(HTMLFrameOwnerElement&, const String& url, const AtomicString& frameName, LockHistory = LockHistory::Yes, LockBackForwardList = LockBackForwardList::Yes);
-    bool requestObject(HTMLPlugInImageElement&, const String& url, const AtomicString& frameName,
+    bool requestFrame(HTMLFrameOwnerElement&, const String& url, const AtomString& frameName, LockHistory = LockHistory::Yes, LockBackForwardList = LockBackForwardList::Yes);
+    bool requestObject(HTMLPlugInImageElement&, const String& url, const AtomString& frameName,
         const String& serviceType, const Vector<String>& paramNames, const Vector<String>& paramValues);
 
     RefPtr<Widget> createJavaAppletWidget(const IntSize&, HTMLAppletElement&, const Vector<String>& paramNames, const Vector<String>& paramValues);
 
     WEBCORE_EXPORT bool allowPlugins();
@@ -67,11 +67,11 @@
 
     bool resourceWillUsePlugin(const String& url, const String& mimeType);
 
 private:
     bool requestPlugin(HTMLPlugInImageElement&, const URL&, const String& serviceType, const Vector<String>& paramNames, const Vector<String>& paramValues, bool useFallback);
-    Frame* loadOrRedirectSubframe(HTMLFrameOwnerElement&, const URL&, const AtomicString& frameName, LockHistory, LockBackForwardList);
+    Frame* loadOrRedirectSubframe(HTMLFrameOwnerElement&, const URL&, const AtomString& frameName, LockHistory, LockBackForwardList);
     Frame* loadSubframe(HTMLFrameOwnerElement&, const URL&, const String& name, const String& referrer);
     bool loadPlugin(HTMLPlugInImageElement&, const URL&, const String& mimeType, const Vector<String>& paramNames, const Vector<String>& paramValues, bool useFallback);
 
     bool shouldUsePlugin(const URL&, const String& mimeType, bool hasFallback, bool& useFallback);
     bool pluginIsLoadable(const URL&, const String& mimeType);
