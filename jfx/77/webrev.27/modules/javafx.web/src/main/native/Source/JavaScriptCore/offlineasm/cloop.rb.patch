diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/offlineasm/cloop.rb b/modules/javafx.web/src/main/native/Source/JavaScriptCore/offlineasm/cloop.rb
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/offlineasm/cloop.rb
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/offlineasm/cloop.rb
@@ -1,6 +1,6 @@
-# Copyright (C) 2012-2018 Apple Inc. All rights reserved.
+# Copyright (C) 2012-2019 Apple Inc. All rights reserved.
 #
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions
 # are met:
 # 1. Redistributions of source code must retain the above copyright
@@ -31,12 +31,12 @@
 # code and the usage convention of registers will look a lot like the
 # ARMv7 backend's.
 
 def cloopMapType(type)
     case type
-    when :int;            ".i()"
-    when :uint;           ".u()"
+    when :intptr;         ".i()"
+    when :uintptr;        ".u()"
     when :int32;          ".i32()"
     when :uint32;         ".u32()"
     when :int64;          ".i64()"
     when :uint64;         ".u64()"
     when :int8;           ".i8()"
@@ -53,17 +53,17 @@
     end
 end
 
 
 class SpecialRegister < NoChildren
-    def clLValue(type=:int)
+    def clLValue(type=:intptr)
         clDump
     end
     def clDump
         @name
     end
-    def clValue(type=:int)
+    def clValue(type=:intptr)
         @name + cloopMapType(type)
     end
 end
 
 C_LOOP_SCRATCH_FPR = SpecialRegister.new("d6")
@@ -101,14 +101,14 @@
             "sp"
         else
             raise "Bad register #{name} for C_LOOP at #{codeOriginString}"
         end
     end
-    def clLValue(type=:int)
+    def clLValue(type=:intptr)
         clDump
     end
-    def clValue(type=:int)
+    def clValue(type=:intptr)
         clDump + cloopMapType(type)
     end
 end
 
 class FPRegisterID
@@ -128,26 +128,26 @@
             "d5"
         else
             raise "Bad register #{name} for C_LOOP at #{codeOriginString}"
         end
     end
-    def clLValue(type=:int)
+    def clLValue(type=:intptr)
         clDump
     end
-    def clValue(type=:int)
+    def clValue(type=:intptr)
         clDump + cloopMapType(type)
     end
 end
 
 class Immediate
     def clDump
         "#{value}"
     end
-    def clLValue(type=:int)
+    def clLValue(type=:intptr)
         raise "Immediate cannot be used as an LValue"
     end
-    def clValue(type=:int)
+    def clValue(type=:intptr)
         # There is a case of a very large unsigned number (0x8000000000000000)
         # which we wish to encode.  Unfortunately, the C/C++ compiler
         # complains if we express that number as a positive decimal integer.
         # Hence, for positive values, we just convert the number into hex form
         # to keep the compiler happy.
@@ -160,38 +160,38 @@
 
         case type
         when :int8;    "int8_t(#{valueStr})"
         when :int32;   "int32_t(#{valueStr})"
         when :int64;   "int64_t(#{valueStr})"
-        when :int;     "intptr_t(#{valueStr})"
+        when :intptr;  "intptr_t(#{valueStr})"
         when :uint8;   "uint8_t(#{valueStr})"
         when :uint32;  "uint32_t(#{valueStr})"
         when :uint64;  "uint64_t(#{valueStr})"
-        when :uint;    "uintptr_t(#{valueStr})"
+        when :uintptr; "uintptr_t(#{valueStr})"
         else
             raise "Not implemented immediate of type: #{type}" 
         end
     end
 end
 
 class Address
     def clDump
         "[#{base.clDump}, #{offset.value}]"
     end
-    def clLValue(type=:int)
+    def clLValue(type=:intptr)
         clValue(type)
     end
-    def clValue(type=:int)
+    def clValue(type=:intptr)
         case type
         when :int8;         int8MemRef
         when :int32;        int32MemRef
         when :int64;        int64MemRef
-        when :int;          intMemRef
+        when :intptr;       intptrMemRef
         when :uint8;        uint8MemRef
         when :uint32;       uint32MemRef
         when :uint64;       uint64MemRef
-        when :uint;         uintMemRef
+        when :uintptr;      uintptrMemRef
         when :opcode;       opcodeMemRef
         when :nativeFunc;   nativeFuncMemRef
         else
             raise "Unexpected Address type: #{type}"
         end
@@ -215,11 +215,11 @@
         "*CAST<int32_t*>(#{pointerExpr})"
     end
     def int64MemRef
         "*CAST<int64_t*>(#{pointerExpr})"
     end
-    def intMemRef
+    def intptrMemRef
         "*CAST<intptr_t*>(#{pointerExpr})"
     end
     def uint8MemRef
         "*CAST<uint8_t*>(#{pointerExpr})"
     end
@@ -230,11 +230,11 @@
         "*CAST<uint32_t*>(#{pointerExpr})"
     end
     def uint64MemRef
         "*CAST<uint64_t*>(#{pointerExpr})"
     end
-    def uintMemRef
+    def uintptrMemRef
         "*CAST<uintptr_t*>(#{pointerExpr})"
     end
     def nativeFuncMemRef
         "*CAST<NativeFunction*>(#{pointerExpr})"
     end
@@ -248,23 +248,23 @@
 
 class BaseIndex
     def clDump
         "[#{base.clDump}, #{offset.clDump}, #{index.clDump} << #{scaleShift}]"
     end
-    def clLValue(type=:int)
+    def clLValue(type=:intptr)
         clValue(type)
     end
-    def clValue(type=:int)
+    def clValue(type=:intptr)
         case type
         when :int8;       int8MemRef
         when :int32;      int32MemRef
         when :int64;      int64MemRef
-        when :int;        intMemRef
+        when :intptr;     intptrMemRef
         when :uint8;      uint8MemRef
         when :uint32;     uint32MemRef
         when :uint64;     uint64MemRef
-        when :uint;       uintMemRef
+        when :uintptr;    uintptrMemRef
         when :opcode;     opcodeMemRef
         else
             raise "Unexpected BaseIndex type: #{type}"
         end
     end
@@ -285,11 +285,11 @@
         "*CAST<int32_t*>(#{pointerExpr})"
     end
     def int64MemRef
         "*CAST<int64_t*>(#{pointerExpr})"
     end
-    def intMemRef
+    def intptrMemRef
         "*CAST<intptr_t*>(#{pointerExpr})"
     end
     def uint8MemRef
         "*CAST<uint8_t*>(#{pointerExpr})"
     end
@@ -300,11 +300,11 @@
         "*CAST<uint32_t*>(#{pointerExpr})"
     end
     def uint64MemRef
         "*CAST<uint64_t*>(#{pointerExpr})"
     end
-    def uintMemRef
+    def uintptrMemRef
         "*CAST<uintptr_t*>(#{pointerExpr})"
     end
     def opcodeMemRef
         "*CAST<Opcode*>(#{pointerExpr})"
     end
@@ -315,20 +315,20 @@
 
 class AbsoluteAddress
     def clDump
         "#{codeOriginString}"
     end
-    def clLValue(type=:int)
+    def clLValue(type=:intptr)
         clValue(type)
     end
     def clValue
         clDump
     end
 end
 
 class LabelReference
-    def intMemRef
+    def intptrMemRef
         "*CAST<intptr_t*>(&#{cLabel})"
     end
     def cloopEmitLea(destination, type)
         $asm.putc "#{destination.clLValue(:voidPtr)} = CAST<void*>(&#{cLabel});"
     end
@@ -383,11 +383,11 @@
     operands.map{|v| v.clDump}.join(", ")
 end
 
 
 def cloopEmitOperation(operands, type, operator)
-    raise unless type == :int || type == :uint || type == :int32 || type == :uint32 || \
+    raise unless type == :intptr || type == :uintptr || type == :int32 || type == :uint32 || \
         type == :int64 || type == :uint64 || type == :double
     if operands.size == 3
         op1 = operands[0]
         op2 = operands[1]
         dst = operands[2]
@@ -407,11 +407,11 @@
     end
     $asm.putc "#{dst.clLValue(type)} = #{truncationHeader}#{op1.clValue(type)} #{operator} #{op2.clValue(type)}#{truncationFooter};"
 end
 
 def cloopEmitShiftOperation(operands, type, operator)
-    raise unless type == :int || type == :uint || type == :int32 || type == :uint32 || type == :int64 || type == :uint64
+    raise unless type == :intptr || type == :uintptr || type == :int32 || type == :uint32 || type == :int64 || type == :uint64
     if operands.size == 3
         op1 = operands[0]
         op2 = operands[1]
         dst = operands[2]
     else
@@ -424,15 +424,18 @@
         truncationFooter = ")"
     else
         truncationHeader = ""
         truncationFooter = ""
     end
-    $asm.putc "#{dst.clLValue(type)} = #{truncationHeader}#{operands[1].clValue(type)} #{operator} (#{operands[0].clValue(:int)} & 0x1f)#{truncationFooter};"
+    shiftMask = "((sizeof(uintptr_t) == 8) ? 0x3f : 0x1f)" if type == :intptr || type == :uintptr
+    shiftMask = "0x3f" if type == :int64 || type == :uint64
+    shiftMask = "0x1f" if type == :int32 || type == :uint32
+    $asm.putc "#{dst.clLValue(type)} = #{truncationHeader}#{operands[1].clValue(type)} #{operator} (#{operands[0].clValue(:intptr)} & #{shiftMask})#{truncationFooter};"
 end
 
 def cloopEmitUnaryOperation(operands, type, operator)
-    raise unless type == :int || type == :uint || type == :int32 || type == :uint32 || type == :int64 || type == :uint64
+    raise unless type == :intptr || type == :uintptr || type == :int32 || type == :uint32 || type == :int64 || type == :uint64
     raise unless operands.size == 1
     raise unless not operands[0].is_a? Immediate
     op = operands[0]
     dst = operands[0]
     if dst.is_a? RegisterID and (type == :int32 or type == :uint32)
@@ -499,11 +502,11 @@
     $asm.putc "#{operands[-1].clLValue} = (#{conditionExpr});"
 end
 
 def cloopEmitOpAndBranch(operands, operator, type, conditionTest)
     case type
-    when :int;   tempType = "intptr_t"
+    when :intptr; tempType = "intptr_t"
     when :int32; tempType = "int32_t"
     when :int64; tempType = "int64_t"
     else
         raise "Unimplemented type"
     end
@@ -565,74 +568,74 @@
         when "addi"
             cloopEmitOperation(operands, :int32, "+")
         when "addq"
             cloopEmitOperation(operands, :int64, "+")
         when "addp"
-            cloopEmitOperation(operands, :int, "+")
+            cloopEmitOperation(operands, :intptr, "+")
 
         when "andi"
             cloopEmitOperation(operands, :int32, "&")
         when "andq"
             cloopEmitOperation(operands, :int64, "&")
         when "andp"
-            cloopEmitOperation(operands, :int, "&")
+            cloopEmitOperation(operands, :intptr, "&")
 
         when "ori"
             cloopEmitOperation(operands, :int32, "|")
         when "orq"
             cloopEmitOperation(operands, :int64, "|")
         when "orp"
-            cloopEmitOperation(operands, :int, "|")
+            cloopEmitOperation(operands, :intptr, "|")
 
         when "xori"
             cloopEmitOperation(operands, :int32, "^")
         when "xorq"
             cloopEmitOperation(operands, :int64, "^")
         when "xorp"
-            cloopEmitOperation(operands, :int, "^")
+            cloopEmitOperation(operands, :intptr, "^")
 
         when "lshifti"
             cloopEmitShiftOperation(operands, :int32, "<<")
         when "lshiftq"
             cloopEmitShiftOperation(operands, :int64, "<<")
         when "lshiftp"
-            cloopEmitShiftOperation(operands, :int, "<<")
+            cloopEmitShiftOperation(operands, :intptr, "<<")
 
         when "rshifti"
             cloopEmitShiftOperation(operands, :int32, ">>")
         when "rshiftq"
             cloopEmitShiftOperation(operands, :int64, ">>")
         when "rshiftp"
-            cloopEmitShiftOperation(operands, :int, ">>")
+            cloopEmitShiftOperation(operands, :intptr, ">>")
 
         when "urshifti"
             cloopEmitShiftOperation(operands, :uint32, ">>")
         when "urshiftq"
             cloopEmitShiftOperation(operands, :uint64, ">>")
         when "urshiftp"
-            cloopEmitShiftOperation(operands, :uint, ">>")
+            cloopEmitShiftOperation(operands, :uintptr, ">>")
 
         when "muli"
             cloopEmitOperation(operands, :int32, "*")
         when "mulq"
             cloopEmitOperation(operands, :int64, "*")
         when "mulp"
-            cloopEmitOperation(operands, :int, "*")
+            cloopEmitOperation(operands, :intptr, "*")
 
         when "subi"
             cloopEmitOperation(operands, :int32, "-")
         when "subq"
             cloopEmitOperation(operands, :int64, "-")
         when "subp"
-            cloopEmitOperation(operands, :int, "-")
+            cloopEmitOperation(operands, :intptr, "-")
 
         when "negi"
             cloopEmitUnaryOperation(operands, :int32, "-")
         when "negq"
             cloopEmitUnaryOperation(operands, :int64, "-")
         when "negp"
-            cloopEmitUnaryOperation(operands, :int, "-")
+            cloopEmitUnaryOperation(operands, :intptr, "-")
 
         when "noti"
             cloopEmitUnaryOperation(operands, :int32, "~")
 
         when "loadi"
@@ -642,29 +645,31 @@
         when "loadis"
             $asm.putc "#{operands[1].clLValue(:int32)} = #{operands[0].int32MemRef};"
         when "loadq"
             $asm.putc "#{operands[1].clLValue(:int64)} = #{operands[0].int64MemRef};"
         when "loadp"
-            $asm.putc "#{operands[1].clLValue} = #{operands[0].intMemRef};"
+            $asm.putc "#{operands[1].clLValue} = #{operands[0].intptrMemRef};"
         when "storei"
             $asm.putc "#{operands[1].int32MemRef} = #{operands[0].clValue(:int32)};"
         when "storeq"
             $asm.putc "#{operands[1].int64MemRef} = #{operands[0].clValue(:int64)};"
         when "storep"
-            $asm.putc "#{operands[1].intMemRef} = #{operands[0].clValue(:int)};"
+            $asm.putc "#{operands[1].intptrMemRef} = #{operands[0].clValue(:intptr)};"
         when "loadb"
-            $asm.putc "#{operands[1].clLValue(:int)} = #{operands[0].uint8MemRef};"
-        when "loadbs"
-            $asm.putc "#{operands[1].clLValue(:int)} = (uint32_t)(#{operands[0].int8MemRef});"
-        when "loadbsp"
-            $asm.putc "#{operands[1].clLValue(:int)} = #{operands[0].int8MemRef};"
+            $asm.putc "#{operands[1].clLValue(:intptr)} = #{operands[0].uint8MemRef};"
+        when "loadbsi"
+            $asm.putc "#{operands[1].clLValue(:uint32)} = (uint32_t)((int32_t)#{operands[0].int8MemRef});"
+        when "loadbsq"
+            $asm.putc "#{operands[1].clLValue(:uint64)} = (int64_t)#{operands[0].int8MemRef};"
         when "storeb"
             $asm.putc "#{operands[1].uint8MemRef} = #{operands[0].clValue(:int8)};"
         when "loadh"
-            $asm.putc "#{operands[1].clLValue(:int)} = #{operands[0].uint16MemRef};"
-        when "loadhs"
-            $asm.putc "#{operands[1].clLValue(:int)} = (uint32_t)(#{operands[0].int16MemRef});"
+            $asm.putc "#{operands[1].clLValue(:intptr)} = #{operands[0].uint16MemRef};"
+        when "loadhsi"
+            $asm.putc "#{operands[1].clLValue(:uint32)} = (uint32_t)((int32_t)#{operands[0].int16MemRef});"
+        when "loadhsq"
+            $asm.putc "#{operands[1].clLValue(:uint64)} = (int64_t)#{operands[0].int16MemRef};"
         when "storeh"
             $asm.putc "*#{operands[1].uint16MemRef} = #{operands[0].clValue(:int16)};"
         when "loadd"
             $asm.putc "#{operands[1].clLValue(:double)} = #{operands[0].dblMemRef};"
         when "stored"
@@ -708,11 +713,11 @@
             cloopEmitCompareDoubleWithNaNCheckAndBranch(operands, "<")
         when "bdltequn"
             cloopEmitCompareDoubleWithNaNCheckAndBranch(operands, "<=")
 
         when "td2i"
-            $asm.putc "#{operands[1].clLValue(:int)} = (uint32_t)(intptr_t)#{operands[0].clValue(:double)}; // td2i"
+            $asm.putc "#{operands[1].clLValue(:intptr)} = (uint32_t)(intptr_t)#{operands[0].clValue(:double)}; // td2i"
 
         when "bcd2i"  # operands: srcDbl dstInt slowPath
             $asm.putc "{ // bcd2i"
             $asm.putc "    double d = #{operands[0].clValue(:double)};"
             $asm.putc "    const int32_t asInt32 = int32_t(d);"
@@ -720,11 +725,11 @@
             $asm.putc "        goto  #{operands[2].cLabel};"
             $asm.putc "    #{operands[1].clLValue} = (uint32_t)asInt32;"
             $asm.putc "}"
 
         when "move"
-            $asm.putc "#{operands[1].clLValue(:int)} = #{operands[0].clValue(:int)};"
+            $asm.putc "#{operands[1].clLValue(:intptr)} = #{operands[0].clValue(:intptr)};"
         when "sxi2q"
             $asm.putc "#{operands[1].clLValue(:int64)} = #{operands[0].clValue(:int32)};"
         when "zxi2q"
             $asm.putc "#{operands[1].clLValue(:uint64)} = #{operands[0].clValue(:uint32)};"
         when "nop"
@@ -734,119 +739,119 @@
         when "bieq"
             cloopEmitCompareAndBranch(operands, :int32, "==")
         when "bqeq"
             cloopEmitCompareAndBranch(operands, :int64, "==")
         when "bpeq"
-            cloopEmitCompareAndBranch(operands, :int, "==")
+            cloopEmitCompareAndBranch(operands, :intptr, "==")
 
         when "bbneq"
             cloopEmitCompareAndBranch(operands, :int8, "!=")
         when "bineq"
             cloopEmitCompareAndBranch(operands, :int32, "!=")
         when "bqneq"
             cloopEmitCompareAndBranch(operands, :int64, "!=")
         when "bpneq"
-            cloopEmitCompareAndBranch(operands, :int, "!=")
+            cloopEmitCompareAndBranch(operands, :intptr, "!=")
 
         when "bba"
             cloopEmitCompareAndBranch(operands, :uint8, ">")
         when "bia"
             cloopEmitCompareAndBranch(operands, :uint32, ">")
         when "bqa"
             cloopEmitCompareAndBranch(operands, :uint64, ">")
         when "bpa"
-            cloopEmitCompareAndBranch(operands, :uint, ">")
+            cloopEmitCompareAndBranch(operands, :uintptr, ">")
 
         when "bbaeq"
             cloopEmitCompareAndBranch(operands, :uint8, ">=")
         when "biaeq"
             cloopEmitCompareAndBranch(operands, :uint32, ">=")
         when "bqaeq"
             cloopEmitCompareAndBranch(operands, :uint64, ">=")
         when "bpaeq"
-            cloopEmitCompareAndBranch(operands, :uint, ">=")
+            cloopEmitCompareAndBranch(operands, :uintptr, ">=")
 
         when "bbb"
             cloopEmitCompareAndBranch(operands, :uint8, "<")
         when "bib"
             cloopEmitCompareAndBranch(operands, :uint32, "<")
         when "bqb"
             cloopEmitCompareAndBranch(operands, :uint64, "<")
         when "bpb"
-            cloopEmitCompareAndBranch(operands, :uint, "<")
+            cloopEmitCompareAndBranch(operands, :uintptr, "<")
 
         when "bbbeq"
             cloopEmitCompareAndBranch(operands, :uint8, "<=")
         when "bibeq"
             cloopEmitCompareAndBranch(operands, :uint32, "<=")
         when "bqbeq"
             cloopEmitCompareAndBranch(operands, :uint64, "<=")
         when "bpbeq"
-            cloopEmitCompareAndBranch(operands, :uint, "<=")
+            cloopEmitCompareAndBranch(operands, :uintptr, "<=")
 
         when "bbgt"
             cloopEmitCompareAndBranch(operands, :int8, ">")
         when "bigt"
             cloopEmitCompareAndBranch(operands, :int32, ">")
         when "bqgt"
             cloopEmitCompareAndBranch(operands, :int64, ">")
         when "bpgt"
-            cloopEmitCompareAndBranch(operands, :int, ">")
+            cloopEmitCompareAndBranch(operands, :intptr, ">")
 
         when "bbgteq"
             cloopEmitCompareAndBranch(operands, :int8, ">=")
         when "bigteq"
             cloopEmitCompareAndBranch(operands, :int32, ">=")
         when "bqgteq"
             cloopEmitCompareAndBranch(operands, :int64, ">=")
         when "bpgteq"
-            cloopEmitCompareAndBranch(operands, :int, ">=")
+            cloopEmitCompareAndBranch(operands, :intptr, ">=")
 
         when "bblt"
             cloopEmitCompareAndBranch(operands, :int8, "<")
         when "bilt"
             cloopEmitCompareAndBranch(operands, :int32, "<")
         when "bqlt"
             cloopEmitCompareAndBranch(operands, :int64, "<")
         when "bplt"
-            cloopEmitCompareAndBranch(operands, :int, "<")
+            cloopEmitCompareAndBranch(operands, :intptr, "<")
 
         when "bblteq"
             cloopEmitCompareAndBranch(operands, :int8, "<=")
         when "bilteq"
             cloopEmitCompareAndBranch(operands, :int32, "<=")
         when "bqlteq"
             cloopEmitCompareAndBranch(operands, :int64, "<=")
         when "bplteq"
-            cloopEmitCompareAndBranch(operands, :int, "<=")
+            cloopEmitCompareAndBranch(operands, :intptr, "<=")
 
         when "btbz"
             cloopEmitTestAndBranchIf(operands, :int8, "== 0", operands[-1].cLabel)
         when "btiz"
             cloopEmitTestAndBranchIf(operands, :int32, "== 0", operands[-1].cLabel)
         when "btqz"
             cloopEmitTestAndBranchIf(operands, :int64, "== 0", operands[-1].cLabel)
         when "btpz"
-            cloopEmitTestAndBranchIf(operands, :int, "== 0", operands[-1].cLabel)
+            cloopEmitTestAndBranchIf(operands, :intptr, "== 0", operands[-1].cLabel)
 
         when "btbnz"
             cloopEmitTestAndBranchIf(operands, :int8, "!= 0", operands[-1].cLabel)
         when "btinz"
             cloopEmitTestAndBranchIf(operands, :int32, "!= 0", operands[-1].cLabel)
         when "btqnz"
             cloopEmitTestAndBranchIf(operands, :int64, "!= 0", operands[-1].cLabel)
         when "btpnz"
-            cloopEmitTestAndBranchIf(operands, :int, "!= 0", operands[-1].cLabel)
+            cloopEmitTestAndBranchIf(operands, :intptr, "!= 0", operands[-1].cLabel)
 
         when "btbs"
             cloopEmitTestAndBranchIf(operands, :int8, "< 0", operands[-1].cLabel)
         when "btis"
             cloopEmitTestAndBranchIf(operands, :int32, "< 0", operands[-1].cLabel)
         when "btqs"
             cloopEmitTestAndBranchIf(operands, :int64, "< 0", operands[-1].cLabel)
         when "btps"
-            cloopEmitTestAndBranchIf(operands, :int, "< 0", operands[-1].cLabel)
+            cloopEmitTestAndBranchIf(operands, :intptr, "< 0", operands[-1].cLabel)
 
         # For jmp, we do not want to assume that we have COMPUTED_GOTO support.
         # Fortunately, the only times we should ever encounter indirect jmps is
         # when the jmp target is a CLoop opcode (by design).
         #
@@ -878,119 +883,119 @@
         when "cieq"
             cloopEmitCompareAndSet(operands, :uint32, "==")
         when "cqeq"
             cloopEmitCompareAndSet(operands, :uint64, "==")
         when "cpeq"
-            cloopEmitCompareAndSet(operands, :uint, "==")
+            cloopEmitCompareAndSet(operands, :uintptr, "==")
 
         when "cbneq"
             cloopEmitCompareAndSet(operands, :uint8, "!=")
         when "cineq"
             cloopEmitCompareAndSet(operands, :uint32, "!=")
         when "cqneq"
             cloopEmitCompareAndSet(operands, :uint64, "!=")
         when "cpneq"
-            cloopEmitCompareAndSet(operands, :uint, "!=")
+            cloopEmitCompareAndSet(operands, :uintptr, "!=")
 
         when "cba"
             cloopEmitCompareAndSet(operands, :uint8, ">")
         when "cia"
             cloopEmitCompareAndSet(operands, :uint32, ">")
         when "cqa"
             cloopEmitCompareAndSet(operands, :uint64, ">")
         when "cpa"
-            cloopEmitCompareAndSet(operands, :uint, ">")
+            cloopEmitCompareAndSet(operands, :uintptr, ">")
 
         when "cbaeq"
             cloopEmitCompareAndSet(operands, :uint8, ">=")
         when "ciaeq"
             cloopEmitCompareAndSet(operands, :uint32, ">=")
         when "cqaeq"
             cloopEmitCompareAndSet(operands, :uint64, ">=")
         when "cpaeq"
-            cloopEmitCompareAndSet(operands, :uint, ">=")
+            cloopEmitCompareAndSet(operands, :uintptr, ">=")
 
         when "cbb"
             cloopEmitCompareAndSet(operands, :uint8, "<")
         when "cib"
             cloopEmitCompareAndSet(operands, :uint32, "<")
         when "cqb"
             cloopEmitCompareAndSet(operands, :uint64, "<")
         when "cpb"
-            cloopEmitCompareAndSet(operands, :uint, "<")
+            cloopEmitCompareAndSet(operands, :uintptr, "<")
 
         when "cbbeq"
             cloopEmitCompareAndSet(operands, :uint8, "<=")
         when "cibeq"
             cloopEmitCompareAndSet(operands, :uint32, "<=")
         when "cqbeq"
             cloopEmitCompareAndSet(operands, :uint64, "<=")
         when "cpbeq"
-            cloopEmitCompareAndSet(operands, :uint, "<=")
+            cloopEmitCompareAndSet(operands, :uintptr, "<=")
 
         when "cbgt"
             cloopEmitCompareAndSet(operands, :int8, ">")
         when "cigt"
             cloopEmitCompareAndSet(operands, :int32, ">")
         when "cqgt"
             cloopEmitCompareAndSet(operands, :int64, ">")
         when "cpgt"
-            cloopEmitCompareAndSet(operands, :int, ">")
+            cloopEmitCompareAndSet(operands, :intptr, ">")
 
         when "cbgteq"
             cloopEmitCompareAndSet(operands, :int8, ">=")
         when "cigteq"
             cloopEmitCompareAndSet(operands, :int32, ">=")
         when "cqgteq"
             cloopEmitCompareAndSet(operands, :int64, ">=")
         when "cpgteq"
-            cloopEmitCompareAndSet(operands, :int, ">=")
+            cloopEmitCompareAndSet(operands, :intptr, ">=")
 
         when "cblt"
             cloopEmitCompareAndSet(operands, :int8, "<")
         when "cilt"
             cloopEmitCompareAndSet(operands, :int32, "<")
         when "cqlt"
             cloopEmitCompareAndSet(operands, :int64, "<")
         when "cplt"
-            cloopEmitCompareAndSet(operands, :int, "<")
+            cloopEmitCompareAndSet(operands, :intptr, "<")
 
         when "cblteq"
             cloopEmitCompareAndSet(operands, :int8, "<=")
         when "cilteq"
             cloopEmitCompareAndSet(operands, :int32, "<=")
         when "cqlteq"
             cloopEmitCompareAndSet(operands, :int64, "<=")
         when "cplteq"
-            cloopEmitCompareAndSet(operands, :int, "<=")
+            cloopEmitCompareAndSet(operands, :intptr, "<=")
 
         when "tbs"
             cloopEmitTestSet(operands, :int8, "< 0")
         when "tis"
             cloopEmitTestSet(operands, :int32, "< 0")
         when "tqs"
             cloopEmitTestSet(operands, :int64, "< 0")
         when "tps"
-            cloopEmitTestSet(operands, :int, "< 0")
+            cloopEmitTestSet(operands, :intptr, "< 0")
 
         when "tbz"
             cloopEmitTestSet(operands, :int8, "== 0")
         when "tiz"
             cloopEmitTestSet(operands, :int32, "== 0")
         when "tqz"
             cloopEmitTestSet(operands, :int64, "== 0")
         when "tpz"
-            cloopEmitTestSet(operands, :int, "== 0")
+            cloopEmitTestSet(operands, :intptr, "== 0")
 
         when "tbnz"
             cloopEmitTestSet(operands, :int8, "!= 0")
         when "tinz"
             cloopEmitTestSet(operands, :int32, "!= 0")
         when "tqnz"
             cloopEmitTestSet(operands, :int64, "!= 0")
         when "tpnz"
-            cloopEmitTestSet(operands, :int, "!= 0")
+            cloopEmitTestSet(operands, :intptr, "!= 0")
 
         # 64-bit instruction: cdqi (based on X64)
         # Sign extends the lower 32 bits of t0, but put the sign extension into
         # the lower 32 bits of t1. Leave the upper 32 bits of t0 and t1 unchanged.
         when "cdqi"
@@ -1013,11 +1018,11 @@
         when "idivi"
             # Divide t1,t0 (EDX,EAX) by the specified arg, and store the remainder in t1,
             # and quotient in t0:
             $asm.putc "{ // idivi"
             $asm.putc "    int64_t dividend = (int64_t(t1.u32()) << 32) | t0.u32();"
-            $asm.putc "    int64_t divisor = #{operands[0].clValue(:int)};"
+            $asm.putc "    int64_t divisor = #{operands[0].clValue(:intptr)};"
             $asm.putc "    t1 = (uint32_t)(dividend % divisor); // remainder"
             $asm.putc "    t0 = (uint32_t)(dividend / divisor); // quotient"
             $asm.putc "}"
 
         # 32-bit instruction: fii2d int32LoOp int32HiOp dblOp (based on ARMv7)
@@ -1041,11 +1046,11 @@
             $asm.putc "#{operands[1].clLValue(:int64)} = #{operands[0].clValue(:bitsAsInt64)}; // fd2q"
 
         when "leai"
             operands[0].cloopEmitLea(operands[1], :int32)
         when "leap"
-            operands[0].cloopEmitLea(operands[1], :int)
+            operands[0].cloopEmitLea(operands[1], :intptr)
 
         when "baddio"
             cloopEmitOpAndBranchIfOverflow(operands, "+", :int32)
         when "bsubio"
             cloopEmitOpAndBranchIfOverflow(operands, "-", :int32)
@@ -1065,15 +1070,15 @@
             cloopEmitOpAndBranch(operands, "+", :int64, "== 0")
         when "baddqnz"
             cloopEmitOpAndBranch(operands, "+", :int64, "!= 0")
 
         when "baddps"
-            cloopEmitOpAndBranch(operands, "+", :int, "< 0")
+            cloopEmitOpAndBranch(operands, "+", :intptr, "< 0")
         when "baddpz"
-            cloopEmitOpAndBranch(operands, "+", :int, "== 0")
+            cloopEmitOpAndBranch(operands, "+", :intptr, "== 0")
         when "baddpnz"
-            cloopEmitOpAndBranch(operands, "+", :int, "!= 0")
+            cloopEmitOpAndBranch(operands, "+", :intptr, "!= 0")
 
         when "bsubis"
             cloopEmitOpAndBranch(operands, "-", :int32, "< 0")
         when "bsubiz"
             cloopEmitOpAndBranch(operands, "-", :int32, "== 0")
@@ -1151,10 +1156,14 @@
         else
             lowerDefault
         end
     end
 
+    def lowerC_LOOP_WIN
+        lowerC_LOOP
+    end
+
     def recordMetaDataC_LOOP
         $asm.codeOrigin codeOriginString if $enableCodeOriginComments
         $asm.annotation annotation if $enableInstrAnnotations && (opcode != "cloopDo")
         $asm.debugAnnotation codeOrigin.debugDirective if $enableDebugAnnotations
     end
