diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/MetaAllocator.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/MetaAllocator.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/MetaAllocator.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/MetaAllocator.h
@@ -80,10 +80,11 @@
     size_t bytesReserved() { return m_bytesReserved; }
     size_t bytesCommitted() { return m_bytesCommitted; }
 
     // Atomic method for getting allocator statistics.
     struct Statistics {
+        WTF_MAKE_STRUCT_FAST_ALLOCATED;
         size_t bytesAllocated;
         size_t bytesReserved;
         size_t bytesCommitted;
     };
     WTF_EXPORT_PRIVATE Statistics currentStatistics();
@@ -111,14 +112,14 @@
     // Allocate new virtual space, but don't commit. This may return more
     // pages than we asked, in which case numPages is changed.
     virtual FreeSpacePtr allocateNewSpace(size_t& numPages) = 0;
 
     // Commit a page.
-    virtual void notifyNeedPage(void* page) = 0;
+    virtual void notifyNeedPage(void* page, size_t) = 0;
 
     // Uncommit a page.
-    virtual void notifyPageIsFree(void* page) = 0;
+    virtual void notifyPageIsFree(void* page, size_t) = 0;
 
     // NOTE: none of the above methods are called during allocator
     // destruction, in part because a MetaAllocator cannot die so long
     // as there are Handles that refer to it.
 
@@ -177,12 +178,12 @@
 
     FreeSpaceNode* allocFreeSpaceNode();
     WTF_EXPORT_PRIVATE void freeFreeSpaceNode(FreeSpaceNode*);
 
     size_t m_allocationGranule;
-    unsigned m_logAllocationGranule;
     size_t m_pageSize;
+    unsigned m_logAllocationGranule;
     unsigned m_logPageSize;
 
     Tree m_freeSpaceSizeMap;
     HashMap<FreeSpacePtr, FreeSpaceNode*> m_freeSpaceStartAddressMap;
     HashMap<FreeSpacePtr, FreeSpaceNode*> m_freeSpaceEndAddressMap;
