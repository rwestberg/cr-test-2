diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/LiteralParser.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/LiteralParser.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/LiteralParser.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/LiteralParser.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2009-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2009-2019 Apple Inc. All rights reserved.
  * Copyright (C) 2012 Mathias Bynens (mathias@qiwi.be)
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
@@ -57,21 +57,21 @@
     if (m_lexer.next() != TokIdentifier)
         return false;
     do {
         Vector<JSONPPathEntry> path;
         // Unguarded next to start off the lexer
-        Identifier name = Identifier::fromString(&vm, m_lexer.currentToken()->start, m_lexer.currentToken()->end - m_lexer.currentToken()->start);
+        Identifier name = Identifier::fromString(vm, m_lexer.currentToken()->start, m_lexer.currentToken()->end - m_lexer.currentToken()->start);
         JSONPPathEntry entry;
         if (name == vm.propertyNames->varKeyword) {
             if (m_lexer.next() != TokIdentifier)
                 return false;
             entry.m_type = JSONPPathEntryTypeDeclareVar;
-            entry.m_pathEntryName = Identifier::fromString(&vm, m_lexer.currentToken()->start, m_lexer.currentToken()->end - m_lexer.currentToken()->start);
+            entry.m_pathEntryName = Identifier::fromString(vm, m_lexer.currentToken()->start, m_lexer.currentToken()->end - m_lexer.currentToken()->start);
             path.append(entry);
         } else {
             entry.m_type = JSONPPathEntryTypeDot;
-            entry.m_pathEntryName = Identifier::fromString(&vm, m_lexer.currentToken()->start, m_lexer.currentToken()->end - m_lexer.currentToken()->start);
+            entry.m_pathEntryName = Identifier::fromString(vm, m_lexer.currentToken()->start, m_lexer.currentToken()->end - m_lexer.currentToken()->start);
             path.append(entry);
         }
         if (isLexerKeyword(entry.m_pathEntryName))
             return false;
         TokenType tokenType = m_lexer.next();
@@ -94,11 +94,11 @@
             }
             case TokDot: {
                 entry.m_type = JSONPPathEntryTypeDot;
                 if (m_lexer.next() != TokIdentifier)
                     return false;
-                entry.m_pathEntryName = Identifier::fromString(&vm, m_lexer.currentToken()->start, m_lexer.currentToken()->end - m_lexer.currentToken()->start);
+                entry.m_pathEntryName = Identifier::fromString(vm, m_lexer.currentToken()->start, m_lexer.currentToken()->end - m_lexer.currentToken()->start);
                 break;
             }
             case TokLParen: {
                 if (path.last().m_type != JSONPPathEntryTypeDot || needsFullSourceInfo)
                     return false;
@@ -134,44 +134,46 @@
 }
 
 template <typename CharType>
 ALWAYS_INLINE const Identifier LiteralParser<CharType>::makeIdentifier(const LChar* characters, size_t length)
 {
+    VM& vm = m_exec->vm();
     if (!length)
-        return m_exec->vm().propertyNames->emptyIdentifier;
+        return vm.propertyNames->emptyIdentifier;
     if (characters[0] >= MaximumCachableCharacter)
-        return Identifier::fromString(&m_exec->vm(), characters, length);
+        return Identifier::fromString(vm, characters, length);
 
     if (length == 1) {
         if (!m_shortIdentifiers[characters[0]].isNull())
             return m_shortIdentifiers[characters[0]];
-        m_shortIdentifiers[characters[0]] = Identifier::fromString(&m_exec->vm(), characters, length);
+        m_shortIdentifiers[characters[0]] = Identifier::fromString(vm, characters, length);
         return m_shortIdentifiers[characters[0]];
     }
     if (!m_recentIdentifiers[characters[0]].isNull() && Identifier::equal(m_recentIdentifiers[characters[0]].impl(), characters, length))
         return m_recentIdentifiers[characters[0]];
-    m_recentIdentifiers[characters[0]] = Identifier::fromString(&m_exec->vm(), characters, length);
+    m_recentIdentifiers[characters[0]] = Identifier::fromString(vm, characters, length);
     return m_recentIdentifiers[characters[0]];
 }
 
 template <typename CharType>
 ALWAYS_INLINE const Identifier LiteralParser<CharType>::makeIdentifier(const UChar* characters, size_t length)
 {
+    VM& vm = m_exec->vm();
     if (!length)
-        return m_exec->vm().propertyNames->emptyIdentifier;
+        return vm.propertyNames->emptyIdentifier;
     if (characters[0] >= MaximumCachableCharacter)
-        return Identifier::fromString(&m_exec->vm(), characters, length);
+        return Identifier::fromString(vm, characters, length);
 
     if (length == 1) {
         if (!m_shortIdentifiers[characters[0]].isNull())
             return m_shortIdentifiers[characters[0]];
-        m_shortIdentifiers[characters[0]] = Identifier::fromString(&m_exec->vm(), characters, length);
+        m_shortIdentifiers[characters[0]] = Identifier::fromString(vm, characters, length);
         return m_shortIdentifiers[characters[0]];
     }
     if (!m_recentIdentifiers[characters[0]].isNull() && Identifier::equal(m_recentIdentifiers[characters[0]].impl(), characters, length))
         return m_recentIdentifiers[characters[0]];
-    m_recentIdentifiers[characters[0]] = Identifier::fromString(&m_exec->vm(), characters, length);
+    m_recentIdentifiers[characters[0]] = Identifier::fromString(vm, characters, length);
     return m_recentIdentifiers[characters[0]];
 }
 
 // 256 Latin-1 codes
 static constexpr const TokenType TokenTypesOfLatin1Characters[256] = {
@@ -451,11 +453,11 @@
     }
     ASSERT(m_ptr < m_end);
     token.type = TokError;
     token.start = m_ptr;
     CharType character = *m_ptr;
-    if (LIKELY(character < 256)) {
+    if (LIKELY(isLatin1(character))) {
         TokenType tokenType = TokenTypesOfLatin1Characters[character];
         switch (tokenType) {
         case TokString:
             if (character == '\'' && m_mode == StrictJSON) {
                 m_lexErrorMessage = "Single quotes (\') are not allowed in JSON"_s;
@@ -577,11 +579,11 @@
 }
 
 template <SafeStringCharacterSet set>
 static ALWAYS_INLINE bool isSafeStringCharacter(UChar c, UChar terminator)
 {
-    return (c >= ' ' && (set == SafeStringCharacterSet::Strict || c <= 0xff) && c != '\\' && c != terminator) || (c == '\t' && set != SafeStringCharacterSet::Strict);
+    return (c >= ' ' && (set == SafeStringCharacterSet::Strict || isLatin1(c)) && c != '\\' && c != terminator) || (c == '\t' && set != SafeStringCharacterSet::Strict);
 }
 
 template <typename CharType>
 ALWAYS_INLINE TokenType LiteralParser<CharType>::Lexer::lexString(LiteralParserToken<CharType>& token, CharType terminator)
 {
@@ -620,16 +622,16 @@
             while (m_ptr < m_end && isSafeStringCharacter<SafeStringCharacterSet::NonStrict>(*m_ptr, terminator))
                 ++m_ptr;
         }
 
         if (!m_builder.isEmpty())
-            m_builder.append(runStart, m_ptr - runStart);
+            m_builder.appendCharacters(runStart, m_ptr - runStart);
 
 slowPathBegin:
         if ((m_mode != NonStrictJSON) && m_ptr < m_end && *m_ptr == '\\') {
             if (m_builder.isEmpty() && runStart < m_ptr)
-                m_builder.append(runStart, m_ptr - runStart);
+                m_builder.appendCharacters(runStart, m_ptr - runStart);
             ++m_ptr;
             if (m_ptr >= m_end) {
                 m_lexErrorMessage = "Unterminated string"_s;
                 return TokError;
             }
@@ -959,13 +961,13 @@
                     case TokLBrace:
                         goto startParseObject;
                     case TokString: {
                         typename Lexer::LiteralParserTokenPtr stringToken = m_lexer.currentToken();
                         if (stringToken->stringIs8Bit)
-                            lastValue = jsString(m_exec, makeIdentifier(stringToken->stringToken8, stringToken->stringLength).string());
+                            lastValue = jsString(vm, makeIdentifier(stringToken->stringToken8, stringToken->stringLength).string());
                         else
-                            lastValue = jsString(m_exec, makeIdentifier(stringToken->stringToken16, stringToken->stringLength).string());
+                            lastValue = jsString(vm, makeIdentifier(stringToken->stringToken16, stringToken->stringLength).string());
                         m_lexer.next();
                         break;
                     }
                     case TokNumber: {
                         typename Lexer::LiteralParserTokenPtr numberToken = m_lexer.currentToken();
