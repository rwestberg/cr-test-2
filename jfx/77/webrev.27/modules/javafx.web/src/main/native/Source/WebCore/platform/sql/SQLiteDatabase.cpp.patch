diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/sql/SQLiteDatabase.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/sql/SQLiteDatabase.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/sql/SQLiteDatabase.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/sql/SQLiteDatabase.cpp
@@ -28,15 +28,17 @@
 #include "SQLiteDatabase.h"
 
 #include "DatabaseAuthorizer.h"
 #include "Logging.h"
 #include "MemoryRelease.h"
+#include "SQLiteDatabaseTracker.h"
 #include "SQLiteFileSystem.h"
 #include "SQLiteStatement.h"
 #include <mutex>
 #include <sqlite3.h>
 #include <thread>
+#include <wtf/FileSystem.h>
 #include <wtf/Threading.h>
 #include <wtf/text/CString.h>
 #include <wtf/text/StringConcatenateNumbers.h>
 
 namespace WebCore {
@@ -67,31 +69,61 @@
             CRASH();
         }
     });
 }
 
+static bool isDatabaseOpeningForbidden = false;
+static Lock isDatabaseOpeningForbiddenMutex;
+
+void SQLiteDatabase::setIsDatabaseOpeningForbidden(bool isForbidden)
+{
+    std::lock_guard<Lock> lock(isDatabaseOpeningForbiddenMutex);
+    isDatabaseOpeningForbidden = isForbidden;
+}
+
 SQLiteDatabase::SQLiteDatabase() = default;
 
 SQLiteDatabase::~SQLiteDatabase()
 {
     close();
 }
 
-bool SQLiteDatabase::open(const String& filename, bool forWebSQLDatabase)
+bool SQLiteDatabase::open(const String& filename, OpenMode openMode)
 {
     initializeSQLiteIfNecessary();
 
     close();
 
-    m_openError = SQLiteFileSystem::openDatabase(filename, &m_db, forWebSQLDatabase);
-    if (m_openError != SQLITE_OK) {
-        m_openErrorMessage = m_db ? sqlite3_errmsg(m_db) : "sqlite_open returned null";
-        LOG_ERROR("SQLite database failed to load from %s\nCause - %s", filename.ascii().data(),
-            m_openErrorMessage.data());
-        sqlite3_close(m_db);
-        m_db = 0;
-        return false;
+    {
+        std::lock_guard<Lock> lock(isDatabaseOpeningForbiddenMutex);
+        if (isDatabaseOpeningForbidden) {
+            m_openErrorMessage = "opening database is forbidden";
+            return false;
+        }
+
+        int flags = SQLITE_OPEN_AUTOPROXY;
+        switch (openMode) {
+        case OpenMode::ReadOnly:
+            flags |= SQLITE_OPEN_READONLY;
+            break;
+        case OpenMode::ReadWrite:
+            flags |= SQLITE_OPEN_READWRITE;
+            break;
+        case OpenMode::ReadWriteCreate:
+            flags |= SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE;
+            break;
+        }
+
+        m_openError = sqlite3_open_v2(FileSystem::fileSystemRepresentation(filename).data(), &m_db, flags, nullptr);
+        if (m_openError != SQLITE_OK) {
+            m_openErrorMessage = m_db ? sqlite3_errmsg(m_db) : "sqlite_open returned null";
+            LOG_ERROR("SQLite database failed to load from %s\nCause - %s", filename.ascii().data(),
+                m_openErrorMessage.data());
+            sqlite3_close(m_db);
+            m_db = 0;
+            return false;
+        }
     }
 
     overrideUnauthorizedFunctions();
 
     m_openError = sqlite3_extended_result_codes(m_db, 1);
@@ -106,13 +138,33 @@
     if (isOpen())
         m_openingThread = &Thread::current();
     else
         m_openErrorMessage = "sqlite_open returned null";
 
-    if (!SQLiteStatement(*this, "PRAGMA temp_store = MEMORY;"_s).executeCommand())
-        LOG_ERROR("SQLite database could not set temp_store to memory");
+    {
+        SQLiteTransactionInProgressAutoCounter transactionCounter;
+        if (!SQLiteStatement(*this, "PRAGMA temp_store = MEMORY;"_s).executeCommand())
+            LOG_ERROR("SQLite database could not set temp_store to memory");
+    }
+
+    if (openMode != OpenMode::ReadOnly)
+        useWALJournalMode();
+
+    String shmFileName = makeString(filename, "-shm"_s);
+    if (FileSystem::fileExists(shmFileName)) {
+        if (!FileSystem::isSafeToUseMemoryMapForPath(shmFileName)) {
+            RELEASE_LOG_FAULT(SQLDatabase, "Opened an SQLite database with a Class A -shm file. This may trigger a crash when the user locks the device. (%s)", shmFileName.latin1().data());
+            FileSystem::makeSafeToUseMemoryMapForPath(shmFileName);
+        }
+    }
+
+    return isOpen();
+}
 
+void SQLiteDatabase::useWALJournalMode()
+{
+    m_useWAL = true;
     {
         SQLiteStatement walStatement(*this, "PRAGMA journal_mode=WAL;"_s);
         if (walStatement.prepareAndStep() == SQLITE_ROW) {
 #ifndef NDEBUG
             String mode = walStatement.getColumnText(0);
@@ -122,19 +174,18 @@
         } else
             LOG_ERROR("SQLite database failed to set journal_mode to WAL, error: %s", lastErrorMsg());
     }
 
     {
+        SQLiteTransactionInProgressAutoCounter transactionCounter;
         SQLiteStatement checkpointStatement(*this, "PRAGMA wal_checkpoint(TRUNCATE)"_s);
         if (checkpointStatement.prepareAndStep() == SQLITE_ROW) {
             if (checkpointStatement.getColumnInt(0))
                 LOG(SQLDatabase, "SQLite database checkpoint is blocked");
         } else
             LOG_ERROR("SQLite database failed to checkpoint: %s", lastErrorMsg());
     }
-
-    return isOpen();
 }
 
 void SQLiteDatabase::close()
 {
     if (m_db) {
@@ -143,11 +194,15 @@
         sqlite3* db = m_db;
         {
             LockHolder locker(m_databaseClosingMutex);
             m_db = 0;
         }
-        sqlite3_close(db);
+        if (m_useWAL) {
+            SQLiteTransactionInProgressAutoCounter transactionCounter;
+            sqlite3_close(db);
+        } else
+            sqlite3_close(db);
     }
 
     m_openingThread = nullptr;
     m_openError = SQLITE_ERROR;
     m_openErrorMessage = CString();
