diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLWhileLoop.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLWhileLoop.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLWhileLoop.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLWhileLoop.h
@@ -26,36 +26,35 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "WHLSLExpression.h"
-#include "WHLSLLexer.h"
 #include "WHLSLStatement.h"
+#include <wtf/FastMalloc.h>
 #include <wtf/UniqueRef.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class WhileLoop : public Statement {
+class WhileLoop final : public Statement {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    WhileLoop(Lexer::Token&& origin, UniqueRef<Expression>&& conditional, UniqueRef<Statement>&& body)
-        : Statement(WTFMove(origin))
+    WhileLoop(CodeLocation location, UniqueRef<Expression>&& conditional, UniqueRef<Statement>&& body)
+        : Statement(location, Kind::WhileLoop)
         , m_conditional(WTFMove(conditional))
         , m_body(WTFMove(body))
     {
     }
 
-    virtual ~WhileLoop() = default;
+    ~WhileLoop() = default;
 
     WhileLoop(const WhileLoop&) = delete;
     WhileLoop(WhileLoop&&) = default;
 
-    bool isWhileLoop() const override { return true; }
-
     Expression& conditional() { return m_conditional; }
     Statement& body() { return m_body; }
 
 private:
     UniqueRef<Expression> m_conditional;
@@ -66,8 +65,10 @@
 
 }
 
 }
 
+DEFINE_DEFAULT_DELETE(WhileLoop)
+
 SPECIALIZE_TYPE_TRAITS_WHLSL_STATEMENT(WhileLoop, isWhileLoop())
 
 #endif
