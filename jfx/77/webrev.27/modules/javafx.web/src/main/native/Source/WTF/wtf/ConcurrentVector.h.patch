diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/ConcurrentVector.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/ConcurrentVector.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/ConcurrentVector.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/ConcurrentVector.h
@@ -34,10 +34,11 @@
 namespace WTF {
 
 // An iterator for ConcurrentVector. It supports only the pre ++ operator
 template <typename T, size_t SegmentSize = 8> class ConcurrentVector;
 template <typename T, size_t SegmentSize = 8> class ConcurrentVectorIterator {
+    WTF_MAKE_FAST_ALLOCATED;
 private:
     friend class ConcurrentVector<T, SegmentSize>;
 public:
     typedef ConcurrentVectorIterator<T, SegmentSize> Iterator;
 
@@ -92,11 +93,11 @@
 // initialized data. Thereafter, the keeper of that index is allowed to use it on this vector without
 // any locking other than what is needed to protect the integrity of the element at that index. This
 // works because we guarantee shrinking the vector is impossible and that growing the vector doesn't
 // delete old vector spines.
 template <typename T, size_t SegmentSize>
-class ConcurrentVector {
+class ConcurrentVector final {
     friend class ConcurrentVectorIterator<T, SegmentSize>;
     WTF_MAKE_NONCOPYABLE(ConcurrentVector);
     WTF_MAKE_FAST_ALLOCATED;
 
 public:
@@ -251,11 +252,11 @@
     }
 
     void allocateSegment()
     {
         m_segments.grow(m_numSegments + 1);
-        m_segments[m_numSegments++] = std::make_unique<Segment>();
+        m_segments[m_numSegments++] = makeUnique<Segment>();
     }
 
     size_t m_size { 0 };
     ConcurrentBuffer<std::unique_ptr<Segment>> m_segments;
     size_t m_numSegments { 0 };
