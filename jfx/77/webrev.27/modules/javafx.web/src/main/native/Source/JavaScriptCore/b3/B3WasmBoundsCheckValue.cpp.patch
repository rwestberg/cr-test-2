diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3WasmBoundsCheckValue.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3WasmBoundsCheckValue.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3WasmBoundsCheckValue.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3WasmBoundsCheckValue.cpp
@@ -27,41 +27,38 @@
 #include "B3WasmBoundsCheckValue.h"
 #include "WasmMemory.h"
 
 #if ENABLE(B3_JIT)
 
+#include "B3ValueInlines.h"
+
 namespace JSC { namespace B3 {
 
 WasmBoundsCheckValue::~WasmBoundsCheckValue()
 {
 }
 
 WasmBoundsCheckValue::WasmBoundsCheckValue(Origin origin, GPRReg pinnedSize, Value* ptr, unsigned offset)
-    : Value(CheckedOpcode, WasmBoundsCheck, origin, ptr)
+    : Value(CheckedOpcode, WasmBoundsCheck, One, origin, ptr)
     , m_offset(offset)
     , m_boundsType(Type::Pinned)
 {
     m_bounds.pinnedSize = pinnedSize;
 }
 
 WasmBoundsCheckValue::WasmBoundsCheckValue(Origin origin, Value* ptr, unsigned offset, size_t maximum)
-    : Value(CheckedOpcode, WasmBoundsCheck, origin, ptr)
+    : Value(CheckedOpcode, WasmBoundsCheck, One, origin, ptr)
     , m_offset(offset)
     , m_boundsType(Type::Maximum)
 {
 #if ENABLE(WEBASSEMBLY)
     size_t redzoneLimit = static_cast<uint64_t>(std::numeric_limits<uint32_t>::max()) + Wasm::Memory::fastMappedRedzoneBytes();
     ASSERT_UNUSED(redzoneLimit, maximum <= redzoneLimit);
 #endif
     m_bounds.maximum = maximum;
 }
 
-Value* WasmBoundsCheckValue::cloneImpl() const
-{
-    return new WasmBoundsCheckValue(*this);
-}
-
 void WasmBoundsCheckValue::dumpMeta(CommaPrinter& comma, PrintStream& out) const
 {
     switch (m_boundsType) {
     case Type::Pinned:
         out.print(comma, "offset = ", m_offset, comma, "pinnedSize = ", m_bounds.pinnedSize);
