diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JIT.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JIT.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JIT.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JIT.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2008-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2008-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -190,60 +190,62 @@
         // Magic number - initial offset cannot be representable as a signed 8bit value, or the X86Assembler
         // will compress the displacement, and we may not be able to fit a patched offset.
         static const int patchPutByIdDefaultOffset = 256;
 
     public:
-        JIT(VM*, CodeBlock* = 0, unsigned loopOSREntryBytecodeOffset = 0);
+        JIT(VM&, CodeBlock* = 0, unsigned loopOSREntryBytecodeOffset = 0);
         ~JIT();
 
+        VM& vm() { return *JSInterfaceJIT::vm(); }
+
         void compileWithoutLinking(JITCompilationEffort);
         CompilationResult link();
 
         void doMainThreadPreparationBeforeCompile();
 
-        static CompilationResult compile(VM* vm, CodeBlock* codeBlock, JITCompilationEffort effort, unsigned bytecodeOffset = 0)
+        static CompilationResult compile(VM& vm, CodeBlock* codeBlock, JITCompilationEffort effort, unsigned bytecodeOffset = 0)
         {
             return JIT(vm, codeBlock, bytecodeOffset).privateCompile(effort);
         }
 
-        static void compileGetByVal(const ConcurrentJSLocker& locker, VM* vm, CodeBlock* codeBlock, ByValInfo* byValInfo, ReturnAddressPtr returnAddress, JITArrayMode arrayMode)
+        static void compileGetByVal(const ConcurrentJSLocker& locker, VM& vm, CodeBlock* codeBlock, ByValInfo* byValInfo, ReturnAddressPtr returnAddress, JITArrayMode arrayMode)
         {
             JIT jit(vm, codeBlock);
             jit.m_bytecodeOffset = byValInfo->bytecodeIndex;
             jit.privateCompileGetByVal(locker, byValInfo, returnAddress, arrayMode);
         }
 
-        static void compileGetByValWithCachedId(VM* vm, CodeBlock* codeBlock, ByValInfo* byValInfo, ReturnAddressPtr returnAddress, const Identifier& propertyName)
+        static void compileGetByValWithCachedId(VM& vm, CodeBlock* codeBlock, ByValInfo* byValInfo, ReturnAddressPtr returnAddress, const Identifier& propertyName)
         {
             JIT jit(vm, codeBlock);
             jit.m_bytecodeOffset = byValInfo->bytecodeIndex;
             jit.privateCompileGetByValWithCachedId(byValInfo, returnAddress, propertyName);
         }
 
-        static void compilePutByVal(const ConcurrentJSLocker& locker, VM* vm, CodeBlock* codeBlock, ByValInfo* byValInfo, ReturnAddressPtr returnAddress, JITArrayMode arrayMode)
+        static void compilePutByVal(const ConcurrentJSLocker& locker, VM& vm, CodeBlock* codeBlock, ByValInfo* byValInfo, ReturnAddressPtr returnAddress, JITArrayMode arrayMode)
         {
             JIT jit(vm, codeBlock);
             jit.m_bytecodeOffset = byValInfo->bytecodeIndex;
             jit.privateCompilePutByVal<OpPutByVal>(locker, byValInfo, returnAddress, arrayMode);
         }
 
-        static void compileDirectPutByVal(const ConcurrentJSLocker& locker, VM* vm, CodeBlock* codeBlock, ByValInfo* byValInfo, ReturnAddressPtr returnAddress, JITArrayMode arrayMode)
+        static void compileDirectPutByVal(const ConcurrentJSLocker& locker, VM& vm, CodeBlock* codeBlock, ByValInfo* byValInfo, ReturnAddressPtr returnAddress, JITArrayMode arrayMode)
         {
             JIT jit(vm, codeBlock);
             jit.m_bytecodeOffset = byValInfo->bytecodeIndex;
             jit.privateCompilePutByVal<OpPutByValDirect>(locker, byValInfo, returnAddress, arrayMode);
         }
 
         template<typename Op>
-        static void compilePutByValWithCachedId(VM* vm, CodeBlock* codeBlock, ByValInfo* byValInfo, ReturnAddressPtr returnAddress, PutKind putKind, const Identifier& propertyName)
+        static void compilePutByValWithCachedId(VM& vm, CodeBlock* codeBlock, ByValInfo* byValInfo, ReturnAddressPtr returnAddress, PutKind putKind, const Identifier& propertyName)
         {
             JIT jit(vm, codeBlock);
             jit.m_bytecodeOffset = byValInfo->bytecodeIndex;
             jit.privateCompilePutByValWithCachedId<Op>(byValInfo, returnAddress, putKind, propertyName);
         }
 
-        static void compileHasIndexedProperty(VM* vm, CodeBlock* codeBlock, ByValInfo* byValInfo, ReturnAddressPtr returnAddress, JITArrayMode arrayMode)
+        static void compileHasIndexedProperty(VM& vm, CodeBlock* codeBlock, ByValInfo* byValInfo, ReturnAddressPtr returnAddress, JITArrayMode arrayMode)
         {
             JIT jit(vm, codeBlock);
             jit.m_bytecodeOffset = byValInfo->bytecodeIndex;
             jit.privateCompileHasIndexedProperty(byValInfo, returnAddress, arrayMode);
         }
@@ -293,16 +295,16 @@
             m_exceptionChecks.append(jumpToHandler);
         }
 
         void exceptionCheck()
         {
-            m_exceptionChecks.append(emitExceptionCheck(*vm()));
+            m_exceptionChecks.append(emitExceptionCheck(vm()));
         }
 
         void exceptionCheckWithCallFrameRollback()
         {
-            m_exceptionChecksWithCallFrameRollback.append(emitExceptionCheck(*vm()));
+            m_exceptionChecksWithCallFrameRollback.append(emitExceptionCheck(vm()));
         }
 
         void privateCompileExceptionHandlers();
 
         void addSlowCase(Jump);
@@ -552,10 +554,12 @@
         void emit_op_is_cell_with_type(const Instruction*);
         void emit_op_jeq_null(const Instruction*);
         void emit_op_jfalse(const Instruction*);
         void emit_op_jmp(const Instruction*);
         void emit_op_jneq_null(const Instruction*);
+        void emit_op_jundefined_or_null(const Instruction*);
+        void emit_op_jnundefined_or_null(const Instruction*);
         void emit_op_jneq_ptr(const Instruction*);
         void emit_op_jless(const Instruction*);
         void emit_op_jlesseq(const Instruction*);
         void emit_op_jgreater(const Instruction*);
         void emit_op_jgreatereq(const Instruction*);
@@ -569,11 +573,10 @@
         void emit_op_jnstricteq(const Instruction*);
         void emit_op_jbelow(const Instruction*);
         void emit_op_jbeloweq(const Instruction*);
         void emit_op_jtrue(const Instruction*);
         void emit_op_loop_hint(const Instruction*);
-        void emit_op_check_traps(const Instruction*);
         void emit_op_nop(const Instruction*);
         void emit_op_super_sampler_begin(const Instruction*);
         void emit_op_super_sampler_end(const Instruction*);
         void emit_op_lshift(const Instruction*);
         void emit_op_mod(const Instruction*);
@@ -667,11 +670,11 @@
         void emitSlow_op_jneq(const Instruction*, Vector<SlowCaseEntry>::iterator&);
         void emitSlow_op_jstricteq(const Instruction*, Vector<SlowCaseEntry>::iterator&);
         void emitSlow_op_jnstricteq(const Instruction*, Vector<SlowCaseEntry>::iterator&);
         void emitSlow_op_jtrue(const Instruction*, Vector<SlowCaseEntry>::iterator&);
         void emitSlow_op_loop_hint(const Instruction*, Vector<SlowCaseEntry>::iterator&);
-        void emitSlow_op_check_traps(const Instruction*, Vector<SlowCaseEntry>::iterator&);
+        void emitSlow_op_enter(const Instruction*, Vector<SlowCaseEntry>::iterator&);
         void emitSlow_op_mod(const Instruction*, Vector<SlowCaseEntry>::iterator&);
         void emitSlow_op_mul(const Instruction*, Vector<SlowCaseEntry>::iterator&);
         void emitSlow_op_negate(const Instruction*, Vector<SlowCaseEntry>::iterator&);
         void emitSlow_op_neq(const Instruction*, Vector<SlowCaseEntry>::iterator&);
         void emitSlow_op_new_object(const Instruction*, Vector<SlowCaseEntry>::iterator&);
@@ -862,16 +865,10 @@
         // Loads the character value of a single character string into dst.
         void emitLoadCharacterString(RegisterID src, RegisterID dst, JumpList& failures);
 
         int jumpTarget(const Instruction*, int target);
 
-#if ENABLE(DFG_JIT)
-        void emitEnterOptimizationCheck();
-#else
-        void emitEnterOptimizationCheck() { }
-#endif
-
 #ifndef NDEBUG
         void printBytecodeOperandTypes(int src1, int src2);
 #endif
 
 #if ENABLE(SAMPLING_FLAGS)
