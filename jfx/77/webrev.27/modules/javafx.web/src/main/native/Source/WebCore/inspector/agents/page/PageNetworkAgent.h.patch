diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageNetworkAgent.h b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageNetworkAgent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageNetworkAgent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageNetworkAgent.h
@@ -27,24 +27,26 @@
 
 #include "InspectorNetworkAgent.h"
 
 namespace WebCore {
 
+class Page;
+
 class PageNetworkAgent final : public InspectorNetworkAgent {
     WTF_MAKE_NONCOPYABLE(PageNetworkAgent);
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    PageNetworkAgent(PageAgentContext&, InspectorPageAgent*);
-    virtual ~PageNetworkAgent() = default;
+    PageNetworkAgent(PageAgentContext&);
+    virtual ~PageNetworkAgent();
 
 private:
-    String loaderIdentifier(DocumentLoader*) final;
-    String frameIdentifier(DocumentLoader*) final;
-    Vector<WebSocket*> activeWebSockets(const LockHolder&) final;
-    void setResourceCachingDisabled(bool) final;
-    ScriptExecutionContext* scriptExecutionContext(ErrorString&, const String& frameId) final;
-    bool shouldForceBufferingNetworkResourceData() const final { return false; }
-
-    InspectorPageAgent* m_pageAgent { nullptr };
+    String loaderIdentifier(DocumentLoader*);
+    String frameIdentifier(DocumentLoader*);
+    Vector<WebSocket*> activeWebSockets(const LockHolder&);
+    void setResourceCachingDisabled(bool);
+    ScriptExecutionContext* scriptExecutionContext(ErrorString&, const String& frameId);
+    bool shouldForceBufferingNetworkResourceData() const { return false; }
+
+    Page& m_inspectedPage;
 };
 
 } // namespace WebCore
