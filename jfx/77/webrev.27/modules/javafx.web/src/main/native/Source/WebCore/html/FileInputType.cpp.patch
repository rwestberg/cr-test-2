diff a/modules/javafx.web/src/main/native/Source/WebCore/html/FileInputType.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/FileInputType.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/FileInputType.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/FileInputType.cpp
@@ -87,12 +87,12 @@
 }
 
 UploadButtonElement::UploadButtonElement(Document& document)
     : HTMLInputElement(inputTag, document, 0, false)
 {
-    setType(AtomicString("button", AtomicString::ConstructFromLiteral));
-    setPseudo(AtomicString("-webkit-file-upload-button", AtomicString::ConstructFromLiteral));
+    setType(AtomString("button", AtomString::ConstructFromLiteral));
+    setPseudo(AtomString("-webkit-file-upload-button", AtomString::ConstructFromLiteral));
 }
 
 FileInputType::FileInputType(HTMLInputElement& element)
     : BaseClickableWithKeyInputType(element)
     , m_fileList(FileList::create())
@@ -123,11 +123,11 @@
             files.uncheckedAppend({ state[i] });
     }
     return files;
 }
 
-const AtomicString& FileInputType::formControlType() const
+const AtomString& FileInputType::formControlType() const
 {
     return InputTypeNames::file();
 }
 
 FormControlState FileInputType::saveFormControlState() const
@@ -173,11 +173,11 @@
     }
 
     // If no filename at all is entered, return successful but empty.
     // Null would be more logical, but Netscape posts an empty file. Argh.
     if (fileList->isEmpty()) {
-        formData.append(name, File::create(emptyString()));
+        formData.append(name, File::create(element()->document().sessionID(), emptyString()));
         return true;
     }
 
 
     for (auto& file : fileList->files())
@@ -330,11 +330,11 @@
 
     if (m_fileIconLoader)
         m_fileIconLoader->invalidate();
 
     FileIconLoaderClient& client = *this;
-    m_fileIconLoader = std::make_unique<FileIconLoader>(client);
+    m_fileIconLoader = makeUnique<FileIconLoader>(client);
 
     chrome->loadIconForFiles(paths, *m_fileIconLoader);
 }
 
 void FileInputType::applyFileChooserSettings(const FileChooserSettings& settings)
@@ -412,16 +412,16 @@
     if (m_fileListCreator)
         m_fileListCreator->cancel();
 
     auto shouldResolveDirectories = allowsDirectories() ? FileListCreator::ShouldResolveDirectories::Yes : FileListCreator::ShouldResolveDirectories::No;
     auto shouldRequestIcon = icon ? RequestIcon::Yes : RequestIcon::No;
-    m_fileListCreator = FileListCreator::create(paths, shouldResolveDirectories, [this, shouldRequestIcon](Ref<FileList>&& fileList) {
+    m_fileListCreator = FileListCreator::create(element()->document().sessionID(), paths, shouldResolveDirectories, [this, shouldRequestIcon](Ref<FileList>&& fileList) {
         setFiles(WTFMove(fileList), shouldRequestIcon);
         m_fileListCreator = nullptr;
     });
 
-    if (icon)
+    if (icon && !m_fileList->isEmpty())
         iconLoaded(icon);
 }
 
 String FileInputType::displayString() const
 {
