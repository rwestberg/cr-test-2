diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/assembler/testmasm.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/assembler/testmasm.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/assembler/testmasm.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/assembler/testmasm.cpp
@@ -37,11 +37,13 @@
 #include <wtf/Compiler.h>
 #include <wtf/DataLog.h>
 #include <wtf/Function.h>
 #include <wtf/Lock.h>
 #include <wtf/NumberOfCores.h>
+#include <wtf/PtrTag.h>
 #include <wtf/Threading.h>
+#include <wtf/text/StringCommon.h>
 
 // We don't have a NO_RETURN_DUE_TO_EXIT, nor should we. That's ridiculous.
 static bool hiddenTruthBecauseNoReturnIsStupid() { return true; }
 
 static void usage()
@@ -106,10 +108,19 @@
         dataLog("FAILED while testing " #_actual ": expected: ", _expected, ", actual: ", _actual, "\n"); \
         WTFReportAssertionFailure(__FILE__, __LINE__, WTF_PRETTY_FUNCTION, "CHECK_EQ("#_actual ", " #_expected ")"); \
         CRASH();                                                        \
     } while (false)
 
+#define CHECK_NOT_EQ(_actual, _expected) do {                               \
+        if ((_actual) != (_expected))                                   \
+            break;                                                      \
+        crashLock.lock();                                               \
+        dataLog("FAILED while testing " #_actual ": expected not: ", _expected, ", actual: ", _actual, "\n"); \
+        WTFReportAssertionFailure(__FILE__, __LINE__, WTF_PRETTY_FUNCTION, "CHECK_NOT_EQ("#_actual ", " #_expected ")"); \
+        CRASH();                                                        \
+    } while (false)
+
 #if ENABLE(MASM_PROBE)
 bool isPC(MacroAssembler::RegisterID id)
 {
 #if CPU(ARM_THUMB2)
     return id == ARMRegisters::pc;
@@ -280,10 +291,165 @@
         std::numeric_limits<int32_t>::max(),
         std::numeric_limits<int32_t>::min(),
     };
 }
 
+#if CPU(X86_64)
+static Vector<int64_t> int64Operands()
+{
+    return Vector<int64_t> {
+        0,
+        1,
+        -1,
+        2,
+        -2,
+        42,
+        -42,
+        64,
+        std::numeric_limits<int32_t>::max(),
+        std::numeric_limits<int32_t>::min(),
+        std::numeric_limits<int64_t>::max(),
+        std::numeric_limits<int64_t>::min(),
+    };
+}
+#endif
+
+#if CPU(X86_64)
+void testBranchTestBit32RegReg()
+{
+    for (uint32_t value : int32Operands()) {
+        auto test = compile([=] (CCallHelpers& jit) {
+            jit.emitFunctionPrologue();
+
+            auto branch = jit.branchTestBit32(MacroAssembler::NonZero, GPRInfo::argumentGPR0, GPRInfo::argumentGPR1);
+            jit.move(CCallHelpers::TrustedImm32(0), GPRInfo::returnValueGPR);
+            auto done = jit.jump();
+            branch.link(&jit);
+            jit.move(CCallHelpers::TrustedImm32(1), GPRInfo::returnValueGPR);
+            done.link(&jit);
+
+            jit.emitFunctionEpilogue();
+            jit.ret();
+        });
+
+        for (uint32_t value2 : int32Operands())
+            CHECK_EQ(invoke<int>(test, value, value2), (value>>(value2%32))&1);
+    }
+}
+
+void testBranchTestBit32RegImm()
+{
+    for (uint32_t value : int32Operands()) {
+        auto test = compile([=] (CCallHelpers& jit) {
+            jit.emitFunctionPrologue();
+
+            auto branch = jit.branchTestBit32(MacroAssembler::NonZero, GPRInfo::argumentGPR0, CCallHelpers::TrustedImm32(value));
+            jit.move(CCallHelpers::TrustedImm32(0), GPRInfo::returnValueGPR);
+            auto done = jit.jump();
+            branch.link(&jit);
+            jit.move(CCallHelpers::TrustedImm32(1), GPRInfo::returnValueGPR);
+            done.link(&jit);
+
+            jit.emitFunctionEpilogue();
+            jit.ret();
+        });
+
+        for (uint32_t value2 : int32Operands())
+            CHECK_EQ(invoke<int>(test, value2), (value2>>(value%32))&1);
+    }
+}
+
+void testBranchTestBit32AddrImm()
+{
+    for (uint32_t value : int32Operands()) {
+        auto test = compile([=] (CCallHelpers& jit) {
+            jit.emitFunctionPrologue();
+
+            auto branch = jit.branchTestBit32(MacroAssembler::NonZero, MacroAssembler::Address(GPRInfo::argumentGPR0, 0), CCallHelpers::TrustedImm32(value));
+            jit.move(CCallHelpers::TrustedImm32(0), GPRInfo::returnValueGPR);
+            auto done = jit.jump();
+            branch.link(&jit);
+            jit.move(CCallHelpers::TrustedImm32(1), GPRInfo::returnValueGPR);
+            done.link(&jit);
+
+            jit.emitFunctionEpilogue();
+            jit.ret();
+        });
+
+        for (uint32_t value2 : int32Operands())
+            CHECK_EQ(invoke<int>(test, &value2), (value2>>(value%32))&1);
+    }
+}
+
+void testBranchTestBit64RegReg()
+{
+    for (uint64_t value : int64Operands()) {
+        auto test = compile([=] (CCallHelpers& jit) {
+            jit.emitFunctionPrologue();
+
+            auto branch = jit.branchTestBit64(MacroAssembler::NonZero, GPRInfo::argumentGPR0, GPRInfo::argumentGPR1);
+            jit.move(CCallHelpers::TrustedImm64(0), GPRInfo::returnValueGPR);
+            auto done = jit.jump();
+            branch.link(&jit);
+            jit.move(CCallHelpers::TrustedImm64(1), GPRInfo::returnValueGPR);
+            done.link(&jit);
+
+            jit.emitFunctionEpilogue();
+            jit.ret();
+        });
+
+        for (uint64_t value2 : int64Operands())
+            CHECK_EQ(invoke<long int>(test, value, value2), (value>>(value2%64))&1);
+    }
+}
+
+void testBranchTestBit64RegImm()
+{
+    for (uint64_t value : int64Operands()) {
+        auto test = compile([=] (CCallHelpers& jit) {
+            jit.emitFunctionPrologue();
+
+            auto branch = jit.branchTestBit64(MacroAssembler::NonZero, GPRInfo::argumentGPR0, CCallHelpers::TrustedImm32(value));
+            jit.move(CCallHelpers::TrustedImm64(0), GPRInfo::returnValueGPR);
+            auto done = jit.jump();
+            branch.link(&jit);
+            jit.move(CCallHelpers::TrustedImm64(1), GPRInfo::returnValueGPR);
+            done.link(&jit);
+
+            jit.emitFunctionEpilogue();
+            jit.ret();
+        });
+
+        for (uint64_t value2 : int64Operands())
+            CHECK_EQ(invoke<long int>(test, value2), (value2>>(value%64))&1);
+    }
+}
+
+void testBranchTestBit64AddrImm()
+{
+    for (uint64_t value : int64Operands()) {
+        auto test = compile([=] (CCallHelpers& jit) {
+            jit.emitFunctionPrologue();
+
+            auto branch = jit.branchTestBit64(MacroAssembler::NonZero, MacroAssembler::Address(GPRInfo::argumentGPR0, 0), CCallHelpers::TrustedImm32(value));
+            jit.move(CCallHelpers::TrustedImm64(0), GPRInfo::returnValueGPR);
+            auto done = jit.jump();
+            branch.link(&jit);
+            jit.move(CCallHelpers::TrustedImm64(1), GPRInfo::returnValueGPR);
+            done.link(&jit);
+
+            jit.emitFunctionEpilogue();
+            jit.ret();
+        });
+
+        for (uint64_t value2 : int64Operands())
+            CHECK_EQ(invoke<long int>(test, &value2), (value2>>(value%64))&1);
+    }
+}
+
+#endif
+
 void testCompareDouble(MacroAssembler::DoubleCondition condition)
 {
     double arg1 = 0;
     double arg2 = 0;
 
@@ -338,10 +504,29 @@
         for (auto value : int32Operands())
             CHECK_EQ(invoke<int>(mul, value), immediate * value);
     }
 }
 
+#if CPU(ARM64)
+void testMul32SignExtend()
+{
+    for (auto value : int32Operands()) {
+        auto mul = compile([=] (CCallHelpers& jit) {
+            jit.emitFunctionPrologue();
+
+            jit.multiplySignExtend32(GPRInfo::argumentGPR0, GPRInfo::argumentGPR1, GPRInfo::returnValueGPR);
+
+            jit.emitFunctionEpilogue();
+            jit.ret();
+        });
+
+        for (auto value2 : int32Operands())
+            CHECK_EQ(invoke<long int>(mul, value, value2), ((long int) value) * ((long int) value2));
+    }
+}
+#endif
+
 #if CPU(X86) || CPU(X86_64) || CPU(ARM64)
 void testCompareFloat(MacroAssembler::DoubleCondition condition)
 {
     float arg1 = 0;
     float arg2 = 0;
@@ -932,10 +1117,127 @@
     CHECK_EQ(invoke<uint64_t>(byteSwap64, 0xaabbccddee001122), static_cast<uint64_t>(0x221100eeddccbbaa));
     CHECK_EQ(invoke<uint64_t>(byteSwap64, 0xaabbccddee00ffaa), static_cast<uint64_t>(0xaaff00eeddccbbaa));
 #endif
 }
 
+void testMoveDoubleConditionally32()
+{
+#if CPU(X86_64) | CPU(ARM64)
+    double arg1 = 0;
+    double arg2 = 0;
+    const double zero = -0;
+
+    const double chosenDouble = 6.00000059604644775390625;
+    CHECK_EQ(static_cast<double>(static_cast<float>(chosenDouble)) == chosenDouble, false);
+
+    auto sel = compile([&] (CCallHelpers& jit) {
+        jit.emitFunctionPrologue();
+        jit.loadDouble(CCallHelpers::TrustedImmPtr(&zero), FPRInfo::returnValueFPR);
+        jit.loadDouble(CCallHelpers::TrustedImmPtr(&arg1), FPRInfo::fpRegT1);
+        jit.loadDouble(CCallHelpers::TrustedImmPtr(&arg2), FPRInfo::fpRegT2);
+
+        jit.move(MacroAssembler::TrustedImm32(-1), GPRInfo::regT0);
+        jit.moveDoubleConditionally32(MacroAssembler::Equal, GPRInfo::regT0, GPRInfo::regT0, FPRInfo::fpRegT1, FPRInfo::fpRegT2, FPRInfo::returnValueFPR);
+
+        jit.emitFunctionEpilogue();
+        jit.ret();
+    });
+
+    arg1 = chosenDouble;
+    arg2 = 43;
+    CHECK_EQ(invoke<double>(sel), chosenDouble);
+
+    arg1 = 43;
+    arg2 = chosenDouble;
+    CHECK_EQ(invoke<double>(sel), 43.0);
+
+#endif
+}
+
+void testMoveDoubleConditionally64()
+{
+#if CPU(X86_64) | CPU(ARM64)
+    double arg1 = 0;
+    double arg2 = 0;
+    const double zero = -0;
+
+    const double chosenDouble = 6.00000059604644775390625;
+    CHECK_EQ(static_cast<double>(static_cast<float>(chosenDouble)) == chosenDouble, false);
+
+    auto sel = compile([&] (CCallHelpers& jit) {
+        jit.emitFunctionPrologue();
+        jit.loadDouble(CCallHelpers::TrustedImmPtr(&zero), FPRInfo::returnValueFPR);
+        jit.loadDouble(CCallHelpers::TrustedImmPtr(&arg1), FPRInfo::fpRegT1);
+        jit.loadDouble(CCallHelpers::TrustedImmPtr(&arg2), FPRInfo::fpRegT2);
+
+        jit.move(MacroAssembler::TrustedImm64(-1), GPRInfo::regT0);
+        jit.moveDoubleConditionally64(MacroAssembler::Equal, GPRInfo::regT0, GPRInfo::regT0, FPRInfo::fpRegT1, FPRInfo::fpRegT2, FPRInfo::returnValueFPR);
+
+        jit.emitFunctionEpilogue();
+        jit.ret();
+    });
+
+    arg1 = chosenDouble;
+    arg2 = 43;
+    CHECK_EQ(invoke<double>(sel), chosenDouble);
+
+    arg1 = 43;
+    arg2 = chosenDouble;
+    CHECK_EQ(invoke<double>(sel), 43.0);
+
+#endif
+}
+
+static void testCagePreservesPACFailureBit()
+{
+#if GIGACAGE_ENABLED
+    ASSERT(!Gigacage::isDisablingPrimitiveGigacageDisabled());
+    auto cage = compile([] (CCallHelpers& jit) {
+        jit.emitFunctionPrologue();
+        jit.cageConditionally(Gigacage::Primitive, GPRInfo::argumentGPR0, GPRInfo::argumentGPR1, GPRInfo::argumentGPR2);
+        jit.move(GPRInfo::argumentGPR0, GPRInfo::returnValueGPR);
+        jit.emitFunctionEpilogue();
+        jit.ret();
+    });
+
+    void* ptr = Gigacage::tryMalloc(Gigacage::Primitive, 1);
+    void* taggedPtr = tagArrayPtr(ptr, 1);
+    ASSERT(hasOneBitSet(Gigacage::size(Gigacage::Primitive) << 2));
+    void* notCagedPtr = reinterpret_cast<void*>(reinterpret_cast<uintptr_t>(ptr) + (Gigacage::size(Gigacage::Primitive) << 2));
+    CHECK_NOT_EQ(Gigacage::caged(Gigacage::Primitive, notCagedPtr), notCagedPtr);
+    void* taggedNotCagedPtr = tagArrayPtr(notCagedPtr, 1);
+
+    if (isARM64E()) {
+        // FIXME: This won't work if authentication failures trap but I don't know how to test for that right now.
+        CHECK_NOT_EQ(invoke<void*>(cage, taggedPtr, 2), ptr);
+        CHECK_EQ(invoke<void*>(cage, taggedNotCagedPtr, 1), untagArrayPtr(taggedPtr, 2));
+    } else
+        CHECK_EQ(invoke<void*>(cage, taggedPtr, 2), ptr);
+
+    CHECK_EQ(invoke<void*>(cage, taggedPtr, 1), ptr);
+
+    auto cageWithoutAuthentication = compile([] (CCallHelpers& jit) {
+        jit.emitFunctionPrologue();
+        jit.cageWithoutUntagging(Gigacage::Primitive, GPRInfo::argumentGPR0);
+        jit.move(GPRInfo::argumentGPR0, GPRInfo::returnValueGPR);
+        jit.emitFunctionEpilogue();
+        jit.ret();
+    });
+
+    CHECK_EQ(invoke<void*>(cageWithoutAuthentication, taggedPtr), taggedPtr);
+    if (isARM64E()) {
+        // FIXME: This won't work if authentication failures trap but I don't know how to test for that right now.
+        CHECK_NOT_EQ(invoke<void*>(cageWithoutAuthentication, taggedNotCagedPtr), taggedNotCagedPtr);
+        CHECK_NOT_EQ(untagArrayPtr(invoke<void*>(cageWithoutAuthentication, taggedNotCagedPtr), 1), notCagedPtr);
+        CHECK_NOT_EQ(invoke<void*>(cageWithoutAuthentication, taggedNotCagedPtr), taggedPtr);
+        CHECK_NOT_EQ(untagArrayPtr(invoke<void*>(cageWithoutAuthentication, taggedNotCagedPtr), 1), ptr);
+    }
+
+    Gigacage::free(Gigacage::Primitive, ptr);
+#endif
+}
+
 #define RUN(test) do {                          \
         if (!shouldRun(#test))                  \
             break;                              \
         numberOfTests++;                        \
         tasks.append(                           \
@@ -953,15 +1255,11 @@
     unsigned numberOfTests = 0;
 
     Deque<RefPtr<SharedTask<void()>>> tasks;
 
     auto shouldRun = [&] (const char* testName) -> bool {
-#if OS(UNIX)
-        return !filter || !!strcasestr(testName, filter);
-#else
-        return !filter || !!strstr(testName, filter);
-#endif
+        return !filter || WTF::findIgnoringASCIICaseWithoutLength(testName, filter) != WTF::notFound;
     };
 
     RUN(testSimple());
     RUN(testGetEffectiveAddress(0xff00, 42, 8, CCallHelpers::TimesEight));
     RUN(testGetEffectiveAddress(0xff00, -200, -300, CCallHelpers::TimesEight));
@@ -992,10 +1290,23 @@
     RUN(testCompareDouble(MacroAssembler::DoubleGreaterThanOrEqualOrUnordered));
     RUN(testCompareDouble(MacroAssembler::DoubleLessThanOrUnordered));
     RUN(testCompareDouble(MacroAssembler::DoubleLessThanOrEqualOrUnordered));
     RUN(testMul32WithImmediates());
 
+#if CPU(X86_64)
+    RUN(testBranchTestBit32RegReg());
+    RUN(testBranchTestBit32RegImm());
+    RUN(testBranchTestBit32AddrImm());
+    RUN(testBranchTestBit64RegReg());
+    RUN(testBranchTestBit64RegImm());
+    RUN(testBranchTestBit64AddrImm());
+#endif
+
+#if CPU(ARM64)
+    RUN(testMul32SignExtend());
+#endif
+
 #if CPU(X86) || CPU(X86_64) || CPU(ARM64)
     RUN(testCompareFloat(MacroAssembler::DoubleEqual));
     RUN(testCompareFloat(MacroAssembler::DoubleNotEqual));
     RUN(testCompareFloat(MacroAssembler::DoubleGreaterThan));
     RUN(testCompareFloat(MacroAssembler::DoubleGreaterThanOrEqual));
@@ -1018,10 +1329,14 @@
     RUN(testProbeModifiesProgramCounter());
     RUN(testProbeModifiesStackValues());
 #endif // ENABLE(MASM_PROBE)
 
     RUN(testByteSwap());
+    RUN(testMoveDoubleConditionally32());
+    RUN(testMoveDoubleConditionally64());
+
+    RUN(testCagePreservesPACFailureBit());
 
     if (tasks.isEmpty())
         usage();
 
     Lock lock;
