diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/SVGInlineTextBox.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/SVGInlineTextBox.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/SVGInlineTextBox.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/SVGInlineTextBox.cpp
@@ -121,11 +121,11 @@
     if (scalingFactor != 1)
         textOrigin.scale(scalingFactor);
 
     textOrigin.move(0, -scaledFontMetrics.floatAscent());
 
-    LayoutRect selectionRect = LayoutRect(textOrigin, LayoutSize(0, fragment.height * scalingFactor));
+    LayoutRect selectionRect { textOrigin, LayoutSize(0, LayoutUnit(fragment.height * scalingFactor)) };
     TextRun run = constructTextRun(style, fragment);
     scaledFont.adjustSelectionRectForText(run, selectionRect, startPosition, endPosition);
     FloatRect snappedSelectionRect = snapRectToDevicePixelsWithWritingDirection(selectionRect, renderer().document().deviceScaleFactor(), run.ltr());
     if (scalingFactor == 1)
         return snappedSelectionRect;
@@ -200,13 +200,11 @@
     if (!textShouldBePainted(renderer()))
         return;
 
     auto& style = parentRenderer.style();
 
-    unsigned startPosition;
-    unsigned endPosition;
-    std::tie(startPosition, endPosition) = selectionStartEnd();
+    auto [startPosition, endPosition] = selectionStartEnd();
 
     unsigned fragmentStartPosition = 0;
     unsigned fragmentEndPosition = 0;
     AffineTransform fragmentTransform;
     unsigned textFragmentsSize = m_textFragments.size();
