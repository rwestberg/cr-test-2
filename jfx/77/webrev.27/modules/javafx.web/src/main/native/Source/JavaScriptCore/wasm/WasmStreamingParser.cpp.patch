diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmStreamingParser.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmStreamingParser.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmStreamingParser.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmStreamingParser.cpp
@@ -28,10 +28,11 @@
 
 #if ENABLE(WEBASSEMBLY)
 
 #include "WasmModuleParser.h"
 #include "WasmSectionParser.h"
+#include <wtf/Optional.h>
 #include <wtf/UnalignedAccess.h>
 
 namespace JSC { namespace Wasm {
 
 namespace WasmStreamingParserInternal {
@@ -107,10 +108,11 @@
     return State::SectionPayload;
 }
 
 auto StreamingParser::parseCodeSectionSize(uint32_t functionCount) -> State
 {
+    m_info->codeSectionSize = m_sectionLength;
     m_functionCount = functionCount;
     m_functionIndex = 0;
     m_codeOffset = m_offset;
 
     WASM_PARSER_FAIL_IF(functionCount == std::numeric_limits<uint32_t>::max(), "Code section's count is too big ", functionCount);
@@ -176,19 +178,19 @@
 auto StreamingParser::consume(const uint8_t* bytes, size_t bytesSize, size_t& offsetInBytes, size_t requiredSize) -> Optional<Vector<uint8_t>>
 {
     if (m_remaining.size() == requiredSize) {
         Vector<uint8_t> result = WTFMove(m_remaining);
         m_nextOffset += requiredSize;
-        return WTFMove(result);
+        return result;
     }
 
     if (m_remaining.size() > requiredSize) {
         Vector<uint8_t> result(requiredSize);
         memcpy(result.data(), m_remaining.data(), requiredSize);
         m_remaining.remove(0, requiredSize);
         m_nextOffset += requiredSize;
-        return WTFMove(result);
+        return result;
     }
 
     ASSERT(m_remaining.size() < requiredSize);
     size_t bytesRemainingSize = bytesSize - offsetInBytes;
     size_t totalDataSize = m_remaining.size() + bytesRemainingSize;
@@ -201,11 +203,11 @@
     size_t usedSize = requiredSize - m_remaining.size();
     m_remaining.append(bytes + offsetInBytes, usedSize);
     offsetInBytes += usedSize;
     Vector<uint8_t> result = WTFMove(m_remaining);
     m_nextOffset += requiredSize;
-    return WTFMove(result);
+    return result;
 }
 
 auto StreamingParser::consumeVarUInt32(const uint8_t* bytes, size_t bytesSize, size_t& offsetInBytes, IsEndOfStream isEndOfStream) -> Expected<uint32_t, State>
 {
     constexpr size_t maxSize = WTF::LEBDecoder::maxByteLength<uint32_t>();
