diff a/modules/javafx.web/src/main/native/Source/WebCore/page/UserMessageHandlersNamespace.h b/modules/javafx.web/src/main/native/Source/WebCore/page/UserMessageHandlersNamespace.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/UserMessageHandlersNamespace.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/UserMessageHandlersNamespace.h
@@ -31,12 +31,12 @@
 #include "UserContentProvider.h"
 #include "UserMessageHandler.h"
 #include <wtf/HashMap.h>
 #include <wtf/RefCounted.h>
 #include <wtf/RefPtr.h>
-#include <wtf/text/AtomicString.h>
-#include <wtf/text/AtomicStringHash.h>
+#include <wtf/text/AtomString.h>
+#include <wtf/text/AtomStringHash.h>
 
 namespace WebCore {
 
 class Frame;
 class UserMessageHandler;
@@ -49,21 +49,21 @@
         return adoptRef(*new UserMessageHandlersNamespace(frame, userContentProvider));
     }
 
     virtual ~UserMessageHandlersNamespace();
 
-    Vector<AtomicString> supportedPropertyNames() const;
-    UserMessageHandler* namedItem(DOMWrapperWorld&, const AtomicString&);
+    Vector<AtomString> supportedPropertyNames() const;
+    UserMessageHandler* namedItem(DOMWrapperWorld&, const AtomString&);
 
 private:
     explicit UserMessageHandlersNamespace(Frame&, UserContentProvider&);
 
     // UserContentProviderInvalidationClient
     void didInvalidate(UserContentProvider&) override;
 
     Ref<UserContentProvider> m_userContentProvider;
-    HashMap<std::pair<AtomicString, RefPtr<DOMWrapperWorld>>, RefPtr<UserMessageHandler>> m_messageHandlers;
+    HashMap<std::pair<AtomString, RefPtr<DOMWrapperWorld>>, RefPtr<UserMessageHandler>> m_messageHandlers;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(USER_MESSAGE_HANDLERS)
