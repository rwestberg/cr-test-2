diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSComputedStyleDeclaration.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSComputedStyleDeclaration.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSComputedStyleDeclaration.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSComputedStyleDeclaration.cpp
@@ -74,25 +74,28 @@
 #include "StyleScope.h"
 #include "StyleScrollSnapPoints.h"
 #include "TouchAction.h"
 #include "WebKitFontFamilyNames.h"
 #include "WillChangeData.h"
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/text/StringBuilder.h>
 
 #include "CSSGridLineNamesValue.h"
 #include "CSSGridTemplateAreasValue.h"
 #include "RenderGrid.h"
 
-#if ENABLE(DASHBOARD_SUPPORT)
-#include "DashboardRegion.h"
-#endif
-
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(CSSComputedStyleDeclaration);
+
 // List of all properties we know how to compute, omitting shorthands.
 static const CSSPropertyID computedProperties[] = {
+    CSSPropertyAlignContent,
+    CSSPropertyAlignItems,
+    CSSPropertyAlignSelf,
+    CSSPropertyAlignmentBaseline,
     CSSPropertyAlt,
     CSSPropertyAnimationDelay,
     CSSPropertyAnimationDirection,
     CSSPropertyAnimationDuration,
     CSSPropertyAnimationFillMode,
@@ -107,10 +110,11 @@
     CSSPropertyBackgroundImage,
     CSSPropertyBackgroundOrigin,
     CSSPropertyBackgroundPosition, // more-specific background-position-x/y are non-standard
     CSSPropertyBackgroundRepeat,
     CSSPropertyBackgroundSize,
+    CSSPropertyBaselineShift,
     CSSPropertyBorderBottomColor,
     CSSPropertyBorderBottomLeftRadius,
     CSSPropertyBorderBottomRightRadius,
     CSSPropertyBorderBottomStyle,
     CSSPropertyBorderBottomWidth,
@@ -132,60 +136,130 @@
     CSSPropertyBorderTopStyle,
     CSSPropertyBorderTopWidth,
     CSSPropertyBottom,
     CSSPropertyBoxShadow,
     CSSPropertyBoxSizing,
+    CSSPropertyBufferedRendering,
     CSSPropertyCaptionSide,
     CSSPropertyCaretColor,
     CSSPropertyClear,
     CSSPropertyClip,
+    CSSPropertyClipPath,
+    CSSPropertyClipRule,
     CSSPropertyColor,
-    CSSPropertyAppleColorFilter,
+    CSSPropertyColorInterpolation,
+    CSSPropertyColorInterpolationFilters,
+    CSSPropertyColorRendering,
+#if ENABLE(DARK_MODE_CSS)
+    CSSPropertyColorScheme,
+#endif
+    CSSPropertyColumnCount,
+    CSSPropertyColumnFill,
+    CSSPropertyColumnGap,
+    CSSPropertyColumnRuleColor,
+    CSSPropertyColumnRuleStyle,
+    CSSPropertyColumnRuleWidth,
+    CSSPropertyColumnSpan,
+    CSSPropertyColumnWidth,
+    CSSPropertyContent,
     CSSPropertyCounterIncrement,
     CSSPropertyCounterReset,
-    CSSPropertyContent,
     CSSPropertyCursor,
+    CSSPropertyCx,
+    CSSPropertyCy,
     CSSPropertyDirection,
     CSSPropertyDisplay,
+    CSSPropertyDominantBaseline,
     CSSPropertyEmptyCells,
+    CSSPropertyFill,
+    CSSPropertyFillOpacity,
+    CSSPropertyFillRule,
+    CSSPropertyFilter,
+    CSSPropertyFlexBasis,
+    CSSPropertyFlexDirection,
+    CSSPropertyFlexFlow,
+    CSSPropertyFlexGrow,
+    CSSPropertyFlexShrink,
+    CSSPropertyFlexWrap,
     CSSPropertyFloat,
+    CSSPropertyFloodColor,
+    CSSPropertyFloodOpacity,
     CSSPropertyFontFamily,
+#if ENABLE(VARIATION_FONTS)
+    CSSPropertyFontOpticalSizing,
+#endif
     CSSPropertyFontSize,
     CSSPropertyFontStretch,
     CSSPropertyFontStyle,
     CSSPropertyFontSynthesis,
     CSSPropertyFontVariant,
-    CSSPropertyFontWeight,
+    CSSPropertyFontVariantAlternates,
+    CSSPropertyFontVariantCaps,
+    CSSPropertyFontVariantEastAsian,
+    CSSPropertyFontVariantLigatures,
+    CSSPropertyFontVariantNumeric,
+    CSSPropertyFontVariantPosition,
 #if ENABLE(VARIATION_FONTS)
-    CSSPropertyFontOpticalSizing,
+    CSSPropertyFontVariationSettings,
 #endif
+    CSSPropertyFontWeight,
+    CSSPropertyGlyphOrientationHorizontal,
+    CSSPropertyGlyphOrientationVertical,
+    CSSPropertyGridAutoColumns,
+    CSSPropertyGridAutoFlow,
+    CSSPropertyGridAutoRows,
+    CSSPropertyGridColumnEnd,
+    CSSPropertyGridColumnStart,
+    CSSPropertyGridRowEnd,
+    CSSPropertyGridRowStart,
+    CSSPropertyGridTemplateAreas,
+    CSSPropertyGridTemplateColumns,
+    CSSPropertyGridTemplateRows,
     CSSPropertyHangingPunctuation,
     CSSPropertyHeight,
 #if ENABLE(CSS_IMAGE_ORIENTATION)
     CSSPropertyImageOrientation,
 #endif
     CSSPropertyImageRendering,
 #if ENABLE(CSS_IMAGE_RESOLUTION)
     CSSPropertyImageResolution,
 #endif
+#if ENABLE(CSS_COMPOSITING)
+    CSSPropertyIsolation,
+#endif
+    CSSPropertyJustifyContent,
+    CSSPropertyJustifyItems,
+    CSSPropertyJustifySelf,
+    CSSPropertyKerning,
     CSSPropertyLeft,
     CSSPropertyLetterSpacing,
+    CSSPropertyLightingColor,
+    CSSPropertyLineBreak,
     CSSPropertyLineHeight,
     CSSPropertyListStyleImage,
     CSSPropertyListStylePosition,
     CSSPropertyListStyleType,
     CSSPropertyMarginBottom,
     CSSPropertyMarginLeft,
     CSSPropertyMarginRight,
     CSSPropertyMarginTop,
+    CSSPropertyMarkerEnd,
+    CSSPropertyMarkerMid,
+    CSSPropertyMarkerStart,
+    CSSPropertyMask,
+    CSSPropertyMaskType,
     CSSPropertyMaxHeight,
     CSSPropertyMaxWidth,
     CSSPropertyMinHeight,
     CSSPropertyMinWidth,
+#if ENABLE(CSS_COMPOSITING)
+    CSSPropertyMixBlendMode,
+#endif
     CSSPropertyObjectFit,
     CSSPropertyObjectPosition,
     CSSPropertyOpacity,
+    CSSPropertyOrder,
     CSSPropertyOrphans,
     CSSPropertyOutlineColor,
     CSSPropertyOutlineOffset,
     CSSPropertyOutlineStyle,
     CSSPropertyOutlineWidth,
@@ -197,78 +271,107 @@
     CSSPropertyPaddingRight,
     CSSPropertyPaddingTop,
     CSSPropertyPageBreakAfter,
     CSSPropertyPageBreakBefore,
     CSSPropertyPageBreakInside,
+    CSSPropertyPaintOrder,
+    CSSPropertyPerspective,
+    CSSPropertyPerspectiveOrigin,
+    CSSPropertyPlaceContent,
+    CSSPropertyPlaceItems,
+    CSSPropertyPlaceSelf,
     CSSPropertyPointerEvents,
     CSSPropertyPosition,
+    CSSPropertyR,
     CSSPropertyResize,
     CSSPropertyRight,
+    CSSPropertyRowGap,
+    CSSPropertyRx,
+    CSSPropertyRy,
+#if ENABLE(CSS_SCROLL_SNAP)
+    CSSPropertyScrollPadding,
+    CSSPropertyScrollPaddingBottom,
+    CSSPropertyScrollPaddingLeft,
+    CSSPropertyScrollPaddingRight,
+    CSSPropertyScrollPaddingTop,
+    CSSPropertyScrollSnapAlign,
+    CSSPropertyScrollSnapMargin,
+    CSSPropertyScrollSnapMarginBottom,
+    CSSPropertyScrollSnapMarginLeft,
+    CSSPropertyScrollSnapMarginRight,
+    CSSPropertyScrollSnapMarginTop,
+    CSSPropertyScrollSnapType,
+#endif
+    CSSPropertyShapeImageThreshold,
+    CSSPropertyShapeMargin,
+    CSSPropertyShapeOutside,
+    CSSPropertyShapeRendering,
     CSSPropertySpeakAs,
-    CSSPropertyTableLayout,
+    CSSPropertyStopColor,
+    CSSPropertyStopOpacity,
+    CSSPropertyStroke,
+    CSSPropertyStrokeColor,
+    CSSPropertyStrokeDasharray,
+    CSSPropertyStrokeDashoffset,
+    CSSPropertyStrokeLinecap,
+    CSSPropertyStrokeLinejoin,
+    CSSPropertyStrokeMiterlimit,
+    CSSPropertyStrokeOpacity,
+    CSSPropertyStrokeWidth,
     CSSPropertyTabSize,
+    CSSPropertyTableLayout,
     CSSPropertyTextAlign,
+    CSSPropertyTextAnchor,
     CSSPropertyTextDecoration,
-#if ENABLE(CSS3_TEXT)
-    CSSPropertyWebkitTextAlignLast,
-    CSSPropertyWebkitTextJustify,
-#endif // CSS3_TEXT
-    CSSPropertyTextDecorationLine,
-    CSSPropertyTextDecorationStyle,
     CSSPropertyTextDecorationColor,
+    CSSPropertyTextDecorationLine,
     CSSPropertyTextDecorationSkip,
-    CSSPropertyTextUnderlinePosition,
+    CSSPropertyTextDecorationStyle,
     CSSPropertyTextIndent,
+    CSSPropertyTextOverflow,
     CSSPropertyTextRendering,
     CSSPropertyTextShadow,
-    CSSPropertyTextOverflow,
     CSSPropertyTextTransform,
+    CSSPropertyTextUnderlinePosition,
     CSSPropertyTop,
+#if ENABLE(POINTER_EVENTS)
+    CSSPropertyTouchAction,
+#endif
     CSSPropertyTransform,
     CSSPropertyTransformBox,
     CSSPropertyTransformOrigin,
     CSSPropertyTransformStyle,
     CSSPropertyTransitionDelay,
     CSSPropertyTransitionDuration,
     CSSPropertyTransitionProperty,
     CSSPropertyTransitionTimingFunction,
     CSSPropertyUnicodeBidi,
+    CSSPropertyVectorEffect,
     CSSPropertyVerticalAlign,
     CSSPropertyVisibility,
     CSSPropertyWhiteSpace,
     CSSPropertyWidows,
     CSSPropertyWidth,
     CSSPropertyWillChange,
     CSSPropertyWordBreak,
     CSSPropertyWordSpacing,
     CSSPropertyWordWrap,
-#if ENABLE(CSS_SCROLL_SNAP)
-    CSSPropertyScrollSnapMargin,
-    CSSPropertyScrollSnapMarginLeft,
-    CSSPropertyScrollSnapMarginTop,
-    CSSPropertyScrollSnapMarginRight,
-    CSSPropertyScrollSnapMarginBottom,
-    CSSPropertyScrollPadding,
-    CSSPropertyScrollPaddingLeft,
-    CSSPropertyScrollPaddingTop,
-    CSSPropertyScrollPaddingRight,
-    CSSPropertyScrollPaddingBottom,
-    CSSPropertyScrollSnapType,
-    CSSPropertyScrollSnapAlign,
-#endif
+    CSSPropertyWritingMode,
+    CSSPropertyX,
+    CSSPropertyY,
     CSSPropertyZIndex,
     CSSPropertyZoom,
+    CSSPropertyAppleColorFilter,
     CSSPropertyWebkitAppearance,
+#if ENABLE(FILTERS_LEVEL_2)
+    CSSPropertyWebkitBackdropFilter,
+#endif
     CSSPropertyWebkitBackfaceVisibility,
     CSSPropertyWebkitBackgroundClip,
     CSSPropertyWebkitBackgroundComposite,
     CSSPropertyWebkitBackgroundOrigin,
     CSSPropertyWebkitBackgroundSize,
-#if ENABLE(CSS_COMPOSITING)
-    CSSPropertyMixBlendMode,
-    CSSPropertyIsolation,
-#endif
     CSSPropertyWebkitBorderFit,
     CSSPropertyWebkitBorderHorizontalSpacing,
     CSSPropertyWebkitBorderImage,
     CSSPropertyWebkitBorderVerticalSpacing,
     CSSPropertyWebkitBoxAlign,
@@ -283,85 +386,34 @@
     CSSPropertyWebkitBoxOrient,
     CSSPropertyWebkitBoxPack,
     CSSPropertyWebkitBoxReflect,
     CSSPropertyWebkitBoxShadow,
     CSSPropertyWebkitClipPath,
+    CSSPropertyWebkitColumnAxis,
     CSSPropertyWebkitColumnBreakAfter,
     CSSPropertyWebkitColumnBreakBefore,
     CSSPropertyWebkitColumnBreakInside,
-    CSSPropertyWebkitColumnAxis,
-    CSSPropertyColumnCount,
-    CSSPropertyColumnFill,
-    CSSPropertyColumnGap,
-    CSSPropertyRowGap,
     CSSPropertyWebkitColumnProgression,
-    CSSPropertyColumnRuleColor,
-    CSSPropertyColumnRuleStyle,
-    CSSPropertyColumnRuleWidth,
-    CSSPropertyColumnSpan,
-    CSSPropertyColumnWidth,
 #if ENABLE(CURSOR_VISIBILITY)
     CSSPropertyWebkitCursorVisibility,
-#endif
-#if ENABLE(DASHBOARD_SUPPORT)
-    CSSPropertyWebkitDashboardRegion,
-#endif
-    CSSPropertyAlignContent,
-    CSSPropertyAlignItems,
-    CSSPropertyAlignSelf,
-    CSSPropertyFilter,
-    CSSPropertyFlexBasis,
-    CSSPropertyFlexDirection,
-    CSSPropertyFlexFlow,
-    CSSPropertyFlexGrow,
-    CSSPropertyFlexShrink,
-    CSSPropertyFlexWrap,
-    CSSPropertyJustifyContent,
-    CSSPropertyJustifySelf,
-    CSSPropertyJustifyItems,
-    CSSPropertyPlaceContent,
-    CSSPropertyPlaceItems,
-    CSSPropertyPlaceSelf,
-#if ENABLE(FILTERS_LEVEL_2)
-    CSSPropertyWebkitBackdropFilter,
 #endif
     CSSPropertyWebkitFontKerning,
     CSSPropertyWebkitFontSmoothing,
-    CSSPropertyFontVariantLigatures,
-    CSSPropertyFontVariantPosition,
-    CSSPropertyFontVariantCaps,
-    CSSPropertyFontVariantNumeric,
-    CSSPropertyFontVariantAlternates,
-    CSSPropertyFontVariantEastAsian,
-#if ENABLE(VARIATION_FONTS)
-    CSSPropertyFontVariationSettings,
-#endif
-    CSSPropertyGridAutoColumns,
-    CSSPropertyGridAutoFlow,
-    CSSPropertyGridAutoRows,
-    CSSPropertyGridColumnEnd,
-    CSSPropertyGridColumnStart,
-    CSSPropertyGridTemplateAreas,
-    CSSPropertyGridTemplateColumns,
-    CSSPropertyGridTemplateRows,
-    CSSPropertyGridRowEnd,
-    CSSPropertyGridRowStart,
     CSSPropertyWebkitHyphenateCharacter,
     CSSPropertyWebkitHyphenateLimitAfter,
     CSSPropertyWebkitHyphenateLimitBefore,
     CSSPropertyWebkitHyphenateLimitLines,
     CSSPropertyWebkitHyphens,
     CSSPropertyWebkitInitialLetter,
     CSSPropertyWebkitLineAlign,
     CSSPropertyWebkitLineBoxContain,
-    CSSPropertyLineBreak,
     CSSPropertyWebkitLineClamp,
     CSSPropertyWebkitLineGrid,
     CSSPropertyWebkitLineSnap,
     CSSPropertyWebkitLocale,
-    CSSPropertyWebkitMarginBeforeCollapse,
     CSSPropertyWebkitMarginAfterCollapse,
+    CSSPropertyWebkitMarginBeforeCollapse,
     CSSPropertyWebkitMarqueeDirection,
     CSSPropertyWebkitMarqueeIncrement,
     CSSPropertyWebkitMarqueeRepetition,
     CSSPropertyWebkitMarqueeStyle,
     CSSPropertyWebkitMaskBoxImage,
@@ -377,94 +429,45 @@
     CSSPropertyWebkitMaskPosition,
     CSSPropertyWebkitMaskRepeat,
     CSSPropertyWebkitMaskSize,
     CSSPropertyWebkitMaskSourceType,
     CSSPropertyWebkitNbspMode,
-    CSSPropertyOrder,
-#if ENABLE(ACCELERATED_OVERFLOW_SCROLLING)
+#if ENABLE(OVERFLOW_SCROLLING_TOUCH)
     CSSPropertyWebkitOverflowScrolling,
 #endif
-    CSSPropertyPerspective,
-    CSSPropertyPerspectiveOrigin,
     CSSPropertyWebkitPrintColorAdjust,
     CSSPropertyWebkitRtlOrdering,
-#if PLATFORM(IOS_FAMILY)
-    CSSPropertyWebkitTouchCallout,
-#endif
 #if ENABLE(TOUCH_EVENTS)
     CSSPropertyWebkitTapHighlightColor,
+#endif
+#if ENABLE(CSS3_TEXT)
+    CSSPropertyWebkitTextAlignLast,
 #endif
     CSSPropertyWebkitTextCombine,
     CSSPropertyWebkitTextDecorationsInEffect,
     CSSPropertyWebkitTextEmphasisColor,
     CSSPropertyWebkitTextEmphasisPosition,
     CSSPropertyWebkitTextEmphasisStyle,
     CSSPropertyWebkitTextFillColor,
+#if ENABLE(CSS3_TEXT)
+    CSSPropertyWebkitTextJustify,
+#endif
     CSSPropertyWebkitTextOrientation,
     CSSPropertyWebkitTextSecurity,
 #if ENABLE(TEXT_AUTOSIZING)
     CSSPropertyWebkitTextSizeAdjust,
 #endif
     CSSPropertyWebkitTextStrokeColor,
     CSSPropertyWebkitTextStrokeWidth,
     CSSPropertyWebkitTextZoom,
+#if PLATFORM(IOS_FAMILY)
+    CSSPropertyWebkitTouchCallout,
+#endif
     CSSPropertyWebkitTransformStyle,
     CSSPropertyWebkitUserDrag,
     CSSPropertyWebkitUserModify,
     CSSPropertyWebkitUserSelect,
-    CSSPropertyShapeImageThreshold,
-    CSSPropertyShapeMargin,
-    CSSPropertyShapeOutside,
-    CSSPropertyShapeRendering,
-    CSSPropertyBufferedRendering,
-    CSSPropertyClipPath,
-    CSSPropertyClipRule,
-    CSSPropertyCx,
-    CSSPropertyCy,
-    CSSPropertyMask,
-    CSSPropertyMaskType,
-    CSSPropertyFloodColor,
-    CSSPropertyFloodOpacity,
-    CSSPropertyLightingColor,
-    CSSPropertyStopColor,
-    CSSPropertyStopOpacity,
-    CSSPropertyColorInterpolation,
-    CSSPropertyColorInterpolationFilters,
-    CSSPropertyColorRendering,
-    CSSPropertyFill,
-    CSSPropertyFillOpacity,
-    CSSPropertyFillRule,
-    CSSPropertyMarkerEnd,
-    CSSPropertyMarkerMid,
-    CSSPropertyMarkerStart,
-    CSSPropertyPaintOrder,
-    CSSPropertyR,
-    CSSPropertyRx,
-    CSSPropertyRy,
-    CSSPropertyStroke,
-    CSSPropertyStrokeColor,
-    CSSPropertyStrokeDasharray,
-    CSSPropertyStrokeDashoffset,
-    CSSPropertyStrokeLinecap,
-    CSSPropertyStrokeLinejoin,
-    CSSPropertyStrokeMiterlimit,
-    CSSPropertyStrokeOpacity,
-    CSSPropertyStrokeWidth,
-#if ENABLE(DARK_MODE_CSS)
-    CSSPropertySupportedColorSchemes,
-#endif
-    CSSPropertyAlignmentBaseline,
-    CSSPropertyBaselineShift,
-    CSSPropertyDominantBaseline,
-    CSSPropertyKerning,
-    CSSPropertyTextAnchor,
-    CSSPropertyWritingMode,
-    CSSPropertyGlyphOrientationHorizontal,
-    CSSPropertyGlyphOrientationVertical,
-    CSSPropertyVectorEffect,
-    CSSPropertyX,
-    CSSPropertyY
 };
 
 const unsigned numComputedProperties = WTF_ARRAY_LENGTH(computedProperties);
 
 static CSSValueID valueForRepeatRule(int rule)
@@ -775,28 +778,35 @@
 
     auto& box = downcast<RenderBox>(*renderer);
     auto* containingBlock = box.containingBlock();
 
     // Resolve a "computed value" percentage if the element is positioned.
-    // TODO: percentages for sticky positioning should be handled here (bug 189549).
-    if (containingBlock && offset.isPercentOrCalculated() && box.isPositioned() && !box.isStickilyPositioned()) {
+    if (containingBlock && offset.isPercentOrCalculated() && box.isPositioned()) {
         bool isVerticalProperty;
         if (propertyID == CSSPropertyTop || propertyID == CSSPropertyBottom)
             isVerticalProperty = true;
         else {
             ASSERT(propertyID == CSSPropertyLeft || propertyID == CSSPropertyRight);
             isVerticalProperty = false;
         }
         LayoutUnit containingBlockSize;
-        if (isVerticalProperty == containingBlock->isHorizontalWritingMode()) {
-            containingBlockSize = box.isOutOfFlowPositioned()
-                ? box.containingBlockLogicalHeightForPositioned(*containingBlock, false)
-                : box.containingBlockLogicalHeightForContent(ExcludeMarginBorderPadding);
+        if (box.isStickilyPositioned()) {
+            auto& enclosingClippingBox = box.enclosingClippingBoxForStickyPosition();
+            if (isVerticalProperty == enclosingClippingBox.isHorizontalWritingMode())
+                containingBlockSize = enclosingClippingBox.contentLogicalHeight();
+            else
+                containingBlockSize = enclosingClippingBox.contentLogicalWidth();
         } else {
-            containingBlockSize = box.isOutOfFlowPositioned()
-                ? box.containingBlockLogicalWidthForPositioned(*containingBlock, nullptr, false)
-                : box.containingBlockLogicalWidthForContent();
+            if (isVerticalProperty == containingBlock->isHorizontalWritingMode()) {
+                containingBlockSize = box.isOutOfFlowPositioned()
+                    ? box.containingBlockLogicalHeightForPositioned(*containingBlock, false)
+                    : box.containingBlockLogicalHeightForContent(ExcludeMarginBorderPadding);
+            } else {
+                containingBlockSize = box.isOutOfFlowPositioned()
+                    ? box.containingBlockLogicalWidthForPositioned(*containingBlock, nullptr, false)
+                    : box.containingBlockLogicalWidthForContent();
+            }
         }
         return zoomAdjustedPixelValue(floatValueForLength(offset, containingBlockSize), style);
     }
 
     // Return a "computed value" length.
@@ -958,11 +968,11 @@
     // Note that this does not flatten to an affine transform if ENABLE(3D_TRANSFORMS) is off, by design.
 
     // FIXME: Need to print out individual functions (https://bugs.webkit.org/show_bug.cgi?id=23924)
     auto list = CSSValueList::createSpaceSeparated();
     list->append(matrixTransformValue(transform, style));
-    return WTFMove(list);
+    return list;
 }
 
 static inline Ref<CSSPrimitiveValue> adjustLengthForZoom(double length, const RenderStyle& style, AdjustPixelValuesForComputedStyle adjust)
 {
     return adjust == AdjustPixelValues ? zoomAdjustedPixelValue(length, style) : CSSValuePool::singleton().createValue(length, CSSPrimitiveValue::CSS_PX);
@@ -987,11 +997,11 @@
         auto spread = propertyID == CSSPropertyTextShadow ? RefPtr<CSSPrimitiveValue>() : adjustLengthForZoom(currShadowData->spread(), style, adjust);
         auto style = propertyID == CSSPropertyTextShadow || currShadowData->style() == Normal ? RefPtr<CSSPrimitiveValue>() : cssValuePool.createIdentifierValue(CSSValueInset);
         auto color = cssValuePool.createColorValue(currShadowData->color());
         list->prepend(CSSShadowValue::create(WTFMove(x), WTFMove(y), WTFMove(blur), WTFMove(spread), WTFMove(style), WTFMove(color)));
     }
-    return WTFMove(list);
+    return list;
 }
 
 Ref<CSSValue> ComputedStyleExtractor::valueForFilter(const RenderStyle& style, const FilterOperations& filterOperations, AdjustPixelValuesForComputedStyle adjust)
 {
     auto& cssValuePool = CSSValuePool::singleton();
@@ -1073,11 +1083,11 @@
                 break;
             }
             list->append(filterValue.releaseNonNull());
         }
     }
-    return WTFMove(list);
+    return list;
 }
 
 static Ref<CSSValue> specifiedValueForGridTrackBreadth(const GridLength& trackBreadth, const RenderStyle& style)
 {
     if (!trackBreadth.isLength())
@@ -1095,21 +1105,21 @@
     case LengthTrackSizing:
         return specifiedValueForGridTrackBreadth(trackSize.minTrackBreadth(), style);
     case FitContentTrackSizing: {
         auto fitContentTrackSize = CSSFunctionValue::create(CSSValueFitContent);
         fitContentTrackSize->append(zoomAdjustedPixelValueForLength(trackSize.fitContentTrackBreadth().length(), style));
-        return WTFMove(fitContentTrackSize);
+        return fitContentTrackSize;
     }
     default:
         ASSERT(trackSize.type() == MinMaxTrackSizing);
         if (trackSize.minTrackBreadth().isAuto() && trackSize.maxTrackBreadth().isFlex())
             return CSSValuePool::singleton().createValue(trackSize.maxTrackBreadth().flex(), CSSPrimitiveValue::CSS_FR);
 
         auto minMaxTrackBreadths = CSSFunctionValue::create(CSSValueMinmax);
         minMaxTrackBreadths->append(specifiedValueForGridTrackBreadth(trackSize.minTrackBreadth(), style));
         minMaxTrackBreadths->append(specifiedValueForGridTrackBreadth(trackSize.maxTrackBreadth(), style));
-        return WTFMove(minMaxTrackBreadths);
+        return minMaxTrackBreadths;
     }
 }
 
 class OrderedNamedLinesCollector {
     WTF_MAKE_NONCOPYABLE(OrderedNamedLinesCollector);
@@ -1246,11 +1256,11 @@
         insertionIndex = trackSizes.size();
     }
 
     // Those are the trailing <ident>* allowed in the syntax.
     addValuesForNamedGridLinesAtIndex(collector, insertionIndex, list.get());
-    return WTFMove(list);
+    return list;
 }
 
 static Ref<CSSValue> valueForGridPosition(const GridPosition& position)
 {
     auto& cssValuePool = CSSValuePool::singleton();
@@ -1267,11 +1277,11 @@
     } else
         list->append(cssValuePool.createValue(position.integerPosition(), CSSPrimitiveValue::CSS_NUMBER));
 
     if (!position.namedGridLine().isNull())
         list->append(cssValuePool.createValue(position.namedGridLine(), CSSPrimitiveValue::CSS_STRING));
-    return WTFMove(list);
+    return list;
 }
 
 static Ref<CSSValue> createTransitionPropertyValue(const Animation& animation)
 {
     switch (animation.animationMode()) {
@@ -1346,11 +1356,11 @@
             ASSERT_NOT_REACHED();
             break;
         }
     }
 
-    return WTFMove(list);
+    return list;
 }
 
 static inline void appendLigaturesValue(CSSValueList& list, FontVariantLigatures value, CSSValueID yesValue, CSSValueID noValue)
 {
     switch (value) {
@@ -1377,11 +1387,11 @@
     auto valueList = CSSValueList::createSpaceSeparated();
     appendLigaturesValue(valueList, common, CSSValueCommonLigatures, CSSValueNoCommonLigatures);
     appendLigaturesValue(valueList, discretionary, CSSValueDiscretionaryLigatures, CSSValueNoDiscretionaryLigatures);
     appendLigaturesValue(valueList, historical, CSSValueHistoricalLigatures, CSSValueNoHistoricalLigatures);
     appendLigaturesValue(valueList, contextualAlternates, CSSValueContextual, CSSValueNoContextual);
-    return WTFMove(valueList);
+    return valueList;
 }
 
 static Ref<CSSValue> fontVariantPositionPropertyValue(FontVariantPosition position)
 {
     auto& cssValuePool = CSSValuePool::singleton();
@@ -1471,11 +1481,11 @@
     if (ordinal == FontVariantNumericOrdinal::Yes)
         valueList->append(cssValuePool.createIdentifierValue(CSSValueOrdinal));
     if (slashedZero == FontVariantNumericSlashedZero::Yes)
         valueList->append(cssValuePool.createIdentifierValue(CSSValueSlashedZero));
 
-    return WTFMove(valueList);
+    return valueList;
 }
 
 static Ref<CSSValue> fontVariantAlternatesPropertyValue(FontVariantAlternates alternates)
 {
     auto& cssValuePool = CSSValuePool::singleton();
@@ -1532,11 +1542,11 @@
     }
 
     if (ruby == FontVariantEastAsianRuby::Yes)
         valueList->append(cssValuePool.createIdentifierValue(CSSValueRuby));
 
-    return WTFMove(valueList);
+    return valueList;
 }
 
 static Ref<CSSValueList> delayValue(const AnimationList* animationList)
 {
     auto& cssValuePool = CSSValuePool::singleton();
@@ -1645,22 +1655,29 @@
     , m_pseudoElementSpecifier(pseudoElementSpecifier)
     , m_allowVisitedStyle(allowVisitedStyle)
 {
 }
 
-CSSComputedStyleDeclaration::CSSComputedStyleDeclaration(Element& element, bool allowVisitedStyle, const String& pseudoElementName)
+CSSComputedStyleDeclaration::CSSComputedStyleDeclaration(Element& element, bool allowVisitedStyle, StringView pseudoElementName)
     : m_element(element)
     , m_allowVisitedStyle(allowVisitedStyle)
-    , m_refCount(1)
 {
-    unsigned nameWithoutColonsStart = pseudoElementName[0] == ':' ? (pseudoElementName[1] == ':' ? 2 : 1) : 0;
-    m_pseudoElementSpecifier = CSSSelector::pseudoId(CSSSelector::parsePseudoElementType(
-    (pseudoElementName.substringSharingImpl(nameWithoutColonsStart))));
+    StringView name = pseudoElementName;
+    if (name.startsWith(':'))
+        name = name.substring(1);
+    if (name.startsWith(':'))
+        name = name.substring(1);
+    m_pseudoElementSpecifier = CSSSelector::pseudoId(CSSSelector::parsePseudoElementType(name));
 }
 
 CSSComputedStyleDeclaration::~CSSComputedStyleDeclaration() = default;
 
+Ref<CSSComputedStyleDeclaration> CSSComputedStyleDeclaration::create(Element& element, bool allowVisitedStyle, StringView pseudoElementName)
+{
+    return adoptRef(*new CSSComputedStyleDeclaration(element, allowVisitedStyle, pseudoElementName));
+}
+
 void CSSComputedStyleDeclaration::ref()
 {
     ++m_refCount;
 }
 
@@ -1672,20 +1689,15 @@
 }
 
 String CSSComputedStyleDeclaration::cssText() const
 {
     StringBuilder result;
-
     for (unsigned i = 0; i < numComputedProperties; i++) {
         if (i)
             result.append(' ');
-        result.append(getPropertyName(computedProperties[i]));
-        result.appendLiteral(": ");
-        result.append(getPropertyValue(computedProperties[i]));
-        result.append(';');
+        result.append(getPropertyName(computedProperties[i]), ": ", getPropertyValue(computedProperties[i]), ';');
     }
-
     return result.toString();
 }
 
 ExceptionOr<void> CSSComputedStyleDeclaration::setCssText(const String&)
 {
@@ -1718,11 +1730,11 @@
         return false;
 
     return style->fontDescription().useFixedDefaultSize();
 }
 
-static CSSValueID identifierForFamily(const AtomicString& family)
+static CSSValueID identifierForFamily(const AtomString& family)
 {
     if (family == cursiveFamily)
         return CSSValueCursive;
     if (family == fantasyFamily)
         return CSSValueFantasy;
@@ -1737,11 +1749,11 @@
     if (family == systemUiFamily)
         return CSSValueSystemUi;
     return CSSValueInvalid;
 }
 
-static Ref<CSSPrimitiveValue> valueForFamily(const AtomicString& family)
+static Ref<CSSPrimitiveValue> valueForFamily(const AtomString& family)
 {
     if (CSSValueID familyIdentifier = identifierForFamily(family))
         return CSSValuePool::singleton().createIdentifierValue(familyIdentifier);
     return CSSValuePool::singleton().createFontFamilyValue(family);
 }
@@ -1766,11 +1778,11 @@
     if (touchActions & TouchAction::PinchZoom)
         list->append(cssValuePool.createIdentifierValue(CSSValuePinchZoom));
 
     if (!list->length())
         return cssValuePool.createIdentifierValue(CSSValueAuto);
-    return WTFMove(list);
+    return list;
 }
 #endif
 
 static Ref<CSSValue> renderTextDecorationFlagsToCSSValue(OptionSet<TextDecoration> textDecoration)
 {
@@ -1788,11 +1800,11 @@
         list->append(cssValuePool.createIdentifierValue(CSSValueWebkitLetterpress));
 #endif
 
     if (!list->length())
         return cssValuePool.createIdentifierValue(CSSValueNone);
-    return WTFMove(list);
+    return list;
 }
 
 static Ref<CSSValue> renderTextDecorationStyleFlagsToCSSValue(TextDecorationStyle textDecorationStyle)
 {
     switch (textDecorationStyle) {
@@ -1862,11 +1874,11 @@
         list->append(cssValuePool.createIdentifierValue(CSSValueLeft));
     if (textEmphasisPosition & TextEmphasisPosition::Right)
         list->append(cssValuePool.createIdentifierValue(CSSValueRight));
     if (!list->length())
         return cssValuePool.createIdentifierValue(CSSValueNone);
-    return WTFMove(list);
+    return list;
 }
 
 static Ref<CSSValue> speakAsToCSSValue(OptionSet<SpeakAs> speakAs)
 {
     auto& cssValuePool = CSSValuePool::singleton();
@@ -1879,11 +1891,11 @@
         list->append(cssValuePool.createIdentifierValue(CSSValueLiteralPunctuation));
     if (speakAs & SpeakAs::NoPunctuation)
         list->append(cssValuePool.createIdentifierValue(CSSValueNoPunctuation));
     if (!list->length())
         return cssValuePool.createIdentifierValue(CSSValueNormal);
-    return WTFMove(list);
+    return list;
 }
 
 static Ref<CSSValue> hangingPunctuationToCSSValue(OptionSet<HangingPunctuation> hangingPunctuation)
 {
     auto& cssValuePool = CSSValuePool::singleton();
@@ -1896,11 +1908,11 @@
         list->append(cssValuePool.createIdentifierValue(CSSValueForceEnd));
     if (hangingPunctuation & HangingPunctuation::Last)
         list->append(cssValuePool.createIdentifierValue(CSSValueLast));
     if (!list->length())
         return cssValuePool.createIdentifierValue(CSSValueNone);
-    return WTFMove(list);
+    return list;
 }
 
 static Ref<CSSValue> fillRepeatToCSSValue(FillRepeat xRepeat, FillRepeat yRepeat)
 {
     // For backwards compatibility, if both values are equal, just return one of them. And
@@ -1914,11 +1926,11 @@
         return cssValuePool.createIdentifierValue(CSSValueRepeatY);
 
     auto list = CSSValueList::createSpaceSeparated();
     list->append(cssValuePool.createValue(xRepeat));
     list->append(cssValuePool.createValue(yRepeat));
-    return WTFMove(list);
+    return list;
 }
 
 static Ref<CSSValue> fillSourceTypeToCSSValue(MaskSourceType type)
 {
     switch (type) {
@@ -1942,11 +1954,11 @@
         return zoomAdjustedPixelValueForLength(fillSize.size.width, style);
 
     auto list = CSSValueList::createSpaceSeparated();
     list->append(zoomAdjustedPixelValueForLength(fillSize.size.width, style));
     list->append(zoomAdjustedPixelValueForLength(fillSize.size.height, style));
-    return WTFMove(list);
+    return list;
 }
 
 static Ref<CSSValue> altTextToCSSValue(const RenderStyle& style)
 {
     return CSSValuePool::singleton().createValue(style.contentAltText(), CSSPrimitiveValue::CSS_STRING);
@@ -1978,11 +1990,11 @@
     for (auto& keyValue : *map) {
         list->append(cssValuePool.createValue(keyValue.key, CSSPrimitiveValue::CSS_STRING));
         double number = (propertyID == CSSPropertyCounterIncrement ? keyValue.value.incrementValue : keyValue.value.resetValue).valueOr(0);
         list->append(cssValuePool.createValue(number, CSSPrimitiveValue::CSS_NUMBER));
     }
-    return WTFMove(list);
+    return list;
 }
 
 static void logUnimplementedPropertyID(CSSPropertyID propertyID)
 {
     static NeverDestroyed<HashSet<CSSPropertyID>> propertyIDSet;
@@ -2260,11 +2272,11 @@
     case FontVariantEastAsianRuby::Yes:
         list->append(CSSValuePool::singleton().createIdentifierValue(CSSValueRuby));
         break;
     }
 
-    return WTFMove(list);
+    return list;
 }
 
 static Ref<CSSValue> fontSynthesisFromStyle(const RenderStyle& style)
 {
     if (style.fontDescription().fontSynthesis() == FontSynthesisNone)
@@ -2275,11 +2287,11 @@
         list->append(CSSValuePool::singleton().createIdentifierValue(CSSValueStyle));
     if (style.fontDescription().fontSynthesis() & FontSynthesisWeight)
         list->append(CSSValuePool::singleton().createIdentifierValue(CSSValueWeight));
     if (style.fontDescription().fontSynthesis() & FontSynthesisSmallCaps)
         list->append(CSSValuePool::singleton().createIdentifierValue(CSSValueSmallCaps));
-    return WTFMove(list);
+    return list;
 }
 
 typedef const Length& (RenderStyle::*RenderStyleLengthGetter)() const;
 typedef LayoutUnit (RenderBoxModelObject::*RenderBoxComputedCSSValueGetter)() const;
 
@@ -2544,11 +2556,11 @@
 
     auto list = CSSValueList::createSpaceSeparated();
     list->append(valueForBasicShape(style, *shapeValue->shape()));
     if (shapeValue->cssBox() != CSSBoxType::BoxMissing)
         list->append(CSSValuePool::singleton().createValue(shapeValue->cssBox()));
-    return WTFMove(list);
+    return list;
 }
 
 static Ref<CSSValueList> valueForItemPositionWithOverflowAlignment(const StyleSelfAlignmentData& data)
 {
     auto& cssValuePool = CSSValuePool::singleton();
@@ -2633,11 +2645,11 @@
     case PaintOrder::MarkersStroke:
         paintOrderList->append(CSSPrimitiveValue::createIdentifier(CSSValueMarkers));
         paintOrderList->append(CSSPrimitiveValue::createIdentifier(CSSValueStroke));
         break;
     }
-    return WTFMove(paintOrderList);
+    return paintOrderList;
 }
 
 inline static bool isFlexOrGrid(ContainerNode* element)
 {
     return element && element->computedStyle() && element->computedStyle()->isDisplayFlexibleOrGridBox();
@@ -2762,20 +2774,23 @@
     }
 
     if (!style)
         return nullptr;
 
-    return valueForPropertyinStyle(*style, propertyID, renderer);
+    return valueForPropertyInStyle(*style, propertyID, renderer);
 }
 
-RefPtr<CSSValue> ComputedStyleExtractor::valueForPropertyinStyle(const RenderStyle& style, CSSPropertyID propertyID, RenderElement* renderer)
+RefPtr<CSSValue> ComputedStyleExtractor::valueForPropertyInStyle(const RenderStyle& style, CSSPropertyID propertyID, RenderElement* renderer)
 {
     auto& cssValuePool = CSSValuePool::singleton();
     propertyID = CSSProperty::resolveDirectionAwareProperty(propertyID, style.direction(), style.writingMode());
 
     switch (propertyID) {
         case CSSPropertyInvalid:
+#if ENABLE(TEXT_AUTOSIZING)
+        case CSSPropertyInternalTextAutosizingStatus:
+#endif
             break;
 
         case CSSPropertyBackgroundColor:
             return cssValuePool.createColorValue(m_allowVisitedStyle? style.visitedDependentColor(CSSPropertyBackgroundColor) : style.backgroundColor());
         case CSSPropertyBackgroundImage:
@@ -2791,60 +2806,60 @@
                 if (currLayer->image())
                     list->append(currLayer->image()->cssValue());
                 else
                     list->append(cssValuePool.createIdentifierValue(CSSValueNone));
             }
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyBackgroundSize:
         case CSSPropertyWebkitBackgroundSize:
         case CSSPropertyWebkitMaskSize: {
             auto& layers = propertyID == CSSPropertyWebkitMaskSize ? style.maskLayers() : style.backgroundLayers();
             if (!layers.next())
                 return fillSizeToCSSValue(layers.size(), style);
             auto list = CSSValueList::createCommaSeparated();
             for (auto* currLayer = &layers; currLayer; currLayer = currLayer->next())
                 list->append(fillSizeToCSSValue(currLayer->size(), style));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyBackgroundRepeat:
         case CSSPropertyWebkitMaskRepeat: {
             auto& layers = propertyID == CSSPropertyWebkitMaskRepeat ? style.maskLayers() : style.backgroundLayers();
             if (!layers.next())
                 return fillRepeatToCSSValue(layers.repeatX(), layers.repeatY());
             auto list = CSSValueList::createCommaSeparated();
             for (auto* currLayer = &layers; currLayer; currLayer = currLayer->next())
                 list->append(fillRepeatToCSSValue(currLayer->repeatX(), currLayer->repeatY()));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyWebkitMaskSourceType: {
             auto& layers = style.maskLayers();
             if (!layers.next())
                 return fillSourceTypeToCSSValue(layers.maskSourceType());
             auto list = CSSValueList::createCommaSeparated();
             for (auto* currLayer = &layers; currLayer; currLayer = currLayer->next())
                 list->append(fillSourceTypeToCSSValue(currLayer->maskSourceType()));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyWebkitBackgroundComposite:
         case CSSPropertyWebkitMaskComposite: {
             auto& layers = propertyID == CSSPropertyWebkitMaskComposite ? style.maskLayers() : style.backgroundLayers();
             if (!layers.next())
                 return cssValuePool.createValue(layers.composite());
             auto list = CSSValueList::createCommaSeparated();
             for (auto* currLayer = &layers; currLayer; currLayer = currLayer->next())
                 list->append(cssValuePool.createValue(currLayer->composite()));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyBackgroundAttachment: {
             auto& layers = style.backgroundLayers();
             if (!layers.next())
                 return cssValuePool.createValue(layers.attachment());
             auto list = CSSValueList::createCommaSeparated();
             for (auto* currLayer = &layers; currLayer; currLayer = currLayer->next())
                 list->append(cssValuePool.createValue(currLayer->attachment()));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyBackgroundClip:
         case CSSPropertyBackgroundOrigin:
         case CSSPropertyWebkitBackgroundClip:
         case CSSPropertyWebkitBackgroundOrigin:
@@ -2855,22 +2870,22 @@
             if (!layers.next())
                 return cssValuePool.createValue(isClip ? layers.clip() : layers.origin());
             auto list = CSSValueList::createCommaSeparated();
             for (auto* currLayer = &layers; currLayer; currLayer = currLayer->next())
                 list->append(cssValuePool.createValue(isClip ? currLayer->clip() : currLayer->origin()));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyBackgroundPosition:
         case CSSPropertyWebkitMaskPosition: {
             auto& layers = propertyID == CSSPropertyWebkitMaskPosition ? style.maskLayers() : style.backgroundLayers();
             if (!layers.next())
                 return createPositionListForLayer(propertyID, layers, style);
 
             auto list = CSSValueList::createCommaSeparated();
             for (auto* currLayer = &layers; currLayer; currLayer = currLayer->next())
                 list->append(createPositionListForLayer(propertyID, *currLayer, style));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyBackgroundPositionX:
         case CSSPropertyWebkitMaskPositionX: {
             auto& layers = propertyID == CSSPropertyWebkitMaskPositionX ? style.maskLayers() : style.backgroundLayers();
             if (!layers.next())
@@ -2878,11 +2893,11 @@
 
             auto list = CSSValueList::createCommaSeparated();
             for (auto* currLayer = &layers; currLayer; currLayer = currLayer->next())
                 list->append(cssValuePool.createValue(currLayer->xPosition()));
 
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyBackgroundPositionY:
         case CSSPropertyWebkitMaskPositionY: {
             auto& layers = propertyID == CSSPropertyWebkitMaskPositionY ? style.maskLayers() : style.backgroundLayers();
             if (!layers.next())
@@ -2890,21 +2905,21 @@
 
             auto list = CSSValueList::createCommaSeparated();
             for (auto* currLayer = &layers; currLayer; currLayer = currLayer->next())
                 list->append(cssValuePool.createValue(currLayer->yPosition()));
 
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyBorderCollapse:
             if (style.borderCollapse() == BorderCollapse::Collapse)
                 return cssValuePool.createIdentifierValue(CSSValueCollapse);
             return cssValuePool.createIdentifierValue(CSSValueSeparate);
         case CSSPropertyBorderSpacing: {
             auto list = CSSValueList::createSpaceSeparated();
             list->append(zoomAdjustedPixelValue(style.horizontalBorderSpacing(), style));
             list->append(zoomAdjustedPixelValue(style.verticalBorderSpacing(), style));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyWebkitBorderHorizontalSpacing:
             return zoomAdjustedPixelValue(style.horizontalBorderSpacing(), style);
         case CSSPropertyWebkitBorderVerticalSpacing:
             return zoomAdjustedPixelValue(style.verticalBorderSpacing(), style);
@@ -3010,11 +3025,11 @@
         case CSSPropertyColumnWidth:
             if (style.hasAutoColumnWidth())
                 return cssValuePool.createIdentifierValue(CSSValueAuto);
             return zoomAdjustedPixelValue(style.columnWidth(), style);
         case CSSPropertyTabSize:
-            return cssValuePool.createValue(style.tabSize(), CSSPrimitiveValue::CSS_NUMBER);
+            return cssValuePool.createValue(style.tabSize().widthInPixels(1.0), style.tabSize().isSpaces() ? CSSPrimitiveValue::CSS_NUMBER : CSSPrimitiveValue::CSS_PX);
         case CSSPropertyCursor: {
             RefPtr<CSSValueList> list;
             auto* cursors = style.cursors();
             if (cursors && cursors->size() > 0) {
                 list = CSSValueList::createCommaSeparated();
@@ -3025,11 +3040,11 @@
             auto value = cssValuePool.createValue(style.cursor());
             if (list) {
                 list->append(WTFMove(value));
                 return list;
             }
-            return WTFMove(value);
+            return value;
         }
 #if ENABLE(CURSOR_VISIBILITY)
         case CSSPropertyWebkitCursorVisibility:
             return cssValuePool.createValue(style.cursorVisibility());
 #endif
@@ -3080,11 +3095,11 @@
         case CSSPropertyFont: {
             auto computedFont = fontShorthandValueForSelectionProperties(style.fontDescription());
             computedFont->size = fontSizeFromStyle(style);
             computedFont->lineHeight = lineHeightFromStyle(style);
             computedFont->family = fontFamilyListFromStyle(style);
-            return WTFMove(computedFont);
+            return computedFont;
         }
         case CSSPropertyFontFamily:
             return fontFamilyFromStyle(style);
         case CSSPropertyFontSize:
             return fontSizeFromStyle(style);
@@ -3103,21 +3118,21 @@
             if (!featureSettings.size())
                 return cssValuePool.createIdentifierValue(CSSValueNormal);
             auto list = CSSValueList::createCommaSeparated();
             for (auto& feature : featureSettings)
                 list->append(CSSFontFeatureValue::create(FontTag(feature.tag()), feature.value()));
-            return WTFMove(list);
+            return list;
         }
 #if ENABLE(VARIATION_FONTS)
         case CSSPropertyFontVariationSettings: {
             const FontVariationSettings& variationSettings = style.fontDescription().variationSettings();
             if (variationSettings.isEmpty())
                 return cssValuePool.createIdentifierValue(CSSValueNormal);
             auto list = CSSValueList::createCommaSeparated();
             for (auto& feature : variationSettings)
                 list->append(CSSFontVariationValue::create(feature.tag(), feature.value()));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyFontOpticalSizing:
             return cssValuePool.createValue(style.fontDescription().opticalSizing());
 #endif
         case CSSPropertyGridAutoFlow: {
@@ -3129,11 +3144,11 @@
                 list->append(cssValuePool.createIdentifierValue(CSSValueColumn));
 
             if (style.isGridAutoFlowAlgorithmDense())
                 list->append(cssValuePool.createIdentifierValue(CSSValueDense));
 
-            return WTFMove(list);
+            return list;
         }
 
         // Specs mention that getComputedStyle() should return the used value of the property instead of the computed
         // one for grid-template-{rows|columns} but not for the grid-auto-{rows|columns} as things like
         // grid-auto-columns: 2fr; cannot be resolved to a value in pixels as the '2fr' means very different things
@@ -3177,13 +3192,12 @@
             return getCSSPropertyValuesForShorthandProperties(gapShorthand());
         case CSSPropertyHeight:
             if (renderer && !renderer->isRenderSVGModelObject()) {
                 // According to http://www.w3.org/TR/CSS2/visudet.html#the-height-property,
                 // the "height" property does not apply for non-replaced inline elements.
-                if (isNonReplacedInline(*renderer))
-                    return cssValuePool.createIdentifierValue(CSSValueAuto);
-                return zoomAdjustedPixelValue(sizingBox(*renderer).height(), style);
+                if (!isNonReplacedInline(*renderer))
+                    return zoomAdjustedPixelValue(sizingBox(*renderer).height(), style);
             }
             return zoomAdjustedPixelValueForLength(style.height(), style);
         case CSSPropertyWebkitHyphens:
             return cssValuePool.createValue(style.hyphens());
         case CSSPropertyWebkitHyphenateCharacter:
@@ -3304,11 +3318,11 @@
             return cssValuePool.createValue(style.objectFit());
         case CSSPropertyObjectPosition: {
             auto list = CSSValueList::createSpaceSeparated();
             list->append(zoomAdjustedPixelValueForLength(style.objectPosition().x(), style));
             list->append(zoomAdjustedPixelValueForLength(style.objectPosition().y(), style));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyOpacity:
             return cssValuePool.createValue(style.opacity(), CSSPrimitiveValue::CSS_NUMBER);
         case CSSPropertyOrphans:
             if (style.hasAutoOrphans())
@@ -3413,11 +3427,11 @@
             case TextEmphasisMark::Triangle:
             case TextEmphasisMark::Sesame:
                 auto list = CSSValueList::createSpaceSeparated();
                 list->append(cssValuePool.createValue(style.textEmphasisFill()));
                 list->append(cssValuePool.createValue(style.textEmphasisMark()));
-                return WTFMove(list);
+                return list;
             }
             RELEASE_ASSERT_NOT_REACHED();
         case CSSPropertyTextIndent: {
             // If CSS3_TEXT is disabled or text-indent has only one value(<length> | <percentage>),
             // getPropertyCSSValue() returns CSSValue.
@@ -3430,14 +3444,14 @@
                 list->append(WTFMove(textIndent));
                 if (style.textIndentLine() == TextIndentLine::EachLine)
                     list->append(cssValuePool.createIdentifierValue(CSSValueWebkitEachLine));
                 if (style.textIndentType() == TextIndentType::Hanging)
                     list->append(cssValuePool.createIdentifierValue(CSSValueWebkitHanging));
-                return WTFMove(list);
+                return list;
             }
 #endif
-            return WTFMove(textIndent);
+            return textIndent;
         }
         case CSSPropertyTextShadow:
             return valueForShadow(style.textShadow(), propertyID, style);
         case CSSPropertyTextRendering:
             return cssValuePool.createValue(style.fontDescription().textRenderingMode());
@@ -3500,13 +3514,12 @@
             return cssValuePool.createValue(style.widows(), CSSPrimitiveValue::CSS_NUMBER);
         case CSSPropertyWidth:
             if (renderer && !renderer->isRenderSVGModelObject()) {
                 // According to http://www.w3.org/TR/CSS2/visudet.html#the-width-property,
                 // the "width" property does not apply for non-replaced inline elements.
-                if (isNonReplacedInline(*renderer))
-                    return cssValuePool.createIdentifierValue(CSSValueAuto);
-                return zoomAdjustedPixelValue(sizingBox(*renderer).width(), style);
+                if (!isNonReplacedInline(*renderer))
+                    return zoomAdjustedPixelValue(sizingBox(*renderer).width(), style);
             }
             return zoomAdjustedPixelValueForLength(style.width(), style);
         case CSSPropertyWillChange:
             return willChangePropertyValue(style.willChange());
         case CSSPropertyWordBreak:
@@ -3545,42 +3558,10 @@
             return cssValuePool.createValue(style.zoom(), CSSPrimitiveValue::CSS_NUMBER);
         case CSSPropertyBoxSizing:
             if (style.boxSizing() == BoxSizing::ContentBox)
                 return cssValuePool.createIdentifierValue(CSSValueContentBox);
             return cssValuePool.createIdentifierValue(CSSValueBorderBox);
-#if ENABLE(DASHBOARD_SUPPORT)
-        case CSSPropertyWebkitDashboardRegion:
-        {
-            const Vector<StyleDashboardRegion>& regions = style.dashboardRegions();
-            unsigned count = regions.size();
-            if (count == 1 && regions[0].type == StyleDashboardRegion::None)
-                return cssValuePool.createIdentifierValue(CSSValueNone);
-
-            RefPtr<DashboardRegion> firstRegion;
-            DashboardRegion* previousRegion = nullptr;
-            for (unsigned i = 0; i < count; i++) {
-                auto region = DashboardRegion::create();
-                StyleDashboardRegion styleRegion = regions[i];
-
-                region->m_label = styleRegion.label;
-                LengthBox offset = styleRegion.offset;
-                region->setTop(zoomAdjustedPixelValue(offset.top().value(), style));
-                region->setRight(zoomAdjustedPixelValue(offset.right().value(), style));
-                region->setBottom(zoomAdjustedPixelValue(offset.bottom().value(), style));
-                region->setLeft(zoomAdjustedPixelValue(offset.left().value(), style));
-                region->m_isRectangle = (styleRegion.type == StyleDashboardRegion::Rectangle);
-                region->m_isCircle = (styleRegion.type == StyleDashboardRegion::Circle);
-
-                if (previousRegion)
-                    previousRegion->m_next = region.copyRef();
-                else
-                    firstRegion = region.copyRef();
-                previousRegion = region.ptr();
-            }
-            return cssValuePool.createValue(WTFMove(firstRegion));
-        }
-#endif
         case CSSPropertyAnimationDelay:
             return delayValue(style.animations());
         case CSSPropertyAnimationDirection: {
             auto list = CSSValueList::createCommaSeparated();
             const AnimationList* t = style.animations();
@@ -3601,11 +3582,11 @@
                         break;
                     }
                 }
             } else
                 list->append(cssValuePool.createIdentifierValue(CSSValueNormal));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyAnimationDuration:
             return durationValue(style.animations());
         case CSSPropertyAnimationFillMode: {
             auto list = CSSValueList::createCommaSeparated();
@@ -3627,11 +3608,11 @@
                         break;
                     }
                 }
             } else
                 list->append(cssValuePool.createIdentifierValue(CSSValueNone));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyAnimationIterationCount: {
             auto list = CSSValueList::createCommaSeparated();
             const AnimationList* t = style.animations();
             if (t) {
@@ -3642,21 +3623,21 @@
                     else
                         list->append(cssValuePool.createValue(iterationCount, CSSPrimitiveValue::CSS_NUMBER));
                 }
             } else
                 list->append(cssValuePool.createValue(Animation::initialIterationCount(), CSSPrimitiveValue::CSS_NUMBER));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyAnimationName: {
             auto list = CSSValueList::createCommaSeparated();
             const AnimationList* t = style.animations();
             if (t) {
                 for (size_t i = 0; i < t->size(); ++i)
                     list->append(cssValuePool.createValue(t->animation(i).name(), CSSPrimitiveValue::CSS_STRING));
             } else
                 list->append(cssValuePool.createIdentifierValue(CSSValueNone));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyAnimationPlayState: {
             auto list = CSSValueList::createCommaSeparated();
             const AnimationList* t = style.animations();
             if (t) {
@@ -3670,11 +3651,11 @@
                         break;
                     }
                 }
             } else
                 list->append(cssValuePool.createIdentifierValue(CSSValueRunning));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyAnimationTimingFunction:
             return timingFunctionValue(style.animations());
         case CSSPropertyWebkitAppearance:
             return cssValuePool.createValue(style.appearance());
@@ -3729,11 +3710,11 @@
         case CSSPropertyWebkitMarginAfterCollapse:
             return cssValuePool.createValue(style.marginAfterCollapse());
         case CSSPropertyWebkitMarginTopCollapse:
         case CSSPropertyWebkitMarginBeforeCollapse:
             return cssValuePool.createValue(style.marginBeforeCollapse());
-#if ENABLE(ACCELERATED_OVERFLOW_SCROLLING)
+#if ENABLE(OVERFLOW_SCROLLING_TOUCH)
         case CSSPropertyWebkitOverflowScrolling:
             if (!style.useTouchOverflowScrolling())
                 return cssValuePool.createIdentifierValue(CSSValueAuto);
             return cssValuePool.createIdentifierValue(CSSValueTouch);
 #endif
@@ -3752,11 +3733,11 @@
                 list->append(zoomAdjustedPixelValue(minimumValueForLength(style.perspectiveOriginY(), box.height()), style));
             } else {
                 list->append(zoomAdjustedPixelValueForLength(style.perspectiveOriginX(), style));
                 list->append(zoomAdjustedPixelValueForLength(style.perspectiveOriginY(), style));
             }
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyWebkitRtlOrdering:
             return cssValuePool.createIdentifierValue(style.rtlOrdering() == Order::Visual ? CSSValueVisual : CSSValueLogical);
 #if ENABLE(TOUCH_EVENTS)
         case CSSPropertyWebkitTapHighlightColor:
@@ -3813,11 +3794,11 @@
                 list->append(zoomAdjustedPixelValueForLength(style.transformOriginX(), style));
                 list->append(zoomAdjustedPixelValueForLength(style.transformOriginY(), style));
                 if (style.transformOriginZ())
                     list->append(zoomAdjustedPixelValue(style.transformOriginZ(), style));
             }
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyTransformStyle:
         case CSSPropertyWebkitTransformStyle:
             return cssValuePool.createIdentifierValue((style.transformStyle3D() == TransformStyle3D::Preserve3D) ? CSSValuePreserve3d : CSSValueFlat);
         case CSSPropertyTransitionDelay:
@@ -3838,20 +3819,20 @@
                     list->append(cssValuePool.createValue(animation.duration(), CSSPrimitiveValue::CSS_S));
                     list->append(createTimingFunctionValue(*animation.timingFunction()));
                     list->append(cssValuePool.createValue(animation.delay(), CSSPrimitiveValue::CSS_S));
                     transitionsList->append(WTFMove(list));
                 }
-                return WTFMove(transitionsList);
+                return transitionsList;
             }
 
             auto list = CSSValueList::createSpaceSeparated();
             // transition-property default value.
             list->append(cssValuePool.createIdentifierValue(CSSValueAll));
             list->append(cssValuePool.createValue(Animation::initialDuration(), CSSPrimitiveValue::CSS_S));
             list->append(createTimingFunctionValue(Animation::initialTimingFunction()));
             list->append(cssValuePool.createValue(Animation::initialDelay(), CSSPrimitiveValue::CSS_S));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyPointerEvents:
             return cssValuePool.createValue(style.pointerEvents());
         case CSSPropertyWebkitLineGrid:
             if (style.lineGrid().isNull())
@@ -3890,11 +3871,11 @@
                 if (shapeOperation.referenceBox() != CSSBoxType::BoxMissing)
                     list->append(cssValuePool.createValue(shapeOperation.referenceBox()));
             }
             if (is<BoxClipPathOperation>(*operation))
                 list->append(cssValuePool.createValue(downcast<BoxClipPathOperation>(*operation).referenceBox()));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyShapeMargin:
             return cssValuePool.createValue(style.shapeMargin(), style);
         case CSSPropertyShapeImageThreshold:
             return cssValuePool.createValue(style.shapeImageThreshold(), CSSPrimitiveValue::CSS_NUMBER);
@@ -3919,11 +3900,11 @@
             if (!layers.next())
                 return cssValuePool.createValue(layers.blendMode());
             auto list = CSSValueList::createCommaSeparated();
             for (auto* currLayer = &layers; currLayer; currLayer = currLayer->next())
                 list->append(cssValuePool.createValue(currLayer->blendMode()));
-            return WTFMove(list);
+            return list;
         }
         case CSSPropertyBackground:
             return getBackgroundShorthandValue();
         case CSSPropertyBorder: {
             auto value = propertyValue(CSSPropertyBorderTop, DoNotUpdateLayout);
@@ -4040,27 +4021,24 @@
         case CSSPropertyApplePayButtonType:
             return cssValuePool.createValue(style.applePayButtonType());
 #endif
 
 #if ENABLE(DARK_MODE_CSS)
-        case CSSPropertySupportedColorSchemes: {
-            if (!RuntimeEnabledFeatures::sharedFeatures().darkModeCSSEnabled())
-                return nullptr;
-
-            auto supportedColorSchemes = style.supportedColorSchemes();
-            if (supportedColorSchemes.isAuto())
+        case CSSPropertyColorScheme: {
+            auto colorScheme = style.colorScheme();
+            if (colorScheme.isAuto())
                 return cssValuePool.createIdentifierValue(CSSValueAuto);
 
             auto list = CSSValueList::createSpaceSeparated();
-            if (supportedColorSchemes.contains(ColorSchemes::Light))
+            if (colorScheme.contains(ColorScheme::Light))
                 list->append(cssValuePool.createIdentifierValue(CSSValueLight));
-            if (supportedColorSchemes.contains(ColorSchemes::Dark))
+            if (colorScheme.contains(ColorScheme::Dark))
                 list->append(cssValuePool.createIdentifierValue(CSSValueDark));
-            if (!supportedColorSchemes.allowsTransformations())
+            if (!colorScheme.allowsTransformations())
                 list->append(cssValuePool.createIdentifierValue(CSSValueOnly));
             ASSERT(list->length());
-            return WTFMove(list);
+            return list;
         }
 #endif
 
         /* Individual properties not part of the spec */
         case CSSPropertyBackgroundRepeatX:
@@ -4314,11 +4292,11 @@
 
     list->append(startValue.releaseNonNull());
     if (showEnd)
         list->append(endValue.releaseNonNull());
 
-    return WTFMove(list);
+    return list;
 }
 
 RefPtr<CSSValueList> ComputedStyleExtractor::getCSSPropertyValuesFor4SidesShorthand(const StylePropertyShorthand& shorthand)
 {
     auto list = CSSValueList::createSpaceSeparated();
@@ -4343,11 +4321,11 @@
     if (showBottom)
         list->append(bottomValue.releaseNonNull());
     if (showLeft)
         list->append(leftValue.releaseNonNull());
 
-    return WTFMove(list);
+    return list;
 }
 
 Ref<CSSValueList> ComputedStyleExtractor::getCSSPropertyValuesForGridShorthand(const StylePropertyShorthand& shorthand)
 {
     auto list = CSSValueList::createSlashSeparated();
