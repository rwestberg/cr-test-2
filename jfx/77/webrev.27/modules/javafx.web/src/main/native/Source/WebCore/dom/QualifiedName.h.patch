diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/QualifiedName.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/QualifiedName.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/QualifiedName.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/QualifiedName.h
@@ -20,11 +20,11 @@
 
 #pragma once
 
 #include <wtf/HashTraits.h>
 #include <wtf/NeverDestroyed.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
 struct QualifiedNameComponents {
     StringImpl* m_prefix;
@@ -35,41 +35,41 @@
 class QualifiedName {
     WTF_MAKE_FAST_ALLOCATED;
 public:
     class QualifiedNameImpl : public RefCounted<QualifiedNameImpl> {
     public:
-        static Ref<QualifiedNameImpl> create(const AtomicString& prefix, const AtomicString& localName, const AtomicString& namespaceURI)
+        static Ref<QualifiedNameImpl> create(const AtomString& prefix, const AtomString& localName, const AtomString& namespaceURI)
         {
             return adoptRef(*new QualifiedNameImpl(prefix, localName, namespaceURI));
         }
 
         WEBCORE_EXPORT ~QualifiedNameImpl();
 
         unsigned computeHash() const;
 
         mutable unsigned m_existingHash { 0 };
-        const AtomicString m_prefix;
-        const AtomicString m_localName;
-        const AtomicString m_namespace;
-        mutable AtomicString m_localNameUpper;
+        const AtomString m_prefix;
+        const AtomString m_localName;
+        const AtomString m_namespace;
+        mutable AtomString m_localNameUpper;
 
 #if ENABLE(JIT)
         static ptrdiff_t localNameMemoryOffset() { return OBJECT_OFFSETOF(QualifiedNameImpl, m_localName); }
         static ptrdiff_t namespaceMemoryOffset() { return OBJECT_OFFSETOF(QualifiedNameImpl, m_namespace); }
 #endif
 
     private:
-        QualifiedNameImpl(const AtomicString& prefix, const AtomicString& localName, const AtomicString& namespaceURI)
+        QualifiedNameImpl(const AtomString& prefix, const AtomString& localName, const AtomString& namespaceURI)
             : m_prefix(prefix)
             , m_localName(localName)
             , m_namespace(namespaceURI)
         {
             ASSERT(!namespaceURI.isEmpty() || namespaceURI.isNull());
         }
     };
 
-    WEBCORE_EXPORT QualifiedName(const AtomicString& prefix, const AtomicString& localName, const AtomicString& namespaceURI);
+    WEBCORE_EXPORT QualifiedName(const AtomString& prefix, const AtomString& localName, const AtomString& namespaceURI);
     explicit QualifiedName(WTF::HashTableDeletedValueType) : m_impl(WTF::HashTableDeletedValue) { }
     bool isHashTableDeletedValue() const { return m_impl.isHashTableDeletedValue(); }
 #ifdef QNAME_DEFAULT_CONSTRUCTOR
     QualifiedName() { }
 #endif
@@ -78,18 +78,18 @@
     bool operator!=(const QualifiedName& other) const { return !(*this == other); }
 
     bool matches(const QualifiedName& other) const { return m_impl == other.m_impl || (localName() == other.localName() && namespaceURI() == other.namespaceURI()); }
 
     bool hasPrefix() const { return !m_impl->m_prefix.isNull(); }
-    void setPrefix(const AtomicString& prefix) { *this = QualifiedName(prefix, localName(), namespaceURI()); }
+    void setPrefix(const AtomString& prefix) { *this = QualifiedName(prefix, localName(), namespaceURI()); }
 
-    const AtomicString& prefix() const { return m_impl->m_prefix; }
-    const AtomicString& localName() const { return m_impl->m_localName; }
-    const AtomicString& namespaceURI() const { return m_impl->m_namespace; }
+    const AtomString& prefix() const { return m_impl->m_prefix; }
+    const AtomString& localName() const { return m_impl->m_localName; }
+    const AtomString& namespaceURI() const { return m_impl->m_namespace; }
 
     // Uppercased localName, cached for efficiency
-    const AtomicString& localNameUpper() const;
+    const AtomString& localNameUpper() const;
 
     String toString() const;
 
     QualifiedNameImpl* impl() const { return m_impl.get(); }
 #if ENABLE(JIT)
@@ -108,14 +108,14 @@
 extern LazyNeverDestroyed<const QualifiedName> anyName;
 inline const QualifiedName& anyQName() { return anyName; }
 
 const QualifiedName& nullQName();
 
-inline bool operator==(const AtomicString& a, const QualifiedName& q) { return a == q.localName(); }
-inline bool operator!=(const AtomicString& a, const QualifiedName& q) { return a != q.localName(); }
-inline bool operator==(const QualifiedName& q, const AtomicString& a) { return a == q.localName(); }
-inline bool operator!=(const QualifiedName& q, const AtomicString& a) { return a != q.localName(); }
+inline bool operator==(const AtomString& a, const QualifiedName& q) { return a == q.localName(); }
+inline bool operator!=(const AtomString& a, const QualifiedName& q) { return a != q.localName(); }
+inline bool operator==(const QualifiedName& q, const AtomString& a) { return a == q.localName(); }
+inline bool operator!=(const QualifiedName& q, const AtomString& a) { return a != q.localName(); }
 
 inline unsigned hashComponents(const QualifiedNameComponents& buf)
 {
     return StringHasher::hashMemory<sizeof(QualifiedNameComponents)>(&buf);
 }
