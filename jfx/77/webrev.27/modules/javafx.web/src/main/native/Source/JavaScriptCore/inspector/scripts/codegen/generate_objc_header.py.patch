diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/scripts/codegen/generate_objc_header.py b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/scripts/codegen/generate_objc_header.py
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/scripts/codegen/generate_objc_header.py
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/scripts/codegen/generate_objc_header.py
@@ -55,16 +55,24 @@
 
     def output_filename(self):
         return '%s.h' % self.protocol_name()
 
     def generate_output(self):
-        headers = set([
+        headerPreludeHeaders = set([
             '<WebInspector/%sJSONObject.h>' % ObjCGenerator.OBJC_STATIC_PREFIX,
         ])
 
-        header_args = {
-            'includes': '\n'.join(['#import ' + header for header in sorted(headers)]),
+        headerPrelude_args = {
+            'includes': '\n'.join(['#import ' + header for header in sorted(headerPreludeHeaders)]),
+        }
+
+        headerPostludeHeaders = set([
+            '<WebInspector/%sBuildCompatibilityObjects.h>' % ObjCGenerator.OBJC_STATIC_PREFIX,
+        ])
+
+        headerPostlude_args = {
+            'includes': '\n'.join(['#import ' + header for header in sorted(headerPostludeHeaders)]),
         }
 
         domains = self.domains_to_generate()
         type_domains = list(filter(self.should_generate_types_for_domain, domains))
         command_domains = list(filter(self.should_generate_commands_for_domain, domains))
@@ -75,21 +83,21 @@
         # JSC domains (Debugger, Runtime) this produces extra unused types. We only need to
         # generate these types if they are referenced by the command_domains or event_domains.
 
         sections = []
         sections.append(self.generate_license())
-        sections.append(Template(ObjCTemplates.HeaderPrelude).substitute(None, **header_args))
+        sections.append(Template(ObjCTemplates.HeaderPrelude).substitute(None, **headerPrelude_args))
         sections.append('\n'.join([_f for _f in map(self._generate_forward_declarations, type_domains) if _f]))
         sections.append(self._generate_enum_for_platforms())
         sections.append('\n'.join([_f for _f in map(self._generate_enums, type_domains) if _f]))
         sections.append('\n'.join([_f for _f in map(self._generate_types, type_domains) if _f]))
 
         if self.get_generator_setting('generate_backend', False):
             sections.append('\n\n'.join([_f for _f in map(self._generate_command_protocols, command_domains) if _f]))
             sections.append('\n\n'.join([_f for _f in map(self._generate_event_interfaces, event_domains) if _f]))
 
-        sections.append(Template(ObjCTemplates.HeaderPostlude).substitute(None))
+        sections.append(Template(ObjCTemplates.HeaderPostlude).substitute(None, **headerPostlude_args))
         return '\n\n'.join(sections)
 
     def _generate_forward_declarations(self, domain):
         lines = []
         for declaration in self.type_declarations_for_domain(domain):
