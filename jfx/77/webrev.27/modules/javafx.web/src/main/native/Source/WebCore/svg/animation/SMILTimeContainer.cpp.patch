diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/animation/SMILTimeContainer.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/animation/SMILTimeContainer.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/animation/SMILTimeContainer.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/animation/SMILTimeContainer.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2008 Apple Inc. All rights reserved.
+ * Copyright (C) 2008-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -42,31 +42,20 @@
     : m_timer(*this, &SMILTimeContainer::timerFired)
     , m_ownerSVGElement(owner)
 {
 }
 
-SMILTimeContainer::~SMILTimeContainer()
-{
-#ifndef NDEBUG
-    ASSERT(!m_preventScheduledAnimationsChanges);
-#endif
-}
-
 void SMILTimeContainer::schedule(SVGSMILElement* animation, SVGElement* target, const QualifiedName& attributeName)
 {
     ASSERT(animation->timeContainer() == this);
     ASSERT(target);
     ASSERT(animation->hasValidAttributeName());
 
-#ifndef NDEBUG
-    ASSERT(!m_preventScheduledAnimationsChanges);
-#endif
-
     ElementAttributePair key(target, attributeName);
     std::unique_ptr<AnimationsVector>& scheduled = m_scheduledAnimations.add(key, nullptr).iterator->value;
     if (!scheduled)
-        scheduled = std::make_unique<AnimationsVector>();
+        scheduled = makeUnique<AnimationsVector>();
     ASSERT(!scheduled->contains(animation));
     scheduled->append(animation);
 
     SMILTime nextFireTime = animation->nextProgressTime();
     if (nextFireTime.isFinite())
@@ -75,14 +64,10 @@
 
 void SMILTimeContainer::unschedule(SVGSMILElement* animation, SVGElement* target, const QualifiedName& attributeName)
 {
     ASSERT(animation->timeContainer() == this);
 
-#ifndef NDEBUG
-    ASSERT(!m_preventScheduledAnimationsChanges);
-#endif
-
     ElementAttributePair key(target, attributeName);
     AnimationsVector* scheduled = m_scheduledAnimations.get(key);
     ASSERT(scheduled);
     bool removed = scheduled->removeFirst(animation);
     ASSERT_UNUSED(removed, removed);
@@ -182,20 +167,13 @@
         m_resumeTime = m_pauseTime = now;
         m_accumulatedActiveTime = Seconds(time.value());
     } else
         m_resumeTime = m_beginTime;
 
-#ifndef NDEBUG
-    m_preventScheduledAnimationsChanges = true;
-#endif
-    for (auto& animation : m_scheduledAnimations.values()) {
-        for (auto& element : *animation)
-            element->reset();
-    }
-#ifndef NDEBUG
-    m_preventScheduledAnimationsChanges = false;
-#endif
+    processScheduledAnimations([](auto* animation) {
+        animation->reset();
+    });
 
     updateAnimations(time, true);
 }
 
 void SMILTimeContainer::startTimer(SMILTime elapsed, SMILTime fireTime, SMILTime minimumDelay)
@@ -242,89 +220,81 @@
         return aBegin < bBegin;
     }
     SMILTime m_elapsed;
 };
 
-void SMILTimeContainer::sortByPriority(Vector<SVGSMILElement*>& smilElements, SMILTime elapsed)
+void SMILTimeContainer::sortByPriority(AnimationsVector& animations, SMILTime elapsed)
 {
     if (m_documentOrderIndexesDirty)
         updateDocumentOrderIndexes();
-    std::sort(smilElements.begin(), smilElements.end(), PriorityCompare(elapsed));
+    std::sort(animations.begin(), animations.end(), PriorityCompare(elapsed));
 }
 
-void SMILTimeContainer::updateAnimations(SMILTime elapsed, bool seekToTime)
+void SMILTimeContainer::processAnimations(const AnimationsVector& animations, Function<void(SVGSMILElement*)>&& callback)
 {
-    SMILTime earliestFireTime = SMILTime::unresolved();
+    // 'animations' may change if 'callback' causes an animation to end which will end up calling
+    // unschedule(). Copy 'animations' so none of the items gets deleted out from underneath us.
+    auto animationsCopy = animations;
+    for (auto* animation : animations)
+        callback(animation);
+}
+
+void SMILTimeContainer::processScheduledAnimations(Function<void(SVGSMILElement*)>&& callback)
+{
+    for (auto& it : m_scheduledAnimations)
+        processAnimations(*it.value, WTFMove(callback));
+}
 
+void SMILTimeContainer::updateAnimations(SMILTime elapsed, bool seekToTime)
+{
     // Don't mutate the DOM while updating the animations.
     EventQueueScope scope;
 
-#ifndef NDEBUG
-    // This boolean will catch any attempts to schedule/unschedule scheduledAnimations during this critical section.
-    // Similarly, any elements removed will unschedule themselves, so this will catch modification of animationsToApply.
-    m_preventScheduledAnimationsChanges = true;
-#endif
+    processScheduledAnimations([](auto* animation) {
+        if (!animation->hasConditionsConnected())
+            animation->connectConditions();
+    });
 
     AnimationsVector animationsToApply;
-    for (auto& it : m_scheduledAnimations) {
-        AnimationsVector* scheduled = it.value.get();
-        for (auto* animation : *scheduled) {
-            if (!animation->hasConditionsConnected())
-                animation->connectConditions();
-        }
-    }
+    SMILTime earliestFireTime = SMILTime::unresolved();
 
     for (auto& it : m_scheduledAnimations) {
-        AnimationsVector* scheduled = it.value.get();
-
         // Sort according to priority. Elements with later begin time have higher priority.
         // In case of a tie, document order decides.
         // FIXME: This should also consider timing relationships between the elements. Dependents
         // have higher priority.
-        sortByPriority(*scheduled, elapsed);
+        sortByPriority(*it.value, elapsed);
 
-        RefPtr<SVGSMILElement> resultElement;
-        for (auto& animation : *scheduled) {
+        RefPtr<SVGSMILElement> firstAnimation;
+        processAnimations(*it.value, [&](auto* animation) {
             ASSERT(animation->timeContainer() == this);
             ASSERT(animation->targetElement());
             ASSERT(animation->hasValidAttributeName());
 
             // Results are accumulated to the first animation that animates and contributes to a particular element/attribute pair.
-            if (!resultElement) {
+            if (!firstAnimation) {
                 if (!animation->hasValidAttributeType())
-                    continue;
-                resultElement = animation;
+                    return;
+                firstAnimation = animation;
             }
 
             // This will calculate the contribution from the animation and add it to the resultsElement.
-            if (!animation->progress(elapsed, resultElement.get(), seekToTime) && resultElement == animation)
-                resultElement = nullptr;
+            if (!animation->progress(elapsed, firstAnimation.get(), seekToTime) && firstAnimation == animation)
+                firstAnimation = nullptr;
 
             SMILTime nextFireTime = animation->nextProgressTime();
             if (nextFireTime.isFinite())
                 earliestFireTime = std::min(nextFireTime, earliestFireTime);
-        }
+        });
 
-        if (resultElement)
-            animationsToApply.append(resultElement.get());
-    }
-
-    if (animationsToApply.isEmpty()) {
-#ifndef NDEBUG
-        m_preventScheduledAnimationsChanges = false;
-#endif
-        startTimer(elapsed, earliestFireTime, animationFrameDelay());
-        return;
+        if (firstAnimation)
+            animationsToApply.append(firstAnimation.get());
     }
 
     // Apply results to target elements.
     for (auto& animation : animationsToApply)
         animation->applyResultsToTarget();
 
-#ifndef NDEBUG
-    m_preventScheduledAnimationsChanges = false;
-#endif
-
     startTimer(elapsed, earliestFireTime, animationFrameDelay());
 }
 
 }
