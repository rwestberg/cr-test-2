diff a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLParserIdioms.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLParserIdioms.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLParserIdioms.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLParserIdioms.cpp
@@ -27,11 +27,13 @@
 
 #include "Decimal.h"
 #include "QualifiedName.h"
 #include <limits>
 #include <wtf/MathExtras.h>
+#include <wtf/Optional.h>
 #include <wtf/URL.h>
+#include <wtf/Vector.h>
 #include <wtf/dtoa.h>
 
 namespace WebCore {
 
 template <typename CharType>
@@ -85,11 +87,11 @@
 
 String serializeForNumberType(double number)
 {
     // According to HTML5, "the best representation of the number n as a floating
     // point number" is a string produced by applying ToString() to n.
-    return String::numberToStringECMAScript(number);
+    return String::number(number);
 }
 
 Decimal parseToDecimalForNumberType(const String& string, const Decimal& fallbackValue)
 {
     // See HTML5 2.5.4.3 `Real numbers.' and parseToDoubleForNumberType
@@ -342,11 +344,11 @@
 bool threadSafeMatch(const QualifiedName& a, const QualifiedName& b)
 {
     return threadSafeEqual(*a.localName().impl(), *b.localName().impl());
 }
 
-String parseCORSSettingsAttribute(const AtomicString& value)
+String parseCORSSettingsAttribute(const AtomString& value)
 {
     if (value.isNull())
         return String();
     if (equalIgnoringASCIICase(value, "use-credentials"))
         return "use-credentials"_s;
@@ -464,14 +466,14 @@
     auto* start = input.characters16();
     return parseHTTPRefreshInternal(start, start + input.length(), delay, url);
 }
 
 // https://html.spec.whatwg.org/#rules-for-parsing-a-hash-name-reference
-AtomicString parseHTMLHashNameReference(StringView usemap)
+AtomString parseHTMLHashNameReference(StringView usemap)
 {
     size_t numberSignIndex = usemap.find('#');
     if (numberSignIndex == notFound)
         return nullAtom();
-    return usemap.substring(numberSignIndex + 1).toAtomicString();
+    return usemap.substring(numberSignIndex + 1).toAtomString();
 }
 
 }
