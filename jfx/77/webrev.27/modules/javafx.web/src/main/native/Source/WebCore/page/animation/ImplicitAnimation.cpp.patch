diff a/modules/javafx.web/src/main/native/Source/WebCore/page/animation/ImplicitAnimation.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/animation/ImplicitAnimation.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/animation/ImplicitAnimation.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/animation/ImplicitAnimation.cpp
@@ -30,10 +30,13 @@
 #include "ImplicitAnimation.h"
 
 #include "CSSAnimationControllerPrivate.h"
 #include "CSSPropertyAnimation.h"
 #include "CompositeAnimation.h"
+#if PLATFORM(IOS_FAMILY)
+#include "ContentChangeObserver.h"
+#endif
 #include "EventNames.h"
 #include "GeometryUtilities.h"
 #include "KeyframeAnimation.h"
 #include "RenderBox.h"
 #include "StylePendingResources.h"
@@ -44,15 +47,22 @@
     : AnimationBase(transition, element, compositeAnimation)
     , m_fromStyle(RenderStyle::clonePtr(fromStyle))
     , m_transitionProperty(transition.property())
     , m_animatingProperty(animatingProperty)
 {
+#if PLATFORM(IOS_FAMILY)
+    element.document().contentChangeObserver().didAddTransition(element, transition);
+#endif
     ASSERT(animatingProperty != CSSPropertyInvalid);
 }
 
 ImplicitAnimation::~ImplicitAnimation()
 {
+#if PLATFORM(IOS_FAMILY)
+    if (auto* element = this->element())
+        element->document().contentChangeObserver().didRemoveTransition(*element, m_animatingProperty);
+#endif
     // // Make sure to tell the renderer that we are ending. This will make sure any accelerated animations are removed.
     if (!postActive())
         endAnimation();
 }
 
@@ -142,32 +152,45 @@
     return CSSPropertyAnimation::animationOfPropertyIsAccelerated(m_animatingProperty);
 }
 
 bool ImplicitAnimation::startAnimation(double timeOffset)
 {
-    if (auto* renderer = compositedRenderer())
+    if (auto* renderer = this->renderer())
         return renderer->startTransition(timeOffset, m_animatingProperty, m_fromStyle.get(), m_toStyle.get());
     return false;
 }
 
 void ImplicitAnimation::pauseAnimation(double timeOffset)
 {
-    if (auto* renderer = compositedRenderer())
+    if (auto* renderer = this->renderer())
         renderer->transitionPaused(timeOffset, m_animatingProperty);
     // Restore the original (unanimated) style
     if (!paused())
         setNeedsStyleRecalc(element());
 }
 
+void ImplicitAnimation::clear()
+{
+#if PLATFORM(IOS_FAMILY)
+    if (auto* element = this->element())
+        element->document().contentChangeObserver().didRemoveTransition(*element, m_animatingProperty);
+#endif
+    AnimationBase::clear();
+}
+
 void ImplicitAnimation::endAnimation(bool)
 {
-    if (auto* renderer = compositedRenderer())
+    if (auto* renderer = this->renderer())
         renderer->transitionFinished(m_animatingProperty);
 }
 
 void ImplicitAnimation::onAnimationEnd(double elapsedTime)
 {
+#if PLATFORM(IOS_FAMILY)
+    if (auto* element = this->element())
+        element->document().contentChangeObserver().didFinishTransition(*element, m_animatingProperty);
+#endif
     // If we have a keyframe animation on this property, this transition is being overridden. The keyframe
     // animation keeps an unanimated style in case a transition starts while the keyframe animation is
     // running. But now that the transition has completed, we need to update this style with its new
     // destination. If we didn't, the next time through we would think a transition had started
     // (comparing the old unanimated style with the new final style of the transition).
@@ -176,11 +199,11 @@
 
     sendTransitionEvent(eventNames().transitionendEvent, elapsedTime);
     endAnimation();
 }
 
-bool ImplicitAnimation::sendTransitionEvent(const AtomicString& eventType, double elapsedTime)
+bool ImplicitAnimation::sendTransitionEvent(const AtomString& eventType, double elapsedTime)
 {
     if (eventType == eventNames().transitionendEvent) {
         Document::ListenerType listenerType = Document::TRANSITIONEND_LISTENER;
 
         if (shouldSendEventForListener(listenerType)) {
