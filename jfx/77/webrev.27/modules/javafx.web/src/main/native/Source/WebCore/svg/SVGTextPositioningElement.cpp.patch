diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTextPositioningElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTextPositioningElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTextPositioningElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTextPositioningElement.cpp
@@ -1,10 +1,10 @@
 /*
  * Copyright (C) 2004, 2005, 2008 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005, 2006, 2007, 2008 Rob Buis <buis@kde.org>
  * Copyright (C) 2014 Adobe Systems Incorporated. All rights reserved.
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -25,13 +25,11 @@
 
 #include "RenderSVGInline.h"
 #include "RenderSVGResource.h"
 #include "RenderSVGText.h"
 #include "SVGAltGlyphElement.h"
-#include "SVGLengthListValues.h"
 #include "SVGNames.h"
-#include "SVGNumberListValues.h"
 #include "SVGTRefElement.h"
 #include "SVGTSpanElement.h"
 #include "SVGTextElement.h"
 #include <wtf/IsoMallocInlines.h>
 
@@ -40,71 +38,51 @@
 WTF_MAKE_ISO_ALLOCATED_IMPL(SVGTextPositioningElement);
 
 SVGTextPositioningElement::SVGTextPositioningElement(const QualifiedName& tagName, Document& document)
     : SVGTextContentElement(tagName, document)
 {
-    registerAttributes();
+    static std::once_flag onceFlag;
+    std::call_once(onceFlag, [] {
+        PropertyRegistry::registerProperty<SVGNames::xAttr, &SVGTextPositioningElement::m_x>();
+        PropertyRegistry::registerProperty<SVGNames::yAttr, &SVGTextPositioningElement::m_y>();
+        PropertyRegistry::registerProperty<SVGNames::dxAttr, &SVGTextPositioningElement::m_dx>();
+        PropertyRegistry::registerProperty<SVGNames::dyAttr, &SVGTextPositioningElement::m_dy>();
+        PropertyRegistry::registerProperty<SVGNames::rotateAttr, &SVGTextPositioningElement::m_rotate>();
+    });
 }
 
-void SVGTextPositioningElement::registerAttributes()
-{
-    auto& registry = attributeRegistry();
-    if (!registry.isEmpty())
-        return;
-    registry.registerAttribute<SVGNames::xAttr, &SVGTextPositioningElement::m_x>();
-    registry.registerAttribute<SVGNames::yAttr, &SVGTextPositioningElement::m_y>();
-    registry.registerAttribute<SVGNames::dxAttr, &SVGTextPositioningElement::m_dx>();
-    registry.registerAttribute<SVGNames::dyAttr, &SVGTextPositioningElement::m_dy>();
-    registry.registerAttribute<SVGNames::rotateAttr, &SVGTextPositioningElement::m_rotate>();
-}
-
-void SVGTextPositioningElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void SVGTextPositioningElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == SVGNames::xAttr) {
-        SVGLengthListValues newList;
-        newList.parse(value, LengthModeWidth);
-        m_x.detachAnimatedListWrappers(attributeOwnerProxy(), newList.size());
-        m_x.setValue(WTFMove(newList));
+        m_x->baseVal()->parse(value);
         return;
     }
 
     if (name == SVGNames::yAttr) {
-        SVGLengthListValues newList;
-        newList.parse(value, LengthModeHeight);
-        m_y.detachAnimatedListWrappers(attributeOwnerProxy(), newList.size());
-        m_y.setValue(WTFMove(newList));
+        m_y->baseVal()->parse(value);
         return;
     }
 
     if (name == SVGNames::dxAttr) {
-        SVGLengthListValues newList;
-        newList.parse(value, LengthModeWidth);
-        m_dx.detachAnimatedListWrappers(attributeOwnerProxy(), newList.size());
-        m_dx.setValue(WTFMove(newList));
+        m_dx->baseVal()->parse(value);
         return;
     }
 
     if (name == SVGNames::dyAttr) {
-        SVGLengthListValues newList;
-        newList.parse(value, LengthModeHeight);
-        m_dy.detachAnimatedListWrappers(attributeOwnerProxy(), newList.size());
-        m_dy.setValue(WTFMove(newList));
+        m_dy->baseVal()->parse(value);
         return;
     }
 
     if (name == SVGNames::rotateAttr) {
-        SVGNumberListValues newList;
-        newList.parse(value);
-        m_rotate.detachAnimatedListWrappers(attributeOwnerProxy(), newList.size());
-        m_rotate.setValue(WTFMove(newList));
+        m_rotate->baseVal()->parse(value);
         return;
     }
 
     SVGTextContentElement::parseAttribute(name, value);
 }
 
-void SVGTextPositioningElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomicString& value, MutableStyleProperties& style)
+void SVGTextPositioningElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomString& value, MutableStyleProperties& style)
 {
     if (name == SVGNames::xAttr || name == SVGNames::yAttr)
         return;
     SVGTextContentElement::collectStyleForPresentationAttribute(name, value, style);
 }
@@ -116,11 +94,11 @@
     return SVGTextContentElement::isPresentationAttribute(name);
 }
 
 void SVGTextPositioningElement::svgAttributeChanged(const QualifiedName& attrName)
 {
-    if (isKnownAttribute(attrName)) {
+    if (PropertyRegistry::isKnownAttribute(attrName)) {
         InstanceInvalidationGuard guard(*this);
 
         if (attrName != SVGNames::rotateAttr)
             updateRelativeLengthsInformation();
 
