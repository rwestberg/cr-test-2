diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Scavenger.cpp b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Scavenger.cpp
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Scavenger.cpp
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Scavenger.cpp
@@ -63,30 +63,33 @@
     const char* string;
     std::chrono::steady_clock::time_point start { std::chrono::steady_clock::now() };
     bool printed { false };
 };
 
+DEFINE_STATIC_PER_PROCESS_STORAGE(Scavenger);
+
 Scavenger::Scavenger(std::lock_guard<Mutex>&)
 {
-    BASSERT(!PerProcess<Environment>::get()->isDebugHeapEnabled());
+    BASSERT(!Environment::get()->isDebugHeapEnabled());
 
 #if BOS(DARWIN)
     auto queue = dispatch_queue_create("WebKit Malloc Memory Pressure Handler", DISPATCH_QUEUE_SERIAL);
     m_pressureHandlerDispatchSource = dispatch_source_create(DISPATCH_SOURCE_TYPE_MEMORYPRESSURE, 0, DISPATCH_MEMORYPRESSURE_CRITICAL, queue);
     dispatch_source_set_event_handler(m_pressureHandlerDispatchSource, ^{
         scavenge();
     });
     dispatch_resume(m_pressureHandlerDispatchSource);
     dispatch_release(queue);
 #endif
+    m_waitTime = std::chrono::milliseconds(10);
 
     m_thread = std::thread(&threadEntryPoint, this);
 }
 
 void Scavenger::run()
 {
-    std::lock_guard<Mutex> lock(m_mutex);
+    std::lock_guard<Mutex> lock(mutex());
     runHoldingLock();
 }
 
 void Scavenger::runHoldingLock()
 {
@@ -94,11 +97,11 @@
     m_condition.notify_all();
 }
 
 void Scavenger::runSoon()
 {
-    std::lock_guard<Mutex> lock(m_mutex);
+    std::lock_guard<Mutex> lock(mutex());
     runSoonHoldingLock();
 }
 
 void Scavenger::runSoonHoldingLock()
 {
@@ -114,11 +117,11 @@
     m_isProbablyGrowing = true;
 }
 
 void Scavenger::scheduleIfUnderMemoryPressure(size_t bytes)
 {
-    std::lock_guard<Mutex> lock(m_mutex);
+    std::lock_guard<Mutex> lock(mutex());
     scheduleIfUnderMemoryPressureHoldingLock(bytes);
 }
 
 void Scavenger::scheduleIfUnderMemoryPressureHoldingLock(size_t bytes)
 {
@@ -138,11 +141,11 @@
     runHoldingLock();
 }
 
 void Scavenger::schedule(size_t bytes)
 {
-    std::lock_guard<Mutex> lock(m_mutex);
+    std::lock_guard<Mutex> lock(mutex());
     scheduleIfUnderMemoryPressureHoldingLock(bytes);
 
     if (willRunSoon())
         return;
 
@@ -163,26 +166,20 @@
         dump("phys_footprint", vmInfo.phys_footprint);
         dump("internal+compressed", vmInfo.internal + vmInfo.compressed);
     }
 #endif
 
-    dump("bmalloc-freeable", PerProcess<Scavenger>::get()->freeableMemory());
-    dump("bmalloc-footprint", PerProcess<Scavenger>::get()->footprint());
+    dump("bmalloc-freeable", Scavenger::get()->freeableMemory());
+    dump("bmalloc-footprint", Scavenger::get()->footprint());
 }
 
 std::chrono::milliseconds Scavenger::timeSinceLastFullScavenge()
 {
-    std::unique_lock<Mutex> lock(m_mutex);
+    std::unique_lock<Mutex> lock(mutex());
     return std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - m_lastFullScavengeTime);
 }
 
-std::chrono::milliseconds Scavenger::timeSinceLastPartialScavenge()
-{
-    std::unique_lock<Mutex> lock(m_mutex);
-    return std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - m_lastPartialScavengeTime);
-}
-
 void Scavenger::enableMiniMode()
 {
     m_isInMiniMode = true; // We just store to this racily. The scavenger thread will eventually pick up the right value.
     if (m_state == State::RunSoon)
         run();
@@ -201,17 +198,21 @@
     {
         BulkDecommit decommitter;
 
         {
             PrintTime printTime("\nfull scavenge under lock time");
+            size_t deferredDecommits = 0;
             std::lock_guard<Mutex> lock(Heap::mutex());
             for (unsigned i = numHeaps; i--;) {
                 if (!isActiveHeapKind(static_cast<HeapKind>(i)))
                     continue;
-                PerProcess<PerHeapKind<Heap>>::get()->at(i).scavenge(lock, decommitter);
+                PerProcess<PerHeapKind<Heap>>::get()->at(i).scavenge(lock, decommitter, deferredDecommits);
             }
             decommitter.processEager();
+
+            if (deferredDecommits)
+                m_state = State::RunSoon;
         }
 
         {
             PrintTime printTime("full scavenge lazy decommit time");
             decommitter.processLazy();
@@ -228,11 +229,11 @@
         }
     }
 
     {
         RELEASE_BASSERT(!m_deferredDecommits.size());
-        PerProcess<AllIsoHeaps>::get()->forEach(
+        AllIsoHeaps::get()->forEach(
             [&] (IsoHeapImplBase& heap) {
                 heap.scavenge(m_deferredDecommits);
             });
         IsoHeapImplBase::finishScavenging(m_deferredDecommits);
         m_deferredDecommits.shrink(0);
@@ -243,82 +244,15 @@
         dumpStats();
         fprintf(stderr, "--------------------------------\n");
     }
 
     {
-        std::unique_lock<Mutex> lock(m_mutex);
+        std::unique_lock<Mutex> lock(mutex());
         m_lastFullScavengeTime = std::chrono::steady_clock::now();
     }
 }
 
-void Scavenger::partialScavenge()
-{
-    std::unique_lock<Mutex> lock(m_scavengingMutex);
-
-    if (verbose) {
-        fprintf(stderr, "--------------------------------\n");
-        fprintf(stderr, "--before partial scavenging--\n");
-        dumpStats();
-    }
-
-    {
-        BulkDecommit decommitter;
-        {
-            PrintTime printTime("\npartialScavenge under lock time");
-            std::lock_guard<Mutex> lock(Heap::mutex());
-            for (unsigned i = numHeaps; i--;) {
-                if (!isActiveHeapKind(static_cast<HeapKind>(i)))
-                    continue;
-                Heap& heap = PerProcess<PerHeapKind<Heap>>::get()->at(i);
-                size_t freeableMemory = heap.freeableMemory(lock);
-                if (freeableMemory < 4 * MB)
-                    continue;
-                heap.scavengeToHighWatermark(lock, decommitter);
-            }
-
-            decommitter.processEager();
-        }
-
-        {
-            PrintTime printTime("partialScavenge lazy decommit time");
-            decommitter.processLazy();
-        }
-
-        {
-            PrintTime printTime("partialScavenge mark all as eligible time");
-            std::lock_guard<Mutex> lock(Heap::mutex());
-            for (unsigned i = numHeaps; i--;) {
-                if (!isActiveHeapKind(static_cast<HeapKind>(i)))
-                    continue;
-                Heap& heap = PerProcess<PerHeapKind<Heap>>::get()->at(i);
-                heap.markAllLargeAsEligibile(lock);
-            }
-        }
-    }
-
-    {
-        RELEASE_BASSERT(!m_deferredDecommits.size());
-        PerProcess<AllIsoHeaps>::get()->forEach(
-            [&] (IsoHeapImplBase& heap) {
-                heap.scavengeToHighWatermark(m_deferredDecommits);
-            });
-        IsoHeapImplBase::finishScavenging(m_deferredDecommits);
-        m_deferredDecommits.shrink(0);
-    }
-
-    if (verbose) {
-        fprintf(stderr, "--after partial scavenging--\n");
-        dumpStats();
-        fprintf(stderr, "--------------------------------\n");
-    }
-
-    {
-        std::unique_lock<Mutex> lock(m_mutex);
-        m_lastPartialScavengeTime = std::chrono::steady_clock::now();
-    }
-}
-
 size_t Scavenger::freeableMemory()
 {
     size_t result = 0;
     {
         std::lock_guard<Mutex> lock(Heap::mutex());
@@ -327,30 +261,30 @@
                 continue;
             result += PerProcess<PerHeapKind<Heap>>::get()->at(i).freeableMemory(lock);
         }
     }
 
-    PerProcess<AllIsoHeaps>::get()->forEach(
+    AllIsoHeaps::get()->forEach(
         [&] (IsoHeapImplBase& heap) {
             result += heap.freeableMemory();
         });
 
     return result;
 }
 
 size_t Scavenger::footprint()
 {
-    RELEASE_BASSERT(!PerProcess<Environment>::get()->isDebugHeapEnabled());
+    RELEASE_BASSERT(!Environment::get()->isDebugHeapEnabled());
 
     size_t result = 0;
     for (unsigned i = numHeaps; i--;) {
         if (!isActiveHeapKind(static_cast<HeapKind>(i)))
             continue;
         result += PerProcess<PerHeapKind<Heap>>::get()->at(i).footprint();
     }
 
-    PerProcess<AllIsoHeaps>::get()->forEach(
+    AllIsoHeaps::get()->forEach(
         [&] (IsoHeapImplBase& heap) {
             result += heap.footprint();
         });
 
     return result;
@@ -376,17 +310,17 @@
     // We require any state change while we are sleeping to signal to our
     // condition variable and wake us up.
 
     while (true) {
         if (m_state == State::Sleep) {
-            std::unique_lock<Mutex> lock(m_mutex);
+            std::unique_lock<Mutex> lock(mutex());
             m_condition.wait(lock, [&]() { return m_state != State::Sleep; });
         }
 
         if (m_state == State::RunSoon) {
-            std::unique_lock<Mutex> lock(m_mutex);
-            m_condition.wait_for(lock, std::chrono::milliseconds(m_isInMiniMode ? 200 : 2000), [&]() { return m_state != State::RunSoon; });
+            std::unique_lock<Mutex> lock(mutex());
+            m_condition.wait_for(lock, m_waitTime, [&]() { return m_state != State::RunSoon; });
         }
 
         m_state = State::Sleep;
 
         setSelfQOSClass();
@@ -396,71 +330,35 @@
             fprintf(stderr, "considering running scavenger\n");
             dumpStats();
             fprintf(stderr, "--------------------------------\n");
         }
 
-        enum class ScavengeMode {
-            None,
-            Partial,
-            Full
-        };
+        std::chrono::steady_clock::time_point start { std::chrono::steady_clock::now() };
 
-        size_t freeableMemory = this->freeableMemory();
+        scavenge();
 
-        ScavengeMode scavengeMode = [&] {
-            auto timeSinceLastFullScavenge = this->timeSinceLastFullScavenge();
-            auto timeSinceLastPartialScavenge = this->timeSinceLastPartialScavenge();
-            auto timeSinceLastScavenge = std::min(timeSinceLastPartialScavenge, timeSinceLastFullScavenge);
+        auto timeSpentScavenging = std::chrono::steady_clock::now() - start;
 
-            if (isUnderMemoryPressure() && freeableMemory > 1 * MB && timeSinceLastScavenge > std::chrono::milliseconds(5))
-                return ScavengeMode::Full;
+        if (verbose) {
+            fprintf(stderr, "time spent scavenging %lfms\n",
+                static_cast<double>(std::chrono::duration_cast<std::chrono::microseconds>(timeSpentScavenging).count()) / 1000);
+        }
 
-            if (!m_isProbablyGrowing) {
-                if (timeSinceLastFullScavenge < std::chrono::milliseconds(1000) && !m_isInMiniMode)
-                    return ScavengeMode::Partial;
-                return ScavengeMode::Full;
-            }
+        std::chrono::milliseconds newWaitTime;
 
-            if (m_isInMiniMode) {
-                if (timeSinceLastFullScavenge < std::chrono::milliseconds(200))
-                    return ScavengeMode::Partial;
-                return ScavengeMode::Full;
-            }
-
-#if BCPU(X86_64)
-            auto partialScavengeInterval = std::chrono::milliseconds(12000);
-#else
-            auto partialScavengeInterval = std::chrono::milliseconds(8000);
-#endif
-            if (timeSinceLastScavenge < partialScavengeInterval) {
-                // Rate limit partial scavenges.
-                return ScavengeMode::None;
-            }
-            if (freeableMemory < 25 * MB)
-                return ScavengeMode::None;
-            if (5 * freeableMemory < footprint())
-                return ScavengeMode::None;
-            return ScavengeMode::Partial;
-        }();
-
-        m_isProbablyGrowing = false;
-
-        switch (scavengeMode) {
-        case ScavengeMode::None: {
-            runSoon();
-            break;
-        }
-        case ScavengeMode::Partial: {
-            partialScavenge();
-            runSoon();
-            break;
-        }
-        case ScavengeMode::Full: {
-            scavenge();
-            break;
-        }
+        if (m_isInMiniMode) {
+            timeSpentScavenging *= 50;
+            newWaitTime = std::chrono::duration_cast<std::chrono::milliseconds>(timeSpentScavenging);
+            newWaitTime = std::min(std::max(newWaitTime, std::chrono::milliseconds(25)), std::chrono::milliseconds(500));
+        } else {
+            timeSpentScavenging *= 150;
+            newWaitTime = std::chrono::duration_cast<std::chrono::milliseconds>(timeSpentScavenging);
+            m_waitTime = std::min(std::max(newWaitTime, std::chrono::milliseconds(100)), std::chrono::milliseconds(10000));
         }
+
+        if (verbose)
+            fprintf(stderr, "new wait time %lldms\n", static_cast<long long int>(m_waitTime.count()));
     }
 }
 
 void Scavenger::setThreadName(const char* name)
 {
