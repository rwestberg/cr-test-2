diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/shapes/Shape.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/shapes/Shape.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/shapes/Shape.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/shapes/Shape.cpp
@@ -44,28 +44,28 @@
 namespace WebCore {
 
 static std::unique_ptr<Shape> createInsetShape(const FloatRoundedRect& bounds)
 {
     ASSERT(bounds.rect().width() >= 0 && bounds.rect().height() >= 0);
-    return std::make_unique<BoxShape>(bounds);
+    return makeUnique<BoxShape>(bounds);
 }
 
 static std::unique_ptr<Shape> createCircleShape(const FloatPoint& center, float radius)
 {
     ASSERT(radius >= 0);
-    return std::make_unique<RectangleShape>(FloatRect(center.x() - radius, center.y() - radius, radius*2, radius*2), FloatSize(radius, radius));
+    return makeUnique<RectangleShape>(FloatRect(center.x() - radius, center.y() - radius, radius*2, radius*2), FloatSize(radius, radius));
 }
 
 static std::unique_ptr<Shape> createEllipseShape(const FloatPoint& center, const FloatSize& radii)
 {
     ASSERT(radii.width() >= 0 && radii.height() >= 0);
-    return std::make_unique<RectangleShape>(FloatRect(center.x() - radii.width(), center.y() - radii.height(), radii.width()*2, radii.height()*2), radii);
+    return makeUnique<RectangleShape>(FloatRect(center.x() - radii.width(), center.y() - radii.height(), radii.width()*2, radii.height()*2), radii);
 }
 
 static std::unique_ptr<Shape> createPolygonShape(std::unique_ptr<Vector<FloatPoint>> vertices, WindRule fillRule)
 {
-    return std::make_unique<PolygonShape>(WTFMove(vertices), fillRule);
+    return makeUnique<PolygonShape>(WTFMove(vertices), fillRule);
 }
 
 static inline FloatRect physicalRectToLogical(const FloatRect& rect, float logicalBoxHeight, WritingMode writingMode)
 {
     if (isHorizontalWritingMode(writingMode))
@@ -126,11 +126,11 @@
     case BasicShape::BasicShapePolygonType: {
         const auto& polygon = downcast<BasicShapePolygon>(basicShape);
         const Vector<Length>& values = polygon.values();
         size_t valuesSize = values.size();
         ASSERT(!(valuesSize % 2));
-        std::unique_ptr<Vector<FloatPoint>> vertices = std::make_unique<Vector<FloatPoint>>(valuesSize / 2);
+        std::unique_ptr<Vector<FloatPoint>> vertices = makeUnique<Vector<FloatPoint>>(valuesSize / 2);
         for (unsigned i = 0; i < valuesSize; i += 2) {
             FloatPoint vertex(
                 floatValueForLength(values.at(i), boxWidth),
                 floatValueForLength(values.at(i + 1), boxHeight));
             (*vertices)[i / 2] = physicalPointToLogical(vertex, logicalBoxSize.height(), writingMode);
@@ -177,11 +177,11 @@
 {
     ASSERT(marginR.height() >= 0);
 
     IntRect imageRect = snappedIntRect(imageR);
     IntRect marginRect = snappedIntRect(marginR);
-    auto intervals = std::make_unique<RasterShapeIntervals>(marginRect.height(), -marginRect.y());
+    auto intervals = makeUnique<RasterShapeIntervals>(marginRect.height(), -marginRect.y());
     // FIXME (149420): This buffer should not be unconditionally unaccelerated.
     std::unique_ptr<ImageBuffer> imageBuffer = ImageBuffer::create(imageRect.size(), Unaccelerated);
 
     if (imageBuffer) {
         GraphicsContext& graphicsContext = imageBuffer->context();
@@ -216,25 +216,25 @@
                 }
             }
         }
     }
 
-    auto rasterShape = std::make_unique<RasterShape>(WTFMove(intervals), marginRect.size());
+    auto rasterShape = makeUnique<RasterShape>(WTFMove(intervals), marginRect.size());
     rasterShape->m_writingMode = writingMode;
     rasterShape->m_margin = margin;
-    return WTFMove(rasterShape);
+    return rasterShape;
 }
 
 std::unique_ptr<Shape> Shape::createBoxShape(const RoundedRect& roundedRect, WritingMode writingMode, float margin)
 {
     ASSERT(roundedRect.rect().width() >= 0 && roundedRect.rect().height() >= 0);
 
     FloatRect rect(0, 0, roundedRect.rect().width(), roundedRect.rect().height());
     FloatRoundedRect bounds(rect, roundedRect.radii());
-    auto shape = std::make_unique<BoxShape>(bounds);
+    auto shape = makeUnique<BoxShape>(bounds);
     shape->m_writingMode = writingMode;
     shape->m_margin = margin;
 
-    return WTFMove(shape);
+    return shape;
 }
 
 } // namespace WebCore
