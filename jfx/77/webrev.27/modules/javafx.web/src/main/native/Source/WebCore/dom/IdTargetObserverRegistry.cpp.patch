diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/IdTargetObserverRegistry.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/IdTargetObserverRegistry.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/IdTargetObserverRegistry.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/IdTargetObserverRegistry.cpp
@@ -28,23 +28,23 @@
 
 #include "IdTargetObserver.h"
 
 namespace WebCore {
 
-void IdTargetObserverRegistry::addObserver(const AtomicString& id, IdTargetObserver* observer)
+void IdTargetObserverRegistry::addObserver(const AtomString& id, IdTargetObserver* observer)
 {
     if (id.isEmpty())
         return;
 
     IdToObserverSetMap::AddResult result = m_registry.add(id.impl(), nullptr);
     if (result.isNewEntry)
-        result.iterator->value = std::make_unique<ObserverSet>();
+        result.iterator->value = makeUnique<ObserverSet>();
 
     result.iterator->value->add(observer);
 }
 
-void IdTargetObserverRegistry::removeObserver(const AtomicString& id, IdTargetObserver* observer)
+void IdTargetObserverRegistry::removeObserver(const AtomString& id, IdTargetObserver* observer)
 {
     if (id.isEmpty() || m_registry.isEmpty())
         return;
 
     IdToObserverSetMap::iterator iter = m_registry.find(id.impl());
@@ -53,11 +53,11 @@
     set->remove(observer);
     if (set->isEmpty() && set != m_notifyingObserversInSet)
         m_registry.remove(iter);
 }
 
-void IdTargetObserverRegistry::notifyObserversInternal(const AtomicStringImpl& id)
+void IdTargetObserverRegistry::notifyObserversInternal(const AtomStringImpl& id)
 {
     ASSERT(!m_registry.isEmpty());
 
     m_notifyingObserversInSet = m_registry.get(&id);
     if (!m_notifyingObserversInSet)
