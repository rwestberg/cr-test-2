diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoHeap.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoHeap.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoHeap.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoHeap.h
@@ -42,16 +42,19 @@
 
 template<typename Type>
 struct IsoHeap {
     typedef IsoConfig<sizeof(Type)> Config;
 
+    constexpr IsoHeap() = default;
+
     void* allocate();
     void* tryAllocate();
     void deallocate(void* p);
 
     void scavenge();
 
+    void initialize();
     bool isInitialized();
 
     unsigned allocatorOffset() { return m_allocatorOffsetPlusOne - 1; }
     void setAllocatorOffset(unsigned value) { m_allocatorOffsetPlusOne = value + 1; }
 
@@ -59,27 +62,28 @@
     void setDeallocatorOffset(unsigned value) { m_deallocatorOffsetPlusOne = value + 1; }
 
     IsoHeapImpl<Config>& impl();
 
     Mutex m_initializationLock;
-    unsigned m_allocatorOffsetPlusOne;
-    unsigned m_deallocatorOffsetPlusOne;
-    IsoHeapImpl<Config>* m_impl;
+    unsigned m_allocatorOffsetPlusOne { 0 };
+    unsigned m_deallocatorOffsetPlusOne { 0 };
+    IsoHeapImpl<Config>* m_impl { nullptr };
 };
 
 // Use this together with MAKE_BISO_MALLOCED_IMPL.
-#define MAKE_BISO_MALLOCED(isoType) \
+#define MAKE_BISO_MALLOCED(isoType, exportMacro) \
 public: \
-    static ::bmalloc::api::IsoHeap<isoType>& bisoHeap(); \
+    static exportMacro ::bmalloc::api::IsoHeap<isoType>& bisoHeap(); \
     \
     void* operator new(size_t, void* p) { return p; } \
     void* operator new[](size_t, void* p) { return p; } \
     \
-    void* operator new(size_t size);\
-    void operator delete(void* p);\
+    exportMacro void* operator new(size_t size);\
+    exportMacro void operator delete(void* p);\
     \
     void* operator new[](size_t size) = delete; \
     void operator delete[](void* p) = delete; \
+using webkitFastMalloced = int; \
 private: \
-typedef int __makeBisoMallocedMacroSemicolonifier
+using __makeBisoMallocedMacroSemicolonifier = int
 
 } } // namespace bmalloc::api
