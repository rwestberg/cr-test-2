diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeMediaSourceSettings.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeMediaSourceSettings.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeMediaSourceSettings.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeMediaSourceSettings.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013-2015 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  *
@@ -32,10 +32,11 @@
 
 #if ENABLE(MEDIA_STREAM)
 #include "RealtimeMediaSourceSettings.h"
 
 #include <wtf/NeverDestroyed.h>
+#include <wtf/text/StringBuilder.h>
 
 namespace WebCore {
 
 String RealtimeMediaSourceSettings::facingMode(RealtimeMediaSourceSettings::VideoFacingMode mode)
 {
@@ -67,10 +68,69 @@
         return RealtimeMediaSourceSettings::VideoFacingMode::Right;
 
     return RealtimeMediaSourceSettings::Unknown;
 }
 
+String RealtimeMediaSourceSettings::convertFlagsToString(const OptionSet<RealtimeMediaSourceSettings::Flag> flags)
+{
+    StringBuilder builder;
+
+    builder.append("[ ");
+    for (auto flag : flags) {
+        if (!builder.isEmpty())
+            builder.append(", ");
+
+        switch (flag) {
+        case RealtimeMediaSourceSettings::Width:
+            builder.append("Width");
+            break;
+        case RealtimeMediaSourceSettings::Height:
+            builder.append("Height");
+            break;
+        case RealtimeMediaSourceSettings::AspectRatio:
+            builder.append("AspectRatio");
+            break;
+        case RealtimeMediaSourceSettings::FrameRate:
+            builder.append("FrameRate");
+            break;
+        case RealtimeMediaSourceSettings::FacingMode:
+            builder.append("FacingMode");
+            break;
+        case RealtimeMediaSourceSettings::Volume:
+            builder.append("Volume");
+            break;
+        case RealtimeMediaSourceSettings::SampleRate:
+            builder.append("SampleRate");
+            break;
+        case RealtimeMediaSourceSettings::SampleSize:
+            builder.append("SampleSize");
+            break;
+        case RealtimeMediaSourceSettings::EchoCancellation:
+            builder.append("EchoCancellation");
+            break;
+        case RealtimeMediaSourceSettings::DeviceId:
+            builder.append("DeviceId");
+            break;
+        case RealtimeMediaSourceSettings::GroupId:
+            builder.append("GroupId");
+            break;
+        case RealtimeMediaSourceSettings::Label:
+            builder.append("Label");
+            break;
+        case RealtimeMediaSourceSettings::DisplaySurface:
+            builder.append("DisplaySurface");
+            break;
+        case RealtimeMediaSourceSettings::LogicalSurface:
+            builder.append("LogicalSurface");
+            break;
+        }
+    }
+    builder.append(" ]");
+
+    return builder.toString();
+}
+
 OptionSet<RealtimeMediaSourceSettings::Flag> RealtimeMediaSourceSettings::difference(const RealtimeMediaSourceSettings& that) const
 {
     OptionSet<RealtimeMediaSourceSettings::Flag> difference;
 
     if (width() != that.width())
@@ -103,9 +163,26 @@
         difference.add(RealtimeMediaSourceSettings::LogicalSurface);
 
     return difference;
 }
 
+String convertEnumerationToString(RealtimeMediaSourceSettings::VideoFacingMode enumerationValue)
+{
+    static const NeverDestroyed<String> values[] = {
+        MAKE_STATIC_STRING_IMPL("Unknown"),
+        MAKE_STATIC_STRING_IMPL("User"),
+        MAKE_STATIC_STRING_IMPL("Environment"),
+        MAKE_STATIC_STRING_IMPL("Left"),
+        MAKE_STATIC_STRING_IMPL("Right"),
+    };
+    static_assert(static_cast<size_t>(RealtimeMediaSourceSettings::VideoFacingMode::Unknown) == 0, "RealtimeMediaSourceSettings::VideoFacingMode::Unknown is not 0 as expected");
+    static_assert(static_cast<size_t>(RealtimeMediaSourceSettings::VideoFacingMode::User) == 1, "RealtimeMediaSourceSettings::VideoFacingMode::User is not 1 as expected");
+    static_assert(static_cast<size_t>(RealtimeMediaSourceSettings::VideoFacingMode::Environment) == 2, "RealtimeMediaSourceSettings::VideoFacingMode::Environment is not 2 as expected");
+    static_assert(static_cast<size_t>(RealtimeMediaSourceSettings::VideoFacingMode::Left) == 3, "RealtimeMediaSourceSettings::VideoFacingMode::Left is not 3 as expected");
+    static_assert(static_cast<size_t>(RealtimeMediaSourceSettings::VideoFacingMode::Right) == 4, "RealtimeMediaSourceSettings::VideoFacingMode::Right is not 4 as expected");
+    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
+    return values[static_cast<size_t>(enumerationValue)];
+}
 
 } // namespace WebCore
 
 #endif // ENABLE(MEDIA_STREAM)
