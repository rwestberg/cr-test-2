diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/UnalignedAccess.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/UnalignedAccess.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/UnalignedAccess.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/UnalignedAccess.h
@@ -29,22 +29,22 @@
 #include <wtf/Platform.h>
 #include <wtf/StdLibExtras.h>
 
 namespace WTF {
 
-template<typename IntegralType>
-inline IntegralType unalignedLoad(const void* pointer)
+template<typename Type>
+inline Type unalignedLoad(const void* pointer)
 {
-    static_assert(std::is_integral<IntegralType>::value || std::is_pointer<IntegralType>::value, "");
-    IntegralType result { };
-    memcpy(&result, pointer, sizeof(IntegralType));
+    static_assert(std::is_trivial<Type>::value, "");
+    Type result { };
+    memcpy(&result, pointer, sizeof(Type));
     return result;
 }
 
-template<typename IntegralType>
-inline void unalignedStore(void* pointer, IntegralType value)
+template<typename Type>
+inline void unalignedStore(void* pointer, Type value)
 {
-    static_assert(std::is_integral<IntegralType>::value || std::is_pointer<IntegralType>::value, "");
-    memcpy(pointer, &value, sizeof(IntegralType));
+    static_assert(std::is_trivial<Type>::value, "");
+    memcpy(pointer, &value, sizeof(Type));
 }
 
 } // namespace WTF
