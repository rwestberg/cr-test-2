diff a/modules/javafx.web/src/main/native/Source/WebCore/page/NavigatorBase.h b/modules/javafx.web/src/main/native/Source/WebCore/page/NavigatorBase.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/NavigatorBase.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/NavigatorBase.h
@@ -23,29 +23,31 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
 #pragma once
 
+#include "ContextDestructionObserver.h"
 #include "ExceptionOr.h"
 #include <wtf/Forward.h>
 #include <wtf/RefCounted.h>
 #include <wtf/UniqueRef.h>
 #include <wtf/Vector.h>
+#include <wtf/WeakPtr.h>
 
 namespace WebCore {
 
 class ScriptExecutionContext;
 class ServiceWorkerContainer;
 
-class NavigatorBase : public RefCounted<NavigatorBase> {
+class NavigatorBase : public RefCounted<NavigatorBase>, public ContextDestructionObserver, public CanMakeWeakPtr<NavigatorBase> {
 public:
     virtual ~NavigatorBase();
 
     static String appName();
     String appVersion() const;
     virtual const String& userAgent() const = 0;
-    virtual const String& platform() const;
+    virtual String platform() const;
 
     static String appCodeName();
     static String product();
     static String productSub();
     static String vendor();
@@ -59,14 +61,15 @@
 protected:
     explicit NavigatorBase(ScriptExecutionContext*);
 
 #if ENABLE(SERVICE_WORKER)
 public:
+    ServiceWorkerContainer* serviceWorkerIfExists();
     ServiceWorkerContainer& serviceWorker();
     ExceptionOr<ServiceWorkerContainer&> serviceWorker(ScriptExecutionContext&);
 
 private:
-    UniqueRef<ServiceWorkerContainer> m_serviceWorkerContainer;
+    std::unique_ptr<ServiceWorkerContainer> m_serviceWorkerContainer;
 #endif
 };
 
 } // namespace WebCore
