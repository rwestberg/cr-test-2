diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/Opcode.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/Opcode.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/Opcode.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/Opcode.cpp
@@ -52,10 +52,22 @@
 #undef OPCODE_NAME_ENTRY
 };
 
 #if ENABLE(OPCODE_STATS)
 
+inline const char* padOpcodeName(OpcodeID op, unsigned width)
+{
+    auto padding = "                                ";
+    auto paddingLength = strlen(padding);
+    auto opcodeNameLength = strlen(opcodeNames[op]);
+    if (opcodeNameLength >= width)
+        return "";
+    if (paddingLength + opcodeNameLength < width)
+        return padding;
+    return &padding[paddingLength + opcodeNameLength - width];
+}
+
 long long OpcodeStats::opcodeCounts[numOpcodeIDs];
 long long OpcodeStats::opcodePairCounts[numOpcodeIDs][numOpcodeIDs];
 int OpcodeStats::lastOpcode = -1;
 
 static OpcodeStats logger;
@@ -83,13 +95,13 @@
         return 0;
 }
 
 static int compareOpcodePairIndices(const void* left, const void* right)
 {
-    std::pair<int, int> leftPair = *(pair<int, int>*) left;
+    std::pair<int, int> leftPair = *(std::pair<int, int>*) left;
     long long leftValue = OpcodeStats::opcodePairCounts[leftPair.first][leftPair.second];
-    std::pair<int, int> rightPair = *(pair<int, int>*) right;
+    std::pair<int, int> rightPair = *(std::pair<int, int>*) right;
     long long rightValue = OpcodeStats::opcodePairCounts[rightPair.first][rightPair.second];
 
     if (leftValue < rightValue)
         return 1;
     else if (leftValue > rightValue)
@@ -189,19 +201,19 @@
     lastOpcode = -1;
 }
 
 #endif
 
-static unsigned metadataSizes[] = {
+static const unsigned metadataSizes[] = {
 
 #define METADATA_SIZE(size) size,
     FOR_EACH_BYTECODE_METADATA_SIZE(METADATA_SIZE)
 #undef METADATA_SIZE
 
 };
 
-static unsigned metadataAlignments[] = {
+static const unsigned metadataAlignments[] = {
 
 #define METADATA_ALIGNMENT(size) size,
     FOR_EACH_BYTECODE_METADATA_ALIGNMENT(METADATA_ALIGNMENT)
 #undef METADATA_ALIGNMENT
 
