diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/ICStats.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/ICStats.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/ICStats.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/ICStats.h
@@ -77,18 +77,33 @@
 #define ICEVENT_KIND_DECLARATION(name) name,
         FOR_EACH_ICEVENT_KIND(ICEVENT_KIND_DECLARATION)
 #undef ICEVENT_KIND_DECLARATION
     };
 
+    enum PropertyLocation {
+        Unknown,
+        BaseObject,
+        ProtoLookup
+    };
+
     ICEvent()
     {
     }
 
     ICEvent(Kind kind, const ClassInfo* classInfo, const Identifier propertyName)
         : m_kind(kind)
         , m_classInfo(classInfo)
         , m_propertyName(propertyName)
+        , m_propertyLocation(Unknown)
+    {
+    }
+
+    ICEvent(Kind kind, const ClassInfo* classInfo, const Identifier propertyName, bool isBaseProperty)
+        : m_kind(kind)
+        , m_classInfo(classInfo)
+        , m_propertyName(propertyName)
+        , m_propertyLocation(isBaseProperty ? BaseObject : ProtoLookup)
     {
     }
 
     ICEvent(WTF::HashTableDeletedValueType)
         : m_kind(OperationGetById)
@@ -121,11 +136,13 @@
     const ClassInfo* classInfo() const { return m_classInfo; }
     const Identifier& propertyName() const { return m_propertyName; }
 
     unsigned hash() const
     {
-        return m_kind + WTF::PtrHash<const ClassInfo*>::hash(m_classInfo) + StringHash::hash(m_propertyName.string());
+        if (m_propertyName.isNull())
+            return m_kind + m_propertyLocation + WTF::PtrHash<const ClassInfo*>::hash(m_classInfo);
+        return m_kind + m_propertyLocation + WTF::PtrHash<const ClassInfo*>::hash(m_classInfo) + StringHash::hash(m_propertyName.string());
     }
 
     bool isHashTableDeletedValue() const
     {
         return *this == ICEvent(WTF::HashTableDeletedValue);
@@ -138,10 +155,11 @@
 private:
 
     Kind m_kind { InvalidKind };
     const ClassInfo* m_classInfo { nullptr };
     Identifier m_propertyName;
+    PropertyLocation m_propertyLocation;
 };
 
 struct ICEventHash {
     static unsigned hash(const ICEvent& key) { return key.hash(); }
     static bool equal(const ICEvent& a, const ICEvent& b) { return a == b; }
