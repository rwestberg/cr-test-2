diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/MemoryBackingStoreTransaction.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/MemoryBackingStoreTransaction.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/MemoryBackingStoreTransaction.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/MemoryBackingStoreTransaction.cpp
@@ -39,22 +39,22 @@
 namespace WebCore {
 namespace IDBServer {
 
 std::unique_ptr<MemoryBackingStoreTransaction> MemoryBackingStoreTransaction::create(MemoryIDBBackingStore& backingStore, const IDBTransactionInfo& info)
 {
-    return std::make_unique<MemoryBackingStoreTransaction>(backingStore, info);
+    return makeUnique<MemoryBackingStoreTransaction>(backingStore, info);
 }
 
 MemoryBackingStoreTransaction::MemoryBackingStoreTransaction(MemoryIDBBackingStore& backingStore, const IDBTransactionInfo& info)
     : m_backingStore(backingStore)
     , m_info(info)
 {
     if (m_info.mode() == IDBTransactionMode::Versionchange) {
         IDBDatabaseInfo info;
         auto error = m_backingStore.getOrEstablishDatabaseInfo(info);
         if (error.isNull())
-            m_originalDatabaseInfo = std::make_unique<IDBDatabaseInfo>(info);
+            m_originalDatabaseInfo = makeUnique<IDBDatabaseInfo>(info);
     }
 }
 
 MemoryBackingStoreTransaction::~MemoryBackingStoreTransaction()
 {
@@ -193,11 +193,11 @@
     if (m_clearedKeyValueMaps.contains(&objectStore))
         return;
 
     auto originalAddResult = m_originalValues.add(&objectStore, nullptr);
     if (originalAddResult.isNewEntry)
-        originalAddResult.iterator->value = std::make_unique<KeyValueMap>();
+        originalAddResult.iterator->value = makeUnique<KeyValueMap>();
 
     auto* map = originalAddResult.iterator->value.get();
 
     auto addResult = map->add(key, ThreadSafeDataBuffer());
     if (!addResult.isNewEntry)
