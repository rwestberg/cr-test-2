diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDOMAgent.h b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDOMAgent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDOMAgent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDOMAgent.h
@@ -37,11 +37,11 @@
 #include <wtf/HashMap.h>
 #include <wtf/HashSet.h>
 #include <wtf/JSONValues.h>
 #include <wtf/RefPtr.h>
 #include <wtf/Vector.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 namespace Inspector {
 class InjectedScriptManager;
 }
 
@@ -61,125 +61,116 @@
 class Exception;
 class FloatQuad;
 class Frame;
 class InspectorHistory;
 class InspectorOverlay;
-class InspectorPageAgent;
 #if ENABLE(VIDEO)
 class HTMLMediaElement;
 #endif
 class HitTestResult;
 class Node;
+class Page;
 class PseudoElement;
 class RevalidateStyleAttributeTask;
 class ShadowRoot;
 
 struct HighlightConfig;
 
 typedef String ErrorString;
 
-struct EventListenerInfo {
-    EventListenerInfo(Node* node, const AtomicString& eventType, EventListenerVector&& eventListenerVector)
-        : node(node)
-        , eventType(eventType)
-        , eventListenerVector(WTFMove(eventListenerVector))
-    {
-    }
-
-    Node* node;
-    const AtomicString eventType;
-    const EventListenerVector eventListenerVector;
-};
-
 class InspectorDOMAgent final : public InspectorAgentBase, public Inspector::DOMBackendDispatcherHandler {
     WTF_MAKE_NONCOPYABLE(InspectorDOMAgent);
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    struct DOMListener {
-        virtual ~DOMListener() = default;
-        virtual void didRemoveDOMNode(Node&, int nodeId) = 0;
-        virtual void didModifyDOMAttr(Element&) = 0;
-    };
-
-    InspectorDOMAgent(WebAgentContext&, InspectorPageAgent*, InspectorOverlay*);
+    InspectorDOMAgent(PageAgentContext&, InspectorOverlay*);
     virtual ~InspectorDOMAgent();
 
     static String toErrorString(ExceptionCode);
     static String toErrorString(Exception&&);
 
-    void didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*) override;
-    void willDestroyFrontendAndBackend(Inspector::DisconnectReason) override;
+    static String documentURLString(Document*);
 
-    Vector<Document*> documents();
-    void reset();
+    // We represent embedded doms as a part of the same hierarchy. Hence we treat children of frame owners differently.
+    // We also skip whitespace text nodes conditionally. Following methods encapsulate these specifics.
+    static Node* innerFirstChild(Node*);
+    static Node* innerNextSibling(Node*);
+    static Node* innerPreviousSibling(Node*);
+    static unsigned innerChildNodeCount(Node*);
+    static Node* innerParentNode(Node*);
 
-    // Methods called from the frontend for DOM nodes inspection.
-    void querySelector(ErrorString&, int nodeId, const String& selectors, int* elementId) override;
-    void querySelectorAll(ErrorString&, int nodeId, const String& selectors, RefPtr<JSON::ArrayOf<int>>& result) override;
-    void getDocument(ErrorString&, RefPtr<Inspector::Protocol::DOM::Node>& root) override;
-    void requestChildNodes(ErrorString&, int nodeId, const int* depth) override;
-    void setAttributeValue(ErrorString&, int elementId, const String& name, const String& value) override;
-    void setAttributesAsText(ErrorString&, int elementId, const String& text, const String* name) override;
-    void removeAttribute(ErrorString&, int elementId, const String& name) override;
-    void removeNode(ErrorString&, int nodeId) override;
-    void setNodeName(ErrorString&, int nodeId, const String& name, int* newId) override;
-    void getOuterHTML(ErrorString&, int nodeId, WTF::String* outerHTML) override;
-    void setOuterHTML(ErrorString&, int nodeId, const String& outerHTML) override;
-    void insertAdjacentHTML(ErrorString&, int nodeId, const String& position, const String& html) override;
-    void setNodeValue(ErrorString&, int nodeId, const String& value) override;
-    void getSupportedEventNames(ErrorString&, RefPtr<JSON::ArrayOf<String>>& eventNames) override;
-    void getEventListenersForNode(ErrorString&, int nodeId, const WTF::String* objectGroup, RefPtr<JSON::ArrayOf<Inspector::Protocol::DOM::EventListener>>& listenersArray) override;
-    void setEventListenerDisabled(ErrorString&, int eventListenerId, bool disabled) override;
-    void setBreakpointForEventListener(ErrorString&, int eventListenerId) override;
-    void removeBreakpointForEventListener(ErrorString&, int eventListenerId) override;
-    void getAccessibilityPropertiesForNode(ErrorString&, int nodeId, RefPtr<Inspector::Protocol::DOM::AccessibilityProperties>& axProperties) override;
-    void performSearch(ErrorString&, const String& whitespaceTrimmedQuery, const JSON::Array* nodeIds, String* searchId, int* resultCount) override;
-    void getSearchResults(ErrorString&, const String& searchId, int fromIndex, int toIndex, RefPtr<JSON::ArrayOf<int>>&) override;
-    void discardSearchResults(ErrorString&, const String& searchId) override;
-    void resolveNode(ErrorString&, int nodeId, const String* objectGroup, RefPtr<Inspector::Protocol::Runtime::RemoteObject>& result) override;
-    void getAttributes(ErrorString&, int nodeId, RefPtr<JSON::ArrayOf<String>>& result) override;
-    void setInspectModeEnabled(ErrorString&, bool enabled, const JSON::Object* highlightConfig) override;
-    void requestNode(ErrorString&, const String& objectId, int* nodeId) override;
-    void pushNodeByPathToFrontend(ErrorString&, const String& path, int* nodeId) override;
-    void hideHighlight(ErrorString&) override;
-    void highlightRect(ErrorString&, int x, int y, int width, int height, const JSON::Object* color, const JSON::Object* outlineColor, const bool* usePageCoordinates) override;
-    void highlightQuad(ErrorString&, const JSON::Array& quad, const JSON::Object* color, const JSON::Object* outlineColor, const bool* usePageCoordinates) override;
-    void highlightSelector(ErrorString&, const JSON::Object& highlightConfig, const String& selectorString, const String* frameId) override;
-    void highlightNode(ErrorString&, const JSON::Object& highlightConfig, const int* nodeId, const String* objectId) override;
-    void highlightNodeList(ErrorString&, const JSON::Array& nodeIds, const JSON::Object& highlightConfig) override;
-    void highlightFrame(ErrorString&, const String& frameId, const JSON::Object* color, const JSON::Object* outlineColor) override;
-    void moveTo(ErrorString&, int nodeId, int targetNodeId, const int* anchorNodeId, int* newNodeId) override;
-    void undo(ErrorString&) override;
-    void redo(ErrorString&) override;
-    void markUndoableState(ErrorString&) override;
-    void focus(ErrorString&, int nodeId) override;
-    void setInspectedNode(ErrorString&, int nodeId) override;
-
-    void getEventListeners(Node*, Vector<EventListenerInfo>& listenersArray, bool includeAncestors);
+    static Node* scriptValueAsNode(JSC::JSValue);
+    static JSC::JSValue nodeAsScriptValue(JSC::ExecState&, Node*);
 
+    // InspectorAgentBase
+    void didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*);
+    void willDestroyFrontendAndBackend(Inspector::DisconnectReason);
+
+    // DOMBackendDispatcherHandler
+    void querySelector(ErrorString&, int nodeId, const String& selectors, int* elementId);
+    void querySelectorAll(ErrorString&, int nodeId, const String& selectors, RefPtr<JSON::ArrayOf<int>>& result);
+    void getDocument(ErrorString&, RefPtr<Inspector::Protocol::DOM::Node>& root);
+    void requestChildNodes(ErrorString&, int nodeId, const int* depth);
+    void setAttributeValue(ErrorString&, int elementId, const String& name, const String& value);
+    void setAttributesAsText(ErrorString&, int elementId, const String& text, const String* name);
+    void removeAttribute(ErrorString&, int elementId, const String& name);
+    void removeNode(ErrorString&, int nodeId);
+    void setNodeName(ErrorString&, int nodeId, const String& name, int* newId);
+    void getOuterHTML(ErrorString&, int nodeId, WTF::String* outerHTML);
+    void setOuterHTML(ErrorString&, int nodeId, const String& outerHTML);
+    void insertAdjacentHTML(ErrorString&, int nodeId, const String& position, const String& html);
+    void setNodeValue(ErrorString&, int nodeId, const String& value);
+    void getSupportedEventNames(ErrorString&, RefPtr<JSON::ArrayOf<String>>& eventNames);
+    void getDataBindingsForNode(ErrorString&, int nodeId, RefPtr<JSON::ArrayOf<Inspector::Protocol::DOM::DataBinding>>& dataArray);
+    void getAssociatedDataForNode(ErrorString&, int nodeId, Optional<String>& associatedData);
+    void getEventListenersForNode(ErrorString&, int nodeId, RefPtr<JSON::ArrayOf<Inspector::Protocol::DOM::EventListener>>& listenersArray);
+    void setEventListenerDisabled(ErrorString&, int eventListenerId, bool disabled);
+    void setBreakpointForEventListener(ErrorString&, int eventListenerId);
+    void removeBreakpointForEventListener(ErrorString&, int eventListenerId);
+    void getAccessibilityPropertiesForNode(ErrorString&, int nodeId, RefPtr<Inspector::Protocol::DOM::AccessibilityProperties>& axProperties);
+    void performSearch(ErrorString&, const String& query, const JSON::Array* nodeIds, const bool* caseSensitive, String* searchId, int* resultCount);
+    void getSearchResults(ErrorString&, const String& searchId, int fromIndex, int toIndex, RefPtr<JSON::ArrayOf<int>>&);
+    void discardSearchResults(ErrorString&, const String& searchId);
+    void resolveNode(ErrorString&, int nodeId, const String* objectGroup, RefPtr<Inspector::Protocol::Runtime::RemoteObject>& result);
+    void getAttributes(ErrorString&, int nodeId, RefPtr<JSON::ArrayOf<String>>& result);
+    void setInspectModeEnabled(ErrorString&, bool enabled, const JSON::Object* highlightConfig, const bool* showRulers);
+    void requestNode(ErrorString&, const String& objectId, int* nodeId);
+    void pushNodeByPathToFrontend(ErrorString&, const String& path, int* nodeId);
+    void hideHighlight(ErrorString&);
+    void highlightRect(ErrorString&, int x, int y, int width, int height, const JSON::Object* color, const JSON::Object* outlineColor, const bool* usePageCoordinates);
+    void highlightQuad(ErrorString&, const JSON::Array& quad, const JSON::Object* color, const JSON::Object* outlineColor, const bool* usePageCoordinates);
+    void highlightSelector(ErrorString&, const JSON::Object& highlightConfig, const String& selectorString, const String* frameId);
+    void highlightNode(ErrorString&, const JSON::Object& highlightConfig, const int* nodeId, const String* objectId);
+    void highlightNodeList(ErrorString&, const JSON::Array& nodeIds, const JSON::Object& highlightConfig);
+    void highlightFrame(ErrorString&, const String& frameId, const JSON::Object* color, const JSON::Object* outlineColor);
+    void moveTo(ErrorString&, int nodeId, int targetNodeId, const int* anchorNodeId, int* newNodeId);
+    void undo(ErrorString&);
+    void redo(ErrorString&);
+    void markUndoableState(ErrorString&);
+    void focus(ErrorString&, int nodeId);
+    void setInspectedNode(ErrorString&, int nodeId);
 
     // InspectorInstrumentation
     int identifierForNode(Node&);
     void addEventListenersToNode(Node&);
     void didInsertDOMNode(Node&);
     void didRemoveDOMNode(Node&);
-    void willModifyDOMAttr(Element&, const AtomicString& oldValue, const AtomicString& newValue);
-    void didModifyDOMAttr(Element&, const AtomicString& name, const AtomicString& value);
-    void didRemoveDOMAttr(Element&, const AtomicString& name);
+    void willModifyDOMAttr(Element&, const AtomString& oldValue, const AtomString& newValue);
+    void didModifyDOMAttr(Element&, const AtomString& name, const AtomString& value);
+    void didRemoveDOMAttr(Element&, const AtomString& name);
     void characterDataModified(CharacterData&);
-    void didInvalidateStyleAttr(Node&);
+    void didInvalidateStyleAttr(Element&);
     void didPushShadowRoot(Element& host, ShadowRoot&);
     void willPopShadowRoot(Element& host, ShadowRoot&);
     void didChangeCustomElementState(Element&);
     bool handleTouchEvent(Node&);
     void didCommitLoad(Document*);
     void frameDocumentUpdated(Frame&);
     void pseudoElementCreated(PseudoElement&);
     void pseudoElementDestroyed(PseudoElement&);
     void didAddEventListener(EventTarget&);
-    void willRemoveEventListener(EventTarget&, const AtomicString& eventType, EventListener&, bool capture);
-    bool isEventListenerDisabled(EventTarget&, const AtomicString& eventType, EventListener&, bool capture);
+    void willRemoveEventListener(EventTarget&, const AtomString& eventType, EventListener&, bool capture);
+    bool isEventListenerDisabled(EventTarget&, const AtomString& eventType, EventListener&, bool capture);
     void eventDidResetAfterDispatch(const Event&);
 
     // Callbacks that don't directly correspond to an instrumentation entry point.
     void setDocument(Document*);
     void releaseDanglingNodes();
@@ -187,50 +178,35 @@
     void styleAttributeInvalidated(const Vector<Element*>& elements);
 
     int pushNodeToFrontend(ErrorString&, int documentNodeId, Node*);
     Node* nodeForId(int nodeId);
     int boundNodeId(const Node*);
-    void setDOMListener(DOMListener*);
-
-    static String documentURLString(Document*);
 
     RefPtr<Inspector::Protocol::Runtime::RemoteObject> resolveNode(Node*, const String& objectGroup);
     bool handleMousePress();
     void mouseDidMoveOverElement(const HitTestResult&, unsigned modifierFlags);
     void inspect(Node*);
     void focusNode();
 
     InspectorHistory* history() { return m_history.get(); }
-
-    // We represent embedded doms as a part of the same hierarchy. Hence we treat children of frame owners differently.
-    // We also skip whitespace text nodes conditionally. Following methods encapsulate these specifics.
-    static Node* innerFirstChild(Node*);
-    static Node* innerNextSibling(Node*);
-    static Node* innerPreviousSibling(Node*);
-    static unsigned innerChildNodeCount(Node*);
-    static Node* innerParentNode(Node*);
+    Vector<Document*> documents();
+    void reset();
 
     Node* assertNode(ErrorString&, int nodeId);
     Element* assertElement(ErrorString&, int nodeId);
     Document* assertDocument(ErrorString&, int nodeId);
 
-    static Node* scriptValueAsNode(JSC::JSValue);
-    static JSC::JSValue nodeAsScriptValue(JSC::ExecState&, Node*);
-
-    // Methods called from other agents.
-    InspectorPageAgent* pageAgent() { return m_pageAgent; }
-
-    bool hasBreakpointForEventListener(EventTarget&, const AtomicString& eventType, EventListener&, bool capture);
-    int idForEventListener(EventTarget&, const AtomicString& eventType, EventListener&, bool capture);
+    bool hasBreakpointForEventListener(EventTarget&, const AtomString& eventType, EventListener&, bool capture);
+    int idForEventListener(EventTarget&, const AtomString& eventType, EventListener&, bool capture);
 
 private:
 #if ENABLE(VIDEO)
     void mediaMetricsTimerFired();
 #endif
 
     void highlightMousedOverNode();
-    void setSearchingForNode(ErrorString&, bool enabled, const JSON::Object* highlightConfig);
+    void setSearchingForNode(ErrorString&, bool enabled, const JSON::Object* highlightConfig, bool showRulers);
     std::unique_ptr<HighlightConfig> highlightConfigFromInspectorObject(ErrorString&, const JSON::Object* highlightInspectorObject);
 
     // Node-related methods.
     typedef HashMap<RefPtr<Node>, int> NodeToIdMap;
     int bind(Node*, NodeToIdMap*);
@@ -244,11 +220,11 @@
 
     Ref<Inspector::Protocol::DOM::Node> buildObjectForNode(Node*, int depth, NodeToIdMap*);
     Ref<JSON::ArrayOf<String>> buildArrayForElementAttributes(Element*);
     Ref<JSON::ArrayOf<Inspector::Protocol::DOM::Node>> buildArrayForContainerChildren(Node* container, int depth, NodeToIdMap* nodesMap);
     RefPtr<JSON::ArrayOf<Inspector::Protocol::DOM::Node>> buildArrayForPseudoElements(const Element&, NodeToIdMap* nodesMap);
-    Ref<Inspector::Protocol::DOM::EventListener> buildObjectForEventListener(const RegisteredEventListener&, int identifier, const AtomicString& eventType, Node*, const String* objectGroupId, bool disabled, bool hasBreakpoint);
+    Ref<Inspector::Protocol::DOM::EventListener> buildObjectForEventListener(const RegisteredEventListener&, int identifier, EventTarget&, const AtomString& eventType, bool disabled, bool hasBreakpoint);
     RefPtr<Inspector::Protocol::DOM::AccessibilityProperties> buildObjectForAccessibilityProperties(Node*);
     void processAccessibilityChildren(AccessibilityObject&, JSON::ArrayOf<int>&);
 
     Node* nodeForPath(const String& path);
     Node* nodeForObjectId(const String& objectId);
@@ -258,14 +234,12 @@
     void innerHighlightQuad(std::unique_ptr<FloatQuad>, const JSON::Object* color, const JSON::Object* outlineColor, const bool* usePageCoordinates);
 
     Inspector::InjectedScriptManager& m_injectedScriptManager;
     std::unique_ptr<Inspector::DOMFrontendDispatcher> m_frontendDispatcher;
     RefPtr<Inspector::DOMBackendDispatcher> m_backendDispatcher;
-    InspectorPageAgent* m_pageAgent { nullptr };
-
+    Page& m_inspectedPage;
     InspectorOverlay* m_overlay { nullptr };
-    DOMListener* m_domListener { nullptr };
     NodeToIdMap m_documentNodeToIdMap;
     // Owns node mappings for dangling nodes.
     Vector<std::unique_ptr<NodeToIdMap>> m_danglingNodeToIdMaps;
     HashMap<int, Node*> m_idToNode;
     HashMap<int, NodeToIdMap*> m_idToNodesMap;
@@ -275,22 +249,24 @@
     typedef HashMap<String, Vector<RefPtr<Node>>> SearchResults;
     SearchResults m_searchResults;
     std::unique_ptr<RevalidateStyleAttributeTask> m_revalidateStyleAttrTask;
     RefPtr<Node> m_nodeToFocus;
     RefPtr<Node> m_mousedOverNode;
+    RefPtr<Node> m_inspectedNode;
     std::unique_ptr<HighlightConfig> m_inspectModeHighlightConfig;
     std::unique_ptr<InspectorHistory> m_history;
     std::unique_ptr<DOMEditor> m_domEditor;
     bool m_searchingForNode { false };
     bool m_suppressAttributeModifiedEvent { false };
+    bool m_suppressEventListenerChangedEvent { false };
     bool m_documentRequested { false };
 
 #if ENABLE(VIDEO)
     Timer m_mediaMetricsTimer;
     struct MediaMetrics {
         unsigned displayCompositedFrames { 0 };
-        bool isLowPower { false };
+        bool isPowerEfficient { false };
 
         MediaMetrics() { }
 
         MediaMetrics(unsigned displayCompositedFrames)
             : displayCompositedFrames(displayCompositedFrames)
@@ -304,27 +280,27 @@
 
     struct InspectorEventListener {
         int identifier { 1 };
         RefPtr<EventTarget> eventTarget;
         RefPtr<EventListener> eventListener;
-        AtomicString eventType;
+        AtomString eventType;
         bool useCapture { false };
         bool disabled { false };
         bool hasBreakpoint { false };
 
         InspectorEventListener() { }
 
-        InspectorEventListener(int identifier, EventTarget& target, const AtomicString& type, EventListener& listener, bool capture)
+        InspectorEventListener(int identifier, EventTarget& target, const AtomString& type, EventListener& listener, bool capture)
             : identifier(identifier)
             , eventTarget(&target)
             , eventListener(&listener)
             , eventType(type)
             , useCapture(capture)
         {
         }
 
-        bool matches(EventTarget& target, const AtomicString& type, EventListener& listener, bool capture)
+        bool matches(EventTarget& target, const AtomString& type, EventListener& listener, bool capture)
         {
             if (eventTarget.get() != &target)
                 return false;
             if (eventListener.get() != &listener)
                 return false;
