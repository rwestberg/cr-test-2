diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayout.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayout.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayout.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayout.cpp
@@ -420,11 +420,12 @@
     bool isHyphenationDisabled() const { return m_hyphenationDisabled; }
 
     float availableWidth() const { return m_availableWidth; }
     float logicalLeftOffset() const { return m_logicalLeftOffset; }
     const TextFragmentIterator::TextFragment& overflowedFragment() const { return m_overflowedFragment; }
-    bool hasTrailingWhitespace() const { return m_lastFragment.type() == TextFragmentIterator::TextFragment::Whitespace; }
+    bool hasTrailingWhitespace() const { return m_lastFragment.type() == TextFragmentIterator::TextFragment::Whitespace && m_lastFragment.length() > 0; }
+    bool hasWhitespaceFragments() const { return m_lastWhitespaceFragment != WTF::nullopt; }
     TextFragmentIterator::TextFragment lastFragment() const { return m_lastFragment; }
     bool isWhitespaceOnly() const { return m_trailingWhitespaceWidth && m_runsWidth == m_trailingWhitespaceWidth; }
     bool fits(float extra) const { return m_availableWidth >= m_runsWidth + extra; }
     bool firstCharacterFits() const { return m_firstCharacterFits; }
     float width() const { return m_runsWidth; }
@@ -503,13 +504,14 @@
         m_runsWidth += fragment.width();
         m_lastFragment = fragment;
         if (m_fragments)
             (*m_fragments).append(fragment);
 
-        if (fragment.type() == TextFragmentIterator::TextFragment::Whitespace)
+        if (fragment.type() == TextFragmentIterator::TextFragment::Whitespace) {
             m_trailingWhitespaceWidth += fragment.width();
-        else {
+            m_lastWhitespaceFragment = fragment;
+        } else {
             m_trailingWhitespaceWidth = 0;
             m_lastNonWhitespaceFragment = fragment;
         }
 
         if (!m_firstCharacterFits)
@@ -565,10 +567,11 @@
     float m_logicalLeftOffset { 0 };
     float m_runsWidth { 0 };
     TextFragmentIterator::TextFragment m_overflowedFragment;
     TextFragmentIterator::TextFragment m_lastFragment;
     Optional<TextFragmentIterator::TextFragment> m_lastNonWhitespaceFragment;
+    Optional<TextFragmentIterator::TextFragment> m_lastWhitespaceFragment;
     TextFragmentIterator::TextFragment m_lastCompleteFragment;
     float m_uncompletedWidth { 0 };
     float m_trailingWhitespaceWidth { 0 }; // Use this to remove trailing whitespace without re-mesuring the text.
     float m_collapsedWhitespaceWidth { 0 };
     // Having one character on the line does not necessarily mean it actually fits.
@@ -588,11 +591,11 @@
     if (!lineState.hasTrailingWhitespace())
         return;
     // Remove collapsed whitespace, or non-collapsed pre-wrap whitespace, unless it's the only content on the line -so removing the whitesapce
     // would produce an empty line.
     const auto& style = textFragmentIterator.style();
-    bool collapseWhitespace = style.collapseWhitespace | preWrap(style);
+    bool collapseWhitespace = style.collapseWhitespace || (!style.breakSpaces && preWrap(style));
     if (!collapseWhitespace)
         return;
     if (preWrap(style) && lineState.isWhitespaceOnly())
         return;
     lineState.removeTrailingWhitespace(runs);
@@ -745,10 +748,16 @@
     if (overflowedFragment.type() != TextFragmentIterator::TextFragment::Whitespace)
         return overflowedFragment;
 
     // Leading whitespace handling.
     auto& style = textFragmentIterator.style();
+    if (style.breakSpaces) {
+        // Leading whitespace created after breaking the previous line.
+        // Breaking before the first space after a word is only allowed in combination with break-all or break-word.
+        if (style.breakFirstWordOnOverflow || previousLine.hasTrailingWhitespace())
+            return overflowedFragment;
+    }
     // Special overflow pre-wrap whitespace handling: skip the overflowed whitespace (even when style says not-collapsible)
     // if we manage to fit at least one character on the previous line.
     auto preWrapIsOn = preWrap(style);
     if ((style.collapseWhitespace || preWrapIsOn) && previousLine.firstCharacterFits()) {
         // If skipping the whitespace puts us on a newline, skip the newline too as we already wrapped the line.
@@ -810,10 +819,15 @@
                 if (style.collapseWhitespace) {
                     // Push collapased whitespace to the next line.
                     line.setOverflowedFragment(fragment);
                     break;
                 }
+                if (style.breakSpaces && line.hasWhitespaceFragments() && fragment.length() == 1) {
+                    // Breaking before the first space after a word is not allowed if there are previous breaking opportunities in the line.
+                    textFragmentIterator.revertToEndOfFragment(line.revertToLastCompleteFragment(runs));
+                    break;
+                }
                 // Split the whitespace; left part stays on this line, right is pushed to next line.
                 line.setOverflowedFragment(splitFragmentToFitLine(fragment, line, textFragmentIterator));
                 line.appendFragmentAndCreateRunIfNeeded(fragment, runs);
                 break;
             }
@@ -981,11 +995,11 @@
 }
 
 const RunResolver& Layout::runResolver() const
 {
     if (!m_runResolver)
-        m_runResolver = std::make_unique<RunResolver>(m_blockFlowRenderer, *this);
+        m_runResolver = makeUnique<RunResolver>(m_blockFlowRenderer, *this);
     return *m_runResolver;
 }
 
 Layout::~Layout()
 {
