diff a/modules/javafx.web/src/main/native/Source/WebCore/css/StyleResolver.h b/modules/javafx.web/src/main/native/Source/WebCore/css/StyleResolver.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/StyleResolver.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/StyleResolver.h
@@ -34,11 +34,11 @@
 #include <memory>
 #include <wtf/Bitmap.h>
 #include <wtf/HashMap.h>
 #include <wtf/RefPtr.h>
 #include <wtf/Vector.h>
-#include <wtf/text/AtomicStringHash.h>
+#include <wtf/text/AtomStringHash.h>
 #include <wtf/text/StringHash.h>
 
 namespace WebCore {
 
 class CSSCursorImageValue;
@@ -191,12 +191,12 @@
     bool useSVGZoomRulesForLength() const;
 
     static bool colorFromPrimitiveValueIsDerivedFromElement(const CSSPrimitiveValue&);
     Color colorFromPrimitiveValue(const CSSPrimitiveValue&, bool forVisitedLink = false) const;
 
-    bool hasSelectorForId(const AtomicString&) const;
-    bool hasSelectorForAttribute(const Element&, const AtomicString&) const;
+    bool hasSelectorForId(const AtomString&) const;
+    bool hasSelectorForAttribute(const Element&, const AtomString&) const;
 
 #if ENABLE(CSS_DEVICE_ADAPTATION)
     ViewportStyleResolver* viewportStyleResolver() { return m_viewportStyleResolver.get(); }
 #endif
 
@@ -285,11 +285,11 @@
         void addNormalMatches(const MatchResult&, int startIndex, int endIndex, bool inheritedOnly = false);
         void addImportantMatches(const MatchResult&, int startIndex, int endIndex, bool inheritedOnly = false);
 
         void applyDeferredProperties(StyleResolver&, ApplyCascadedPropertyState&);
 
-        HashMap<AtomicString, Property>& customProperties() { return m_customProperties; }
+        HashMap<AtomString, Property>& customProperties() { return m_customProperties; }
         bool hasCustomProperty(const String&) const;
         Property customProperty(const String&) const;
 
     private:
         void addMatch(const MatchResult&, unsigned index, bool isImportant, bool inheritedOnly);
@@ -299,28 +299,30 @@
 
         Property m_properties[numCSSProperties + 2];
         std::bitset<numCSSProperties + 2> m_propertyIsPresent;
 
         Vector<Property, 8> m_deferredProperties;
-        HashMap<AtomicString, Property> m_customProperties;
+        HashMap<AtomString, Property> m_customProperties;
 
         TextDirection m_direction;
         WritingMode m_writingMode;
     };
 
     void applyCascadedProperties(int firstProperty, int lastProperty, ApplyCascadedPropertyState&);
     void applyCascadedCustomProperty(const String& name, ApplyCascadedPropertyState&);
 
 private:
     // This function fixes up the default font size if it detects that the current generic font family has changed. -dwh
-    void checkForGenericFamilyChange(RenderStyle*, const RenderStyle* parentStyle);
-    void checkForZoomChange(RenderStyle*, const RenderStyle* parentStyle);
+    void checkForGenericFamilyChange(RenderStyle&, const RenderStyle* parentStyle);
+    void checkForZoomChange(RenderStyle&, const RenderStyle* parentStyle);
 #if ENABLE(TEXT_AUTOSIZING)
-    void checkForTextSizeAdjust(RenderStyle*);
+    void checkForTextSizeAdjust(RenderStyle&);
 #endif
 
     void adjustRenderStyle(RenderStyle&, const RenderStyle& parentStyle, const RenderStyle* parentBoxStyle, const Element*);
+    void adjustRenderStyleForSiteSpecificQuirks(RenderStyle&, const Element&);
+
     std::unique_ptr<GridPosition> adjustNamedGridItemPosition(const NamedGridAreaMap&, const NamedGridLinesMap&, const GridPosition&, GridPositionSide) const;
 
     void adjustStyleForInterCharacterRuby();
 
     bool fastRejectSelector(const RuleData&) const;
@@ -342,11 +344,11 @@
     bool isFirstPage(int pageIndex) const;
     String pageName(int pageIndex) const;
 
     DocumentRuleSets m_ruleSets;
 
-    typedef HashMap<AtomicStringImpl*, RefPtr<StyleRuleKeyframes>> KeyframesRuleMap;
+    typedef HashMap<AtomStringImpl*, RefPtr<StyleRuleKeyframes>> KeyframesRuleMap;
     KeyframesRuleMap m_keyframesRuleMap;
 
 public:
     typedef HashMap<CSSPropertyID, RefPtr<CSSValue>> PendingImagePropertyMap;
 
@@ -465,10 +467,12 @@
     void setWritingMode(WritingMode writingMode) { m_state.setWritingMode(writingMode); }
     void setTextOrientation(TextOrientation textOrientation) { m_state.setTextOrientation(textOrientation); }
 
     RefPtr<CSSValue> resolvedVariableValue(CSSPropertyID, const CSSValue&, ApplyCascadedPropertyState&) const;
 
+    bool adjustRenderStyleForTextAutosizing(RenderStyle&, const Element&);
+
 private:
     void cacheBorderAndBackground();
 
     void applyProperty(CSSPropertyID, CSSValue*, ApplyCascadedPropertyState&, SelectorChecker::LinkMatchMask = SelectorChecker::MatchDefault);
 
@@ -546,19 +550,19 @@
     Bitmap<numCSSProperties> inProgressProperties = { };
     HashSet<String> inProgressPropertiesCustom = { };
 };
 
 
-inline bool StyleResolver::hasSelectorForAttribute(const Element& element, const AtomicString &attributeName) const
+inline bool StyleResolver::hasSelectorForAttribute(const Element& element, const AtomString &attributeName) const
 {
     ASSERT(!attributeName.isEmpty());
     if (element.isHTMLElement())
         return m_ruleSets.features().attributeCanonicalLocalNamesInRules.contains(attributeName);
     return m_ruleSets.features().attributeLocalNamesInRules.contains(attributeName);
 }
 
-inline bool StyleResolver::hasSelectorForId(const AtomicString& idValue) const
+inline bool StyleResolver::hasSelectorForId(const AtomString& idValue) const
 {
     ASSERT(!idValue.isEmpty());
     return m_ruleSets.features().idsInRules.contains(idValue);
 }
 
