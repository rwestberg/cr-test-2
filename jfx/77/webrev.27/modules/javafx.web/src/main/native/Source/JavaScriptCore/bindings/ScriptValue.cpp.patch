diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bindings/ScriptValue.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bindings/ScriptValue.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bindings/ScriptValue.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bindings/ScriptValue.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2006, 2007, 2008, 2013 Apple Inc. All rights reserved.
+ * Copyright (C) 2006-2019 Apple Inc. All rights reserved.
  * Copyright (c) 2011 Google Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
@@ -72,24 +72,24 @@
                 auto elementValue = jsToInspectorValue(scriptState, array.getIndex(&scriptState, i), maxDepth);
                 if (!elementValue)
                     return nullptr;
                 inspectorArray->pushValue(WTFMove(elementValue));
             }
-            return WTFMove(inspectorArray);
+            return inspectorArray;
         }
         VM& vm = scriptState.vm();
         auto inspectorObject = JSON::Object::create();
         auto& object = *value.getObject();
-        PropertyNameArray propertyNames(&vm, PropertyNameMode::Strings, PrivateSymbolMode::Exclude);
+        PropertyNameArray propertyNames(vm, PropertyNameMode::Strings, PrivateSymbolMode::Exclude);
         object.methodTable(vm)->getOwnPropertyNames(&object, &scriptState, propertyNames, EnumerationMode());
         for (auto& name : propertyNames) {
             auto inspectorValue = jsToInspectorValue(scriptState, object.get(&scriptState, name), maxDepth);
             if (!inspectorValue)
                 return nullptr;
             inspectorObject->setValue(name.string(), WTFMove(inspectorValue));
         }
-        return WTFMove(inspectorObject);
+        return inspectorObject;
     }
 
     ASSERT_NOT_REACHED();
     return nullptr;
 }
