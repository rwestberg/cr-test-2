diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGNode.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGNode.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGNode.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGNode.h
@@ -211,20 +211,20 @@
 struct SwitchData {
     // Initializes most fields to obviously invalid values. Anyone
     // constructing this should make sure to initialize everything they
     // care about manually.
     SwitchData()
-        : kind(static_cast<SwitchKind>(-1))
-        , switchTableIndex(UINT_MAX)
+        : switchTableIndex(UINT_MAX)
+        , kind(static_cast<SwitchKind>(-1))
         , didUseJumpTable(false)
     {
     }
 
     Vector<SwitchCase> cases;
     BranchTarget fallThrough;
-    SwitchKind kind;
     size_t switchTableIndex;
+    SwitchKind kind;
     bool didUseJumpTable;
 };
 
 struct EntrySwitchData {
     Vector<BasicBlock*> cases;
@@ -681,11 +681,11 @@
         children = AdjacencyList();
     }
 
     void convertPhantomToPhantomLocal()
     {
-        ASSERT(m_op == Phantom && (child1()->op() == Phi || child1()->op() == SetLocal || child1()->op() == SetArgument));
+        ASSERT(m_op == Phantom && (child1()->op() == Phi || child1()->op() == SetLocal || child1()->op() == SetArgumentDefinitely));
         m_op = PhantomLocal;
         m_opInfo = child1()->m_opInfo; // Copy the variableAccessData.
         children.setChild1(Edge());
     }
 
@@ -708,11 +708,11 @@
         m_op = ArithNegate;
     }
 
     void convertToCompareEqPtr(FrozenValue* cell, Edge node)
     {
-        ASSERT(m_op == CompareStrictEq);
+        ASSERT(m_op == CompareStrictEq || m_op == SameValue);
         setOpAndDefaultFlags(CompareEqPtr);
         children.setChild1(node);
         children.setChild2(Edge());
         m_opInfo = cell;
     }
@@ -857,18 +857,10 @@
         if (!isCellConstant())
             return nullptr;
         return jsDynamicCast<T>(vm, asCell());
     }
 
-    template<typename T>
-    T castConstant(VM& vm)
-    {
-        T result = dynamicCastConstant<T>(vm);
-        RELEASE_ASSERT(result);
-        return result;
-    }
-
     bool hasLazyJSValue()
     {
         return op() == LazyJSConstant;
     }
 
@@ -1691,10 +1683,12 @@
         case ToNumber:
         case ToObject:
         case ValueBitAnd:
         case ValueBitOr:
         case ValueBitXor:
+        case ValueBitNot:
+        case ValueBitLShift:
         case CallObjectConstructor:
         case LoadKeyFromMapBucket:
         case LoadValueFromMapBucket:
         case CallDOMGetter:
         case CallDOM:
@@ -2343,13 +2337,30 @@
     bool shouldSpeculateInt32OrBooleanExpectingDefined()
     {
         return isInt32OrBooleanSpeculationExpectingDefined(prediction());
     }
 
-    bool shouldSpeculateAnyInt()
-    {
-        return isAnyIntSpeculation(prediction());
+    bool shouldSpeculateInt52()
+    {
+        // We have to include SpecInt32Only here for two reasons:
+        // 1. We diligently write code that first checks if we should speculate Int32.
+        // For example:
+        // if (shouldSpeculateInt32()) ...
+        // else if (shouldSpeculateInt52()) ...
+        // This means we it's totally valid to speculate Int52 when we're dealing
+        // with a type that's the union of Int32 and Int52.
+        //
+        // It would be a performance mistake to not include Int32 here because we obviously
+        // have variables that are the union of Int32 and Int52 values, and it's better
+        // to speculate Int52 than double in that situation.
+        //
+        // 2. We also write code where we ask if the inputs can be Int52, like if
+        // we know via profiling that an Add overflows, we may not emit an Int32 add.
+        // However, we only emit such an add if both inputs can be Int52, and Int32
+        // can trivially become Int52.
+        //
+        return enableInt52() && isInt32OrInt52Speculation(prediction());
     }
 
     bool shouldSpeculateDouble()
     {
         return isDoubleSpeculation(prediction());
@@ -2606,13 +2617,13 @@
     {
         return op1->shouldSpeculateInt32OrBooleanExpectingDefined()
             && op2->shouldSpeculateInt32OrBooleanExpectingDefined();
     }
 
-    static bool shouldSpeculateAnyInt(Node* op1, Node* op2)
+    static bool shouldSpeculateInt52(Node* op1, Node* op2)
     {
-        return op1->shouldSpeculateAnyInt() && op2->shouldSpeculateAnyInt();
+        return enableInt52() && op1->shouldSpeculateInt52() && op2->shouldSpeculateInt52();
     }
 
     static bool shouldSpeculateNumber(Node* op1, Node* op2)
     {
         return op1->shouldSpeculateNumber() && op2->shouldSpeculateNumber();
@@ -2885,12 +2896,10 @@
         if (!child3())
             return;
         out.printf(", @%u", child3()->index());
     }
 
-    // NB. This class must have a trivial destructor.
-
     NodeOrigin origin;
 
     // References to up to 3 children, or links to a variable length set of children.
     AdjacencyList children;
 
