diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3LowerMacros.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3LowerMacros.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3LowerMacros.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3LowerMacros.cpp
@@ -175,10 +175,40 @@
                 if (m_value->isChill())
                     makeDivisionChill(Div);
                 break;
             }
 
+            case CheckMul: {
+                if (isARM64() && m_value->child(0)->type() == Int32) {
+                    CheckValue* checkMul = m_value->as<CheckValue>();
+
+                    Value* left = m_insertionSet.insert<Value>(m_index, SExt32, m_origin, m_value->child(0));
+                    Value* right = m_insertionSet.insert<Value>(m_index, SExt32, m_origin, m_value->child(1));
+                    Value* mulResult = m_insertionSet.insert<Value>(m_index, Mul, m_origin, left, right);
+                    Value* mulResult32 = m_insertionSet.insert<Value>(m_index, Trunc, m_origin, mulResult);
+                    Value* upperResult = m_insertionSet.insert<Value>(m_index, Trunc, m_origin,
+                        m_insertionSet.insert<Value>(m_index, SShr, m_origin, mulResult, m_insertionSet.insert<Const32Value>(m_index, m_origin, 32)));
+                    Value* signBit = m_insertionSet.insert<Value>(m_index, SShr, m_origin,
+                        mulResult32,
+                        m_insertionSet.insert<Const32Value>(m_index, m_origin, 31));
+                    Value* hasOverflowed = m_insertionSet.insert<Value>(m_index, NotEqual, m_origin, upperResult, signBit);
+
+                    CheckValue* check = m_insertionSet.insert<CheckValue>(m_index, Check, m_origin, hasOverflowed);
+                    check->setGenerator(checkMul->generator());
+                    check->clobberEarly(checkMul->earlyClobbered());
+                    check->clobberLate(checkMul->lateClobbered());
+                    auto children = checkMul->constrainedChildren();
+                    auto it = children.begin();
+                    for (std::advance(it, 2); it != children.end(); ++it)
+                        check->append(*it);
+
+                    m_value->replaceWithIdentity(mulResult32);
+                    m_changed = true;
+                }
+                break;
+            }
+
             case Switch: {
                 SwitchValue* switchValue = m_value->as<SwitchValue>();
                 Vector<SwitchCase> cases;
                 for (SwitchCase switchCase : switchValue->cases(m_block))
                     cases.append(switchCase);
@@ -386,11 +416,11 @@
             zeroDenCase->appendIntConstant(m_proc, m_value, 0));
         zeroDenCase->appendNew<Value>(m_proc, Jump, m_origin);
         zeroDenCase->setSuccessors(FrequentedBlock(m_block));
 
         int64_t badNumeratorConst = 0;
-        switch (m_value->type()) {
+        switch (m_value->type().kind()) {
         case Int32:
             badNumeratorConst = std::numeric_limits<int32_t>::min();
             break;
         case Int64:
             badNumeratorConst = std::numeric_limits<int64_t>::min();
@@ -508,11 +538,11 @@
                         GPRReg index = params[0].gpr();
                         GPRReg scratch = params.gpScratch(0);
 
                         jit.move(CCallHelpers::TrustedImmPtr(jumpTable), scratch);
                         jit.load64(CCallHelpers::BaseIndex(scratch, index, CCallHelpers::timesPtr()), scratch);
-                        jit.jump(scratch, JSSwitchPtrTag);
+                        jit.farJump(scratch, JSSwitchPtrTag);
 
                         // These labels are guaranteed to be populated before either late paths or
                         // link tasks run.
                         Vector<Box<CCallHelpers::Label>> labels = params.successorLabels();
 
