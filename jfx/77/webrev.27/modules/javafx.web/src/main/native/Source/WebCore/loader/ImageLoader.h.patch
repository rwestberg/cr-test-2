diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/ImageLoader.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/ImageLoader.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/ImageLoader.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/ImageLoader.h
@@ -25,11 +25,11 @@
 #include "CachedImageClient.h"
 #include "CachedResourceHandle.h"
 #include "JSDOMPromiseDeferred.h"
 #include "Timer.h"
 #include <wtf/Vector.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
 class Element;
 class ImageLoader;
@@ -59,10 +59,11 @@
     bool imageComplete() const { return m_imageComplete; }
 
     CachedImage* image() const { return m_image.get(); }
     void clearImage(); // Cancels pending beforeload and load events, and doesn't dispatch new ones.
 
+    size_t pendingDecodePromisesCountForTesting() const { return m_decodingPromises.size(); }
     void decode(Ref<DeferredPromise>&&);
 
     void setLoadManually(bool loadManually) { m_loadManually = loadManually; }
 
     bool hasPendingBeforeLoadEvent() const { return m_hasPendingBeforeLoadEvent; }
@@ -78,11 +79,11 @@
     explicit ImageLoader(Element&);
     void notifyFinished(CachedResource&) override;
 
 private:
     virtual void dispatchLoadEvent() = 0;
-    virtual String sourceURI(const AtomicString&) const = 0;
+    virtual String sourceURI(const AtomString&) const = 0;
 
     void updatedHasPendingEvent();
 
     void dispatchPendingBeforeLoadEvent();
     void dispatchPendingLoadEvent();
@@ -93,21 +94,22 @@
 
     void clearImageWithoutConsideringPendingLoadEvent();
     void clearFailedLoadURL();
 
     bool hasPendingDecodePromises() const { return !m_decodingPromises.isEmpty(); }
-    void decodeError(const char*);
+    void resolveDecodePromises();
+    void rejectDecodePromises(const char* message);
     void decode();
 
     void timerFired();
 
     Element& m_element;
     CachedResourceHandle<CachedImage> m_image;
     Timer m_derefElementTimer;
     RefPtr<Element> m_protectedElement;
-    AtomicString m_failedLoadURL;
-    Vector<RefPtr<DeferredPromise>, 1> m_decodingPromises;
+    AtomString m_failedLoadURL;
+    Vector<RefPtr<DeferredPromise>> m_decodingPromises;
     bool m_hasPendingBeforeLoadEvent : 1;
     bool m_hasPendingLoadEvent : 1;
     bool m_hasPendingErrorEvent : 1;
     bool m_imageComplete : 1;
     bool m_loadManually : 1;
