diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/Database.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/Database.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/Database.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/Database.cpp
@@ -191,19 +191,19 @@
         return ++lastUsedGUID;
     }).iterator->value;
 }
 
 Database::Database(DatabaseContext& context, const String& name, const String& expectedVersion, const String& displayName, unsigned long long estimatedSize)
-    : m_scriptExecutionContext(*context.scriptExecutionContext())
-    , m_contextThreadSecurityOrigin(m_scriptExecutionContext->securityOrigin()->isolatedCopy())
-    , m_databaseThreadSecurityOrigin(m_scriptExecutionContext->securityOrigin()->isolatedCopy())
+    : m_document(*context.document())
+    , m_contextThreadSecurityOrigin(m_document->securityOrigin().isolatedCopy())
+    , m_databaseThreadSecurityOrigin(m_document->securityOrigin().isolatedCopy())
     , m_databaseContext(context)
     , m_name((name.isNull() ? emptyString() : name).isolatedCopy())
     , m_expectedVersion(expectedVersion.isolatedCopy())
     , m_displayName(displayName.isolatedCopy())
     , m_estimatedSize(estimatedSize)
-    , m_filename(DatabaseManager::singleton().fullPathForDatabase(*m_scriptExecutionContext->securityOrigin(), m_name))
+    , m_filename(DatabaseManager::singleton().fullPathForDatabase(m_document->securityOrigin(), m_name))
     , m_databaseAuthorizer(DatabaseAuthorizer::create(unqualifiedInfoTableName))
 {
     {
         std::lock_guard<Lock> locker(guidMutex);
 
@@ -224,18 +224,13 @@
     return *m_databaseContext->existingDatabaseThread();
 }
 
 Database::~Database()
 {
-    // The reference to the ScriptExecutionContext needs to be cleared on the JavaScript thread.  If we're on that thread already, we can just let the RefPtr's destruction do the dereffing.
-    if (!m_scriptExecutionContext->isContextThread()) {
-        auto passedContext = WTFMove(m_scriptExecutionContext);
-        auto& contextRef = passedContext.get();
-        contextRef.postTask({ScriptExecutionContext::Task::CleanupTask, [passedContext = WTFMove(passedContext), databaseContext = WTFMove(m_databaseContext)] (ScriptExecutionContext& context) {
-            ASSERT_UNUSED(context, &context == passedContext.ptr());
-        }});
-    }
+    // The reference to the Document needs to be cleared on the JavaScript thread. If we're on that thread already, we can just let the RefPtr's destruction do the dereffing.
+    if (!isMainThread())
+        callOnMainThread([document = WTFMove(m_document), databaseContext = WTFMove(m_databaseContext)] { });
 
     // SQLite is "multi-thread safe", but each database handle can only be used
     // on a single thread at a time.
     //
     // For DatabaseBackend, we open the SQLite database on the DatabaseThread,
@@ -253,11 +248,11 @@
     auto& thread = databaseThread();
     if (thread.terminationRequested(&synchronizer))
         return Exception { InvalidStateError };
 
     ExceptionOr<void> result;
-    auto task = std::make_unique<DatabaseOpenTask>(*this, setVersionInNewDatabase, synchronizer, result);
+    auto task = makeUnique<DatabaseOpenTask>(*this, setVersionInNewDatabase, synchronizer, result);
     thread.scheduleImmediateTask(WTFMove(task));
     synchronizer.waitForTaskCompletion();
 
     return result;
 }
@@ -276,11 +271,11 @@
     if (thread.terminationRequested(&synchronizer)) {
         LOG(StorageAPI, "Database handle %p is on a terminated DatabaseThread, cannot be marked for normal closure\n", this);
         return;
     }
 
-    thread.scheduleImmediateTask(std::make_unique<DatabaseCloseTask>(*this, synchronizer));
+    thread.scheduleImmediateTask(makeUnique<DatabaseCloseTask>(*this, synchronizer));
 
     // FIXME: iOS depends on this function blocking until the database is closed as part
     // of closing all open databases from a process assertion expiration handler.
     // See <https://bugs.webkit.org/show_bug.cgi?id=157184>.
     synchronizer.waitForTaskCompletion();
@@ -346,11 +341,11 @@
     }
 #endif
 
     SQLiteTransactionInProgressAutoCounter transactionCounter;
 
-    if (!m_sqliteDatabase.open(m_filename, true))
+    if (!m_sqliteDatabase.open(m_filename))
         return Exception { InvalidStateError, formatErrorMessage("unable to open database", m_sqliteDatabase.lastError(), m_sqliteDatabase.lastErrorMsg()) };
     if (!m_sqliteDatabase.turnOnIncrementalAutoVacuum())
         LOG_ERROR("Unable to turn on incremental auto-vacuum (%d %s)", m_sqliteDatabase.lastError(), m_sqliteDatabase.lastErrorMsg());
 
     m_sqliteDatabase.setBusyTimeout(maxSqliteBusyWaitTime);
@@ -535,20 +530,20 @@
     }
 
     m_transactionInProgress = true;
 
     auto transaction = m_transactionQueue.takeFirst();
-    auto task = std::make_unique<DatabaseTransactionTask>(WTFMove(transaction));
+    auto task = makeUnique<DatabaseTransactionTask>(WTFMove(transaction));
     LOG(StorageAPI, "Scheduling DatabaseTransactionTask %p for transaction %p\n", task.get(), task->transaction());
     databaseThread().scheduleTask(WTFMove(task));
 }
 
 void Database::scheduleTransactionStep(SQLTransaction& transaction)
 {
     auto& thread = databaseThread();
 
-    auto task = std::make_unique<DatabaseTransactionTask>(&transaction);
+    auto task = makeUnique<DatabaseTransactionTask>(&transaction);
     LOG(StorageAPI, "Scheduling DatabaseTransactionTask %p for the transaction step\n", task.get());
     thread.scheduleTask(WTFMove(task));
 }
 
 void Database::inProgressTransactionCompleted()
@@ -583,11 +578,11 @@
 void Database::markAsDeletedAndClose()
 {
     if (m_deleted)
         return;
 
-    LOG(StorageAPI, "Marking %s (%p) as deleted", stringIdentifier().ascii().data(), this);
+    LOG(StorageAPI, "Marking %s (%p) as deleted", stringIdentifierIsolatedCopy().ascii().data(), this);
     m_deleted = true;
 
     close();
 }
 
@@ -604,22 +599,28 @@
 void Database::readTransaction(RefPtr<SQLTransactionCallback>&& callback, RefPtr<SQLTransactionErrorCallback>&& errorCallback, RefPtr<VoidCallback>&& successCallback)
 {
     runTransaction(WTFMove(callback), WTFMove(errorCallback), WTFMove(successCallback), nullptr, true);
 }
 
-String Database::stringIdentifier() const
+String Database::stringIdentifierIsolatedCopy() const
 {
     // Return a deep copy for ref counting thread safety
     return m_name.isolatedCopy();
 }
 
-String Database::displayName() const
+String Database::displayNameIsolatedCopy() const
 {
     // Return a deep copy for ref counting thread safety
     return m_displayName.isolatedCopy();
 }
 
+String Database::expectedVersionIsolatedCopy() const
+{
+    // Return a deep copy for ref counting thread safety
+    return m_expectedVersion.isolatedCopy();
+}
+
 unsigned long long Database::estimatedSize() const
 {
     return m_estimatedSize;
 }
 
@@ -627,20 +628,20 @@
 {
     m_estimatedSize = estimatedSize;
     DatabaseTracker::singleton().setDatabaseDetails(securityOrigin(), m_name, m_displayName, m_estimatedSize);
 }
 
-String Database::fileName() const
+String Database::fileNameIsolatedCopy() const
 {
     // Return a deep copy for ref counting thread safety
     return m_filename.isolatedCopy();
 }
 
 DatabaseDetails Database::details() const
 {
     // This code path is only used for database quota delegate calls, so file dates are irrelevant and left uninitialized.
-    return DatabaseDetails(stringIdentifier(), displayName(), estimatedSize(), 0, WTF::nullopt, WTF::nullopt);
+    return DatabaseDetails(stringIdentifierIsolatedCopy(), displayNameIsolatedCopy(), estimatedSize(), 0, WTF::nullopt, WTF::nullopt);
 }
 
 void Database::disableAuthorizer()
 {
     m_databaseAuthorizer->disable();
@@ -684,13 +685,12 @@
 void Database::runTransaction(RefPtr<SQLTransactionCallback>&& callback, RefPtr<SQLTransactionErrorCallback>&& errorCallback, RefPtr<VoidCallback>&& successCallback, RefPtr<SQLTransactionWrapper>&& wrapper, bool readOnly)
 {
     LockHolder locker(m_transactionInProgressMutex);
     if (!m_isTransactionQueueEnabled) {
         if (errorCallback) {
-            RefPtr<SQLTransactionErrorCallback> errorCallbackProtector = WTFMove(errorCallback);
-            m_scriptExecutionContext->postTask([errorCallbackProtector](ScriptExecutionContext&) {
-                errorCallbackProtector->handleEvent(SQLError::create(SQLError::UNKNOWN_ERR, "database has been closed"));
+            callOnMainThread([errorCallback = makeRef(*errorCallback)]() {
+                errorCallback->handleEvent(SQLError::create(SQLError::UNKNOWN_ERR, "database has been closed"));
             });
         }
         return;
     }
 
@@ -699,13 +699,12 @@
         scheduleTransaction();
 }
 
 void Database::scheduleTransactionCallback(SQLTransaction* transaction)
 {
-    RefPtr<SQLTransaction> transactionProtector(transaction);
-    m_scriptExecutionContext->postTask([transactionProtector] (ScriptExecutionContext&) {
-        transactionProtector->performPendingCallback();
+    callOnMainThread([transaction = makeRefPtr(transaction)] {
+        transaction->performPendingCallback();
     });
 }
 
 Vector<String> Database::performGetTableNames()
 {
@@ -749,11 +748,11 @@
     }
 }
 
 void Database::logErrorMessage(const String& message)
 {
-    m_scriptExecutionContext->addConsoleMessage(MessageSource::Storage, MessageLevel::Error, message);
+    m_document->addConsoleMessage(MessageSource::Storage, MessageLevel::Error, message);
 }
 
 Vector<String> Database::tableNames()
 {
     // FIXME: Not using isolatedCopy on these strings looks ok since threads take strict turns
@@ -762,20 +761,20 @@
     DatabaseTaskSynchronizer synchronizer;
     auto& thread = databaseThread();
     if (thread.terminationRequested(&synchronizer))
         return result;
 
-    auto task = std::make_unique<DatabaseTableNamesTask>(*this, synchronizer, result);
+    auto task = makeUnique<DatabaseTableNamesTask>(*this, synchronizer, result);
     thread.scheduleImmediateTask(WTFMove(task));
     synchronizer.waitForTaskCompletion();
 
     return result;
 }
 
 SecurityOriginData Database::securityOrigin()
 {
-    if (m_scriptExecutionContext->isContextThread())
+    if (isMainThread())
         return m_contextThreadSecurityOrigin->data();
     if (databaseThread().getThread() == &Thread::current())
         return m_databaseThreadSecurityOrigin->data();
     RELEASE_ASSERT_NOT_REACHED();
 }
@@ -785,24 +784,24 @@
     return DatabaseTracker::singleton().maximumSize(*this);
 }
 
 void Database::didCommitWriteTransaction()
 {
-    DatabaseTracker::singleton().scheduleNotifyDatabaseChanged(securityOrigin(), stringIdentifier());
+    DatabaseTracker::singleton().scheduleNotifyDatabaseChanged(securityOrigin(), stringIdentifierIsolatedCopy());
 }
 
 bool Database::didExceedQuota()
 {
-    ASSERT(databaseContext().scriptExecutionContext()->isContextThread());
+    ASSERT(isMainThread());
     auto& tracker = DatabaseTracker::singleton();
     auto oldQuota = tracker.quota(securityOrigin());
     if (estimatedSize() <= oldQuota) {
         // The expected usage provided by the page is now smaller than the actual database size so we bump the expected usage to
         // oldQuota + 5MB so that the client actually increases the quota.
         setEstimatedSize(oldQuota + quotaIncreaseSize);
     }
-    databaseContext().databaseExceededQuota(stringIdentifier(), details());
+    databaseContext().databaseExceededQuota(stringIdentifierIsolatedCopy(), details());
     return tracker.quota(securityOrigin()) > oldQuota;
 }
 
 #if !LOG_DISABLED || !ERROR_DISABLED
 
