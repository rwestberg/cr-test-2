diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3ValueRep.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3ValueRep.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3ValueRep.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3ValueRep.h
@@ -45,12 +45,13 @@
 // representation and to get the representation. When the B3 client forces a representation, we say
 // that it's an input. When B3 tells the client what representation it picked, we say that it's an
 // output.
 
 class ValueRep {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    enum Kind {
+    enum Kind : uint8_t {
         // As an input representation, this means that B3 can pick any representation. As an output
         // representation, this means that we don't know. This will only arise as an output
         // representation for the active arguments of Check/CheckAdd/CheckSub/CheckMul.
         WarmAny,
 
@@ -73,10 +74,14 @@
         // As an input representation, this tells us that B3 should pick some register, but implies
         // that the def happens before any of the effects of the stackmap. This is only valid for
         // the result constraint of a Patchpoint.
         SomeEarlyRegister,
 
+        // As an input representation, this tells us that B3 should pick some register, but implies
+        // the use happens after any defs. This is only works for patchpoints.
+        SomeLateRegister,
+
         // As an input representation, this forces a particular register. As an output
         // representation, this tells us what register B3 picked.
         Register,
 
         // As an input representation, this forces a particular register and states that
@@ -88,11 +93,11 @@
         // As an output representation, this tells us what stack slot B3 picked. It's not a valid
         // input representation.
         Stack,
 
         // As an input representation, this forces the value to end up in the argument area at some
-        // offset.
+        // offset. As an output representation this tells us what offset from SP B3 picked.
         StackArgument,
 
         // As an output representation, this tells us that B3 constant-folded the value.
         Constant
     };
@@ -109,11 +114,11 @@
     }
 
     ValueRep(Kind kind)
         : m_kind(kind)
     {
-        ASSERT(kind == WarmAny || kind == ColdAny || kind == LateColdAny || kind == SomeRegister || kind == SomeRegisterWithClobber || kind == SomeEarlyRegister);
+        ASSERT(kind == WarmAny || kind == ColdAny || kind == LateColdAny || kind == SomeRegister || kind == SomeRegisterWithClobber || kind == SomeEarlyRegister || kind == SomeLateRegister);
     }
 
     static ValueRep reg(Reg reg)
     {
         return ValueRep(reg);
@@ -153,10 +158,15 @@
     static ValueRep constantDouble(double value)
     {
         return ValueRep::constant(bitwise_cast<int64_t>(value));
     }
 
+    static ValueRep constantFloat(float value)
+    {
+        return ValueRep::constant(static_cast<uint64_t>(bitwise_cast<uint32_t>(value)));
+    }
+
     Kind kind() const { return m_kind; }
 
     bool operator==(const ValueRep& other) const
     {
         if (kind() != other.kind())
@@ -183,11 +193,11 @@
 
     explicit operator bool() const { return kind() != WarmAny; }
 
     bool isAny() const { return kind() == WarmAny || kind() == ColdAny || kind() == LateColdAny; }
 
-    bool isReg() const { return kind() == Register || kind() == LateRegister; }
+    bool isReg() const { return kind() == Register || kind() == LateRegister || kind() == SomeLateRegister; }
 
     Reg reg() const
     {
         ASSERT(isReg());
         return u.reg;
@@ -226,10 +236,15 @@
     double doubleValue() const
     {
         return bitwise_cast<double>(value());
     }
 
+    float floatValue() const
+    {
+        return bitwise_cast<float>(static_cast<uint32_t>(static_cast<uint64_t>(value())));
+    }
+
     ValueRep withOffset(intptr_t offset) const
     {
         switch (kind()) {
         case Stack:
             return stack(offsetFromFP() + offset);
@@ -265,22 +280,22 @@
     // because some parts of JSC use ValueRecovery like a general "where my bits at" object, almost
     // exactly like ValueRep.
     ValueRecovery recoveryForJSValue() const;
 
 private:
-    Kind m_kind;
     union U {
         Reg reg;
         intptr_t offsetFromFP;
         intptr_t offsetFromSP;
         int64_t value;
 
         U()
         {
-            memset(this, 0, sizeof(*this));
+            memset(static_cast<void*>(this), 0, sizeof(*this));
         }
     } u;
+    Kind m_kind;
 };
 
 } } // namespace JSC::B3
 
 namespace WTF {
