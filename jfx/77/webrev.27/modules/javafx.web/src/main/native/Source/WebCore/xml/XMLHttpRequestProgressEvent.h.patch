diff a/modules/javafx.web/src/main/native/Source/WebCore/xml/XMLHttpRequestProgressEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/xml/XMLHttpRequestProgressEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/xml/XMLHttpRequestProgressEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/xml/XMLHttpRequestProgressEvent.h
@@ -30,22 +30,22 @@
 
 namespace WebCore {
 
 class XMLHttpRequestProgressEvent : public ProgressEvent {
 public:
-    static Ref<XMLHttpRequestProgressEvent> create(const AtomicString& type, bool lengthComputable = false, unsigned long long loaded = 0, unsigned long long total = 0)
+    static Ref<XMLHttpRequestProgressEvent> create(const AtomString& type, bool lengthComputable = false, unsigned long long loaded = 0, unsigned long long total = 0)
     {
         return adoptRef(*new XMLHttpRequestProgressEvent(type, lengthComputable, loaded, total));
     }
     // Those 2 synonyms are included for compatibility with Firefox.
     unsigned long long position() const { return loaded(); }
     unsigned long long totalSize() const { return total(); }
 
     EventInterface eventInterface() const override { return XMLHttpRequestProgressEventInterfaceType; }
 
 private:
-    XMLHttpRequestProgressEvent(const AtomicString& type, bool lengthComputable, unsigned long long loaded, unsigned long long total)
+    XMLHttpRequestProgressEvent(const AtomString& type, bool lengthComputable, unsigned long long loaded, unsigned long long total)
         : ProgressEvent(type, lengthComputable, loaded, total)
     {
     }
 };
 
