diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerThread.cpp b/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerThread.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerThread.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerThread.cpp
@@ -55,24 +55,26 @@
 #include <wtf/glib/GRefPtr.h>
 #endif
 
 namespace WebCore {
 
-static Lock threadSetMutex;
-
-static HashSet<WorkerThread*>& workerThreads()
+HashSet<WorkerThread*>& WorkerThread::workerThreads(const LockHolder&)
 {
     static NeverDestroyed<HashSet<WorkerThread*>> workerThreads;
-
     return workerThreads;
 }
 
-unsigned WorkerThread::workerThreadCount()
+Lock& WorkerThread::workerThreadsMutex()
 {
-    std::lock_guard<Lock> lock(threadSetMutex);
+    static Lock mutex;
+    return mutex;
+}
 
-    return workerThreads().size();
+unsigned WorkerThread::workerThreadCount()
+{
+    LockHolder lock(workerThreadsMutex());
+    return workerThreads(lock).size();
 }
 
 struct WorkerThreadStartupData {
     WTF_MAKE_NONCOPYABLE(WorkerThreadStartupData); WTF_MAKE_FAST_ALLOCATED;
 public:
@@ -109,35 +111,34 @@
     , m_sessionID(sessionID.isolatedCopy())
 {
 }
 
 WorkerThread::WorkerThread(const URL& scriptURL, const String& name, const String& identifier, const String& userAgent, bool isOnline, const String& sourceCode, WorkerLoaderProxy& workerLoaderProxy, WorkerDebuggerProxy& workerDebuggerProxy, WorkerReportingProxy& workerReportingProxy, WorkerThreadStartMode startMode, const ContentSecurityPolicyResponseHeaders& contentSecurityPolicyResponseHeaders, bool shouldBypassMainWorldContentSecurityPolicy, const SecurityOrigin& topOrigin, MonotonicTime timeOrigin, IDBClient::IDBConnectionProxy* connectionProxy, SocketProvider* socketProvider, JSC::RuntimeFlags runtimeFlags, PAL::SessionID sessionID)
-    : m_workerLoaderProxy(workerLoaderProxy)
+    : m_identifier(identifier.isolatedCopy())
+    , m_workerLoaderProxy(workerLoaderProxy)
     , m_workerDebuggerProxy(workerDebuggerProxy)
     , m_workerReportingProxy(workerReportingProxy)
     , m_runtimeFlags(runtimeFlags)
-    , m_startupData(std::make_unique<WorkerThreadStartupData>(scriptURL, name, identifier, userAgent, isOnline, sourceCode, startMode, contentSecurityPolicyResponseHeaders, shouldBypassMainWorldContentSecurityPolicy, topOrigin, timeOrigin, sessionID))
+    , m_startupData(makeUnique<WorkerThreadStartupData>(scriptURL, name, identifier, userAgent, isOnline, sourceCode, startMode, contentSecurityPolicyResponseHeaders, shouldBypassMainWorldContentSecurityPolicy, topOrigin, timeOrigin, sessionID))
 #if ENABLE(INDEXED_DATABASE)
     , m_idbConnectionProxy(connectionProxy)
 #endif
     , m_socketProvider(socketProvider)
 {
 #if !ENABLE(INDEXED_DATABASE)
     UNUSED_PARAM(connectionProxy);
 #endif
 
-    std::lock_guard<Lock> lock(threadSetMutex);
-
-    workerThreads().add(this);
+    LockHolder lock(workerThreadsMutex());
+    workerThreads(lock).add(this);
 }
 
 WorkerThread::~WorkerThread()
 {
-    std::lock_guard<Lock> lock(threadSetMutex);
-
-    ASSERT(workerThreads().contains(this));
-    workerThreads().remove(this);
+    LockHolder lock(workerThreadsMutex());
+    ASSERT(workerThreads(lock).contains(this));
+    workerThreads(lock).remove(this);
 }
 
 void WorkerThread::start(WTF::Function<void(const String&)>&& evaluateCallback)
 {
     // Mutex protection is necessary to ensure that m_thread is initialized when the thread starts.
@@ -312,13 +313,12 @@
     m_runLoop.terminate();
 }
 
 void WorkerThread::releaseFastMallocFreeMemoryInAllThreads()
 {
-    std::lock_guard<Lock> lock(threadSetMutex);
-
-    for (auto* workerThread : workerThreads()) {
+    LockHolder lock(workerThreadsMutex());
+    for (auto* workerThread : workerThreads(lock)) {
         workerThread->runLoop().postTask([] (ScriptExecutionContext&) {
             WTF::releaseFastMallocFreeMemory();
         });
     }
 }
