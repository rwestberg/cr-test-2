diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamInternals.js b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamInternals.js
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamInternals.js
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamInternals.js
@@ -111,10 +111,12 @@
             } catch (e) {
                 sink.error("ReadableStream chunk enqueueing in the sink failed");
                 return;
             }
             doPipe();
+        }, function(e) {
+            sink.error(e);
         });
     }
     doPipe();
 }
 
@@ -512,13 +514,13 @@
 
     @assert(!!@getByIdDirectPrivate(reader, "ownerReadableStream"));
     @assert(@getByIdDirectPrivate(@getByIdDirectPrivate(reader, "ownerReadableStream"), "reader") === reader);
 
     if (@getByIdDirectPrivate(@getByIdDirectPrivate(reader, "ownerReadableStream"), "state") === @streamReadable)
-        @getByIdDirectPrivate(reader, "closedPromiseCapability").@reject.@call(@undefined, new @TypeError("releasing lock of reader whose stream is still in readable state"));
+        @getByIdDirectPrivate(reader, "closedPromiseCapability").@reject.@call(@undefined, @makeTypeError("releasing lock of reader whose stream is still in readable state"));
     else
-        @putByIdDirectPrivate(reader, "closedPromiseCapability", { @promise: @newHandledRejectedPromise(new @TypeError("reader released lock")) });
+        @putByIdDirectPrivate(reader, "closedPromiseCapability", { @promise: @newHandledRejectedPromise(@makeTypeError("reader released lock")) });
 
     @putByIdDirectPrivate(@getByIdDirectPrivate(reader, "closedPromiseCapability").@promise, "promiseIsHandled", true);
     @putByIdDirectPrivate(@getByIdDirectPrivate(reader, "ownerReadableStream"), "reader", @undefined);
     @putByIdDirectPrivate(reader, "ownerReadableStream", @undefined);
 }
