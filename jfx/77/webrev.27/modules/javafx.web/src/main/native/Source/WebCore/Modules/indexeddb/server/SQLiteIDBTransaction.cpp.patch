diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/SQLiteIDBTransaction.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/SQLiteIDBTransaction.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/SQLiteIDBTransaction.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/SQLiteIDBTransaction.cpp
@@ -56,11 +56,11 @@
 
 IDBError SQLiteIDBTransaction::begin(SQLiteDatabase& database)
 {
     ASSERT(!m_sqliteTransaction);
 
-    m_sqliteTransaction = std::make_unique<SQLiteTransaction>(database, m_info.mode() == IDBTransactionMode::Readonly);
+    m_sqliteTransaction = makeUnique<SQLiteTransaction>(database, m_info.mode() == IDBTransactionMode::Readonly);
     m_sqliteTransaction->begin();
 
     if (m_sqliteTransaction->inProgress())
         return IDBError { };
 
@@ -85,11 +85,11 @@
     return IDBError { };
 }
 
 void SQLiteIDBTransaction::moveBlobFilesIfNecessary()
 {
-    String databaseDirectory = m_backingStore.fullDatabaseDirectory();
+    String databaseDirectory = m_backingStore.databaseDirectory();
     for (auto& entry : m_blobTemporaryAndStoredFilenames) {
         if (!FileSystem::hardLinkOrCopyFile(entry.first, FileSystem::pathByAppendingComponent(databaseDirectory, entry.second)))
             LOG_ERROR("Failed to link/copy temporary blob file '%s' to location '%s'", entry.first.utf8().data(), FileSystem::pathByAppendingComponent(databaseDirectory, entry.second).utf8().data());
 
         m_backingStore.temporaryFileHandler().accessToTemporaryFileComplete(entry.first);
@@ -101,11 +101,11 @@
 void SQLiteIDBTransaction::deleteBlobFilesIfNecessary()
 {
     if (m_blobRemovedFilenames.isEmpty())
         return;
 
-    String databaseDirectory = m_backingStore.fullDatabaseDirectory();
+    String databaseDirectory = m_backingStore.databaseDirectory();
     for (auto& entry : m_blobRemovedFilenames) {
         String fullPath = FileSystem::pathByAppendingComponent(databaseDirectory, entry);
         m_backingStore.temporaryFileHandler().accessToTemporaryFileComplete(fullPath);
     }
 
