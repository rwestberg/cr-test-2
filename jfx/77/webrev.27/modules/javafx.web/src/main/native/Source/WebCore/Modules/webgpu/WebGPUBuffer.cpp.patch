diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUBuffer.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUBuffer.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUBuffer.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUBuffer.cpp
@@ -26,20 +26,76 @@
 #include "config.h"
 #include "WebGPUBuffer.h"
 
 #if ENABLE(WEBGPU)
 
+#include "GPUErrorScopes.h"
+#include <wtf/text/StringConcatenate.h>
+
 namespace WebCore {
 
-Ref<WebGPUBuffer> WebGPUBuffer::create(Ref<GPUBuffer>&& buffer)
+Ref<WebGPUBuffer> WebGPUBuffer::create(RefPtr<GPUBuffer>&& buffer, GPUErrorScopes& errorScopes)
+{
+    return adoptRef(*new WebGPUBuffer(WTFMove(buffer), errorScopes));
+}
+
+WebGPUBuffer::WebGPUBuffer(RefPtr<GPUBuffer>&& buffer, GPUErrorScopes& errorScopes)
+    : GPUObjectBase(makeRef(errorScopes))
+    , m_buffer(WTFMove(buffer))
+{
+}
+
+void WebGPUBuffer::mapReadAsync(BufferMappingPromise&& promise)
+{
+    rejectOrRegisterPromiseCallback(WTFMove(promise), true);
+}
+
+void WebGPUBuffer::mapWriteAsync(BufferMappingPromise&& promise)
 {
-    return adoptRef(*new WebGPUBuffer(WTFMove(buffer)));
+    rejectOrRegisterPromiseCallback(WTFMove(promise), false);
 }
 
-WebGPUBuffer::WebGPUBuffer(Ref<GPUBuffer>&& buffer)
-    : m_buffer(WTFMove(buffer))
+void WebGPUBuffer::unmap()
 {
+    errorScopes().setErrorPrefix("GPUBuffer.unmap(): ");
+
+    if (!m_buffer)
+        errorScopes().generatePrefixedError("Invalid operation: invalid GPUBuffer!");
+    else
+        m_buffer->unmap(&errorScopes());
+}
+
+void WebGPUBuffer::destroy()
+{
+    errorScopes().setErrorPrefix("GPUBuffer.destroy(): ");
+
+    if (!m_buffer)
+        errorScopes().generatePrefixedError("Invalid operation!");
+    else {
+        m_buffer->destroy(&errorScopes());
+        m_buffer = nullptr;
+    }
+}
+
+void WebGPUBuffer::rejectOrRegisterPromiseCallback(BufferMappingPromise&& promise, bool isRead)
+{
+    errorScopes().setErrorPrefix(makeString("GPUBuffer.map", isRead ? "Read" : "Write", "Async(): "));
+
+    if (!m_buffer) {
+        errorScopes().generatePrefixedError("Invalid operation: invalid GPUBuffer!");
+        promise.reject();
+        return;
+    }
+
+    m_buffer->registerMappingCallback([promise = WTFMove(promise), protectedErrorScopes = makeRef(errorScopes())] (JSC::ArrayBuffer* arrayBuffer) mutable {
+        if (arrayBuffer)
+            promise.resolve(*arrayBuffer);
+        else {
+            protectedErrorScopes->generateError("", GPUErrorFilter::OutOfMemory);
+            promise.reject();
+        }
+    }, isRead, errorScopes());
 }
 
 } // namespace WebCore
 
 #endif // ENABLE(WEBGPU)
