diff a/modules/javafx.web/src/main/native/Source/WebCore/testing/js/WebCoreTestSupport.cpp b/modules/javafx.web/src/main/native/Source/WebCore/testing/js/WebCoreTestSupport.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/testing/js/WebCoreTestSupport.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/testing/js/WebCoreTestSupport.cpp
@@ -1,8 +1,8 @@
 /*
  * Copyright (C) 2011, 2015 Google Inc. All rights reserved.
- * Copyright (C) 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  *
@@ -44,23 +44,27 @@
 #include <JavaScriptCore/CallFrame.h>
 #include <JavaScriptCore/IdentifierInlines.h>
 #include <JavaScriptCore/JSValueRef.h>
 #include <wtf/URLParser.h>
 
+#if PLATFORM(COCOA)
+#include "UTIRegistry.h"
+#endif
+
 namespace WebCoreTestSupport {
 using namespace JSC;
 using namespace WebCore;
 
 void injectInternalsObject(JSContextRef context)
 {
     ExecState* exec = toJS(context);
-    JSLockHolder lock(exec);
+    VM& vm = exec->vm();
+    JSLockHolder lock(vm);
     JSDOMGlobalObject* globalObject = jsCast<JSDOMGlobalObject*>(exec->lexicalGlobalObject());
     ScriptExecutionContext* scriptContext = globalObject->scriptExecutionContext();
     if (is<Document>(*scriptContext)) {
-        VM& vm = exec->vm();
-        globalObject->putDirect(vm, Identifier::fromString(&vm, Internals::internalsId), toJS(exec, globalObject, Internals::create(downcast<Document>(*scriptContext))));
+        globalObject->putDirect(vm, Identifier::fromString(vm, Internals::internalsId), toJS(exec, globalObject, Internals::create(downcast<Document>(*scriptContext))));
         globalObject->exposeDollarVM(vm);
     }
 }
 
 void resetInternalsObject(JSContextRef context)
@@ -194,15 +198,23 @@
         auto* script = globalScope.script();
         if (!script)
             return;
 
         auto& state = *globalScope.execState();
-        JSLockHolder locker(state.vm());
+        auto& vm = state.vm();
+        JSLockHolder locker(vm);
         auto* contextWrapper = script->workerGlobalScopeWrapper();
-        contextWrapper->putDirect(state.vm(), Identifier::fromString(&state, Internals::internalsId), toJS(&state, contextWrapper, ServiceWorkerInternals::create(identifier)));
+        contextWrapper->putDirect(vm, Identifier::fromString(vm, Internals::internalsId), toJS(&state, contextWrapper, ServiceWorkerInternals::create(identifier)));
     });
 #else
     UNUSED_PARAM(serviceWorkerIdentifier);
 #endif
 }
 
+#if PLATFORM(COCOA)
+void setAdditionalSupportedImageTypesForTesting(const WTF::String& imageTypes)
+{
+    WebCore::setAdditionalSupportedImageTypesForTesting(imageTypes);
+}
+#endif
+
 }
