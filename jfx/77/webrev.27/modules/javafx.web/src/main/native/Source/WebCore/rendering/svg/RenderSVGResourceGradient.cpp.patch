diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGResourceGradient.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGResourceGradient.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGResourceGradient.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGResourceGradient.cpp
@@ -102,11 +102,11 @@
     // Be sure to synchronize all SVG properties on the gradientElement _before_ processing any further.
     // Otherwhise the call to collectGradientAttributes() in createTileImage(), may cause the SVG DOM property
     // synchronization to kick in, which causes removeAllClientsFromCache() to be called, which in turn deletes our
     // GradientData object! Leaving out the line below will cause svg/dynamic-updates/SVG*GradientElement-svgdom* to crash.
     if (m_shouldCollectGradientAttributes) {
-        gradientElement().synchronizeAnimatedSVGAttribute(anyQName());
+        gradientElement().synchronizeAllAttributes();
         if (!collectGradientAttributes())
             return false;
 
         m_shouldCollectGradientAttributes = false;
     }
@@ -117,11 +117,11 @@
     if (gradientUnits() == SVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX && objectBoundingBox.isEmpty())
         return false;
 
     auto& gradientData = m_gradientMap.add(&renderer, nullptr).iterator->value;
     if (!gradientData)
-        gradientData = std::make_unique<GradientData>();
+        gradientData = makeUnique<GradientData>();
 
     bool isPaintingText = resourceMode.contains(RenderSVGResourceMode::ApplyToText);
 
     // Create gradient object
     if (!gradientData->gradient) {
