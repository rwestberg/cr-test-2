diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCellInlines.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCellInlines.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCellInlines.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCellInlines.h
@@ -31,18 +31,20 @@
 #include "CPU.h"
 #include "CallFrame.h"
 #include "DeferGC.h"
 #include "FreeListInlines.h"
 #include "Handle.h"
+#include "HeapInlines.h"
 #include "IsoSubspaceInlines.h"
 #include "JSBigInt.h"
 #include "JSCast.h"
 #include "JSDestructibleObject.h"
 #include "JSObject.h"
 #include "JSString.h"
 #include "LocalAllocatorInlines.h"
 #include "MarkedBlock.h"
+#include "SlotVisitorInlines.h"
 #include "Structure.h"
 #include "Symbol.h"
 #include <wtf/CompilationThread.h>
 
 namespace JSC {
@@ -117,11 +119,11 @@
     return indexingTypeAndMisc() & AllArrayTypes;
 }
 
 ALWAYS_INLINE Structure* JSCell::structure() const
 {
-    return structure(*vm());
+    return structure(vm());
 }
 
 ALWAYS_INLINE Structure* JSCell::structure(VM& vm) const
 {
     return vm.getStructure(m_structureID);
@@ -138,14 +140,14 @@
 
 ALWAYS_INLINE VM& ExecState::vm() const
 {
     JSCell* callee = this->callee().asCell();
     ASSERT(callee);
-    ASSERT(callee->vm());
+    ASSERT(&callee->vm());
     ASSERT(!callee->isLargeAllocation());
     // This is an important optimization since we access this so often.
-    return *callee->markedBlock().vm();
+    return callee->markedBlock().vm();
 }
 
 template<typename CellType, SubspaceAccess>
 CompleteSubspace* JSCell::subspaceFor(VM& vm)
 {
@@ -163,11 +165,11 @@
 }
 
 template<typename T>
 ALWAYS_INLINE void* tryAllocateCellHelper(Heap& heap, size_t size, GCDeferralContext* deferralContext, AllocationFailureMode failureMode)
 {
-    VM& vm = *heap.vm();
+    VM& vm = heap.vm();
     ASSERT(deferralContext || !DisallowGC::isInEffectOnCurrentThread());
     ASSERT(size >= sizeof(T));
     JSCell* result = static_cast<JSCell*>(subspaceFor<T>(vm)->allocateNonVirtual(vm, size, deferralContext, failureMode));
     if (failureMode == AllocationFailureMode::ReturnNull && !result)
         return nullptr;
