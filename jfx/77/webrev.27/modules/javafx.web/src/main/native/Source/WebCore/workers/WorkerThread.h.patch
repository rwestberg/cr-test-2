diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerThread.h b/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerThread.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerThread.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerThread.h
@@ -60,10 +60,13 @@
 
 class WorkerThread : public ThreadSafeRefCounted<WorkerThread> {
 public:
     virtual ~WorkerThread();
 
+    static HashSet<WorkerThread*>& workerThreads(const LockHolder&);
+    static Lock& workerThreadsMutex();
+
     WEBCORE_EXPORT void start(WTF::Function<void(const String&)>&& evaluateCallback);
     void stop(WTF::Function<void()>&& terminatedCallback);
 
     Thread* thread() const { return m_thread.get(); }
     WorkerRunLoop& runLoop() { return m_runLoop; }
@@ -83,10 +86,12 @@
     void startRunningDebuggerTasks();
     void stopRunningDebuggerTasks();
 
     JSC::RuntimeFlags runtimeFlags() const { return m_runtimeFlags; }
 
+    String identifier() const { return m_identifier; }
+
 protected:
     WorkerThread(const URL&, const String& name, const String& identifier, const String& userAgent, bool isOnline, const String& sourceCode, WorkerLoaderProxy&, WorkerDebuggerProxy&, WorkerReportingProxy&, WorkerThreadStartMode, const ContentSecurityPolicyResponseHeaders&, bool shouldBypassMainWorldContentSecurityPolicy, const SecurityOrigin& topOrigin, MonotonicTime timeOrigin, IDBClient::IDBConnectionProxy*, SocketProvider*, JSC::RuntimeFlags, PAL::SessionID);
 
     // Factory method for creating a new worker context for the thread.
     virtual Ref<WorkerGlobalScope> createWorkerGlobalScope(const URL&, Ref<SecurityOrigin>&&, const String& name, const String& identifier, const String& userAgent, bool isOnline, const ContentSecurityPolicyResponseHeaders&, bool shouldBypassMainWorldContentSecurityPolicy, Ref<SecurityOrigin>&& topOrigin, MonotonicTime timeOrigin, PAL::SessionID) = 0;
@@ -102,10 +107,11 @@
 private:
     void workerThread();
     virtual bool isServiceWorkerThread() const { return false; }
 
     RefPtr<Thread> m_thread;
+    String m_identifier;
     WorkerRunLoop m_runLoop;
     WorkerLoaderProxy& m_workerLoaderProxy;
     WorkerDebuggerProxy& m_workerDebuggerProxy;
     WorkerReportingProxy& m_workerReportingProxy;
     JSC::RuntimeFlags m_runtimeFlags;
