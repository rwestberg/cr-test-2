diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakSet.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakSet.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakSet.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakSet.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2012-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2012-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -39,21 +39,22 @@
 
 public:
     static WeakImpl* allocate(JSValue, WeakHandleOwner* = 0, void* context = 0);
     static void deallocate(WeakImpl*);
 
-    WeakSet(VM*, CellContainer);
+    WeakSet(VM&, CellContainer);
     ~WeakSet();
     void lastChanceToFinalize();
 
     CellContainer container() const { return m_container; }
     void setContainer(CellContainer container) { m_container = container; }
 
     Heap* heap() const;
-    VM* vm() const;
+    VM& vm() const;
 
     bool isEmpty() const;
+    bool isTriviallyDestructible() const;
 
     void visit(SlotVisitor&);
 
     void reap();
     void sweep();
@@ -67,23 +68,23 @@
     void removeAllocator(WeakBlock*);
 
     WeakBlock::FreeCell* m_allocator;
     WeakBlock* m_nextAllocator;
     DoublyLinkedList<WeakBlock> m_blocks;
-    VM* m_vm;
+    VM& m_vm;
     CellContainer m_container;
 };
 
-inline WeakSet::WeakSet(VM* vm, CellContainer container)
+inline WeakSet::WeakSet(VM& vm, CellContainer container)
     : m_allocator(0)
     , m_nextAllocator(0)
     , m_vm(vm)
     , m_container(container)
 {
 }
 
-inline VM* WeakSet::vm() const
+inline VM& WeakSet::vm() const
 {
     return m_vm;
 }
 
 inline bool WeakSet::isEmpty() const
@@ -94,10 +95,19 @@
     }
 
     return true;
 }
 
+inline bool WeakSet::isTriviallyDestructible() const
+{
+    if (!m_blocks.isEmpty())
+        return false;
+    if (isOnList())
+        return false;
+    return true;
+}
+
 inline void WeakSet::deallocate(WeakImpl* weakImpl)
 {
     weakImpl->setState(WeakImpl::Deallocated);
 }
 
