diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InByIdStatus.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InByIdStatus.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InByIdStatus.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InByIdStatus.cpp
@@ -71,19 +71,20 @@
 
 InByIdStatus InByIdStatus::computeFor(
     CodeBlock* profiledBlock, ICStatusMap& baselineMap,
     ICStatusContextStack& contextStack, CodeOrigin codeOrigin, UniquedStringImpl* uid)
 {
-    ExitFlag didExit = hasBadCacheExitSite(profiledBlock, codeOrigin.bytecodeIndex);
+    unsigned bytecodeIndex = codeOrigin.bytecodeIndex();
+    ExitFlag didExit = hasBadCacheExitSite(profiledBlock, bytecodeIndex);
 
     for (ICStatusContext* context : contextStack) {
         ICStatus status = context->get(codeOrigin);
 
         auto bless = [&] (const InByIdStatus& result) -> InByIdStatus {
             if (!context->isInlined(codeOrigin)) {
                 InByIdStatus baselineResult = computeFor(
-                    profiledBlock, baselineMap, codeOrigin.bytecodeIndex, uid, didExit);
+                    profiledBlock, baselineMap, bytecodeIndex, uid, didExit);
                 baselineResult.merge(result);
                 return baselineResult;
             }
             if (didExit.isSet(ExitFromInlined))
                 return InByIdStatus(TakesSlowPath);
@@ -104,20 +105,20 @@
 
         if (status.inStatus)
             return bless(*status.inStatus);
     }
 
-    return computeFor(profiledBlock, baselineMap, codeOrigin.bytecodeIndex, uid, didExit);
+    return computeFor(profiledBlock, baselineMap, bytecodeIndex, uid, didExit);
 }
 #endif // ENABLE(JIT)
 
 #if ENABLE(DFG_JIT)
 InByIdStatus InByIdStatus::computeForStubInfo(const ConcurrentJSLocker& locker, CodeBlock* profiledBlock, StructureStubInfo* stubInfo, CodeOrigin codeOrigin, UniquedStringImpl* uid)
 {
     InByIdStatus result = InByIdStatus::computeForStubInfoWithoutExitSiteFeedback(locker, stubInfo, uid);
 
-    if (!result.takesSlowPath() && hasBadCacheExitSite(profiledBlock, codeOrigin.bytecodeIndex))
+    if (!result.takesSlowPath() && hasBadCacheExitSite(profiledBlock, codeOrigin.bytecodeIndex()))
         return InByIdStatus(TakesSlowPath);
     return result;
 }
 
 InByIdStatus InByIdStatus::computeForStubInfoWithoutExitSiteFeedback(const ConcurrentJSLocker&, StructureStubInfo* stubInfo, UniquedStringImpl* uid)
@@ -255,14 +256,14 @@
 {
     for (InByIdVariant& variant : m_variants)
         variant.markIfCheap(visitor);
 }
 
-bool InByIdStatus::finalize()
+bool InByIdStatus::finalize(VM& vm)
 {
     for (InByIdVariant& variant : m_variants) {
-        if (!variant.finalize())
+        if (!variant.finalize(vm))
             return false;
     }
     return true;
 }
 
