diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/KeyframeList.h b/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/KeyframeList.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/KeyframeList.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/KeyframeList.h
@@ -25,11 +25,11 @@
 #pragma once
 
 #include "CSSPropertyNames.h"
 #include <wtf/Vector.h>
 #include <wtf/HashSet.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
 class RenderStyle;
 class TimingFunction;
@@ -62,21 +62,21 @@
     RefPtr<TimingFunction> m_timingFunction;
 };
 
 class KeyframeList {
 public:
-    explicit KeyframeList(const AtomicString& animationName)
+    explicit KeyframeList(const AtomString& animationName)
         : m_animationName(animationName)
     {
     }
     ~KeyframeList();
 
     KeyframeList& operator=(KeyframeList&&) = default;
     bool operator==(const KeyframeList& o) const;
     bool operator!=(const KeyframeList& o) const { return !(*this == o); }
 
-    const AtomicString& animationName() const { return m_animationName; }
+    const AtomString& animationName() const { return m_animationName; }
 
     void insert(KeyframeValue&&);
 
     void addProperty(CSSPropertyID prop) { m_properties.add(prop); }
     bool containsProperty(CSSPropertyID prop) const { return m_properties.contains(prop); }
@@ -87,11 +87,11 @@
     size_t size() const { return m_keyframes.size(); }
     const KeyframeValue& operator[](size_t index) const { return m_keyframes[index]; }
     const Vector<KeyframeValue>& keyframes() const { return m_keyframes; }
 
 private:
-    AtomicString m_animationName;
+    AtomString m_animationName;
     Vector<KeyframeValue> m_keyframes; // Kept sorted by key.
     HashSet<CSSPropertyID> m_properties; // The properties being animated.
 };
 
 } // namespace WebCore
