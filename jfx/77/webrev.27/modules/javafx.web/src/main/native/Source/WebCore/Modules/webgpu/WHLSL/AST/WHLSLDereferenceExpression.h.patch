diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLDereferenceExpression.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLDereferenceExpression.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLDereferenceExpression.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLDereferenceExpression.h
@@ -26,34 +26,33 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "WHLSLExpression.h"
-#include "WHLSLLexer.h"
+#include <wtf/FastMalloc.h>
 #include <wtf/UniqueRef.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class DereferenceExpression : public Expression {
+class DereferenceExpression final : public Expression {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    DereferenceExpression(Lexer::Token&& origin, UniqueRef<Expression>&& pointer)
-        : Expression(WTFMove(origin))
+    DereferenceExpression(CodeLocation location, UniqueRef<Expression>&& pointer)
+        : Expression(location, Kind::Dereference)
         , m_pointer(WTFMove(pointer))
     {
     }
 
-    virtual ~DereferenceExpression() = default;
+    ~DereferenceExpression() = default;
 
     DereferenceExpression(const DereferenceExpression&) = delete;
     DereferenceExpression(DereferenceExpression&&) = default;
 
-    bool isDereferenceExpression() const override { return true; }
-
     Expression& pointer() { return m_pointer; }
 
 private:
     UniqueRef<Expression> m_pointer;
 };
@@ -62,8 +61,10 @@
 
 }
 
 }
 
+DEFINE_DEFAULT_DELETE(DereferenceExpression)
+
 SPECIALIZE_TYPE_TRAITS_WHLSL_EXPRESSION(DereferenceExpression, isDereferenceExpression())
 
 #endif
