diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/LoadableClassicScript.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/LoadableClassicScript.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/LoadableClassicScript.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/LoadableClassicScript.h
@@ -27,10 +27,11 @@
 
 #include "CachedResourceClient.h"
 #include "CachedResourceHandle.h"
 #include "CachedScript.h"
 #include "LoadableScript.h"
+#include "ReferrerPolicy.h"
 #include <wtf/TypeCasts.h>
 
 namespace WebCore {
 
 // A CachedResourceHandle alone does not prevent the underlying CachedResource
@@ -38,11 +39,11 @@
 // destroyed in order to guarantee that the data buffer will not be purged.
 class LoadableClassicScript final : public LoadableScript, private CachedResourceClient {
 public:
     virtual ~LoadableClassicScript();
 
-    static Ref<LoadableClassicScript> create(const String& nonce, const String& integrity, const String& crossOriginMode, const String& charset, const AtomicString& initiatorName, bool isInUserAgentShadowTree);
+    static Ref<LoadableClassicScript> create(const String& nonce, const String& integrity, ReferrerPolicy, const String& crossOriginMode, const String& charset, const AtomString& initiatorName, bool isInUserAgentShadowTree);
     bool isLoaded() const final;
     Optional<Error> error() const final;
     bool wasCanceled() const final;
 
     CachedScript& cachedScript() { return *m_cachedScript; }
@@ -53,12 +54,12 @@
     void execute(ScriptElement&) final;
 
     bool load(Document&, const URL&);
 
 private:
-    LoadableClassicScript(const String& nonce, const String& integrity, const String& crossOriginMode, const String& charset, const AtomicString& initiatorName, bool isInUserAgentShadowTree)
-        : LoadableScript(nonce, crossOriginMode, charset, initiatorName, isInUserAgentShadowTree)
+    LoadableClassicScript(const String& nonce, const String& integrity, ReferrerPolicy policy, const String& crossOriginMode, const String& charset, const AtomString& initiatorName, bool isInUserAgentShadowTree)
+        : LoadableScript(nonce, policy, crossOriginMode, charset, initiatorName, isInUserAgentShadowTree)
         , m_integrity(integrity)
     {
     }
 
     void notifyFinished(CachedResource&) final;
