diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTransformValue.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTransformValue.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTransformValue.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTransformValue.h
@@ -1,8 +1,9 @@
 /*
  * Copyright (C) 2004, 2005, 2008 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005 Rob Buis <buis@kde.org>
+ * Copyright (C) 2019 Apple Inc.  All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -18,12 +19,17 @@
  * Boston, MA 02110-1301, USA.
  */
 
 #pragma once
 
+#include "FloatConversion.h"
 #include "FloatPoint.h"
-#include "SVGMatrixValue.h"
+#include "FloatSize.h"
+#include "SVGMatrix.h"
+#include <wtf/HashMap.h>
+#include <wtf/NeverDestroyed.h>
+#include <wtf/text/StringBuilder.h>
 
 namespace WebCore {
 
 class FloatSize;
 
@@ -42,53 +48,245 @@
     enum ConstructionMode {
         ConstructIdentityTransform,
         ConstructZeroTransform
     };
 
-    SVGTransformValue();
-    SVGTransformValue(SVGTransformType, ConstructionMode = ConstructIdentityTransform);
-    explicit SVGTransformValue(const AffineTransform&);
+    SVGTransformValue(SVGTransformType type = SVG_TRANSFORM_MATRIX, const AffineTransform& transform = { })
+        : m_type(type)
+        , m_matrix(SVGMatrix::create(transform))
+    {
+    }
 
-    SVGTransformType type() const { return m_type; }
+    SVGTransformValue(const SVGTransformValue& other)
+        : m_type(other.m_type)
+        , m_matrix(SVGMatrix::create(other.matrix()->value()))
+        , m_angle(other.m_angle)
+        , m_rotationCenter(other.m_rotationCenter)
+    {
+    }
 
-    SVGMatrixValue& svgMatrix() { return static_cast<SVGMatrixValue&>(m_matrix); }
-    AffineTransform matrix() const { return m_matrix; }
-    void updateSVGMatrix();
+    SVGTransformValue(SVGTransformType type, Ref<SVGMatrix>&& matrix, float angle, const FloatPoint& rotationCenter)
+        : m_type(type)
+        , m_matrix(WTFMove(matrix))
+        , m_angle(angle)
+        , m_rotationCenter(rotationCenter)
+    {
+    }
 
-    float angle() const { return m_angle; }
-    FloatPoint rotationCenter() const { return m_center; }
+    SVGTransformValue(SVGTransformValue&& other)
+        : m_type(other.m_type)
+        , m_matrix(other.m_matrix.copyRef())
+        , m_angle(other.m_angle)
+        , m_rotationCenter(other.m_rotationCenter)
+    {
+    }
 
-    void setMatrix(const AffineTransform&);
-    void setTranslate(float tx, float ty);
-    void setScale(float sx, float sy);
-    void setRotate(float angle, float cx, float cy);
-    void setSkewX(float angle);
-    void setSkewY(float angle);
+    SVGTransformValue& operator=(const SVGTransformValue& other)
+    {
+        m_type = other.m_type;
+        m_matrix->setValue(other.m_matrix->value());
+        m_angle = other.m_angle;
+        m_rotationCenter = other.m_rotationCenter;
+        return *this;
+    }
 
-    FloatPoint translate() const;
-    FloatSize scale() const;
+    SVGTransformType type() const { return m_type; }
+    const Ref<SVGMatrix>& matrix() const { return m_matrix; }
+    float angle() const { return m_angle; }
+    FloatPoint rotationCenter() const { return m_rotationCenter; }
 
     bool isValid() const { return m_type != SVG_TRANSFORM_UNKNOWN; }
-    String valueAsString() const;
 
-    static const String& transformTypePrefixForParsing(SVGTransformType);
+    void setMatrix(const AffineTransform& matrix)
+    {
+        m_type = SVG_TRANSFORM_MATRIX;
+        m_angle = 0;
+        m_rotationCenter = FloatPoint();
+        m_matrix->setValue(matrix);
+    }
+
+    void matrixDidChange()
+    {
+        // The underlying matrix has been changed, alter the transformation type.
+        // Spec: In case the matrix object is changed directly (i.e., without using the methods on the SVGTransform interface itself)
+        // then the type of the SVGTransform changes to SVG_TRANSFORM_MATRIX.
+        m_type = SVG_TRANSFORM_MATRIX;
+        m_angle = 0;
+        m_rotationCenter = FloatPoint();
+    }
+
+    FloatPoint translate() const
+    {
+        return FloatPoint::narrowPrecision(m_matrix->e(), m_matrix->f());
+    }
+
+    void setTranslate(float tx, float ty)
+    {
+        m_type = SVG_TRANSFORM_TRANSLATE;
+        m_angle = 0;
+        m_rotationCenter = FloatPoint();
+
+        m_matrix->value().makeIdentity();
+        m_matrix->value().translate(tx, ty);
+    }
+
+    FloatSize scale() const
+    {
+        return FloatSize::narrowPrecision(m_matrix->a(), m_matrix->d());
+    }
+
+    void setScale(float sx, float sy)
+    {
+        m_type = SVG_TRANSFORM_SCALE;
+        m_angle = 0;
+        m_rotationCenter = FloatPoint();
+
+        m_matrix->value().makeIdentity();
+        m_matrix->value().scaleNonUniform(sx, sy);
+    }
+
+    void setRotate(float angle, float cx, float cy)
+    {
+        m_type = SVG_TRANSFORM_ROTATE;
+        m_angle = angle;
+        m_rotationCenter = FloatPoint(cx, cy);
+
+        // TODO: toString() implementation, which can show cx, cy (need to be stored?)
+        m_matrix->value().makeIdentity();
+        m_matrix->value().translate(cx, cy);
+        m_matrix->value().rotate(angle);
+        m_matrix->value().translate(-cx, -cy);
+    }
+
+    void setSkewX(float angle)
+    {
+        m_type = SVG_TRANSFORM_SKEWX;
+        m_angle = angle;
+        m_rotationCenter = FloatPoint();
+
+        m_matrix->value().makeIdentity();
+        m_matrix->value().skewX(angle);
+    }
+
+    void setSkewY(float angle)
+    {
+        m_type = SVG_TRANSFORM_SKEWY;
+        m_angle = angle;
+        m_rotationCenter = FloatPoint();
+
+        m_matrix->value().makeIdentity();
+        m_matrix->value().skewY(angle);
+    }
+
+    String valueAsString() const
+    {
+        StringBuilder builder;
+        builder.append(prefixForTransfromType(m_type));
+        switch (m_type) {
+        case SVG_TRANSFORM_UNKNOWN:
+            break;
+        case SVG_TRANSFORM_MATRIX:
+            appendMatrix(builder);
+            break;
+        case SVG_TRANSFORM_TRANSLATE:
+            appendTranslate(builder);
+            break;
+        case SVG_TRANSFORM_SCALE:
+            appendScale(builder);
+            break;
+        case SVG_TRANSFORM_ROTATE:
+            appendRotate(builder);
+            break;
+        case SVG_TRANSFORM_SKEWX:
+            appendSkewX(builder);
+            break;
+        case SVG_TRANSFORM_SKEWY:
+            appendSkewY(builder);
+            break;
+        }
+        return builder.toString();
+    }
+
+    static String prefixForTransfromType(SVGTransformType type)
+    {
+        switch (type) {
+        case SVG_TRANSFORM_UNKNOWN:
+            return emptyString();
+        case SVG_TRANSFORM_MATRIX:
+            return "matrix("_s;
+        case SVG_TRANSFORM_TRANSLATE:
+            return "translate("_s;
+        case SVG_TRANSFORM_SCALE:
+            return "scale("_s;
+        case SVG_TRANSFORM_ROTATE:
+            return "rotate("_s;
+        case SVG_TRANSFORM_SKEWX:
+            return "skewX("_s;
+        case SVG_TRANSFORM_SKEWY:
+            return "skewY("_s;
+        }
+        ASSERT_NOT_REACHED();
+        return emptyString();
+    }
 
 private:
-    friend bool operator==(const SVGTransformValue&, const SVGTransformValue&);
+    static void appendFixedPrecisionNumbers(StringBuilder& builder)
+    {
+        builder.append(')');
+    }
+
+    template<typename Number, typename... Numbers>
+    static void appendFixedPrecisionNumbers(StringBuilder& builder, Number number, Numbers... numbers)
+    {
+        if (builder.length() && builder[builder.length() - 1] != '(')
+            builder.append(' ');
+        builder.appendFixedPrecisionNumber(number);
+        appendFixedPrecisionNumbers(builder, numbers...);
+    }
+
+    void appendMatrix(StringBuilder& builder) const
+    {
+        appendFixedPrecisionNumbers(builder, m_matrix->a(), m_matrix->b(), m_matrix->c(), m_matrix->d(), m_matrix->e(), m_matrix->f());
+    }
+
+    void appendTranslate(StringBuilder& builder) const
+    {
+        appendFixedPrecisionNumbers(builder, m_matrix->e(), m_matrix->f());
+    }
+
+    void appendScale(StringBuilder& builder) const
+    {
+        appendFixedPrecisionNumbers(builder, m_matrix->value().xScale(), m_matrix->value().yScale());
+    }
+
+    void appendRotate(StringBuilder& builder) const
+    {
+        double angleInRad = deg2rad(m_angle);
+        double cosAngle = std::cos(angleInRad);
+        double sinAngle = std::sin(angleInRad);
+
+        float cx = narrowPrecisionToFloat(cosAngle != 1 ? (m_matrix->e() * (1 - cosAngle) - m_matrix->f() * sinAngle) / (1 - cosAngle) / 2 : 0);
+        float cy = narrowPrecisionToFloat(cosAngle != 1 ? (m_matrix->e() * sinAngle / (1 - cosAngle) + m_matrix->f()) / 2 : 0);
+
+        if (cx || cy)
+            appendFixedPrecisionNumbers(builder, m_angle, cx, cy);
+        else
+            appendFixedPrecisionNumbers(builder, m_angle);
+    }
+
+    void appendSkewX(StringBuilder& builder) const
+    {
+        appendFixedPrecisionNumbers(builder, m_angle);
+    }
+
+    void appendSkewY(StringBuilder& builder) const
+    {
+        appendFixedPrecisionNumbers(builder, m_angle);
+    }
 
     SVGTransformType m_type { SVG_TRANSFORM_UNKNOWN };
+    Ref<SVGMatrix> m_matrix;
     float m_angle { 0 };
-    FloatPoint m_center;
-    AffineTransform m_matrix;
+    FloatPoint m_rotationCenter;
 };
 
-inline bool operator==(const SVGTransformValue& a, const SVGTransformValue& b)
-{
-    return a.m_type == b.m_type && a.m_angle == b.m_angle && a.m_matrix == b.m_matrix;
-}
-
-inline bool operator!=(const SVGTransformValue& a, const SVGTransformValue& b)
-{
-    return !(a == b);
-}
-
 } // namespace WebCore
