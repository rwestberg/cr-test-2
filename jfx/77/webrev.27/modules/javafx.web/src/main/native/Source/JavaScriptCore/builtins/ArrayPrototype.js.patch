diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/ArrayPrototype.js b/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/ArrayPrototype.js
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/ArrayPrototype.js
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/ArrayPrototype.js
@@ -24,11 +24,11 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 @constructor
 @globalPrivate
-function createArrayIterator(iteratedObject, kind, iterationFunction)
+function ArrayIterator(iteratedObject, kind, iterationFunction)
 {
     "use strict";
 
     @putByIdDirectPrivate(this, "iteratedObject", iteratedObject);
     @putByIdDirectPrivate(this, "arrayIteratorKind", kind);
@@ -39,25 +39,25 @@
 
 function values()
 {
     "use strict";
 
-    return new @createArrayIterator(@toObject(this, "Array.prototype.values requires that |this| not be null or undefined"), "value", @arrayIteratorValueNext);
+    return new @ArrayIterator(@toObject(this, "Array.prototype.values requires that |this| not be null or undefined"), "value", @arrayIteratorValueNext);
 }
 
 function keys()
 {
     "use strict";
 
-    return new @createArrayIterator(@toObject(this, "Array.prototype.keys requires that |this| not be null or undefined"), "key", @arrayIteratorKeyNext);
+    return new @ArrayIterator(@toObject(this, "Array.prototype.keys requires that |this| not be null or undefined"), "key", @arrayIteratorKeyNext);
 }
 
 function entries()
 {
     "use strict";
 
-    return new @createArrayIterator(@toObject(this, "Array.prototype.entries requires that |this| not be null or undefined"), "key+value", @arrayIteratorKeyValueNext);
+    return new @ArrayIterator(@toObject(this, "Array.prototype.entries requires that |this| not be null or undefined"), "key+value", @arrayIteratorKeyValueNext);
 }
 
 function reduce(callback /*, initialValue */)
 {
     "use strict";
@@ -173,31 +173,11 @@
 
     if (typeof callback !== "function")
         @throwTypeError("Array.prototype.filter callback must be a function");
     
     var thisArg = @argument(1);
-
-    // Do 9.4.2.3 ArraySpeciesCreate
-    var result;
-    var constructor;
-    if (@isArray(array)) {
-        constructor = array.constructor;
-        // We have this check so that if some array from a different global object
-        // calls this map they don't get an array with the Array.prototype of the
-        // other global object.
-        if (@Array !== constructor && @isArrayConstructor(constructor))
-            constructor = @undefined;
-        if (@isObject(constructor)) {
-            constructor = constructor.@speciesSymbol;
-            if (constructor === null)
-                constructor = @undefined;
-        }
-    }
-    if (constructor === @Array || constructor === @undefined)
-        result = @newArrayWithSize(0);
-    else
-        result = new constructor(0);
+    var result = @arraySpeciesCreate(array, 0);
 
     var nextIndex = 0;
     for (var i = 0; i < length; i++) {
         if (!(i in array))
             continue;
@@ -219,31 +199,11 @@
 
     if (typeof callback !== "function")
         @throwTypeError("Array.prototype.map callback must be a function");
     
     var thisArg = @argument(1);
-
-    // Do 9.4.2.3 ArraySpeciesCreate
-    var result;
-    var constructor;
-    if (@isArray(array)) {
-        constructor = array.constructor;
-        // We have this check so that if some array from a different global object
-        // calls this map they don't get an array with the Array.prototype of the
-        // other global object.
-        if (@Array !== constructor && @isArrayConstructor(constructor))
-            constructor = @undefined;
-        if (@isObject(constructor)) {
-            constructor = constructor.@speciesSymbol;
-            if (constructor === null)
-                constructor = @undefined;
-        }
-    }
-    if (constructor === @Array || constructor === @undefined)
-        result = @newArrayWithSize(length);
-    else
-        result = new constructor(length);
+    var result = @arraySpeciesCreate(array, length);
 
     for (var i = 0; i < length; i++) {
         if (!(i in array))
             continue;
         var mappedValue = callback.@call(thisArg, array[i], i, array);
@@ -618,32 +578,13 @@
 function concatSlowPath()
 {
     "use strict";
 
     var currentElement = @toObject(this, "Array.prototype.concat requires that |this| not be null or undefined");
-
-    var constructor;
-    if (@isArray(currentElement)) {
-        constructor = currentElement.constructor;
-        // We have this check so that if some array from a different global object
-        // calls this map they don't get an array with the Array.prototype of the
-        // other global object.
-        if (@Array !== constructor && @isArrayConstructor(constructor))
-            constructor = @undefined;
-        else if (@isObject(constructor)) {
-            constructor = constructor.@speciesSymbol;
-            if (constructor === null)
-                constructor = @Array;
-        }
-    }
-
     var argCount = arguments.length;
-    var result;
-    if (constructor === @Array || constructor === @undefined)
-        result = @newArrayWithSize(0);
-    else
-        result = new constructor(0);
+
+    var result = @arraySpeciesCreate(currentElement, 0);
     var resultIsArray = @isJSArray(result);
 
     var resultIndex = 0;
     var argIndex = 0;
 
@@ -741,37 +682,10 @@
     }
 
     return array;
 }
 
-@globalPrivate
-function arraySpeciesCreate(array, length)
-{
-    "use strict";
-
-    if (!@isArray(array))
-        return @newArrayWithSize(length);
-
-    var constructor = array.constructor;
-    var arrayConstructorInRealm = @Array;
-    // We have this check so that if some array from a different global object
-    // calls this map they don't get an array with the Array.prototype of the
-    // other global object.
-    if (arrayConstructorInRealm !== constructor && @isArrayConstructor(constructor))
-        return @newArrayWithSize(length);
-
-    if (@isObject(constructor)) {
-        constructor = constructor.@speciesSymbol;
-        if (@isUndefinedOrNull(constructor))
-            return @newArrayWithSize(length);
-    }
-
-    if (constructor === arrayConstructorInRealm || constructor === @undefined)
-        return @newArrayWithSize(length);
-    return new constructor(length);
-}
-
 @globalPrivate
 function flatIntoArray(target, source, sourceLength, targetIndex, depth)
 {
     "use strict";
 
