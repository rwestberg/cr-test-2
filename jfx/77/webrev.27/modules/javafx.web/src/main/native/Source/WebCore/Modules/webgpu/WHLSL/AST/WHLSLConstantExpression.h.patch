diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLConstantExpression.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLConstantExpression.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLConstantExpression.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLConstantExpression.h
@@ -31,22 +31,24 @@
 #include "WHLSLEnumerationMemberLiteral.h"
 #include "WHLSLFloatLiteral.h"
 #include "WHLSLIntegerLiteral.h"
 #include "WHLSLNullLiteral.h"
 #include "WHLSLUnsignedIntegerLiteral.h"
+#include <wtf/FastMalloc.h>
 #include <wtf/Variant.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-// FIXME: macOS Sierra doesn't seem to support putting Variants inside Variants,
+// FIXME: https://bugs.webkit.org/show_bug.cgi?id=198158 macOS Sierra doesn't seem to support putting Variants inside Variants,
 // so this is a wrapper class to make sure that doesn't happen. As soon as we don't
 // have to support Sierra, this can be migrated to a Variant proper.
-class ConstantExpression {
+class ConstantExpression final {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     ConstantExpression(IntegerLiteral&& integerLiteral)
         : m_variant(WTFMove(integerLiteral))
     {
     }
@@ -86,18 +88,18 @@
     {
         ASSERT(WTF::holds_alternative<IntegerLiteral>(m_variant));
         return WTF::get<IntegerLiteral>(m_variant);
     }
 
-    template<typename T> void visit(T&& t)
+    template <typename Visitor> auto visit(const Visitor& visitor) -> decltype(WTF::visit(visitor, std::declval<Variant<IntegerLiteral, UnsignedIntegerLiteral, FloatLiteral, NullLiteral, BooleanLiteral, EnumerationMemberLiteral>&>()))
     {
-        WTF::visit(WTFMove(t), m_variant);
+        return WTF::visit(visitor, m_variant);
     }
 
-    template<typename T> void visit(T&& t) const
+    template <typename Visitor> auto visit(const Visitor& visitor) const -> decltype(WTF::visit(visitor, std::declval<Variant<IntegerLiteral, UnsignedIntegerLiteral, FloatLiteral, NullLiteral, BooleanLiteral, EnumerationMemberLiteral>&>()))
     {
-        WTF::visit(WTFMove(t), m_variant);
+        return WTF::visit(visitor, m_variant);
     }
 
     ConstantExpression clone() const
     {
         return WTF::visit(WTF::makeVisitor([&](const IntegerLiteral& integerLiteral) -> ConstantExpression {
