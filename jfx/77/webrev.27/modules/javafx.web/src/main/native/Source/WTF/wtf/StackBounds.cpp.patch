diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/StackBounds.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/StackBounds.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/StackBounds.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/StackBounds.cpp
@@ -17,13 +17,14 @@
  *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  *
  */
 
 #include "config.h"
+#include <wtf/StackBounds.h>
+
 #include <mutex>
 #include <wtf/NoTailCalls.h>
-#include <wtf/StackBounds.h>
 
 #if OS(DARWIN)
 
 #include <mach/task.h>
 #include <mach/thread_act.h>
@@ -185,13 +186,11 @@
     ASSERT(stackDirection() == StackDirection::Downward);
     MEMORY_BASIC_INFORMATION stackOrigin { };
     VirtualQuery(&stackOrigin, &stackOrigin, sizeof(stackOrigin));
     // stackOrigin.AllocationBase points to the reserved stack memory base address.
 
-    const LPVOID theAllocBase = stackOrigin.AllocationBase;
     void* origin = static_cast<char*>(stackOrigin.BaseAddress) + stackOrigin.RegionSize;
-
     // The stack on Windows consists out of three parts (uncommitted memory, a guard page and present
     // committed memory). The 3 regions have different BaseAddresses but all have the same AllocationBase
     // since they are all from the same VirtualAlloc. The 3 regions are laid out in memory (from high to
     // low) as follows:
     //
@@ -203,22 +202,29 @@
     //         | uncommittedMemory |    v
     //    Low  |-------------------|  ----- <--- stackOrigin.AllocationBase
     //
     // See http://msdn.microsoft.com/en-us/library/ms686774%28VS.85%29.aspx for more information.
 
+    MEMORY_BASIC_INFORMATION uncommittedMemory;
+
+#if PLATFORM(JAVA)
     // look for uncommited memory block.
-    MEMORY_BASIC_INFORMATION uncommittedMemory = { 0 };
+    const LPVOID theAllocBase = stackOrigin.AllocationBase;
     LPVOID a = stackOrigin.AllocationBase;
 
     do {
         size_t ret = VirtualQuery(a, &uncommittedMemory, sizeof(uncommittedMemory));
         ASSERT(ret != 0);
         a = (LPVOID)((static_cast<char*>(a)) + uncommittedMemory.RegionSize);
     } while (theAllocBase == uncommittedMemory.AllocationBase &&
         uncommittedMemory.State != MEM_RESERVE);
+#else
+    VirtualQuery(stackOrigin.AllocationBase, &uncommittedMemory, sizeof(uncommittedMemory));
+    ASSERT(uncommittedMemory.State == MEM_RESERVE);
+#endif
 
-    MEMORY_BASIC_INFORMATION guardPage{ 0 };
+    MEMORY_BASIC_INFORMATION guardPage;
     VirtualQuery(static_cast<char*>(uncommittedMemory.BaseAddress) + uncommittedMemory.RegionSize, &guardPage, sizeof(guardPage));
     ASSERT(guardPage.Protect & PAGE_GUARD);
 
     void* endOfStack = stackOrigin.AllocationBase;
 
@@ -230,13 +236,14 @@
     void* computedEnd = static_cast<char*>(origin) - (uncommittedMemory.RegionSize + guardPage.RegionSize + committedMemory.RegionSize);
 
     ASSERT(stackOrigin.AllocationBase == uncommittedMemory.AllocationBase);
     ASSERT(stackOrigin.AllocationBase == guardPage.AllocationBase);
     ASSERT(stackOrigin.AllocationBase == committedMemory.AllocationBase);
-    // TODO: refine the sanity checks below.
-    //ASSERT(stackOrigin.AllocationBase == uncommittedMemory.BaseAddress);
-    //ASSERT(endOfStack == computedEnd);
+#if !PLATFORM(JAVA)
+    ASSERT(stackOrigin.AllocationBase == uncommittedMemory.BaseAddress);
+    ASSERT(endOfStack == computedEnd);
+#endif
 #endif // NDEBUG
     void* bound = static_cast<char*>(endOfStack) + guardPage.RegionSize;
     return StackBounds { origin, bound };
 }
 
