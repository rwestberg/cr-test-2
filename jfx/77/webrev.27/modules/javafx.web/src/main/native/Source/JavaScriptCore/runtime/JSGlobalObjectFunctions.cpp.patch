diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSGlobalObjectFunctions.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSGlobalObjectFunctions.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSGlobalObjectFunctions.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSGlobalObjectFunctions.cpp
@@ -1,9 +1,9 @@
 /*
  *  Copyright (C) 1999-2002 Harri Porten (porten@kde.org)
  *  Copyright (C) 2001 Peter Kelly (pmk@post.com)
- *  Copyright (C) 2003-2018 Apple Inc. All rights reserved.
+ *  Copyright (C) 2003-2019 Apple Inc. All rights reserved.
  *  Copyright (C) 2007 Cameron Zwarich (cwzwarich@uwaterloo.ca)
  *  Copyright (C) 2007 Maks Orlovich
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Library General Public
@@ -42,10 +42,11 @@
 #include "JSPromiseDeferred.h"
 #include "JSString.h"
 #include "Lexer.h"
 #include "LiteralParser.h"
 #include "Nodes.h"
+#include "ObjectConstructor.h"
 #include "JSCInlines.h"
 #include "ParseInt.h"
 #include "Parser.h"
 #include "StackVisitor.h"
 #include <stdio.h>
@@ -55,16 +56,13 @@
 #include <wtf/Assertions.h>
 #include <wtf/HexNumber.h>
 #include <wtf/MathExtras.h>
 #include <wtf/dtoa.h>
 #include <wtf/text/StringBuilder.h>
-#include <wtf/unicode/UTF8Conversion.h>
 
 namespace JSC {
 
-using namespace WTF::Unicode;
-
 const ASCIILiteral ObjectProtoCalledOnNullOrUndefinedError { "Object.prototype.__proto__ called on null or undefined"_s };
 
 template<unsigned charactersCount>
 static Bitmap<256> makeCharacterBitmap(const char (&characters)[charactersCount])
 {
@@ -152,11 +150,11 @@
         }
     }
 
     if (UNLIKELY(builder.hasOverflowed()))
         return throwOutOfMemoryError(exec, scope);
-    return jsString(exec, builder.toString());
+    return jsString(vm, builder.toString());
 }
 
 static JSValue encode(ExecState* exec, const Bitmap<256>& doNotEscape)
 {
     return toStringView(exec, exec->argument(0), [&] (StringView view) {
@@ -181,14 +179,19 @@
         CharType c = *p;
         if (c == '%') {
             int charLen = 0;
             if (k <= length - 3 && isASCIIHexDigit(p[1]) && isASCIIHexDigit(p[2])) {
                 const char b0 = Lexer<CharType>::convertHex(p[1], p[2]);
-                const int sequenceLen = UTF8SequenceLength(b0);
-                if (sequenceLen && k <= length - sequenceLen * 3) {
+                const int sequenceLen = 1 + U8_COUNT_TRAIL_BYTES(b0);
+                if (k <= length - sequenceLen * 3) {
                     charLen = sequenceLen * 3;
-                    char sequence[5];
+#if U_ICU_VERSION_MAJOR_NUM >= 60
+                    uint8_t sequence[U8_MAX_LENGTH];
+#else
+                    // In pre-60 ICU, U8_COUNT_TRAIL_BYTES returns 0..5
+                    uint8_t sequence[6];
+#endif
                     sequence[0] = b0;
                     for (int i = 1; i < sequenceLen; ++i) {
                         const CharType* q = p + i * 3;
                         if (q[0] == '%' && isASCIIHexDigit(q[1]) && isASCIIHexDigit(q[2]))
                             sequence[i] = Lexer<CharType>::convertHex(q[1], q[2]);
@@ -196,20 +199,24 @@
                             charLen = 0;
                             break;
                         }
                     }
                     if (charLen != 0) {
-                        sequence[sequenceLen] = 0;
-                        const int character = decodeUTF8Sequence(sequence);
-                        if (character < 0 || character >= 0x110000)
+                        UChar32 character;
+                        int32_t offset = 0;
+                        U8_NEXT(sequence, offset, sequenceLen, character);
+                        if (character < 0)
                             charLen = 0;
-                        else if (character >= 0x10000) {
+                        else if (!U_IS_BMP(character)) {
                             // Convert to surrogate pair.
-                            builder.append(static_cast<UChar>(0xD800 | ((character - 0x10000) >> 10)));
-                            u = static_cast<UChar>(0xDC00 | ((character - 0x10000) & 0x3FF));
-                        } else
+                            ASSERT(U_IS_SUPPLEMENTARY(character));
+                            builder.append(U16_LEAD(character));
+                            u = U16_TRAIL(character);
+                        } else {
+                            ASSERT(!U_IS_SURROGATE(character));
                             u = static_cast<UChar>(character);
+                        }
                     }
                 }
             }
             if (charLen == 0) {
                 if (strict)
@@ -232,11 +239,11 @@
         k++;
         builder.append(c);
     }
     if (UNLIKELY(builder.hasOverflowed()))
         return throwOutOfMemoryError(exec, scope);
-    RELEASE_AND_RETURN(scope, jsString(&vm, builder.toString()));
+    RELEASE_AND_RETURN(scope, jsString(vm, builder.toString()));
 }
 
 static JSValue decode(ExecState* exec, const Bitmap<256>& doNotUnescape, bool strict)
 {
     return toStringView(exec, exec->argument(0), [&] (StringView view) {
@@ -592,10 +599,11 @@
         "0123456789"
         "*+-./@_"
     );
 
     return JSValue::encode(toStringView(exec, exec->argument(0), [&] (StringView view) {
+        VM& vm = exec->vm();
         StringBuilder builder;
         if (view.is8Bit()) {
             const LChar* c = view.characters8();
             for (unsigned k = 0; k < view.length(); k++, c++) {
                 int u = c[0];
@@ -604,11 +612,11 @@
                 else {
                     builder.append('%');
                     appendByteAsHex(u, builder);
                 }
             }
-            return jsString(exec, builder.toString());
+            return jsString(vm, builder.toString());
         }
 
         const UChar* c = view.characters16();
         for (unsigned k = 0; k < view.length(); k++, c++) {
             UChar u = c[0];
@@ -622,11 +630,11 @@
                 builder.append('%');
                 appendByteAsHex(u, builder);
             }
         }
 
-        return jsString(exec, builder.toString());
+        return jsString(vm, builder.toString());
     }));
 }
 
 EncodedJSValue JSC_HOST_CALL globalFuncUnescape(ExecState* exec)
 {
@@ -678,11 +686,11 @@
                 k++;
                 builder.append(*c);
             }
         }
 
-        return jsString(exec, builder.toString());
+        return jsString(exec->vm(), builder.toString());
     }));
 }
 
 EncodedJSValue JSC_HOST_CALL globalFuncThrowTypeError(ExecState* exec)
 {
@@ -696,10 +704,17 @@
     VM& vm = exec->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
     return throwVMTypeError(exec, scope, "'arguments', 'callee', and 'caller' cannot be accessed in this context.");
 }
 
+EncodedJSValue JSC_HOST_CALL globalFuncMakeTypeError(ExecState* exec)
+{
+    JSGlobalObject* globalObject = exec->lexicalGlobalObject();
+    Structure* errorStructure = globalObject->errorStructure(ErrorType::TypeError);
+    return JSValue::encode(ErrorInstance::create(exec, errorStructure, exec->argument(0), nullptr, TypeNothing, false));
+}
+
 EncodedJSValue JSC_HOST_CALL globalFuncProtoGetter(ExecState* exec)
 {
     VM& vm = exec->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
@@ -750,22 +765,35 @@
 {
     JSGlobalObject* globalObject = exec->lexicalGlobalObject();
     VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    if (!globalObject->globalObjectMethodTable()->promiseRejectionTracker)
+    JSPromise* promise = jsCast<JSPromise*>(exec->argument(0));
+
+    // InternalPromises should not be exposed to user scripts.
+    if (jsDynamicCast<JSInternalPromise*>(vm, promise))
         return JSValue::encode(jsUndefined());
 
-    JSPromise* promise = jsCast<JSPromise*>(exec->argument(0));
     JSValue operationValue = exec->argument(1);
 
     ASSERT(operationValue.isNumber());
     auto operation = static_cast<JSPromiseRejectionOperation>(operationValue.toUInt32(exec));
     ASSERT(operation == JSPromiseRejectionOperation::Reject || operation == JSPromiseRejectionOperation::Handle);
     scope.assertNoException();
 
-    globalObject->globalObjectMethodTable()->promiseRejectionTracker(globalObject, exec, promise, operation);
+    if (globalObject->globalObjectMethodTable()->promiseRejectionTracker)
+        globalObject->globalObjectMethodTable()->promiseRejectionTracker(globalObject, exec, promise, operation);
+    else {
+        switch (operation) {
+        case JSPromiseRejectionOperation::Reject:
+            vm.promiseRejected(promise);
+            break;
+        case JSPromiseRejectionOperation::Handle:
+            // do nothing
+            break;
+        }
+    }
     RETURN_IF_EXCEPTION(scope, { });
 
     return JSValue::encode(jsUndefined());
 }
 
@@ -775,11 +803,11 @@
     return JSValue::encode(jsUndefined());
 }
 
 EncodedJSValue JSC_HOST_CALL globalFuncBuiltinDescribe(ExecState* exec)
 {
-    return JSValue::encode(jsString(exec, toString(exec->argument(0))));
+    return JSValue::encode(jsString(exec->vm(), toString(exec->argument(0))));
 }
 
 EncodedJSValue JSC_HOST_CALL globalFuncImportModule(ExecState* exec)
 {
     VM& vm = exec->vm();
@@ -830,10 +858,19 @@
     PropertyDescriptor descriptor;
     bool enumerable = object->getOwnPropertyDescriptor(exec, propertyName, descriptor) && descriptor.enumerable();
     return JSValue::encode(jsBoolean(enumerable));
 }
 
+EncodedJSValue JSC_HOST_CALL globalFuncOwnKeys(ExecState* exec)
+{
+    VM& vm = exec->vm();
+    auto scope = DECLARE_THROW_SCOPE(vm);
+    JSObject* object = exec->argument(0).toObject(exec);
+    RETURN_IF_EXCEPTION(scope, encodedJSValue());
+    RELEASE_AND_RETURN(scope, JSValue::encode(ownPropertyKeys(exec, object, PropertyNameMode::StringsAndSymbols, DontEnumPropertiesMode::Include)));
+}
+
 #if ENABLE(INTL)
 EncodedJSValue JSC_HOST_CALL globalFuncDateTimeFormat(ExecState* exec)
 {
     VM& vm = exec->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
