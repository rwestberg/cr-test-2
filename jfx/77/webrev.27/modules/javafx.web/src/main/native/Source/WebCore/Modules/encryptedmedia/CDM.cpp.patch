diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/CDM.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/CDM.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/CDM.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/CDM.cpp
@@ -395,11 +395,11 @@
     SecurityOrigin& topOrigin = document->topOrigin();
 
     if ((accumulatedConfiguration.distinctiveIdentifier == MediaKeysRequirement::Required || accumulatedConfiguration.persistentState == MediaKeysRequirement::Required) && !origin.canAccessLocalStorage(&topOrigin))
         return WTF::nullopt;
 
-    return WTFMove(accumulatedConfiguration);
+    return accumulatedConfiguration;
     // NOTE: Continued in getConsentStatus().
 }
 
 Optional<Vector<MediaKeySystemMediaCapability>> CDM::getSupportedCapabilitiesForAudioVideoType(CDM::AudioVideoType type, const Vector<MediaKeySystemMediaCapability>& requestedCapabilities, const MediaKeySystemConfiguration& partialConfiguration, MediaKeysRestrictions& restrictions)
 {
@@ -607,21 +607,21 @@
 bool CDM::supportsSessions() const
 {
     return m_private && m_private->supportsSessions();
 }
 
-bool CDM::supportsInitDataType(const AtomicString& initDataType) const
+bool CDM::supportsInitDataType(const AtomString& initDataType) const
 {
     return m_private && m_private->supportsInitDataType(initDataType);
 }
 
-RefPtr<SharedBuffer> CDM::sanitizeInitData(const AtomicString& initDataType, const SharedBuffer& initData)
+RefPtr<SharedBuffer> CDM::sanitizeInitData(const AtomString& initDataType, const SharedBuffer& initData)
 {
     return InitDataRegistry::shared().sanitizeInitData(initDataType, initData);
 }
 
-bool CDM::supportsInitData(const AtomicString& initDataType, const SharedBuffer& initData)
+bool CDM::supportsInitData(const AtomString& initDataType, const SharedBuffer& initData)
 {
     return m_private && m_private->supportsInitData(initDataType, initData);
 }
 
 RefPtr<SharedBuffer> CDM::sanitizeResponse(const SharedBuffer& response)
