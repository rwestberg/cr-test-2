diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFrameElementBase.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFrameElementBase.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFrameElementBase.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFrameElementBase.cpp
@@ -1,11 +1,11 @@
 /*
  * Copyright (C) 1999 Lars Knoll (knoll@kde.org)
  *           (C) 1999 Antti Koivisto (koivisto@kde.org)
  *           (C) 2000 Simon Hausmann (hausmann@kde.org)
  *           (C) 2001 Dirk Mueller (mueller@kde.org)
- * Copyright (C) 2004-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2004-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -46,49 +46,46 @@
 
 using namespace HTMLNames;
 
 HTMLFrameElementBase::HTMLFrameElementBase(const QualifiedName& tagName, Document& document)
     : HTMLFrameOwnerElement(tagName, document)
-    , m_scrolling(ScrollbarAuto)
-    , m_marginWidth(-1)
-    , m_marginHeight(-1)
 {
     setHasCustomStyleResolveCallbacks();
 }
 
-bool HTMLFrameElementBase::isURLAllowed() const
+bool HTMLFrameElementBase::canLoadScriptURL(const URL& scriptURL) const
 {
-    if (m_URL.isEmpty())
-        return true;
-
-    return isURLAllowed(document().completeURL(m_URL));
+    return canLoadURL(scriptURL);
 }
 
-bool HTMLFrameElementBase::isURLAllowed(const URL& completeURL) const
+bool HTMLFrameElementBase::canLoad() const
 {
-    if (document().page() && document().page()->subframeCount() >= Page::maxNumberOfFrames)
-        return false;
+    // FIXME: Why is it valuable to return true when m_URL is empty?
+    // FIXME: After openURL replaces an empty URL with the blank URL, this may no longer necessarily return true.
+    return m_URL.isEmpty() || canLoadURL(m_URL);
+}
 
-    if (completeURL.isEmpty())
-        return true;
+bool HTMLFrameElementBase::canLoadURL(const String& relativeURL) const
+{
+    return canLoadURL(document().completeURL(relativeURL));
+}
 
+// Note that unlike HTMLPlugInImageElement::canLoadURL this uses ScriptController::canAccessFromCurrentOrigin.
+bool HTMLFrameElementBase::canLoadURL(const URL& completeURL) const
+{
     if (WTF::protocolIsJavaScript(completeURL)) {
-        RefPtr<Document> contentDoc = this->contentDocument();
-        if (contentDoc && !ScriptController::canAccessFromCurrentOrigin(contentDoc->frame()))
+        RefPtr<Document> contentDocument = this->contentDocument();
+        if (contentDocument && !ScriptController::canAccessFromCurrentOrigin(contentDocument->frame(), document()))
             return false;
     }
 
-    RefPtr<Frame> parentFrame = document().frame();
-    if (parentFrame)
-        return parentFrame->isURLAllowed(completeURL);
-
-    return true;
+    return !isProhibitedSelfReference(completeURL);
 }
 
 void HTMLFrameElementBase::openURL(LockHistory lockHistory, LockBackForwardList lockBackForwardList)
 {
-    if (!isURLAllowed())
+    if (!canLoad())
         return;
 
     if (m_URL.isEmpty())
         m_URL = WTF::blankURL().string();
 
@@ -101,30 +98,17 @@
         frameName = getIdAttribute();
 
     parentFrame->loader().subframeLoader().requestFrame(*this, m_URL, frameName, lockHistory, lockBackForwardList);
 }
 
-void HTMLFrameElementBase::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLFrameElementBase::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == srcdocAttr)
         setLocation("about:srcdoc");
     else if (name == srcAttr && !hasAttributeWithoutSynchronization(srcdocAttr))
         setLocation(stripLeadingAndTrailingHTMLSpaces(value));
-    else if (name == marginwidthAttr) {
-        m_marginWidth = value.toInt();
-        // FIXME: If we are already attached, this has no effect.
-    } else if (name == marginheightAttr) {
-        m_marginHeight = value.toInt();
-        // FIXME: If we are already attached, this has no effect.
-    } else if (name == scrollingAttr) {
-        // Auto and yes both simply mean "allow scrolling." No means "don't allow scrolling."
-        if (equalLettersIgnoringASCIICase(value, "auto") || equalLettersIgnoringASCIICase(value, "yes"))
-            m_scrolling = ScrollbarAuto;
-        else if (equalLettersIgnoringASCIICase(value, "no"))
-            m_scrolling = ScrollbarAlwaysOff;
-        // FIXME: If we are already attached, this has no effect.
-    } else
+    else
         HTMLFrameOwnerElement::parseAttribute(name, value);
 }
 
 Node::InsertedIntoAncestorResult HTMLFrameElementBase::insertedIntoAncestor(InsertionType insertionType, ContainerNode& parentOfInsertedTree)
 {
@@ -169,11 +153,11 @@
 void HTMLFrameElementBase::setLocation(const String& str)
 {
     if (document().settings().needsAcrobatFrameReloadingQuirk() && m_URL == str)
         return;
 
-    m_URL = AtomicString(str);
+    m_URL = AtomString(str);
 
     if (isConnected())
         openURL(LockHistory::No, LockBackForwardList::No);
 }
 
@@ -227,6 +211,12 @@
     if (!renderBox())
         return 0;
     return renderBox()->height();
 }
 
+ScrollbarMode HTMLFrameElementBase::scrollingMode() const
+{
+    return equalLettersIgnoringASCIICase(attributeWithoutSynchronization(scrollingAttr), "no")
+        ? ScrollbarAlwaysOff : ScrollbarAuto;
+}
+
 } // namespace WebCore
