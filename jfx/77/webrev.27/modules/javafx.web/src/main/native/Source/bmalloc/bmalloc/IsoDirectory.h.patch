diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoDirectory.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoDirectory.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoDirectory.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoDirectory.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -73,11 +73,10 @@
     void didDecommit(unsigned index) override;
 
     // Iterate over all empty and committed pages, and put them into the vector. This also records the
     // pages as being decommitted. It's the caller's job to do the actual decommitting.
     void scavenge(Vector<DeferredDecommit>&);
-    void scavengeToHighWatermark(Vector<DeferredDecommit>&);
 
     template<typename Func>
     void forEachCommittedPage(const Func&);
 
 private:
@@ -87,11 +86,10 @@
     // number of bitvectors does not matter as much as whether or not they make intuitive sense.
     Bits<numPages> m_eligible;
     Bits<numPages> m_empty;
     Bits<numPages> m_committed;
     std::array<IsoPage<Config>*, numPages> m_pages;
-    unsigned m_firstEligible { 0 };
-    unsigned m_highWatermark { 0 };
+    unsigned m_firstEligibleOrDecommitted { 0 };
 };
 
 } // namespace bmalloc
 
