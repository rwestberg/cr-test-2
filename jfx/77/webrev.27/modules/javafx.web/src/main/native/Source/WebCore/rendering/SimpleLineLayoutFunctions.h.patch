diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayoutFunctions.h b/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayoutFunctions.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayoutFunctions.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayoutFunctions.h
@@ -48,13 +48,14 @@
 void paintFlow(const RenderBlockFlow&, const Layout&, PaintInfo&, const LayoutPoint& paintOffset);
 bool hitTestFlow(const RenderBlockFlow&, const Layout&, const HitTestRequest&, HitTestResult&, const HitTestLocation& locationInContainer, const LayoutPoint& accumulatedOffset, HitTestAction);
 void collectFlowOverflow(RenderBlockFlow&, const Layout&);
 
 bool isTextRendered(const RenderText&, const Layout&);
-bool containsCaretOffset(const RenderObject&, const Layout&, unsigned);
-unsigned findCaretMinimumOffset(const RenderObject&, const Layout&);
-unsigned findCaretMaximumOffset(const RenderObject&, const Layout&);
+enum class OffsetType { CaretOffset, CharacterOffset };
+bool containsOffset(const RenderText&, const Layout&, unsigned, OffsetType);
+unsigned findCaretMinimumOffset(const RenderText&, const Layout&);
+unsigned findCaretMaximumOffset(const RenderText&, const Layout&);
 IntRect computeBoundingBox(const RenderObject&, const Layout&);
 IntPoint computeFirstRunLocation(const RenderObject&, const Layout&);
 
 Vector<IntRect> collectAbsoluteRects(const RenderObject&, const Layout&, const LayoutPoint& accumulatedOffset);
 Vector<FloatQuad> collectAbsoluteQuads(const RenderObject&, const Layout&, bool* wasFixed);
@@ -114,17 +115,17 @@
         return renderer.text().length();
     auto& last = layout.runAt(layout.runCount() - 1);
     return last.end;
 }
 
-inline bool containsCaretOffset(const RenderText&, const Layout& layout, unsigned offset)
+inline bool containsOffset(const RenderText&, const Layout& layout, unsigned offset, OffsetType offsetType)
 {
     for (unsigned i = 0; i < layout.runCount(); ++i) {
         auto& run = layout.runAt(i);
         if (offset < run.start)
             return false;
-        if (offset <= run.end)
+        if (offset < run.end || (offsetType == OffsetType::CaretOffset && offset == run.end))
             return true;
     }
     return false;
 }
 
