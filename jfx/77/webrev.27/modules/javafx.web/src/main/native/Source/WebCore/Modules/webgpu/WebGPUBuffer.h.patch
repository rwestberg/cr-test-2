diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUBuffer.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUBuffer.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUBuffer.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUBuffer.h
@@ -26,30 +26,42 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "GPUBuffer.h"
-
-#include <wtf/RefCounted.h>
+#include "GPUBufferUsage.h"
+#include "GPUObjectBase.h"
+#include "JSDOMPromiseDeferred.h"
 #include <wtf/RefPtr.h>
 
+namespace JSC {
+class ArrayBuffer;
+}
+
 namespace WebCore {
 
-class WebGPUBuffer : public RefCounted<WebGPUBuffer> {
+struct GPUBufferDescriptor;
+
+class WebGPUBuffer : public GPUObjectBase {
 public:
-    static Ref<WebGPUBuffer> create(Ref<GPUBuffer>&&);
+    static Ref<WebGPUBuffer> create(RefPtr<GPUBuffer>&&, GPUErrorScopes&);
 
-    const GPUBuffer& buffer() const { return m_buffer.get(); }
+    GPUBuffer* buffer() { return m_buffer.get(); }
+    const GPUBuffer* buffer() const { return m_buffer.get(); }
 
-    JSC::ArrayBuffer* mapping() const { return m_buffer->mapping(); }
-    void unmap() { /* FIXME: Unimplemented stub. */ }
-    void destroy() { /* FIXME: Unimplemented stub. */ }
+    using BufferMappingPromise = DOMPromiseDeferred<IDLInterface<JSC::ArrayBuffer>>;
+    void mapReadAsync(BufferMappingPromise&&);
+    void mapWriteAsync(BufferMappingPromise&&);
+    void unmap();
+    void destroy();
 
 private:
-    explicit WebGPUBuffer(Ref<GPUBuffer>&&);
+    explicit WebGPUBuffer(RefPtr<GPUBuffer>&&, GPUErrorScopes&);
+
+    void rejectOrRegisterPromiseCallback(BufferMappingPromise&&, bool);
 
-    Ref<GPUBuffer> m_buffer;
+    RefPtr<GPUBuffer> m_buffer;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(WEBGPU)
