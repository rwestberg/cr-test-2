diff a/modules/javafx.web/src/main/native/Source/WebCore/css/RuleFeature.h b/modules/javafx.web/src/main/native/Source/WebCore/css/RuleFeature.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/RuleFeature.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/RuleFeature.h
@@ -23,12 +23,12 @@
 
 #include "CSSSelector.h"
 #include <wtf/Forward.h>
 #include <wtf/HashMap.h>
 #include <wtf/HashSet.h>
-#include <wtf/text/AtomicString.h>
-#include <wtf/text/AtomicStringHash.h>
+#include <wtf/text/AtomString.h>
+#include <wtf/text/AtomStringHash.h>
 
 namespace WebCore {
 
 class RuleData;
 class StyleRule;
@@ -55,24 +55,24 @@
 struct RuleFeatureSet {
     void add(const RuleFeatureSet&);
     void clear();
     void shrinkToFit();
     void collectFeatures(const RuleData&);
-    void registerContentAttribute(const AtomicString&);
+    void registerContentAttribute(const AtomString&);
 
-    HashSet<AtomicString> idsInRules;
-    HashSet<AtomicString> idsMatchingAncestorsInRules;
-    HashSet<AtomicString> attributeCanonicalLocalNamesInRules;
-    HashSet<AtomicString> attributeLocalNamesInRules;
-    HashSet<AtomicString> contentAttributeNamesInRules;
+    HashSet<AtomString> idsInRules;
+    HashSet<AtomString> idsMatchingAncestorsInRules;
+    HashSet<AtomString> attributeCanonicalLocalNamesInRules;
+    HashSet<AtomString> attributeLocalNamesInRules;
+    HashSet<AtomString> contentAttributeNamesInRules;
     Vector<RuleFeature> siblingRules;
     Vector<RuleFeature> uncommonAttributeRules;
 
-    HashMap<AtomicString, std::unique_ptr<Vector<RuleFeature>>> classRules;
-    HashMap<AtomicString, std::unique_ptr<Vector<RuleFeature>>> attributeRules;
-    HashSet<AtomicString> classesAffectingHost;
-    HashSet<AtomicString> attributesAffectingHost;
+    HashMap<AtomString, std::unique_ptr<Vector<RuleFeature>>> classRules;
+    HashMap<AtomString, std::unique_ptr<Vector<RuleFeature>>> attributeRules;
+    HashSet<AtomString> classesAffectingHost;
+    HashSet<AtomString> attributesAffectingHost;
 
     bool usesFirstLineRules { false };
     bool usesFirstLetterRules { false };
 
 private:
@@ -80,11 +80,11 @@
     static MatchElement computeSubSelectorMatchElement(MatchElement, const CSSSelector&);
 
     struct SelectorFeatures {
         bool hasSiblingSelector { false };
 
-        Vector<std::pair<AtomicString, MatchElement>, 32> classes;
+        Vector<std::pair<AtomString, MatchElement>, 32> classes;
         Vector<std::pair<const CSSSelector*, MatchElement>, 32> attributes;
     };
     void recursivelyCollectFeaturesFromSelector(SelectorFeatures&, const CSSSelector&, MatchElement = MatchElement::Subject);
 };
 
