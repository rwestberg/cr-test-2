diff a/modules/javafx.web/src/main/native/Source/WebCore/page/Navigator.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/Navigator.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/Navigator.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/Navigator.cpp
@@ -40,49 +40,35 @@
 #include "ResourceLoadObserver.h"
 #include "RuntimeEnabledFeatures.h"
 #include "ScriptController.h"
 #include "SecurityOrigin.h"
 #include "Settings.h"
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/Language.h>
 #include <wtf/StdLibExtras.h>
 #include <wtf/WeakPtr.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(Navigator);
+
 Navigator::Navigator(ScriptExecutionContext* context, DOMWindow& window)
     : NavigatorBase(context)
     , DOMWindowProperty(&window)
 {
 }
 
 Navigator::~Navigator() = default;
 
-// If this function returns true, we need to hide the substring "4." that would otherwise
-// appear in the appVersion string. This is to avoid problems with old versions of a
-// library called OpenCube QuickMenu, which as of this writing is still being used on
-// sites such as nwa.com -- the library thinks Safari is Netscape 4 if we don't do this!
-static bool shouldHideFourDot(Frame& frame)
-{
-    auto* sourceURL = frame.script().sourceURL();
-    if (!sourceURL)
-        return false;
-    if (!(sourceURL->endsWith("/dqm_script.js") || sourceURL->endsWith("/dqm_loader.js") || sourceURL->endsWith("/tdqm_loader.js")))
-        return false;
-    return frame.settings().needsSiteSpecificQuirks();
-}
-
 String Navigator::appVersion() const
 {
     auto* frame = this->frame();
     if (!frame)
         return String();
     if (RuntimeEnabledFeatures::sharedFeatures().webAPIStatisticsEnabled())
         ResourceLoadObserver::shared().logNavigatorAPIAccessed(*frame->document(), ResourceLoadStatistics::NavigatorAPI::AppVersion);
-    String appVersion = NavigatorBase::appVersion();
-    if (shouldHideFourDot(*frame))
-        appVersion.replace("4.", "4_");
-    return appVersion;
+    return NavigatorBase::appVersion();
 }
 
 const String& Navigator::userAgent() const
 {
     auto* frame = this->frame();
@@ -93,11 +79,11 @@
     if (m_userAgent.isNull())
         m_userAgent = frame->loader().userAgentForJavaScript(frame->document()->url());
     return m_userAgent;
 }
 
-const String& Navigator::platform() const
+String Navigator::platform() const
 {
     auto* frame = this->frame();
     if (!frame || !frame->page())
         return m_platform;
 
@@ -165,22 +151,22 @@
     if (RuntimeEnabledFeatures::sharedFeatures().webAPIStatisticsEnabled()) {
         if (auto* frame = this->frame())
             ResourceLoadObserver::shared().logNavigatorAPIAccessed(*frame->document(), ResourceLoadStatistics::NavigatorAPI::Plugins);
     }
     if (!m_plugins)
-        m_plugins = DOMPluginArray::create(m_window);
+        m_plugins = DOMPluginArray::create(*this);
     return *m_plugins;
 }
 
 DOMMimeTypeArray& Navigator::mimeTypes()
 {
     if (RuntimeEnabledFeatures::sharedFeatures().webAPIStatisticsEnabled()) {
         if (auto* frame = this->frame())
             ResourceLoadObserver::shared().logNavigatorAPIAccessed(*frame->document(), ResourceLoadStatistics::NavigatorAPI::MimeTypes);
     }
     if (!m_mimeTypes)
-        m_mimeTypes = DOMMimeTypeArray::create(m_window);
+        m_mimeTypes = DOMMimeTypeArray::create(*this);
     return *m_mimeTypes;
 }
 
 bool Navigator::cookieEnabled() const
 {
