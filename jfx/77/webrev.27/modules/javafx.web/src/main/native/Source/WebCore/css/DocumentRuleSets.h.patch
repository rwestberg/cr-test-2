diff a/modules/javafx.web/src/main/native/Source/WebCore/css/DocumentRuleSets.h b/modules/javafx.web/src/main/native/Source/WebCore/css/DocumentRuleSets.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/DocumentRuleSets.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/DocumentRuleSets.h
@@ -57,12 +57,12 @@
     RuleSet* userStyle() const;
     const RuleFeatureSet& features() const;
     RuleSet* sibling() const { return m_siblingRuleSet.get(); }
     RuleSet* uncommonAttribute() const { return m_uncommonAttributeRuleSet.get(); }
 
-    const Vector<InvalidationRuleSet>* classInvalidationRuleSets(const AtomicString& className) const;
-    const Vector<InvalidationRuleSet>* attributeInvalidationRuleSets(const AtomicString& attributeName) const;
+    const Vector<InvalidationRuleSet>* classInvalidationRuleSets(const AtomString& className) const;
+    const Vector<InvalidationRuleSet>* attributeInvalidationRuleSets(const AtomString& attributeName) const;
 
     bool hasComplexSelectorsForStyleAttribute() const;
 
     void setIsForShadowScope() { m_isForShadowScope = true; }
 
@@ -74,10 +74,12 @@
 
     void resetUserAgentMediaQueryStyle();
 
     RuleFeatureSet& mutableFeatures();
 
+    static bool s_isInvalidatingStyleWithRuleSets;
+
 private:
     void collectFeatures() const;
     void collectRulesFromUserStyleSheets(const Vector<RefPtr<CSSStyleSheet>>&, RuleSet& userStyle, const MediaQueryEvaluator&, StyleResolver&);
     void updateUserAgentMediaQueryStyleIfNeeded() const;
 
@@ -87,12 +89,12 @@
 
     StyleResolver& m_styleResolver;
     mutable RuleFeatureSet m_features;
     mutable std::unique_ptr<RuleSet> m_siblingRuleSet;
     mutable std::unique_ptr<RuleSet> m_uncommonAttributeRuleSet;
-    mutable HashMap<AtomicString, std::unique_ptr<Vector<InvalidationRuleSet>>> m_classInvalidationRuleSets;
-    mutable HashMap<AtomicString, std::unique_ptr<Vector<InvalidationRuleSet>>> m_attributeInvalidationRuleSets;
+    mutable HashMap<AtomString, std::unique_ptr<Vector<InvalidationRuleSet>>> m_classInvalidationRuleSets;
+    mutable HashMap<AtomString, std::unique_ptr<Vector<InvalidationRuleSet>>> m_attributeInvalidationRuleSets;
 
     mutable Optional<bool> m_cachedHasComplexSelectorsForStyleAttribute;
 
     mutable unsigned m_defaultStyleVersionOnFeatureCollection { 0 };
     mutable unsigned m_userAgentMediaQueryRuleCountOnUpdate { 0 };
