diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ArrayAllocationProfile.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ArrayAllocationProfile.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ArrayAllocationProfile.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ArrayAllocationProfile.cpp
@@ -45,11 +45,17 @@
     //
     // - A concurrent thread reads m_lastArray, but that array is now dead. While
     //   it's possible for that array to no longer be reachable, it cannot actually
     //   be freed, since we require the GC to wait until all concurrent JITing
     //   finishes.
+    //
+    // But one exception is vector length. We access vector length to get the vector
+    // length hint. However vector length can be accessible only from the main
+    // thread because large butterfly can be realloced in the main thread.
+    // So for now, we update the allocation profile only from the main thread.
 
+    ASSERT(!isCompilationThread());
     JSArray* lastArray = m_lastArray;
     if (!lastArray)
         return;
     if (LIKELY(Options::useArrayAllocationProfiling())) {
         // The basic model here is that we will upgrade ourselves to whatever the CoW version of lastArray is except ArrayStorage since we don't have CoW ArrayStorage.
