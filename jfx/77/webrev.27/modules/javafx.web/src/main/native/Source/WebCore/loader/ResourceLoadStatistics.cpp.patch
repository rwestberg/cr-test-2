diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadStatistics.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadStatistics.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadStatistics.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadStatistics.cpp
@@ -35,38 +35,22 @@
 
 namespace WebCore {
 
 static Seconds timestampResolution { 5_s };
 
-typedef WTF::HashMap<String, unsigned, StringHash, HashTraits<String>, HashTraits<unsigned>>::KeyValuePairType ResourceLoadStatisticsValue;
+typedef WTF::HashMap<RegistrableDomain, unsigned, RegistrableDomain::RegistrableDomainHash, HashTraits<RegistrableDomain>, HashTraits<unsigned>>::KeyValuePairType ResourceLoadStatisticsValue;
 
-static void encodeHashCountedSet(KeyedEncoder& encoder, const String& label, const HashCountedSet<String>& hashCountedSet)
-{
-    if (hashCountedSet.isEmpty())
-        return;
-
-    encoder.encodeObjects(label, hashCountedSet.begin(), hashCountedSet.end(), [](KeyedEncoder& encoderInner, const ResourceLoadStatisticsValue& origin) {
-        encoderInner.encodeString("origin", origin.key);
-        encoderInner.encodeUInt32("count", origin.value);
-    });
-}
-
-static void encodeHashSet(KeyedEncoder& encoder, const String& label,  const String& key, const HashSet<String>& hashSet)
+static void encodeHashSet(KeyedEncoder& encoder, const String& label,  const String& key, const HashSet<RegistrableDomain>& hashSet)
 {
     if (hashSet.isEmpty())
         return;
 
-    encoder.encodeObjects(label, hashSet.begin(), hashSet.end(), [&key](KeyedEncoder& encoderInner, const String& origin) {
-        encoderInner.encodeString(key, origin);
+    encoder.encodeObjects(label, hashSet.begin(), hashSet.end(), [&key](KeyedEncoder& encoderInner, const RegistrableDomain& domain) {
+        encoderInner.encodeString(key, domain.string());
     });
 }
 
-static void encodeOriginHashSet(KeyedEncoder& encoder, const String& label, const HashSet<String>& hashSet)
-{
-    encodeHashSet(encoder, label, "origin", hashSet);
-}
-
 template<typename T>
 static void encodeOptionSet(KeyedEncoder& encoder, const String& label, const OptionSet<T>& optionSet)
 {
     if (optionSet.isEmpty())
         return;
@@ -92,41 +76,43 @@
 }
 #endif
 
 void ResourceLoadStatistics::encode(KeyedEncoder& encoder) const
 {
-    encoder.encodeString("PrevalentResourceOrigin", highLevelDomain);
+    encoder.encodeString("PrevalentResourceDomain"_s, registrableDomain.string());
 
-    encoder.encodeDouble("lastSeen", lastSeen.secondsSinceEpoch().value());
+    encoder.encodeDouble("lastSeen"_s, lastSeen.secondsSinceEpoch().value());
 
     // User interaction
-    encoder.encodeBool("hadUserInteraction", hadUserInteraction);
-    encoder.encodeDouble("mostRecentUserInteraction", mostRecentUserInteractionTime.secondsSinceEpoch().value());
-    encoder.encodeBool("grandfathered", grandfathered);
+    encoder.encodeBool("hadUserInteraction"_s, hadUserInteraction);
+    encoder.encodeDouble("mostRecentUserInteraction"_s, mostRecentUserInteractionTime.secondsSinceEpoch().value());
+    encoder.encodeBool("grandfathered"_s, grandfathered);
 
     // Storage access
-    encodeOriginHashSet(encoder, "storageAccessUnderTopFrameOrigins", storageAccessUnderTopFrameOrigins);
+    encodeHashSet(encoder, "storageAccessUnderTopFrameDomains"_s, "domain"_s, storageAccessUnderTopFrameDomains);
 
     // Top frame stats
-    encodeHashCountedSet(encoder, "topFrameUniqueRedirectsTo", topFrameUniqueRedirectsTo);
-    encodeHashCountedSet(encoder, "topFrameUniqueRedirectsFrom", topFrameUniqueRedirectsFrom);
+    encodeHashSet(encoder, "topFrameUniqueRedirectsTo"_s, "domain"_s, topFrameUniqueRedirectsTo);
+    encodeHashSet(encoder, "topFrameUniqueRedirectsFrom"_s, "domain"_s, topFrameUniqueRedirectsFrom);
+    encodeHashSet(encoder, "topFrameLinkDecorationsFrom"_s, "domain", topFrameLinkDecorationsFrom);
+    encoder.encodeBool("gotLinkDecorationFromPrevalentResource"_s, gotLinkDecorationFromPrevalentResource);
 
     // Subframe stats
-    encodeHashCountedSet(encoder, "subframeUnderTopFrameOrigins", subframeUnderTopFrameOrigins);
+    encodeHashSet(encoder, "subframeUnderTopFrameDomains"_s, "domain"_s, subframeUnderTopFrameDomains);
 
     // Subresource stats
-    encodeHashCountedSet(encoder, "subresourceUnderTopFrameOrigins", subresourceUnderTopFrameOrigins);
-    encodeHashCountedSet(encoder, "subresourceUniqueRedirectsTo", subresourceUniqueRedirectsTo);
-    encodeHashCountedSet(encoder, "subresourceUniqueRedirectsFrom", subresourceUniqueRedirectsFrom);
+    encodeHashSet(encoder, "subresourceUnderTopFrameDomains"_s, "domain"_s, subresourceUnderTopFrameDomains);
+    encodeHashSet(encoder, "subresourceUniqueRedirectsTo"_s, "domain"_s, subresourceUniqueRedirectsTo);
+    encodeHashSet(encoder, "subresourceUniqueRedirectsFrom"_s, "domain"_s, subresourceUniqueRedirectsFrom);
 
     // Prevalent Resource
-    encoder.encodeBool("isPrevalentResource", isPrevalentResource);
-    encoder.encodeBool("isVeryPrevalentResource", isVeryPrevalentResource);
-    encoder.encodeUInt32("dataRecordsRemoved", dataRecordsRemoved);
+    encoder.encodeBool("isPrevalentResource"_s, isPrevalentResource);
+    encoder.encodeBool("isVeryPrevalentResource"_s, isVeryPrevalentResource);
+    encoder.encodeUInt32("dataRecordsRemoved"_s, dataRecordsRemoved);
 
-    encoder.encodeUInt32("timesAccessedAsFirstPartyDueToUserInteraction", timesAccessedAsFirstPartyDueToUserInteraction);
-    encoder.encodeUInt32("timesAccessedAsFirstPartyDueToStorageAccessAPI", timesAccessedAsFirstPartyDueToStorageAccessAPI);
+    encoder.encodeUInt32("timesAccessedAsFirstPartyDueToUserInteraction"_s, timesAccessedAsFirstPartyDueToUserInteraction);
+    encoder.encodeUInt32("timesAccessedAsFirstPartyDueToStorageAccessAPI"_s, timesAccessedAsFirstPartyDueToStorageAccessAPI);
 
 #if ENABLE(WEB_API_STATISTICS)
     encodeFontHashSet(encoder, "fontsFailedToLoad", fontsFailedToLoad);
     encodeFontHashSet(encoder, "fontsSuccessfullyLoaded", fontsSuccessfullyLoaded);
     encodeHashCountedSet(encoder, "topFrameRegistrableDomainsWhichAccessedWebAPIs", topFrameRegistrableDomainsWhichAccessedWebAPIs);
@@ -134,43 +120,38 @@
     encodeOptionSet(encoder, "navigatorFunctionsAccessedBitMask", navigatorFunctionsAccessed);
     encodeOptionSet(encoder, "screenFunctionsAccessedBitMask", screenFunctionsAccessed);
 #endif
 }
 
-static void decodeHashCountedSet(KeyedDecoder& decoder, const String& label, HashCountedSet<String>& hashCountedSet)
+static void decodeHashCountedSet(KeyedDecoder& decoder, const String& label, HashCountedSet<RegistrableDomain>& hashCountedSet)
 {
     Vector<String> ignore;
-    decoder.decodeObjects(label, ignore, [&hashCountedSet](KeyedDecoder& decoderInner, String& origin) {
-        if (!decoderInner.decodeString("origin", origin))
+    decoder.decodeObjects(label, ignore, [&hashCountedSet](KeyedDecoder& decoderInner, String& domain) {
+        if (!decoderInner.decodeString("origin", domain))
             return false;
 
         unsigned count;
         if (!decoderInner.decodeUInt32("count", count))
             return false;
 
-        hashCountedSet.add(origin, count);
+        hashCountedSet.add(RegistrableDomain::uncheckedCreateFromRegistrableDomainString(domain), count);
         return true;
     });
 }
 
-static void decodeHashSet(KeyedDecoder& decoder, const String& label, const String& key, HashSet<String>& hashSet)
+static void decodeHashSet(KeyedDecoder& decoder, const String& label, const String& key, HashSet<RegistrableDomain>& hashSet)
 {
     Vector<String> ignore;
-    decoder.decodeObjects(label, ignore, [&hashSet, &key](KeyedDecoder& decoderInner, String& origin) {
-        if (!decoderInner.decodeString(key, origin))
+    decoder.decodeObjects(label, ignore, [&hashSet, &key](KeyedDecoder& decoderInner, String& domain) {
+        if (!decoderInner.decodeString(key, domain))
             return false;
 
-        hashSet.add(origin);
+        hashSet.add(RegistrableDomain::uncheckedCreateFromRegistrableDomainString(domain));
         return true;
     });
 }
 
-static void decodeOriginHashSet(KeyedDecoder& decoder, const String& label, HashSet<String>& hashSet)
-{
-    decodeHashSet(decoder, label, "origin", hashSet);
-}
-
 template<typename T>
 static void decodeOptionSet(KeyedDecoder& decoder, const String& label, OptionSet<T>& optionSet)
 {
     uint64_t optionSetBitMask = 0;
     decoder.decodeUInt64(label, optionSetBitMask);
@@ -200,35 +181,85 @@
 }
 #endif
 
 bool ResourceLoadStatistics::decode(KeyedDecoder& decoder, unsigned modelVersion)
 {
-    if (!decoder.decodeString("PrevalentResourceOrigin", highLevelDomain))
-        return false;
+    String registrableDomainAsString;
+    if (modelVersion >= 15) {
+        if (!decoder.decodeString("PrevalentResourceDomain", registrableDomainAsString))
+            return false;
+    } else {
+        if (!decoder.decodeString("PrevalentResourceOrigin", registrableDomainAsString))
+            return false;
+    }
+    registrableDomain = RegistrableDomain::uncheckedCreateFromRegistrableDomainString(registrableDomainAsString);
 
     // User interaction
     if (!decoder.decodeBool("hadUserInteraction", hadUserInteraction))
         return false;
 
     // Storage access
-    decodeOriginHashSet(decoder, "storageAccessUnderTopFrameOrigins", storageAccessUnderTopFrameOrigins);
+    if (modelVersion >= 15)
+        decodeHashSet(decoder, "storageAccessUnderTopFrameDomains", "domain", storageAccessUnderTopFrameDomains);
+    else
+        decodeHashSet(decoder, "storageAccessUnderTopFrameOrigins", "origin", storageAccessUnderTopFrameDomains);
 
     // Top frame stats
-    if (modelVersion >= 11) {
-        decodeHashCountedSet(decoder, "topFrameUniqueRedirectsTo", topFrameUniqueRedirectsTo);
-        decodeHashCountedSet(decoder, "topFrameUniqueRedirectsFrom", topFrameUniqueRedirectsFrom);
+    if (modelVersion >= 15) {
+        decodeHashSet(decoder, "topFrameUniqueRedirectsTo", "domain", topFrameUniqueRedirectsTo);
+        decodeHashSet(decoder, "topFrameUniqueRedirectsFrom", "domain", topFrameUniqueRedirectsFrom);
+    } else if (modelVersion >= 11) {
+        HashCountedSet<RegistrableDomain> topFrameUniqueRedirectsToCounted;
+        decodeHashCountedSet(decoder, "topFrameUniqueRedirectsTo", topFrameUniqueRedirectsToCounted);
+        for (auto& domain : topFrameUniqueRedirectsToCounted.values())
+            topFrameUniqueRedirectsTo.add(domain);
+
+        HashCountedSet<RegistrableDomain> topFrameUniqueRedirectsFromCounted;
+        decodeHashCountedSet(decoder, "topFrameUniqueRedirectsFrom", topFrameUniqueRedirectsFromCounted);
+        for (auto& domain : topFrameUniqueRedirectsFromCounted.values())
+            topFrameUniqueRedirectsFrom.add(domain);
+    }
+
+    if (modelVersion >= 16) {
+        decodeHashSet(decoder, "topFrameLinkDecorationsFrom", "domain", topFrameLinkDecorationsFrom);
+        if (!decoder.decodeBool("gotLinkDecorationFromPrevalentResource", gotLinkDecorationFromPrevalentResource))
+            return false;
     }
 
     // Subframe stats
-    if (modelVersion >= 14)
-        decodeHashCountedSet(decoder, "subframeUnderTopFrameOrigins", subframeUnderTopFrameOrigins);
+    if (modelVersion >= 15)
+        decodeHashSet(decoder, "subframeUnderTopFrameDomains", "domain", subframeUnderTopFrameDomains);
+    else if (modelVersion >= 14) {
+        HashCountedSet<RegistrableDomain> subframeUnderTopFrameDomainsCounted;
+        decodeHashCountedSet(decoder, "subframeUnderTopFrameOrigins", subframeUnderTopFrameDomainsCounted);
+        for (auto& domain : subframeUnderTopFrameDomainsCounted.values())
+            subframeUnderTopFrameDomains.add(domain);
+    }
 
     // Subresource stats
-    decodeHashCountedSet(decoder, "subresourceUnderTopFrameOrigins", subresourceUnderTopFrameOrigins);
-    decodeHashCountedSet(decoder, "subresourceUniqueRedirectsTo", subresourceUniqueRedirectsTo);
-    if (modelVersion >= 11)
-        decodeHashCountedSet(decoder, "subresourceUniqueRedirectsFrom", subresourceUniqueRedirectsFrom);
+    if (modelVersion >= 15) {
+        decodeHashSet(decoder, "subresourceUnderTopFrameDomains", "domain", subresourceUnderTopFrameDomains);
+        decodeHashSet(decoder, "subresourceUniqueRedirectsTo", "domain", subresourceUniqueRedirectsTo);
+        decodeHashSet(decoder, "subresourceUniqueRedirectsFrom", "domain", subresourceUniqueRedirectsFrom);
+    } else {
+        HashCountedSet<RegistrableDomain> subresourceUnderTopFrameDomainsCounted;
+        decodeHashCountedSet(decoder, "subresourceUnderTopFrameOrigins", subresourceUnderTopFrameDomainsCounted);
+        for (auto& domain : subresourceUnderTopFrameDomainsCounted.values())
+            subresourceUnderTopFrameDomains.add(domain);
+
+        HashCountedSet<RegistrableDomain> subresourceUniqueRedirectsToCounted;
+        decodeHashCountedSet(decoder, "subresourceUniqueRedirectsTo", subresourceUniqueRedirectsToCounted);
+        for (auto& domain : subresourceUniqueRedirectsToCounted.values())
+            subresourceUniqueRedirectsTo.add(domain);
+        if (modelVersion >= 11) {
+            HashCountedSet<RegistrableDomain> subresourceUniqueRedirectsFromCounted;
+            decodeHashCountedSet(decoder, "subresourceUniqueRedirectsFrom", subresourceUniqueRedirectsFromCounted);
+            for (auto& domain : subresourceUniqueRedirectsFromCounted.values())
+                subresourceUniqueRedirectsFrom.add(domain);
+        }
+    }
+
 
     // Prevalent Resource
     if (!decoder.decodeBool("isPrevalentResource", isPrevalentResource))
         return false;
 
@@ -286,40 +317,22 @@
     builder.append(label);
     builder.appendLiteral(": ");
     builder.append(flag ? "Yes" : "No");
 }
 
-static void appendHashCountedSet(StringBuilder& builder, const String& label, const HashCountedSet<String>& hashCountedSet)
-{
-    if (hashCountedSet.isEmpty())
-        return;
-
-    builder.appendLiteral("    ");
-    builder.append(label);
-    builder.appendLiteral(":\n");
-
-    for (auto& entry : hashCountedSet) {
-        builder.appendLiteral("        ");
-        builder.append(entry.key);
-        builder.appendLiteral(": ");
-        builder.appendNumber(entry.value);
-        builder.append('\n');
-    }
-}
-
-static void appendHashSet(StringBuilder& builder, const String& label, const HashSet<String>& hashSet)
+static void appendHashSet(StringBuilder& builder, const String& label, const HashSet<RegistrableDomain>& hashSet)
 {
     if (hashSet.isEmpty())
         return;
 
     builder.appendLiteral("    ");
     builder.append(label);
     builder.appendLiteral(":\n");
 
     for (auto& entry : hashSet) {
         builder.appendLiteral("        ");
-        builder.append(entry);
+        builder.append(entry.string());
         builder.append('\n');
     }
 }
 
 #if ENABLE(WEB_API_STATISTICS)
@@ -393,40 +406,42 @@
 #endif
 
 String ResourceLoadStatistics::toString() const
 {
     StringBuilder builder;
-    builder.appendLiteral("High level domain: ");
-    builder.append(highLevelDomain);
+    builder.appendLiteral("Registrable domain: ");
+    builder.append(registrableDomain.string());
     builder.append('\n');
     builder.appendLiteral("    lastSeen: ");
-    builder.appendNumber(lastSeen.secondsSinceEpoch().value());
+    builder.appendFixedPrecisionNumber(lastSeen.secondsSinceEpoch().value());
     builder.append('\n');
 
     // User interaction
     appendBoolean(builder, "hadUserInteraction", hadUserInteraction);
     builder.append('\n');
     builder.appendLiteral("    mostRecentUserInteraction: ");
-    builder.appendNumber(mostRecentUserInteractionTime.secondsSinceEpoch().value());
+    builder.appendFixedPrecisionNumber(mostRecentUserInteractionTime.secondsSinceEpoch().value());
     builder.append('\n');
     appendBoolean(builder, "grandfathered", grandfathered);
     builder.append('\n');
 
     // Storage access
-    appendHashSet(builder, "storageAccessUnderTopFrameOrigins", storageAccessUnderTopFrameOrigins);
+    appendHashSet(builder, "storageAccessUnderTopFrameDomains", storageAccessUnderTopFrameDomains);
 
     // Top frame stats
-    appendHashCountedSet(builder, "topFrameUniqueRedirectsTo", topFrameUniqueRedirectsTo);
-    appendHashCountedSet(builder, "topFrameUniqueRedirectsFrom", topFrameUniqueRedirectsFrom);
+    appendHashSet(builder, "topFrameUniqueRedirectsTo", topFrameUniqueRedirectsTo);
+    appendHashSet(builder, "topFrameUniqueRedirectsFrom", topFrameUniqueRedirectsFrom);
+    appendHashSet(builder, "topFrameLinkDecorationsFrom", topFrameLinkDecorationsFrom);
+    appendBoolean(builder, "gotLinkDecorationFromPrevalentResource", gotLinkDecorationFromPrevalentResource);
 
     // Subframe stats
-    appendHashCountedSet(builder, "subframeUnderTopFrameOrigins", subframeUnderTopFrameOrigins);
+    appendHashSet(builder, "subframeUnderTopFrameDomains", subframeUnderTopFrameDomains);
 
     // Subresource stats
-    appendHashCountedSet(builder, "subresourceUnderTopFrameOrigins", subresourceUnderTopFrameOrigins);
-    appendHashCountedSet(builder, "subresourceUniqueRedirectsTo", subresourceUniqueRedirectsTo);
-    appendHashCountedSet(builder, "subresourceUniqueRedirectsFrom", subresourceUniqueRedirectsFrom);
+    appendHashSet(builder, "subresourceUnderTopFrameDomains", subresourceUnderTopFrameDomains);
+    appendHashSet(builder, "subresourceUniqueRedirectsTo", subresourceUniqueRedirectsTo);
+    appendHashSet(builder, "subresourceUniqueRedirectsFrom", subresourceUniqueRedirectsFrom);
 
     // Prevalent Resource
     appendBoolean(builder, "isPrevalentResource", isPrevalentResource);
     builder.append('\n');
     appendBoolean(builder, "isVeryPrevalentResource", isVeryPrevalentResource);
@@ -464,11 +479,11 @@
         to.add(entry);
 }
 
 void ResourceLoadStatistics::merge(const ResourceLoadStatistics& other)
 {
-    ASSERT(other.highLevelDomain == highLevelDomain);
+    ASSERT(other.registrableDomain == registrableDomain);
 
     if (lastSeen < other.lastSeen)
         lastSeen = other.lastSeen;
 
     if (!other.hadUserInteraction) {
@@ -484,60 +499,41 @@
             mostRecentUserInteractionTime = other.mostRecentUserInteractionTime;
     }
     grandfathered |= other.grandfathered;
 
     // Storage access
-    mergeHashSet(storageAccessUnderTopFrameOrigins, other.storageAccessUnderTopFrameOrigins);
+    mergeHashSet(storageAccessUnderTopFrameDomains, other.storageAccessUnderTopFrameDomains);
 
     // Top frame stats
-    mergeHashCountedSet(topFrameUniqueRedirectsTo, other.topFrameUniqueRedirectsTo);
-    mergeHashCountedSet(topFrameUniqueRedirectsFrom, other.topFrameUniqueRedirectsFrom);
+    mergeHashSet(topFrameUniqueRedirectsTo, other.topFrameUniqueRedirectsTo);
+    mergeHashSet(topFrameUniqueRedirectsFrom, other.topFrameUniqueRedirectsFrom);
+    mergeHashSet(topFrameLinkDecorationsFrom, other.topFrameLinkDecorationsFrom);
+    gotLinkDecorationFromPrevalentResource |= other.gotLinkDecorationFromPrevalentResource;
 
     // Subframe stats
-    mergeHashCountedSet(subframeUnderTopFrameOrigins, other.subframeUnderTopFrameOrigins);
+    mergeHashSet(subframeUnderTopFrameDomains, other.subframeUnderTopFrameDomains);
 
     // Subresource stats
-    mergeHashCountedSet(subresourceUnderTopFrameOrigins, other.subresourceUnderTopFrameOrigins);
-    mergeHashCountedSet(subresourceUniqueRedirectsTo, other.subresourceUniqueRedirectsTo);
-    mergeHashCountedSet(subresourceUniqueRedirectsFrom, other.subresourceUniqueRedirectsFrom);
+    mergeHashSet(subresourceUnderTopFrameDomains, other.subresourceUnderTopFrameDomains);
+    mergeHashSet(subresourceUniqueRedirectsTo, other.subresourceUniqueRedirectsTo);
+    mergeHashSet(subresourceUniqueRedirectsFrom, other.subresourceUniqueRedirectsFrom);
 
     // Prevalent resource stats
     isPrevalentResource |= other.isPrevalentResource;
     isVeryPrevalentResource |= other.isVeryPrevalentResource;
     dataRecordsRemoved = std::max(dataRecordsRemoved, other.dataRecordsRemoved);
 
 #if ENABLE(WEB_API_STATISTICS)
     mergeHashSet(fontsFailedToLoad, other.fontsFailedToLoad);
     mergeHashSet(fontsSuccessfullyLoaded, other.fontsSuccessfullyLoaded);
-    mergeHashCountedSet(topFrameRegistrableDomainsWhichAccessedWebAPIs, other.topFrameRegistrableDomainsWhichAccessedWebAPIs);
+    mergeHashSet(topFrameRegistrableDomainsWhichAccessedWebAPIs, other.topFrameRegistrableDomainsWhichAccessedWebAPIs);
     canvasActivityRecord.mergeWith(other.canvasActivityRecord);
     navigatorFunctionsAccessed.add(other.navigatorFunctionsAccessed);
     screenFunctionsAccessed.add(other.screenFunctionsAccessed);
 #endif
 }
 
-String ResourceLoadStatistics::primaryDomain(const URL& url)
-{
-    return primaryDomain(url.host());
-}
-
-String ResourceLoadStatistics::primaryDomain(StringView host)
-{
-    if (host.isNull() || host.isEmpty())
-        return "nullOrigin"_s;
-
-    String hostString = host.toString();
-#if ENABLE(PUBLIC_SUFFIX_LIST)
-    String primaryDomain = topPrivatelyControlledDomain(hostString);
-    // We will have an empty string here if there is no TLD. Use the host as a fallback.
-    if (!primaryDomain.isEmpty())
-        return primaryDomain;
-#endif
-
-    return hostString;
-}
-
 WallTime ResourceLoadStatistics::reduceTimeResolution(WallTime time)
 {
     return WallTime::fromRawSeconds(std::floor(time.secondsSinceEpoch() / timestampResolution) * timestampResolution.seconds());
 }
 
