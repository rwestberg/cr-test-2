diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/remote/RemoteInspector.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/remote/RemoteInspector.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/remote/RemoteInspector.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/remote/RemoteInspector.h
@@ -25,10 +25,12 @@
 
 #pragma once
 
 #if ENABLE(REMOTE_INSPECTOR)
 
+#include "RemoteControllableTarget.h"
+
 #include <utility>
 #include <wtf/Forward.h>
 #include <wtf/HashMap.h>
 #include <wtf/Lock.h>
 #include <wtf/ProcessID.h>
@@ -49,10 +51,22 @@
 typedef struct _GCancellable GCancellable;
 typedef struct _GDBusConnection GDBusConnection;
 typedef struct _GDBusInterfaceVTable GDBusInterfaceVTable;
 #endif
 
+#if USE(INSPECTOR_SOCKET_SERVER)
+#include "RemoteConnectionToTarget.h"
+#include "RemoteInspectorConnectionClient.h"
+#include <wtf/JSONValues.h>
+#include <wtf/RefCounted.h>
+#include <wtf/RefPtr.h>
+
+namespace Inspector {
+using TargetListing = RefPtr<JSON::Object>;
+}
+#endif
+
 namespace Inspector {
 
 class RemoteAutomationTarget;
 class RemoteConnectionToTarget;
 class RemoteControllableTarget;
@@ -60,10 +74,12 @@
 class RemoteInspectorClient;
 
 class JS_EXPORT_PRIVATE RemoteInspector final
 #if PLATFORM(COCOA)
     : public RemoteInspectorXPCConnection::Client
+#elif USE(INSPECTOR_SOCKET_SERVER)
+    : public RemoteInspectorConnectionClient
 #endif
 {
 public:
     class Client {
     public:
@@ -96,20 +112,20 @@
     friend class NeverDestroyed<RemoteInspector>;
 
     void registerTarget(RemoteControllableTarget*);
     void unregisterTarget(RemoteControllableTarget*);
     void updateTarget(RemoteControllableTarget*);
-    void sendMessageToRemote(unsigned targetIdentifier, const String& message);
+    void sendMessageToRemote(TargetID, const String& message);
 
     RemoteInspector::Client* client() const { return m_client; }
     void setClient(RemoteInspector::Client*);
     void clientCapabilitiesDidChange();
     Optional<RemoteInspector::Client::Capabilities> clientCapabilities() const { return m_clientCapabilities; }
 
-    void setupFailed(unsigned targetIdentifier);
-    void setupCompleted(unsigned targetIdentifier);
-    bool waitingForAutomaticInspection(unsigned targetIdentifier);
+    void setupFailed(TargetID);
+    void setupCompleted(TargetID);
+    bool waitingForAutomaticInspection(TargetID);
     void updateAutomaticInspectionCandidate(RemoteInspectionTarget*);
 
     bool enabled() const { return m_enabled; }
     bool hasActiveDebugSession() const { return m_hasActiveDebugSession; }
 
@@ -122,22 +138,28 @@
     RetainPtr<CFDataRef> parentProcessAuditData() const { return m_parentProcessAuditData; }
     void setParentProcessInformation(ProcessID, RetainPtr<CFDataRef> auditData);
     void setParentProcessInfomationIsDelayed();
 #endif
 
-    void updateTargetListing(unsigned targetIdentifier);
+    void updateTargetListing(TargetID);
 
 #if USE(GLIB)
     void requestAutomationSession(const char* sessionID, const Client::SessionCapabilities&);
-    void setup(unsigned targetIdentifier);
-    void sendMessageToTarget(unsigned targetIdentifier, const char* message);
+#endif
+#if USE(GLIB) || USE(INSPECTOR_SOCKET_SERVER)
+    void setup(TargetID);
+    void sendMessageToTarget(TargetID, const char* message);
+#endif
+#if USE(INSPECTOR_SOCKET_SERVER)
+    static void setConnectionIdentifier(PlatformSocketType);
+    static void setServerPort(uint16_t);
 #endif
 
 private:
     RemoteInspector();
 
-    unsigned nextAvailableTargetIdentifier();
+    TargetID nextAvailableTargetIdentifier();
 
     enum class StopSource { API, XPCMessage };
     void stopInternal(StopSource);
 
 #if PLATFORM(COCOA)
@@ -146,20 +168,22 @@
 #if USE(GLIB)
     void setupConnection(GRefPtr<GDBusConnection>&&);
     static const GDBusInterfaceVTable s_interfaceVTable;
 
     void receivedGetTargetListMessage();
-    void receivedSetupMessage(unsigned targetIdentifier);
-    void receivedDataMessage(unsigned targetIdentifier, const char* message);
-    void receivedCloseMessage(unsigned targetIdentifier);
+    void receivedSetupMessage(TargetID);
+    void receivedDataMessage(TargetID, const char* message);
+    void receivedCloseMessage(TargetID);
     void receivedAutomationSessionRequestMessage(const char* sessionID);
 #endif
 
     TargetListing listingForTarget(const RemoteControllableTarget&) const;
     TargetListing listingForInspectionTarget(const RemoteInspectionTarget&) const;
     TargetListing listingForAutomationTarget(const RemoteAutomationTarget&) const;
 
+    bool updateTargetMap(RemoteControllableTarget*);
+
     void pushListingsNow();
     void pushListingsSoon();
 
     void updateTargetListing(const RemoteControllableTarget&);
 
@@ -182,38 +206,54 @@
     void receivedConnectionDiedMessage(NSDictionary *userInfo);
     void receivedAutomaticInspectionConfigurationMessage(NSDictionary *userInfo);
     void receivedAutomaticInspectionRejectMessage(NSDictionary *userInfo);
     void receivedAutomationSessionRequestMessage(NSDictionary *userInfo);
 #endif
+#if USE(INSPECTOR_SOCKET_SERVER)
+    HashMap<String, CallHandler>& dispatchMap() override;
+    void didClose(ConnectionID) override;
+
+    void sendWebInspectorEvent(const String&);
 
+    void receivedGetTargetListMessage(const Event&);
+    void receivedSetupMessage(const Event&);
+    void receivedDataMessage(const Event&);
+    void receivedCloseMessage(const Event&);
+#endif
     static bool startEnabled;
 
     // Targets can be registered from any thread at any time.
     // Any target can send messages over the XPC connection.
     // So lock access to all maps and state as they can change
     // from any thread.
     Lock m_mutex;
 
-    HashMap<unsigned, RemoteControllableTarget*> m_targetMap;
-    HashMap<unsigned, RefPtr<RemoteConnectionToTarget>> m_targetConnectionMap;
-    HashMap<unsigned, TargetListing> m_targetListingMap;
+    HashMap<TargetID, RemoteControllableTarget*> m_targetMap;
+    HashMap<TargetID, RefPtr<RemoteConnectionToTarget>> m_targetConnectionMap;
+    HashMap<TargetID, TargetListing> m_targetListingMap;
 
 #if PLATFORM(COCOA)
     RefPtr<RemoteInspectorXPCConnection> m_relayConnection;
 #endif
 #if USE(GLIB)
     GRefPtr<GDBusConnection> m_dbusConnection;
     GRefPtr<GCancellable> m_cancellable;
 #endif
 
+#if USE(INSPECTOR_SOCKET_SERVER)
+    static PlatformSocketType s_connectionIdentifier;
+    static uint16_t s_serverPort;
+    Optional<ConnectionID> m_clientID;
+#endif
+
     RemoteInspector::Client* m_client { nullptr };
     Optional<RemoteInspector::Client::Capabilities> m_clientCapabilities;
 
 #if PLATFORM(COCOA)
     dispatch_queue_t m_xpcQueue;
 #endif
-    unsigned m_nextAvailableTargetIdentifier { 1 };
+    TargetID m_nextAvailableTargetIdentifier { 1 };
     int m_notifyToken { 0 };
     bool m_enabled { false };
     bool m_hasActiveDebugSession { false };
     bool m_pushScheduled { false };
 
@@ -222,11 +262,11 @@
     RetainPtr<CFDataRef> m_parentProcessAuditData;
 #endif
     bool m_shouldSendParentProcessInformation { false };
     bool m_automaticInspectionEnabled { false };
     bool m_automaticInspectionPaused { false };
-    unsigned m_automaticInspectionCandidateTargetIdentifier { 0 };
+    TargetID m_automaticInspectionCandidateTargetIdentifier { 0 };
 };
 
 } // namespace Inspector
 
 #endif // ENABLE(REMOTE_INSPECTOR)
