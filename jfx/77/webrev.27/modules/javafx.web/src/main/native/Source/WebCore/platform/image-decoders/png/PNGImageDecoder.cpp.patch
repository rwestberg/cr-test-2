diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/image-decoders/png/PNGImageDecoder.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/image-decoders/png/PNGImageDecoder.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/image-decoders/png/PNGImageDecoder.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/image-decoders/png/PNGImageDecoder.cpp
@@ -145,38 +145,30 @@
             png_destroy_read_struct(&m_png, &m_info, 0);
         m_interlaceBuffer.reset();
         m_readOffset = 0;
     }
 
-    bool decode(const SharedBuffer& data, bool sizeOnly, unsigned haltAtFrame)
+    bool decode(const SharedBuffer::DataSegment& data, bool sizeOnly, unsigned haltAtFrame)
     {
         m_decodingSizeOnly = sizeOnly;
         PNGImageDecoder* decoder = static_cast<PNGImageDecoder*>(png_get_progressive_ptr(m_png));
 
         // We need to do the setjmp here. Otherwise bad things will happen.
         if (setjmp(JMPBUF(m_png)))
             return decoder->setFailed();
 
         auto bytesToSkip = m_readOffset;
+        auto bytesToUse = data.size() - bytesToSkip;
+        m_readOffset += bytesToUse;
+        m_currentBufferSize = m_readOffset;
+        png_process_data(m_png, m_info, reinterpret_cast<png_bytep>(const_cast<char*>(data.data() + bytesToSkip)), bytesToUse);
+        // We explicitly specify the superclass encodedDataStatus() because we
+        // merely want to check if we've managed to set the size, not
+        // (recursively) trigger additional decoding if we haven't.
+        if (sizeOnly ? decoder->ScalableImageDecoder::encodedDataStatus() >= EncodedDataStatus::SizeAvailable : decoder->isCompleteAtIndex(haltAtFrame))
+            return true;
 
-        // FIXME: Use getSomeData which is O(log(n)) instead of skipping bytes which is O(n).
-        for (const auto& element : data) {
-            if (bytesToSkip > element.segment->size()) {
-                bytesToSkip -= element.segment->size();
-                continue;
-            }
-            auto bytesToUse = element.segment->size() - bytesToSkip;
-            m_readOffset += bytesToUse;
-            m_currentBufferSize = m_readOffset;
-            png_process_data(m_png, m_info, reinterpret_cast<png_bytep>(const_cast<char*>(element.segment->data() + bytesToSkip)), bytesToUse);
-            bytesToSkip = 0;
-            // We explicitly specify the superclass encodedDataStatus() because we
-            // merely want to check if we've managed to set the size, not
-            // (recursively) trigger additional decoding if we haven't.
-            if (sizeOnly ? decoder->ScalableImageDecoder::encodedDataStatus() >= EncodedDataStatus::SizeAvailable : decoder->isCompleteAtIndex(haltAtFrame))
-                return true;
-        }
         return false;
     }
 
     png_structp pngPtr() const { return m_png; }
     png_infop infoPtr() const { return m_info; }
@@ -246,19 +238,10 @@
 
     return m_playCount;
 }
 #endif
 
-bool PNGImageDecoder::setSize(const IntSize& size)
-{
-    if (!ScalableImageDecoder::setSize(size))
-        return false;
-
-    prepareScaleDataIfNecessary();
-    return true;
-}
-
 ScalableImageDecoderFrame* PNGImageDecoder::frameBufferAtIndex(size_t index)
 {
 #if ENABLE(APNG)
     if (ScalableImageDecoder::encodedDataStatus() < EncodedDataStatus::SizeAvailable)
         return nullptr;
@@ -433,11 +416,11 @@
         return;
 #endif
     auto& buffer = m_frameBufferCache[m_currentFrame];
     if (buffer.isInvalid()) {
         png_structp png = m_reader->pngPtr();
-        if (!buffer.initialize(scaledSize(), m_premultiplyAlpha)) {
+        if (!buffer.initialize(size(), m_premultiplyAlpha)) {
             longjmp(JMPBUF(png), 1);
             return;
         }
 
         unsigned colorChannels = m_reader->hasAlpha() ? 4 : 3;
@@ -475,12 +458,11 @@
     // Nothing to do if the row is unchanged, or the row is outside
     // the image bounds: libpng may send extra rows, ignore them to
     // make our lives easier.
     if (!rowBuffer)
         return;
-    int y = !m_scaled ? rowIndex : scaledY(rowIndex);
-    if (y < 0 || y >= scaledSize().height())
+    if (rowIndex >= size().height())
         return;
 
     /* libpng comments (continued).
      *
      * For the non-NULL rows of interlaced images, you must call
@@ -514,12 +496,12 @@
 #endif
         png_progressive_combine_row(m_reader->pngPtr(), row, rowBuffer);
     }
 
     // Write the decoded row pixels to the frame buffer.
-    auto* address = buffer.backingStore()->pixelAt(0, y);
-    int width = scaledSize().width();
+    auto* address = buffer.backingStore()->pixelAt(0, rowIndex);
+    int width = size().width();
     unsigned char nonTrivialAlphaMask = 0;
 
     png_bytep pixel = row;
     if (hasAlpha) {
         for (int x = 0; x < width; ++x, pixel += 4, ++address) {
@@ -554,11 +536,11 @@
 {
     if (failed())
         return;
 
     if (!m_reader)
-        m_reader = std::make_unique<PNGImageReader>(this);
+        m_reader = makeUnique<PNGImageReader>(this);
 
     // If we couldn't decode the image but we've received all the data, decoding
     // has failed.
     if (!m_reader->decode(*m_data, onlySize, haltAtFrame) && allDataReceived)
         setFailed();
@@ -775,11 +757,11 @@
             longjmp(JMPBUF(png), 1);
     } else {
         // We want to clear the previous frame to transparent, without
         // affecting pixels in the image outside of the frame.
         IntRect prevRect = prevBuffer->backingStore()->frameRect();
-        if (!frameIndex || prevRect.contains(IntRect(IntPoint(), scaledSize()))) {
+        if (!frameIndex || prevRect.contains(IntRect(IntPoint(), size()))) {
             // Clearing the first frame, or a frame the size of the whole
             // image, results in a completely empty image.
             buffer.backingStore()->clear();
             buffer.setHasAlpha(true);
         } else {
@@ -799,15 +781,11 @@
     if (frameRect.maxX() > size().width())
         frameRect.setWidth(size().width() - m_xOffset);
     if (frameRect.maxY() > size().height())
         frameRect.setHeight(size().height() - m_yOffset);
 
-    int left = upperBoundScaledX(frameRect.x());
-    int right = lowerBoundScaledX(frameRect.maxX(), left);
-    int top = upperBoundScaledY(frameRect.y());
-    int bottom = lowerBoundScaledY(frameRect.maxY(), top);
-    buffer.backingStore()->setFrameRect(IntRect(left, top, right - left, bottom - top));
+    buffer.backingStore()->setFrameRect(frameRect);
 }
 
 void PNGImageDecoder::frameComplete()
 {
     if (m_frameIsHidden || m_currentFrame >= frameCount())
@@ -824,11 +802,10 @@
         unsigned colorChannels = hasAlpha ? 4 : 3;
         bool nonTrivialAlpha = false;
         if (m_blend && !hasAlpha)
             m_blend = 0;
 
-        ASSERT(!m_scaled);
         png_bytep row = interlaceBuffer;
         for (int y = rect.y(); y < rect.maxY(); ++y, row += colorChannels * size().width()) {
             png_bytep pixel = row;
             auto* address = buffer.backingStore()->pixelAt(rect.x(), y);
             for (int x = rect.x(); x < rect.maxX(); ++x, pixel += colorChannels) {
@@ -841,11 +818,11 @@
             }
         }
 
         if (!nonTrivialAlpha) {
             IntRect rect = buffer.backingStore()->frameRect();
-            if (rect.contains(IntRect(IntPoint(), scaledSize())))
+            if (rect.contains(IntRect(IntPoint(), size())))
                 buffer.setHasAlpha(false);
             else {
                 size_t frameIndex = m_currentFrame;
                 const auto* prevBuffer = &m_frameBufferCache[--frameIndex];
                 while (frameIndex && (prevBuffer->disposalMethod() == ScalableImageDecoderFrame::DisposalMethod::RestoreToPrevious))
