diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageAuditAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageAuditAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageAuditAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageAuditAgent.cpp
@@ -26,14 +26,17 @@
 #include "config.h"
 #include "PageAuditAgent.h"
 
 #include "InspectorAuditAccessibilityObject.h"
 #include "InspectorAuditDOMObject.h"
+#include "InspectorAuditResourcesObject.h"
 #include "JSInspectorAuditAccessibilityObject.h"
 #include "JSInspectorAuditDOMObject.h"
+#include "JSInspectorAuditResourcesObject.h"
 #include "Page.h"
 #include "PageConsoleClient.h"
+#include "ScriptState.h"
 #include <JavaScriptCore/CallFrame.h>
 #include <JavaScriptCore/InjectedScript.h>
 #include <JavaScriptCore/InjectedScriptManager.h>
 #include <JavaScriptCore/JSLock.h>
 #include <wtf/Ref.h>
@@ -49,10 +52,12 @@
     : InspectorAuditAgent(context)
     , m_inspectedPage(context.inspectedPage)
 {
 }
 
+PageAuditAgent::~PageAuditAgent() = default;
+
 InjectedScript PageAuditAgent::injectedScriptForEval(const int* executionContextId)
 {
     if (executionContextId)
         return injectedScriptManager().injectedScriptForId(*executionContextId);
 
@@ -63,13 +68,13 @@
 InjectedScript PageAuditAgent::injectedScriptForEval(ErrorString& errorString, const int* executionContextId)
 {
     InjectedScript injectedScript = injectedScriptForEval(executionContextId);
     if (injectedScript.hasNoValue()) {
         if (executionContextId)
-            errorString = "Execution context with given id not found."_s;
+            errorString = "Missing injected script for given executionContextId"_s;
         else
-            errorString = "Internal error: main world execution context not found."_s;
+            errorString = "Internal error: main world execution context not found"_s;
     }
     return injectedScript;
 }
 
 void PageAuditAgent::populateAuditObject(JSC::ExecState* execState, JSC::Strong<JSC::JSObject>& auditObject)
@@ -79,17 +84,21 @@
     ASSERT(execState);
     if (!execState)
         return;
 
     if (auto* globalObject = JSC::jsCast<JSDOMGlobalObject*>(execState->lexicalGlobalObject())) {
-        JSC::JSLockHolder lock(execState);
+        JSC::VM& vm = globalObject->vm();
+        JSC::JSLockHolder lock(vm);
+
+        if (JSC::JSValue jsInspectorAuditAccessibilityObject = toJSNewlyCreated(execState, globalObject, InspectorAuditAccessibilityObject::create(*this)))
+            auditObject->putDirect(vm, JSC::Identifier::fromString(vm, "Accessibility"), jsInspectorAuditAccessibilityObject);
 
-        if (JSC::JSValue jsInspectorAuditAccessibilityObject = toJSNewlyCreated(execState, globalObject, InspectorAuditAccessibilityObject::create(*this))) \
-            auditObject->putDirect(execState->vm(), JSC::Identifier::fromString(execState, "Accessibility"), jsInspectorAuditAccessibilityObject);
+        if (JSC::JSValue jsInspectorAuditDOMObject = toJSNewlyCreated(execState, globalObject, InspectorAuditDOMObject::create(*this)))
+            auditObject->putDirect(vm, JSC::Identifier::fromString(vm, "DOM"), jsInspectorAuditDOMObject);
 
-        if (JSC::JSValue jsInspectorAuditDOMObject = toJSNewlyCreated(execState, globalObject, InspectorAuditDOMObject::create(*this))) \
-            auditObject->putDirect(execState->vm(), JSC::Identifier::fromString(execState, "DOM"), jsInspectorAuditDOMObject);
+        if (JSC::JSValue jsInspectorAuditResourcesObject = toJSNewlyCreated(execState, globalObject, InspectorAuditResourcesObject::create(*this)))
+            auditObject->putDirect(vm, JSC::Identifier::fromString(vm, "Resources"), jsInspectorAuditResourcesObject);
     }
 }
 
 void PageAuditAgent::muteConsole()
 {
