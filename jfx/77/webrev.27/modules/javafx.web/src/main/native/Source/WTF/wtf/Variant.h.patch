diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/Variant.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/Variant.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/Variant.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/Variant.h
@@ -1438,10 +1438,11 @@
 template<typename ... _Types>
 class Variant:
         private __variant_base<
     Variant<_Types...>,__all_trivially_destructible<_Types...>::__value>
 {
+    WTF_MAKE_FAST_ALLOCATED;
     typedef __variant_base<Variant<_Types...>,__all_trivially_destructible<_Types...>::__value> __base_type;
     friend __base_type;
     friend struct __copy_construct_op_table<Variant>;
     friend struct __copy_assign_op_table<Variant>;
     friend struct __move_construct_op_table<Variant>;
@@ -1723,10 +1724,11 @@
 };
 
 template<>
 class Variant<>{
 public:
+    WTF_MAKE_FAST_ALLOCATED;
     Variant()=delete;
 
     constexpr bool valueless_by_exception() const __NOEXCEPT{
         return true;
     }
@@ -1866,17 +1868,17 @@
     template<typename _Type>
     static __return_type __trampoline_func(_Visitor& __visitor,__variant_type& __v){
         return __visitor(get<_Type>(__v));
     }
 
-    static constexpr __func_type __trampoline[sizeof...(_Types)]={
-        &__trampoline_func<_Types>...
-    };
+    static const __func_type __trampoline[sizeof...(_Types)];
 };
 
 template<typename _Visitor,typename ... _Types>
-constexpr typename __visitor_table<_Visitor,_Types...>::__func_type __visitor_table<_Visitor,_Types...>::__trampoline[sizeof...(_Types)];
+const typename __visitor_table<_Visitor,_Types...>::__func_type __visitor_table<_Visitor,_Types...>::__trampoline[sizeof...(_Types)]={
+        &__trampoline_func<_Types>...
+    };
 
 template<typename _Visitor,typename ... _Types>
 constexpr typename __visitor_return_type<_Visitor,_Types...>::__type
 visit(_Visitor&& __visitor,Variant<_Types...>& __v){
     return (__v.valueless_by_exception())
@@ -2042,13 +2044,13 @@
 };
 
 // -- WebKit Additions --
 
 template<class V, class... F>
-auto switchOn(V&& v, F&&... f) -> decltype(visit(makeVisitor(std::forward<F>(f)...), std::forward<V>(v)))
+auto switchOn(V&& v, F&&... f) -> decltype(WTF::visit(makeVisitor(std::forward<F>(f)...), std::forward<V>(v)))
 {
-    return visit(makeVisitor(std::forward<F>(f)...), std::forward<V>(v));
+    return WTF::visit(makeVisitor(std::forward<F>(f)...), std::forward<V>(v));
 }
 
 } // namespace WTF
 
 namespace std {
