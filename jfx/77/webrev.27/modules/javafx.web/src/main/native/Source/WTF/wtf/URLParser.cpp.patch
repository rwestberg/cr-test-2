diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/URLParser.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/URLParser.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/URLParser.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/URLParser.cpp
@@ -42,10 +42,11 @@
 #define URL_PARSER_LOG(...)
 #endif
 
 template<typename CharacterType>
 class CodePointIterator {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     ALWAYS_INLINE CodePointIterator() { }
     ALWAYS_INLINE CodePointIterator(const CharacterType* begin, const CharacterType* end)
         : m_begin(begin)
         , m_end(end)
@@ -66,17 +67,10 @@
         return m_begin == other.m_begin
             && m_end == other.m_end;
     }
     ALWAYS_INLINE bool operator!=(const CodePointIterator& other) const { return !(*this == other); }
 
-    ALWAYS_INLINE CodePointIterator& operator=(const CodePointIterator& other)
-    {
-        m_begin = other.m_begin;
-        m_end = other.m_end;
-        return *this;
-    }
-
     ALWAYS_INLINE bool atEnd() const
     {
         ASSERT(m_begin <= m_end);
         return m_begin >= m_end;
     }
@@ -2320,11 +2314,11 @@
             return makeUnexpected(IPv4ParsingError::NotIPv4);
         items.append(parseIPv4Piece(iterator, didSeeSyntaxViolation));
         if (!iterator.atEnd() && *iterator == '.') {
             ++iterator;
             if (iterator.atEnd())
-                syntaxViolation(iteratorForSyntaxViolationPosition);
+                didSeeSyntaxViolation = true;
             else if (*iterator == '.')
                 return makeUnexpected(IPv4ParsingError::NotIPv4);
         }
     }
     if (!iterator.atEnd() || !items.size() || items.size() > 4)
@@ -2427,20 +2421,23 @@
         return WTF::nullopt;
 
     IPv6Address address = {{0, 0, 0, 0, 0, 0, 0, 0}};
     size_t piecePointer = 0;
     Optional<size_t> compressPointer;
+    bool previousValueWasZero = false;
+    bool immediatelyAfterCompress = false;
 
     if (*c == ':') {
         advance(c, hostBegin);
         if (c.atEnd())
             return WTF::nullopt;
         if (*c != ':')
             return WTF::nullopt;
         advance(c, hostBegin);
         ++piecePointer;
         compressPointer = piecePointer;
+        immediatelyAfterCompress = true;
     }
 
     while (!c.atEnd()) {
         if (piecePointer == 8)
             return WTF::nullopt;
@@ -2448,10 +2445,13 @@
             if (compressPointer)
                 return WTF::nullopt;
             advance(c, hostBegin);
             ++piecePointer;
             compressPointer = piecePointer;
+            immediatelyAfterCompress = true;
+            if (previousValueWasZero)
+                syntaxViolation(hostBegin);
             continue;
         }
         if (piecePointer == 6 || (compressPointer && piecePointer < 6)) {
             if (Optional<IPv4Address> ipv4Address = parseIPv4AddressInsideIPv6(c)) {
                 if (compressPointer && piecePointer == 5)
@@ -2477,19 +2477,24 @@
                 leadingZeros = true;
             value = value * 0x10 + toASCIIHexValue(*c);
             advance(c, hostBegin);
         }
 
-        if (UNLIKELY((value && leadingZeros) || (!value && length > 1)))
+        previousValueWasZero = !value;
+        if (UNLIKELY((value && leadingZeros) || (previousValueWasZero && (length > 1 || immediatelyAfterCompress))))
             syntaxViolation(hostBegin);
 
         address[piecePointer++] = value;
         if (c.atEnd())
             break;
         if (piecePointer == 8 || *c != ':')
             return WTF::nullopt;
         advance(c, hostBegin);
+        if (c.atEnd())
+            syntaxViolation(hostBegin);
+
+        immediatelyAfterCompress = false;
     }
 
     if (!c.atEnd())
         return WTF::nullopt;
 
@@ -2582,17 +2587,20 @@
     const size_t maxDomainLength = 64;
     UChar hostnameBuffer[maxDomainLength];
     UErrorCode error = U_ZERO_ERROR;
     UIDNAInfo processingDetails = UIDNA_INFO_INITIALIZER;
     int32_t numCharactersConverted = uidna_nameToASCII(&internationalDomainNameTranscoder(), StringView(domain).upconvertedCharacters(), domain.length(), hostnameBuffer, maxDomainLength, &processingDetails, &error);
-    ASSERT(numCharactersConverted <= static_cast<int32_t>(maxDomainLength));
 
     if (U_SUCCESS(error) && !processingDetails.errors) {
+#if ASSERT_DISABLED
+        UNUSED_PARAM(numCharactersConverted);
+#else
         for (int32_t i = 0; i < numCharactersConverted; ++i) {
             ASSERT(isASCII(hostnameBuffer[i]));
             ASSERT(!isASCIIUpper(hostnameBuffer[i]));
         }
+#endif
         ascii.append(hostnameBuffer, numCharactersConverted);
         if (domain != StringView(ascii.data(), ascii.size()))
             syntaxViolation(iteratorForSyntaxViolationPosition);
         return ascii;
     }
@@ -2676,17 +2684,15 @@
             return false;
         if (auto address = parseIPv6Host(CodePointIterator<CharacterType>(iterator, ipv6End))) {
             serializeIPv6(address.value());
             if (!ipv6End.atEnd()) {
                 advance(ipv6End);
-                if (!ipv6End.atEnd() && *ipv6End == ':') {
-                    m_url.m_hostEnd = currentPosition(ipv6End);
-                    return parsePort(ipv6End);
-                }
                 m_url.m_hostEnd = currentPosition(ipv6End);
+                if (!ipv6End.atEnd() && *ipv6End == ':')
+                    return parsePort(ipv6End);
                 m_url.m_portLength = 0;
-                return true;
+                return ipv6End.atEnd();
             }
             m_url.m_hostEnd = currentPosition(ipv6End);
             return true;
         }
         return false;
@@ -2875,12 +2881,10 @@
 {
     static UIDNA* encoder;
     static std::once_flag onceFlag;
     std::call_once(onceFlag, [] {
         UErrorCode error = U_ZERO_ERROR;
-        // Warning: Please contact a WebKitGTK+ developer if changing these flags.
-        // They should be synced with ephy_uri_decode() in ephy-uri-helpers.c.
         encoder = uidna_openUTS46(UIDNA_CHECK_BIDI | UIDNA_CHECK_CONTEXTJ | UIDNA_NONTRANSITIONAL_TO_UNICODE | UIDNA_NONTRANSITIONAL_TO_ASCII, &error);
         RELEASE_ASSERT(U_SUCCESS(error));
         RELEASE_ASSERT(encoder);
     });
     return *encoder;
