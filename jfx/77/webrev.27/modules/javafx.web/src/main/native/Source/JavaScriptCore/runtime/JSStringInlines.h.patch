diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSStringInlines.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSStringInlines.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSStringInlines.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSStringInlines.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -42,13 +42,13 @@
         return equalSlowCase(exec, other);
     return WTF::equal(*valueInternal().impl(), *other->valueInternal().impl());
 }
 
 template<typename StringType>
-inline JSValue jsMakeNontrivialString(ExecState* exec, StringType&& string)
+inline JSValue jsMakeNontrivialString(VM& vm, StringType&& string)
 {
-    return jsNontrivialString(exec, std::forward<StringType>(string));
+    return jsNontrivialString(vm, std::forward<StringType>(string));
 }
 
 template<typename StringType, typename... StringTypes>
 inline JSValue jsMakeNontrivialString(ExecState* exec, StringType&& string, StringTypes&&... strings)
 {
@@ -56,11 +56,11 @@
     auto scope = DECLARE_THROW_SCOPE(vm);
     String result = tryMakeString(std::forward<StringType>(string), std::forward<StringTypes>(strings)...);
     if (UNLIKELY(!result))
         return throwOutOfMemoryError(exec, scope);
     ASSERT(result.length() <= JSString::MaxLength);
-    return jsNontrivialString(exec, WTFMove(result));
+    return jsNontrivialString(vm, WTFMove(result));
 }
 
 template <typename CharacterType>
 inline JSString* repeatCharacter(ExecState& exec, CharacterType character, unsigned repeatCount)
 {
@@ -74,9 +74,9 @@
         return nullptr;
     }
 
     std::fill_n(buffer, repeatCount, character);
 
-    RELEASE_AND_RETURN(scope, jsString(&exec, WTFMove(impl)));
+    RELEASE_AND_RETURN(scope, jsString(vm, WTFMove(impl)));
 }
 
 } // namespace JSC
