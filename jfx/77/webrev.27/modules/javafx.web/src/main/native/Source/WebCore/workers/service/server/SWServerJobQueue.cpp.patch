diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/SWServerJobQueue.cpp b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/SWServerJobQueue.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/SWServerJobQueue.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/SWServerJobQueue.cpp
@@ -28,10 +28,11 @@
 
 #if ENABLE(SERVICE_WORKER)
 
 #include "ExceptionData.h"
 #include "SWServer.h"
+#include "SWServerRegistration.h"
 #include "SWServerWorker.h"
 #include "SchemeRegistry.h"
 #include "SecurityOrigin.h"
 #include "ServiceWorkerFetchResult.h"
 #include "ServiceWorkerRegistrationData.h"
@@ -232,10 +233,14 @@
     m_jobTimer.startOneShot(0_s);
 }
 
 void SWServerJobQueue::runNextJobSynchronously()
 {
+    ASSERT(!m_jobQueue.isEmpty());
+    if (m_jobQueue.isEmpty())
+        return;
+
     auto& job = firstJob();
     switch (job.type) {
     case ServiceWorkerJobType::Register:
         runRegisterJob(job);
         return;
@@ -245,11 +250,11 @@
     case ServiceWorkerJobType::Update:
         runUpdateJob(job);
         return;
     }
 
-    RELEASE_ASSERT_NOT_REACHED();
+    ASSERT_NOT_REACHED();
 }
 
 // https://w3c.github.io/ServiceWorker/#register-algorithm
 void SWServerJobQueue::runRegisterJob(const ServiceWorkerJobData& job)
 {
@@ -279,11 +284,11 @@
         // This is not specified yet (https://github.com/w3c/ServiceWorker/issues/1189).
         if (registration->updateViaCache() != job.registrationOptions.updateViaCache)
             registration->setUpdateViaCache(job.registrationOptions.updateViaCache);
         RELEASE_LOG(ServiceWorker, "%p - SWServerJobQueue::runRegisterJob: Found registration %llu for job %s but it needs updating", this, registration->identifier().toUInt64(), job.identifier().loggingString().utf8().data());
     } else {
-        auto newRegistration = std::make_unique<SWServerRegistration>(m_server, m_registrationKey, job.registrationOptions.updateViaCache, job.scopeURL, job.scriptURL);
+        auto newRegistration = makeUnique<SWServerRegistration>(m_server, m_registrationKey, job.registrationOptions.updateViaCache, job.scopeURL, job.scriptURL);
         m_server.addRegistration(WTFMove(newRegistration));
 
         RELEASE_LOG(ServiceWorker, "%p - SWServerJobQueue::runRegisterJob: No existing registration for job %s, constructing a new one.", this, job.identifier().loggingString().utf8().data());
     }
 
