diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/HeapSnapshotBuilder.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/HeapSnapshotBuilder.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/HeapSnapshotBuilder.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/HeapSnapshotBuilder.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -44,11 +44,12 @@
 NodeIdentifier HeapSnapshotBuilder::nextAvailableObjectIdentifier = 1;
 NodeIdentifier HeapSnapshotBuilder::getNextObjectIdentifier() { return nextAvailableObjectIdentifier++; }
 void HeapSnapshotBuilder::resetNextAvailableObjectIdentifier() { HeapSnapshotBuilder::nextAvailableObjectIdentifier = 1; }
 
 HeapSnapshotBuilder::HeapSnapshotBuilder(HeapProfiler& profiler, SnapshotType type)
-    : m_profiler(profiler)
+    : HeapAnalyzer()
+    , m_profiler(profiler)
     , m_snapshotType(type)
 {
 }
 
 HeapSnapshotBuilder::~HeapSnapshotBuilder()
@@ -63,38 +64,39 @@
     if (m_snapshotType == SnapshotType::GCDebuggingSnapshot)
         m_profiler.clearSnapshots();
 
     PreventCollectionScope preventCollectionScope(m_profiler.vm().heap);
 
-    m_snapshot = std::make_unique<HeapSnapshot>(m_profiler.mostRecentSnapshot());
+    m_snapshot = makeUnique<HeapSnapshot>(m_profiler.mostRecentSnapshot());
     {
-        m_profiler.setActiveSnapshotBuilder(this);
+        ASSERT(!m_profiler.activeHeapAnalyzer());
+        m_profiler.setActiveHeapAnalyzer(this);
         m_profiler.vm().heap.collectNow(Sync, CollectionScope::Full);
-        m_profiler.setActiveSnapshotBuilder(nullptr);
+        m_profiler.setActiveHeapAnalyzer(nullptr);
     }
     m_snapshot->finalize();
 
     m_profiler.appendSnapshot(WTFMove(m_snapshot));
 }
 
-void HeapSnapshotBuilder::appendNode(JSCell* cell)
+void HeapSnapshotBuilder::analyzeNode(JSCell* cell)
 {
-    ASSERT(m_profiler.activeSnapshotBuilder() == this);
+    ASSERT(m_profiler.activeHeapAnalyzer() == this);
 
-    ASSERT(Heap::isMarked(cell));
+    ASSERT(m_profiler.vm().heap.isMarked(cell));
 
     NodeIdentifier identifier;
     if (previousSnapshotHasNodeForCell(cell, identifier))
         return;
 
     std::lock_guard<Lock> lock(m_buildingNodeMutex);
     m_snapshot->appendNode(HeapSnapshotNode(cell, getNextObjectIdentifier()));
 }
 
-void HeapSnapshotBuilder::appendEdge(JSCell* from, JSCell* to, SlotVisitor::RootMarkReason rootMarkReason)
+void HeapSnapshotBuilder::analyzeEdge(JSCell* from, JSCell* to, SlotVisitor::RootMarkReason rootMarkReason)
 {
-    ASSERT(m_profiler.activeSnapshotBuilder() == this);
+    ASSERT(m_profiler.activeHeapAnalyzer() == this);
     ASSERT(to);
 
     // Avoid trivial edges.
     if (from == to)
         return;
@@ -111,33 +113,33 @@
     }
 
     m_edges.append(HeapSnapshotEdge(from, to));
 }
 
-void HeapSnapshotBuilder::appendPropertyNameEdge(JSCell* from, JSCell* to, UniquedStringImpl* propertyName)
+void HeapSnapshotBuilder::analyzePropertyNameEdge(JSCell* from, JSCell* to, UniquedStringImpl* propertyName)
 {
-    ASSERT(m_profiler.activeSnapshotBuilder() == this);
+    ASSERT(m_profiler.activeHeapAnalyzer() == this);
     ASSERT(to);
 
     std::lock_guard<Lock> lock(m_buildingEdgeMutex);
 
     m_edges.append(HeapSnapshotEdge(from, to, EdgeType::Property, propertyName));
 }
 
-void HeapSnapshotBuilder::appendVariableNameEdge(JSCell* from, JSCell* to, UniquedStringImpl* variableName)
+void HeapSnapshotBuilder::analyzeVariableNameEdge(JSCell* from, JSCell* to, UniquedStringImpl* variableName)
 {
-    ASSERT(m_profiler.activeSnapshotBuilder() == this);
+    ASSERT(m_profiler.activeHeapAnalyzer() == this);
     ASSERT(to);
 
     std::lock_guard<Lock> lock(m_buildingEdgeMutex);
 
     m_edges.append(HeapSnapshotEdge(from, to, EdgeType::Variable, variableName));
 }
 
-void HeapSnapshotBuilder::appendIndexEdge(JSCell* from, JSCell* to, uint32_t index)
+void HeapSnapshotBuilder::analyzeIndexEdge(JSCell* from, JSCell* to, uint32_t index)
 {
-    ASSERT(m_profiler.activeSnapshotBuilder() == this);
+    ASSERT(m_profiler.activeHeapAnalyzer() == this);
     ASSERT(to);
 
     std::lock_guard<Lock> lock(m_buildingEdgeMutex);
 
     m_edges.append(HeapSnapshotEdge(from, to, index));
@@ -175,16 +177,16 @@
 // Heap Snapshot JSON Format:
 //
 //  Inspector snapshots:
 //
 //   {
-//      "version": 1.0,
+//      "version": 2,
 //      "type": "Inspector",
-//      // [<address>, <labelIndex>, <wrappedEddress>] only present in GCDebuggingSnapshot-type snapshots
+//      // [<address>, <labelIndex>, <wrappedAddress>] only present in GCDebuggingSnapshot-type snapshots
 //      "nodes": [
-//          <nodeId>, <sizeInBytes>, <nodeClassNameIndex>, <internal>
-//          <nodeId>, <sizeInBytes>, <nodeClassNameIndex>, <internal>
+//          <nodeId>, <sizeInBytes>, <nodeClassNameIndex>, <flags>
+//          <nodeId>, <sizeInBytes>, <nodeClassNameIndex>, <flags>
 //          ...
 //      ],
 //      "nodeClassNames": [
 //          "string", "Structure", "Object", ...
 //      ],
@@ -202,15 +204,15 @@
 //   }
 //
 //  GC heap debugger snapshots:
 //
 //   {
-//      "version": 1.0,
+//      "version": 2,
 //      "type": "GCDebugging",
 //      "nodes": [
-//          <nodeId>, <sizeInBytes>, <nodeClassNameIndex>, <internal>, <labelIndex>, <cellEddress>, <wrappedEddress>,
-//          <nodeId>, <sizeInBytes>, <nodeClassNameIndex>, <internal>, <labelIndex>, <cellEddress>, <wrappedEddress>,
+//          <nodeId>, <sizeInBytes>, <nodeClassNameIndex>, <flags>, <labelIndex>, <cellEddress>, <wrappedAddress>,
+//          <nodeId>, <sizeInBytes>, <nodeClassNameIndex>, <flags>, <labelIndex>, <cellEddress>, <wrappedAddress>,
 //          ...
 //      ],
 //      "nodeClassNames": [
 //          "string", "Structure", "Object", ...
 //      ],
@@ -238,12 +240,14 @@
 // Notes:
 //
 //     <nodeClassNameIndex>
 //       - index into the "nodeClassNames" list.
 //
-//     <internal>
-//       - 0 = false, 1 = true.
+//     <flags>
+//       - 0b0000 - no flags
+//       - 0b0001 - internal instance
+//       - 0b0010 - Object subclassification
 //
 //     <edgeTypeIndex>
 //       - index into the "edgeTypes" list.
 //
 //     <edgeExtraData>
@@ -252,10 +256,15 @@
 //       - for Property or Variable edges this is an index into the "edgeNames" list.
 //
 //      <rootReasonIndex>
 //       - index into the "labels" list.
 
+enum class NodeFlags {
+    Internal      = 1 << 0,
+    ObjectSubtype = 1 << 1,
+};
+
 static uint8_t edgeTypeToNumber(EdgeType type)
 {
     return static_cast<uint8_t>(type);
 }
 
@@ -356,12 +365,12 @@
 
     // Build a node to identifier map of allowed nodes to use when serializing edges.
     HashMap<JSCell*, NodeIdentifier> allowedNodeIdentifiers;
 
     // Build a list of used class names.
-    HashMap<const char*, unsigned> classNameIndexes;
-    classNameIndexes.set("<root>", 0);
+    HashMap<String, unsigned> classNameIndexes;
+    classNameIndexes.set("<root>"_s, 0);
     unsigned nextClassNameIndex = 1;
 
     // Build a list of labels (this is just a string table).
     HashMap<String, unsigned> labelIndexes;
     labelIndexes.set(emptyString(), 0);
@@ -376,23 +385,41 @@
     auto appendNodeJSON = [&] (const HeapSnapshotNode& node) {
         // Let the client decide if they want to allow or disallow certain nodes.
         if (!allowNodeCallback(node))
             return;
 
+        unsigned flags = 0;
+
         allowedNodeIdentifiers.set(node.cell, node.identifier);
 
-        auto result = classNameIndexes.add(node.cell->classInfo(vm)->className, nextClassNameIndex);
+        String className = node.cell->classInfo(vm)->className;
+        if (node.cell->isObject() && className == JSObject::info()->className) {
+            flags |= static_cast<unsigned>(NodeFlags::ObjectSubtype);
+
+            // Skip calculating a class name if this object has a `constructor` own property.
+            // These cases are typically F.prototype objects and we want to treat these as
+            // "Object" in snapshots and not get the name of the prototype's parent.
+            JSObject* object = asObject(node.cell);
+            if (JSGlobalObject* globalObject = object->globalObject(vm)) {
+                ExecState* exec = globalObject->globalExec();
+                PropertySlot slot(object, PropertySlot::InternalMethodType::VMInquiry);
+                if (!object->getOwnPropertySlot(object, exec, vm.propertyNames->constructor, slot))
+                    className = JSObject::calculatedClassName(object);
+            }
+        }
+
+        auto result = classNameIndexes.add(className, nextClassNameIndex);
         if (result.isNewEntry)
             nextClassNameIndex++;
         unsigned classNameIndex = result.iterator->value;
 
-        bool isInternal = false;
         void* wrappedAddress = 0;
         unsigned labelIndex = 0;
-        if (!node.cell->isString()) {
+        if (!node.cell->isString() && !node.cell->isBigInt()) {
             Structure* structure = node.cell->structure(vm);
-            isInternal = !structure || !structure->globalObject();
+            if (!structure || !structure->globalObject())
+                flags |= static_cast<unsigned>(NodeFlags::Internal);
 
             if (m_snapshotType == SnapshotType::GCDebuggingSnapshot) {
                 String nodeLabel;
                 auto it = m_cellLabels.find(node.cell);
                 if (it != m_cellLabels.end())
@@ -421,19 +448,19 @@
 
                 wrappedAddress = m_wrappedObjectPointers.get(node.cell);
             }
         }
 
-        // <nodeId>, <sizeInBytes>, <nodeClassNameIndex>, <internal>, [<labelIndex>, <cellEddress>, <wrappedEddress>]
+        // <nodeId>, <sizeInBytes>, <nodeClassNameIndex>, <flags>, [<labelIndex>, <cellEddress>, <wrappedAddress>]
         json.append(',');
         json.appendNumber(node.identifier);
         json.append(',');
         json.appendNumber(node.cell->estimatedSizeInBytes(vm));
         json.append(',');
         json.appendNumber(classNameIndex);
         json.append(',');
-        json.append(isInternal ? '1' : '0');
+        json.appendNumber(flags);
         if (m_snapshotType == SnapshotType::GCDebuggingSnapshot) {
             json.append(',');
             json.appendNumber(labelIndex);
             json.appendLiteral(",\"0x");
             appendUnsignedAsHex(reinterpret_cast<uintptr_t>(node.cell), json, Lowercase);
@@ -477,11 +504,11 @@
     };
 
     json.append('{');
 
     // version
-    json.appendLiteral("\"version\":1");
+    json.appendLiteral("\"version\":2");
 
     // type
     json.append(',');
     json.appendLiteral("\"type\":");
     json.appendQuotedJSONString(snapshotTypeToString(m_snapshotType));
@@ -504,11 +531,11 @@
 
     // node class names
     json.append(',');
     json.appendLiteral("\"nodeClassNames\":");
     json.append('[');
-    Vector<const char *> orderedClassNames(classNameIndexes.size());
+    Vector<String> orderedClassNames(classNameIndexes.size());
     for (auto& entry : classNameIndexes)
         orderedClassNames[entry.value] = entry.key;
     classNameIndexes.clear();
     bool firstClassName = true;
     for (auto& className : orderedClassNames) {
