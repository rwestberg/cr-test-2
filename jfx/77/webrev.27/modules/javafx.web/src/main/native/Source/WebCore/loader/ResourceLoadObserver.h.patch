diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadObserver.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadObserver.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadObserver.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadObserver.h
@@ -24,12 +24,14 @@
  */
 
 #pragma once
 
 #include "CanvasActivityRecord.h"
+#include "PageIdentifier.h"
 #include "ResourceLoadStatistics.h"
 #include "Timer.h"
+#include <pal/SessionID.h>
 #include <wtf/HashMap.h>
 #include <wtf/HashSet.h>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/text/WTFString.h>
 
@@ -37,28 +39,26 @@
 class Lock;
 class WorkQueue;
 class WallTime;
 }
 
-namespace PAL {
-class SessionID;
-}
-
 namespace WebCore {
 
 class Document;
 class Frame;
 class Page;
+class RegistrableDomain;
 class ResourceRequest;
 class ResourceResponse;
 class ScriptExecutionContext;
 
 struct ResourceLoadStatistics;
 
 class ResourceLoadObserver {
     friend class WTF::NeverDestroyed<ResourceLoadObserver>;
 public:
+    using PerSessionResourceLoadData = Vector<std::pair<PAL::SessionID, Vector<ResourceLoadStatistics>>>;
     WEBCORE_EXPORT static ResourceLoadObserver& shared();
 
     void logSubresourceLoading(const Frame*, const ResourceRequest& newRequest, const ResourceResponse& redirectResponse);
     void logWebSocketLoading(const URL& targetURL, const URL& mainFrameURL, PAL::SessionID);
     void logUserInteractionWithReducedTimeResolution(const Document&);
@@ -67,50 +67,45 @@
     void logCanvasRead(const Document&);
     void logCanvasWriteOrMeasure(const Document&, const String& textWritten);
     void logNavigatorAPIAccessed(const Document&, const ResourceLoadStatistics::NavigatorAPI);
     void logScreenAPIAccessed(const Document&, const ResourceLoadStatistics::ScreenAPI);
 
-    WEBCORE_EXPORT String statisticsForOrigin(const String&);
+    WEBCORE_EXPORT String statisticsForURL(PAL::SessionID, const URL&);
 
-    WEBCORE_EXPORT void setNotificationCallback(WTF::Function<void (Vector<ResourceLoadStatistics>&&)>&&);
-    WEBCORE_EXPORT void setRequestStorageAccessUnderOpenerCallback(Function<void(const String&, uint64_t, const String&)>&&);
-    WEBCORE_EXPORT void setLogUserInteractionNotificationCallback(Function<void(PAL::SessionID, const String&)>&&);
-    WEBCORE_EXPORT void setLogWebSocketLoadingNotificationCallback(Function<void(PAL::SessionID, const String&, const String&, WallTime)>&&);
-    WEBCORE_EXPORT void setLogSubresourceLoadingNotificationCallback(Function<void(PAL::SessionID, const String&, const String&, WallTime)>&&);
-    WEBCORE_EXPORT void setLogSubresourceRedirectNotificationCallback(Function<void(PAL::SessionID, const String&, const String&)>&&);
+    WEBCORE_EXPORT void setStatisticsUpdatedCallback(Function<void(PerSessionResourceLoadData&&)>&&);
+    WEBCORE_EXPORT void setRequestStorageAccessUnderOpenerCallback(Function<void(PAL::SessionID, const RegistrableDomain&, PageIdentifier, const RegistrableDomain&)>&&);
+    WEBCORE_EXPORT void setLogUserInteractionNotificationCallback(Function<void(PAL::SessionID, const RegistrableDomain&)>&&);
 
-    WEBCORE_EXPORT void notifyObserver();
+    WEBCORE_EXPORT void updateCentralStatisticsStore();
     WEBCORE_EXPORT void clearState();
 
 #if ENABLE(RESOURCE_LOAD_STATISTICS) && !RELEASE_LOG_DISABLED
     bool shouldLogUserInteraction() const { return m_shouldLogUserInteraction; }
     void setShouldLogUserInteraction(bool shouldLogUserInteraction) { m_shouldLogUserInteraction = shouldLogUserInteraction; }
 #endif
 
 private:
     ResourceLoadObserver();
 
-    bool shouldLog(bool usesEphemeralSession) const;
-    ResourceLoadStatistics& ensureResourceStatisticsForPrimaryDomain(const String&);
-
+    bool shouldLog(PAL::SessionID) const;
+    ResourceLoadStatistics& ensureResourceStatisticsForRegistrableDomain(PAL::SessionID, const RegistrableDomain&);
     void scheduleNotificationIfNeeded();
-    Vector<ResourceLoadStatistics> takeStatistics();
+
+    PerSessionResourceLoadData takeStatistics();
 
 #if ENABLE(RESOURCE_LOAD_STATISTICS)
-    void requestStorageAccessUnderOpener(const String& domainInNeedOfStorageAccess, uint64_t openerPageID, Document& openerDocument);
+    void requestStorageAccessUnderOpener(PAL::SessionID, const RegistrableDomain& domainInNeedOfStorageAccess, PageIdentifier openerPageID, Document& openerDocument);
 #endif
 
-    HashMap<String, ResourceLoadStatistics> m_resourceStatisticsMap;
-    HashMap<String, WTF::WallTime> m_lastReportedUserInteractionMap;
-    Function<void(Vector<ResourceLoadStatistics>&&)> m_notificationCallback;
-    Function<void(const String&, uint64_t, const String&)> m_requestStorageAccessUnderOpenerCallback;
-    Function<void(PAL::SessionID, const String&)> m_logUserInteractionNotificationCallback;
-    Function<void(PAL::SessionID, const String&, const String&, WallTime)> m_logWebSocketLoadingNotificationCallback;
-    Function<void(PAL::SessionID, const String&, const String&, WallTime)> m_logSubresourceLoadingNotificationCallback;
-    Function<void(PAL::SessionID, const String&, const String&)> m_logSubresourceRedirectNotificationCallback;
+    HashMap<PAL::SessionID, std::unique_ptr<HashMap<RegistrableDomain, ResourceLoadStatistics>>> m_perSessionResourceStatisticsMap;
+    HashMap<RegistrableDomain, WTF::WallTime> m_lastReportedUserInteractionMap;
+    Function<void(PerSessionResourceLoadData)> m_notificationCallback;
+    Function<void(PAL::SessionID, const RegistrableDomain&, PageIdentifier, const RegistrableDomain&)> m_requestStorageAccessUnderOpenerCallback;
+    Function<void(PAL::SessionID, const RegistrableDomain&)> m_logUserInteractionNotificationCallback;
 
     Timer m_notificationTimer;
+
 #if ENABLE(RESOURCE_LOAD_STATISTICS) && !RELEASE_LOG_DISABLED
     uint64_t m_loggingCounter { 0 };
     bool m_shouldLogUserInteraction { false };
 #endif
 
