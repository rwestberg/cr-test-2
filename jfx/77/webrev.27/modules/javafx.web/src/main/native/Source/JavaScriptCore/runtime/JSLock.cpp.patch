diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLock.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLock.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLock.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLock.cpp
@@ -26,16 +26,21 @@
 #include "JSGlobalObject.h"
 #include "JSObject.h"
 #include "JSCInlines.h"
 #include "MachineStackMarker.h"
 #include "SamplingProfiler.h"
+#include "WasmCapabilities.h"
 #include "WasmMachineThreads.h"
 #include <thread>
 #include <wtf/StackPointer.h>
 #include <wtf/Threading.h>
 #include <wtf/threads/Signals.h>
 
+#if USE(WEB_THREAD)
+#include <wtf/ios/WebCoreThread.h>
+#endif
+
 namespace JSC {
 
 Lock GlobalJSLock::s_sharedInstanceMutex;
 
 GlobalJSLock::GlobalJSLock()
@@ -47,28 +52,21 @@
 {
     s_sharedInstanceMutex.unlock();
 }
 
 JSLockHolder::JSLockHolder(ExecState* exec)
-    : m_vm(&exec->vm())
+    : JSLockHolder(exec->vm())
 {
-    init();
 }
 
 JSLockHolder::JSLockHolder(VM* vm)
-    : m_vm(vm)
+    : JSLockHolder(*vm)
 {
-    init();
 }
 
 JSLockHolder::JSLockHolder(VM& vm)
     : m_vm(&vm)
-{
-    init();
-}
-
-void JSLockHolder::init()
 {
     m_vm->apiLock().lock();
 }
 
 JSLockHolder::~JSLockHolder()
@@ -80,11 +78,11 @@
 
 JSLock::JSLock(VM* vm)
     : m_lockCount(0)
     , m_lockDropDepth(0)
     , m_vm(vm)
-    , m_entryAtomicStringTable(nullptr)
+    , m_entryAtomStringTable(nullptr)
 {
 }
 
 JSLock::~JSLock()
 {
@@ -102,10 +100,17 @@
 }
 
 void JSLock::lock(intptr_t lockCount)
 {
     ASSERT(lockCount > 0);
+#if USE(WEB_THREAD)
+    if (m_isWebThreadAware) {
+        ASSERT(WebCoreWebThreadIsEnabled && WebCoreWebThreadIsEnabled());
+        WebCoreWebThreadLock();
+    }
+#endif
+
     bool success = m_lock.tryLock();
     if (UNLIKELY(!success)) {
         if (currentThreadIsHoldingLock()) {
             m_lockCount += lockCount;
             return;
@@ -127,13 +132,13 @@
     // FIXME: What should happen to the per-thread identifier table if we don't have a VM?
     if (!m_vm)
         return;
 
     Thread& thread = Thread::current();
-    ASSERT(!m_entryAtomicStringTable);
-    m_entryAtomicStringTable = thread.setCurrentAtomicStringTable(m_vm->atomicStringTable());
-    ASSERT(m_entryAtomicStringTable);
+    ASSERT(!m_entryAtomStringTable);
+    m_entryAtomStringTable = thread.setCurrentAtomStringTable(m_vm->atomStringTable());
+    ASSERT(m_entryAtomStringTable);
 
     m_vm->setLastStackTop(thread.savedLastStackTop());
     ASSERT(thread.stack().contains(m_vm->lastStackTop()));
 
     if (m_vm->heap.hasAccess())
@@ -145,13 +150,17 @@
 
     RELEASE_ASSERT(!m_vm->stackPointerAtVMEntry());
     void* p = currentStackPointer();
     m_vm->setStackPointerAtVMEntry(p);
 
-    m_vm->heap.machineThreads().addCurrentThread();
+    if (m_vm->heap.machineThreads().addCurrentThread()) {
+        if (isKernTCSMAvailable())
+            enableKernTCSM();
+    }
+
 #if ENABLE(WEBASSEMBLY)
-    if (Options::useWebAssembly())
+    if (Wasm::isSupported())
         Wasm::startTrackingCurrentThread();
 #endif
 
 #if HAVE(MACH_EXCEPTIONS)
     registerThreadForMachExceptionHandling(Thread::current());
@@ -205,13 +214,13 @@
 
         if (m_shouldReleaseHeapAccess)
             vm->heap.releaseAccess();
     }
 
-    if (m_entryAtomicStringTable) {
-        Thread::current().setCurrentAtomicStringTable(m_entryAtomicStringTable);
-        m_entryAtomicStringTable = nullptr;
+    if (m_entryAtomStringTable) {
+        Thread::current().setCurrentAtomStringTable(m_entryAtomStringTable);
+        m_entryAtomStringTable = nullptr;
     }
 }
 
 void JSLock::lock(ExecState* exec)
 {
