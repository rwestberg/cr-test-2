diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/ScrollableArea.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/ScrollableArea.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/ScrollableArea.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/ScrollableArea.cpp
@@ -45,10 +45,13 @@
 
 namespace WebCore {
 
 struct SameSizeAsScrollableArea {
     virtual ~SameSizeAsScrollableArea();
+#if !ASSERT_DISABLED
+    bool weakPtrFactorWasConstructedOnMainThread;
+#endif
 #if ENABLE(CSS_SCROLL_SNAP)
     void* pointers[3];
     unsigned currentIndices[2];
 #else
     void* pointer[2];
@@ -64,21 +67,22 @@
     , m_inLiveResize(false)
     , m_verticalScrollElasticity(ScrollElasticityNone)
     , m_horizontalScrollElasticity(ScrollElasticityNone)
     , m_scrollbarOverlayStyle(ScrollbarOverlayStyleDefault)
     , m_scrollOriginChanged(false)
-    , m_scrolledProgrammatically(false)
+    , m_currentScrollType(static_cast<unsigned>(ScrollType::User))
+    , m_scrollShouldClearLatchedState(false)
 {
 }
 
 ScrollableArea::~ScrollableArea() = default;
 
 ScrollAnimator& ScrollableArea::scrollAnimator() const
 {
     if (!m_scrollAnimator) {
         if (usesMockScrollAnimator()) {
-            m_scrollAnimator = std::make_unique<ScrollAnimatorMock>(const_cast<ScrollableArea&>(*this), [this](const String& message) {
+            m_scrollAnimator = makeUnique<ScrollAnimatorMock>(const_cast<ScrollableArea&>(*this), [this](const String& message) {
                 logMockScrollAnimatorMessage(message);
             });
         } else
             m_scrollAnimator = ScrollAnimator::create(const_cast<ScrollableArea&>(*this));
     }
@@ -429,11 +433,11 @@
 
 #if ENABLE(CSS_SCROLL_SNAP)
 ScrollSnapOffsetsInfo<LayoutUnit>& ScrollableArea::ensureSnapOffsetsInfo()
 {
     if (!m_snapOffsetsInfo)
-        m_snapOffsetsInfo = std::make_unique<ScrollSnapOffsetsInfo<LayoutUnit>>();
+        m_snapOffsetsInfo = makeUnique<ScrollSnapOffsetsInfo<LayoutUnit>>();
     return *m_snapOffsetsInfo;
 }
 
 const Vector<LayoutUnit>* ScrollableArea::horizontalSnapOffsets() const
 {
@@ -569,11 +573,10 @@
 {
     if (ScrollAnimator* scrollAnimator = existingScrollAnimator())
         scrollAnimator->serviceScrollAnimations();
 }
 
-#if PLATFORM(IOS_FAMILY)
 bool ScrollableArea::isPinnedInBothDirections(const IntSize& scrollDelta) const
 {
     return isPinnedHorizontallyInDirection(scrollDelta.width()) && isPinnedVerticallyInDirection(scrollDelta.height());
 }
 
@@ -592,11 +595,10 @@
         return true;
     if (verticalScrollDelta > 0 && isVerticalScrollerPinnedToMaximumPosition())
         return true;
     return false;
 }
-#endif // PLATFORM(IOS_FAMILY)
 
 int ScrollableArea::horizontalScrollbarIntrusion() const
 {
     return verticalScrollbar() ? verticalScrollbar()->occupiedWidth() : 0;
 }
@@ -609,16 +611,13 @@
 IntSize ScrollableArea::scrollbarIntrusion() const
 {
     return { horizontalScrollbarIntrusion(), verticalScrollbarIntrusion() };
 }
 
-ScrollPosition ScrollableArea::scrollPosition() const
+ScrollOffset ScrollableArea::scrollOffset() const
 {
-    // FIXME: This relationship seems to be inverted. Scrollbars should be 'view', not 'model', and should get their values from us.
-    int x = horizontalScrollbar() ? horizontalScrollbar()->value() : 0;
-    int y = verticalScrollbar() ? verticalScrollbar()->value() : 0;
-    return IntPoint(x, y);
+    return scrollOffsetFromPosition(scrollPosition());
 }
 
 ScrollPosition ScrollableArea::minimumScrollPosition() const
 {
     return scrollPositionFromOffset(ScrollPosition());
@@ -667,10 +666,15 @@
 void ScrollableArea::scrollbarStyleChanged(ScrollbarStyle, bool)
 {
     availableContentSizeChanged(AvailableSizeChangeReason::ScrollbarsChanged);
 }
 
+IntSize ScrollableArea::reachableTotalContentsSize() const
+{
+    return totalContentsSize();
+}
+
 IntSize ScrollableArea::totalContentsSize() const
 {
     IntSize totalContentsSize = contentsSize();
     totalContentsSize.setHeight(totalContentsSize.height() + headerHeight() + footerHeight());
     return totalContentsSize;
