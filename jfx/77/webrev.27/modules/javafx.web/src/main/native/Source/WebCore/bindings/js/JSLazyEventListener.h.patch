diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSLazyEventListener.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSLazyEventListener.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSLazyEventListener.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSLazyEventListener.h
@@ -18,10 +18,12 @@
  */
 
 #pragma once
 
 #include "JSEventListener.h"
+#include <wtf/Forward.h>
+#include <wtf/WeakPtr.h>
 
 namespace WebCore {
 
 class ContainerNode;
 class DOMWindow;
@@ -29,31 +31,35 @@
 class Element;
 class QualifiedName;
 
 class JSLazyEventListener final : public JSEventListener {
 public:
-    static RefPtr<JSLazyEventListener> create(Element&, const QualifiedName& attributeName, const AtomicString& attributeValue);
-    static RefPtr<JSLazyEventListener> create(Document&, const QualifiedName& attributeName, const AtomicString& attributeValue);
-    static RefPtr<JSLazyEventListener> create(DOMWindow&, const QualifiedName& attributeName, const AtomicString& attributeValue);
+    static RefPtr<JSLazyEventListener> create(Element&, const QualifiedName& attributeName, const AtomString& attributeValue);
+    static RefPtr<JSLazyEventListener> create(Document&, const QualifiedName& attributeName, const AtomString& attributeValue);
+    static RefPtr<JSLazyEventListener> create(DOMWindow&, const QualifiedName& attributeName, const AtomString& attributeValue);
 
     virtual ~JSLazyEventListener();
 
     String sourceURL() const final { return m_sourceURL; }
     TextPosition sourcePosition() const final { return m_sourcePosition; }
 
 private:
     struct CreationArguments;
-    static RefPtr<JSLazyEventListener> create(const CreationArguments&);
-    JSLazyEventListener(const CreationArguments&, const String& sourceURL, const TextPosition&);
+    static RefPtr<JSLazyEventListener> create(CreationArguments&&);
+    JSLazyEventListener(CreationArguments&&, const String& sourceURL, const TextPosition&);
+
+#if !ASSERT_DISABLED
+    void checkValidityForEventTarget(EventTarget&) final;
+#endif
 
     JSC::JSObject* initializeJSFunction(ScriptExecutionContext&) const final;
     bool wasCreatedFromMarkup() const final { return true; }
 
     String m_functionName;
     const String& m_eventParameterName;
     String m_code;
     String m_sourceURL;
     TextPosition m_sourcePosition;
-    ContainerNode* m_originalNode;
+    WeakPtr<ContainerNode> m_originalNode;
 };
 
 } // namespace WebCore
