diff a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityRenderObject.h b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityRenderObject.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityRenderObject.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityRenderObject.h
@@ -78,11 +78,11 @@
     bool hasUnderline() const override;
 
     bool canSetTextRangeAttributes() const override;
     bool canSetExpandedAttribute() const override;
 
-    void setAccessibleName(const AtomicString&) override;
+    void setAccessibleName(const AtomString&) override;
 
     // Provides common logic used by all elements when determining isIgnored.
     AccessibilityObjectInclusion defaultObjectInclusion() const override;
 
     int layoutCount() const override;
@@ -104,11 +104,11 @@
     bool supportsARIAOwns() const override;
     bool isPresentationalChildOfAriaRole() const override;
     bool ariaRoleHasPresentationalChildren() const override;
 
     // Should be called on the root accessibility object to kick off a hit test.
-    AccessibilityObject* accessibilityHitTest(const IntPoint&) const override;
+    AccessibilityObjectInterface* accessibilityHitTest(const IntPoint&) const override;
 
     Element* anchorElement() const override;
 
     LayoutRect boundingBoxRect() const override;
     LayoutRect elementRect() const override;
@@ -132,11 +132,11 @@
     String helpText() const override;
     String textUnderElement(AccessibilityTextUnderElementMode = AccessibilityTextUnderElementMode()) const override;
     String text() const override;
     int textLength() const override;
     String selectedText() const override;
-    const AtomicString& accessKey() const override;
+    const AtomString& accessKey() const override;
     virtual const String& actionVerb() const;
     Widget* widget() const override;
     Widget* widgetForAttachmentView() const override;
     virtual void getDocumentLinks(AccessibilityChildrenVector&);
     FrameView* documentFrameView() const override;
@@ -166,11 +166,10 @@
 
     VisiblePositionRange visiblePositionRange() const override;
     VisiblePositionRange visiblePositionRangeForLine(unsigned) const override;
     IntRect boundsForVisiblePositionRange(const VisiblePositionRange&) const override;
     IntRect boundsForRange(const RefPtr<Range>) const override;
-    IntRect boundsForRects(LayoutRect&, LayoutRect&, RefPtr<Range>) const;
     void setSelectedVisiblePositionRange(const VisiblePositionRange&) const override;
     bool isVisiblePositionRangeInDifferentDocument(const VisiblePositionRange&) const;
     bool hasPopup() const override;
 
     bool supportsARIADropping() const override;
@@ -198,10 +197,11 @@
     String nameForMSAA() const override;
     String descriptionForMSAA() const override;
     AccessibilityRole roleValueForMSAA() const override;
 
     String passwordFieldValue() const override;
+    void titleElementText(Vector<AccessibilityText>&) const override;
 
 protected:
     explicit AccessibilityRenderObject(RenderObject*);
     ScrollableArea* getScrollableAreaIfScrollable() const override;
     void scrollTo(const IntPoint&) const override;
@@ -237,21 +237,22 @@
     void addRadioButtonGroupMembers(AccessibilityChildrenVector& linkedUIElements) const;
     void addRadioButtonGroupChildren(AccessibilityObject*, AccessibilityChildrenVector&) const;
     AccessibilityObject* internalLinkElement() const;
     AccessibilityObject* accessibilityImageMapHitTest(HTMLAreaElement*, const IntPoint&) const;
     AccessibilityObject* accessibilityParentForImageMap(HTMLMapElement*) const;
-    AccessibilityObject* elementAccessibilityHitTest(const IntPoint&) const override;
+    AccessibilityObjectInterface* elementAccessibilityHitTest(const IntPoint&) const override;
 
     bool renderObjectIsObservable(RenderObject&) const;
     RenderObject* renderParentObject() const;
     bool isDescendantOfElementType(const QualifiedName& tagName) const;
+    bool isDescendantOfElementType(const HashSet<QualifiedName>&) const;
 
     bool isSVGImage() const;
     void detachRemoteSVGRoot();
     enum CreationChoice { Create, Retrieve };
     AccessibilitySVGRoot* remoteSVGRootElement(CreationChoice createIfNecessary) const;
-    AccessibilityObject* remoteSVGElementHitTest(const IntPoint&) const;
+    AccessibilityObjectInterface* remoteSVGElementHitTest(const IntPoint&) const;
     void offsetBoundingBoxForRemoteSVGElement(LayoutRect&) const;
     bool supportsPath() const override;
 
     void addHiddenChildren();
     void addTextFieldChildren();
@@ -280,12 +281,22 @@
 
     bool inheritsPresentationalRole() const override;
 
     bool shouldGetTextFromNode(AccessibilityTextUnderElementMode) const;
 
+#if ENABLE(APPLE_PAY)
+    bool isApplePayButton() const;
+    ApplePayButtonType applePayButtonType() const;
+    String applePayButtonDescription() const;
+#endif
+
     RenderObject* targetElementForActiveDescendant(const QualifiedName&, AccessibilityObject*) const;
     bool canHavePlainText() const;
+    // Special handling of click point for links.
+    IntPoint linkClickPoint();
+    // Rects utilities.
+    static IntRect boundsForRects(LayoutRect const&, LayoutRect const&, RefPtr<Range> const&);
 };
 
 } // namespace WebCore
 
 SPECIALIZE_TYPE_TRAITS_ACCESSIBILITY(AccessibilityRenderObject, isAccessibilityRenderObject())
