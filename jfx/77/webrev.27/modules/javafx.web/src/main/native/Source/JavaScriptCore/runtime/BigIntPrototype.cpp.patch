diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BigIntPrototype.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BigIntPrototype.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BigIntPrototype.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BigIntPrototype.cpp
@@ -1,8 +1,8 @@
 /*
  * Copyright (C) 2017 Caio Lima <ticaiolima@gmail.com>.
- * Copyright (C) 2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -25,10 +25,11 @@
  */
 
 #include "config.h"
 #include "BigIntPrototype.h"
 
+#include "BigIntObject.h"
 #include "Error.h"
 #include "JSBigInt.h"
 #include "JSCBuiltins.h"
 #include "JSCInlines.h"
 #include "JSCast.h"
@@ -69,11 +70,11 @@
 
 void BigIntPrototype::finishCreation(VM& vm, JSGlobalObject*)
 {
     Base::finishCreation(vm);
     ASSERT(inherits(vm, info()));
-    putDirectWithoutTransition(vm, vm.propertyNames->toStringTagSymbol, jsString(&vm, "BigInt"), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
+    putDirectWithoutTransition(vm, vm.propertyNames->toStringTagSymbol, jsString(vm, "BigInt"), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
 }
 
 // ------------------------------ Functions ---------------------------
 
 static ALWAYS_INLINE JSBigInt* toThisBigIntValue(VM& vm, JSValue thisValue)
@@ -107,11 +108,11 @@
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
     scope.release();
     if (resultString.length() == 1)
         return JSValue::encode(vm.smallStrings.singleCharacterString(resultString[0]));
 
-    return JSValue::encode(jsNontrivialString(&vm, resultString));
+    return JSValue::encode(jsNontrivialString(vm, resultString));
 }
 
 EncodedJSValue JSC_HOST_CALL bigIntProtoFuncToLocaleString(ExecState* state)
 {
     return bigIntProtoFuncToString(state);
