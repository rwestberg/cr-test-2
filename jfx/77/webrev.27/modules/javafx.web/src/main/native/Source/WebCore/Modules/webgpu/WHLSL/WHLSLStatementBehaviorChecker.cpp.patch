diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLStatementBehaviorChecker.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLStatementBehaviorChecker.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLStatementBehaviorChecker.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLStatementBehaviorChecker.cpp
@@ -39,11 +39,10 @@
 #include "WHLSLInferTypes.h"
 #include "WHLSLProgram.h"
 #include "WHLSLReturn.h"
 #include "WHLSLSwitchCase.h"
 #include "WHLSLSwitchStatement.h"
-#include "WHLSLTrap.h"
 #include "WHLSLVariableDeclarationsStatement.h"
 #include "WHLSLVisitor.h"
 #include "WHLSLWhileLoop.h"
 #include <cstdint>
 #include <wtf/OptionSet.h>
@@ -88,19 +87,14 @@
     void visit(AST::Return&) override
     {
         m_stack.append({ Behavior::Return });
     }
 
-    void visit(AST::Trap&) override
-    {
-        m_stack.append({ Behavior::Return });
-    }
-
     void visit(AST::DoWhileLoop& doWhileLoop) override
     {
         checkErrorAndVisit(doWhileLoop.body());
-        if (error())
+        if (hasError())
             return;
         auto b = m_stack.takeLast();
         b.remove(Behavior::Break);
         b.remove(Behavior::Continue);
         b.add(Behavior::Nothing);
@@ -111,11 +105,11 @@
     {
         // The initialization always has a behavior of Nothing, which we already add unconditionally below,
         // so we can just ignore the initialization.
 
         checkErrorAndVisit(forLoop.body());
-        if (error())
+        if (hasError())
             return;
         auto b = m_stack.takeLast();
         b.remove(Behavior::Break);
         b.remove(Behavior::Continue);
         b.add(Behavior::Nothing);
@@ -123,11 +117,11 @@
     }
 
     void visit(AST::WhileLoop& whileLoop) override
     {
         checkErrorAndVisit(whileLoop.body());
-        if (error())
+        if (hasError())
             return;
         auto b = m_stack.takeLast();
         b.remove(Behavior::Break);
         b.remove(Behavior::Continue);
         b.add(Behavior::Nothing);
@@ -147,17 +141,17 @@
         }
 
         OptionSet<Behavior> reduction = { };
         for (auto& switchCase : switchStatement.switchCases()) {
             checkErrorAndVisit(switchCase);
-            if (error())
+            if (hasError())
                 return;
             auto b = m_stack.takeLast();
             reduction = reduction | b;
         }
         if (reduction.contains(Behavior::Nothing)) {
-            setError();
+            setError(Error("Switch statement must end in a break/fallthrough/return", switchStatement.codeLocation()));
             return;
         }
         reduction.remove(Behavior::Break);
         reduction.remove(Behavior::Fallthrough);
         reduction.add(Behavior::Nothing);
@@ -165,17 +159,17 @@
     }
 
     void visit(AST::IfStatement& ifStatement) override
     {
         checkErrorAndVisit(ifStatement.body());
-        if (error())
+        if (hasError())
             return;
         auto b = m_stack.takeLast();
         OptionSet<Behavior> bPrime;
         if (ifStatement.elseBody()) {
             checkErrorAndVisit(*ifStatement.elseBody());
-            if (error())
+            if (hasError())
                 return;
             bPrime = m_stack.takeLast();
         } else
             bPrime = { Behavior::Nothing };
         m_stack.append(b | bPrime);
@@ -194,26 +188,26 @@
         }
 
         OptionSet<Behavior> reduction = { };
         for (size_t i = 0; i < block.statements().size() - 1; ++i) {
             checkErrorAndVisit(block.statements()[i]);
-            if (error())
+            if (hasError())
                 return;
             auto b = m_stack.takeLast();
             if (!b.contains(Behavior::Nothing)) {
-                setError();
+                setError(Error("Statement inside an inner block must be reachable.", block.statements()[i]->codeLocation()));
                 return;
             }
             b.remove(Behavior::Nothing);
             if (b.contains(Behavior::Fallthrough)) {
-                setError();
+                setError(Error("Fallthrough must be the last statement in a block.", block.statements()[i]->codeLocation()));
                 return;
             }
             reduction = reduction | b;
         }
         checkErrorAndVisit(block.statements()[block.statements().size() - 1]);
-        if (error())
+        if (hasError())
             return;
         auto b = m_stack.takeLast();
         m_stack.append(reduction | b);
     }
 
@@ -223,29 +217,29 @@
     }
 
     Vector<OptionSet<Behavior>> m_stack;
 };
 
-bool checkStatementBehavior(Program& program)
+Expected<void, Error> checkStatementBehavior(Program& program)
 {
     StatementBehaviorChecker statementBehaviorChecker;
     for (auto& functionDefinition : program.functionDefinitions()) {
         statementBehaviorChecker.Visitor::visit(functionDefinition);
-        if (statementBehaviorChecker.error())
-            return false;
+        if (statementBehaviorChecker.hasError())
+            return statementBehaviorChecker.result();
         auto behavior = statementBehaviorChecker.takeFunctionBehavior();
         if (matches(functionDefinition->type(), program.intrinsics().voidType())) {
             behavior.remove(StatementBehaviorChecker::Behavior::Return);
             behavior.remove(StatementBehaviorChecker::Behavior::Nothing);
             if (behavior != OptionSet<StatementBehaviorChecker::Behavior>())
-                return false;
+                return makeUnexpected(Error("Cannot end a void function with a break, continue, or fallthrough."));
         } else {
             if (behavior != StatementBehaviorChecker::Behavior::Return)
-                return false;
+                return makeUnexpected(Error("Non-void functions must return a value on all code paths."));
         }
     }
-    return true;
+    return { };
 }
 
 } // namespace WHLSL
 
 } // namespace WebCore
