diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLAnchorElement.h b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLAnchorElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLAnchorElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLAnchorElement.h
@@ -26,11 +26,10 @@
 #include "HTMLElement.h"
 #include "HTMLNames.h"
 #include "SharedStringHash.h"
 #include "URLUtils.h"
 #include <wtf/OptionSet.h>
-#include <wtf/Optional.h>
 
 namespace WebCore {
 
 class AdClickAttribution;
 class DOMTokenList;
@@ -49,13 +48,13 @@
     static Ref<HTMLAnchorElement> create(const QualifiedName&, Document&);
 
     virtual ~HTMLAnchorElement();
 
     WEBCORE_EXPORT URL href() const;
-    void setHref(const AtomicString&);
+    void setHref(const AtomString&);
 
-    const AtomicString& name() const;
+    const AtomString& name() const;
 
     WEBCORE_EXPORT String origin() const;
 
     WEBCORE_EXPORT String text();
     void setText(const String&);
@@ -65,22 +64,21 @@
     bool willRespondToMouseClickEvents() final;
 
     bool hasRel(Relation) const;
 
     SharedStringHash visitedLinkHash() const;
-    void invalidateCachedVisitedLinkHash() { m_cachedVisitedLinkHash = 0; }
 
     WEBCORE_EXPORT DOMTokenList& relList() const;
 
 #if USE(SYSTEM_PREVIEW)
     WEBCORE_EXPORT bool isSystemPreviewLink() const;
 #endif
 
 protected:
     HTMLAnchorElement(const QualifiedName&, Document&);
 
-    void parseAttribute(const QualifiedName&, const AtomicString&) override;
+    void parseAttribute(const QualifiedName&, const AtomString&) override;
 
 private:
     bool supportsFocus() const override;
     bool isMouseFocusable() const override;
     bool isKeyboardFocusable(KeyboardEvent*) const override;
@@ -88,12 +86,13 @@
     void setActive(bool active = true, bool pause = false) final;
     void accessKeyAction(bool sendMouseEvents) final;
     bool isURLAttribute(const Attribute&) const final;
     bool canStartSelection() const final;
     String target() const override;
-    int tabIndex() const final;
+    int defaultTabIndex() const final;
     bool draggable() const final;
+    bool isInteractiveContent() const final;
 
     String effectiveTarget() const;
 
     void sendPings(const URL& destinationURL);
 
@@ -114,20 +113,23 @@
     void clearRootEditableElementForSelectionOnMouseDown();
 
     bool m_hasRootEditableElementForSelectionOnMouseDown;
     bool m_wasShiftKeyDownOnMouseDown;
     OptionSet<Relation> m_linkRelations;
-    mutable SharedStringHash m_cachedVisitedLinkHash;
+
+    // This is computed only once and must not be affected by subsequent URL changes.
+    mutable Optional<SharedStringHash> m_storedVisitedLinkHash;
 
     mutable std::unique_ptr<DOMTokenList> m_relList;
 };
 
 inline SharedStringHash HTMLAnchorElement::visitedLinkHash() const
 {
-    if (!m_cachedVisitedLinkHash)
-        m_cachedVisitedLinkHash = computeVisitedLinkHash(document().baseURL(), attributeWithoutSynchronization(HTMLNames::hrefAttr));
-    return m_cachedVisitedLinkHash;
+    ASSERT(isLink());
+    if (!m_storedVisitedLinkHash)
+        m_storedVisitedLinkHash = computeVisitedLinkHash(document().baseURL(), attributeWithoutSynchronization(HTMLNames::hrefAttr));
+    return *m_storedVisitedLinkHash;
 }
 
 // Functions shared with the other anchor elements (i.e., SVG).
 
 bool isEnterKeyKeydownEvent(Event&);
