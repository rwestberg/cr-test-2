diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ShadowBlur.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ShadowBlur.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ShadowBlur.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ShadowBlur.cpp
@@ -182,11 +182,10 @@
 
 ShadowBlur::ShadowBlur(const GraphicsContextState& state)
     : m_color(state.shadowColor)
     , m_blurRadius(state.shadowBlur, state.shadowBlur)
     , m_offset(state.shadowOffset)
-    , m_layerImage(0)
     , m_shadowsIgnoreTransforms(state.shadowsIgnoreTransforms)
 {
 #if USE(CG)
     if (state.shadowsUseLegacyRadius) {
         float shadowBlur = radiusToLegacyRadius(state.shadowBlur);
@@ -377,12 +376,14 @@
         edgeSize.setHeight(2);
 
     return edgeSize;
 }
 
-IntSize ShadowBlur::calculateLayerBoundingRect(const AffineTransform& transform, const FloatRect& shadowedRect, const IntRect& clipRect)
+Optional<ShadowBlur::LayerImageProperties> ShadowBlur::calculateLayerBoundingRect(const AffineTransform& transform, const FloatRect& shadowedRect, const IntRect& clipRect)
 {
+    LayerImageProperties calculatedLayerImageProperties;
+
     IntSize edgeSize = blurredEdgeSize();
 
     // Calculate the destination of the blurred and/or transformed layer.
     FloatRect layerRect;
     IntSize inflation;
@@ -406,11 +407,11 @@
     FloatRect unclippedLayerRect = layerRect;
 
     if (!clipRect.contains(enclosingIntRect(layerRect))) {
         // If we are totally outside the clip region, we aren't painting at all.
         if (intersection(layerRect, clipRect).isEmpty())
-            return IntSize();
+            return WTF::nullopt;
 
         IntRect inflatedClip = clipRect;
         // Pixels at the edges can be affected by pixels outside the buffer,
         // so intersect with the clip inflated by the blur.
         if (m_type == BlurShadow) {
@@ -426,44 +427,41 @@
         layerRect.intersect(inflatedClip);
     }
 
     IntSize frameSize = inflation;
     frameSize.scale(2);
-    m_shadowedResultSize = FloatSize(shadowedRect.width() + frameSize.width(), shadowedRect.height() + frameSize.height());
-    m_layerOrigin = FloatPoint(layerRect.x(), layerRect.y());
-    m_layerSize = layerRect.size();
+    calculatedLayerImageProperties.shadowedResultSize = FloatSize(shadowedRect.width() + frameSize.width(), shadowedRect.height() + frameSize.height());
+    calculatedLayerImageProperties.layerOrigin = FloatPoint(layerRect.x(), layerRect.y());
+    calculatedLayerImageProperties.layerSize = layerRect.size();
 
     const FloatPoint unclippedLayerOrigin = FloatPoint(unclippedLayerRect.x(), unclippedLayerRect.y());
-    const FloatSize clippedOut = unclippedLayerOrigin - m_layerOrigin;
+    const FloatSize clippedOut = unclippedLayerOrigin - calculatedLayerImageProperties.layerOrigin;
 
     // Set the origin as the top left corner of the scratch image, or, in case there's a clipped
     // out region, set the origin accordingly to the full bounding rect's top-left corner.
     float translationX = -shadowedRect.x() + inflation.width() - fabsf(clippedOut.width());
     float translationY = -shadowedRect.y() + inflation.height() - fabsf(clippedOut.height());
-    m_layerContextTranslation = FloatSize(translationX, translationY);
+    calculatedLayerImageProperties.layerContextTranslation = FloatSize(translationX, translationY);
 
-    return expandedIntSize(layerRect.size());
+    return calculatedLayerImageProperties;
 }
 
-void ShadowBlur::drawShadowBuffer(GraphicsContext& graphicsContext)
+void ShadowBlur::drawShadowBuffer(GraphicsContext& graphicsContext, ImageBuffer& layerImage, const FloatPoint& layerOrigin, const FloatSize& layerSize)
 {
-    if (!m_layerImage)
-        return;
-
     GraphicsContextStateSaver stateSaver(graphicsContext);
 
-    IntSize bufferSize = m_layerImage->internalSize();
-    if (bufferSize != m_layerSize) {
+    IntSize bufferSize = layerImage.internalSize();
+    if (bufferSize != layerSize) {
         // The rect passed to clipToImageBuffer() has to be the size of the entire buffer,
         // but we may not have cleared it all, so clip to the filled part first.
-        graphicsContext.clip(FloatRect(m_layerOrigin, m_layerSize));
+        graphicsContext.clip(FloatRect(layerOrigin, layerSize));
     }
-    graphicsContext.clipToImageBuffer(*m_layerImage, FloatRect(m_layerOrigin, bufferSize));
+    graphicsContext.clipToImageBuffer(layerImage, FloatRect(layerOrigin, bufferSize));
     graphicsContext.setFillColor(m_color);
 
     graphicsContext.clearShadow();
-    graphicsContext.fillRect(FloatRect(m_layerOrigin, m_layerSize));
+    graphicsContext.fillRect(FloatRect(layerOrigin, layerSize));
 }
 
 static void computeSliceSizesFromRadii(const IntSize& twiceRadius, const FloatRoundedRect::Radii& radii, int& leftSlice, int& rightSlice, int& topSlice, int& bottomSlice)
 {
     leftSlice = twiceRadius.width() + std::max(radii.topLeft().width(), radii.bottomLeft().width());
@@ -491,13 +489,12 @@
 }
 
 void ShadowBlur::drawRectShadow(GraphicsContext& graphicsContext, const FloatRoundedRect& shadowedRect)
 {
     drawRectShadow(graphicsContext.getCTM(), graphicsContext.clipBounds(), shadowedRect,
-        [this, &graphicsContext](ImageBuffer&, const FloatPoint&, const FloatSize&) {
-            // FIXME: Use parameters instead of implicit parameters defined as class variables.
-            drawShadowBuffer(graphicsContext);
+        [this, &graphicsContext](ImageBuffer& layerImage, const FloatPoint& layerOrigin, const FloatSize& layerSize) {
+            drawShadowBuffer(graphicsContext, layerImage, layerOrigin, layerSize);
         },
         [&graphicsContext](ImageBuffer& image, const FloatRect& destRect, const FloatRect& srcRect) {
             GraphicsContextStateSaver stateSaver(graphicsContext);
             graphicsContext.clearShadow();
             graphicsContext.drawImageBuffer(image, destRect, srcRect);
@@ -511,13 +508,12 @@
 }
 
 void ShadowBlur::drawInsetShadow(GraphicsContext& graphicsContext, const FloatRect& fullRect, const FloatRoundedRect& holeRect)
 {
     drawInsetShadow(graphicsContext.getCTM(), graphicsContext.clipBounds(), fullRect, holeRect,
-        [this, &graphicsContext](ImageBuffer&, const FloatPoint&, const FloatSize&) {
-            // FIXME: Use parameters instead of implicit parameters defined as class variables.
-            drawShadowBuffer(graphicsContext);
+        [this, &graphicsContext](ImageBuffer& layerImage, const FloatPoint& layerOrigin, const FloatSize& layerSize) {
+            drawShadowBuffer(graphicsContext, layerImage, layerOrigin, layerSize);
         },
         [&graphicsContext](ImageBuffer& image, const FloatRect& destRect, const FloatRect& srcRect) {
             // Note that drawing the ImageBuffer is faster than creating a Image and drawing that,
             // because ImageBuffer::draw() knows that it doesn't have to copy the image bits.
             GraphicsContextStateSaver stateSaver(graphicsContext);
@@ -537,12 +533,12 @@
         });
 }
 
 void ShadowBlur::drawRectShadow(const AffineTransform& transform, const IntRect& clipBounds, const FloatRoundedRect& shadowedRect, const DrawBufferCallback& drawBuffer, const DrawImageCallback& drawImage, const FillRectCallback& fillRect)
 {
-    IntSize layerSize = calculateLayerBoundingRect(transform, shadowedRect.rect(), clipBounds);
-    if (layerSize.isEmpty())
+    auto layerImageProperties = calculateLayerBoundingRect(transform, shadowedRect.rect(), clipBounds);
+    if (!layerImageProperties)
         return;
 
     adjustBlurRadius(transform);
 
     bool canUseTilingTechnique = true;
@@ -555,23 +551,23 @@
     IntSize edgeSize = blurredEdgeSize();
     IntSize templateSize = this->templateSize(edgeSize, shadowedRect.radii());
     const FloatRect& rect = shadowedRect.rect();
 
     if (templateSize.width() > rect.width() || templateSize.height() > rect.height()
-        || (templateSize.width() * templateSize.height() > m_shadowedResultSize.width() * m_shadowedResultSize.height()))
+        || (templateSize.area() > layerImageProperties->shadowedResultSize.area()))
         canUseTilingTechnique = false;
 
     if (canUseTilingTechnique)
-        drawRectShadowWithTiling(transform, shadowedRect, templateSize, edgeSize, drawImage, fillRect);
+        drawRectShadowWithTiling(transform, shadowedRect, templateSize, edgeSize, drawImage, fillRect, *layerImageProperties);
     else
-        drawRectShadowWithoutTiling(transform, shadowedRect, layerSize, drawBuffer);
+        drawRectShadowWithoutTiling(transform, shadowedRect, *layerImageProperties, drawBuffer);
 }
 
 void ShadowBlur::drawInsetShadow(const AffineTransform& transform, const IntRect& clipBounds, const FloatRect& fullRect, const FloatRoundedRect& holeRect, const DrawBufferCallback& drawBuffer, const DrawImageCallback& drawImage, const FillRectWithHoleCallback& fillRectWithHole)
 {
-    IntSize layerSize = calculateLayerBoundingRect(transform, fullRect, clipBounds);
-    if (layerSize.isEmpty())
+    auto layerImageProperties = calculateLayerBoundingRect(transform, fullRect, clipBounds);
+    if (!layerImageProperties)
         return;
 
     adjustBlurRadius(transform);
 
     bool canUseTilingTechnique = true;
@@ -590,53 +586,51 @@
         canUseTilingTechnique = false;
 
     if (canUseTilingTechnique)
         drawInsetShadowWithTiling(transform, fullRect, holeRect, templateSize, edgeSize, drawImage, fillRectWithHole);
     else
-        drawInsetShadowWithoutTiling(transform, fullRect, holeRect, layerSize, drawBuffer);
+        drawInsetShadowWithoutTiling(transform, fullRect, holeRect, *layerImageProperties, drawBuffer);
 }
 
-void ShadowBlur::drawRectShadowWithoutTiling(const AffineTransform&, const FloatRoundedRect& shadowedRect, const IntSize& layerSize, const DrawBufferCallback& drawBuffer)
+void ShadowBlur::drawRectShadowWithoutTiling(const AffineTransform&, const FloatRoundedRect& shadowedRect, const LayerImageProperties& layerImageProperties, const DrawBufferCallback& drawBuffer)
 {
-    auto layerImage = ImageBuffer::create(layerSize, Unaccelerated, 1);
+    auto layerImage = ImageBuffer::create(expandedIntSize(layerImageProperties.layerSize), Unaccelerated, 1);
     if (!layerImage)
         return;
-    m_layerImage = layerImage.get();
 
     GraphicsContext& shadowContext = layerImage->context();
     GraphicsContextStateSaver stateSaver(shadowContext);
     shadowContext.setFillColor(Color::black);
 
     {
         GraphicsContext& shadowContext = layerImage->context();
         GraphicsContextStateSaver stateSaver(shadowContext);
-        shadowContext.translate(m_layerContextTranslation);
+        shadowContext.translate(layerImageProperties.layerContextTranslation);
         shadowContext.setFillColor(Color::black);
         if (shadowedRect.radii().isZero())
             shadowContext.fillRect(shadowedRect.rect());
         else {
             Path path;
             path.addRoundedRect(shadowedRect);
             shadowContext.fillPath(path);
         }
 
-        blurShadowBuffer(layerSize);
+        blurShadowBuffer(*layerImage, expandedIntSize(layerImageProperties.layerSize));
     }
-    drawBuffer(*layerImage, m_layerOrigin, m_layerSize);
+    drawBuffer(*layerImage, layerImageProperties.layerOrigin, layerImageProperties.layerSize);
 }
 
-void ShadowBlur::drawInsetShadowWithoutTiling(const AffineTransform&, const FloatRect& fullRect, const FloatRoundedRect& holeRect, const IntSize& layerSize, const DrawBufferCallback& drawBuffer)
+void ShadowBlur::drawInsetShadowWithoutTiling(const AffineTransform&, const FloatRect& fullRect, const FloatRoundedRect& holeRect, const LayerImageProperties& layerImageProperties, const DrawBufferCallback& drawBuffer)
 {
-    auto layerImage = ImageBuffer::create(layerSize, Unaccelerated, 1);
+    auto layerImage = ImageBuffer::create(expandedIntSize(layerImageProperties.layerSize), Unaccelerated, 1);
     if (!layerImage)
         return;
-    m_layerImage = layerImage.get();
 
     {
         GraphicsContext& shadowContext = layerImage->context();
         GraphicsContextStateSaver stateSaver(shadowContext);
-        shadowContext.translate(m_layerContextTranslation);
+        shadowContext.translate(layerImageProperties.layerContextTranslation);
 
         Path path;
         path.addRect(fullRect);
         if (holeRect.radii().isZero())
             path.addRect(holeRect.rect());
@@ -645,14 +639,14 @@
 
         shadowContext.setFillRule(WindRule::EvenOdd);
         shadowContext.setFillColor(Color::black);
         shadowContext.fillPath(path);
 
-        blurShadowBuffer(layerSize);
+        blurShadowBuffer(*layerImage, expandedIntSize(layerImageProperties.layerSize));
     }
 
-    drawBuffer(*layerImage, m_layerOrigin, m_layerSize);
+    drawBuffer(*layerImage, layerImageProperties.layerOrigin, layerImageProperties.layerSize);
 }
 
 /*
   These functions use tiling to improve the performance of the shadow
   drawing of rounded rectangles. The code basically does the following
@@ -683,46 +677,47 @@
      because the modifications caused by the corner over the blur
      effect. We fill the central or outer part with solid color to complete
      the shadow.
  */
 
-void ShadowBlur::drawRectShadowWithTiling(const AffineTransform& transform, const FloatRoundedRect& shadowedRect, const IntSize& templateSize, const IntSize& edgeSize, const DrawImageCallback& drawImage, const FillRectCallback& fillRect)
+void ShadowBlur::drawRectShadowWithTiling(const AffineTransform& transform, const FloatRoundedRect& shadowedRect, const IntSize& templateSize, const IntSize& edgeSize, const DrawImageCallback& drawImage, const FillRectCallback& fillRect, const LayerImageProperties& layerImageProperties)
 {
 #if USE(CG)
-    m_layerImage = ScratchBuffer::singleton().getScratchBuffer(templateSize);
+    auto* layerImage = ScratchBuffer::singleton().getScratchBuffer(templateSize);
 #else
-    auto layerImage = ImageBuffer::create(templateSize, Unaccelerated, 1);
-    m_layerImage = layerImage.get();
+    UNUSED_PARAM(layerImageProperties);
+    auto layerImageBuffer = ImageBuffer::create(templateSize, Unaccelerated, 1);
+    auto* layerImage = layerImageBuffer.get();
 #endif
 
-    if (!m_layerImage)
+    if (!layerImage)
         return;
 
     FloatRect templateShadow = FloatRect(edgeSize.width(), edgeSize.height(), templateSize.width() - 2 * edgeSize.width(), templateSize.height() - 2 * edgeSize.height());
 
     bool redrawNeeded = true;
 #if USE(CG)
     // Only redraw in the scratch buffer if its cached contents don't match our needs
-    redrawNeeded = ScratchBuffer::singleton().setCachedShadowValues(m_blurRadius, m_color, templateShadow, shadowedRect.radii(), m_layerSize);
+    redrawNeeded = ScratchBuffer::singleton().setCachedShadowValues(m_blurRadius, m_color, templateShadow, shadowedRect.radii(), layerImageProperties.layerSize);
 #endif
 
     if (redrawNeeded) {
         // Draw shadow into the ImageBuffer.
-        GraphicsContext& shadowContext = m_layerImage->context();
+        GraphicsContext& shadowContext = layerImage->context();
         GraphicsContextStateSaver shadowStateSaver(shadowContext);
 
         shadowContext.clearRect(FloatRect(0, 0, templateSize.width(), templateSize.height()));
         shadowContext.setFillColor(Color::black);
 
         if (shadowedRect.radii().isZero())
             shadowContext.fillRect(templateShadow);
         else {
-        Path path;
+            Path path;
             path.addRoundedRect(FloatRoundedRect(templateShadow, shadowedRect.radii()));
-        shadowContext.fillPath(path);
+            shadowContext.fillPath(path);
         }
-        blurAndColorShadowBuffer(templateSize);
+        blurAndColorShadowBuffer(*layerImage, templateSize);
     }
 
     FloatSize offset = m_offset;
     if (shadowsIgnoreTransforms())
         offset.scale(1 / transform.xScale(), 1 / transform.yScale());
@@ -730,29 +725,27 @@
     FloatRect shadowBounds = shadowedRect.rect();
     shadowBounds.move(offset);
     shadowBounds.inflateX(edgeSize.width());
     shadowBounds.inflateY(edgeSize.height());
 
-    drawLayerPiecesAndFillCenter(shadowBounds, shadowedRect.radii(), edgeSize, templateSize, drawImage, fillRect);
-
-    m_layerImage = nullptr;
+    drawLayerPiecesAndFillCenter(*layerImage, shadowBounds, shadowedRect.radii(), edgeSize, templateSize, drawImage, fillRect);
 
 #if USE(CG)
     ScratchBuffer::singleton().scheduleScratchBufferPurge();
 #endif
 }
 
 void ShadowBlur::drawInsetShadowWithTiling(const AffineTransform& transform, const FloatRect& fullRect, const FloatRoundedRect& holeRect, const IntSize& templateSize, const IntSize& edgeSize, const DrawImageCallback& drawImage, const FillRectWithHoleCallback& fillRectWithHole)
 {
 #if USE(CG)
-    m_layerImage = ScratchBuffer::singleton().getScratchBuffer(templateSize);
+    auto* layerImage = ScratchBuffer::singleton().getScratchBuffer(templateSize);
 #else
-    auto layerImage = ImageBuffer::create(templateSize, Unaccelerated, 1);
-    m_layerImage = layerImage.get();
+    auto layerImageBuffer = ImageBuffer::create(templateSize, Unaccelerated, 1);
+    auto* layerImage = layerImageBuffer.get();
 #endif
 
-    if (!m_layerImage)
+    if (!layerImage)
         return;
 
     // Draw the rectangle with hole.
     FloatRect templateBounds(0, 0, templateSize.width(), templateSize.height());
     FloatRect templateHole = FloatRect(edgeSize.width(), edgeSize.height(), templateSize.width() - 2 * edgeSize.width(), templateSize.height() - 2 * edgeSize.height());
@@ -763,26 +756,26 @@
     redrawNeeded = ScratchBuffer::singleton().setCachedInsetShadowValues(m_blurRadius, m_color, templateBounds, templateHole, holeRect.radii());
 #endif
 
     if (redrawNeeded) {
         // Draw shadow into a new ImageBuffer.
-        GraphicsContext& shadowContext = m_layerImage->context();
+        GraphicsContext& shadowContext = layerImage->context();
         GraphicsContextStateSaver shadowStateSaver(shadowContext);
         shadowContext.clearRect(templateBounds);
         shadowContext.setFillRule(WindRule::EvenOdd);
         shadowContext.setFillColor(Color::black);
 
-            Path path;
+        Path path;
         path.addRect(templateBounds);
         if (holeRect.radii().isZero())
             path.addRect(templateHole);
         else
             path.addRoundedRect(FloatRoundedRect(templateHole, holeRect.radii()));
 
-            shadowContext.fillPath(path);
+        shadowContext.fillPath(path);
 
-        blurAndColorShadowBuffer(templateSize);
+        blurAndColorShadowBuffer(*layerImage, templateSize);
     }
     FloatSize offset = m_offset;
     if (shadowsIgnoreTransforms())
         offset.scale(1 / transform.xScale(), 1 / transform.yScale());
 
@@ -796,20 +789,18 @@
     destHoleBounds.inflateY(edgeSize.height());
 
     // Fill the external part of the shadow (which may be visible because of offset).
     fillRectWithHole(boundingRect, destHoleBounds, m_color);
 
-    drawLayerPieces(destHoleBounds, holeRect.radii(), edgeSize, templateSize, drawImage);
-
-    m_layerImage = nullptr;
+    drawLayerPieces(*layerImage, destHoleBounds, holeRect.radii(), edgeSize, templateSize, drawImage);
 
 #if USE(CG)
     ScratchBuffer::singleton().scheduleScratchBufferPurge();
 #endif
 }
 
-void ShadowBlur::drawLayerPieces(const FloatRect& shadowBounds, const FloatRoundedRect::Radii& radii, const IntSize& bufferPadding, const IntSize& templateSize, const DrawImageCallback& drawImage)
+void ShadowBlur::drawLayerPieces(ImageBuffer& layerImage, const FloatRect& shadowBounds, const FloatRoundedRect::Radii& radii, const IntSize& bufferPadding, const IntSize& templateSize, const DrawImageCallback& drawImage)
 {
     const IntSize twiceRadius = IntSize(bufferPadding.width() * 2, bufferPadding.height() * 2);
 
     int leftSlice;
     int rightSlice;
@@ -822,53 +813,53 @@
     FloatRect centerRect(shadowBounds.x() + leftSlice, shadowBounds.y() + topSlice, centerWidth, centerHeight);
 
     // Top side.
     FloatRect tileRect = FloatRect(leftSlice, 0, templateSideLength, topSlice);
     FloatRect destRect = FloatRect(centerRect.x(), centerRect.y() - topSlice, centerRect.width(), topSlice);
-    drawImage(*m_layerImage, destRect, tileRect);
+    drawImage(layerImage, destRect, tileRect);
 
     // Draw the bottom side.
     tileRect.setY(templateSize.height() - bottomSlice);
     tileRect.setHeight(bottomSlice);
     destRect.setY(centerRect.maxY());
     destRect.setHeight(bottomSlice);
-    drawImage(*m_layerImage, destRect, tileRect);
+    drawImage(layerImage, destRect, tileRect);
 
     // Left side.
     tileRect = FloatRect(0, topSlice, leftSlice, templateSideLength);
     destRect = FloatRect(centerRect.x() - leftSlice, centerRect.y(), leftSlice, centerRect.height());
-    drawImage(*m_layerImage, destRect, tileRect);
+    drawImage(layerImage, destRect, tileRect);
 
     // Right side.
     tileRect.setX(templateSize.width() - rightSlice);
     tileRect.setWidth(rightSlice);
     destRect.setX(centerRect.maxX());
     destRect.setWidth(rightSlice);
-    drawImage(*m_layerImage, destRect, tileRect);
+    drawImage(layerImage, destRect, tileRect);
 
     // Top left corner.
     tileRect = FloatRect(0, 0, leftSlice, topSlice);
     destRect = FloatRect(centerRect.x() - leftSlice, centerRect.y() - topSlice, leftSlice, topSlice);
-    drawImage(*m_layerImage, destRect, tileRect);
+    drawImage(layerImage, destRect, tileRect);
 
     // Top right corner.
     tileRect = FloatRect(templateSize.width() - rightSlice, 0, rightSlice, topSlice);
     destRect = FloatRect(centerRect.maxX(), centerRect.y() - topSlice, rightSlice, topSlice);
-    drawImage(*m_layerImage, destRect, tileRect);
+    drawImage(layerImage, destRect, tileRect);
 
     // Bottom right corner.
     tileRect = FloatRect(templateSize.width() - rightSlice, templateSize.height() - bottomSlice, rightSlice, bottomSlice);
     destRect = FloatRect(centerRect.maxX(), centerRect.maxY(), rightSlice, bottomSlice);
-    drawImage(*m_layerImage, destRect, tileRect);
+    drawImage(layerImage, destRect, tileRect);
 
     // Bottom left corner.
     tileRect = FloatRect(0, templateSize.height() - bottomSlice, leftSlice, bottomSlice);
     destRect = FloatRect(centerRect.x() - leftSlice, centerRect.maxY(), leftSlice, bottomSlice);
-    drawImage(*m_layerImage, destRect, tileRect);
+    drawImage(layerImage, destRect, tileRect);
 }
 
-void ShadowBlur::drawLayerPiecesAndFillCenter(const FloatRect& shadowBounds, const FloatRoundedRect::Radii& radii, const IntSize& bufferPadding, const IntSize& templateSize, const DrawImageCallback& drawImage, const FillRectCallback& fillRect)
+void ShadowBlur::drawLayerPiecesAndFillCenter(ImageBuffer& layerImage, const FloatRect& shadowBounds, const FloatRoundedRect::Radii& radii, const IntSize& bufferPadding, const IntSize& templateSize, const DrawImageCallback& drawImage, const FillRectCallback& fillRect)
 {
     const IntSize twiceRadius = IntSize(bufferPadding.width() * 2, bufferPadding.height() * 2);
 
     int leftSlice;
     int rightSlice;
@@ -882,59 +873,58 @@
 
     // Fill center
     if (!centerRect.isEmpty())
         fillRect(centerRect, m_color);
 
-    drawLayerPieces(shadowBounds, radii, bufferPadding, templateSize, drawImage);
+    drawLayerPieces(layerImage, shadowBounds, radii, bufferPadding, templateSize, drawImage);
 }
 
-void ShadowBlur::blurShadowBuffer(const IntSize& templateSize)
+void ShadowBlur::blurShadowBuffer(ImageBuffer& layerImage, const IntSize& templateSize)
 {
     if (m_type != BlurShadow)
         return;
 
     IntRect blurRect(IntPoint(), templateSize);
-    auto layerData = m_layerImage->getUnmultipliedImageData(blurRect);
+    auto layerData = layerImage.getUnmultipliedImageData(blurRect);
     if (!layerData)
         return;
 
     blurLayerImage(layerData->data(), blurRect.size(), blurRect.width() * 4);
-    m_layerImage->putByteArray(*layerData, AlphaPremultiplication::Unpremultiplied, blurRect.size(), blurRect, { });
+    layerImage.putByteArray(*layerData, AlphaPremultiplication::Unpremultiplied, blurRect.size(), blurRect, { });
 }
 
-void ShadowBlur::blurAndColorShadowBuffer(const IntSize& templateSize)
+void ShadowBlur::blurAndColorShadowBuffer(ImageBuffer& layerImage, const IntSize& templateSize)
 {
-    blurShadowBuffer(templateSize);
+    blurShadowBuffer(layerImage, templateSize);
 
     // Mask the image with the shadow color.
-    GraphicsContext& shadowContext = m_layerImage->context();
+    GraphicsContext& shadowContext = layerImage.context();
     GraphicsContextStateSaver stateSaver(shadowContext);
     shadowContext.setCompositeOperation(CompositeSourceIn);
     shadowContext.setFillColor(m_color);
     shadowContext.fillRect(FloatRect(0, 0, templateSize.width(), templateSize.height()));
 }
 
 void ShadowBlur::drawShadowLayer(const AffineTransform& transform, const IntRect& clipBounds, const FloatRect& layerArea, const DrawShadowCallback& drawShadow, const DrawBufferCallback& drawBuffer)
 {
-    IntSize layerSize = calculateLayerBoundingRect(transform, layerArea, clipBounds);
-    if (layerSize.isEmpty())
+    auto layerImageProperties = calculateLayerBoundingRect(transform, layerArea, clipBounds);
+    if (!layerImageProperties)
         return;
 
     adjustBlurRadius(transform);
 
-    auto layerImage = ImageBuffer::create(layerSize, Unaccelerated, 1);
+    auto layerImage = ImageBuffer::create(expandedIntSize(layerImageProperties->layerSize), Unaccelerated, 1);
     if (!layerImage)
         return;
-    m_layerImage = layerImage.get();
 
     {
         GraphicsContext& shadowContext = layerImage->context();
         GraphicsContextStateSaver stateSaver(shadowContext);
-        shadowContext.translate(m_layerContextTranslation);
+        shadowContext.translate(layerImageProperties->layerContextTranslation);
         drawShadow(shadowContext);
     }
 
-    blurAndColorShadowBuffer(expandedIntSize(m_layerSize));
-    drawBuffer(*layerImage, m_layerOrigin, m_layerSize);
+    blurAndColorShadowBuffer(*layerImage, expandedIntSize(layerImageProperties->layerSize));
+    drawBuffer(*layerImage, layerImageProperties->layerOrigin, layerImageProperties->layerSize);
 }
 
 } // namespace WebCore
