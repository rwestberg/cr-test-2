diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/InitializeThreading.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/InitializeThreading.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/InitializeThreading.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/InitializeThreading.cpp
@@ -31,18 +31,22 @@
 
 #include "DisallowVMReentry.h"
 #include "ExecutableAllocator.h"
 #include "Heap.h"
 #include "Identifier.h"
+#include "JSCPtrTag.h"
 #include "JSDateMath.h"
 #include "JSGlobalObject.h"
 #include "JSLock.h"
 #include "LLIntData.h"
 #include "MacroAssemblerCodeRef.h"
 #include "Options.h"
+#include "SigillCrashAnalyzer.h"
 #include "StructureIDTable.h"
 #include "SuperSampler.h"
+#include "WasmCalleeRegistry.h"
+#include "WasmCapabilities.h"
 #include "WasmThunks.h"
 #include "WriteBarrier.h"
 #include <mutex>
 #include <wtf/MainThread.h>
 #include <wtf/Threading.h>
@@ -59,31 +63,36 @@
 
     std::call_once(initializeThreadingOnceFlag, []{
         WTF::initializeThreading();
         Options::initialize();
 
+        initializePtrTagLookup();
+
 #if ENABLE(WRITE_BARRIER_PROFILING)
         WriteBarrierCounters::initialize();
 #endif
 
-#if ENABLE(ASSEMBLER)
-        ExecutableAllocator::initializeAllocator();
-#endif
+        ExecutableAllocator::initialize();
         VM::computeCanUseJIT();
 
+        if (VM::canUseJIT() && Options::useSigillCrashAnalyzer())
+            enableSigillCrashAnalyzer();
+
         LLInt::initialize();
 #ifndef NDEBUG
         DisallowGC::initialize();
         DisallowVMReentry::initialize();
 #endif
         initializeSuperSampler();
         Thread& thread = Thread::current();
         thread.setSavedLastStackTop(thread.stack().origin());
 
 #if ENABLE(WEBASSEMBLY)
-        if (Options::useWebAssembly())
+        if (Wasm::isSupported()) {
             Wasm::Thunks::initialize();
+            Wasm::CalleeRegistry::initialize();
+        }
 #endif
 
         if (VM::isInMiniMode())
             WTF::fastEnableMiniMode();
     });
