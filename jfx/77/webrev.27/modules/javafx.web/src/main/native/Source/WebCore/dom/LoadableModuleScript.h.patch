diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/LoadableModuleScript.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/LoadableModuleScript.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/LoadableModuleScript.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/LoadableModuleScript.h
@@ -35,11 +35,11 @@
 
 class LoadableModuleScript final : public LoadableScript {
 public:
     virtual ~LoadableModuleScript();
 
-    static Ref<LoadableModuleScript> create(const String& nonce, const String& integrity, const String& crossOriginMode, const String& charset, const AtomicString& initiatorName, bool isInUserAgentShadowTree);
+    static Ref<LoadableModuleScript> create(const String& nonce, const String& integrity, ReferrerPolicy, const String& crossOriginMode, const String& charset, const AtomString& initiatorName, bool isInUserAgentShadowTree);
 
     bool isLoaded() const final;
     Optional<Error> error() const final;
     bool wasCanceled() const final;
 
@@ -58,11 +58,11 @@
     void notifyLoadWasCanceled();
 
     UniquedStringImpl* moduleKey() const { return m_moduleKey.get(); }
 
 private:
-    LoadableModuleScript(const String& nonce, const String& integrity, const String& crossOriginMode, const String& charset, const AtomicString& initiatorName, bool isInUserAgentShadowTree);
+    LoadableModuleScript(const String& nonce, const String& integrity, ReferrerPolicy, const String& crossOriginMode, const String& charset, const AtomString& initiatorName, bool isInUserAgentShadowTree);
 
     Ref<ModuleFetchParameters> m_parameters;
     RefPtr<UniquedStringImpl> m_moduleKey;
     Optional<LoadableScript::Error> m_error;
     bool m_wasCanceled { false };
