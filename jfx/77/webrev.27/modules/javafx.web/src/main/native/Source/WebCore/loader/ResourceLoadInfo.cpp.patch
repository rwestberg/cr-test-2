diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadInfo.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadInfo.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadInfo.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadInfo.cpp
@@ -27,15 +27,19 @@
 #include "ResourceLoadInfo.h"
 
 #include "ContentExtensionActions.h"
 #include "SecurityOrigin.h"
 
+#if ENABLE(CONTENT_EXTENSIONS)
+
 namespace WebCore {
+namespace ContentExtensions {
 
 ResourceType toResourceType(CachedResource::Type type)
 {
     switch (type) {
+    case CachedResource::Type::LinkPrefetch:
     case CachedResource::Type::MainResource:
         return ResourceType::Document;
     case CachedResource::Type::SVGDocumentResource:
         return ResourceType::SVGDocument;
     case CachedResource::Type::ImageResource:
@@ -57,21 +61,19 @@
 
     case CachedResource::Type::MediaResource:
         return ResourceType::Media;
 
     case CachedResource::Type::Beacon:
+    case CachedResource::Type::Ping:
     case CachedResource::Type::Icon:
     case CachedResource::Type::RawResource:
         return ResourceType::Raw;
 
 #if ENABLE(VIDEO_TRACK)
     case CachedResource::Type::TextTrackResource:
         return ResourceType::Media;
 #endif
-    case CachedResource::Type::LinkPrefetch:
-        ASSERT_NOT_REACHED();
-        break;
 #if ENABLE(APPLICATION_MANIFEST)
     case CachedResource::Type::ApplicationManifest:
         return ResourceType::Raw;
 #endif
     };
@@ -96,10 +98,12 @@
         return static_cast<uint16_t>(ResourceType::SVGDocument);
     if (name == "media")
         return static_cast<uint16_t>(ResourceType::Media);
     if (name == "popup")
         return static_cast<uint16_t>(ResourceType::Popup);
+    if (name == "ping")
+        return static_cast<uint16_t>(ResourceType::Ping);
     return static_cast<uint16_t>(ResourceType::Invalid);
 }
 
 uint16_t readLoadType(const String& name)
 {
@@ -120,11 +124,14 @@
 
 ResourceFlags ResourceLoadInfo::getResourceFlags() const
 {
     ResourceFlags flags = 0;
     ASSERT(type != ResourceType::Invalid);
-    flags |= static_cast<ResourceFlags>(type);
+    flags |= type.toRaw();
     flags |= isThirdParty() ? static_cast<ResourceFlags>(LoadType::ThirdParty) : static_cast<ResourceFlags>(LoadType::FirstParty);
     return flags;
 }
 
+} // namespace ContentExtensions
 } // namespace WebCore
+
+#endif // ENABLE(CONTENT_EXTENSIONS)
