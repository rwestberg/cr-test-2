diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMPromiseDeferred.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMPromiseDeferred.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMPromiseDeferred.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMPromiseDeferred.cpp
@@ -195,18 +195,20 @@
     // deferred can only be null in workers.
     RELEASE_ASSERT(deferred);
     return DeferredPromise::create(domWindow, *deferred);
 }
 
-JSC::EncodedJSValue createRejectedPromiseWithTypeError(JSC::ExecState& state, const String& errorMessage)
+JSC::EncodedJSValue createRejectedPromiseWithTypeError(JSC::ExecState& state, const String& errorMessage, RejectedPromiseWithTypeErrorCause cause)
 {
     ASSERT(state.lexicalGlobalObject());
     auto& globalObject = *state.lexicalGlobalObject();
 
     auto promiseConstructor = globalObject.promiseConstructor();
     auto rejectFunction = promiseConstructor->get(&state, state.vm().propertyNames->builtinNames().rejectPrivateName());
-    auto rejectionValue = createTypeError(&state, errorMessage);
+    auto* rejectionValue = static_cast<ErrorInstance*>(createTypeError(&state, errorMessage));
+    if (cause == RejectedPromiseWithTypeErrorCause::NativeGetter)
+        rejectionValue->setNativeGetterTypeError();
 
     CallData callData;
     auto callType = getCallData(state.vm(), rejectFunction, callData);
     ASSERT(callType != CallType::None);
 
