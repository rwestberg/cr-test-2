diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/UniqueIDBDatabaseTransaction.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/UniqueIDBDatabaseTransaction.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/UniqueIDBDatabaseTransaction.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/UniqueIDBDatabaseTransaction.h
@@ -25,20 +25,20 @@
 
 #pragma once
 
 #if ENABLE(INDEXED_DATABASE)
 
+#include "IDBError.h"
 #include "IDBTransactionInfo.h"
-#include "UniqueIDBDatabaseConnection.h"
 #include <wtf/Ref.h>
 #include <wtf/RefCounted.h>
+#include <wtf/WeakPtr.h>
 
 namespace WebCore {
 
 class IDBCursorInfo;
 class IDBDatabaseInfo;
-class IDBError;
 class IDBIndexInfo;
 class IDBKeyData;
 class IDBObjectStoreInfo;
 class IDBRequestData;
 class IDBValue;
@@ -48,14 +48,17 @@
 struct IDBIterateCursorData;
 struct IDBKeyRangeData;
 
 namespace IDBServer {
 
+class IDBServer;
 class UniqueIDBDatabaseConnection;
 
-class UniqueIDBDatabaseTransaction : public RefCounted<UniqueIDBDatabaseTransaction> {
+class UniqueIDBDatabaseTransaction : public RefCounted<UniqueIDBDatabaseTransaction>, public CanMakeWeakPtr<UniqueIDBDatabaseTransaction> {
 public:
+    enum class State { Running, Aborting, Committing, Aborted, Committed };
+
     static Ref<UniqueIDBDatabaseTransaction> create(UniqueIDBDatabaseConnection&, const IDBTransactionInfo&);
 
     ~UniqueIDBDatabaseTransaction();
 
     UniqueIDBDatabaseConnection& databaseConnection() { return m_databaseConnection.get(); }
@@ -86,19 +89,27 @@
 
     void didActivateInBackingStore(const IDBError&);
 
     const Vector<uint64_t>& objectStoreIdentifiers();
 
+    void setState(State state) { m_state = state; }
+    State state() const { return m_state; }
+    void setResult(const IDBError& error) { m_result = error; }
+    const IDBError& result() const { return m_result; }
+
 private:
     UniqueIDBDatabaseTransaction(UniqueIDBDatabaseConnection&, const IDBTransactionInfo&);
 
     Ref<UniqueIDBDatabaseConnection> m_databaseConnection;
     IDBTransactionInfo m_transactionInfo;
 
     std::unique_ptr<IDBDatabaseInfo> m_originalDatabaseInfo;
 
     Vector<uint64_t> m_objectStoreIdentifiers;
+
+    State m_state { State::Running };
+    IDBError m_result;
 };
 
 } // namespace IDBServer
 } // namespace WebCore
 
