diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCache.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCache.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCache.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCache.cpp
@@ -31,13 +31,13 @@
 #include "HTTPParsers.h"
 #include "JSFetchRequest.h"
 #include "JSFetchResponse.h"
 #include "ReadableStreamChunk.h"
 #include "ScriptExecutionContext.h"
+#include <wtf/CompletionHandler.h>
 #include <wtf/URL.h>
 
-
 namespace WebCore {
 using namespace WebCore::DOMCacheEngine;
 
 DOMCache::DOMCache(ScriptExecutionContext& context, String&& name, uint64_t identifier, Ref<CacheStorageConnection>&& connection)
     : ActiveDOMObject(&context)
@@ -153,14 +153,11 @@
     return hasStar;
 }
 
 class FetchTasksHandler : public RefCounted<FetchTasksHandler> {
 public:
-    explicit FetchTasksHandler(Function<void(ExceptionOr<Vector<Record>>&&)>&& callback)
-        : m_callback(WTFMove(callback))
-    {
-    }
+    static Ref<FetchTasksHandler> create(Ref<DOMCache>&& domCache, CompletionHandler<void(ExceptionOr<Vector<Record>>&&)>&& callback) { return adoptRef(*new FetchTasksHandler(WTFMove(domCache), WTFMove(callback))); }
 
     ~FetchTasksHandler()
     {
         if (m_callback)
             m_callback(WTFMove(m_records));
@@ -173,14 +170,16 @@
         ASSERT(!isDone());
         m_records.append(WTFMove(record));
         return m_records.size() - 1;
     }
 
-    void addResponseBody(size_t position, Ref<SharedBuffer>&& data)
+    void addResponseBody(size_t position, FetchResponse& response, DOMCacheEngine::ResponseBody&& data)
     {
         ASSERT(!isDone());
-        m_records[position].responseBody = WTFMove(data);
+        auto& record = m_records[position];
+        record.responseBodySize = m_domCache->connection().computeRecordBodySize(response, data);
+        record.responseBody = WTFMove(data);
     }
 
     bool isDone() const { return !m_callback; }
 
     void error(Exception&& exception)
@@ -188,12 +187,19 @@
         if (auto callback = WTFMove(m_callback))
             callback(WTFMove(exception));
     }
 
 private:
+    FetchTasksHandler(Ref<DOMCache>&& domCache, CompletionHandler<void(ExceptionOr<Vector<Record>>&&)>&& callback)
+        : m_domCache(WTFMove(domCache))
+        , m_callback(WTFMove(callback))
+    {
+    }
+
+    Ref<DOMCache> m_domCache;
     Vector<Record> m_records;
-    Function<void(ExceptionOr<Vector<Record>>&&)> m_callback;
+    CompletionHandler<void(ExceptionOr<Vector<Record>>&&)> m_callback;
 };
 
 ExceptionOr<Ref<FetchRequest>> DOMCache::requestFromInfo(RequestInfo&& info, bool ignoreMethod)
 {
     RefPtr<FetchRequest> request;
@@ -225,19 +231,19 @@
             return;
         }
         requests.uncheckedAppend(requestOrException.releaseReturnValue());
     }
 
-    auto taskHandler = adoptRef(*new FetchTasksHandler([protectedThis = makeRef(*this), this, promise = WTFMove(promise)](ExceptionOr<Vector<Record>>&& result) mutable {
+    auto taskHandler = FetchTasksHandler::create(*this, [this, promise = WTFMove(promise)](ExceptionOr<Vector<Record>>&& result) mutable {
         if (result.hasException()) {
             promise.reject(result.releaseException());
             return;
         }
         batchPutOperation(result.releaseReturnValue(), [promise = WTFMove(promise)](ExceptionOr<void>&& result) mutable {
             promise.settle(WTFMove(result));
         });
-    }));
+    });
 
     for (auto& request : requests) {
         auto& requestReference = request.get();
         FetchResponse::fetch(*scriptExecutionContext(), requestReference, [this, request = WTFMove(request), taskHandler = taskHandler.copyRef()](ExceptionOr<FetchResponse&>&& result) mutable {
 
@@ -273,11 +279,11 @@
                     return;
                 }
             }
             size_t recordPosition = taskHandler->addRecord(toConnectionRecord(request.get(), response, nullptr));
 
-            response.consumeBodyReceivedByChunk([taskHandler = WTFMove(taskHandler), recordPosition, data = SharedBuffer::create()] (ExceptionOr<ReadableStreamChunk*>&& result) mutable {
+            response.consumeBodyReceivedByChunk([taskHandler = WTFMove(taskHandler), recordPosition, data = SharedBuffer::create(), response = makeRef(response)] (ExceptionOr<ReadableStreamChunk*>&& result) mutable {
                 if (taskHandler->isDone())
                     return;
 
                 if (result.hasException()) {
                     taskHandler->error(result.releaseException());
@@ -285,11 +291,11 @@
                 }
 
                 if (auto chunk = result.returnValue())
                     data->append(reinterpret_cast<const char*>(chunk->data), chunk->size);
                 else
-                    taskHandler->addResponseBody(recordPosition, WTFMove(data));
+                    taskHandler->addResponseBody(recordPosition, response, WTFMove(data));
             });
         });
     }
 }
 
@@ -429,27 +435,24 @@
     });
 }
 
 void DOMCache::retrieveRecords(const URL& url, WTF::Function<void(Optional<Exception>&&)>&& callback)
 {
-    setPendingActivity(*this);
-
     URL retrieveURL = url;
     retrieveURL.removeQueryAndFragmentIdentifier();
 
-    m_connection->retrieveRecords(m_identifier, retrieveURL, [this, callback = WTFMove(callback)](RecordsOrError&& result) {
-        if (!m_isStopped) {
-            if (!result.has_value()) {
-                callback(DOMCacheEngine::convertToExceptionAndLog(scriptExecutionContext(), result.error()));
-                return;
-            }
+    m_connection->retrieveRecords(m_identifier, retrieveURL, [this, pendingActivity = makePendingActivity(*this), callback = WTFMove(callback)](RecordsOrError&& result) {
+        if (m_isStopped)
+            return;
 
-            if (result.has_value())
-                updateRecords(WTFMove(result.value()));
-            callback(WTF::nullopt);
+        if (!result.has_value()) {
+            callback(DOMCacheEngine::convertToExceptionAndLog(scriptExecutionContext(), result.error()));
+            return;
         }
-        unsetPendingActivity(*this);
+
+        updateRecords(WTFMove(result.value()));
+        callback(WTF::nullopt);
     });
 }
 
 void DOMCache::queryCache(Ref<FetchRequest>&& request, CacheQueryOptions&& options, WTF::Function<void(ExceptionOr<Vector<CacheStorageRecord>>&&)>&& callback)
 {
@@ -482,19 +485,19 @@
     return records;
 }
 
 void DOMCache::batchDeleteOperation(const FetchRequest& request, CacheQueryOptions&& options, WTF::Function<void(ExceptionOr<bool>&&)>&& callback)
 {
-    setPendingActivity(*this);
-    m_connection->batchDeleteOperation(m_identifier, request.internalRequest(), WTFMove(options), [this, callback = WTFMove(callback)](RecordIdentifiersOrError&& result) {
-        if (!m_isStopped) {
-            if (!result.has_value())
-                callback(DOMCacheEngine::convertToExceptionAndLog(scriptExecutionContext(), result.error()));
-            else
-                callback(!result.value().isEmpty());
+    m_connection->batchDeleteOperation(m_identifier, request.internalRequest(), WTFMove(options), [this, pendingActivity = makePendingActivity(*this), callback = WTFMove(callback)](RecordIdentifiersOrError&& result) {
+        if (m_isStopped)
+            return;
+
+        if (!result.has_value()) {
+            callback(DOMCacheEngine::convertToExceptionAndLog(scriptExecutionContext(), result.error()));
+            return;
         }
-        unsetPendingActivity(*this);
+        callback(!result.value().isEmpty());
     });
 }
 
 Record DOMCache::toConnectionRecord(const FetchRequest& request, FetchResponse& response, DOMCacheEngine::ResponseBody&& responseBody)
 {
@@ -505,11 +508,11 @@
     ASSERT(!cachedRequest.isNull());
     ASSERT(!cachedResponse.isNull());
 
     auto sizeWithPadding = response.bodySizeWithPadding();
     if (!sizeWithPadding) {
-        sizeWithPadding = m_connection->computeRecordBodySize(response, responseBody, cachedResponse.tainting());
+        sizeWithPadding = m_connection->computeRecordBodySize(response, responseBody);
         response.setBodySizeWithPadding(sizeWithPadding);
     }
 
     return { 0, 0,
         request.headers().guard(), WTFMove(cachedRequest), request.fetchOptions(), request.internalRequestReferrer(),
@@ -525,19 +528,18 @@
     batchPutOperation(WTFMove(records), WTFMove(callback));
 }
 
 void DOMCache::batchPutOperation(Vector<Record>&& records, WTF::Function<void(ExceptionOr<void>&&)>&& callback)
 {
-    setPendingActivity(*this);
-    m_connection->batchPutOperation(m_identifier, WTFMove(records), [this, callback = WTFMove(callback)](RecordIdentifiersOrError&& result) {
-        if (!m_isStopped) {
-            if (!result.has_value())
-                callback(DOMCacheEngine::convertToExceptionAndLog(scriptExecutionContext(), result.error()));
-            else
-                callback({ });
+    m_connection->batchPutOperation(m_identifier, WTFMove(records), [this, pendingActivity = makePendingActivity(*this), callback = WTFMove(callback)](RecordIdentifiersOrError&& result) {
+        if (m_isStopped)
+            return;
+        if (!result.has_value()) {
+            callback(DOMCacheEngine::convertToExceptionAndLog(scriptExecutionContext(), result.error()));
+            return;
         }
-        unsetPendingActivity(*this);
+        callback({ });
     });
 }
 
 void DOMCache::updateRecords(Vector<Record>&& records)
 {
