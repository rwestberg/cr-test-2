diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/CagedPtr.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/CagedPtr.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/CagedPtr.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/CagedPtr.h
@@ -25,126 +25,125 @@
 
 #pragma once
 
 #include <wtf/DumbPtrTraits.h>
 #include <wtf/Gigacage.h>
+#include <wtf/PtrTag.h>
+
+#include <climits>
 
 namespace WTF {
 
-template<Gigacage::Kind passedKind, typename T, typename PtrTraits = DumbPtrTraits<T>>
+constexpr bool tagCagedPtr = true;
+
+template<Gigacage::Kind passedKind, typename T, bool shouldTag = false, typename PtrTraits = DumbPtrTraits<T>>
 class CagedPtr {
 public:
     static constexpr Gigacage::Kind kind = passedKind;
+    static constexpr unsigned numberOfPACBits = 25;
+    static constexpr uintptr_t nonPACBitsMask = (1ull << ((sizeof(T*) * CHAR_BIT) - numberOfPACBits)) - 1;
 
     CagedPtr() : CagedPtr(nullptr) { }
-    CagedPtr(std::nullptr_t) : m_ptr(nullptr) { }
+    CagedPtr(std::nullptr_t)
+        : m_ptr(shouldTag ? tagArrayPtr<T>(nullptr, 0) : nullptr)
+    { }
 
-    explicit CagedPtr(T* ptr)
-        : m_ptr(ptr)
-    {
-    }
+    CagedPtr(T* ptr, unsigned size)
+        : m_ptr(shouldTag ? tagArrayPtr(ptr, size) : ptr)
+    { }
 
-    T* get() const
+    T* get(unsigned size) const
     {
         ASSERT(m_ptr);
-        return Gigacage::caged(kind, PtrTraits::unwrap(m_ptr));
+        T* ptr = PtrTraits::unwrap(m_ptr);
+        T* cagedPtr = Gigacage::caged(kind, ptr);
+        T* untaggedPtr = shouldTag ? untagArrayPtr(mergePointers(ptr, cagedPtr), size) : cagedPtr;
+        return untaggedPtr;
     }
 
-    T* getMayBeNull() const
+    T* getMayBeNull(unsigned size) const
     {
-        if (!m_ptr)
+        T* ptr = PtrTraits::unwrap(m_ptr);
+        if (!removeArrayPtrTag(ptr))
             return nullptr;
-        return get();
+        T* cagedPtr = Gigacage::caged(kind, ptr);
+        T* untaggedPtr = shouldTag ? untagArrayPtr(mergePointers(ptr, cagedPtr), size) : cagedPtr;
+        return untaggedPtr;
     }
 
-    CagedPtr& operator=(T* ptr)
+    T* getUnsafe() const
     {
-        m_ptr = ptr;
-        return *this;
+        T* ptr = PtrTraits::unwrap(m_ptr);
+        ptr = shouldTag ? removeArrayPtrTag(ptr) : ptr;
+        return Gigacage::cagedMayBeNull(kind, ptr);
     }
 
-    CagedPtr& operator=(T*&& ptr)
-    {
-        m_ptr = WTFMove(ptr);
-        return *this;
-    }
+    // We need the template here so that the type of U is deduced at usage time rather than class time. U should always be T.
+    template<typename U = T>
+    typename std::enable_if<!std::is_same<void, U>::value, T>::type&
+    /* T& */ at(unsigned index, unsigned size) const { return get(size)[index]; }
 
-    bool operator==(const CagedPtr& other) const
+    void recage(unsigned oldSize, unsigned newSize)
     {
-        return getMayBeNull() == other.getMayBeNull();
+        auto ptr = get(oldSize);
+        ASSERT(ptr == getUnsafe());
+        *this = CagedPtr(ptr, newSize);
     }
 
-    bool operator!=(const CagedPtr& other) const
+    CagedPtr(CagedPtr& other)
+        : m_ptr(other.m_ptr)
     {
-        return !(*this == other);
     }
 
-    explicit operator bool() const
+    CagedPtr& operator=(const CagedPtr& ptr)
     {
-        return *this != CagedPtr();
-    }
-
-    T& operator*() const { return *get(); }
-    T* operator->() const { return get(); }
-
-    template<typename IndexType>
-    T& operator[](IndexType index) const { return get()[index]; }
-
-protected:
-    typename PtrTraits::StorageType m_ptr;
-};
-
-template<Gigacage::Kind passedKind, typename PtrTraits>
-class CagedPtr<passedKind, void, PtrTraits> {
-public:
-    static constexpr Gigacage::Kind kind = passedKind;
-
-    CagedPtr() : CagedPtr(nullptr) { }
-    CagedPtr(std::nullptr_t) : m_ptr(nullptr) { }
-
-    explicit CagedPtr(void* ptr)
-        : m_ptr(ptr)
-    {
-    }
-
-    void* get() const
-    {
-        ASSERT(m_ptr);
-        return Gigacage::caged(kind, PtrTraits::unwrap(m_ptr));
+        m_ptr = ptr.m_ptr;
+        return *this;
     }
 
-    void* getMayBeNull() const
+    CagedPtr(CagedPtr&& other)
+        : m_ptr(PtrTraits::exchange(other.m_ptr, nullptr))
     {
-        if (!m_ptr)
-            return nullptr;
-        return get();
     }
 
-    CagedPtr& operator=(void* ptr)
+    CagedPtr& operator=(CagedPtr&& ptr)
     {
-        m_ptr = ptr;
+        m_ptr = PtrTraits::exchange(ptr.m_ptr, nullptr);
         return *this;
     }
 
     bool operator==(const CagedPtr& other) const
     {
-        return getMayBeNull() == other.getMayBeNull();
+        bool result = m_ptr == other.m_ptr;
+        ASSERT(result == (getUnsafe() == other.getUnsafe()));
+        return result;
     }
 
     bool operator!=(const CagedPtr& other) const
     {
         return !(*this == other);
     }
 
     explicit operator bool() const
     {
-        return *this != CagedPtr();
+        return getUnsafe() != nullptr;
     }
 
 protected:
+    static inline T* mergePointers(T* sourcePtr, T* cagedPtr)
+    {
+#if CPU(ARM64E)
+        return reinterpret_cast<T*>((reinterpret_cast<uintptr_t>(sourcePtr) & ~nonPACBitsMask) | (reinterpret_cast<uintptr_t>(cagedPtr) & nonPACBitsMask));
+#else
+        UNUSED_PARAM(sourcePtr);
+        return cagedPtr;
+#endif
+    }
+
     typename PtrTraits::StorageType m_ptr;
 };
 
 } // namespace WTF
 
 using WTF::CagedPtr;
+using WTF::tagCagedPtr;
 
