diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ImageSource.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ImageSource.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ImageSource.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ImageSource.cpp
@@ -36,23 +36,27 @@
 #include <wtf/SystemTracing.h>
 #include <wtf/URL.h>
 
 #if USE(DIRECT2D)
 #include "GraphicsContext.h"
+#include "PlatformContextDirect2D.h"
 #endif
 
 namespace WebCore {
 
 ImageSource::ImageSource(BitmapImage* image, AlphaOption alphaOption, GammaAndColorProfileOption gammaAndColorProfileOption)
     : m_image(image)
     , m_alphaOption(alphaOption)
     , m_gammaAndColorProfileOption(gammaAndColorProfileOption)
 {
+    ASSERT(isMainThread());
 }
 
 ImageSource::ImageSource(NativeImagePtr&& nativeImage)
 {
+    ASSERT(isMainThread());
+
     m_frameCount = 1;
     m_encodedDataStatus = EncodedDataStatus::Complete;
     growFrames();
 
     setNativeImage(WTFMove(nativeImage));
@@ -66,10 +70,11 @@
 }
 
 ImageSource::~ImageSource()
 {
     ASSERT(!hasAsyncDecodingQueue());
+    ASSERT(isMainThread());
 }
 
 bool ImageSource::ensureDecoderAvailable(SharedBuffer* data)
 {
     if (!data || isDecoderAvailable())
@@ -659,11 +664,11 @@
 
 #if USE(DIRECT2D)
 void ImageSource::setTargetContext(const GraphicsContext* targetContext)
 {
     if (isDecoderAvailable() && targetContext)
-        m_decoder->setTargetContext(targetContext->platformContext());
+        m_decoder->setTargetContext(targetContext->platformContext()->renderTarget());
 }
 #endif
 
 NativeImagePtr ImageSource::createFrameImageAtIndex(size_t index, SubsamplingLevel subsamplingLevel)
 {
@@ -686,10 +691,10 @@
     ts.dumpProperty("frame-count", frameCount());
     ts.dumpProperty("repetitions", repetitionCount());
     ts.dumpProperty("solid-color", singlePixelSolidColor());
 
     ImageOrientation orientation = frameOrientationAtIndex(0);
-    if (orientation != OriginTopLeft)
+    if (orientation != ImageOrientation::None)
         ts.dumpProperty("orientation", orientation);
 }
 
 }
