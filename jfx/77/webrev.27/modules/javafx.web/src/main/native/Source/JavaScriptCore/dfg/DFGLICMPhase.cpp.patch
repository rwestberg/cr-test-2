diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGLICMPhase.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGLICMPhase.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGLICMPhase.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGLICMPhase.cpp
@@ -240,10 +240,11 @@
                 dataLog("    Not hoisting ", node, " because CFA is invalid.\n");
             return false;
         }
 
         m_state.initializeTo(data.preHeader);
+        ASSERT(m_state.isValid());
         NodeOrigin originalOrigin = node->origin;
         bool canSpeculateBlindly = !m_graph.hasGlobalExitSite(originalOrigin.semantic, HoistingFailed);
 
         // NOTE: We could just use BackwardsDominators here directly, since we already know that the
         // preHeader dominates fromBlock. But we wouldn't get anything from being so clever, since
@@ -261,14 +262,31 @@
             node->origin.wasHoisted |= addsBlindSpeculation;
             hoistedNodes.append(node);
         };
 
         auto updateAbstractState = [&] {
+            auto invalidate = [&] (const NaturalLoop* loop) {
+                LoopData& data = m_data[loop->index()];
+                data.preHeader->cfaDidFinish = false;
+
+                for (unsigned bodyIndex = loop->size(); bodyIndex--;) {
+                    BasicBlock* block = loop->at(bodyIndex);
+                    if (block != data.preHeader)
+                        block->cfaHasVisited = false;
+                    block->cfaDidFinish = false;
+                }
+            };
+
             // We can trust what AI proves about edge proof statuses when hoisting to the preheader.
             m_state.trustEdgeProofs();
-            for (unsigned i = 0; i < hoistedNodes.size(); ++i)
-                m_interpreter.execute(hoistedNodes[i]);
+            for (unsigned i = 0; i < hoistedNodes.size(); ++i) {
+                if (!m_interpreter.execute(hoistedNodes[i])) {
+                    invalidate(loop);
+                    return;
+                }
+            }
+
             // However, when walking various inner loops below, the proof status of
             // an edge may be trivially true, even if it's not true in the preheader
             // we hoist to. We don't allow the below node executions to change the
             // state of edge proofs. An example of where a proof is trivially true
             // is if we have two loops, L1 and L2, where L2 is nested inside L1. The
@@ -298,12 +316,16 @@
                     continue;
                 // We handled this above.
                 if (subPreHeader == data.preHeader)
                     continue;
                 m_state.initializeTo(subPreHeader);
-                for (unsigned i = 0; i < hoistedNodes.size(); ++i)
-                    m_interpreter.execute(hoistedNodes[i]);
+                for (unsigned i = 0; i < hoistedNodes.size(); ++i) {
+                    if (!m_interpreter.execute(hoistedNodes[i])) {
+                        invalidate(subLoop);
+                        break;
+                    }
+                }
             }
         };
 
         auto tryHoistChecks = [&] {
             if (addsBlindSpeculation && !canSpeculateBlindly)
