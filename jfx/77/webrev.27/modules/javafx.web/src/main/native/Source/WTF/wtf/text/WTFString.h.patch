diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/WTFString.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/WTFString.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/WTFString.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/WTFString.h
@@ -36,10 +36,14 @@
 
 #if PLATFORM(JAVA)
 #include <wtf/java/JavaRef.h>
 #endif
 
+#if OS(WINDOWS)
+#include <wtf/text/win/WCharStringExtras.h>
+#endif
+
 namespace WTF {
 
 // Declarations of string operations
 
 WTF_EXPORT_PRIVATE int charactersToIntStrict(const LChar*, size_t, bool* ok = nullptr, int base = 10);
@@ -76,11 +80,12 @@
 
 template<bool isSpecialCharacter(UChar), typename CharacterType> bool isAllSpecialCharacters(const CharacterType*, size_t);
 
 enum TrailingZerosTruncatingPolicy { KeepTrailingZeros, TruncateTrailingZeros };
 
-class String {
+class String final {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     // Construct a null string, distinguishable from an empty string.
     String() = default;
 
     // Construct a string with UTF-16 data.
@@ -112,26 +117,24 @@
     String(StringImpl&);
     String(StringImpl*);
     String(Ref<StringImpl>&&);
     String(RefPtr<StringImpl>&&);
 
-    String(Ref<AtomicStringImpl>&&);
-    String(RefPtr<AtomicStringImpl>&&);
+    String(Ref<AtomStringImpl>&&);
+    String(RefPtr<AtomStringImpl>&&);
 
     String(StaticStringImpl&);
     String(StaticStringImpl*);
 
     // Construct a string from a constant string literal.
     WTF_EXPORT_PRIVATE String(ASCIILiteral);
 
     // Construct a string from a constant string literal.
-    // This constructor is the "big" version, as it put the length in the function call and generate bigger code.
+    // This is the "big" version: puts the length in the function call and generates bigger code.
     enum ConstructFromLiteralTag { ConstructFromLiteral };
     template<unsigned characterCount> String(const char (&characters)[characterCount], ConstructFromLiteralTag) : m_impl(StringImpl::createFromLiteral<characterCount>(characters)) { }
 
-    // FIXME: Why do we have to define these explicitly given that we just want the default versions?
-    // We have verified empirically that we do.
     String(const String&) = default;
     String(String&&) = default;
     String& operator=(const String&) = default;
     String& operator=(String&&) = default;
 
@@ -177,15 +180,16 @@
     WTF_EXPORT_PRIVATE static String number(unsigned);
     WTF_EXPORT_PRIVATE static String number(long);
     WTF_EXPORT_PRIVATE static String number(unsigned long);
     WTF_EXPORT_PRIVATE static String number(long long);
     WTF_EXPORT_PRIVATE static String number(unsigned long long);
+    WTF_EXPORT_PRIVATE static String number(float);
+    WTF_EXPORT_PRIVATE static String number(double);
 
-    WTF_EXPORT_PRIVATE static String number(double, unsigned precision = 6, TrailingZerosTruncatingPolicy = TruncateTrailingZeros);
-
-    // Number to String conversion following the ECMAScript definition.
-    WTF_EXPORT_PRIVATE static String numberToStringECMAScript(double);
+    WTF_EXPORT_PRIVATE static String numberToStringFixedPrecision(float, unsigned precision = 6, TrailingZerosTruncatingPolicy = TruncateTrailingZeros);
+    WTF_EXPORT_PRIVATE static String numberToStringFixedPrecision(double, unsigned precision = 6, TrailingZerosTruncatingPolicy = TruncateTrailingZeros);
+    WTF_EXPORT_PRIVATE static String numberToStringFixedWidth(float, unsigned decimalPlaces);
     WTF_EXPORT_PRIVATE static String numberToStringFixedWidth(double, unsigned decimalPlaces);
 
     // Find a single character or string, also with match function & latin1 forms.
     size_t find(UChar character, unsigned start = 0) const { return m_impl ? m_impl->find(character, start) : notFound; }
 
@@ -249,12 +253,12 @@
     WTF_EXPORT_PRIVATE String convertToASCIILowercase() const;
     WTF_EXPORT_PRIVATE String convertToASCIIUppercase() const;
     WTF_EXPORT_PRIVATE String convertToLowercaseWithoutLocale() const;
     WTF_EXPORT_PRIVATE String convertToLowercaseWithoutLocaleStartingAtFailingIndex8Bit(unsigned) const;
     WTF_EXPORT_PRIVATE String convertToUppercaseWithoutLocale() const;
-    WTF_EXPORT_PRIVATE String convertToLowercaseWithLocale(const AtomicString& localeIdentifier) const;
-    WTF_EXPORT_PRIVATE String convertToUppercaseWithLocale(const AtomicString& localeIdentifier) const;
+    WTF_EXPORT_PRIVATE String convertToLowercaseWithLocale(const AtomString& localeIdentifier) const;
+    WTF_EXPORT_PRIVATE String convertToUppercaseWithLocale(const AtomString& localeIdentifier) const;
 
     WTF_EXPORT_PRIVATE String stripWhiteSpace() const;
     WTF_EXPORT_PRIVATE String simplifyWhiteSpace() const;
     WTF_EXPORT_PRIVATE String simplifyWhiteSpace(CodeUnitMatchFunction) const;
 
@@ -330,10 +334,22 @@
     WTF_EXPORT_PRIVATE String(JNIEnv*, const JLString &);
     WTF_EXPORT_PRIVATE JLString toJavaString(JNIEnv*) const;
     WTF_EXPORT_PRIVATE static String fromJavaString(JNIEnv *, jstring);
 #endif
 
+#if OS(WINDOWS) && !PLATFORM(JAVA)
+#if U_ICU_VERSION_MAJOR_NUM >= 59
+    String(const wchar_t* characters, unsigned length)
+        : String(ucharFrom(characters), length) { }
+
+    String(const wchar_t* characters)
+        : String(ucharFrom(characters)) { }
+#endif
+
+    WTF_EXPORT_PRIVATE Vector<wchar_t> wideCharacters() const;
+#endif
+
     WTF_EXPORT_PRIVATE static String make8BitFrom16BitSource(const UChar*, size_t);
     template<size_t inlineCapacity> static String make8BitFrom16BitSource(const Vector<UChar, inlineCapacity>&);
 
     WTF_EXPORT_PRIVATE static String make16BitFrom8BitSource(const LChar*, size_t);
 
@@ -468,16 +484,16 @@
 inline String::String(RefPtr<StringImpl>&& string)
     : m_impl(WTFMove(string))
 {
 }
 
-inline String::String(Ref<AtomicStringImpl>&& string)
+inline String::String(Ref<AtomStringImpl>&& string)
     : m_impl(WTFMove(string))
 {
 }
 
-inline String::String(RefPtr<AtomicStringImpl>&& string)
+inline String::String(RefPtr<AtomStringImpl>&& string)
     : m_impl(WTFMove(string))
 {
 }
 
 inline String::String(StaticStringImpl& string)
@@ -672,6 +688,6 @@
 using WTF::find;
 using WTF::isAllSpecialCharacters;
 using WTF::isSpaceOrNewline;
 using WTF::reverseFind;
 
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
