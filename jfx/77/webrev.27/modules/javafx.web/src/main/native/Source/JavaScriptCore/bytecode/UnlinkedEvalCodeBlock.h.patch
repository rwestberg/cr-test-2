diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/UnlinkedEvalCodeBlock.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/UnlinkedEvalCodeBlock.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/UnlinkedEvalCodeBlock.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/UnlinkedEvalCodeBlock.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2012-2016 Apple Inc. All Rights Reserved.
+ * Copyright (C) 2012-2019 Apple Inc. All Rights Reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -34,14 +34,14 @@
 class UnlinkedEvalCodeBlock final : public UnlinkedGlobalCodeBlock {
 public:
     typedef UnlinkedGlobalCodeBlock Base;
     static const unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
 
-    static UnlinkedEvalCodeBlock* create(VM* vm, const ExecutableInfo& info, DebuggerMode debuggerMode)
+    static UnlinkedEvalCodeBlock* create(VM& vm, const ExecutableInfo& info, OptionSet<CodeGenerationMode> codeGenerationMode)
     {
-        UnlinkedEvalCodeBlock* instance = new (NotNull, allocateCell<UnlinkedEvalCodeBlock>(vm->heap)) UnlinkedEvalCodeBlock(vm, vm->unlinkedEvalCodeBlockStructure.get(), info, debuggerMode);
-        instance->finishCreation(*vm);
+        UnlinkedEvalCodeBlock* instance = new (NotNull, allocateCell<UnlinkedEvalCodeBlock>(vm.heap)) UnlinkedEvalCodeBlock(vm, vm.unlinkedEvalCodeBlockStructure.get(), info, codeGenerationMode);
+        instance->finishCreation(vm);
         return instance;
     }
 
     static void destroy(JSCell*);
 
@@ -61,12 +61,12 @@
         m_functionHoistingCandidates = WTFMove(functionHoistingCandidates);
     }
 private:
     friend CachedEvalCodeBlock;
 
-    UnlinkedEvalCodeBlock(VM* vm, Structure* structure, const ExecutableInfo& info, DebuggerMode debuggerMode)
-        : Base(vm, structure, EvalCode, info, debuggerMode)
+    UnlinkedEvalCodeBlock(VM& vm, Structure* structure, const ExecutableInfo& info, OptionSet<CodeGenerationMode> codeGenerationMode)
+        : Base(vm, structure, EvalCode, info, codeGenerationMode)
     {
     }
 
     UnlinkedEvalCodeBlock(Decoder&, const CachedEvalCodeBlock&);
 
