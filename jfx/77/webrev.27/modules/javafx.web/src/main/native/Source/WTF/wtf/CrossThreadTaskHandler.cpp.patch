diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/CrossThreadTaskHandler.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/CrossThreadTaskHandler.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/CrossThreadTaskHandler.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/CrossThreadTaskHandler.cpp
@@ -24,13 +24,16 @@
  */
 
 #include "config.h"
 #include <wtf/CrossThreadTaskHandler.h>
 
+#include <wtf/AutodrainedPool.h>
+
 namespace WTF {
 
-CrossThreadTaskHandler::CrossThreadTaskHandler(const char* threadName)
+CrossThreadTaskHandler::CrossThreadTaskHandler(const char* threadName, AutodrainedPoolForRunLoop useAutodrainedPool)
+    : m_useAutodrainedPool(useAutodrainedPool)
 {
     ASSERT(isMainThread());
     Locker<Lock> locker(m_taskThreadCreationLock);
     Thread::create(threadName, [this] {
         taskRunLoop();
@@ -66,12 +69,28 @@
     ASSERT(!isMainThread());
     {
         Locker<Lock> locker(m_taskThreadCreationLock);
     }
 
-    while (!m_taskQueue.isKilled())
-        m_taskQueue.waitForMessage().performTask();
+    while (!m_taskQueue.isKilled()) {
+        {
+            std::unique_ptr<AutodrainedPool> autodrainedPool = (m_useAutodrainedPool == AutodrainedPoolForRunLoop::Use) ? makeUnique<AutodrainedPool>() : nullptr;
+
+            m_taskQueue.waitForMessage().performTask();
+        }
+
+        Locker<Lock> shouldSuspendLocker(m_shouldSuspendLock);
+        while (m_shouldSuspend) {
+            m_suspendedLock.lock();
+            if (!m_suspended) {
+                m_suspended = true;
+                m_suspendedCondition.notifyOne();
+            }
+            m_suspendedLock.unlock();
+            m_shouldSuspendCondition.wait(m_shouldSuspendLock);
+        }
+    }
 }
 
 void CrossThreadTaskHandler::handleTaskRepliesOnMainThread()
 {
     {
@@ -81,7 +100,36 @@
 
     while (auto task = m_taskReplyQueue.tryGetMessage())
         task->performTask();
 }
 
+void CrossThreadTaskHandler::suspendAndWait()
+{
+    ASSERT(isMainThread());
+    {
+        Locker<Lock> locker(m_shouldSuspendLock);
+        m_shouldSuspend = true;
+    }
+
+    // Post an empty task to ensure database thread knows m_shouldSuspend and sets m_suspended.
+    postTask(CrossThreadTask([]() { }));
+
+    Locker<Lock> locker(m_suspendedLock);
+    while (!m_suspended)
+        m_suspendedCondition.wait(m_suspendedLock);
+}
+
+void CrossThreadTaskHandler::resume()
+{
+    ASSERT(isMainThread());
+    Locker<Lock> locker(m_shouldSuspendLock);
+    if (m_shouldSuspend) {
+        m_suspendedLock.lock();
+        if (m_suspended)
+            m_suspended = false;
+        m_suspendedLock.unlock();
+        m_shouldSuspend = false;
+        m_shouldSuspendCondition.notifyOne();
+    }
+}
 
 } // namespace WTF
