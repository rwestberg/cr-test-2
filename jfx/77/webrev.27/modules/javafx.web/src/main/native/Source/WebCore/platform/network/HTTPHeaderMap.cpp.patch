diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/HTTPHeaderMap.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/HTTPHeaderMap.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/HTTPHeaderMap.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/HTTPHeaderMap.cpp
@@ -67,20 +67,15 @@
 {
     // Fast path: avoid constructing a temporary String in the common header case.
     if (auto* nameCharacters = CFStringGetCStringPtr(name, kCFStringEncodingASCII)) {
         unsigned length = CFStringGetLength(name);
         HTTPHeaderName headerName;
-        if (findHTTPHeaderName(StringView(reinterpret_cast<const LChar*>(nameCharacters), length), headerName)) {
-            auto index = m_commonHeaders.findMatching([&](auto& header) {
-                return header.key == headerName;
-            });
-            if (index == notFound)
-                m_commonHeaders.append(CommonHeader { headerName, value });
-            else
-                m_commonHeaders[index].value = value;
-        } else
-            set(String(nameCharacters, length), value);
+        if (findHTTPHeaderName(StringView(nameCharacters, length), headerName))
+            set(headerName, value);
+        else
+            setUncommonHeader(String(nameCharacters, length), value);
+
         return;
     }
 
     set(String(name), value);
 }
@@ -93,10 +88,15 @@
     if (findHTTPHeaderName(name, headerName)) {
         set(headerName, value);
         return;
     }
 
+    setUncommonHeader(name, value);
+}
+
+void HTTPHeaderMap::setUncommonHeader(const String& name, const String& value)
+{
     auto index = m_uncommonHeaders.findMatching([&](auto& header) {
         return equalIgnoringASCIICase(header.key, name);
     });
     if (index == notFound)
         m_uncommonHeaders.append(UncommonHeader { name, value });
