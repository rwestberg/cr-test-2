diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringView.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringView.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringView.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringView.cpp
@@ -32,18 +32,14 @@
 #include <unicode/unorm2.h>
 #include <wtf/HashMap.h>
 #include <wtf/Lock.h>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/Optional.h>
-#include <wtf/text/StringBuffer.h>
 #include <wtf/text/TextBreakIterator.h>
-#include <wtf/unicode/UTF8Conversion.h>
 
 namespace WTF {
 
-using namespace Unicode;
-
 bool StringView::containsIgnoringASCIICase(const StringView& matchString) const
 {
     return findIgnoringASCIICase(matchString) != notFound;
 }
 
@@ -60,10 +56,15 @@
 size_t StringView::findIgnoringASCIICase(const StringView& matchString, unsigned startOffset) const
 {
     return ::WTF::findIgnoringASCIICase(*this, matchString, startOffset);
 }
 
+bool StringView::startsWith(UChar character) const
+{
+    return m_length && (*this)[0] == character;
+}
+
 bool StringView::startsWith(const StringView& prefix) const
 {
     return ::WTF::startsWith(*this, prefix);
 }
 
@@ -176,11 +177,11 @@
     unsigned m_index;
     unsigned m_indexEnd;
 };
 
 StringView::GraphemeClusters::Iterator::Iterator(const StringView& stringView, unsigned index)
-    : m_impl(std::make_unique<Impl>(stringView, stringView.isNull() ? WTF::nullopt : Optional<NonSharedCharacterBreakIterator>(NonSharedCharacterBreakIterator(stringView)), index))
+    : m_impl(makeUnique<Impl>(stringView, stringView.isNull() ? WTF::nullopt : Optional<NonSharedCharacterBreakIterator>(NonSharedCharacterBreakIterator(stringView)), index))
 {
 }
 
 StringView::GraphemeClusters::Iterator::~Iterator()
 {
@@ -218,15 +219,15 @@
 String convertASCIICase(const CharacterType* input, unsigned length)
 {
     if (!input)
         return { };
 
-    StringBuffer<CharacterType> buffer(length);
-    CharacterType* characters = buffer.characters();
+    CharacterType* characters;
+    auto result = String::createUninitialized(length, characters);
     for (unsigned i = 0; i < length; ++i)
         characters[i] = type == ASCIICase::Lower ? toASCIILower(input[i]) : toASCIIUpper(input[i]);
-    return String::adopt(WTFMove(buffer));
+    return result;
 }
 
 String StringView::convertToASCIILowercase() const
 {
     if (m_is8Bit)
@@ -281,10 +282,11 @@
 #if CHECK_STRINGVIEW_LIFETIME
 
 // Manage reference count manually so UnderlyingString does not need to be defined in the header.
 
 struct StringView::UnderlyingString {
+    WTF_MAKE_STRUCT_FAST_ALLOCATED;
     std::atomic_uint refCount { 1u };
     bool isValid { true };
     const StringImpl& string;
     explicit UnderlyingString(const StringImpl&);
 };
