diff a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/FrameLoaderClientJava.cpp b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/FrameLoaderClientJava.cpp
--- a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/FrameLoaderClientJava.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/FrameLoaderClientJava.cpp
@@ -337,10 +337,20 @@
         backgroundColor = fv->baseBackgroundColor();
     }
     frame()->createView(IntRect(pageRect).size(), backgroundColor, /* fixedLayoutSize */ { }, /* fixedVisibleContentRect */ { });
 }
 
+void FrameLoaderClientJava::didSaveToPageCache()
+{
+    notImplemented();
+}
+
+void FrameLoaderClientJava::didRestoreFromPageCache()
+{
+    notImplemented();
+}
+
 WTF::Ref<WebCore::DocumentLoader> FrameLoaderClientJava::createDocumentLoader(const WebCore::ResourceRequest& request, const SubstituteData& substituteData)
 {
     return DocumentLoader::create(request, substituteData);
 }
 
@@ -357,11 +367,11 @@
 {
     //uta: for m_pluginWidget we need to do something different
     loader->commitData(data, length);
 }
 
-void FrameLoaderClientJava::dispatchDecidePolicyForResponse(const ResourceResponse& response, const ResourceRequest&, PolicyCheckIdentifier identifier, FramePolicyFunction&& policyFunction)
+void FrameLoaderClientJava::dispatchDecidePolicyForResponse(const ResourceResponse& response, const ResourceRequest&, PolicyCheckIdentifier identifier, const String&, FramePolicyFunction&& policyFunction)
 {
     using namespace FrameLoaderClientJavaInternal;
     PolicyAction action;
 
     int statusCode = response.httpStatusCode();
@@ -676,11 +686,11 @@
                           0.0 /* progress */,
                           error.errorCode());
     removeRequestURL(f, identifier);
 }
 
-void FrameLoaderClientJava::dispatchDidFailProvisionalLoad(const ResourceError& error)
+void FrameLoaderClientJava::dispatchDidFailProvisionalLoad(const ResourceError& error, WillContinueLoading)
 {
     ASSERT(frame());
     if (!frame()) {
         return;
     }
@@ -700,11 +710,11 @@
                   error.errorCode());
 }
 
 void FrameLoaderClientJava::dispatchDidFailLoad(const ResourceError& error)
 {
-    dispatchDidFailProvisionalLoad(error);
+    dispatchDidFailProvisionalLoad(error, WillContinueLoading::No);
 }
 
 // client-side redirection
 void FrameLoaderClientJava::dispatchWillPerformClientRedirect(const URL&, double, WallTime, LockBackForwardList)
 {
@@ -1054,18 +1064,10 @@
 bool FrameLoaderClientJava::canCachePage() const
 {
     return true;
 }
 
-void FrameLoaderClientJava::didSaveToPageCache()
-{
-}
-
-void FrameLoaderClientJava::didRestoreFromPageCache()
-{
-}
-
 void FrameLoaderClientJava::dispatchUnableToImplementPolicy(const ResourceError&)
 {
     notImplemented();
 }
 
@@ -1155,23 +1157,21 @@
 void FrameLoaderClientJava::prefetchDNS(const String& hostname)
 {
     WebCore::prefetchDNS(hostname);
 }
 
-Optional<uint64_t> FrameLoaderClientJava::pageID() const
+Optional<PageIdentifier> FrameLoaderClientJava::pageID() const
 {
     return WTF::nullopt;
 }
 
-Optional<uint64_t> FrameLoaderClientJava::frameID() const
+Optional<FrameIdentifier> FrameLoaderClientJava::frameID() const
 {
     return WTF::nullopt;
 }
 
 PAL::SessionID FrameLoaderClientJava::sessionID() const
 {
-    RELEASE_ASSERT_NOT_REACHED();
-    return PAL::SessionID::defaultSessionID();
+    return m_frame && m_frame->page() ? m_frame->page()->sessionID() : PAL::SessionID::defaultSessionID();
 }
 
-
 }
