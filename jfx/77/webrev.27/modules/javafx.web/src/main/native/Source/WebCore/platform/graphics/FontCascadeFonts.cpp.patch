diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCascadeFonts.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCascadeFonts.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCascadeFonts.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCascadeFonts.cpp
@@ -82,11 +82,11 @@
 
 void FontCascadeFonts::GlyphPageCacheEntry::setGlyphDataForCharacter(UChar32 character, GlyphData glyphData)
 {
     ASSERT(!glyphDataForCharacter(character).glyph);
     if (!m_mixedFont) {
-        m_mixedFont = std::make_unique<MixedFontGlyphPage>(m_singleFont.get());
+        m_mixedFont = makeUnique<MixedFontGlyphPage>(m_singleFont.get());
         m_singleFont = nullptr;
     }
     m_mixedFont->setGlyphDataForCharacter(character, glyphData);
 }
 
@@ -138,11 +138,11 @@
 {
     ASSERT(index < description.effectiveFamilyCount());
 
     auto& fontCache = FontCache::singleton();
     while (index < description.effectiveFamilyCount()) {
-        auto visitor = WTF::makeVisitor([&](const AtomicString& family) -> FontRanges {
+        auto visitor = WTF::makeVisitor([&](const AtomString& family) -> FontRanges {
             if (family.isEmpty())
                 return FontRanges();
             if (fontSelector) {
                 auto ranges = fontSelector->fontRangesForFamily(description, family);
                 if (!ranges.isNull())
@@ -347,10 +347,14 @@
 
     auto systemFallbackFont = font->systemFallbackFontForCharacter(character, description, m_isForPlatformFont ? IsForPlatformFont::Yes : IsForPlatformFont::No);
     if (!systemFallbackFont)
         return GlyphData();
 
+#if HAVE(DISALLOWABLE_USER_INSTALLED_FONTS)
+    ASSERT(!systemFallbackFont->isUserInstalledFont() || description.shouldAllowUserInstalledFonts() == AllowUserInstalledFonts::Yes);
+#endif
+
     if (systemFallbackShouldBeInvisible)
         systemFallbackFont = const_cast<Font*>(&systemFallbackFont->invisibleFont());
 
     if (systemFallbackFont->platformData().orientation() == FontOrientation::Vertical && !systemFallbackFont->hasVerticalGlyphs() && FontCascade::isCJKIdeographOrSymbol(character))
         variant = BrokenIdeographVariant;
