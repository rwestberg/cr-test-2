diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SamplingProfiler.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SamplingProfiler.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SamplingProfiler.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SamplingProfiler.h
@@ -29,10 +29,12 @@
 
 #include "CallFrame.h"
 #include "CodeBlockHash.h"
 #include "JITCode.h"
 #include "MachineStackMarker.h"
+#include "WasmCompilationMode.h"
+#include "WasmIndexOrName.h"
 #include <wtf/HashSet.h>
 #include <wtf/Lock.h>
 #include <wtf/Stopwatch.h>
 #include <wtf/Vector.h>
 #include <wtf/WeakRandom.h>
@@ -61,17 +63,22 @@
 
         const void* cCodePC { nullptr };
         CalleeBits unverifiedCallee;
         CodeBlock* verifiedCodeBlock { nullptr };
         CallSiteIndex callSiteIndex;
+#if ENABLE(WEBASSEMBLY)
+        Optional<Wasm::IndexOrName> wasmIndexOrName;
+#endif
+        Optional<Wasm::CompilationMode> wasmCompilationMode;
     };
 
     enum class FrameType {
         Executable,
+        Wasm,
         Host,
         C,
-        Unknown
+        Unknown,
     };
 
     struct StackFrame {
         StackFrame(ExecutableBase* executable)
             : frameType(FrameType::Executable)
@@ -83,10 +90,14 @@
 
         FrameType frameType { FrameType::Unknown };
         const void* cCodePC { nullptr };
         ExecutableBase* executable { nullptr };
         JSObject* callee { nullptr };
+#if ENABLE(WEBASSEMBLY)
+        Optional<Wasm::IndexOrName> wasmIndexOrName;
+#endif
+        Optional<Wasm::CompilationMode> wasmCompilationMode;
 
         struct CodeLocation {
             bool hasCodeBlockHash() const
             {
                 return codeBlockHash.isSet();
@@ -106,11 +117,11 @@
             // These attempt to be expression-level line and column number.
             unsigned lineNumber { std::numeric_limits<unsigned>::max() };
             unsigned columnNumber { std::numeric_limits<unsigned>::max() };
             unsigned bytecodeIndex { std::numeric_limits<unsigned>::max() };
             CodeBlockHash codeBlockHash;
-            JITCode::JITType jitType { JITCode::None };
+            JITType jitType { JITType::None };
         };
 
         CodeLocation semanticLocation;
         Optional<std::pair<CodeLocation, CodeBlock*>> machineLocation; // This is non-null if we were inlined. It represents the machine frame we were inlined into.
 
@@ -189,23 +200,23 @@
 private:
     void createThreadIfNecessary(const AbstractLocker&);
     void timerLoop();
     void takeSample(const AbstractLocker&, Seconds& stackTraceProcessingTime);
 
+    Lock m_lock;
+    bool m_isPaused;
+    bool m_isShutDown;
+    bool m_needsReportAtExit { false };
     VM& m_vm;
     WeakRandom m_weakRandom;
     RefPtr<Stopwatch> m_stopwatch;
     Vector<StackTrace> m_stackTraces;
     Vector<UnprocessedStackTrace> m_unprocessedStackTraces;
     Seconds m_timingInterval;
     Seconds m_lastTime;
-    Lock m_lock;
     RefPtr<Thread> m_thread;
     RefPtr<Thread> m_jscExecutionThread;
-    bool m_isPaused;
-    bool m_isShutDown;
-    bool m_needsReportAtExit { false };
     HashSet<JSCell*> m_liveCellPointers;
     Vector<UnprocessedStackFrame> m_currentFrames;
 };
 
 } // namespace JSC
