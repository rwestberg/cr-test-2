diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/PolicyChecker.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/PolicyChecker.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/PolicyChecker.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/PolicyChecker.cpp
@@ -104,14 +104,15 @@
     if (!request.url().protocolIsBlob())
         return { };
 
     // Create a new temporary blobURL in case this one gets revoked during the asynchronous navigation policy decision.
     URL temporaryBlobURL = BlobURL::createPublicURL(&m_frame.document()->securityOrigin());
-    blobRegistry().registerBlobURL(temporaryBlobURL, request.url());
+    auto sessionID = m_frame.document()->sessionID();
+    blobRegistry().registerBlobURL(sessionID, temporaryBlobURL, request.url());
     request.setURL(temporaryBlobURL);
-    return CompletionHandler<void()>([temporaryBlobURL = WTFMove(temporaryBlobURL)] {
-        blobRegistry().unregisterBlobURL(temporaryBlobURL);
+    return CompletionHandler<void()>([sessionID, temporaryBlobURL = WTFMove(temporaryBlobURL)] {
+        blobRegistry().unregisterBlobURL(sessionID, temporaryBlobURL);
     });
 }
 
 void PolicyChecker::checkNavigationPolicy(ResourceRequest&& request, const ResourceResponse& redirectResponse, DocumentLoader* loader, RefPtr<FormState>&& formState, NavigationPolicyDecisionFunction&& function, PolicyDecisionMode policyDecisionMode)
 {
