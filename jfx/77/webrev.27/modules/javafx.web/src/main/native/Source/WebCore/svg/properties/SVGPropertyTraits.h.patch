diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGPropertyTraits.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGPropertyTraits.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGPropertyTraits.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGPropertyTraits.h
@@ -101,11 +101,11 @@
         float number;
         if (!parseNumberFromString(string, number))
             return WTF::nullopt;
         return number;
     }
-    static String toString(float type) { return String::number(type); }
+    static String toString(float type) { return String::numberToStringFixedPrecision(type); }
 };
 
 template<>
 struct SVGPropertyTraits<std::pair<float, float>> {
     static std::pair<float, float> initialValue() { return { }; }
@@ -138,13 +138,13 @@
         return point;
     }
     static String toString(const FloatPoint& type)
     {
         StringBuilder builder;
-        builder.appendNumber(type.x());
+        builder.appendFixedPrecisionNumber(type.x());
         builder.append(' ');
-        builder.appendNumber(type.y());
+        builder.appendFixedPrecisionNumber(type.y());
         return builder.toString();
     }
 };
 
 template<>
@@ -165,17 +165,17 @@
         return rect;
     }
     static String toString(const FloatRect& type)
     {
         StringBuilder builder;
-        builder.appendNumber(type.x());
+        builder.appendFixedPrecisionNumber(type.x());
         builder.append(' ');
-        builder.appendNumber(type.y());
+        builder.appendFixedPrecisionNumber(type.y());
         builder.append(' ');
-        builder.appendNumber(type.width());
+        builder.appendFixedPrecisionNumber(type.width());
         builder.append(' ');
-        builder.appendNumber(type.height());
+        builder.appendFixedPrecisionNumber(type.height());
         return builder.toString();
     }
 };
 
 template<>
