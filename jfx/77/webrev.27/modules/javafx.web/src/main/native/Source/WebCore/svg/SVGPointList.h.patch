diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPointList.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPointList.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPointList.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPointList.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -23,30 +23,83 @@
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
-#include "SVGAnimatedListPropertyTearOff.h"
-#include "SVGListPropertyTearOff.h"
 #include "SVGPoint.h"
-#include "SVGPointListValues.h"
+#include "SVGValuePropertyList.h"
 
 namespace WebCore {
 
-class SVGPointList : public SVGListPropertyTearOff<SVGPointListValues> {
+class SVGPointList : public SVGValuePropertyList<SVGPoint> {
+    using Base = SVGValuePropertyList<SVGPoint>;
+    using Base::Base;
+
 public:
-    using AnimatedListPropertyTearOff = SVGAnimatedListPropertyTearOff<SVGPointListValues>;
-    using ListWrapperCache = AnimatedListPropertyTearOff::ListWrapperCache;
+    static Ref<SVGPointList> create()
+    {
+        return adoptRef(*new SVGPointList());
+    }
+
+    static Ref<SVGPointList> create(SVGPropertyOwner* owner, SVGPropertyAccess access)
+    {
+        return adoptRef(*new SVGPointList(owner, access));
+    }
 
-    static Ref<SVGPointList> create(AnimatedListPropertyTearOff& animatedProperty, SVGPropertyRole role, SVGPointListValues& values, ListWrapperCache& wrappers)
+    static Ref<SVGPointList> create(const SVGPointList& other, SVGPropertyAccess access)
     {
-        return adoptRef(*new SVGPointList(animatedProperty, role, values, wrappers));
+        return adoptRef(*new SVGPointList(other, access));
+    }
+
+    bool parse(const String& value)
+    {
+        clearItems();
+
+        auto upconvertedCharacters = StringView(value).upconvertedCharacters();
+        const UChar* cur = upconvertedCharacters;
+        const UChar* end = cur + value.length();
+
+        skipOptionalSVGSpaces(cur, end);
+
+        bool delimParsed = false;
+        while (cur < end) {
+            delimParsed = false;
+            float xPos = 0.0f;
+            if (!parseNumber(cur, end, xPos))
+                return false;
+
+            float yPos = 0.0f;
+            if (!parseNumber(cur, end, yPos, false))
+                return false;
+
+            skipOptionalSVGSpaces(cur, end);
+
+            if (cur < end && *cur == ',') {
+                delimParsed = true;
+                cur++;
+            }
+            skipOptionalSVGSpaces(cur, end);
+
+            append(SVGPoint::create({ xPos, yPos }));
+        }
+
+        return !delimParsed;
     }
 
-private:
-    SVGPointList(AnimatedListPropertyTearOff& animatedProperty, SVGPropertyRole role, SVGPointListValues& values, ListWrapperCache& wrappers)
-        : SVGListPropertyTearOff<SVGPointListValues>(animatedProperty, role, values, wrappers)
+    String valueAsString() const override
     {
+        StringBuilder builder;
+
+        for (const auto& point : m_items) {
+            if (builder.length())
+                builder.append(' ');
+
+            builder.appendFixedPrecisionNumber(point->x());
+            builder.append(' ');
+            builder.appendFixedPrecisionNumber(point->y());
+        }
+
+        return builder.toString();
     }
 };
 
-} // namespace WebCore
+}
