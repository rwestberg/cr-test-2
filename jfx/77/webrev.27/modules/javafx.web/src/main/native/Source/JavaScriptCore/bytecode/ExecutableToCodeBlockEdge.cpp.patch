diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ExecutableToCodeBlockEdge.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ExecutableToCodeBlockEdge.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ExecutableToCodeBlockEdge.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ExecutableToCodeBlockEdge.cpp
@@ -24,10 +24,11 @@
  */
 
 #include "config.h"
 #include "ExecutableToCodeBlockEdge.h"
 
+#include "CodeBlock.h"
 #include "IsoCellSetInlines.h"
 
 namespace JSC {
 
 const ClassInfo ExecutableToCodeBlockEdge::s_info = { "ExecutableToCodeBlockEdge", nullptr, nullptr, nullptr, CREATE_METHOD_TABLE(ExecutableToCodeBlockEdge) };
@@ -52,10 +53,11 @@
 
 void ExecutableToCodeBlockEdge::visitChildren(JSCell* cell, SlotVisitor& visitor)
 {
     VM& vm = visitor.vm();
     ExecutableToCodeBlockEdge* edge = jsCast<ExecutableToCodeBlockEdge*>(cell);
+    ASSERT_GC_OBJECT_INHERITS(cell, info());
     Base::visitChildren(cell, visitor);
 
     CodeBlock* codeBlock = edge->m_codeBlock.get();
 
     // It's possible for someone to hold a pointer to the edge after the edge has cleared its weak
@@ -73,11 +75,11 @@
     ConcurrentJSLocker locker(codeBlock->m_lock);
 
     if (codeBlock->shouldVisitStrongly(locker))
         visitor.appendUnbarriered(codeBlock);
 
-    if (!Heap::isMarked(codeBlock))
+    if (!vm.heap.isMarked(codeBlock))
         vm.executableToCodeBlockEdgesWithFinalizers.add(edge);
 
     if (JITCode::isOptimizingJIT(codeBlock->jitType())) {
         // If we jettison ourselves we'll install our alternative, so make sure that it
         // survives GC even if we don't.
@@ -123,12 +125,12 @@
 
 void ExecutableToCodeBlockEdge::finalizeUnconditionally(VM& vm)
 {
     CodeBlock* codeBlock = m_codeBlock.get();
 
-    if (!Heap::isMarked(codeBlock)) {
-        if (codeBlock->shouldJettisonDueToWeakReference())
+    if (!vm.heap.isMarked(codeBlock)) {
+        if (codeBlock->shouldJettisonDueToWeakReference(vm))
             codeBlock->jettison(Profiler::JettisonDueToWeakReference);
         else
             codeBlock->jettison(Profiler::JettisonDueToOldAge);
         m_codeBlock.clear();
     }
@@ -187,11 +189,11 @@
     CodeBlock* codeBlock = m_codeBlock.get();
 
     codeBlock->propagateTransitions(locker, visitor);
     codeBlock->determineLiveness(locker, visitor);
 
-    if (Heap::isMarked(codeBlock))
+    if (vm.heap.isMarked(codeBlock))
         vm.executableToCodeBlockEdgesWithConstraints.remove(this);
 }
 
 } // namespace JSC
 
