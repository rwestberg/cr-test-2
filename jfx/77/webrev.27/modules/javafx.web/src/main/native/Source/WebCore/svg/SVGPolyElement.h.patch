diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPolyElement.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPolyElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPolyElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPolyElement.h
@@ -1,9 +1,9 @@
 /*
  * Copyright (C) 2004, 2005, 2006, 2008 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005, 2006, 2007 Rob Buis <buis@kde.org>
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -19,45 +19,41 @@
  * Boston, MA 02110-1301, USA.
  */
 
 #pragma once
 
-#include "SVGAnimatedPointList.h"
 #include "SVGExternalResourcesRequired.h"
 #include "SVGGeometryElement.h"
 #include "SVGNames.h"
 
 namespace WebCore {
 
 class SVGPolyElement : public SVGGeometryElement, public SVGExternalResourcesRequired {
     WTF_MAKE_ISO_ALLOCATED(SVGPolyElement);
 public:
-    Ref<SVGPointList> points();
-    Ref<SVGPointList> animatedPoints();
+    const SVGPointList& points() const { return m_points->currentValue(); }
 
-    const SVGPointListValues& pointList() const { return m_points.value(); }
+    SVGPointList& points() { return m_points->baseVal(); }
+    SVGPointList& animatedPoints() { return *m_points->animVal(); }
 
     size_t approximateMemoryCost() const override;
 
 protected:
     SVGPolyElement(const QualifiedName&, Document&);
 
 private:
-    using AttributeOwnerProxy = SVGAttributeOwnerProxyImpl<SVGPolyElement, SVGGeometryElement, SVGExternalResourcesRequired>;
-    static AttributeOwnerProxy::AttributeRegistry& attributeRegistry() { return AttributeOwnerProxy::attributeRegistry(); }
-    static bool isKnownAttribute(const QualifiedName& attributeName) { return AttributeOwnerProxy::isKnownAttribute(attributeName); }
-    static void registerAttributes();
+    using PropertyRegistry = SVGPropertyOwnerRegistry<SVGPolyElement, SVGGeometryElement, SVGExternalResourcesRequired>;
+    const SVGPropertyRegistry& propertyRegistry() const final { return m_propertyRegistry; }
 
-    const SVGAttributeOwnerProxy& attributeOwnerProxy() const final { return m_attributeOwnerProxy; }
-    void parseAttribute(const QualifiedName&, const AtomicString&) override;
+    void parseAttribute(const QualifiedName&, const AtomString&) override;
     void svgAttributeChanged(const QualifiedName&) override;
 
     bool isValid() const override { return SVGTests::isValid(); }
     bool supportsMarkers() const override { return true; }
 
-    AttributeOwnerProxy m_attributeOwnerProxy { *this };
-    SVGAnimatedPointListAttribute m_points;
+    PropertyRegistry m_propertyRegistry { *this };
+    Ref<SVGAnimatedPointList> m_points { SVGAnimatedPointList::create(this) };
 };
 
 } // namespace WebCore
 
 SPECIALIZE_TYPE_TRAITS_BEGIN(WebCore::SVGPolyElement)
