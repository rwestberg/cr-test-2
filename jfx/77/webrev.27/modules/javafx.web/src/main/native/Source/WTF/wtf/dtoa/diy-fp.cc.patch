diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/diy-fp.cc b/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/diy-fp.cc
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/diy-fp.cc
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/diy-fp.cc
@@ -30,31 +30,31 @@
 #include <wtf/dtoa/diy-fp.h>
 #include <wtf/dtoa/utils.h>
 
 namespace WTF {
 namespace double_conversion {
-    
+
 void DiyFp::Multiply(const DiyFp& other) {
-        // Simply "emulates" a 128 bit multiplication.
-        // However: the resulting number only contains 64 bits. The least
-        // significant 64 bits are only used for rounding the most significant 64
-        // bits.
-        const uint64_t kM32 = 0xFFFFFFFFU;
-        uint64_t a = f_ >> 32;
-        uint64_t b = f_ & kM32;
-        uint64_t c = other.f_ >> 32;
-        uint64_t d = other.f_ & kM32;
-        uint64_t ac = a * c;
-        uint64_t bc = b * c;
-        uint64_t ad = a * d;
-        uint64_t bd = b * d;
-        uint64_t tmp = (bd >> 32) + (ad & kM32) + (bc & kM32);
-        // By adding 1U << 31 to tmp we round the final result.
-        // Halfway cases will be round up.
-        tmp += 1U << 31;
-        uint64_t result_f = ac + (ad >> 32) + (bc >> 32) + (tmp >> 32);
-        e_ += other.e_ + 64;
-        f_ = result_f;
+  // Simply "emulates" a 128 bit multiplication.
+  // However: the resulting number only contains 64 bits. The least
+  // significant 64 bits are only used for rounding the most significant 64
+  // bits.
+  const uint64_t kM32 = 0xFFFFFFFFU;
+  uint64_t a = f_ >> 32;
+  uint64_t b = f_ & kM32;
+  uint64_t c = other.f_ >> 32;
+  uint64_t d = other.f_ & kM32;
+  uint64_t ac = a * c;
+  uint64_t bc = b * c;
+  uint64_t ad = a * d;
+  uint64_t bd = b * d;
+  uint64_t tmp = (bd >> 32) + (ad & kM32) + (bc & kM32);
+  // By adding 1U << 31 to tmp we round the final result.
+  // Halfway cases will be round up.
+  tmp += 1U << 31;
+  uint64_t result_f = ac + (ad >> 32) + (bc >> 32) + (tmp >> 32);
+  e_ += other.e_ + 64;
+  f_ = result_f;
 }
-    
+
 }  // namespace double_conversion
-} // namespace WTF
+}  // namespace WTF
