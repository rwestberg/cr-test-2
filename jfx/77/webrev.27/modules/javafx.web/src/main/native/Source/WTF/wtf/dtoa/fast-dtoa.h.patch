diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/fast-dtoa.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/fast-dtoa.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/fast-dtoa.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/fast-dtoa.h
@@ -32,19 +32,19 @@
 
 namespace WTF {
 namespace double_conversion {
 
 enum FastDtoaMode {
-        // Computes the shortest representation of the given input. The returned
-        // result will be the most accurate number of this length. Longer
-        // representations might be more accurate.
-        FAST_DTOA_SHORTEST,
+  // Computes the shortest representation of the given input. The returned
+  // result will be the most accurate number of this length. Longer
+  // representations might be more accurate.
+  FAST_DTOA_SHORTEST,
   // Same as FAST_DTOA_SHORTEST but for single-precision floats.
   FAST_DTOA_SHORTEST_SINGLE,
-        // Computes a representation where the precision (number of digits) is
-        // given as input. The precision is independent of the decimal point.
-        FAST_DTOA_PRECISION
+  // Computes a representation where the precision (number of digits) is
+  // given as input. The precision is independent of the decimal point.
+  FAST_DTOA_PRECISION
 };
 
 // FastDtoa will produce at most kFastDtoaMaximalLength digits. This does not
 // include the terminating '\0' character.
 static const int kFastDtoaMaximalLength = 17;
@@ -76,15 +76,15 @@
 //     all possible representations of requested_digits digits.
 //     If there are two values that are equally close, then FastDtoa returns
 //     false.
 // For both modes the buffer must be large enough to hold the result.
 bool FastDtoa(double d,
-                  FastDtoaMode mode,
-                  int requested_digits,
-                  BufferReference<char> buffer,
-                  int* length,
-                  int* decimal_point);
+              FastDtoaMode mode,
+              int requested_digits,
+              BufferReference<char> buffer,
+              int* length,
+              int* decimal_point);
 
 }  // namespace double_conversion
-} // namespace WTF
+}  // namespace WTF
 
 #endif  // DOUBLE_CONVERSION_FAST_DTOA_H_
