diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSJavaScriptCallFrame.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSJavaScriptCallFrame.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSJavaScriptCallFrame.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSJavaScriptCallFrame.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2014-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2014-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -119,13 +119,13 @@
         return jsNull();
 
     // Debugger.Location protocol object.
     VM& vm = exec->vm();
     JSObject* result = constructEmptyObject(exec);
-    result->putDirect(vm, Identifier::fromString(exec, "scriptId"), jsString(exec, String::number(location.sourceID)));
-    result->putDirect(vm, Identifier::fromString(exec, "lineNumber"), jsNumber(location.line));
-    result->putDirect(vm, Identifier::fromString(exec, "columnNumber"), jsNumber(location.column));
+    result->putDirect(vm, Identifier::fromString(vm, "scriptId"), jsString(vm, String::number(location.sourceID)));
+    result->putDirect(vm, Identifier::fromString(vm, "lineNumber"), jsNumber(location.line));
+    result->putDirect(vm, Identifier::fromString(vm, "columnNumber"), jsNumber(location.column));
     return result;
 }
 
 JSValue JSJavaScriptCallFrame::scopeDescriptions(ExecState* exec)
 {
@@ -141,13 +141,13 @@
 
     DebuggerScope::iterator end = scopeChain->end();
     for (DebuggerScope::iterator iter = scopeChain->begin(); iter != end; ++iter) {
         DebuggerScope* scope = iter.get();
         JSObject* description = constructEmptyObject(exec);
-        description->putDirect(vm, Identifier::fromString(exec, "type"), valueForScopeType(scope));
-        description->putDirect(vm, Identifier::fromString(exec, "name"), jsString(exec, scope->name()));
-        description->putDirect(vm, Identifier::fromString(exec, "location"), valueForScopeLocation(exec, scope->location()));
+        description->putDirect(vm, Identifier::fromString(vm, "type"), valueForScopeType(scope));
+        description->putDirect(vm, Identifier::fromString(vm, "name"), jsString(vm, scope->name()));
+        description->putDirect(vm, Identifier::fromString(vm, "location"), valueForScopeLocation(exec, scope->location()));
         array->putDirectIndex(exec, index++, description);
         RETURN_IF_EXCEPTION(throwScope, JSValue());
     }
 
     return array;
@@ -173,11 +173,11 @@
     return jsNumber(impl().column());
 }
 
 JSValue JSJavaScriptCallFrame::functionName(ExecState* exec) const
 {
-    return jsString(exec, impl().functionName());
+    return jsString(exec->vm(), impl().functionName());
 }
 
 JSValue JSJavaScriptCallFrame::scopeChain(ExecState* exec) const
 {
     VM& vm = exec->vm();
@@ -216,15 +216,16 @@
     return jsBoolean(impl().isTailDeleted());
 }
 
 JSValue JSJavaScriptCallFrame::type(ExecState* exec) const
 {
+    VM& vm = exec->vm();
     switch (impl().type()) {
     case DebuggerCallFrame::FunctionType:
-        return jsNontrivialString(exec, "function"_s);
+        return jsNontrivialString(vm, "function"_s);
     case DebuggerCallFrame::ProgramType:
-        return jsNontrivialString(exec, "program"_s);
+        return jsNontrivialString(vm, "program"_s);
     }
 
     ASSERT_NOT_REACHED();
     return jsNull();
 }
