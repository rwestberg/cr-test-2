diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPathSegList.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPathSegList.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPathSegList.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPathSegList.h
@@ -1,8 +1,8 @@
 /*
  * Copyright (C) Research In Motion Limited 2010. All rights reserved.
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -18,122 +18,214 @@
  * Boston, MA 02110-1301, USA.
  */
 
 #pragma once
 
-#include "SVGAnimatedListPropertyTearOff.h"
-#include "SVGPathSegListValues.h"
+#include "Path.h"
+#include "SVGPathByteStream.h"
+#include "SVGPathSeg.h"
+#include "SVGPropertyList.h"
 
 namespace WebCore {
 
-class SVGPathElement;
+class SVGPathSegList final : public SVGPropertyList<SVGPathSeg> {
+    friend class SVGAnimatedPathSegListAnimator;
+    friend class SVGPathSegListBuilder;
+    friend class SVGPathSegListSource;
+
+    using Base = SVGPropertyList<SVGPathSeg>;
+    using Base::Base;
 
-class SVGPathSegList final : public SVGListProperty<SVGPathSegListValues> {
 public:
-    using Base = SVGListProperty<SVGPathSegListValues>;
-    using AnimatedListPropertyTearOff = SVGAnimatedListPropertyTearOff<SVGPathSegListValues>;
-    using ListItemType = SVGPropertyTraits<SVGPathSegListValues>::ListItemType;
+    static Ref<SVGPathSegList> create(SVGPropertyOwner* owner, SVGPropertyAccess access)
+    {
+        return adoptRef(*new SVGPathSegList(owner, access));
+    }
 
-    static Ref<SVGPathSegList> create(AnimatedListPropertyTearOff& animatedProperty, SVGPropertyRole role, SVGPathSegRole pathSegRole, SVGPathSegListValues& values, ListWrapperCache& wrappers)
+    static Ref<SVGPathSegList> create(const SVGPathSegList& other, SVGPropertyAccess access)
     {
-        return adoptRef(*new SVGPathSegList(animatedProperty, role, pathSegRole, values, wrappers));
+        return adoptRef(*new SVGPathSegList(other, access));
     }
 
-    static Ref<SVGPathSegList> create(AnimatedListPropertyTearOff& animatedProperty, SVGPropertyRole role, SVGPathSegListValues& values, ListWrapperCache& wrappers)
+    static Ref<SVGPathSegList> create(Ref<SVGPathSeg>&& newItem)
     {
-        ASSERT_NOT_REACHED();
-        return adoptRef(*new SVGPathSegList(animatedProperty, role, PathSegUndefinedRole, values, wrappers));
+        return adoptRef(*new SVGPathSegList(WTFMove(newItem)));
     }
 
-    int findItem(const ListItemType& item) const
+    SVGPathSegList& operator=(const SVGPathSegList& other)
     {
-        ASSERT(m_values);
+        pathByteStreamWillChange();
+        m_pathByteStream = other.pathByteStream();
+        return *this;
+    }
+
+    // Override SVGList::length() because numberOfItems() isn't virtual.
+    unsigned length() const { return numberOfItems(); }
 
-        unsigned size = m_values->size();
-        for (size_t i = 0; i < size; ++i) {
-            if (item == m_values->at(i))
-                return i;
-        }
+    unsigned numberOfItems() const
+    {
+        const_cast<SVGPathSegList*>(this)->ensureItems();
+        return Base::numberOfItems();
+    }
 
-        return -1;
+    ExceptionOr<void> clear()
+    {
+        itemsWillChange();
+        return Base::clear();
     }
 
-    void removeItemFromList(size_t itemIndex, bool shouldSynchronizeWrappers)
+    ExceptionOr<Ref<SVGPathSeg>> getItem(unsigned index)
     {
-        ASSERT(m_values);
-        ASSERT_WITH_SECURITY_IMPLICATION(itemIndex < m_values->size());
+        ensureItems();
+        return Base::getItem(index);
+    }
 
-        m_values->remove(itemIndex);
+    ExceptionOr<Ref<SVGPathSeg>> initialize(Ref<SVGPathSeg>&& newItem)
+    {
+        itemsWillChange();
+        return Base::initialize(WTFMove(newItem));
+    }
 
-        if (shouldSynchronizeWrappers)
-            commitChange();
+    ExceptionOr<Ref<SVGPathSeg>> insertItemBefore(Ref<SVGPathSeg>&& newItem, unsigned index)
+    {
+        ensureItems();
+        itemsWillChange();
+        return Base::insertItemBefore(WTFMove(newItem), index);
     }
 
-    // SVGList API
-    ExceptionOr<void> clear();
+    ExceptionOr<Ref<SVGPathSeg>> replaceItem(Ref<SVGPathSeg>&& newItem, unsigned index)
+    {
+        ensureItems();
+        itemsWillChange();
+        return Base::replaceItem(WTFMove(newItem), index);
+    }
 
-    ExceptionOr<RefPtr<SVGPathSeg>> initialize(Ref<SVGPathSeg>&& newItem)
+    ExceptionOr<Ref<SVGPathSeg>> removeItem(unsigned index)
     {
-        return Base::initializeValues(WTFMove(newItem));
+        ensureItems();
+        itemsWillChange();
+        return Base::removeItem(index);
     }
 
-    ExceptionOr<RefPtr<SVGPathSeg>> getItem(unsigned index);
+    ExceptionOr<Ref<SVGPathSeg>> appendItem(Ref<SVGPathSeg>&& newItem)
+    {
+        ensureItems();
+        appendPathSegToPathByteStream(newItem);
+        clearPath();
+        return Base::appendItem(WTFMove(newItem));
+    }
 
-    ExceptionOr<RefPtr<SVGPathSeg>> insertItemBefore(Ref<SVGPathSeg>&& newItem, unsigned index)
+    // Override SVGList::setItem() because replaceItem() isn't virtual.
+    ExceptionOr<void> setItem(unsigned index, Ref<SVGPathSeg>&& newItem)
     {
-        return Base::insertItemBeforeValues(WTFMove(newItem), index);
+        auto result = replaceItem(WTFMove(newItem), index);
+        if (result.hasException())
+            return result.releaseException();
+        return { };
     }
 
-    ExceptionOr<RefPtr<SVGPathSeg>> replaceItem(Ref<SVGPathSeg>&&, unsigned index);
+    const SVGPathByteStream& pathByteStream() const { return const_cast<SVGPathSegList*>(this)->pathByteStream(); }
+    SVGPathByteStream& pathByteStream()
+    {
+        ensurePathByteStream();
+        return m_pathByteStream;
+    }
 
-    ExceptionOr<RefPtr<SVGPathSeg>> removeItem(unsigned index);
+    bool parse(const String& value)
+    {
+        pathByteStreamWillChange();
+        return buildSVGPathByteStreamFromString(value, m_pathByteStream, UnalteredParsing);
+    }
 
-    ExceptionOr<RefPtr<SVGPathSeg>> appendItem(Ref<SVGPathSeg>&& newItem)
+    Path path() const
     {
-        return Base::appendItemValues(WTFMove(newItem));
+        if (!m_path)
+            m_path = buildPathFromByteStream(pathByteStream());
+        return *m_path;
+    }
+
+    size_t approximateMemoryCost() const
+    {
+        // This is an approximation for path memory cost since the path is parsed on demand.
+        size_t pathMemoryCost = (m_pathByteStream.size() / 10) * sizeof(FloatPoint);
+        // We need to account for the memory which is allocated by the m_path.
+        return m_path ? pathMemoryCost + sizeof(*m_path) : pathMemoryCost;
+    }
+
+    String valueAsString() const override
+    {
+        String value;
+        buildStringFromByteStream(pathByteStream(), value, UnalteredParsing);
+        return value;
     }
 
 private:
-    SVGPathSegList(AnimatedListPropertyTearOff& animatedProperty, SVGPropertyRole role, SVGPathSegRole pathSegRole, SVGPathSegListValues& values, ListWrapperCache& wrappers)
-        : SVGListProperty<SVGPathSegListValues>(role, values, &wrappers)
-        , m_animatedProperty(&animatedProperty)
-        , m_pathSegRole(pathSegRole)
+    SVGPathSegList(const SVGPathSegList& other, SVGPropertyAccess access)
+        : Base(other.owner(), access)
+        , m_pathByteStream(other.pathByteStream())
     {
     }
 
-    SVGPathElement* contextElement() const;
-    using Base::m_role;
+    // Used by appendPathSegToPathByteStream() to create a temporary SVGPathSegList with one item.
+    SVGPathSegList(Ref<SVGPathSeg>&& newItem)
+    {
+        append(WTFMove(newItem));
+    }
 
-    bool isReadOnly() const final
+    // Called when changing an item in the list.
+    void commitPropertyChange(SVGProperty* property) override
     {
-        if (m_role == AnimValRole)
-            return true;
-        if (m_animatedProperty && m_animatedProperty->isReadOnly())
-            return true;
-        return false;
+        itemsWillChange();
+        Base::commitPropertyChange(property);
     }
 
-    void commitChange() final
+    void ensureItems()
     {
-        ASSERT(m_values);
-        m_values->commitChange(*m_animatedProperty->contextElement(), ListModificationUnknown);
+        if (!m_items.isEmpty() || m_pathByteStream.isEmpty())
+            return;
+        buildSVGPathSegListFromByteStream(m_pathByteStream, *this, UnalteredParsing);
     }
 
-    void commitChange(ListModification listModification) final
+    void ensurePathByteStream()
     {
-        ASSERT(m_values);
-        m_values->commitChange(*m_animatedProperty->contextElement(), listModification);
+        if (!m_pathByteStream.isEmpty() || m_items.isEmpty())
+            return;
+        buildSVGPathByteStreamFromSVGPathSegList(*this, m_pathByteStream, UnalteredParsing);
     }
 
-    bool processIncomingListItemValue(const ListItemType& newItem, unsigned* indexToModify) final;
-    bool processIncomingListItemWrapper(Ref<ListItemTearOff>&, unsigned*) final
+    // Optimize appending an SVGPathSeg to the list. Instead of creating the whole
+    // byte stream, a temporary byte stream will be creating just for the new item
+    // and this temporary byte stream will be appended to m_pathByteStream.
+    void appendPathSegToPathByteStream(const Ref<SVGPathSeg>& item)
     {
-        ASSERT_NOT_REACHED();
-        return true;
+        if (m_pathByteStream.isEmpty())
+            return;
+
+        Ref<SVGPathSegList> pathSegList = SVGPathSegList::create(item.copyRef());
+        SVGPathByteStream pathSegStream;
+
+        if (!buildSVGPathByteStreamFromSVGPathSegList(pathSegList, pathSegStream, UnalteredParsing, false))
+            return;
+
+        m_pathByteStream.append(pathSegStream);
     }
 
-private:
-    RefPtr<AnimatedListPropertyTearOff> m_animatedProperty;
-    SVGPathSegRole m_pathSegRole;
+    void clearPathByteStream() { m_pathByteStream.clear(); }
+    void clearPath() { m_path = WTF::nullopt; }
+
+    void pathByteStreamWillChange()
+    {
+        clearItems();
+        clearPath();
+    }
+
+    void itemsWillChange()
+    {
+        clearPathByteStream();
+        clearPath();
+    }
+
+    SVGPathByteStream m_pathByteStream;
+    mutable Optional<Path> m_path;
 };
 
-} // namespace WebCore
+}
