diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/OverconstrainedErrorEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/OverconstrainedErrorEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/OverconstrainedErrorEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/OverconstrainedErrorEvent.h
@@ -30,42 +30,42 @@
 
 #if ENABLE(MEDIA_STREAM)
 
 #include "Event.h"
 #include "OverconstrainedError.h"
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
 class OverconstrainedErrorEvent : public Event {
 public:
     virtual ~OverconstrainedErrorEvent() = default;
 
-    static Ref<OverconstrainedErrorEvent> create(const AtomicString& type, CanBubble canBubble, IsCancelable cancelable, OverconstrainedError* error)
+    static Ref<OverconstrainedErrorEvent> create(const AtomString& type, CanBubble canBubble, IsCancelable cancelable, OverconstrainedError* error)
     {
         return adoptRef(*new OverconstrainedErrorEvent(type, canBubble, cancelable, error));
     }
 
     struct Init : EventInit {
         RefPtr<OverconstrainedError> error;
     };
 
-    static Ref<OverconstrainedErrorEvent> create(const AtomicString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
+    static Ref<OverconstrainedErrorEvent> create(const AtomString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
     {
         return adoptRef(*new OverconstrainedErrorEvent(type, initializer, isTrusted));
     }
 
     OverconstrainedError* error() const { return m_error.get(); }
     EventInterface eventInterface() const override { return OverconstrainedErrorEventInterfaceType; }
 
 private:
-    explicit OverconstrainedErrorEvent(const AtomicString& type, CanBubble canBubble, IsCancelable cancelable, OverconstrainedError* error)
+    explicit OverconstrainedErrorEvent(const AtomString& type, CanBubble canBubble, IsCancelable cancelable, OverconstrainedError* error)
         : Event(type, canBubble, cancelable)
         , m_error(error)
     {
     }
-    OverconstrainedErrorEvent(const AtomicString& type, const Init& initializer, IsTrusted isTrusted)
+    OverconstrainedErrorEvent(const AtomString& type, const Init& initializer, IsTrusted isTrusted)
         : Event(type, initializer, isTrusted)
         , m_error(initializer.error)
     {
     }
 
