diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/PlatformMouseEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/PlatformMouseEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/PlatformMouseEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/PlatformMouseEvent.h
@@ -26,10 +26,11 @@
 #ifndef PlatformMouseEvent_h
 #define PlatformMouseEvent_h
 
 #include "IntPoint.h"
 #include "PlatformEvent.h"
+#include "PointerID.h"
 #include <wtf/WindowsExtras.h>
 
 #if PLATFORM(JAVA)
 #include "PlatformJavaClasses.h"
 #endif
@@ -43,11 +44,13 @@
 
 const double ForceAtClick = 1;
 const double ForceAtForceClick = 2;
 
     // These button numbers match the ones used in the DOM API, 0 through 2, except for NoButton which isn't specified.
-    enum MouseButton : int8_t { NoButton = -1, LeftButton, MiddleButton, RightButton };
+    // We use -2 for NoButton because -1 is a valid value in the DOM API for Pointer Events for pointermove events that
+    // indicate that the pressed mouse button hasn't changed since the last event.
+    enum MouseButton : int8_t { LeftButton = 0, MiddleButton, RightButton, NoButton = -2 };
     enum SyntheticClickType : int8_t { NoTap, OneFingerTap, TwoFingerTap };
 
     class PlatformMouseEvent : public PlatformEvent {
     public:
         PlatformMouseEvent()
@@ -63,19 +66,20 @@
 #endif
         {
         }
 
         PlatformMouseEvent(const IntPoint& position, const IntPoint& globalPosition, MouseButton button, PlatformEvent::Type type,
-                           int clickCount, bool shiftKey, bool ctrlKey, bool altKey, bool metaKey, WallTime timestamp, double force, SyntheticClickType syntheticClickType)
+                           int clickCount, bool shiftKey, bool ctrlKey, bool altKey, bool metaKey, WallTime timestamp, double force, SyntheticClickType syntheticClickType, PointerID pointerId = mousePointerID)
             : PlatformEvent(type, shiftKey, ctrlKey, altKey, metaKey, timestamp)
             , m_position(position)
             , m_globalPosition(globalPosition)
             , m_button(button)
             , m_clickCount(clickCount)
             , m_modifierFlags(0)
             , m_force(force)
             , m_syntheticClickType(syntheticClickType)
+            , m_pointerId(pointerId)
 #if PLATFORM(MAC)
             , m_eventNumber(0)
             , m_menuTypeForEvent(0)
 #elif PLATFORM(WIN)
             , m_didActivateWebView(false)
@@ -93,10 +97,11 @@
         unsigned short buttons() const { return m_buttons; }
         int clickCount() const { return m_clickCount; }
         unsigned modifierFlags() const { return m_modifierFlags; }
         double force() const { return m_force; }
         SyntheticClickType syntheticClickType() const { return m_syntheticClickType; }
+        PointerID pointerId() const { return m_pointerId; }
 
 #if PLATFORM(GTK)
         explicit PlatformMouseEvent(GdkEventButton*);
         explicit PlatformMouseEvent(GdkEventMotion*);
         void setClickCount(int count) { m_clickCount = count; }
@@ -123,10 +128,11 @@
         unsigned short m_buttons { 0 };
         int m_clickCount;
         unsigned m_modifierFlags;
         double m_force { 0 };
         SyntheticClickType m_syntheticClickType { NoTap };
+        PointerID m_pointerId { mousePointerID };
 
 #if PLATFORM(MAC)
         int m_eventNumber;
         int m_menuTypeForEvent;
 #elif PLATFORM(WIN)
@@ -134,19 +140,19 @@
 #endif
     };
 
 #if COMPILER(MSVC)
     // These functions are necessary to work around the fact that MSVC will not find a most-specific
-    // operator== to use after implicitly converting MouseButton to an unsigned short.
-    inline bool operator==(unsigned short a, MouseButton b)
+    // operator== to use after implicitly converting MouseButton to a short.
+    inline bool operator==(short a, MouseButton b)
     {
-        return a == static_cast<unsigned short>(b);
+        return a == static_cast<short>(b);
     }
 
-    inline bool operator!=(unsigned short a, MouseButton b)
+    inline bool operator!=(short a, MouseButton b)
     {
-        return a != static_cast<unsigned short>(b);
+        return a != static_cast<short>(b);
     }
 #endif
 
 #if PLATFORM(JAVA)
     MouseButton getWebCoreMouseButton(jint javaButton);
