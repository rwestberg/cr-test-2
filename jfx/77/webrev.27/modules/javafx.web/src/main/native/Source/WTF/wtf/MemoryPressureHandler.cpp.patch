diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/MemoryPressureHandler.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/MemoryPressureHandler.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/MemoryPressureHandler.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/MemoryPressureHandler.cpp
@@ -33,13 +33,13 @@
 #define LOG_CHANNEL_PREFIX Log
 
 namespace WTF {
 
 #if RELEASE_LOG_DISABLED
-WTFLogChannel LogMemoryPressure = { WTFLogChannelOn, "MemoryPressure", WTFLogLevelError };
+WTFLogChannel LogMemoryPressure = { WTFLogChannelState::On, "MemoryPressure", WTFLogLevel::Error };
 #else
-WTFLogChannel LogMemoryPressure = { WTFLogChannelOn, "MemoryPressure", WTFLogLevelError, LOG_CHANNEL_WEBKIT_SUBSYSTEM, OS_LOG_DEFAULT };
+WTFLogChannel LogMemoryPressure = { WTFLogChannelState::On, "MemoryPressure", WTFLogLevel::Error, LOG_CHANNEL_WEBKIT_SUBSYSTEM, OS_LOG_DEFAULT };
 #endif
 
 WTF_EXPORT_PRIVATE bool MemoryPressureHandler::ReliefLogger::s_loggingEnabled = false;
 
 MemoryPressureHandler& MemoryPressureHandler::singleton()
@@ -67,11 +67,11 @@
         // Let's be nice and not enable the memory kill mechanism.
         return;
     }
 
     if (use) {
-        m_measurementTimer = std::make_unique<RunLoop::Timer<MemoryPressureHandler>>(RunLoop::main(), this, &MemoryPressureHandler::measurementTimerFired);
+        m_measurementTimer = makeUnique<RunLoop::Timer<MemoryPressureHandler>>(RunLoop::main(), this, &MemoryPressureHandler::measurementTimerFired);
         m_measurementTimer->startRepeating(30_s);
     } else
         m_measurementTimer = nullptr;
 }
 
