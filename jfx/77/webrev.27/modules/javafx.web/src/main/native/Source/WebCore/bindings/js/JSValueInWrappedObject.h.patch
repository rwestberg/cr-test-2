diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSValueInWrappedObject.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSValueInWrappedObject.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSValueInWrappedObject.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSValueInWrappedObject.h
@@ -34,13 +34,16 @@
 namespace WebCore {
 
 class JSValueInWrappedObject {
 public:
     JSValueInWrappedObject(JSC::JSValue = { });
+    JSValueInWrappedObject(const JSValueInWrappedObject&);
     operator JSC::JSValue() const;
     explicit operator bool() const;
+    JSValueInWrappedObject& operator=(const JSValueInWrappedObject& other);
     void visit(JSC::SlotVisitor&) const;
+    void clear();
 
 private:
     // Use a weak pointer here so that if this code or client code has a visiting mistake,
     // we get null rather than a dangling pointer to a deleted object.
     using Weak = JSC::Weak<JSC::JSCell>;
@@ -64,10 +67,15 @@
     // that case. Unclear if this can actually happen in practice.
     return Weak { value.asCell() };
 }
 
 inline JSValueInWrappedObject::JSValueInWrappedObject(JSC::JSValue value)
+    : m_value(makeValue(JSC::JSValue(value)))
+{
+}
+
+inline JSValueInWrappedObject::JSValueInWrappedObject(const JSValueInWrappedObject& value)
     : m_value(makeValue(value))
 {
 }
 
 inline JSValueInWrappedObject::operator JSC::JSValue() const
@@ -82,19 +90,32 @@
 inline JSValueInWrappedObject::operator bool() const
 {
     return JSC::JSValue { *this }.operator bool();
 }
 
+inline JSValueInWrappedObject& JSValueInWrappedObject::operator=(const JSValueInWrappedObject& other)
+{
+    m_value = makeValue(JSC::JSValue(other));
+    return *this;
+}
+
 inline void JSValueInWrappedObject::visit(JSC::SlotVisitor& visitor) const
 {
     return WTF::switchOn(m_value, [] (JSC::JSValue) {
         // Nothing to visit.
     }, [&visitor] (const Weak& value) {
         visitor.append(value);
     });
 }
 
+inline void JSValueInWrappedObject::clear()
+{
+    WTF::switchOn(m_value, [] (Weak& value) {
+        value.clear();
+    }, [] (auto&) { });
+}
+
 inline JSC::JSValue cachedPropertyValue(JSC::ExecState& state, const JSDOMObject& owner, JSValueInWrappedObject& cachedValue, const WTF::Function<JSC::JSValue()>& function)
 {
     if (cachedValue && isWorldCompatible(state, cachedValue))
         return cachedValue;
     cachedValue = cloneAcrossWorlds(state, owner, function());
