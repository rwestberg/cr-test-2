diff a/modules/javafx.web/src/main/native/Source/WebCore/contentextensions/CombinedURLFilters.cpp b/modules/javafx.web/src/main/native/Source/WebCore/contentextensions/CombinedURLFilters.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/contentextensions/CombinedURLFilters.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/contentextensions/CombinedURLFilters.cpp
@@ -117,13 +117,11 @@
     dataLogF("%s", prefixTreeVertexToString(vertex, actions, depth).utf8().data());
     for (const auto& edge : vertex.edges) {
         StringBuilder builder;
         for (unsigned i = 0; i < depth * 2; ++i)
             builder.append(' ');
-        builder.appendLiteral("vertex edge: ");
-        builder.append(edge.term->toString());
-        builder.append('\n');
+        builder.append("vertex edge: ", edge.term->toString(), '\n');
         dataLogF("%s", builder.toString().utf8().data());
         ASSERT(edge.child);
         recursivePrint(*edge.child.get(), actions, depth + 1);
     }
 }
@@ -133,11 +131,11 @@
     recursivePrint(*m_prefixTreeRoot.get(), m_actions, 0);
 }
 #endif
 
 CombinedURLFilters::CombinedURLFilters()
-    : m_prefixTreeRoot(std::make_unique<PrefixTreeVertex>())
+    : m_prefixTreeRoot(makeUnique<PrefixTreeVertex>())
 {
 }
 
 CombinedURLFilters::~CombinedURLFilters() = default;
 
@@ -207,11 +205,11 @@
             }
         }
         if (nextEntryIndex != WTF::notFound)
             lastPrefixTree = lastPrefixTree->edges[nextEntryIndex].child.get();
         else {
-            lastPrefixTree->edges.append(PrefixTreeEdge({m_alphabet.interned(term), std::make_unique<PrefixTreeVertex>()}));
+            lastPrefixTree->edges.append(PrefixTreeEdge({m_alphabet.interned(term), makeUnique<PrefixTreeVertex>()}));
             lastPrefixTree = lastPrefixTree->edges.last().child.get();
         }
     }
 
     auto addResult = m_actions.add(lastPrefixTree, ActionList());
