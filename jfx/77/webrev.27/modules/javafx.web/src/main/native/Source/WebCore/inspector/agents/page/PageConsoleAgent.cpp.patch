diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageConsoleAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageConsoleAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageConsoleAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageConsoleAgent.cpp
@@ -32,27 +32,101 @@
 #include "config.h"
 #include "PageConsoleAgent.h"
 
 #include "CommandLineAPIHost.h"
 #include "InspectorDOMAgent.h"
+#include "InstrumentingAgents.h"
+#include "Logging.h"
 #include "Node.h"
+#include "Page.h"
 #include "WebInjectedScriptManager.h"
-
+#include <JavaScriptCore/ConsoleMessage.h>
 
 namespace WebCore {
 
 using namespace Inspector;
 
-PageConsoleAgent::PageConsoleAgent(WebAgentContext& context, InspectorHeapAgent* heapAgent, InspectorDOMAgent* domAgent)
-    : WebConsoleAgent(context, heapAgent)
-    , m_inspectorDOMAgent(domAgent)
+PageConsoleAgent::PageConsoleAgent(PageAgentContext& context)
+    : WebConsoleAgent(context)
+    , m_instrumentingAgents(context.instrumentingAgents)
+    , m_inspectedPage(context.inspectedPage)
 {
 }
 
+PageConsoleAgent::~PageConsoleAgent() = default;
+
 void PageConsoleAgent::clearMessages(ErrorString& errorString)
 {
-    m_inspectorDOMAgent->releaseDanglingNodes();
+    if (auto* domAgent = m_instrumentingAgents.inspectorDOMAgent())
+        domAgent->releaseDanglingNodes();
 
     WebConsoleAgent::clearMessages(errorString);
 }
 
+void PageConsoleAgent::getLoggingChannels(ErrorString&, RefPtr<JSON::ArrayOf<Inspector::Protocol::Console::Channel>>& channels)
+{
+    static const struct ChannelTable {
+        NeverDestroyed<String> name;
+        Inspector::Protocol::Console::ChannelSource source;
+    } channelTable[] = {
+        { MAKE_STATIC_STRING_IMPL("WebRTC"), Inspector::Protocol::Console::ChannelSource::WebRTC },
+        { MAKE_STATIC_STRING_IMPL("Media"), Inspector::Protocol::Console::ChannelSource::Media },
+        { MAKE_STATIC_STRING_IMPL("MediaSource"), Inspector::Protocol::Console::ChannelSource::MediaSource },
+    };
+
+    channels = JSON::ArrayOf<Inspector::Protocol::Console::Channel>::create();
+
+    size_t length = WTF_ARRAY_LENGTH(channelTable);
+    for (size_t i = 0; i < length; ++i) {
+        auto* logChannel = getLogChannel(channelTable[i].name);
+        if (!logChannel)
+            return;
+
+        auto level = Inspector::Protocol::Console::ChannelLevel::Off;
+        if (logChannel->state != WTFLogChannelState::Off) {
+            switch (logChannel->level) {
+            case WTFLogLevel::Always:
+            case WTFLogLevel::Error:
+            case WTFLogLevel::Warning:
+            case WTFLogLevel::Info:
+                level = Inspector::Protocol::Console::ChannelLevel::Basic;
+                break;
+            case WTFLogLevel::Debug:
+                level = Inspector::Protocol::Console::ChannelLevel::Verbose;
+                break;
+            }
+        }
+
+        auto channel = Inspector::Protocol::Console::Channel::create()
+            .setSource(channelTable[i].source)
+            .setLevel(level)
+            .release();
+        channels->addItem(WTFMove(channel));
+    }
+}
+
+static Optional<std::pair<WTFLogChannelState, WTFLogLevel>> channelConfigurationForString(const String& levelString)
+{
+    if (equalIgnoringASCIICase(levelString, "off"))
+        return { { WTFLogChannelState::Off, WTFLogLevel::Error } };
+
+    if (equalIgnoringASCIICase(levelString, "basic"))
+        return { { WTFLogChannelState::On, WTFLogLevel::Info } };
+
+    if (equalIgnoringASCIICase(levelString, "verbose"))
+        return { { WTFLogChannelState::On, WTFLogLevel::Debug } };
+
+    return WTF::nullopt;
+}
+
+void PageConsoleAgent::setLoggingChannelLevel(ErrorString& errorString, const String& channelName, const String& channelLevel)
+{
+    auto configuration = channelConfigurationForString(channelLevel);
+    if (!configuration) {
+        errorString = makeString("Unknown channelLevel: "_s, channelLevel);
+        return;
+    }
+
+    m_inspectedPage.configureLoggingChannel(channelName, configuration.value().first, configuration.value().second);
+}
+
 } // namespace WebCore
