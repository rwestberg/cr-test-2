diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/SelectionRangeData.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/SelectionRangeData.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/SelectionRangeData.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/SelectionRangeData.cpp
@@ -129,17 +129,17 @@
         stop = rendererAfterPosition(*selection.end(), selection.endPosition().value());
     SelectionIterator selectionIterator(start);
     while (start && start != stop) {
         if (isValidRendererForSelection(*start, selection)) {
             // Blocks are responsible for painting line gaps and margin gaps. They must be examined as well.
-            oldSelectionData.renderers.set(start, std::make_unique<RenderSelectionInfo>(*start, true));
+            oldSelectionData.renderers.set(start, makeUnique<RenderSelectionInfo>(*start, true));
             if (repaintDifference) {
                 for (auto* block = containingBlockBelowView(*start); block; block = containingBlockBelowView(*block)) {
                     auto& blockInfo = oldSelectionData.blocks.add(block, nullptr).iterator->value;
                     if (blockInfo)
                         break;
-                    blockInfo = std::make_unique<RenderBlockSelectionInfo>(*block);
+                    blockInfo = makeUnique<RenderBlockSelectionInfo>(*block);
                 }
             }
         }
         start = selectionIterator.next();
     }
@@ -211,17 +211,17 @@
     SelectionIterator selectionIterator(start);
     while (start && start != stop) {
         if ((start->canBeSelectionLeaf() || start == m_selectionContext.start() || start == m_selectionContext.end())
             && start->selectionState() != RenderObject::SelectionNone) {
             // Blocks are responsible for painting line gaps and margin gaps. They must be examined as well.
-            renderers.set(start, std::make_unique<RenderSelectionInfo>(*start, clipToVisibleContent == ClipToVisibleContent::Yes));
+            renderers.set(start, makeUnique<RenderSelectionInfo>(*start, clipToVisibleContent == ClipToVisibleContent::Yes));
             auto* block = start->containingBlock();
             while (block && !is<RenderView>(*block)) {
                 std::unique_ptr<RenderSelectionInfo>& blockInfo = renderers.add(block, nullptr).iterator->value;
                 if (blockInfo)
                     break;
-                blockInfo = std::make_unique<RenderSelectionInfo>(*block, clipToVisibleContent == ClipToVisibleContent::Yes);
+                blockInfo = makeUnique<RenderSelectionInfo>(*block, clipToVisibleContent == ClipToVisibleContent::Yes);
                 block = block->containingBlock();
             }
         }
         start = selectionIterator.next();
     }
@@ -279,11 +279,11 @@
     SelectionData::RendererMap newSelectedRenderers;
     SelectionData::RenderBlockMap newSelectedBlocks;
     selectionIterator = SelectionIterator(selectionStart);
     for (auto* currentRenderer = selectionStart; currentRenderer && currentRenderer != selectionEnd; currentRenderer = selectionIterator.next()) {
         if (isValidRendererForSelection(*currentRenderer, m_selectionContext)) {
-            std::unique_ptr<RenderSelectionInfo> selectionInfo = std::make_unique<RenderSelectionInfo>(*currentRenderer, true);
+            std::unique_ptr<RenderSelectionInfo> selectionInfo = makeUnique<RenderSelectionInfo>(*currentRenderer, true);
 #if ENABLE(SERVICE_CONTROLS)
             for (auto& rect : selectionInfo->collectedSelectionRects())
                 m_selectionRectGatherer.addRect(selectionInfo->repaintContainer(), rect);
             if (!currentRenderer->isTextOrLineBreak())
                 m_selectionRectGatherer.setTextOnly(false);
@@ -292,11 +292,11 @@
             auto* containingBlock = currentRenderer->containingBlock();
             while (containingBlock && !is<RenderView>(*containingBlock)) {
                 std::unique_ptr<RenderBlockSelectionInfo>& blockInfo = newSelectedBlocks.add(containingBlock, nullptr).iterator->value;
                 if (blockInfo)
                     break;
-                blockInfo = std::make_unique<RenderBlockSelectionInfo>(*containingBlock);
+                blockInfo = makeUnique<RenderBlockSelectionInfo>(*containingBlock);
                 containingBlock = containingBlock->containingBlock();
 #if ENABLE(SERVICE_CONTROLS)
                 m_selectionRectGatherer.addGapRects(blockInfo->repaintContainer(), blockInfo->rects());
 #endif
             }
