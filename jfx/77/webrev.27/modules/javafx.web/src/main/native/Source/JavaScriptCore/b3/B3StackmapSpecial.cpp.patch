diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapSpecial.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapSpecial.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapSpecial.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapSpecial.cpp
@@ -81,15 +81,15 @@
     StackmapValue* value = inst.origin->as<StackmapValue>();
     ASSERT(value);
 
     // Check that insane things have not happened.
     ASSERT(inst.args.size() >= numIgnoredAirArgs);
-    ASSERT(value->children().size() >= numIgnoredB3Args);
-    ASSERT(inst.args.size() - numIgnoredAirArgs >= value->children().size() - numIgnoredB3Args);
+    ASSERT(value->numChildren() >= numIgnoredB3Args);
+    ASSERT(inst.args.size() - numIgnoredAirArgs >= value->numChildren() - numIgnoredB3Args);
     ASSERT(inst.args[0].kind() == Arg::Kind::Special);
 
-    for (unsigned i = 0; i < value->children().size() - numIgnoredB3Args; ++i) {
+    for (unsigned i = 0; i < value->numChildren() - numIgnoredB3Args; ++i) {
         Arg& arg = inst.args[i + numIgnoredAirArgs];
         ConstrainedValue child = value->constrainedChild(i + numIgnoredB3Args);
 
         Arg::Role role;
         switch (roleMode) {
@@ -111,10 +111,11 @@
                 role = Arg::Use;
                 break;
             case ValueRep::SomeRegisterWithClobber:
                 role = Arg::UseDef;
                 break;
+            case ValueRep::SomeLateRegister:
             case ValueRep::LateRegister:
                 role = Arg::LateUse;
                 break;
             case ValueRep::ColdAny:
                 role = Arg::ColdUse;
@@ -158,29 +159,29 @@
     StackmapValue* value = inst.origin->as<StackmapValue>();
     ASSERT(value);
 
     // Check that insane things have not happened.
     ASSERT(inst.args.size() >= numIgnoredAirArgs);
-    ASSERT(value->children().size() >= numIgnoredB3Args);
+    ASSERT(value->numChildren() >= numIgnoredB3Args);
 
     // For the Inst to be valid, it needs to have the right number of arguments.
-    if (inst.args.size() - numIgnoredAirArgs < value->children().size() - numIgnoredB3Args)
+    if (inst.args.size() - numIgnoredAirArgs < value->numChildren() - numIgnoredB3Args)
         return false;
 
     // Regardless of constraints, stackmaps have some basic requirements for their arguments. For
     // example, you can't have a non-FP-offset address. This verifies those conditions as well as the
     // argument types.
-    for (unsigned i = 0; i < value->children().size() - numIgnoredB3Args; ++i) {
+    for (unsigned i = 0; i < value->numChildren() - numIgnoredB3Args; ++i) {
         Value* child = value->child(i + numIgnoredB3Args);
         Arg& arg = inst.args[i + numIgnoredAirArgs];
 
-        if (!isArgValidForValue(arg, child))
+        if (!isArgValidForType(arg, child->type()))
             return false;
     }
 
     // The number of constraints has to be no greater than the number of B3 children.
-    ASSERT(value->m_reps.size() <= value->children().size());
+    ASSERT(value->m_reps.size() <= value->numChildren());
 
     // Verify any explicitly supplied constraints.
     for (unsigned i = numIgnoredB3Args; i < value->m_reps.size(); ++i) {
         ValueRep& rep = value->m_reps[i];
         Arg& arg = inst.args[i - numIgnoredB3Args + numIgnoredAirArgs];
@@ -225,11 +226,11 @@
     for (unsigned i = 0; i < inst.origin->numChildren() - numIgnoredB3Args; ++i)
         result.append(repForArg(*context.code, inst.args[i + numIgnoredAirArgs]));
     return result;
 }
 
-bool StackmapSpecial::isArgValidForValue(const Air::Arg& arg, Value* value)
+bool StackmapSpecial::isArgValidForType(const Air::Arg& arg, Type type)
 {
     switch (arg.kind()) {
     case Arg::Tmp:
     case Arg::Imm:
     case Arg::BigImm:
@@ -238,24 +239,25 @@
         if (!arg.isStackMemory())
             return false;
         break;
     }
 
-    return arg.canRepresent(value);
+    return arg.canRepresent(type);
 }
 
 bool StackmapSpecial::isArgValidForRep(Air::Code& code, const Air::Arg& arg, const ValueRep& rep)
 {
     switch (rep.kind()) {
     case ValueRep::WarmAny:
     case ValueRep::ColdAny:
     case ValueRep::LateColdAny:
-        // We already verified by isArgValidForValue().
+        // We already verified by isArgValidForType().
         return true;
     case ValueRep::SomeRegister:
     case ValueRep::SomeRegisterWithClobber:
     case ValueRep::SomeEarlyRegister:
+    case ValueRep::SomeLateRegister:
         return arg.isTmp();
     case ValueRep::LateRegister:
     case ValueRep::Register:
         return arg == Tmp(rep.reg());
     case ValueRep::StackArgument:
