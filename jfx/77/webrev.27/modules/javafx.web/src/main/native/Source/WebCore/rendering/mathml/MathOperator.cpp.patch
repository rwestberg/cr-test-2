diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/mathml/MathOperator.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/mathml/MathOperator.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/mathml/MathOperator.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/mathml/MathOperator.cpp
@@ -84,25 +84,12 @@
     { 0x2016, 0x2016, 0x2016, 0x2016, 0x0    }, // double vertical line
     { 0x2225, 0x2225, 0x2225, 0x2225, 0x0    }, // parallel to
     { 0x222b, 0x2320, 0x23ae, 0x2321, 0x0    } // integral sign
 };
 
-void MathOperator::GlyphAssemblyData::initialize()
-{
-    topOrRightCodePoint = 0;
-    topOrRightFallbackGlyph = 0;
-    extensionCodePoint = 0;
-    extensionFallbackGlyph = 0;
-    bottomOrLeftCodePoint = 0;
-    bottomOrLeftFallbackGlyph = 0;
-    middleCodePoint = 0;
-    middleFallbackGlyph = 0;
-}
-
 MathOperator::MathOperator()
 {
-    m_assembly.initialize();
     m_variantGlyph = 0;
 }
 
 void MathOperator::setOperator(const RenderStyle& style, UChar32 baseCharacter, Type operatorType)
 {
@@ -182,14 +169,14 @@
     auto middle = glyphDataForCodePointOrFallbackGlyph(style, m_assembly.middleCodePoint, m_assembly.middleFallbackGlyph);
     auto bottomOrLeft = glyphDataForCodePointOrFallbackGlyph(style, m_assembly.bottomOrLeftCodePoint, m_assembly.bottomOrLeftFallbackGlyph);
 
     if (m_operatorType == Type::VerticalOperator) {
         m_width = 0;
-        m_width = std::max<LayoutUnit>(m_width, advanceWidthForGlyph(topOrRight));
-        m_width = std::max<LayoutUnit>(m_width, advanceWidthForGlyph(extension));
-        m_width = std::max<LayoutUnit>(m_width, advanceWidthForGlyph(bottomOrLeft));
-        m_width = std::max<LayoutUnit>(m_width, advanceWidthForGlyph(middle));
+        m_width = std::max(m_width, LayoutUnit(advanceWidthForGlyph(topOrRight)));
+        m_width = std::max(m_width, LayoutUnit(advanceWidthForGlyph(extension)));
+        m_width = std::max(m_width, LayoutUnit(advanceWidthForGlyph(bottomOrLeft)));
+        m_width = std::max(m_width, LayoutUnit(advanceWidthForGlyph(middle)));
     } else {
         m_ascent = 0;
         m_descent = 0;
         LayoutUnit ascent, descent;
         getAscentAndDescentForGlyph(bottomOrLeft, ascent, descent);
@@ -399,14 +386,14 @@
         getMathVariantsWithFallback(style, isVertical, sizeVariants, assemblyParts);
         // We verify the size variants.
         for (auto& sizeVariant : sizeVariants) {
             GlyphData glyphData(sizeVariant, baseGlyph.font);
             if (calculateMaxPreferredWidth)
-                m_maxPreferredWidth = std::max<LayoutUnit>(m_maxPreferredWidth, advanceWidthForGlyph(glyphData));
+                m_maxPreferredWidth = std::max(m_maxPreferredWidth, LayoutUnit(advanceWidthForGlyph(glyphData)));
             else {
                 setSizeVariant(glyphData);
-                LayoutUnit size = isVertical ? heightForGlyph(glyphData) : advanceWidthForGlyph(glyphData);
+                LayoutUnit size { isVertical ? heightForGlyph(glyphData) : advanceWidthForGlyph(glyphData) };
                 if (size >= targetSize)
                     return;
             }
         }
 
@@ -460,14 +447,14 @@
     auto middle = glyphDataForCodePointOrFallbackGlyph(style, assemblyData.middleCodePoint, assemblyData.middleFallbackGlyph);
     auto bottomOrLeft = glyphDataForCodePointOrFallbackGlyph(style, assemblyData.bottomOrLeftCodePoint, assemblyData.bottomOrLeftFallbackGlyph);
 
     // If we are measuring the maximum width, verify each component.
     if (calculateMaxPreferredWidth) {
-        m_maxPreferredWidth = std::max<LayoutUnit>(m_maxPreferredWidth, advanceWidthForGlyph(topOrRight));
-        m_maxPreferredWidth = std::max<LayoutUnit>(m_maxPreferredWidth, advanceWidthForGlyph(extension));
-        m_maxPreferredWidth = std::max<LayoutUnit>(m_maxPreferredWidth, advanceWidthForGlyph(middle));
-        m_maxPreferredWidth = std::max<LayoutUnit>(m_maxPreferredWidth, advanceWidthForGlyph(bottomOrLeft));
+        m_maxPreferredWidth = std::max(m_maxPreferredWidth, LayoutUnit(advanceWidthForGlyph(topOrRight)));
+        m_maxPreferredWidth = std::max(m_maxPreferredWidth, LayoutUnit(advanceWidthForGlyph(extension)));
+        m_maxPreferredWidth = std::max(m_maxPreferredWidth, LayoutUnit(advanceWidthForGlyph(middle)));
+        m_maxPreferredWidth = std::max(m_maxPreferredWidth, LayoutUnit(advanceWidthForGlyph(bottomOrLeft)));
         return;
     }
 
     // We ensure that the size is large enough to avoid glyph overlaps.
     float minSize = isVertical ?
@@ -569,11 +556,11 @@
     clipBounds.shiftMaxYEdgeTo(to.y());
     info.context().clip(clipBounds);
 
     // Trimming may remove up to two pixels from the top of the extender glyph, so we move it up by two pixels.
     float offsetToGlyphTop = glyphBounds.y() + 2;
-    LayoutPoint glyphOrigin = LayoutPoint(from.x(), from.y() - offsetToGlyphTop);
+    LayoutPoint glyphOrigin { from.x(), LayoutUnit(from.y() - offsetToGlyphTop) };
     FloatRect lastPaintedGlyphRect(from, FloatSize());
 
     // In practice, only small stretch sizes are requested but we limit the number of glyphs to avoid hangs.
     for (unsigned extensionCount = 0; lastPaintedGlyphRect.maxY() < to.y() && extensionCount < kMaximumExtensionCount; extensionCount++) {
         lastPaintedGlyphRect = paintGlyph(style, info, extension, glyphOrigin, TrimTopAndBottom);
@@ -610,11 +597,11 @@
     clipBounds.shiftMaxXEdgeTo(to.x());
     info.context().clip(clipBounds);
 
     // Trimming may remove up to two pixels from the left of the extender glyph, so we move it left by two pixels.
     float offsetToGlyphLeft = -2;
-    LayoutPoint glyphOrigin = LayoutPoint(from.x() + offsetToGlyphLeft, from.y());
+    LayoutPoint glyphOrigin { LayoutUnit(from.x() + offsetToGlyphLeft), from.y() };
     FloatRect lastPaintedGlyphRect(from, FloatSize());
 
     // In practice, only small stretch sizes are requested but we limit the number of glyphs to avoid hangs.
     for (unsigned extensionCount = 0; lastPaintedGlyphRect.maxX() < to.x() && extensionCount < kMaximumExtensionCount; extensionCount++) {
         lastPaintedGlyphRect = paintGlyph(style, info, extension, glyphOrigin, TrimLeftAndRight);
@@ -643,15 +630,15 @@
     }
 
     // We are positioning the glyphs so that the edge of the tight glyph bounds line up exactly with the edges of our paint box.
     LayoutPoint operatorTopLeft = paintOffset;
     FloatRect topGlyphBounds = boundsForGlyph(topOrRight);
-    LayoutPoint topGlyphOrigin(operatorTopLeft.x(), operatorTopLeft.y() - topGlyphBounds.y());
+    LayoutPoint topGlyphOrigin { operatorTopLeft.x(), LayoutUnit(operatorTopLeft.y() - topGlyphBounds.y()) };
     LayoutRect topGlyphPaintRect = paintGlyph(style, info, topOrRight, topGlyphOrigin, TrimBottom);
 
     FloatRect bottomGlyphBounds = boundsForGlyph(bottomOrLeft);
-    LayoutPoint bottomGlyphOrigin(operatorTopLeft.x(), operatorTopLeft.y() + stretchSize() - (bottomGlyphBounds.height() + bottomGlyphBounds.y()));
+    LayoutPoint bottomGlyphOrigin { operatorTopLeft.x(), LayoutUnit(operatorTopLeft.y() + stretchSize() - (bottomGlyphBounds.height() + bottomGlyphBounds.y())) };
     LayoutRect bottomGlyphPaintRect = paintGlyph(style, info, bottomOrLeft, bottomGlyphOrigin, TrimTop);
 
     if (m_assembly.hasMiddle()) {
         auto middle = glyphDataForCodePointOrFallbackGlyph(style, m_assembly.middleCodePoint, m_assembly.middleFallbackGlyph);
 
@@ -688,11 +675,11 @@
     LayoutUnit baselineY = operatorTopLeft.y() + m_ascent;
     LayoutPoint leftGlyphOrigin(operatorTopLeft.x(), baselineY);
     LayoutRect leftGlyphPaintRect = paintGlyph(style, info, bottomOrLeft, leftGlyphOrigin, TrimRight);
 
     FloatRect rightGlyphBounds = boundsForGlyph(topOrRight);
-    LayoutPoint rightGlyphOrigin(operatorTopLeft.x() + stretchSize() - rightGlyphBounds.width(), baselineY);
+    LayoutPoint rightGlyphOrigin { LayoutUnit(operatorTopLeft.x() + stretchSize() - rightGlyphBounds.width()), baselineY };
     LayoutRect rightGlyphPaintRect = paintGlyph(style, info, topOrRight, rightGlyphOrigin, TrimLeft);
 
     if (m_assembly.hasMiddle()) {
         auto middle = glyphDataForCodePointOrFallbackGlyph(style, m_assembly.middleCodePoint, m_assembly.middleFallbackGlyph);
 
@@ -743,11 +730,11 @@
 
     GlyphBuffer buffer;
     buffer.add(glyphData.glyph, glyphData.font, advanceWidthForGlyph(glyphData));
     LayoutPoint operatorTopLeft = paintOffset;
     FloatRect glyphBounds = boundsForGlyph(glyphData);
-    LayoutPoint operatorOrigin(operatorTopLeft.x(), operatorTopLeft.y() - glyphBounds.y());
+    LayoutPoint operatorOrigin { operatorTopLeft.x(), LayoutUnit(operatorTopLeft.y() - glyphBounds.y()) };
     paintInfo.context().drawGlyphs(*glyphData.font, buffer, 0, 1, operatorOrigin, style.fontCascade().fontDescription().fontSmoothing());
 }
 
 }
 
