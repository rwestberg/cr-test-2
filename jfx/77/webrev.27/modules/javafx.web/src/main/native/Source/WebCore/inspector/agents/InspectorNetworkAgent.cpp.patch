diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorNetworkAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorNetworkAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorNetworkAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorNetworkAgent.cpp
@@ -37,10 +37,11 @@
 #include "CachedResource.h"
 #include "CachedResourceLoader.h"
 #include "CachedResourceRequestInitiators.h"
 #include "CachedScript.h"
 #include "CertificateInfo.h"
+#include "CustomHeaderFields.h"
 #include "Document.h"
 #include "DocumentLoader.h"
 #include "DocumentThreadableLoader.h"
 #include "Frame.h"
 #include "FrameLoader.h"
@@ -169,25 +170,27 @@
 
 } // namespace
 
 InspectorNetworkAgent::InspectorNetworkAgent(WebAgentContext& context)
     : InspectorAgentBase("Network"_s, context)
-    , m_frontendDispatcher(std::make_unique<Inspector::NetworkFrontendDispatcher>(context.frontendRouter))
+    , m_frontendDispatcher(makeUnique<Inspector::NetworkFrontendDispatcher>(context.frontendRouter))
     , m_backendDispatcher(Inspector::NetworkBackendDispatcher::create(context.backendDispatcher, this))
     , m_injectedScriptManager(context.injectedScriptManager)
-    , m_resourcesData(std::make_unique<NetworkResourcesData>())
+    , m_resourcesData(makeUnique<NetworkResourcesData>())
 {
 }
 
+InspectorNetworkAgent::~InspectorNetworkAgent() = default;
+
 void InspectorNetworkAgent::didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*)
 {
 }
 
 void InspectorNetworkAgent::willDestroyFrontendAndBackend(Inspector::DisconnectReason)
 {
-    ErrorString unused;
-    disable(unused);
+    ErrorString ignored;
+    disable(ignored);
 }
 
 static Ref<JSON::Object> buildObjectForHeaders(const HTTPHeaderMap& headers)
 {
     Ref<JSON::Object> headersObject = JSON::Object::create();
@@ -358,19 +361,19 @@
 
             auto ipAddressesPayload = JSON::ArrayOf<String>::create();
             for (auto& ipAddress : certificateSummaryInfo.value().ipAddresses)
                 ipAddressesPayload->addItem(ipAddress);
             if (ipAddressesPayload->length())
-                certificatePayload->setDnsNames(WTFMove(ipAddressesPayload));
+                certificatePayload->setIpAddresses(WTFMove(ipAddressesPayload));
 
             securityPayload->setCertificate(WTFMove(certificatePayload));
         }
 
         responseObject->setSecurity(WTFMove(securityPayload));
     }
 
-    return WTFMove(responseObject);
+    return responseObject;
 }
 
 Ref<Inspector::Protocol::Network::CachedResource> InspectorNetworkAgent::buildObjectForCachedResource(CachedResource* cachedResource)
 {
     auto resourceObject = Inspector::Protocol::Network::CachedResource::create()
@@ -387,19 +390,10 @@
         resourceObject->setSourceMapURL(sourceMappingURL);
 
     return resourceObject;
 }
 
-InspectorNetworkAgent::~InspectorNetworkAgent()
-{
-    if (m_enabled) {
-        ErrorString unused;
-        disable(unused);
-    }
-    ASSERT(!m_instrumentingAgents.inspectorNetworkAgent());
-}
-
 double InspectorNetworkAgent::timestamp()
 {
     return m_environment.executionStopwatch()->elapsedTime().seconds();
 }
 
@@ -812,11 +806,16 @@
             ASSERT(is<WebSocketChannel>(webSocket->channel().get()));
             WebSocketChannel* channel = downcast<WebSocketChannel>(webSocket->channel().get());
 
             unsigned identifier = channel->identifier();
             didCreateWebSocket(identifier, webSocket->url());
-            willSendWebSocketHandshakeRequest(identifier, channel->clientHandshakeRequest());
+            auto cookieRequestHeaderFieldValue = [document = makeWeakPtr(channel->document())] (const URL& url) -> String {
+                if (!document || !document->page())
+                    return { };
+                return document->page()->cookieJar().cookieRequestHeaderFieldValue(*document, url);
+            };
+            willSendWebSocketHandshakeRequest(identifier, channel->clientHandshakeRequest(WTFMove(cookieRequestHeaderFieldValue)));
 
             if (channel->handshakeMode() == WebSocketHandshake::Connected)
                 didReceiveWebSocketHandshakeResponse(identifier, channel->serverHandshakeResponse());
 
             if (webSocket->readyState() == WebSocket::CLOSED)
@@ -846,22 +845,22 @@
 
 void InspectorNetworkAgent::getResponseBody(ErrorString& errorString, const String& requestId, String* content, bool* base64Encoded)
 {
     NetworkResourcesData::ResourceData const* resourceData = m_resourcesData->data(requestId);
     if (!resourceData) {
-        errorString = "No resource with given identifier found"_s;
+        errorString = "Missing resource for given requestId"_s;
         return;
     }
 
     if (resourceData->hasContent()) {
         *base64Encoded = resourceData->base64Encoded();
         *content = resourceData->content();
         return;
     }
 
     if (resourceData->isContentEvicted()) {
-        errorString = "Request content was evicted from inspector cache"_s;
+        errorString = "Resource content was evicted from inspector cache"_s;
         return;
     }
 
     if (resourceData->buffer() && !resourceData->textEncodingName().isNull()) {
         *base64Encoded = false;
@@ -872,24 +871,24 @@
     if (resourceData->cachedResource()) {
         if (InspectorNetworkAgent::cachedResourceContent(*resourceData->cachedResource(), content, base64Encoded))
             return;
     }
 
-    errorString = "No data found for resource with given identifier"_s;
+    errorString = "Missing content of resource for given requestId"_s;
 }
 
 void InspectorNetworkAgent::setResourceCachingDisabled(ErrorString&, bool disabled)
 {
     setResourceCachingDisabled(disabled);
 }
 
 void InspectorNetworkAgent::loadResource(const String& frameId, const String& urlString, Ref<LoadResourceCallback>&& callback)
 {
-    ErrorString error;
-    auto* context = scriptExecutionContext(error, frameId);
+    ErrorString errorString;
+    auto* context = scriptExecutionContext(errorString, frameId);
     if (!context) {
-        callback->sendFailure(error);
+        callback->sendFailure(errorString);
         return;
     }
 
     URL url = context->completeURL(urlString);
     ResourceRequest request(url);
@@ -920,17 +919,17 @@
 
 void InspectorNetworkAgent::getSerializedCertificate(ErrorString& errorString, const String& requestId, String* serializedCertificate)
 {
     auto* resourceData = m_resourcesData->data(requestId);
     if (!resourceData) {
-        errorString = "No resource with given identifier found"_s;
+        errorString = "Missing resource for given requestId"_s;
         return;
     }
 
     auto& certificate = resourceData->certificateInfo();
     if (!certificate || certificate.value().isEmpty()) {
-        errorString = "No certificate for resource"_s;
+        errorString = "Missing certificate of resource for given requestId"_s;
         return;
     }
 
     WTF::Persistence::Encoder encoder;
     encoder << certificate.value();
@@ -959,22 +958,22 @@
 
 void InspectorNetworkAgent::resolveWebSocket(ErrorString& errorString, const String& requestId, const String* objectGroup, RefPtr<Inspector::Protocol::Runtime::RemoteObject>& result)
 {
     WebSocket* webSocket = webSocketForRequestId(requestId);
     if (!webSocket) {
-        errorString = "WebSocket not found"_s;
+        errorString = "Missing web socket for given requestId"_s;
         return;
     }
 
     // FIXME: <https://webkit.org/b/168475> Web Inspector: Correctly display iframe's and worker's WebSockets
     if (!is<Document>(webSocket->scriptExecutionContext()))
         return;
 
     auto* document = downcast<Document>(webSocket->scriptExecutionContext());
     auto* frame = document->frame();
     if (!frame) {
-        errorString = "WebSocket belongs to document without a frame"_s;
+        errorString = "Missing frame of web socket for given requestId"_s;
         return;
     }
 
     auto& state = *mainWorldExecState(frame);
     auto injectedScript = m_injectedScriptManager.injectedScriptFor(&state);
@@ -1099,16 +1098,16 @@
 
 void InspectorNetworkAgent::searchInRequest(ErrorString& errorString, const String& requestId, const String& query, bool caseSensitive, bool isRegex, RefPtr<JSON::ArrayOf<Inspector::Protocol::GenericTypes::SearchMatch>>& results)
 {
     NetworkResourcesData::ResourceData const* resourceData = m_resourcesData->data(requestId);
     if (!resourceData) {
-        errorString = "No resource with given identifier found"_s;
+        errorString = "Missing resource for given requestId"_s;
         return;
     }
 
     if (!resourceData->hasContent()) {
-        errorString = "No resource content"_s;
+        errorString = "Missing content of resource for given requestId"_s;
         return;
     }
 
     results = ContentSearchUtilities::searchInTextByLines(resourceData->content(), query, caseSensitive, isRegex);
 }
