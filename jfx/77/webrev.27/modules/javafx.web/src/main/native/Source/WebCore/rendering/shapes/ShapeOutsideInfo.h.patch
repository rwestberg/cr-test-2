diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/shapes/ShapeOutsideInfo.h b/modules/javafx.web/src/main/native/Source/WebCore/rendering/shapes/ShapeOutsideInfo.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/shapes/ShapeOutsideInfo.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/shapes/ShapeOutsideInfo.h
@@ -31,11 +31,10 @@
 
 #include "LayoutSize.h"
 #include "Shape.h"
 #include <wtf/HashMap.h>
 #include <wtf/NeverDestroyed.h>
-#include <wtf/SetForScope.h>
 
 namespace WebCore {
 
 class RenderBlockFlow;
 class RenderBox;
@@ -82,11 +81,10 @@
 class ShapeOutsideInfo final {
     WTF_MAKE_FAST_ALLOCATED;
 public:
     ShapeOutsideInfo(const RenderBox& renderer)
         : m_renderer(renderer)
-        , m_isComputingShape(false)
     {
     }
 
     static bool isEnabledFor(const RenderBox&);
 
@@ -101,11 +99,10 @@
     LayoutUnit shapeLogicalWidth() const { return computedShape().shapeMarginLogicalBoundingBox().width(); }
     LayoutUnit shapeLogicalHeight() const { return computedShape().shapeMarginLogicalBoundingBox().height(); }
 
     void markShapeAsDirty() { m_shape = nullptr; }
     bool isShapeDirty() { return !m_shape; }
-    bool isComputingShape() const { return m_isComputingShape; }
 
     LayoutRect computedShapePhysicalBoundingBox() const;
     FloatPoint shapeToRendererPoint(const FloatPoint&) const;
     FloatSize shapeToRendererSize(const FloatSize&) const;
 
@@ -114,11 +111,11 @@
     static ShapeOutsideInfo& ensureInfo(const RenderBox& key)
     {
         InfoMap& infoMap = ShapeOutsideInfo::infoMap();
         if (ShapeOutsideInfo* info = infoMap.get(&key))
             return *info;
-        auto result = infoMap.add(&key, std::make_unique<ShapeOutsideInfo>(key));
+        auto result = infoMap.add(&key, makeUnique<ShapeOutsideInfo>(key));
         return *result.iterator->value;
     }
     static void removeInfo(const RenderBox& key) { infoMap().remove(&key); }
     static ShapeOutsideInfo* info(const RenderBox& key) { return infoMap().get(&key); }
 
@@ -139,9 +136,8 @@
 
     mutable std::unique_ptr<Shape> m_shape;
     LayoutSize m_referenceBoxLogicalSize;
 
     ShapeOutsideDeltas m_shapeOutsideDeltas;
-    mutable bool m_isComputingShape;
 };
 
 }
