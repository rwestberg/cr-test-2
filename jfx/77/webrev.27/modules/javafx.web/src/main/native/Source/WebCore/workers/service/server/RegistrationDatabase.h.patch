diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/RegistrationDatabase.h b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/RegistrationDatabase.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/RegistrationDatabase.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/RegistrationDatabase.h
@@ -26,10 +26,11 @@
 #pragma once
 
 #if ENABLE(SERVICE_WORKER)
 
 #include "SecurityOrigin.h"
+#include "ServiceWorkerRegistrationKey.h"
 #include <pal/SessionID.h>
 #include <wtf/ThreadSafeRefCounted.h>
 #include <wtf/WeakPtr.h>
 #include <wtf/WorkQueue.h>
 #include <wtf/text/WTFString.h>
@@ -50,26 +51,27 @@
         return adoptRef(*new RegistrationDatabase(store, WTFMove(databaseDirectory)));
     }
 
     ~RegistrationDatabase();
 
-    bool isClosed() const { return !m_database; }
-
-    void pushChanges(Vector<ServiceWorkerContextData>&&, CompletionHandler<void()>&&);
+    void pushChanges(const HashMap<ServiceWorkerRegistrationKey, Optional<ServiceWorkerContextData>>&, CompletionHandler<void()>&&);
     void clearAll(CompletionHandler<void()>&&);
+    void close(CompletionHandler<void()>&&);
 
 private:
     RegistrationDatabase(RegistrationStore&, String&& databaseDirectory);
 
+    String databaseDirectoryIsolatedCopy() const { return m_databaseDirectory.isolatedCopy(); }
+
     void postTaskToWorkQueue(Function<void()>&&);
 
     // Methods to be run on the work queue.
     void openSQLiteDatabase(const String& fullFilename);
     String ensureValidRecordsTable();
     String importRecords();
     void importRecordsIfNecessary();
-    void doPushChanges(Vector<ServiceWorkerContextData>&&);
+    void doPushChanges(const Vector<ServiceWorkerContextData>&, const Vector<ServiceWorkerRegistrationKey>&);
     void doClearOrigin(const SecurityOrigin&);
 
     // Replies to the main thread.
     void addRegistrationToStore(ServiceWorkerContextData&&);
     void databaseFailedToOpen();
