diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorCanvasAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorCanvasAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorCanvasAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorCanvasAgent.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -24,29 +24,34 @@
  */
 
 #include "config.h"
 #include "InspectorCanvasAgent.h"
 
+#include "ActiveDOMCallbackMicrotask.h"
 #include "CanvasRenderingContext.h"
 #include "CanvasRenderingContext2D.h"
 #include "Document.h"
 #include "Element.h"
 #include "Frame.h"
+#include "HTMLCanvasElement.h"
 #include "ImageBitmapRenderingContext.h"
 #include "InspectorDOMAgent.h"
 #include "InstrumentingAgents.h"
 #include "JSCanvasRenderingContext2D.h"
 #include "JSExecState.h"
 #include "JSImageBitmapRenderingContext.h"
+#include "Microtasks.h"
 #include "OffscreenCanvas.h"
 #include "ScriptState.h"
 #include "StringAdaptors.h"
 #include <JavaScriptCore/IdentifiersFactory.h>
 #include <JavaScriptCore/InjectedScript.h>
 #include <JavaScriptCore/InjectedScriptManager.h>
 #include <JavaScriptCore/InspectorProtocolObjects.h>
 #include <JavaScriptCore/JSCInlines.h>
+#include <wtf/HashSet.h>
+#include <wtf/Lock.h>
 
 #if ENABLE(WEBGL)
 #include "JSWebGLRenderingContext.h"
 #include "WebGLProgram.h"
 #include "WebGLShader.h"
@@ -54,29 +59,30 @@
 
 #if ENABLE(WEBGL2)
 #include "JSWebGL2RenderingContext.h"
 #endif
 
-#if ENABLE(WEBMETAL)
-#include "JSWebMetalRenderingContext.h"
+#if ENABLE(WEBGPU)
+#include "JSGPUCanvasContext.h"
 #endif
 
-
 namespace WebCore {
 
 using namespace Inspector;
 
-InspectorCanvasAgent::InspectorCanvasAgent(WebAgentContext& context)
+InspectorCanvasAgent::InspectorCanvasAgent(PageAgentContext& context)
     : InspectorAgentBase("Canvas"_s, context)
-    , m_frontendDispatcher(std::make_unique<Inspector::CanvasFrontendDispatcher>(context.frontendRouter))
+    , m_frontendDispatcher(makeUnique<Inspector::CanvasFrontendDispatcher>(context.frontendRouter))
     , m_backendDispatcher(Inspector::CanvasBackendDispatcher::create(context.backendDispatcher, this))
     , m_injectedScriptManager(context.injectedScriptManager)
+    , m_inspectedPage(context.inspectedPage)
     , m_canvasDestroyedTimer(*this, &InspectorCanvasAgent::canvasDestroyedTimerFired)
-    , m_canvasRecordingTimer(*this, &InspectorCanvasAgent::canvasRecordingTimerFired)
 {
 }
 
+InspectorCanvasAgent::~InspectorCanvasAgent() = default;
+
 void InspectorCanvasAgent::didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*)
 {
 }
 
 void InspectorCanvasAgent::willDestroyFrontendAndBackend(Inspector::DisconnectReason)
@@ -90,128 +96,89 @@
     clearCanvasData();
 }
 
 void InspectorCanvasAgent::enable(ErrorString&)
 {
-    if (m_enabled)
+    if (m_instrumentingAgents.inspectorCanvasAgent() == this)
         return;
 
-    m_recordingAutoCaptureFrameCount = WTF::nullopt;
+    m_instrumentingAgents.setInspectorCanvasAgent(this);
 
-    m_enabled = true;
+    const auto canvasExistsInCurrentPage = [&] (CanvasRenderingContext* canvasRenderingContext) {
+        if (!canvasRenderingContext)
+            return false;
 
-    const bool captureBacktrace = false;
-    for (auto& inspectorCanvas : m_identifierToInspectorCanvas.values()) {
-        m_frontendDispatcher->canvasAdded(inspectorCanvas->buildObjectForCanvas(captureBacktrace));
+        auto* scriptExecutionContext = canvasRenderingContext->canvasBase().scriptExecutionContext();
+        if (!is<Document>(scriptExecutionContext))
+            return false;
 
-#if ENABLE(WEBGL)
-        if (is<WebGLRenderingContextBase>(inspectorCanvas->context())) {
-            WebGLRenderingContextBase& contextWebGL = downcast<WebGLRenderingContextBase>(inspectorCanvas->context());
-            if (Optional<Vector<String>> extensions = contextWebGL.getSupportedExtensions()) {
-                for (const String& extension : *extensions) {
-                    if (contextWebGL.extensionIsEnabled(extension))
-                        m_frontendDispatcher->extensionEnabled(inspectorCanvas->identifier(), extension);
-                }
-            }
+        // FIXME: <https://webkit.org/b/168475> Web Inspector: Correctly display iframe's WebSockets
+        auto* document = downcast<Document>(scriptExecutionContext);
+        return document->page() == &m_inspectedPage;
+    };
+
+    {
+        LockHolder lock(CanvasRenderingContext::instancesMutex());
+        for (auto* canvasRenderingContext : CanvasRenderingContext::instances(lock)) {
+            if (canvasExistsInCurrentPage(canvasRenderingContext))
+                bindCanvas(*canvasRenderingContext, false);
         }
-#endif
     }
 
 #if ENABLE(WEBGL)
-    for (auto& inspectorProgram : m_identifierToInspectorProgram.values()) {
-        auto& inspectorCanvas = inspectorProgram->canvas();
-        m_frontendDispatcher->programCreated(inspectorCanvas.identifier(), inspectorProgram->identifier());
+    {
+        LockHolder lock(WebGLProgram::instancesMutex());
+        for (auto& entry : WebGLProgram::instances(lock)) {
+            if (canvasExistsInCurrentPage(entry.value))
+                didCreateProgram(*entry.value, *entry.key);
+        }
     }
 #endif
 }
 
 void InspectorCanvasAgent::disable(ErrorString&)
 {
-    if (!m_enabled)
-        return;
-
-    if (m_canvasDestroyedTimer.isActive())
-        m_canvasDestroyedTimer.stop();
-
-    m_removedCanvasIdentifiers.clear();
+    m_instrumentingAgents.setInspectorCanvasAgent(nullptr);
 
-    if (m_canvasRecordingTimer.isActive())
-        m_canvasRecordingTimer.stop();
-
-    for (auto& inspectorCanvas : m_identifierToInspectorCanvas.values())
-        inspectorCanvas->resetRecordingData();
+    clearCanvasData();
 
     m_recordingAutoCaptureFrameCount = WTF::nullopt;
-
-    m_enabled = false;
 }
 
 void InspectorCanvasAgent::requestNode(ErrorString& errorString, const String& canvasId, int* nodeId)
 {
-    auto* inspectorCanvas = assertInspectorCanvas(errorString, canvasId);
+    auto inspectorCanvas = assertInspectorCanvas(errorString, canvasId);
     if (!inspectorCanvas)
         return;
 
     auto* node = inspectorCanvas->canvasElement();
     if (!node) {
-        errorString = "No node for canvas"_s;
+        errorString = "Missing element of canvas for given canvasId"_s;
         return;
     }
 
     int documentNodeId = m_instrumentingAgents.inspectorDOMAgent()->boundNodeId(&node->document());
     if (!documentNodeId) {
-        errorString = "Document has not been requested"_s;
+        errorString = "Document must have been requested"_s;
         return;
     }
 
     *nodeId = m_instrumentingAgents.inspectorDOMAgent()->pushNodeToFrontend(errorString, documentNodeId, node);
 }
 
 void InspectorCanvasAgent::requestContent(ErrorString& errorString, const String& canvasId, String* content)
 {
-    auto* inspectorCanvas = assertInspectorCanvas(errorString, canvasId);
+    auto inspectorCanvas = assertInspectorCanvas(errorString, canvasId);
     if (!inspectorCanvas)
         return;
 
-    // FIXME: <https://webkit.org/b/180833> Web Inspector: support OffscreenCanvas for Canvas related operations
-
-    if (auto* node = inspectorCanvas->canvasElement()) {
-        if (is<CanvasRenderingContext2D>(inspectorCanvas->context()) || is<ImageBitmapRenderingContext>(inspectorCanvas->context())) {
-            auto result = node->toDataURL("image/png"_s);
-            if (result.hasException()) {
-                errorString = result.releaseException().releaseMessage();
-                return;
-            }
-            *content = result.releaseReturnValue().string;
-            return;
-        }
-
-#if ENABLE(WEBGL)
-        if (is<WebGLRenderingContextBase>(inspectorCanvas->context())) {
-            WebGLRenderingContextBase& contextWebGLBase = downcast<WebGLRenderingContextBase>(inspectorCanvas->context());
-
-            contextWebGLBase.setPreventBufferClearForInspector(true);
-            auto result = node->toDataURL("image/png"_s);
-            contextWebGLBase.setPreventBufferClearForInspector(false);
-
-            if (result.hasException()) {
-                errorString = result.releaseException().releaseMessage();
-                return;
-            }
-            *content = result.releaseReturnValue().string;
-            return;
-        }
-#endif
-    }
-
-    // FIXME: <https://webkit.org/b/173621> Web Inspector: Support getting the content of WebMetal context;
-    errorString = "Unsupported canvas context type"_s;
+    *content = inspectorCanvas->getCanvasContentAsDataURL(errorString);
 }
 
 void InspectorCanvasAgent::requestCSSCanvasClientNodes(ErrorString& errorString, const String& canvasId, RefPtr<JSON::ArrayOf<int>>& result)
 {
-    auto* inspectorCanvas = assertInspectorCanvas(errorString, canvasId);
+    auto inspectorCanvas = assertInspectorCanvas(errorString, canvasId);
     if (!inspectorCanvas)
         return;
 
     result = JSON::ArrayOf<int>::create();
     for (auto* client : inspectorCanvas->context().canvasBase().cssCanvasClients()) {
@@ -232,34 +199,34 @@
 #endif
 #if ENABLE(WEBGL2)
     if (is<WebGL2RenderingContext>(context))
         return toJS(&state, deprecatedGlobalObjectForPrototype(&state), downcast<WebGL2RenderingContext>(context));
 #endif
-#if ENABLE(WEBMETAL)
-    if (is<WebMetalRenderingContext>(context))
-        return toJS(&state, deprecatedGlobalObjectForPrototype(&state), downcast<WebMetalRenderingContext>(context));
+#if ENABLE(WEBGPU)
+    if (is<GPUCanvasContext>(context))
+        return toJS(&state, deprecatedGlobalObjectForPrototype(&state), downcast<GPUCanvasContext>(context));
 #endif
     if (is<ImageBitmapRenderingContext>(context))
         return toJS(&state, deprecatedGlobalObjectForPrototype(&state), downcast<ImageBitmapRenderingContext>(context));
 
     return { };
 }
 
 void InspectorCanvasAgent::resolveCanvasContext(ErrorString& errorString, const String& canvasId, const String* objectGroup, RefPtr<Inspector::Protocol::Runtime::RemoteObject>& result)
 {
-    auto* inspectorCanvas = assertInspectorCanvas(errorString, canvasId);
+    auto inspectorCanvas = assertInspectorCanvas(errorString, canvasId);
     if (!inspectorCanvas)
         return;
 
     auto& state = *inspectorCanvas->context().canvasBase().scriptExecutionContext()->execState();
     auto injectedScript = m_injectedScriptManager.injectedScriptFor(&state);
     ASSERT(!injectedScript.hasNoValue());
 
     JSC::JSValue value = contextAsScriptValue(state, inspectorCanvas->context());
     if (!value) {
         ASSERT_NOT_REACHED();
-        errorString = "Unknown context type"_s;
+        errorString = "Internal error: unknown context of canvas for given canvasId"_s;
         return;
     }
 
     String objectGroupName = objectGroup ? *objectGroup : String();
     result = injectedScript.wrapObject(value, objectGroupName);
@@ -273,11 +240,11 @@
         m_recordingAutoCaptureFrameCount = WTF::nullopt;
 }
 
 void InspectorCanvasAgent::startRecording(ErrorString& errorString, const String& canvasId, const int* frameCount, const int* memoryLimit)
 {
-    auto* inspectorCanvas = assertInspectorCanvas(errorString, canvasId);
+    auto inspectorCanvas = assertInspectorCanvas(errorString, canvasId);
     if (!inspectorCanvas)
         return;
 
     if (inspectorCanvas->context().callTracingActive()) {
         errorString = "Already recording canvas"_s;
@@ -292,102 +259,102 @@
     startRecording(*inspectorCanvas, Inspector::Protocol::Recording::Initiator::Frontend, WTFMove(recordingOptions));
 }
 
 void InspectorCanvasAgent::stopRecording(ErrorString& errorString, const String& canvasId)
 {
-    auto* inspectorCanvas = assertInspectorCanvas(errorString, canvasId);
+    auto inspectorCanvas = assertInspectorCanvas(errorString, canvasId);
     if (!inspectorCanvas)
         return;
 
     if (!inspectorCanvas->context().callTracingActive()) {
-        errorString = "No active recording for canvas"_s;
+        errorString = "Not recording canvas"_s;
         return;
     }
 
     didFinishRecordingCanvasFrame(inspectorCanvas->context(), true);
 }
 
 void InspectorCanvasAgent::requestShaderSource(ErrorString& errorString, const String& programId, const String& shaderType, String* content)
 {
 #if ENABLE(WEBGL)
-    auto* inspectorProgram = assertInspectorProgram(errorString, programId);
+    auto inspectorProgram = assertInspectorProgram(errorString, programId);
     if (!inspectorProgram)
         return;
 
     auto* shader = inspectorProgram->shaderForType(shaderType);
     if (!shader) {
-        errorString = "No shader for given type."_s;
+        errorString = "Missing shader for given shaderType"_s;
         return;
     }
 
     *content = shader->getSource();
 #else
     UNUSED_PARAM(programId);
     UNUSED_PARAM(shaderType);
     UNUSED_PARAM(content);
-    errorString = "WebGL is not supported."_s;
+    errorString = "Not supported"_s;
 #endif
 }
 
 void InspectorCanvasAgent::updateShader(ErrorString& errorString, const String& programId, const String& shaderType, const String& source)
 {
 #if ENABLE(WEBGL)
-    auto* inspectorProgram = assertInspectorProgram(errorString, programId);
+    auto inspectorProgram = assertInspectorProgram(errorString, programId);
     if (!inspectorProgram)
         return;
 
     auto* shader = inspectorProgram->shaderForType(shaderType);
     if (!shader) {
-        errorString = "No shader for given type."_s;
+        errorString = "Missing shader for given shaderType"_s;
         return;
     }
 
     WebGLRenderingContextBase& contextWebGL = inspectorProgram->context();
     contextWebGL.shaderSource(shader, source);
     contextWebGL.compileShader(shader);
 
     if (!shader->isValid()) {
-        errorString = "Shader compilation failed."_s;
+        errorString = "Failed to update shader"_s;
         return;
     }
 
     contextWebGL.linkProgramWithoutInvalidatingAttribLocations(&inspectorProgram->program());
 #else
     UNUSED_PARAM(programId);
     UNUSED_PARAM(shaderType);
     UNUSED_PARAM(source);
-    errorString = "WebGL is not supported."_s;
+    errorString = "Not supported"_s;
 #endif
 }
 
 void InspectorCanvasAgent::setShaderProgramDisabled(ErrorString& errorString, const String& programId, bool disabled)
 {
 #if ENABLE(WEBGL)
-    auto* inspectorProgram = assertInspectorProgram(errorString, programId);
+    auto inspectorProgram = assertInspectorProgram(errorString, programId);
     if (!inspectorProgram)
         return;
 
     inspectorProgram->setDisabled(disabled);
 #else
     UNUSED_PARAM(programId);
     UNUSED_PARAM(disabled);
-    errorString = "WebGL is not supported."_s;
+    errorString = "Not supported"_s;
 #endif
 }
 
 void InspectorCanvasAgent::setShaderProgramHighlighted(ErrorString& errorString, const String& programId, bool highlighted)
 {
 #if ENABLE(WEBGL)
-    auto* inspectorProgram = assertInspectorProgram(errorString, programId);
+    auto inspectorProgram = assertInspectorProgram(errorString, programId);
     if (!inspectorProgram)
         return;
 
     inspectorProgram->setHighlighted(highlighted);
 #else
     UNUSED_PARAM(programId);
     UNUSED_PARAM(highlighted);
-    errorString = "WebGL is not supported."_s;
+    errorString = "Not supported"_s;
 #endif
 }
 
 void InspectorCanvasAgent::frameNavigated(Frame& frame)
 {
@@ -403,15 +370,12 @@
                 inspectorCanvases.append(inspectorCanvas.get());
         }
     }
 
     for (auto* inspectorCanvas : inspectorCanvases) {
-        inspectorCanvas->context().canvasBase().removeObserver(*this);
-
         String identifier = unbindCanvas(*inspectorCanvas);
-        if (m_enabled)
-            m_frontendDispatcher->canvasRemoved(identifier);
+        m_frontendDispatcher->canvasRemoved(identifier);
     }
 }
 
 void InspectorCanvasAgent::didChangeCSSCanvasClientNodes(CanvasBase& canvasBase)
 {
@@ -419,11 +383,11 @@
     if (!context) {
         ASSERT_NOT_REACHED();
         return;
     }
 
-    auto* inspectorCanvas = findInspectorCanvas(*context);
+    auto inspectorCanvas = findInspectorCanvas(*context);
     ASSERT(inspectorCanvas);
     if (!inspectorCanvas)
         return;
 
     m_frontendDispatcher->cssCanvasClientNodesChanged(inspectorCanvas->identifier());
@@ -434,76 +398,92 @@
     if (findInspectorCanvas(context)) {
         ASSERT_NOT_REACHED();
         return;
     }
 
-    context.canvasBase().addObserver(*this);
-
-    auto inspectorCanvas = InspectorCanvas::create(context);
-    m_identifierToInspectorCanvas.set(inspectorCanvas->identifier(), inspectorCanvas.copyRef());
-
-    if (!m_enabled)
-        return;
-
-    const bool captureBacktrace = true;
-    m_frontendDispatcher->canvasAdded(inspectorCanvas->buildObjectForCanvas(captureBacktrace));
+    auto& inspectorCanvas = bindCanvas(context, true);
 
     if (m_recordingAutoCaptureFrameCount) {
         RecordingOptions recordingOptions;
         recordingOptions.frameCount = m_recordingAutoCaptureFrameCount.value();
-        startRecording(inspectorCanvas.get(), Inspector::Protocol::Recording::Initiator::AutoCapture, WTFMove(recordingOptions));
+        startRecording(inspectorCanvas, Inspector::Protocol::Recording::Initiator::AutoCapture, WTFMove(recordingOptions));
     }
 }
 
 void InspectorCanvasAgent::didChangeCanvasMemory(CanvasRenderingContext& context)
 {
-    auto* inspectorCanvas = findInspectorCanvas(context);
+    auto inspectorCanvas = findInspectorCanvas(context);
     ASSERT(inspectorCanvas);
     if (!inspectorCanvas)
         return;
 
     // FIXME: <https://webkit.org/b/180833> Web Inspector: support OffscreenCanvas for Canvas related operations
 
     if (auto* node = inspectorCanvas->canvasElement())
         m_frontendDispatcher->canvasMemoryChanged(inspectorCanvas->identifier(), node->memoryCost());
 }
 
-void InspectorCanvasAgent::recordCanvasAction(CanvasRenderingContext& canvasRenderingContext, const String& name, Vector<RecordCanvasActionVariant>&& parameters)
+void InspectorCanvasAgent::recordCanvasAction(CanvasRenderingContext& canvasRenderingContext, const String& name, std::initializer_list<RecordCanvasActionVariant>&& parameters)
 {
-    auto* inspectorCanvas = findInspectorCanvas(canvasRenderingContext);
+    auto inspectorCanvas = findInspectorCanvas(canvasRenderingContext);
     ASSERT(inspectorCanvas);
     if (!inspectorCanvas)
         return;
 
     ASSERT(canvasRenderingContext.callTracingActive());
     if (!canvasRenderingContext.callTracingActive())
         return;
 
-    inspectorCanvas->recordAction(name, WTFMove(parameters));
+    // Only enqueue a microtask for the first action of each frame. Any subsequent actions will be
+    // covered by the initial microtask until the next frame.
+    if (!inspectorCanvas->currentFrameHasData()) {
+        if (auto* scriptExecutionContext = inspectorCanvas->context().canvasBase().scriptExecutionContext()) {
+            auto& queue = MicrotaskQueue::mainThreadQueue();
+            queue.append(makeUnique<ActiveDOMCallbackMicrotask>(queue, *scriptExecutionContext, [&, protectedInspectorCanvas = inspectorCanvas.copyRef()] {
+                if (auto* canvasElement = protectedInspectorCanvas->canvasElement()) {
+                    if (canvasElement->isDescendantOf(canvasElement->document()))
+                        return;
+                }
 
-    if (!m_canvasRecordingTimer.isActive())
-        m_canvasRecordingTimer.startOneShot(0_s);
+                if (protectedInspectorCanvas->context().callTracingActive())
+                    didFinishRecordingCanvasFrame(protectedInspectorCanvas->context());
+            }));
+        }
+    }
+
+    inspectorCanvas->recordAction(name, WTFMove(parameters));
 
     if (!inspectorCanvas->hasBufferSpace())
         didFinishRecordingCanvasFrame(inspectorCanvas->context(), true);
 }
 
+void InspectorCanvasAgent::canvasChanged(CanvasBase& canvasBase, const FloatRect&)
+{
+    auto* context = canvasBase.renderingContext();
+    if (!context)
+        return;
+
+    auto inspectorCanvas = findInspectorCanvas(*context);
+    ASSERT(inspectorCanvas);
+    if (!inspectorCanvas)
+        return;
+
+    inspectorCanvas->canvasChanged();
+}
+
 void InspectorCanvasAgent::canvasDestroyed(CanvasBase& canvasBase)
 {
     auto* context = canvasBase.renderingContext();
-    ASSERT(context);
     if (!context)
         return;
 
-    auto* inspectorCanvas = findInspectorCanvas(*context);
+    auto inspectorCanvas = findInspectorCanvas(*context);
     ASSERT(inspectorCanvas);
     if (!inspectorCanvas)
         return;
 
     String identifier = unbindCanvas(*inspectorCanvas);
-    if (!m_enabled)
-        return;
 
     // WebCore::CanvasObserver::canvasDestroyed is called in response to the GC destroying the CanvasBase.
     // Due to the single-process model used in WebKit1, the event must be dispatched from a timer to prevent
     // the frontend from making JS allocations while the GC is still active.
     m_removedCanvasIdentifiers.append(identifier);
@@ -512,22 +492,21 @@
         m_canvasDestroyedTimer.startOneShot(0_s);
 }
 
 void InspectorCanvasAgent::didFinishRecordingCanvasFrame(CanvasRenderingContext& context, bool forceDispatch)
 {
-    auto* inspectorCanvas = findInspectorCanvas(context);
+    auto inspectorCanvas = findInspectorCanvas(context);
     ASSERT(inspectorCanvas);
     if (!inspectorCanvas)
         return;
 
     if (!inspectorCanvas->context().callTracingActive())
         return;
 
     if (!inspectorCanvas->hasRecordingData()) {
         if (forceDispatch) {
             m_frontendDispatcher->recordingFinished(inspectorCanvas->identifier(), nullptr);
-
             inspectorCanvas->resetRecordingData();
         }
         return;
     }
 
@@ -539,112 +518,83 @@
         m_frontendDispatcher->recordingProgress(inspectorCanvas->identifier(), inspectorCanvas->releaseFrames(), inspectorCanvas->bufferUsed());
 
     if (!forceDispatch && !inspectorCanvas->overFrameCount())
         return;
 
-    // FIXME: <https://webkit.org/b/176008> Web Inspector: Record actions performed on WebGL2RenderingContext
-
-    Inspector::Protocol::Recording::Type type;
-    if (is<CanvasRenderingContext2D>(inspectorCanvas->context()))
-        type = Inspector::Protocol::Recording::Type::Canvas2D;
-    else if (is<ImageBitmapRenderingContext>(inspectorCanvas->context()))
-        type = Inspector::Protocol::Recording::Type::CanvasBitmapRenderer;
-#if ENABLE(WEBGL)
-    else if (is<WebGLRenderingContext>(inspectorCanvas->context()))
-        type = Inspector::Protocol::Recording::Type::CanvasWebGL;
-#endif
-    else {
-        ASSERT_NOT_REACHED();
-        type = Inspector::Protocol::Recording::Type::Canvas2D;
-    }
-
-    auto recording = Inspector::Protocol::Recording::Recording::create()
-        .setVersion(Inspector::Protocol::Recording::VERSION)
-        .setType(type)
-        .setInitialState(inspectorCanvas->releaseInitialState())
-        .setData(inspectorCanvas->releaseData())
-        .release();
-
-    const String& name = inspectorCanvas->recordingName();
-    if (!name.isEmpty())
-        recording->setName(name);
-
-    m_frontendDispatcher->recordingFinished(inspectorCanvas->identifier(), WTFMove(recording));
-
-    inspectorCanvas->resetRecordingData();
+    m_frontendDispatcher->recordingFinished(inspectorCanvas->identifier(), inspectorCanvas->releaseObjectForRecording());
 }
 
 void InspectorCanvasAgent::consoleStartRecordingCanvas(CanvasRenderingContext& context, JSC::ExecState& exec, JSC::JSObject* options)
 {
-    auto* inspectorCanvas = findInspectorCanvas(context);
+    auto inspectorCanvas = findInspectorCanvas(context);
     ASSERT(inspectorCanvas);
     if (!inspectorCanvas)
         return;
 
     RecordingOptions recordingOptions;
     if (options) {
-        if (JSC::JSValue optionSingleFrame = options->get(&exec, JSC::Identifier::fromString(&exec, "singleFrame")))
+        JSC::VM& vm = exec.vm();
+        if (JSC::JSValue optionSingleFrame = options->get(&exec, JSC::Identifier::fromString(vm, "singleFrame")))
             recordingOptions.frameCount = optionSingleFrame.toBoolean(&exec) ? 1 : 0;
-        if (JSC::JSValue optionFrameCount = options->get(&exec, JSC::Identifier::fromString(&exec, "frameCount")))
+        if (JSC::JSValue optionFrameCount = options->get(&exec, JSC::Identifier::fromString(vm, "frameCount")))
             recordingOptions.frameCount = optionFrameCount.toNumber(&exec);
-        if (JSC::JSValue optionMemoryLimit = options->get(&exec, JSC::Identifier::fromString(&exec, "memoryLimit")))
+        if (JSC::JSValue optionMemoryLimit = options->get(&exec, JSC::Identifier::fromString(vm, "memoryLimit")))
             recordingOptions.memoryLimit = optionMemoryLimit.toNumber(&exec);
-        if (JSC::JSValue optionName = options->get(&exec, JSC::Identifier::fromString(&exec, "name")))
+        if (JSC::JSValue optionName = options->get(&exec, JSC::Identifier::fromString(vm, "name")))
             recordingOptions.name = optionName.toWTFString(&exec);
     }
     startRecording(*inspectorCanvas, Inspector::Protocol::Recording::Initiator::Console, WTFMove(recordingOptions));
 }
 
 #if ENABLE(WEBGL)
 void InspectorCanvasAgent::didEnableExtension(WebGLRenderingContextBase& context, const String& extension)
 {
-    auto* inspectorCanvas = findInspectorCanvas(context);
+    auto inspectorCanvas = findInspectorCanvas(context);
     ASSERT(inspectorCanvas);
     if (!inspectorCanvas)
         return;
 
     m_frontendDispatcher->extensionEnabled(inspectorCanvas->identifier(), extension);
 }
 
 void InspectorCanvasAgent::didCreateProgram(WebGLRenderingContextBase& context, WebGLProgram& program)
 {
-    auto* inspectorCanvas = findInspectorCanvas(context);
+    auto inspectorCanvas = findInspectorCanvas(context);
     ASSERT(inspectorCanvas);
     if (!inspectorCanvas)
         return;
 
     auto inspectorProgram = InspectorShaderProgram::create(program, *inspectorCanvas);
     String programIdentifier = inspectorProgram->identifier();
     m_identifierToInspectorProgram.set(programIdentifier, WTFMove(inspectorProgram));
-
-    if (m_enabled)
-        m_frontendDispatcher->programCreated(inspectorCanvas->identifier(), programIdentifier);
+    m_frontendDispatcher->programCreated(inspectorCanvas->identifier(), programIdentifier);
 }
 
 void InspectorCanvasAgent::willDeleteProgram(WebGLProgram& program)
 {
-    auto* inspectorProgram = findInspectorProgram(program);
+    auto inspectorProgram = findInspectorProgram(program);
     if (!inspectorProgram)
         return;
 
     String identifier = unbindProgram(*inspectorProgram);
-    if (m_enabled)
-        m_frontendDispatcher->programDeleted(identifier);
+    m_frontendDispatcher->programDeleted(identifier);
 }
 
 bool InspectorCanvasAgent::isShaderProgramDisabled(WebGLProgram& program)
 {
-    auto* inspectorProgram = findInspectorProgram(program);
+    auto inspectorProgram = findInspectorProgram(program);
+    ASSERT(inspectorProgram);
     if (!inspectorProgram)
         return false;
 
     return inspectorProgram->disabled();
 }
 
 bool InspectorCanvasAgent::isShaderProgramHighlighted(WebGLProgram& program)
 {
-    auto* inspectorProgram = findInspectorProgram(program);
+    auto inspectorProgram = findInspectorProgram(program);
+    ASSERT(inspectorProgram);
     if (!inspectorProgram)
         return false;
 
     return inspectorProgram->highlighted();
 }
@@ -655,10 +605,13 @@
     auto& canvasRenderingContext = inspectorCanvas.context();
 
     if (!is<CanvasRenderingContext2D>(canvasRenderingContext)
 #if ENABLE(WEBGL)
         && !is<WebGLRenderingContext>(canvasRenderingContext)
+#endif
+#if ENABLE(WEBGL2)
+        && !is<WebGL2RenderingContext>(canvasRenderingContext)
 #endif
         && !is<ImageBitmapRenderingContext>(canvasRenderingContext))
         return;
 
     if (canvasRenderingContext.callTracingActive())
@@ -679,46 +632,55 @@
 void InspectorCanvasAgent::canvasDestroyedTimerFired()
 {
     if (!m_removedCanvasIdentifiers.size())
         return;
 
-    if (m_enabled) {
-        for (auto& identifier : m_removedCanvasIdentifiers)
-            m_frontendDispatcher->canvasRemoved(identifier);
-    }
+    for (auto& identifier : m_removedCanvasIdentifiers)
+        m_frontendDispatcher->canvasRemoved(identifier);
 
     m_removedCanvasIdentifiers.clear();
 }
 
-void InspectorCanvasAgent::canvasRecordingTimerFired()
-{
-    for (auto& inspectorCanvas : m_identifierToInspectorCanvas.values()) {
-        if (!inspectorCanvas->context().callTracingActive())
-            continue;
-
-        didFinishRecordingCanvasFrame(inspectorCanvas->context());
-    }
-}
-
 void InspectorCanvasAgent::clearCanvasData()
 {
     for (auto& inspectorCanvas : m_identifierToInspectorCanvas.values())
         inspectorCanvas->context().canvasBase().removeObserver(*this);
 
     m_identifierToInspectorCanvas.clear();
-    m_removedCanvasIdentifiers.clear();
 #if ENABLE(WEBGL)
     m_identifierToInspectorProgram.clear();
+    m_removedCanvasIdentifiers.clear();
 #endif
 
-    if (m_canvasRecordingTimer.isActive())
-        m_canvasRecordingTimer.stop();
-
     if (m_canvasDestroyedTimer.isActive())
         m_canvasDestroyedTimer.stop();
 }
 
+InspectorCanvas& InspectorCanvasAgent::bindCanvas(CanvasRenderingContext& context, bool captureBacktrace)
+{
+    auto inspectorCanvas = InspectorCanvas::create(context);
+    m_identifierToInspectorCanvas.set(inspectorCanvas->identifier(), inspectorCanvas.copyRef());
+
+    inspectorCanvas->context().canvasBase().addObserver(*this);
+
+    m_frontendDispatcher->canvasAdded(inspectorCanvas->buildObjectForCanvas(captureBacktrace));
+
+#if ENABLE(WEBGL)
+    if (is<WebGLRenderingContextBase>(inspectorCanvas->context())) {
+        WebGLRenderingContextBase& contextWebGL = downcast<WebGLRenderingContextBase>(inspectorCanvas->context());
+        if (Optional<Vector<String>> extensions = contextWebGL.getSupportedExtensions()) {
+            for (const String& extension : *extensions) {
+                if (contextWebGL.extensionIsEnabled(extension))
+                    m_frontendDispatcher->extensionEnabled(inspectorCanvas->identifier(), extension);
+            }
+        }
+    }
+#endif
+
+    return inspectorCanvas;
+}
+
 String InspectorCanvasAgent::unbindCanvas(InspectorCanvas& inspectorCanvas)
 {
 #if ENABLE(WEBGL)
     Vector<InspectorShaderProgram*> programsToRemove;
     for (auto& inspectorProgram : m_identifierToInspectorProgram.values()) {
@@ -728,34 +690,34 @@
 
     for (auto* inspectorProgram : programsToRemove)
         unbindProgram(*inspectorProgram);
 #endif
 
+    inspectorCanvas.context().canvasBase().removeObserver(*this);
+
     String identifier = inspectorCanvas.identifier();
     m_identifierToInspectorCanvas.remove(identifier);
 
     return identifier;
 }
 
-InspectorCanvas* InspectorCanvasAgent::assertInspectorCanvas(ErrorString& errorString, const String& identifier)
+RefPtr<InspectorCanvas> InspectorCanvasAgent::assertInspectorCanvas(ErrorString& errorString, const String& canvasId)
 {
-    RefPtr<InspectorCanvas> inspectorCanvas = m_identifierToInspectorCanvas.get(identifier);
+    auto inspectorCanvas = m_identifierToInspectorCanvas.get(canvasId);
     if (!inspectorCanvas) {
-        errorString = "No canvas for given identifier."_s;
+        errorString = "Missing canvas for given canvasId"_s;
         return nullptr;
     }
-
-    return inspectorCanvas.get();
+    return inspectorCanvas;
 }
 
-InspectorCanvas* InspectorCanvasAgent::findInspectorCanvas(CanvasRenderingContext& context)
+RefPtr<InspectorCanvas> InspectorCanvasAgent::findInspectorCanvas(CanvasRenderingContext& context)
 {
     for (auto& inspectorCanvas : m_identifierToInspectorCanvas.values()) {
         if (&inspectorCanvas->context() == &context)
-            return inspectorCanvas.get();
+            return inspectorCanvas;
     }
-
     return nullptr;
 }
 
 #if ENABLE(WEBGL)
 String InspectorCanvasAgent::unbindProgram(InspectorShaderProgram& inspectorProgram)
@@ -764,28 +726,26 @@
     m_identifierToInspectorProgram.remove(identifier);
 
     return identifier;
 }
 
-InspectorShaderProgram* InspectorCanvasAgent::assertInspectorProgram(ErrorString& errorString, const String& identifier)
+RefPtr<InspectorShaderProgram> InspectorCanvasAgent::assertInspectorProgram(ErrorString& errorString, const String& programId)
 {
-    RefPtr<InspectorShaderProgram> inspectorProgram = m_identifierToInspectorProgram.get(identifier);
+    auto inspectorProgram = m_identifierToInspectorProgram.get(programId);
     if (!inspectorProgram) {
-        errorString = "No shader program for given identifier."_s;
+        errorString = "Missing program for given programId"_s;
         return nullptr;
     }
-
-    return inspectorProgram.get();
+    return inspectorProgram;
 }
 
-InspectorShaderProgram* InspectorCanvasAgent::findInspectorProgram(WebGLProgram& program)
+RefPtr<InspectorShaderProgram> InspectorCanvasAgent::findInspectorProgram(WebGLProgram& program)
 {
     for (auto& inspectorProgram : m_identifierToInspectorProgram.values()) {
         if (&inspectorProgram->program() == &program)
-            return inspectorProgram.get();
+            return inspectorProgram;
     }
-
     return nullptr;
 }
 #endif
 
 } // namespace WebCore
