diff a/modules/javafx.web/src/main/native/Source/WebCore/html/BaseCheckableInputType.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/BaseCheckableInputType.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/BaseCheckableInputType.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/BaseCheckableInputType.cpp
@@ -62,19 +62,21 @@
         return false;
     formData.append(element()->name(), element()->value());
     return true;
 }
 
-void BaseCheckableInputType::handleKeydownEvent(KeyboardEvent& event)
+auto BaseCheckableInputType::handleKeydownEvent(KeyboardEvent& event) -> ShouldCallBaseEventHandler
 {
     const String& key = event.keyIdentifier();
     if (key == "U+0020") {
         ASSERT(element());
         element()->setActive(true, true);
         // No setDefaultHandled(), because IE dispatches a keypress in this case
         // and the caller will only dispatch a keypress if we don't call setDefaultHandled().
+        return ShouldCallBaseEventHandler::No;
     }
+    return ShouldCallBaseEventHandler::Yes;
 }
 
 void BaseCheckableInputType::handleKeypressEvent(KeyboardEvent& event)
 {
     if (event.charCode() == ' ') {
@@ -97,11 +99,11 @@
     element()->dispatchSimulatedClick(0, sendMouseEvents ? SendMouseUpDownEvents : SendNoEvents);
 }
 
 String BaseCheckableInputType::fallbackValue() const
 {
-    static NeverDestroyed<const AtomicString> on("on", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> on("on", AtomString::ConstructFromLiteral);
     return on.get();
 }
 
 bool BaseCheckableInputType::storesValueSeparateFromAttribute()
 {
