diff a/modules/javafx.web/src/main/native/Source/WebCore/mathml/MathMLPresentationElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/mathml/MathMLPresentationElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/mathml/MathMLPresentationElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/mathml/MathMLPresentationElement.cpp
@@ -33,10 +33,11 @@
 #include "ElementIterator.h"
 #include "HTMLHtmlElement.h"
 #include "HTMLMapElement.h"
 #include "HTMLNames.h"
 #include "HTMLParserIdioms.h"
+#include "HTTPParsers.h"
 #include "MathMLMathElement.h"
 #include "MathMLNames.h"
 #include "RenderMathMLBlock.h"
 #include "RenderTableCell.h"
 #include "SVGSVGElement.h"
@@ -188,11 +189,11 @@
 {
     if (attribute)
         return attribute.value();
 
     // In MathML, attribute values are case-sensitive.
-    const AtomicString& value = attributeWithoutSynchronization(name);
+    const AtomString& value = attributeWithoutSynchronization(name);
     if (value == "true")
         attribute = BooleanValue::True;
     else if (value == "false")
         attribute = BooleanValue::False;
     else
@@ -292,22 +293,23 @@
     //
     // We do not perform a strict verification of the syntax of whitespaces and number.
     // Instead, we just use isHTMLSpace and toFloat to parse these parts.
 
     // We first skip whitespace from both ends of the string.
-    StringView stringView = stripLeadingAndTrailingWhitespace(string);
+    StringView stringView = string;
+    StringView strippedLength = stripLeadingAndTrailingHTTPSpaces(stringView);
 
-    if (stringView.isEmpty())
+    if (strippedLength.isEmpty())
         return Length();
 
     // We consider the most typical case: a number followed by an optional unit.
-    UChar firstChar = stringView[0];
+    UChar firstChar = strippedLength[0];
     if (isASCIIDigit(firstChar) || firstChar == '-' || firstChar == '.')
-        return parseNumberAndUnit(stringView);
+        return parseNumberAndUnit(strippedLength);
 
     // Otherwise, we try and parse a named space.
-    return parseNamedSpace(stringView);
+    return parseNamedSpace(strippedLength);
 }
 
 const MathMLElement::Length& MathMLPresentationElement::cachedMathMLLength(const QualifiedName& name, Optional<Length>& length)
 {
     if (length)
@@ -327,11 +329,11 @@
         return WTF::nullopt;
     const MathMLElement::BooleanValue& specifiedDisplayStyle = cachedBooleanAttribute(displaystyleAttr, m_displayStyle);
     return toOptionalBool(specifiedDisplayStyle);
 }
 
-MathMLElement::MathVariant MathMLPresentationElement::parseMathVariantAttribute(const AtomicString& attributeValue)
+MathMLElement::MathVariant MathMLPresentationElement::parseMathVariantAttribute(const AtomString& attributeValue)
 {
     // The mathvariant attribute values is case-sensitive.
     if (attributeValue == "normal")
         return MathVariant::Normal;
     if (attributeValue == "bold")
@@ -378,11 +380,11 @@
     if (!m_mathVariant)
         m_mathVariant = parseMathVariantAttribute(attributeWithoutSynchronization(mathvariantAttr));
     return m_mathVariant.value() == MathVariant::None ? WTF::nullopt : m_mathVariant;
 }
 
-void MathMLPresentationElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void MathMLPresentationElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     bool displayStyleAttribute = name == displaystyleAttr && acceptsDisplayStyleAttribute();
     bool mathVariantAttribute = name == mathvariantAttr && acceptsMathVariantAttribute();
     if (displayStyleAttribute)
         m_displayStyle = WTF::nullopt;
