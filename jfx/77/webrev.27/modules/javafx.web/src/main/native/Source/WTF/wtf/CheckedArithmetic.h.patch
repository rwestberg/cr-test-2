diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/CheckedArithmetic.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/CheckedArithmetic.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/CheckedArithmetic.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/CheckedArithmetic.h
@@ -179,11 +179,11 @@
 template <typename Target, typename Source> struct BoundsChecker<Target, Source, false, false, true> {
     static bool inBounds(Source value)
     {
         // When converting value to unsigned Source, value will become a big value if value is negative.
         // Casted value will become bigger than Target::max as Source is bigger than Target.
-        return static_cast<typename std::make_unsigned<Source>::type>(value) <= std::numeric_limits<Target>::max();
+        return static_cast<std::make_unsigned_t<Source>>(value) <= std::numeric_limits<Target>::max();
     }
 };
 
 template <typename Target, typename Source> struct BoundsChecker<Target, Source, false, true, false> {
     static bool inBounds(Source value)
@@ -609,10 +609,17 @@
         : m_value(0)
     {
         this->overflowed();
     }
 
+    Checked(const Checked& value)
+    {
+        if (value.hasOverflowed())
+            this->overflowed();
+        m_value = static_cast<T>(value.m_value);
+    }
+
     template <typename U> Checked(U value)
     {
         if (!isInBounds<T>(value))
             this->overflowed();
         m_value = static_cast<T>(value);
