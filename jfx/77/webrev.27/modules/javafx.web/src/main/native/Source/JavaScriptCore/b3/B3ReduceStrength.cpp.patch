diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3ReduceStrength.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3ReduceStrength.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3ReduceStrength.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3ReduceStrength.cpp
@@ -31,10 +31,11 @@
 #include "B3AtomicValue.h"
 #include "B3BasicBlockInlines.h"
 #include "B3BlockInsertionSet.h"
 #include "B3ComputeDivisionMagic.h"
 #include "B3Dominators.h"
+#include "B3EliminateDeadCode.h"
 #include "B3InsertionSetInlines.h"
 #include "B3MemoryValueInlines.h"
 #include "B3PhaseScope.h"
 #include "B3PhiChildren.h"
 #include "B3ProcedureInlines.h"
@@ -112,11 +113,11 @@
         return IntRange(std::numeric_limits<T>::min(), std::numeric_limits<T>::max());
     }
 
     static IntRange top(Type type)
     {
-        switch (type) {
+        switch (type.kind()) {
         case Int32:
             return top<int32_t>();
         case Int64:
             return top<int64_t>();
         default:
@@ -133,11 +134,11 @@
         return IntRange(0, mask);
     }
 
     static IntRange rangeForMask(int64_t mask, Type type)
     {
-        switch (type) {
+        switch (type.kind()) {
         case Int32:
             return rangeForMask<int32_t>(static_cast<int32_t>(mask));
         case Int64:
             return rangeForMask<int64_t>(mask);
         default:
@@ -155,11 +156,11 @@
         return rangeForMask<T>(static_cast<T>(mask));
     }
 
     static IntRange rangeForZShr(int32_t shiftAmount, Type type)
     {
-        switch (type) {
+        switch (type.kind()) {
         case Int32:
             return rangeForZShr<int32_t>(shiftAmount);
         case Int64:
             return rangeForZShr<int64_t>(shiftAmount);
         default:
@@ -185,11 +186,11 @@
             || sumOverflows<T>(m_max, other.m_max);
     }
 
     bool couldOverflowAdd(const IntRange& other, Type type)
     {
-        switch (type) {
+        switch (type.kind()) {
         case Int32:
             return couldOverflowAdd<int32_t>(other);
         case Int64:
             return couldOverflowAdd<int64_t>(other);
         default:
@@ -206,11 +207,11 @@
             || differenceOverflows<T>(m_max, other.m_max);
     }
 
     bool couldOverflowSub(const IntRange& other, Type type)
     {
-        switch (type) {
+        switch (type.kind()) {
         case Int32:
             return couldOverflowSub<int32_t>(other);
         case Int64:
             return couldOverflowSub<int64_t>(other);
         default:
@@ -227,11 +228,11 @@
             || productOverflows<T>(m_max, other.m_max);
     }
 
     bool couldOverflowMul(const IntRange& other, Type type)
     {
-        switch (type) {
+        switch (type.kind()) {
         case Int32:
             return couldOverflowMul<int32_t>(other);
         case Int64:
             return couldOverflowMul<int64_t>(other);
         default:
@@ -253,11 +254,11 @@
         return IntRange(newMin, newMax);
     }
 
     IntRange shl(int32_t shiftAmount, Type type)
     {
-        switch (type) {
+        switch (type.kind()) {
         case Int32:
             return shl<int32_t>(shiftAmount);
         case Int64:
             return shl<int64_t>(shiftAmount);
         default:
@@ -275,11 +276,11 @@
         return IntRange(newMin, newMax);
     }
 
     IntRange sShr(int32_t shiftAmount, Type type)
     {
-        switch (type) {
+        switch (type.kind()) {
         case Int32:
             return sShr<int32_t>(shiftAmount);
         case Int64:
             return sShr<int64_t>(shiftAmount);
         default:
@@ -308,11 +309,11 @@
         return IntRange(newMin, newMax);
     }
 
     IntRange zShr(int32_t shiftAmount, Type type)
     {
-        switch (type) {
+        switch (type.kind()) {
         case Int32:
             return zShr<int32_t>(shiftAmount);
         case Int64:
             return zShr<int64_t>(shiftAmount);
         default:
@@ -329,11 +330,11 @@
         return IntRange(m_min + other.m_min, m_max + other.m_max);
     }
 
     IntRange add(const IntRange& other, Type type)
     {
-        switch (type) {
+        switch (type.kind()) {
         case Int32:
             return add<int32_t>(other);
         case Int64:
             return add<int64_t>(other);
         default:
@@ -350,11 +351,11 @@
         return IntRange(m_min - other.m_max, m_max - other.m_min);
     }
 
     IntRange sub(const IntRange& other, Type type)
     {
-        switch (type) {
+        switch (type.kind()) {
         case Int32:
             return sub<int32_t>(other);
         case Int64:
             return sub<int64_t>(other);
         default:
@@ -377,11 +378,11 @@
                 std::max(m_max * other.m_min, m_max * other.m_max)));
     }
 
     IntRange mul(const IntRange& other, Type type)
     {
-        switch (type) {
+        switch (type.kind()) {
         case Int32:
             return mul<int32_t>(other);
         case Int64:
             return mul<int64_t>(other);
         default:
@@ -399,10 +400,11 @@
 public:
     ReduceStrength(Procedure& proc)
         : m_proc(proc)
         , m_insertionSet(proc)
         , m_blockInsertionSet(proc)
+        , m_root(proc.at(0))
     {
     }
 
     bool run()
     {
@@ -438,11 +440,12 @@
             //
             // If we do CSE before DCE, we will remove @thing and keep @dead. Effectively, we will
             // "hoist" @thing. On the other hand, if we run DCE before CSE, we will kill @dead and
             // keep @thing. That's better, since we usually want things to stay wherever the client
             // put them. We're not actually smart enough to move things around at random.
-            killDeadCode();
+            m_changed |= eliminateDeadCodeImpl(m_proc);
+            m_valueForConstant.clear();
 
             simplifySSA();
 
             if (m_proc.optLevel() >= 2) {
                 m_proc.resetValueOwners();
@@ -600,10 +603,13 @@
                     && m_value->child(1)->isInt(-1)
                     && m_value->child(0)->child(0)->isInt(0)) {
                     replaceWithNew<Value>(BitXor, m_value->origin(), m_value->child(0)->child(1), m_value->child(1));
                     break;
                 }
+
+                if (handleMulDistributivity())
+                    break;
             }
 
             break;
 
         case Sub:
@@ -642,10 +648,46 @@
                 // Into this: Add(value, otherValue)
                 if (m_value->child(1)->opcode() == Neg) {
                     replaceWithNew<Value>(Add, m_value->origin(), m_value->child(0), m_value->child(1)->child(0));
                     break;
                 }
+
+                // Turn this: Sub(Neg(value), value2)
+                // Into this: Neg(Add(value, value2))
+                if (m_value->child(0)->opcode() == Neg) {
+                    replaceWithNew<Value>(Neg, m_value->origin(),
+                        m_insertionSet.insert<Value>(m_index, Add, m_value->origin(), m_value->child(0)->child(0), m_value->child(1)));
+                    break;
+                }
+
+                // Turn this: Sub(Sub(a, b), c)
+                // Into this: Sub(a, Add(b, c))
+                if (m_value->child(0)->opcode() == Sub) {
+                    replaceWithNew<Value>(Sub, m_value->origin(), m_value->child(0)->child(0),
+                        m_insertionSet.insert<Value>(m_index, Add, m_value->origin(), m_value->child(0)->child(1), m_value->child(1)));
+                    break;
+                }
+
+                // Turn this: Sub(a, Sub(b, c))
+                // Into this: Add(Sub(a, b), c)
+                if (m_value->child(1)->opcode() == Sub) {
+                    replaceWithNew<Value>(Add, m_value->origin(),
+                        m_insertionSet.insert<Value>(m_index, Sub, m_value->origin(), m_value->child(0), m_value->child(1)->child(0)),
+                        m_value->child(1)->child(1));
+                    break;
+                }
+
+                // Turn this: Sub(Add(a, b), c)
+                // Into this: Add(a, Sub(b, c))
+                if (m_value->child(0)->opcode() == Add) {
+                    replaceWithNew<Value>(Add, m_value->origin(), m_value->child(0)->child(0),
+                        m_insertionSet.insert<Value>(m_index, Sub, m_value->origin(), m_value->child(0)->child(1), m_value->child(1)));
+                    break;
+                }
+
+                if (handleMulDistributivity())
+                    break;
             }
 
             break;
 
         case Neg:
@@ -661,17 +703,33 @@
             if (m_value->child(0)->opcode() == Neg) {
                 replaceWithIdentity(m_value->child(0)->child(0));
                 break;
             }
 
-            // Turn this: Integer Neg(Sub(value, otherValue))
-            // Into this: Sub(otherValue, value)
-            if (m_value->isInteger() && m_value->child(0)->opcode() == Sub) {
-                replaceWithNew<Value>(Sub, m_value->origin(), m_value->child(0)->child(1), m_value->child(0)->child(0));
-                break;
+            if (m_value->isInteger()) {
+                // Turn this: Integer Neg(Sub(value, otherValue))
+                // Into this: Sub(otherValue, value)
+                if (m_value->child(0)->opcode() == Sub) {
+                    replaceWithNew<Value>(Sub, m_value->origin(), m_value->child(0)->child(1), m_value->child(0)->child(0));
+                    break;
+                }
+
+                // Turn this: Integer Neg(Mul(value, c))
+                // Into this: Mul(value, -c), as long as -c does not overflow
+                if (m_value->child(0)->opcode() == Mul && m_value->child(0)->child(1)->hasInt()) {
+                    int64_t factor = m_value->child(0)->child(1)->asInt();
+                    if (m_value->type() == Int32 && factor != std::numeric_limits<int32_t>::min()) {
+                        Value* newFactor = m_insertionSet.insert<Const32Value>(m_index, m_value->child(0)->child(1)->origin(), -factor);
+                        replaceWithNew<Value>(Mul, m_value->origin(), m_value->child(0)->child(0), newFactor);
+                    } else if (m_value->type() == Int64 && factor != std::numeric_limits<int64_t>::min()) {
+                        Value* newFactor = m_insertionSet.insert<Const64Value>(m_index, m_value->child(0)->child(1)->origin(), -factor);
+                        replaceWithNew<Value>(Mul, m_value->origin(), m_value->child(0)->child(0), newFactor);
+                    }
+                }
             }
 
+
             break;
 
         case Mul:
             handleCommutativity();
 
@@ -700,17 +758,13 @@
                     replaceWithIdentity(m_value->child(0));
                     break;
                 }
 
                 // Turn this: Mul(value, -1)
-                // Into this: Sub(0, value)
+                // Into this: Neg(value)
                 if (factor == -1) {
-                    replaceWithNewValue(
-                        m_proc.add<Value>(
-                            Sub, m_value->origin(),
-                            m_insertionSet.insertIntConstant(m_index, m_value, 0),
-                            m_value->child(0)));
+                    replaceWithNew<Value>(Neg, m_value->origin(), m_value->child(0));
                     break;
                 }
 
                 // Turn this: Mul(value, constant)
                 // Into this: Shl(value, log2(constant))
@@ -732,10 +786,27 @@
                     replaceWithIdentity(m_value->child(0));
                     break;
                 }
             }
 
+            if (m_value->isInteger()) {
+                // Turn this: Integer Mul(value, Neg(otherValue))
+                // Into this: Neg(Mul(value, otherValue))
+                if (m_value->child(1)->opcode() == Neg) {
+                    Value* newMul = m_insertionSet.insert<Value>(m_index, Mul, m_value->origin(), m_value->child(0), m_value->child(1)->child(0));
+                    replaceWithNew<Value>(Neg, m_value->origin(), newMul);
+                    break;
+                }
+                // Turn this: Integer Mul(Neg(value), otherValue)
+                // Into this: Neg(Mul(value, value2))
+                if (m_value->child(0)->opcode() == Neg) {
+                    Value* newMul = m_insertionSet.insert<Value>(m_index, Mul, m_value->origin(), m_value->child(0)->child(0), m_value->child(1));
+                    replaceWithNew<Value>(Neg, m_value->origin(), newMul);
+                    break;
+                }
+            }
+
             break;
 
         case Div:
             // Turn this: Div(constant1, constant2)
             // Into this: constant1 / constant2
@@ -1198,10 +1269,23 @@
             if (Value* constant = m_value->child(0)->shlConstant(m_proc, m_value->child(1))) {
                 replaceWithNewValue(constant);
                 break;
             }
 
+            // Turn this: Shl(<S|Z>Shr(@x, @const), @const)
+            // Into this: BitAnd(@x, -(1<<@const))
+            if ((m_value->child(0)->opcode() == SShr || m_value->child(0)->opcode() == ZShr)
+                && m_value->child(0)->child(1)->hasInt()
+                && m_value->child(1)->hasInt()
+                && m_value->child(0)->child(1)->asInt() == m_value->child(1)->asInt()) {
+                int shiftAmount = m_value->child(1)->asInt() & (m_value->type() == Int32 ? 31 : 63);
+                Value* newConst = m_proc.addIntConstant(m_value, - static_cast<int64_t>(1ull << shiftAmount));
+                m_insertionSet.insertValue(m_index, newConst);
+                replaceWithNew<Value>(BitAnd, m_value->origin(), m_value->child(0)->child(0), newConst);
+                break;
+            }
+
             handleShiftAmount();
             break;
 
         case SShr:
             // Turn this: SShr(constant1, constant2)
@@ -2095,10 +2179,33 @@
                 }
             }
             break;
         }
 
+        case Const32:
+        case Const64:
+        case ConstFloat:
+        case ConstDouble: {
+            ValueKey key = m_value->key();
+            if (Value* constInRoot = m_valueForConstant.get(key)) {
+                if (constInRoot != m_value) {
+                    m_value->replaceWithIdentity(constInRoot);
+                    m_changed = true;
+                }
+            } else if (m_block == m_root)
+                m_valueForConstant.add(key, m_value);
+            else {
+                Value* constInRoot = m_proc.clone(m_value);
+                ASSERT(m_root && m_root->size() >= 1);
+                m_root->appendNonTerminal(constInRoot);
+                m_valueForConstant.add(key, constInRoot);
+                m_value->replaceWithIdentity(constInRoot);
+                m_changed = true;
+            }
+            break;
+        }
+
         default:
             break;
         }
     }
 
@@ -2149,12 +2256,15 @@
         if (B3ReduceStrengthInternal::verbose)
             dataLog("Specializing select: ", deepDump(m_proc, source), "\n");
 
         // This mutates startIndex to account for the fact that m_block got the front of it
         // chopped off.
-        BasicBlock* predecessor =
-            m_blockInsertionSet.splitForward(m_block, m_index, &m_insertionSet);
+        BasicBlock* predecessor = m_blockInsertionSet.splitForward(m_block, m_index, &m_insertionSet);
+        if (m_block == m_root) {
+            m_root = predecessor;
+            m_valueForConstant.clear();
+        }
 
         // Splitting will commit the insertion set, which changes the exact position of the
         // source. That's why we do the search after splitting.
         unsigned startIndex = UINT_MAX;
         for (unsigned i = predecessor->size(); i--;) {
@@ -2281,10 +2391,54 @@
             std::swap(m_value->child(0), m_value->child(1));
             m_changed = true;
         }
     }
 
+    // For Op==Add or Sub, turn any of these:
+    //      Op(Mul(x1, x2), Mul(x1, x3))
+    //      Op(Mul(x2, x1), Mul(x1, x3))
+    //      Op(Mul(x1, x2), Mul(x3, x1))
+    //      Op(Mul(x2, x1), Mul(x3, x1))
+    // Into this: Mul(x1, Op(x2, x3))
+    bool handleMulDistributivity()
+    {
+        ASSERT(m_value->opcode() == Add || m_value->opcode() == Sub);
+        Value* x1 = nullptr;
+        Value* x2 = nullptr;
+        Value* x3 = nullptr;
+        if (m_value->child(0)->opcode() == Mul && m_value->child(1)->opcode() == Mul) {
+            if (m_value->child(0)->child(0) == m_value->child(1)->child(0)) {
+                // Op(Mul(x1, x2), Mul(x1, x3))
+                x1 = m_value->child(0)->child(0);
+                x2 = m_value->child(0)->child(1);
+                x3 = m_value->child(1)->child(1);
+            } else if (m_value->child(0)->child(1) == m_value->child(1)->child(0)) {
+                // Op(Mul(x2, x1), Mul(x1, x3))
+                x1 = m_value->child(0)->child(1);
+                x2 = m_value->child(0)->child(0);
+                x3 = m_value->child(1)->child(1);
+            } else if (m_value->child(0)->child(0) == m_value->child(1)->child(1)) {
+                // Op(Mul(x1, x2), Mul(x3, x1))
+                x1 = m_value->child(0)->child(0);
+                x2 = m_value->child(0)->child(1);
+                x3 = m_value->child(1)->child(0);
+            } else if (m_value->child(0)->child(1) == m_value->child(1)->child(1)) {
+                // Op(Mul(x2, x1), Mul(x3, x1))
+                x1 = m_value->child(0)->child(1);
+                x2 = m_value->child(0)->child(0);
+                x3 = m_value->child(1)->child(0);
+            }
+        }
+        if (x1 != nullptr) {
+            ASSERT(x2 != nullptr && x3 != nullptr);
+            Value* newOp = m_insertionSet.insert<Value>(m_index, m_value->opcode(), m_value->origin(), x2, x3);
+            replaceWithNew<Value>(Mul, m_value->origin(), x1, newOp);
+            return true;
+        }
+        return false;
+    }
+
     // For Op==BitOr or BitXor, turn any of these:
     //      Op(BitAnd(x1, x2), BitAnd(x1, x3))
     //      Op(BitAnd(x2, x1), BitAnd(x1, x3))
     //      Op(BitAnd(x1, x2), BitAnd(x3, x1))
     //      Op(BitAnd(x2, x1), BitAnd(x3, x1))
@@ -2339,11 +2493,11 @@
             }
         }
         if (x1 != nullptr) {
             ASSERT(x2 != nullptr && x3 != nullptr);
             Value* bitOp = m_insertionSet.insert<Value>(m_index, m_value->opcode(), m_value->origin(), x2, x3);
-            replaceWithNew<Value>(BitAnd, m_value->origin(), bitOp, x1);
+            replaceWithNew<Value>(BitAnd, m_value->origin(), x1, bitOp);
             return true;
         }
         return false;
     }
 
@@ -2635,74 +2789,10 @@
             for (BasicBlock* successor : block->successorBlocks())
                 RELEASE_ASSERT(successor->containsPredecessor(block));
         }
     }
 
-    void killDeadCode()
-    {
-        GraphNodeWorklist<Value*, IndexSet<Value*>> worklist;
-        Vector<UpsilonValue*, 64> upsilons;
-        for (BasicBlock* block : m_proc) {
-            for (Value* value : *block) {
-                Effects effects;
-                // We don't care about effects of SSA operations, since we model them more
-                // accurately than the effects() method does.
-                if (value->opcode() != Phi && value->opcode() != Upsilon)
-                    effects = value->effects();
-
-                if (effects.mustExecute())
-                    worklist.push(value);
-
-                if (UpsilonValue* upsilon = value->as<UpsilonValue>())
-                    upsilons.append(upsilon);
-            }
-        }
-        for (;;) {
-            while (Value* value = worklist.pop()) {
-                for (Value* child : value->children())
-                    worklist.push(child);
-            }
-
-            bool didPush = false;
-            for (size_t upsilonIndex = 0; upsilonIndex < upsilons.size(); ++upsilonIndex) {
-                UpsilonValue* upsilon = upsilons[upsilonIndex];
-                if (worklist.saw(upsilon->phi())) {
-                    worklist.push(upsilon);
-                    upsilons[upsilonIndex--] = upsilons.last();
-                    upsilons.takeLast();
-                    didPush = true;
-                }
-            }
-            if (!didPush)
-                break;
-        }
-
-        IndexSet<Variable*> liveVariables;
-
-        for (BasicBlock* block : m_proc) {
-            size_t sourceIndex = 0;
-            size_t targetIndex = 0;
-            while (sourceIndex < block->size()) {
-                Value* value = block->at(sourceIndex++);
-                if (worklist.saw(value)) {
-                    if (VariableValue* variableValue = value->as<VariableValue>())
-                        liveVariables.add(variableValue->variable());
-                    block->at(targetIndex++) = value;
-                } else {
-                    m_proc.deleteValue(value);
-                    m_changed = true;
-                }
-            }
-            block->values().resize(targetIndex);
-        }
-
-        for (Variable* variable : m_proc.variables()) {
-            if (!liveVariables.contains(variable))
-                m_proc.deleteVariable(variable);
-        }
-    }
-
     void simplifySSA()
     {
         // This runs Aycock and Horspool's algorithm on our Phi functions [1]. For most CFG patterns,
         // this can take a suboptimal arrangement of Phi functions and make it optimal, as if you had
         // run Cytron, Ferrante, Rosen, Wegman, and Zadeck. It's only suboptimal for irreducible
@@ -2763,10 +2853,12 @@
     }
 
     Procedure& m_proc;
     InsertionSet m_insertionSet;
     BlockInsertionSet m_blockInsertionSet;
+    HashMap<ValueKey, Value*> m_valueForConstant;
+    BasicBlock* m_root { nullptr };
     BasicBlock* m_block { nullptr };
     unsigned m_index { 0 };
     Value* m_value { nullptr };
     Dominators* m_dominators { nullptr };
     PureCSE m_pureCSE;
