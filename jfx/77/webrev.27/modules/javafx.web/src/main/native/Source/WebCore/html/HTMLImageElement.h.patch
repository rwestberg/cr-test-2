diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLImageElement.h b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLImageElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLImageElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLImageElement.h
@@ -52,36 +52,36 @@
     WEBCORE_EXPORT unsigned width(bool ignorePendingStylesheets = false);
     WEBCORE_EXPORT unsigned height(bool ignorePendingStylesheets = false);
 
     WEBCORE_EXPORT int naturalWidth() const;
     WEBCORE_EXPORT int naturalHeight() const;
-    const AtomicString& currentSrc() const { return m_currentSrc; }
+    const AtomString& currentSrc() const { return m_currentSrc; }
 
     bool supportsFocus() const override;
     bool isFocusable() const override;
 
     bool isServerMap() const;
 
-    const AtomicString& altText() const;
+    const AtomString& altText() const;
 
     CompositeOperator compositeOperator() const { return m_compositeOperator; }
 
     CachedImage* cachedImage() const { return m_imageLoader.image(); }
 
     void setLoadManually(bool loadManually) { m_imageLoader.setLoadManually(loadManually); }
 
-    bool matchesUsemap(const AtomicStringImpl&) const;
+    bool matchesUsemap(const AtomStringImpl&) const;
     HTMLMapElement* associatedMapElement() const;
 
-    WEBCORE_EXPORT const AtomicString& alt() const;
+    WEBCORE_EXPORT const AtomString& alt() const;
 
     WEBCORE_EXPORT void setHeight(unsigned);
 
     URL src() const;
     void setSrc(const String&);
 
-    WEBCORE_EXPORT void setCrossOrigin(const AtomicString&);
+    WEBCORE_EXPORT void setCrossOrigin(const AtomString&);
     WEBCORE_EXPORT String crossOrigin() const;
 
     WEBCORE_EXPORT void setWidth(unsigned);
 
     WEBCORE_EXPORT int x() const;
@@ -102,14 +102,15 @@
     RefPtr<HTMLAttachmentElement> attachmentElement() const;
     const String& attachmentIdentifier() const;
 #endif
 
     bool hasPendingActivity() const { return m_imageLoader.hasPendingActivity(); }
+    size_t pendingDecodePromisesCountForTesting() const { return m_imageLoader.pendingDecodePromisesCountForTesting(); }
 
     bool canContainRangeEndPoint() const override { return false; }
 
-    const AtomicString& imageSourceURL() const override;
+    const AtomString& imageSourceURL() const override;
 
     bool hasShadowControls() const { return m_experimentalImageMenuEnabled; }
 
     HTMLPictureElement* pictureElement() const;
     void setPictureElement(HTMLPictureElement*);
@@ -127,13 +128,13 @@
     HTMLImageElement(const QualifiedName&, Document&, HTMLFormElement* = 0);
 
     void didMoveToNewDocument(Document& oldDocument, Document& newDocument) override;
 
 private:
-    void parseAttribute(const QualifiedName&, const AtomicString&) override;
+    void parseAttribute(const QualifiedName&, const AtomString&) override;
     bool isPresentationAttribute(const QualifiedName&) const override;
-    void collectStyleForPresentationAttribute(const QualifiedName&, const AtomicString&, MutableStyleProperties&) override;
+    void collectStyleForPresentationAttribute(const QualifiedName&, const AtomString&, MutableStyleProperties&) override;
 
     void didAttachRenderers() override;
     RenderPtr<RenderElement> createElementRenderer(RenderStyle&&, const RenderTreePosition&) override;
     void setBestFitURLAndDPRFromImageCandidate(const ImageCandidate&);
 
@@ -154,10 +155,12 @@
     bool isFormAssociatedElement() const final { return false; }
     FormNamedItem* asFormNamedItem() final { return this; }
     HTMLImageElement& asHTMLElement() final { return *this; }
     const HTMLImageElement& asHTMLElement() const final { return *this; }
 
+    bool isInteractiveContent() const final;
+
     void selectImageSource();
 
     ImageCandidate bestFitSourceFromPictureElement();
 
     void updateEditableImage();
@@ -171,22 +174,24 @@
     bool hasImageControls() const;
     bool childShouldCreateRenderer(const Node&) const override;
 #endif
 
     HTMLImageLoader m_imageLoader;
-    HTMLFormElement* m_form;
-    HTMLFormElement* m_formSetByParser;
+    WeakPtr<HTMLFormElement> m_form;
+    WeakPtr<HTMLFormElement> m_formSetByParser;
 
     CompositeOperator m_compositeOperator;
-    AtomicString m_bestFitImageURL;
-    AtomicString m_currentSrc;
-    AtomicString m_parsedUsemap;
+    AtomString m_bestFitImageURL;
+    AtomString m_currentSrc;
+    AtomString m_parsedUsemap;
     float m_imageDevicePixelRatio;
     bool m_experimentalImageMenuEnabled;
     bool m_hadNameBeforeAttributeChanged { false }; // FIXME: We only need this because parseAttribute() can't see the old value.
 
     RefPtr<EditableImageReference> m_editableImage;
+    WeakPtr<HTMLPictureElement> m_pictureElement;
+
 #if ENABLE(ATTACHMENT_ELEMENT)
     String m_pendingClonedAttachmentID;
 #endif
 
     friend class HTMLPictureElement;
