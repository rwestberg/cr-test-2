diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmCallee.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmCallee.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmCallee.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmCallee.h
@@ -27,42 +27,139 @@
 
 #if ENABLE(WEBASSEMBLY)
 
 #include "B3Compilation.h"
 #include "RegisterAtOffsetList.h"
+#include "WasmCompilationMode.h"
 #include "WasmFormat.h"
 #include "WasmIndexOrName.h"
+#include "WasmTierUpCount.h"
 #include <wtf/ThreadSafeRefCounted.h>
 
 namespace JSC { namespace Wasm {
 
 class Callee : public ThreadSafeRefCounted<Callee> {
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    static Ref<Callee> create(Wasm::Entrypoint&& entrypoint)
+    MacroAssemblerCodePtr<WasmEntryPtrTag> entrypoint() const { return m_entrypoint.compilation->code().retagged<WasmEntryPtrTag>(); }
+
+    RegisterAtOffsetList* calleeSaveRegisters() { return &m_entrypoint.calleeSaveRegisters; }
+    IndexOrName indexOrName() const { return m_indexOrName; }
+    CompilationMode compilationMode() const { return m_compilationMode; }
+
+    std::tuple<void*, void*> range() const
     {
-        Callee* callee = new Callee(WTFMove(entrypoint));
-        return adoptRef(*callee);
+        void* start = m_entrypoint.compilation->codeRef().executableMemory()->start().untaggedPtr();
+        void* end = m_entrypoint.compilation->codeRef().executableMemory()->end().untaggedPtr();
+        return { start, end };
     }
 
-    static Ref<Callee> create(Wasm::Entrypoint&& entrypoint, size_t index, std::pair<const Name*, RefPtr<NameSection>>&& name)
+    JS_EXPORT_PRIVATE virtual ~Callee();
+
+protected:
+    JS_EXPORT_PRIVATE Callee(Wasm::CompilationMode, Wasm::Entrypoint&&);
+    JS_EXPORT_PRIVATE Callee(Wasm::CompilationMode, Wasm::Entrypoint&&, size_t, std::pair<const Name*, RefPtr<NameSection>>&&);
+
+private:
+    CompilationMode m_compilationMode;
+    Wasm::Entrypoint m_entrypoint;
+    IndexOrName m_indexOrName;
+};
+
+class OMGCallee final : public Callee {
+public:
+    static Ref<OMGCallee> create(Wasm::Entrypoint&& entrypoint, size_t index, std::pair<const Name*, RefPtr<NameSection>>&& name, Vector<UnlinkedWasmToWasmCall>&& unlinkedCalls)
     {
-        Callee* callee = new Callee(WTFMove(entrypoint), index, WTFMove(name));
-        return adoptRef(*callee);
+        return adoptRef(*new OMGCallee(WTFMove(entrypoint), index, WTFMove(name), WTFMove(unlinkedCalls)));
     }
 
-    MacroAssemblerCodePtr<WasmEntryPtrTag> entrypoint() const { return m_entrypoint.compilation->code().retagged<WasmEntryPtrTag>(); }
+    Vector<UnlinkedWasmToWasmCall>& wasmToWasmCallsites() { return m_wasmToWasmCallsites; }
 
-    RegisterAtOffsetList* calleeSaveRegisters() { return &m_entrypoint.calleeSaveRegisters; }
-    IndexOrName indexOrName() const { return m_indexOrName; }
+private:
+    OMGCallee(Wasm::Entrypoint&& entrypoint, size_t index, std::pair<const Name*, RefPtr<NameSection>>&& name, Vector<UnlinkedWasmToWasmCall>&& unlinkedCalls)
+        : Callee(Wasm::CompilationMode::OMGMode, WTFMove(entrypoint), index, WTFMove(name))
+        , m_wasmToWasmCallsites(WTFMove(unlinkedCalls))
+    {
+    }
+
+    Vector<UnlinkedWasmToWasmCall> m_wasmToWasmCallsites;
+};
+
+class OMGForOSREntryCallee final : public Callee {
+public:
+    static Ref<OMGForOSREntryCallee> create(Wasm::Entrypoint&& entrypoint, size_t index, std::pair<const Name*, RefPtr<NameSection>>&& name, unsigned osrEntryScratchBufferSize, uint32_t loopIndex, Vector<UnlinkedWasmToWasmCall>&& unlinkedCalls)
+    {
+        return adoptRef(*new OMGForOSREntryCallee(WTFMove(entrypoint), index, WTFMove(name), osrEntryScratchBufferSize, loopIndex, WTFMove(unlinkedCalls)));
+    }
+
+    unsigned osrEntryScratchBufferSize() const { return m_osrEntryScratchBufferSize; }
+    uint32_t loopIndex() const { return m_loopIndex; }
+    Vector<UnlinkedWasmToWasmCall>& wasmToWasmCallsites() { return m_wasmToWasmCallsites; }
 
 private:
-    JS_EXPORT_PRIVATE Callee(Wasm::Entrypoint&&);
-    JS_EXPORT_PRIVATE Callee(Wasm::Entrypoint&&, size_t, std::pair<const Name*, RefPtr<NameSection>>&&);
+    OMGForOSREntryCallee(Wasm::Entrypoint&& entrypoint, size_t index, std::pair<const Name*, RefPtr<NameSection>>&& name, unsigned osrEntryScratchBufferSize, uint32_t loopIndex, Vector<UnlinkedWasmToWasmCall>&& unlinkedCalls)
+        : Callee(Wasm::CompilationMode::OMGForOSREntryMode, WTFMove(entrypoint), index, WTFMove(name))
+        , m_wasmToWasmCallsites(WTFMove(unlinkedCalls))
+        , m_osrEntryScratchBufferSize(osrEntryScratchBufferSize)
+        , m_loopIndex(loopIndex)
+    {
+    }
 
-    Wasm::Entrypoint m_entrypoint;
-    IndexOrName m_indexOrName;
+    Vector<UnlinkedWasmToWasmCall> m_wasmToWasmCallsites;
+    unsigned m_osrEntryScratchBufferSize;
+    uint32_t m_loopIndex;
+};
+
+class EmbedderEntrypointCallee final : public Callee {
+public:
+    static Ref<EmbedderEntrypointCallee> create(Wasm::Entrypoint&& entrypoint)
+    {
+        return adoptRef(*new EmbedderEntrypointCallee(WTFMove(entrypoint)));
+    }
+
+private:
+    EmbedderEntrypointCallee(Wasm::Entrypoint&& entrypoint)
+        : Callee(Wasm::CompilationMode::EmbedderEntrypointMode, WTFMove(entrypoint))
+    {
+    }
+};
+
+class BBQCallee final : public Callee {
+public:
+    static Ref<BBQCallee> create(Wasm::Entrypoint&& entrypoint, size_t index, std::pair<const Name*, RefPtr<NameSection>>&& name, std::unique_ptr<TierUpCount>&& tierUpCount)
+    {
+        return adoptRef(*new BBQCallee(WTFMove(entrypoint), index, WTFMove(name), WTFMove(tierUpCount)));
+    }
+
+    OMGForOSREntryCallee* osrEntryCallee() { return m_osrEntryCallee.get(); }
+    void setOSREntryCallee(Ref<OMGForOSREntryCallee>&& osrEntryCallee)
+    {
+        m_osrEntryCallee = WTFMove(osrEntryCallee);
+    }
+
+    bool didStartCompilingOSREntryCallee() const { return m_didStartCompilingOSREntryCallee; }
+    void setDidStartCompilingOSREntryCallee(bool value) { m_didStartCompilingOSREntryCallee = value; }
+
+    OMGCallee* replacement() { return m_replacement.get(); }
+    void setReplacement(Ref<OMGCallee>&& replacement)
+    {
+        m_replacement = WTFMove(replacement);
+    }
+
+    TierUpCount* tierUpCount() { return m_tierUpCount.get(); }
+
+private:
+    BBQCallee(Wasm::Entrypoint&& entrypoint, size_t index, std::pair<const Name*, RefPtr<NameSection>>&& name, std::unique_ptr<TierUpCount>&& tierUpCount)
+        : Callee(Wasm::CompilationMode::BBQMode, WTFMove(entrypoint), index, WTFMove(name))
+        , m_tierUpCount(WTFMove(tierUpCount))
+    {
+    }
+
+    RefPtr<OMGForOSREntryCallee> m_osrEntryCallee;
+    RefPtr<OMGCallee> m_replacement;
+    std::unique_ptr<TierUpCount> m_tierUpCount;
+    bool m_didStartCompilingOSREntryCallee { false };
 };
 
 } } // namespace JSC::Wasm
 
 #endif // ENABLE(WEBASSEMBLY)
