diff a/modules/javafx.web/src/main/native/Source/WebCore/testing/MockPaymentCoordinator.h b/modules/javafx.web/src/main/native/Source/WebCore/testing/MockPaymentCoordinator.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/testing/MockPaymentCoordinator.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/testing/MockPaymentCoordinator.h
@@ -58,18 +58,21 @@
     const Vector<MockPaymentError>& errors() const { return m_errors; }
     const Vector<ApplePayShippingMethod>& shippingMethods() const { return m_shippingMethods; }
     const MockPaymentContactFields& requiredBillingContactFields() const { return m_requiredBillingContactFields; }
     const MockPaymentContactFields& requiredShippingContactFields() const { return m_requiredShippingContactFields; }
 
+    bool supportsUnrestrictedApplePay() const final { return m_supportsUnrestrictedApplePay; }
+    void setSupportsUnrestrictedApplePay(bool supports) { m_supportsUnrestrictedApplePay = supports; }
+
     void ref() const { }
     void deref() const { }
 
 private:
     Optional<String> validatedPaymentNetwork(const String&) final;
     bool canMakePayments() final;
-    void canMakePaymentsWithActiveCard(const String&, const String&, WTF::Function<void(bool)>&&);
-    void openPaymentSetup(const String&, const String&, WTF::Function<void(bool)>&&);
+    void canMakePaymentsWithActiveCard(const String&, const String&, CompletionHandler<void(bool)>&&) final;
+    void openPaymentSetup(const String&, const String&, CompletionHandler<void(bool)>&&) final;
     bool showPaymentUI(const URL&, const Vector<URL>&, const ApplePaySessionPaymentRequest&) final;
     void completeMerchantValidation(const PaymentMerchantSession&) final;
     void completeShippingMethodSelection(Optional<ShippingMethodUpdate>&&) final;
     void completeShippingContactSelection(Optional<ShippingContactUpdate>&&) final;
     void completePaymentMethodSelection(Optional<PaymentMethodUpdate>&&) final;
@@ -78,10 +81,12 @@
     void cancelPaymentSession() final;
     void paymentCoordinatorDestroyed() final;
 
     bool isMockPaymentCoordinator() const final { return true; }
 
+    bool isAlwaysOnLoggingAllowed() const final { return true; }
+
     void updateTotalAndLineItems(const ApplePaySessionPaymentRequest::TotalAndLineItems&);
 
     Page& m_page;
     bool m_canMakePayments { true };
     bool m_canMakePaymentsWithActiveCard { true };
@@ -91,10 +96,11 @@
     Vector<MockPaymentError> m_errors;
     Vector<ApplePayShippingMethod> m_shippingMethods;
     HashSet<String, ASCIICaseInsensitiveHash> m_availablePaymentNetworks;
     MockPaymentContactFields m_requiredBillingContactFields;
     MockPaymentContactFields m_requiredShippingContactFields;
+    bool m_supportsUnrestrictedApplePay { true };
 };
 
 } // namespace WebCore
 
 SPECIALIZE_TYPE_TRAITS_BEGIN(WebCore::MockPaymentCoordinator)
