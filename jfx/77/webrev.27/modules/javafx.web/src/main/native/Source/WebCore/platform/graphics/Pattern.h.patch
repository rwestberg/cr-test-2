diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Pattern.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Pattern.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Pattern.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Pattern.h
@@ -36,10 +36,14 @@
 typedef struct CGPattern* CGPatternRef;
 typedef CGPatternRef PlatformPatternPtr;
 #elif USE(DIRECT2D)
 interface ID2D1BitmapBrush;
 typedef ID2D1BitmapBrush* PlatformPatternPtr;
+namespace WebCore {
+class PlatformContextDirect2D;
+}
+typedef WebCore::PlatformContextDirect2D PlatformGraphicsContext;
 #elif USE(CAIRO)
 typedef struct _cairo_pattern cairo_pattern_t;
 typedef cairo_pattern_t* PlatformPatternPtr;
 #elif USE(WINGDI)
 typedef void* PlatformPatternPtr;
@@ -64,10 +68,11 @@
 
     // Pattern space is an abstract space that maps to the default user space by the transformation 'userSpaceTransformation'
 #if !USE(DIRECT2D)
     PlatformPatternPtr createPlatformPattern(const AffineTransform& userSpaceTransformation) const;
 #else
+    PlatformPatternPtr createPlatformPattern(PlatformGraphicsContext&, float alpha, const AffineTransform& userSpaceTransformation) const;
     PlatformPatternPtr createPlatformPattern(const GraphicsContext&, float alpha, const AffineTransform& userSpaceTransformation) const;
 #endif
     void setPatternSpaceTransform(const AffineTransform& patternSpaceTransformation);
     const AffineTransform& patternSpaceTransform() const { return m_patternSpaceTransformation; };
     bool repeatX() const { return m_repeatX; }
