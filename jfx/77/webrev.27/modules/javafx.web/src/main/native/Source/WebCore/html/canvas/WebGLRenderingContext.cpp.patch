diff a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLRenderingContext.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLRenderingContext.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLRenderingContext.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLRenderingContext.cpp
@@ -62,13 +62,16 @@
 #include <JavaScriptCore/GenericTypedArrayViewInlines.h>
 #include <JavaScriptCore/HeapInlines.h>
 #include <JavaScriptCore/JSCJSValueInlines.h>
 #include <JavaScriptCore/JSCellInlines.h>
 #include <JavaScriptCore/JSGenericTypedArrayViewInlines.h>
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(WebGLRenderingContext);
+
 std::unique_ptr<WebGLRenderingContext> WebGLRenderingContext::create(CanvasBase& canvas, GraphicsContext3DAttributes attributes)
 {
     auto renderingContext = std::unique_ptr<WebGLRenderingContext>(new WebGLRenderingContext(canvas, attributes));
 
     InspectorInstrumentation::didCreateCanvasRenderingContext(*renderingContext);
@@ -111,11 +114,11 @@
         return nullptr;
 
 #define ENABLE_IF_REQUESTED(type, variable, nameLiteral, canEnable) \
     if (equalIgnoringASCIICase(name, nameLiteral)) { \
         if (!variable) { \
-            variable = (canEnable) ? std::make_unique<type>(*this) : nullptr; \
+            variable = (canEnable) ? makeUnique<type>(*this) : nullptr; \
             if (variable != nullptr) \
                 InspectorInstrumentation::didEnableExtension(*this, name); \
         } \
         return variable.get(); \
     }
@@ -127,11 +130,11 @@
         if (!m_extShaderTextureLOD) {
             if (!(m_context->getExtensions().supports("GL_EXT_shader_texture_lod"_s) || m_context->getExtensions().supports("GL_ARB_shader_texture_lod"_s)))
                 m_extShaderTextureLOD = nullptr;
             else {
                 m_context->getExtensions().ensureEnabled("GL_EXT_shader_texture_lod"_s);
-                m_extShaderTextureLOD = std::make_unique<EXTShaderTextureLOD>(*this);
+                m_extShaderTextureLOD = makeUnique<EXTShaderTextureLOD>(*this);
                 InspectorInstrumentation::didEnableExtension(*this, name);
             }
         }
         return m_extShaderTextureLOD.get();
     }
@@ -154,11 +157,11 @@
         if (!m_webglDrawBuffers) {
             if (!supportsDrawBuffers())
                 m_webglDrawBuffers = nullptr;
             else {
                 m_context->getExtensions().ensureEnabled("GL_EXT_draw_buffers"_s);
-                m_webglDrawBuffers = std::make_unique<WebGLDrawBuffers>(*this);
+                m_webglDrawBuffers = makeUnique<WebGLDrawBuffers>(*this);
                 InspectorInstrumentation::didEnableExtension(*this, name);
             }
         }
         return m_webglDrawBuffers.get();
     }
@@ -166,11 +169,11 @@
         if (!m_angleInstancedArrays) {
             if (!ANGLEInstancedArrays::supported(*this))
                 m_angleInstancedArrays = nullptr;
             else {
                 m_context->getExtensions().ensureEnabled("GL_ANGLE_instanced_arrays"_s);
-                m_angleInstancedArrays = std::make_unique<ANGLEInstancedArrays>(*this);
+                m_angleInstancedArrays = makeUnique<ANGLEInstancedArrays>(*this);
                 InspectorInstrumentation::didEnableExtension(*this, name);
             }
         }
         return m_angleInstancedArrays.get();
     }
@@ -416,10 +419,12 @@
     case GraphicsContext3D::ALIASED_LINE_WIDTH_RANGE:
         return getWebGLFloatArrayParameter(pname);
     case GraphicsContext3D::ALIASED_POINT_SIZE_RANGE:
         return getWebGLFloatArrayParameter(pname);
     case GraphicsContext3D::ALPHA_BITS:
+        if (!m_framebufferBinding && !m_attributes.alpha)
+            return 0;
         return getIntParameter(pname);
     case GraphicsContext3D::ARRAY_BUFFER_BINDING:
         return m_boundArrayBuffer;
     case GraphicsContext3D::BLEND:
         return getBooleanParameter(pname);
