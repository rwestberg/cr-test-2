diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Completion.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Completion.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Completion.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Completion.h
@@ -22,14 +22,16 @@
 
 #pragma once
 
 #include "CallData.h"
 #include "JSCJSValue.h"
+#include <wtf/FileSystem.h>
 #include <wtf/NakedPtr.h>
 
 namespace JSC {
 
+class BytecodeCacheError;
 class CachedBytecode;
 class Exception;
 class ExecState;
 class JSObject;
 class ParserError;
@@ -40,12 +42,12 @@
 
 JS_EXPORT_PRIVATE bool checkSyntax(VM&, const SourceCode&, ParserError&);
 JS_EXPORT_PRIVATE bool checkSyntax(ExecState*, const SourceCode&, JSValue* exception = 0);
 JS_EXPORT_PRIVATE bool checkModuleSyntax(ExecState*, const SourceCode&, ParserError&);
 
-JS_EXPORT_PRIVATE CachedBytecode generateBytecode(VM&, const SourceCode&, ParserError&);
-JS_EXPORT_PRIVATE CachedBytecode generateModuleBytecode(VM&, const SourceCode&, ParserError&);
+JS_EXPORT_PRIVATE RefPtr<CachedBytecode> generateProgramBytecode(VM&, const SourceCode&, FileSystem::PlatformFileHandle fd, BytecodeCacheError&);
+JS_EXPORT_PRIVATE RefPtr<CachedBytecode> generateModuleBytecode(VM&, const SourceCode&, FileSystem::PlatformFileHandle fd, BytecodeCacheError&);
 
 JS_EXPORT_PRIVATE JSValue evaluate(ExecState*, const SourceCode&, JSValue thisValue, NakedPtr<Exception>& returnedException);
 inline JSValue evaluate(ExecState* exec, const SourceCode& sourceCode, JSValue thisValue = JSValue())
 {
     NakedPtr<Exception> unused;
