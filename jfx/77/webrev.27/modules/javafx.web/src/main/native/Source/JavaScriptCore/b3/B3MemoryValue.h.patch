diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3MemoryValue.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3MemoryValue.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3MemoryValue.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3MemoryValue.h
@@ -72,36 +72,37 @@
 
     bool isStore() const { return B3::isStore(opcode()); }
     bool isLoad() const { return B3::isLoad(opcode()); }
 
     bool hasFence() const { return !!fenceRange(); }
-    bool isExotic() const { return hasFence() || isAtomic(opcode()); }
+    bool isExotic() const { return hasFence() || isAtom(opcode()); }
 
     Type accessType() const;
     Bank accessBank() const;
     size_t accessByteSize() const;
 
     Width accessWidth() const;
 
     bool isCanonicalWidth() const { return B3::isCanonicalWidth(accessWidth()); }
 
+    B3_SPECIALIZE_VALUE_FOR_NON_VARARGS_CHILDREN
+
 protected:
     void dumpMeta(CommaPrinter&, PrintStream&) const override;
 
-    Value* cloneImpl() const override;
-
     template<typename Int, typename = IsLegalOffset<Int>, typename... Arguments>
-    MemoryValue(CheckedOpcodeTag, Kind kind, Type type, Origin origin, Int offset, HeapRange range, HeapRange fenceRange, Arguments... arguments)
-        : Value(CheckedOpcode, kind, type, origin, arguments...)
+    MemoryValue(CheckedOpcodeTag, Kind kind, Type type, NumChildren numChildren, Origin origin, Int offset, HeapRange range, HeapRange fenceRange, Arguments... arguments)
+        : Value(CheckedOpcode, kind, type, numChildren, origin, static_cast<Value*>(arguments)...)
         , m_offset(offset)
         , m_range(range)
         , m_fenceRange(fenceRange)
     {
     }
 
 private:
     friend class Procedure;
+    friend class Value;
 
     bool isLegalOffsetImpl(int32_t offset) const;
     bool isLegalOffsetImpl(int64_t offset) const;
 
     enum MemoryValueLoad { MemoryValueLoadTag };
