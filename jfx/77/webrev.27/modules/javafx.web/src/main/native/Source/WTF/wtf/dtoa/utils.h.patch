diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/utils.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/utils.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/utils.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/utils.h
@@ -169,150 +169,150 @@
 static const int kCharSize = sizeof(char);
 
 // Returns the maximum of the two parameters.
 template <typename T>
 static T Max(T a, T b) {
-        return a < b ? b : a;
+  return a < b ? b : a;
 }
 
 
 // Returns the minimum of the two parameters.
 template <typename T>
 static T Min(T a, T b) {
-        return a < b ? a : b;
+  return a < b ? a : b;
 }
 
 
 inline int StrLength(const char* string) {
-        size_t length = strlen(string);
-        ASSERT(length == static_cast<size_t>(static_cast<int>(length)));
-        return static_cast<int>(length);
+  size_t length = strlen(string);
+  ASSERT(length == static_cast<size_t>(static_cast<int>(length)));
+  return static_cast<int>(length);
 }
 
 // This is a simplified version of V8's Vector class.
 template <typename T>
 class BufferReference {
-    public:
-        BufferReference() : start_(NULL), length_(0) {}
+ public:
+  BufferReference() : start_(NULL), length_(0) {}
   BufferReference(T* data, int len) : start_(data), length_(len) {
     ASSERT(len == 0 || (len > 0 && data != NULL));
-        }
+  }
 
   // Returns a BufferReference using the same backing storage as this one,
-        // spanning from and including 'from', to but not including 'to'.
-        BufferReference<T> SubBufferReference(int from, int to) {
-            ASSERT(to <= length_);
+  // spanning from and including 'from', to but not including 'to'.
+  BufferReference<T> SubBufferReference(int from, int to) {
+    ASSERT(to <= length_);
     ASSERT(from < to);
-            ASSERT(0 <= from);
-            return BufferReference<T>(start() + from, to - from);
-        }
+    ASSERT(0 <= from);
+    return BufferReference<T>(start() + from, to - from);
+  }
 
   // Returns the length of the BufferReference.
-        int length() const { return length_; }
+  int length() const { return length_; }
 
   // Returns whether or not the BufferReference is empty.
-        bool is_empty() const { return length_ == 0; }
+  bool is_empty() const { return length_ == 0; }
 
   // Returns the pointer to the start of the data in the BufferReference.
-        T* start() const { return start_; }
+  T* start() const { return start_; }
 
   // Access individual BufferReference elements - checks bounds in debug mode.
-        T& operator[](int index) const {
-            ASSERT(0 <= index && index < length_);
-            return start_[index];
-        }
+  T& operator[](int index) const {
+    ASSERT(0 <= index && index < length_);
+    return start_[index];
+  }
 
-        T& first() { return start_[0]; }
+  T& first() { return start_[0]; }
 
-        T& last() { return start_[length_ - 1]; }
+  T& last() { return start_[length_ - 1]; }
 
-    private:
-        T* start_;
-        int length_;
+ private:
+  T* start_;
+  int length_;
 };
 
 
 // Helper class for building result strings in a character buffer. The
 // purpose of the class is to use safe operations that checks the
 // buffer bounds on all operations in debug mode.
 class StringBuilder {
-    public:
+ public:
   StringBuilder(char* buffer, int buffer_size)
       : buffer_(buffer, buffer_size), position_(0) { }
 
-        ~StringBuilder() { if (!is_finalized()) Finalize(); }
-
-        int size() const { return buffer_.length(); }
-
-        // Get the current position in the builder.
-        int position() const {
-            ASSERT(!is_finalized());
-            return position_;
-        }
-
-        // Reset the position.
-        void Reset() { position_ = 0; }
-
-        // Add a single character to the builder. It is not allowed to add
-        // 0-characters; use the Finalize() method to terminate the string
-        // instead.
-        void AddCharacter(char c) {
-            ASSERT(c != '\0');
-            ASSERT(!is_finalized() && position_ < buffer_.length());
-            buffer_[position_++] = c;
-        }
-
-        // Add an entire string to the builder. Uses strlen() internally to
-        // compute the length of the input string.
-        void AddString(const char* s) {
-            AddSubstring(s, StrLength(s));
-        }
-
-        // Add the first 'n' characters of the given string 's' to the
-        // builder. The input string must have enough characters.
-        void AddSubstring(const char* s, int n) {
-            ASSERT(!is_finalized() && position_ + n < buffer_.length());
-            ASSERT_WITH_SECURITY_IMPLICATION(static_cast<size_t>(n) <= strlen(s));
+  ~StringBuilder() { if (!is_finalized()) Finalize(); }
+
+  int size() const { return buffer_.length(); }
+
+  // Get the current position in the builder.
+  int position() const {
+    ASSERT(!is_finalized());
+    return position_;
+  }
+
+  // Reset the position.
+  void Reset() { position_ = 0; }
+
+  // Add a single character to the builder. It is not allowed to add
+  // 0-characters; use the Finalize() method to terminate the string
+  // instead.
+  void AddCharacter(char c) {
+    ASSERT(c != '\0');
+    ASSERT(!is_finalized() && position_ < buffer_.length());
+    buffer_[position_++] = c;
+  }
+
+  // Add an entire string to the builder. Uses strlen() internally to
+  // compute the length of the input string.
+  void AddString(const char* s) {
+    AddSubstring(s, StrLength(s));
+  }
+
+  // Add the first 'n' characters of the given string 's' to the
+  // builder. The input string must have enough characters.
+  void AddSubstring(const char* s, int n) {
+    ASSERT(!is_finalized() && position_ + n < buffer_.length());
+    ASSERT_WITH_SECURITY_IMPLICATION(static_cast<size_t>(n) <= strlen(s));
     memmove(&buffer_[position_], s, n * kCharSize);
-            position_ += n;
-        }
+    position_ += n;
+  }
 
 
-        // Add character padding to the builder. If count is non-positive,
-        // nothing is added to the builder.
-        void AddPadding(char c, int count) {
-            for (int i = 0; i < count; i++) {
-                AddCharacter(c);
-            }
-        }
+  // Add character padding to the builder. If count is non-positive,
+  // nothing is added to the builder.
+  void AddPadding(char c, int count) {
+    for (int i = 0; i < count; i++) {
+      AddCharacter(c);
+    }
+  }
 
   void RemoveCharacters(int start, int end) {
-            ASSERT(start >= 0);
-            ASSERT(end >= 0);
-            ASSERT(start <= end);
-            ASSERT(end <= position_);
-            std::memmove(&buffer_[start], &buffer_[end], position_ - end);
-            position_ -= end - start;
-        }
-
-        // Finalize the string by 0-terminating it and returning the buffer.
-        char* Finalize() {
-            ASSERT(!is_finalized() && position_ < buffer_.length());
-            buffer_[position_] = '\0';
-            // Make sure nobody managed to add a 0-character to the
-            // buffer while building the string.
-            ASSERT(strlen(buffer_.start()) == static_cast<size_t>(position_));
-            position_ = -1;
-            ASSERT(is_finalized());
-            return buffer_.start();
-        }
-
-    private:
-        BufferReference<char> buffer_;
-        int position_;
-
-        bool is_finalized() const { return position_ < 0; }
+    ASSERT(start >= 0);
+    ASSERT(end >= 0);
+    ASSERT(start <= end);
+    ASSERT(end <= position_);
+    std::memmove(&buffer_[start], &buffer_[end], position_ - end);
+    position_ -= end - start;
+  }
+
+  // Finalize the string by 0-terminating it and returning the buffer.
+  char* Finalize() {
+    ASSERT(!is_finalized() && position_ < buffer_.length());
+    buffer_[position_] = '\0';
+    // Make sure nobody managed to add a 0-character to the
+    // buffer while building the string.
+    ASSERT(strlen(buffer_.start()) == static_cast<size_t>(position_));
+    position_ = -1;
+    ASSERT(is_finalized());
+    return buffer_.start();
+  }
+
+ private:
+  BufferReference<char> buffer_;
+  int position_;
+
+  bool is_finalized() const { return position_ < 0; }
 
   DC_DISALLOW_IMPLICIT_CONSTRUCTORS(StringBuilder);
 };
 
 // The type-based aliasing rule allows the compiler to assume that pointers of
@@ -339,28 +339,28 @@
 // you can use BitCast to cast one pointer type to another.  This confuses gcc
 // enough that it can no longer see that you have cast one pointer type to
 // another thus avoiding the warning.
 template <class Dest, class Source>
 inline Dest BitCast(const Source& source) {
-        // Compile time assertion: sizeof(Dest) == sizeof(Source)
-        // A compile error here means your Dest and Source have different sizes.
+  // Compile time assertion: sizeof(Dest) == sizeof(Source)
+  // A compile error here means your Dest and Source have different sizes.
 #if __cplusplus >= 201103L
   static_assert(sizeof(Dest) == sizeof(Source),
                 "source and destination size mismatch");
 #else
   typedef char VerifySizesAreEqual[sizeof(Dest) == sizeof(Source) ? 1 : -1];
 #endif
 
-        Dest dest;
+  Dest dest;
   memmove(&dest, &source, sizeof(dest));
-        return dest;
+  return dest;
 }
 
 template <class Dest, class Source>
 inline Dest BitCast(Source* source) {
-        return BitCast<Dest>(reinterpret_cast<uintptr_t>(source));
+  return BitCast<Dest>(reinterpret_cast<uintptr_t>(source));
 }
 
 }  // namespace double_conversion
-} // namespace WTF
+}  // namespace WTF
 
 #endif  // DOUBLE_CONVERSION_UTILS_H_
