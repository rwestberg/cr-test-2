diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dynbench.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dynbench.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dynbench.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dynbench.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2015 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -32,10 +32,11 @@
 #include "JSGlobalObject.h"
 #include "JSLock.h"
 #include "JSObject.h"
 #include "VM.h"
 #include <wtf/MainThread.h>
+#include <wtf/text/StringCommon.h>
 
 using namespace JSC;
 
 namespace {
 
@@ -52,11 +53,11 @@
     } while (false)
 
 template<typename Callback>
 NEVER_INLINE void benchmarkImpl(const char* name, unsigned iterationCount, const Callback& callback)
 {
-    if (nameFilter && !strcasestr(name, nameFilter))
+    if (nameFilter && WTF::findIgnoringASCIICaseWithoutLength(name, nameFilter) == WTF::notFound)
         return;
 
     if (requestedIterationCount)
         iterationCount = requestedIterationCount;
 
@@ -87,26 +88,26 @@
     }
 
     WTF::initializeMainThread();
     JSC::initializeThreading();
 
-    VM* vm = &VM::create(LargeHeap).leakRef();
+    VM& vm = VM::create(LargeHeap).leakRef();
     {
         JSLockHolder locker(vm);
 
         JSGlobalObject* globalObject =
-            JSGlobalObject::create(*vm, JSGlobalObject::createStructure(*vm, jsNull()));
+            JSGlobalObject::create(vm, JSGlobalObject::createStructure(vm, jsNull()));
         ExecState* exec = globalObject->globalExec();
 
-        Identifier identF = Identifier::fromString(exec, "f");
-        Identifier identG = Identifier::fromString(exec, "g");
+        Identifier identF = Identifier::fromString(vm, "f");
+        Identifier identG = Identifier::fromString(vm, "g");
 
         Structure* objectStructure =
-            JSFinalObject::createStructure(*vm, globalObject, globalObject->objectPrototype(), 2);
+            JSFinalObject::createStructure(vm, globalObject, globalObject->objectPrototype(), 2);
 
         // Non-strict dynamic get by id:
-        JSValue object = JSFinalObject::create(*vm, objectStructure);
+        JSValue object = JSFinalObject::create(vm, objectStructure);
         {
             PutPropertySlot slot(object, false, PutPropertySlot::PutById);
             object.putInline(exec, identF, jsNumber(42), slot);
         }
         {
@@ -124,11 +125,11 @@
                     CHECK(result == jsNumber(43));
                 }
             });
 
         // Non-strict dynamic put by id replace:
-        object = JSFinalObject::create(*vm, objectStructure);
+        object = JSFinalObject::create(vm, objectStructure);
         {
             PutPropertySlot slot(object, false, PutPropertySlot::PutById);
             object.putInline(exec, identF, jsNumber(42), slot);
         }
         {
@@ -155,11 +156,11 @@
         benchmarkImpl(
             "Non Strict Dynamic Allocation and Put By Id Transition",
             1000000,
             [&] (unsigned iterationCount) {
                 for (unsigned i = iterationCount; i--;) {
-                    JSValue object = JSFinalObject::create(*vm, objectStructure);
+                    JSValue object = JSFinalObject::create(vm, objectStructure);
                     {
                         PutPropertySlot slot(object, false, PutPropertySlot::PutById);
                         object.putInline(exec, identF, jsNumber(i), slot);
                     }
                     {
@@ -168,11 +169,11 @@
                     }
                 }
             });
 
         // Non-strict dynamic get by id with dynamic store context:
-        object = JSFinalObject::create(*vm, objectStructure);
+        object = JSFinalObject::create(vm, objectStructure);
         {
             PutPropertySlot slot(object, false);
             object.putInline(exec, identF, jsNumber(42), slot);
         }
         {
@@ -190,11 +191,11 @@
                     CHECK(result == jsNumber(43));
                 }
             });
 
         // Non-strict dynamic put by id replace with dynamic store context:
-        object = JSFinalObject::create(*vm, objectStructure);
+        object = JSFinalObject::create(vm, objectStructure);
         {
             PutPropertySlot slot(object, false);
             object.putInline(exec, identF, jsNumber(42), slot);
         }
         {
@@ -221,11 +222,11 @@
         benchmarkImpl(
             "Non Strict Dynamic Allocation and Put By Id Transition With Dynamic Store Context",
             1000000,
             [&] (unsigned iterationCount) {
                 for (unsigned i = iterationCount; i--;) {
-                    JSValue object = JSFinalObject::create(*vm, objectStructure);
+                    JSValue object = JSFinalObject::create(vm, objectStructure);
                     {
                         PutPropertySlot slot(object, false);
                         object.putInline(exec, identF, jsNumber(i), slot);
                     }
                     {
