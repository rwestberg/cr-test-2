diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLOperations.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLOperations.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLOperations.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLOperations.cpp
@@ -276,11 +276,11 @@
     }
 
     case PhantomCreateRest:
     case PhantomDirectArguments:
     case PhantomClonedArguments: {
-        if (!materialization->origin().inlineCallFrame) {
+        if (!materialization->origin().inlineCallFrame()) {
             switch (materialization->type()) {
             case PhantomDirectArguments:
                 return DirectArguments::createByCopying(exec);
             case PhantomClonedArguments:
                 return ClonedArguments::createWithMachineFrame(exec, exec, ArgumentsMode::Cloned);
@@ -301,34 +301,34 @@
             }
         }
 
         // First figure out the argument count. If there isn't one then we represent the machine frame.
         unsigned argumentCount = 0;
-        if (materialization->origin().inlineCallFrame->isVarargs()) {
+        if (materialization->origin().inlineCallFrame()->isVarargs()) {
             for (unsigned i = materialization->properties().size(); i--;) {
                 const ExitPropertyValue& property = materialization->properties()[i];
                 if (property.location() != PromotedLocationDescriptor(ArgumentCountPLoc))
                     continue;
                 argumentCount = JSValue::decode(values[i]).asUInt32();
                 break;
             }
         } else
-            argumentCount = materialization->origin().inlineCallFrame->argumentCountIncludingThis;
+            argumentCount = materialization->origin().inlineCallFrame()->argumentCountIncludingThis;
         RELEASE_ASSERT(argumentCount);
 
         JSFunction* callee = nullptr;
-        if (materialization->origin().inlineCallFrame->isClosureCall) {
+        if (materialization->origin().inlineCallFrame()->isClosureCall) {
             for (unsigned i = materialization->properties().size(); i--;) {
                 const ExitPropertyValue& property = materialization->properties()[i];
                 if (property.location() != PromotedLocationDescriptor(ArgumentsCalleePLoc))
                     continue;
 
                 callee = jsCast<JSFunction*>(JSValue::decode(values[i]));
                 break;
             }
         } else
-            callee = materialization->origin().inlineCallFrame->calleeConstant();
+            callee = materialization->origin().inlineCallFrame()->calleeConstant();
         RELEASE_ASSERT(callee);
 
         CodeBlock* codeBlock = baselineCodeBlockForOriginAndBaselineCodeBlock(
             materialization->origin(), exec->codeBlock()->baselineAlternative());
 
@@ -472,11 +472,11 @@
         RELEASE_ASSERT(immutableButterfly);
 
         // For now, we use array allocation profile in the actual CodeBlock. It is OK since current NewArrayBuffer
         // and PhantomNewArrayBuffer are always bound to a specific op_new_array_buffer.
         CodeBlock* codeBlock = baselineCodeBlockForOriginAndBaselineCodeBlock(materialization->origin(), exec->codeBlock()->baselineAlternative());
-        const Instruction* currentInstruction = codeBlock->instructions().at(materialization->origin().bytecodeIndex).ptr();
+        const Instruction* currentInstruction = codeBlock->instructions().at(materialization->origin().bytecodeIndex()).ptr();
         if (!currentInstruction->is<OpNewArrayBuffer>()) {
             // This case can happen if Object.keys, an OpCall is first converted into a NewArrayBuffer which is then converted into a PhantomNewArrayBuffer.
             // There is no need to update the array allocation profile in that case.
             RELEASE_ASSERT(currentInstruction->is<OpCall>());
             Structure* structure = exec->lexicalGlobalObject()->arrayStructureForIndexingTypeDuringAllocation(immutableButterfly->indexingMode());
