diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/DocumentMarkerController.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/DocumentMarkerController.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/DocumentMarkerController.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/DocumentMarkerController.h
@@ -46,22 +46,26 @@
 
     DocumentMarkerController(Document&);
     ~DocumentMarkerController();
 
     void detach();
-    void addMarker(Range&, DocumentMarker::MarkerType);
-    void addMarker(Range&, DocumentMarker::MarkerType, const String& description);
+    WEBCORE_EXPORT void addMarker(Range&, DocumentMarker::MarkerType);
+    WEBCORE_EXPORT void addMarker(Range&, DocumentMarker::MarkerType, const String& description);
     void addMarkerToNode(Node&, unsigned startOffset, unsigned length, DocumentMarker::MarkerType);
     void addMarkerToNode(Node&, unsigned startOffset, unsigned length, DocumentMarker::MarkerType, DocumentMarker::Data&&);
     WEBCORE_EXPORT void addTextMatchMarker(const Range&, bool activeMatch);
 #if PLATFORM(IOS_FAMILY)
     void addMarker(Range&, DocumentMarker::MarkerType, const String& description, const Vector<String>& interpretations, const RetainPtr<id>& metadata);
     void addDictationPhraseWithAlternativesMarker(Range&, const Vector<String>& interpretations);
     void addDictationResultMarker(Range&, const RetainPtr<id>& metadata);
 #endif
     void addDraggedContentMarker(Range&);
 
+#if ENABLE(PLATFORM_DRIVEN_TEXT_CHECKING)
+    WEBCORE_EXPORT void addPlatformTextCheckingMarker(Range&, const String& key, const String& value);
+#endif
+
     void copyMarkers(Node& srcNode, unsigned startOffset, int length, Node& dstNode, int delta);
     bool hasMarkers() const
     {
         ASSERT(m_markers.isEmpty() == !m_possiblyExistingMarkerTypes.containsAny(DocumentMarker::allMarkers()));
         return !m_markers.isEmpty();
@@ -70,12 +74,15 @@
 
     // When a marker partially overlaps with range, if removePartiallyOverlappingMarkers is true, we completely
     // remove the marker. If the argument is false, we will adjust the span of the marker so that it retains
     // the portion that is outside of the range.
     enum RemovePartiallyOverlappingMarkerOrNot { DoNotRemovePartiallyOverlappingMarker, RemovePartiallyOverlappingMarker };
-    void removeMarkers(Range&, OptionSet<DocumentMarker::MarkerType> = DocumentMarker::allMarkers(), RemovePartiallyOverlappingMarkerOrNot = DoNotRemovePartiallyOverlappingMarker);
-    void removeMarkers(Node&, unsigned startOffset, int length, OptionSet<DocumentMarker::MarkerType> = DocumentMarker::allMarkers(),  RemovePartiallyOverlappingMarkerOrNot = DoNotRemovePartiallyOverlappingMarker);
+    WEBCORE_EXPORT void removeMarkers(Range&, OptionSet<DocumentMarker::MarkerType> = DocumentMarker::allMarkers(), RemovePartiallyOverlappingMarkerOrNot = DoNotRemovePartiallyOverlappingMarker);
+    void removeMarkers(Node&, unsigned startOffset, int length, OptionSet<DocumentMarker::MarkerType> = DocumentMarker::allMarkers(), std::function<bool(DocumentMarker*)> filterFunction = nullptr, RemovePartiallyOverlappingMarkerOrNot = DoNotRemovePartiallyOverlappingMarker);
+
+    // Return false from filterFunction to remove the marker.
+    WEBCORE_EXPORT void filterMarkers(Range&, std::function<bool(DocumentMarker*)> filterFunction, OptionSet<DocumentMarker::MarkerType> = DocumentMarker::allMarkers(), RemovePartiallyOverlappingMarkerOrNot = DoNotRemovePartiallyOverlappingMarker);
 
     WEBCORE_EXPORT void removeMarkers(OptionSet<DocumentMarker::MarkerType> = DocumentMarker::allMarkers());
     void removeMarkers(Node&, OptionSet<DocumentMarker::MarkerType> = DocumentMarker::allMarkers());
     void repaintMarkers(OptionSet<DocumentMarker::MarkerType> = DocumentMarker::allMarkers());
     void shiftMarkers(Node&, unsigned startOffset, int delta);
