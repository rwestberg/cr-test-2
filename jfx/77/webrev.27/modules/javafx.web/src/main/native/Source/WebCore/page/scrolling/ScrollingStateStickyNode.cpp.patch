diff a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingStateStickyNode.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingStateStickyNode.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingStateStickyNode.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingStateStickyNode.cpp
@@ -24,15 +24,20 @@
  */
 
 #include "config.h"
 #include "ScrollingStateStickyNode.h"
 
-#if ENABLE(ASYNC_SCROLLING) || USE(COORDINATED_GRAPHICS)
+#if ENABLE(ASYNC_SCROLLING)
 
 #include "GraphicsLayer.h"
 #include "Logging.h"
+#include "ScrollingStateFixedNode.h"
+#include "ScrollingStateFrameScrollingNode.h"
+#include "ScrollingStateOverflowScrollProxyNode.h"
+#include "ScrollingStateOverflowScrollingNode.h"
 #include "ScrollingStateTree.h"
+#include "ScrollingTree.h"
 #include <wtf/text/TextStream.h>
 
 namespace WebCore {
 
 Ref<ScrollingStateStickyNode> ScrollingStateStickyNode::create(ScrollingStateTree& stateTree, ScrollingNodeID nodeID)
@@ -56,14 +61,14 @@
 Ref<ScrollingStateNode> ScrollingStateStickyNode::clone(ScrollingStateTree& adoptiveTree)
 {
     return adoptRef(*new ScrollingStateStickyNode(*this, adoptiveTree));
 }
 
-void ScrollingStateStickyNode::setAllPropertiesChanged()
+void ScrollingStateStickyNode::setPropertyChangedBitsAfterReattach()
 {
     setPropertyChangedBit(ViewportConstraints);
-    ScrollingStateNode::setAllPropertiesChanged();
+    ScrollingStateNode::setPropertyChangedBitsAfterReattach();
 }
 
 void ScrollingStateStickyNode::updateConstraints(const StickyPositionViewportConstraints& constraints)
 {
     if (m_constraints == constraints)
@@ -73,15 +78,49 @@
 
     m_constraints = constraints;
     setPropertyChanged(ViewportConstraints);
 }
 
-void ScrollingStateStickyNode::reconcileLayerPositionForViewportRect(const LayoutRect& viewportRect, ScrollingLayerPositionAction action)
+FloatPoint ScrollingStateStickyNode::computeLayerPosition(const LayoutRect& viewportRect) const
 {
-    ScrollingStateNode::reconcileLayerPositionForViewportRect(viewportRect, action);
+    // This logic follows ScrollingTreeStickyNode::computeLayerPosition().
+    auto computeLayerPositionForScrollingNode = [&](ScrollingStateNode& scrollingStateNode) {
+        FloatRect constrainingRect;
+        if (is<ScrollingStateFrameScrollingNode>(scrollingStateNode))
+            constrainingRect = viewportRect;
+        else {
+            auto& overflowScrollingNode = downcast<ScrollingStateOverflowScrollingNode>(scrollingStateNode);
+            constrainingRect = FloatRect(overflowScrollingNode.scrollPosition(), m_constraints.constrainingRectAtLastLayout().size());
+        }
+        return m_constraints.layerPositionForConstrainingRect(constrainingRect);
+    };
+
+    for (auto* ancestor = parent(); ancestor; ancestor = ancestor->parent()) {
+        if (is<ScrollingStateOverflowScrollProxyNode>(*ancestor)) {
+            auto& overflowProxyNode = downcast<ScrollingStateOverflowScrollProxyNode>(*ancestor);
+            auto overflowNode = scrollingStateTree().stateNodeForID(overflowProxyNode.overflowScrollingNode());
+            if (!overflowNode)
+                break;
+
+            return computeLayerPositionForScrollingNode(*overflowNode);
+        }
+
+        if (is<ScrollingStateScrollingNode>(*ancestor))
+            return computeLayerPositionForScrollingNode(*ancestor);
 
-    FloatPoint position = m_constraints.layerPositionForConstrainingRect(viewportRect);
+        if (is<ScrollingStateFixedNode>(*ancestor) || is<ScrollingStateStickyNode>(*ancestor)) {
+            // FIXME: Do we need scrolling tree nodes at all for nested cases?
+            return m_constraints.layerPositionAtLastLayout();
+        }
+    }
+    ASSERT_NOT_REACHED();
+    return m_constraints.layerPositionAtLastLayout();
+}
+
+void ScrollingStateStickyNode::reconcileLayerPositionForViewportRect(const LayoutRect& viewportRect, ScrollingLayerPositionAction action)
+{
+    FloatPoint position = computeLayerPosition(viewportRect);
     if (layer().representsGraphicsLayer()) {
         auto* graphicsLayer = static_cast<GraphicsLayer*>(layer());
 
         LOG_WITH_STREAM(Compositing, stream << "ScrollingStateStickyNode " << scrollingNodeID() << " reconcileLayerPositionForViewportRect " << action << " position of layer " << graphicsLayer->primaryLayerID() << " to " << position << " sticky offset " << m_constraints.stickyOffsetAtLastLayout());
 
@@ -139,6 +178,6 @@
     ts.dumpProperty("layer position at last layout", m_constraints.layerPositionAtLastLayout());
 }
 
 } // namespace WebCore
 
-#endif // ENABLE(ASYNC_SCROLLING) || USE(COORDINATED_GRAPHICS)
+#endif // ENABLE(ASYNC_SCROLLING)
