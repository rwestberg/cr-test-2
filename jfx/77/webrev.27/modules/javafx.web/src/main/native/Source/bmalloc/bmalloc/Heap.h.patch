diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Heap.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Heap.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Heap.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Heap.h
@@ -74,13 +74,12 @@
 
     bool isLarge(std::unique_lock<Mutex>&, void*);
     size_t largeSize(std::unique_lock<Mutex>&, void*);
     void shrinkLarge(std::unique_lock<Mutex>&, const Range&, size_t);
 
-    void scavenge(std::lock_guard<Mutex>&, BulkDecommit&);
+    void scavenge(std::lock_guard<Mutex>&, BulkDecommit&, size_t& deferredDecommits);
     void scavenge(std::lock_guard<Mutex>&, BulkDecommit&, size_t& freed, size_t goal);
-    void scavengeToHighWatermark(std::lock_guard<Mutex>&, BulkDecommit&);
 
     size_t freeableMemory(std::lock_guard<Mutex>&);
     size_t footprint();
 
     void externalDecommit(void* ptr, size_t);
@@ -127,10 +126,13 @@
 
     LargeRange splitAndAllocate(std::unique_lock<Mutex>&, LargeRange&, size_t alignment, size_t);
 
     HeapKind m_kind;
 
+    bool m_hasPendingDecommits { false };
+    std::condition_variable_any m_condition;
+
     size_t m_vmPageSizePhysical;
     Vector<LineMetadata> m_smallLineMetadata;
     std::array<size_t, sizeClassCount> m_pageClasses;
 
     LineCache m_lineCache;
@@ -145,18 +147,13 @@
     Scavenger* m_scavenger { nullptr };
 
     size_t m_footprint { 0 };
     size_t m_freeableMemory { 0 };
 
-    bool m_hasPendingDecommits { false };
-    std::condition_variable_any m_condition;
-
 #if ENABLE_PHYSICAL_PAGE_MAP
     PhysicalPageMap m_physicalPageMap;
 #endif
-
-    void* m_highWatermark { nullptr };
 };
 
 inline void Heap::allocateSmallBumpRanges(
     std::unique_lock<Mutex>& lock, size_t sizeClass,
     BumpAllocator& allocator, BumpRangeCache& rangeCache,
