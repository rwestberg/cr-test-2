diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/BytecodeGeneratorification.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/BytecodeGeneratorification.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/BytecodeGeneratorification.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/BytecodeGeneratorification.cpp
@@ -53,16 +53,24 @@
 
 class BytecodeGeneratorification {
 public:
     typedef Vector<YieldData> Yields;
 
+    struct GeneratorFrameData {
+        InstructionStream::Offset m_point;
+        VirtualRegister m_dst;
+        VirtualRegister m_scope;
+        VirtualRegister m_symbolTable;
+        VirtualRegister m_initialValue;
+    };
+
     BytecodeGeneratorification(BytecodeGenerator& bytecodeGenerator, UnlinkedCodeBlock* codeBlock, InstructionStreamWriter& instructions, SymbolTable* generatorFrameSymbolTable, int generatorFrameSymbolTableIndex)
         : m_bytecodeGenerator(bytecodeGenerator)
         , m_codeBlock(codeBlock)
         , m_instructions(instructions)
         , m_graph(m_codeBlock, m_instructions)
-        , m_generatorFrameSymbolTable(*codeBlock->vm(), generatorFrameSymbolTable)
+        , m_generatorFrameSymbolTable(codeBlock->vm(), generatorFrameSymbolTable)
         , m_generatorFrameSymbolTableIndex(generatorFrameSymbolTableIndex)
     {
         for (BytecodeBasicBlock* block : m_graph) {
             for (const auto offset : block->offsets()) {
                 const auto instruction = m_instructions.at(offset);
@@ -81,10 +89,22 @@
                     data.point = instruction.offset();
                     data.argument = bytecode.m_argument;
                     break;
                 }
 
+                case op_create_generator_frame_environment: {
+                    auto bytecode = instruction->as<OpCreateGeneratorFrameEnvironment>();
+                    GeneratorFrameData data;
+                    data.m_point = instruction.offset();
+                    data.m_dst = bytecode.m_dst;
+                    data.m_scope = bytecode.m_scope;
+                    data.m_symbolTable = bytecode.m_symbolTable;
+                    data.m_initialValue = bytecode.m_initialValue;
+                    m_generatorFrameData = WTFMove(data);
+                    break;
+                }
+
                 default:
                     break;
                 }
             }
         }
@@ -113,17 +133,22 @@
     InstructionStream::Ref enterPoint() const
     {
         return m_instructions.at(m_enterPoint);
     }
 
+    Optional<GeneratorFrameData> generatorFrameData() const
+    {
+        return m_generatorFrameData;
+    }
+
     const InstructionStream& instructions() const
     {
         return m_instructions;
     }
 
 private:
-    Storage storageForGeneratorLocal(unsigned index)
+    Storage storageForGeneratorLocal(VM& vm, unsigned index)
     {
         // We assign a symbol to a register. There is one-on-one corresponding between a register and a symbol.
         // By doing so, we allocate the specific storage to save the given register.
         // This allow us not to save all the live registers even if the registers are not overwritten from the previous resuming time.
         // It means that, the register can be retrieved even if the immediate previous op_save does not save it.
@@ -131,11 +156,11 @@
         if (m_storages.size() <= index)
             m_storages.resize(index + 1);
         if (Optional<Storage> storage = m_storages[index])
             return *storage;
 
-        Identifier identifier = Identifier::fromUid(PrivateName());
+        Identifier identifier = Identifier::from(vm, index);
         unsigned identifierIndex = m_codeBlock->numberOfIdentifiers();
         m_codeBlock->addIdentifier(identifier);
         ScopeOffset scopeOffset = m_generatorFrameSymbolTable->takeNextScopeOffset(NoLockingNecessary);
         m_generatorFrameSymbolTable->set(NoLockingNecessary, identifier.impl(), SymbolTableEntry(VarOffset(scopeOffset)));
 
@@ -148,10 +173,11 @@
         return storage;
     }
 
     BytecodeGenerator& m_bytecodeGenerator;
     InstructionStream::Offset m_enterPoint;
+    Optional<GeneratorFrameData> m_generatorFrameData;
     UnlinkedCodeBlock* m_codeBlock;
     InstructionStreamWriter& m_instructions;
     BytecodeGraph m_graph;
     Vector<Optional<Storage>> m_storages;
     Yields m_yields;
@@ -183,10 +209,11 @@
 
 void BytecodeGeneratorification::run()
 {
     // We calculate the liveness at each merge point. This gives us the information which registers should be saved and resumed conservatively.
 
+    VM& vm = m_bytecodeGenerator.vm();
     {
         GeneratorLivenessAnalysis pass(*this);
         pass.run(m_codeBlock, m_instructions);
     }
 
@@ -203,44 +230,44 @@
         jumpTable.branchOffsets.fill(0);
         jumpTable.add(0, nextToEnterPoint.offset());
         for (unsigned i = 0; i < m_yields.size(); ++i)
             jumpTable.add(i + 1, m_yields[i].point);
 
-        rewriter.insertFragmentBefore(nextToEnterPoint, [&](BytecodeRewriter::Fragment& fragment) {
+        rewriter.insertFragmentBefore(nextToEnterPoint, [&] (BytecodeRewriter::Fragment& fragment) {
             fragment.appendInstruction<OpSwitchImm>(switchTableIndex, BoundLabel(nextToEnterPoint.offset()), state);
         });
     }
 
     for (const YieldData& data : m_yields) {
         VirtualRegister scope = virtualRegisterForArgument(static_cast<int32_t>(JSGeneratorFunction::GeneratorArgument::Frame));
 
         auto instruction = m_instructions.at(data.point);
         // Emit save sequence.
-        rewriter.insertFragmentBefore(instruction, [&](BytecodeRewriter::Fragment& fragment) {
+        rewriter.insertFragmentBefore(instruction, [&] (BytecodeRewriter::Fragment& fragment) {
             data.liveness.forEachSetBit([&](size_t index) {
                 VirtualRegister operand = virtualRegisterForLocal(index);
-                Storage storage = storageForGeneratorLocal(index);
+                Storage storage = storageForGeneratorLocal(vm, index);
 
                 fragment.appendInstruction<OpPutToScope>(
                     scope, // scope
                     storage.identifierIndex, // identifier
                     operand, // value
                     GetPutInfo(DoNotThrowIfNotFound, LocalClosureVar, InitializationMode::NotInitialization), // info
-                    m_generatorFrameSymbolTableIndex, // symbol table constant index
+                    SymbolTableOrScopeDepth::symbolTable(VirtualRegister { m_generatorFrameSymbolTableIndex }), // symbol table constant index
                     storage.scopeOffset.offset() // scope offset
                 );
             });
 
             // Insert op_ret just after save sequence.
             fragment.appendInstruction<OpRet>(data.argument);
         });
 
         // Emit resume sequence.
-        rewriter.insertFragmentAfter(instruction, [&](BytecodeRewriter::Fragment& fragment) {
+        rewriter.insertFragmentAfter(instruction, [&] (BytecodeRewriter::Fragment& fragment) {
             data.liveness.forEachSetBit([&](size_t index) {
                 VirtualRegister operand = virtualRegisterForLocal(index);
-                Storage storage = storageForGeneratorLocal(index);
+                Storage storage = storageForGeneratorLocal(vm, index);
 
                 fragment.appendInstruction<OpGetFromScope>(
                     operand, // dst
                     scope, // scope
                     storage.identifierIndex, // identifier
@@ -253,10 +280,22 @@
 
         // Clip the unnecessary bytecodes.
         rewriter.removeBytecode(instruction);
     }
 
+    if (m_generatorFrameData) {
+        auto instruction = m_instructions.at(m_generatorFrameData->m_point);
+        rewriter.insertFragmentAfter(instruction, [&] (BytecodeRewriter::Fragment& fragment) {
+            if (!m_generatorFrameSymbolTable->scopeSize()) {
+                // This will cause us to put jsUndefined() into the generator frame's scope value.
+                fragment.appendInstruction<OpMov>(m_generatorFrameData->m_dst, m_generatorFrameData->m_initialValue);
+            } else
+                fragment.appendInstruction<OpCreateLexicalEnvironment>(m_generatorFrameData->m_dst, m_generatorFrameData->m_scope, m_generatorFrameData->m_symbolTable, m_generatorFrameData->m_initialValue);
+        });
+        rewriter.removeBytecode(instruction);
+    }
+
     rewriter.execute();
 }
 
 void performGeneratorification(BytecodeGenerator& bytecodeGenerator, UnlinkedCodeBlock* codeBlock, InstructionStreamWriter& instructions, SymbolTable* generatorFrameSymbolTable, int generatorFrameSymbolTableIndex)
 {
