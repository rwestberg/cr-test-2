diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadObserver.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadObserver.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadObserver.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadObserver.cpp
@@ -28,13 +28,15 @@
 
 #include "DeprecatedGlobalSettings.h"
 #include "Document.h"
 #include "Frame.h"
 #include "FrameLoader.h"
+#include "FrameLoaderClient.h"
 #include "HTMLFrameOwnerElement.h"
 #include "Logging.h"
 #include "Page.h"
+#include "RegistrableDomain.h"
 #include "ResourceLoadStatistics.h"
 #include "ResourceRequest.h"
 #include "ResourceResponse.h"
 #include "RuntimeEnabledFeatures.h"
 #include "ScriptExecutionContext.h"
@@ -42,197 +44,164 @@
 #include "Settings.h"
 #include <wtf/URL.h>
 
 namespace WebCore {
 
-template<typename T> static inline String primaryDomain(const T& value)
+static const Seconds minimumNotificationInterval { 5_s };
+
+ResourceLoadObserver::ResourceLoadObserver()
+    : m_notificationTimer(*this, &ResourceLoadObserver::updateCentralStatisticsStore)
 {
-    return ResourceLoadStatistics::primaryDomain(value);
 }
 
-static const Seconds minimumNotificationInterval { 5_s };
-
 ResourceLoadObserver& ResourceLoadObserver::shared()
 {
     static NeverDestroyed<ResourceLoadObserver> resourceLoadObserver;
     return resourceLoadObserver;
 }
 
-void ResourceLoadObserver::setNotificationCallback(WTF::Function<void (Vector<ResourceLoadStatistics>&&)>&& notificationCallback)
+void ResourceLoadObserver::setStatisticsUpdatedCallback(Function<void(PerSessionResourceLoadData&&)>&& notificationCallback)
 {
     ASSERT(!m_notificationCallback);
     m_notificationCallback = WTFMove(notificationCallback);
 }
 
-void ResourceLoadObserver::setRequestStorageAccessUnderOpenerCallback(WTF::Function<void(const String& domainInNeedOfStorageAccess, uint64_t openerPageID, const String& openerDomain)>&& callback)
+void ResourceLoadObserver::setRequestStorageAccessUnderOpenerCallback(Function<void(PAL::SessionID sessionID, const RegistrableDomain& domainInNeedOfStorageAccess, PageIdentifier openerPageID, const RegistrableDomain& openerDomain)>&& callback)
 {
     ASSERT(!m_requestStorageAccessUnderOpenerCallback);
     m_requestStorageAccessUnderOpenerCallback = WTFMove(callback);
 }
 
-void ResourceLoadObserver::setLogUserInteractionNotificationCallback(Function<void(PAL::SessionID, const String&)>&& callback)
+void ResourceLoadObserver::setLogUserInteractionNotificationCallback(Function<void(PAL::SessionID, const RegistrableDomain&)>&& callback)
 {
     ASSERT(!m_logUserInteractionNotificationCallback);
     m_logUserInteractionNotificationCallback = WTFMove(callback);
 }
 
-void ResourceLoadObserver::setLogWebSocketLoadingNotificationCallback(Function<void(PAL::SessionID, const String&, const String&, WallTime)>&& callback)
-{
-    ASSERT(!m_logWebSocketLoadingNotificationCallback);
-    m_logWebSocketLoadingNotificationCallback = WTFMove(callback);
-}
-
-void ResourceLoadObserver::setLogSubresourceLoadingNotificationCallback(Function<void(PAL::SessionID, const String&, const String&, WallTime)>&& callback)
-{
-    ASSERT(!m_logSubresourceLoadingNotificationCallback);
-    m_logSubresourceLoadingNotificationCallback = WTFMove(callback);
-}
-
-void ResourceLoadObserver::setLogSubresourceRedirectNotificationCallback(Function<void(PAL::SessionID, const String&, const String&)>&& callback)
-{
-    ASSERT(!m_logSubresourceRedirectNotificationCallback);
-    m_logSubresourceRedirectNotificationCallback = WTFMove(callback);
-}
-
-ResourceLoadObserver::ResourceLoadObserver()
-    : m_notificationTimer(*this, &ResourceLoadObserver::notifyObserver)
-{
-}
-
 static inline bool is3xxRedirect(const ResourceResponse& response)
 {
     return response.httpStatusCode() >= 300 && response.httpStatusCode() <= 399;
 }
 
-bool ResourceLoadObserver::shouldLog(bool usesEphemeralSession) const
+bool ResourceLoadObserver::shouldLog(PAL::SessionID sessionID) const
 {
-    return DeprecatedGlobalSettings::resourceLoadStatisticsEnabled() && !usesEphemeralSession && m_notificationCallback;
+    return DeprecatedGlobalSettings::resourceLoadStatisticsEnabled() && !sessionID.isEphemeral() && m_notificationCallback;
 }
 
 void ResourceLoadObserver::logSubresourceLoading(const Frame* frame, const ResourceRequest& newRequest, const ResourceResponse& redirectResponse)
 {
     ASSERT(frame->page());
 
     if (!frame)
         return;
 
     auto* page = frame->page();
-    if (!page || !shouldLog(page->usesEphemeralSession()))
+    if (!page || !shouldLog(page->sessionID()))
         return;
 
     bool isRedirect = is3xxRedirect(redirectResponse);
-    const URL& sourceURL = redirectResponse.url();
+    const URL& redirectedFromURL = redirectResponse.url();
     const URL& targetURL = newRequest.url();
-    const URL& mainFrameURL = frame ? frame->mainFrame().document()->url() : URL();
+    const URL& topFrameURL = frame ? frame->mainFrame().document()->url() : URL();
 
     auto targetHost = targetURL.host();
-    auto mainFrameHost = mainFrameURL.host();
+    auto topFrameHost = topFrameURL.host();
 
-    if (targetHost.isEmpty() || mainFrameHost.isEmpty() || targetHost == mainFrameHost || (isRedirect && targetHost == sourceURL.host()))
+    if (targetHost.isEmpty() || topFrameHost.isEmpty() || targetHost == topFrameHost || (isRedirect && targetHost == redirectedFromURL.host()))
         return;
 
-    auto targetPrimaryDomain = primaryDomain(targetURL);
-    auto mainFramePrimaryDomain = primaryDomain(mainFrameURL);
-    auto sourcePrimaryDomain = primaryDomain(sourceURL);
+    RegistrableDomain targetDomain { targetURL };
+    RegistrableDomain topFrameDomain { topFrameURL };
+    RegistrableDomain redirectedFromDomain { redirectedFromURL };
 
-    if (targetPrimaryDomain == mainFramePrimaryDomain || (isRedirect && targetPrimaryDomain == sourcePrimaryDomain))
+    if (targetDomain == topFrameDomain || (isRedirect && targetDomain == redirectedFromDomain))
         return;
 
-    bool shouldCallNotificationCallback = false;
     {
-        auto& targetStatistics = ensureResourceStatisticsForPrimaryDomain(targetPrimaryDomain);
+        auto& targetStatistics = ensureResourceStatisticsForRegistrableDomain(page->sessionID(), targetDomain);
         auto lastSeen = ResourceLoadStatistics::reduceTimeResolution(WallTime::now());
         targetStatistics.lastSeen = lastSeen;
-        if (targetStatistics.subresourceUnderTopFrameOrigins.add(mainFramePrimaryDomain).isNewEntry)
-            shouldCallNotificationCallback = true;
+        targetStatistics.subresourceUnderTopFrameDomains.add(topFrameDomain);
 
-        m_logSubresourceLoadingNotificationCallback(page->sessionID(), targetPrimaryDomain, mainFramePrimaryDomain, lastSeen);
+        scheduleNotificationIfNeeded();
     }
 
     if (isRedirect) {
-        auto& redirectingOriginStatistics = ensureResourceStatisticsForPrimaryDomain(sourcePrimaryDomain);
-        bool isNewRedirectToEntry = redirectingOriginStatistics.subresourceUniqueRedirectsTo.add(targetPrimaryDomain).isNewEntry;
-        auto& targetStatistics = ensureResourceStatisticsForPrimaryDomain(targetPrimaryDomain);
-        bool isNewRedirectFromEntry = targetStatistics.subresourceUniqueRedirectsFrom.add(sourcePrimaryDomain).isNewEntry;
-
-        if (isNewRedirectToEntry || isNewRedirectFromEntry)
-            shouldCallNotificationCallback = true;
+        auto& redirectingOriginStatistics = ensureResourceStatisticsForRegistrableDomain(page->sessionID(), redirectedFromDomain);
+        redirectingOriginStatistics.subresourceUniqueRedirectsTo.add(targetDomain);
+        auto& targetStatistics = ensureResourceStatisticsForRegistrableDomain(page->sessionID(), targetDomain);
+        targetStatistics.subresourceUniqueRedirectsFrom.add(redirectedFromDomain);
 
-        m_logSubresourceRedirectNotificationCallback(page->sessionID(), sourcePrimaryDomain, targetPrimaryDomain);
-    }
-
-    if (shouldCallNotificationCallback)
         scheduleNotificationIfNeeded();
+    }
 }
 
 void ResourceLoadObserver::logWebSocketLoading(const URL& targetURL, const URL& mainFrameURL, PAL::SessionID sessionID)
 {
-    if (!shouldLog(sessionID.isEphemeral()))
+    if (!shouldLog(sessionID))
         return;
 
     auto targetHost = targetURL.host();
     auto mainFrameHost = mainFrameURL.host();
 
     if (targetHost.isEmpty() || mainFrameHost.isEmpty() || targetHost == mainFrameHost)
         return;
 
-    auto targetPrimaryDomain = primaryDomain(targetURL);
-    auto mainFramePrimaryDomain = primaryDomain(mainFrameURL);
+    RegistrableDomain targetDomain { targetURL };
+    RegistrableDomain topFrameDomain { mainFrameURL };
 
-    if (targetPrimaryDomain == mainFramePrimaryDomain)
+    if (targetDomain == topFrameDomain)
         return;
 
     auto lastSeen = ResourceLoadStatistics::reduceTimeResolution(WallTime::now());
 
-    auto& targetStatistics = ensureResourceStatisticsForPrimaryDomain(targetPrimaryDomain);
+    auto& targetStatistics = ensureResourceStatisticsForRegistrableDomain(sessionID, targetDomain);
     targetStatistics.lastSeen = lastSeen;
-    if (targetStatistics.subresourceUnderTopFrameOrigins.add(mainFramePrimaryDomain).isNewEntry)
-        scheduleNotificationIfNeeded();
+    targetStatistics.subresourceUnderTopFrameDomains.add(topFrameDomain);
 
-    m_logWebSocketLoadingNotificationCallback(sessionID, targetPrimaryDomain, mainFramePrimaryDomain, lastSeen);
+    scheduleNotificationIfNeeded();
 }
 
 void ResourceLoadObserver::logUserInteractionWithReducedTimeResolution(const Document& document)
 {
-    if (!document.sessionID().isValid() || !shouldLog(document.sessionID().isEphemeral()))
+    if (!document.sessionID().isValid() || !shouldLog(document.sessionID()))
         return;
 
     auto& url = document.url();
-    if (url.protocolIsAbout() || url.isEmpty())
+    if (url.protocolIsAbout() || url.isLocalFile() || url.isEmpty())
         return;
 
-    auto domain = primaryDomain(url);
+    RegistrableDomain topFrameDomain { url };
     auto newTime = ResourceLoadStatistics::reduceTimeResolution(WallTime::now());
-    auto lastReportedUserInteraction = m_lastReportedUserInteractionMap.get(domain);
+    auto lastReportedUserInteraction = m_lastReportedUserInteractionMap.get(topFrameDomain);
     if (newTime == lastReportedUserInteraction)
         return;
 
-    m_lastReportedUserInteractionMap.set(domain, newTime);
+    m_lastReportedUserInteractionMap.set(topFrameDomain, newTime);
 
-    auto& statistics = ensureResourceStatisticsForPrimaryDomain(domain);
+    auto& statistics = ensureResourceStatisticsForRegistrableDomain(document.sessionID(), topFrameDomain);
     statistics.hadUserInteraction = true;
     statistics.lastSeen = newTime;
     statistics.mostRecentUserInteractionTime = newTime;
 
 #if ENABLE(RESOURCE_LOAD_STATISTICS)
     if (auto* frame = document.frame()) {
         if (auto* opener = frame->loader().opener()) {
             if (auto* openerDocument = opener->document()) {
                 if (auto* openerFrame = openerDocument->frame()) {
                     if (auto openerPageID = openerFrame->loader().client().pageID())
-                        requestStorageAccessUnderOpener(domain, openerPageID.value(), *openerDocument);
+                        requestStorageAccessUnderOpener(document.sessionID(), topFrameDomain, openerPageID.value(), *openerDocument);
                 }
             }
         }
     }
 
-    m_logUserInteractionNotificationCallback(document.sessionID(), domain);
+    // We notify right away in case of a user interaction instead of waiting the usual 5 seconds because we want
+    // to update cookie blocking state as quickly as possible.
+    m_logUserInteractionNotificationCallback(document.sessionID(), topFrameDomain);
 #endif
 
-    m_notificationTimer.stop();
-    notifyObserver();
-
 #if ENABLE(RESOURCE_LOAD_STATISTICS) && !RELEASE_LOG_DISABLED
     if (shouldLogUserInteraction()) {
         auto counter = ++m_loggingCounter;
 #define LOCAL_LOG(str, ...) \
         RELEASE_LOG(ResourceLoadStatistics, "ResourceLoadObserver::logUserInteraction: counter = %" PRIu64 ": " str, counter, ##__VA_ARGS__)
@@ -240,11 +209,11 @@
         auto escapeForJSON = [](String s) {
             s.replace('\\', "\\\\").replace('"', "\\\"");
             return s;
         };
         auto escapedURL = escapeForJSON(url.string());
-        auto escapedDomain = escapeForJSON(domain);
+        auto escapedDomain = escapeForJSON(topFrameDomain.string());
 
         LOCAL_LOG(R"({ "url": "%{public}s",)", escapedURL.utf8().data());
         LOCAL_LOG(R"(  "domain" : "%{public}s",)", escapedDomain.utf8().data());
         LOCAL_LOG(R"(  "until" : %f })", newTime.secondsSinceEpoch().seconds());
 
@@ -252,41 +221,41 @@
     }
 #endif
 }
 
 #if ENABLE(RESOURCE_LOAD_STATISTICS)
-void ResourceLoadObserver::requestStorageAccessUnderOpener(const String& domainInNeedOfStorageAccess, uint64_t openerPageID, Document& openerDocument)
+void ResourceLoadObserver::requestStorageAccessUnderOpener(PAL::SessionID sessionID, const RegistrableDomain& domainInNeedOfStorageAccess, PageIdentifier openerPageID, Document& openerDocument)
 {
     auto openerUrl = openerDocument.url();
-    auto openerPrimaryDomain = primaryDomain(openerUrl);
-    if (domainInNeedOfStorageAccess != openerPrimaryDomain
+    RegistrableDomain openerDomain { openerUrl };
+    if (domainInNeedOfStorageAccess != openerDomain
         && !openerDocument.hasRequestedPageSpecificStorageAccessWithUserInteraction(domainInNeedOfStorageAccess)
         && !equalIgnoringASCIICase(openerUrl.string(), WTF::blankURL())) {
-        m_requestStorageAccessUnderOpenerCallback(domainInNeedOfStorageAccess, openerPageID, openerPrimaryDomain);
+        m_requestStorageAccessUnderOpenerCallback(sessionID, domainInNeedOfStorageAccess, openerPageID, openerDomain);
         // Remember user interaction-based requests since they don't need to be repeated.
         openerDocument.setHasRequestedPageSpecificStorageAccessWithUserInteraction(domainInNeedOfStorageAccess);
     }
 }
 #endif
 
 void ResourceLoadObserver::logFontLoad(const Document& document, const String& familyName, bool loadStatus)
 {
 #if ENABLE(WEB_API_STATISTICS)
-    if (!shouldLog(document.sessionID().isEphemeral()))
+    if (!shouldLog(document.sessionID()))
         return;
-    auto registrableDomain = primaryDomain(document.url());
-    auto& statistics = ensureResourceStatisticsForPrimaryDomain(registrableDomain);
+    RegistrableDomain registrableDomain { document.url() };
+    auto& statistics = ensureResourceStatisticsForRegistrableDomain(document.sessionID, registrableDomain);
     bool shouldCallNotificationCallback = false;
     if (!loadStatus) {
         if (statistics.fontsFailedToLoad.add(familyName).isNewEntry)
             shouldCallNotificationCallback = true;
     } else {
         if (statistics.fontsSuccessfullyLoaded.add(familyName).isNewEntry)
             shouldCallNotificationCallback = true;
     }
-    auto mainFrameRegistrableDomain = primaryDomain(document.topDocument().url());
-    if (statistics.topFrameRegistrableDomainsWhichAccessedWebAPIs.add(mainFrameRegistrableDomain).isNewEntry)
+    RegistrableDomain mainFrameRegistrableDomain { document.topDocument().url() };
+    if (statistics.topFrameRegistrableDomainsWhichAccessedWebAPIs.add(mainFrameRegistrableDomain.string()).isNewEntry)
         shouldCallNotificationCallback = true;
     if (shouldCallNotificationCallback)
         scheduleNotificationIfNeeded();
 #else
     UNUSED_PARAM(document);
@@ -296,35 +265,35 @@
 }
 
 void ResourceLoadObserver::logCanvasRead(const Document& document)
 {
 #if ENABLE(WEB_API_STATISTICS)
-    if (!shouldLog(document.sessionID().isEphemeral()))
+    if (!shouldLog(document.sessionID()))
         return;
-    auto registrableDomain = primaryDomain(document.url());
-    auto& statistics = ensureResourceStatisticsForPrimaryDomain(registrableDomain);
-    auto mainFrameRegistrableDomain = primaryDomain(document.topDocument().url());
+    RegistrableDomain registrableDomain { document.url() };
+    auto& statistics = ensureResourceStatisticsForRegistrableDomain(document.sessionID(), registrableDomain);
+    RegistrableDomain mainFrameRegistrableDomain { document.topDocument().url() };
     statistics.canvasActivityRecord.wasDataRead = true;
-    if (statistics.topFrameRegistrableDomainsWhichAccessedWebAPIs.add(mainFrameRegistrableDomain).isNewEntry)
+    if (statistics.topFrameRegistrableDomainsWhichAccessedWebAPIs.add(mainFrameRegistrableDomain.string()).isNewEntry)
         scheduleNotificationIfNeeded();
 #else
     UNUSED_PARAM(document);
 #endif
 }
 
 void ResourceLoadObserver::logCanvasWriteOrMeasure(const Document& document, const String& textWritten)
 {
 #if ENABLE(WEB_API_STATISTICS)
-    if (!shouldLog(document.sessionID().isEphemeral()))
+    if (!shouldLog(document.sessionID()))
         return;
-    auto registrableDomain = primaryDomain(document.url());
-    auto& statistics = ensureResourceStatisticsForPrimaryDomain(registrableDomain);
+    RegistrableDomain registrableDomain { document.url() };
+    auto& statistics = ensureResourceStatisticsForRegistrableDomain(document.sessionID, registrableDomain);
     bool shouldCallNotificationCallback = false;
-    auto mainFrameRegistrableDomain = primaryDomain(document.topDocument().url());
+    RegistrableDomain mainFrameRegistrableDomain { document.topDocument().url() };
     if (statistics.canvasActivityRecord.recordWrittenOrMeasuredText(textWritten))
         shouldCallNotificationCallback = true;
-    if (statistics.topFrameRegistrableDomainsWhichAccessedWebAPIs.add(mainFrameRegistrableDomain).isNewEntry)
+    if (statistics.topFrameRegistrableDomainsWhichAccessedWebAPIs.add(mainFrameRegistrableDomain.string()).isNewEntry)
         shouldCallNotificationCallback = true;
     if (shouldCallNotificationCallback)
         scheduleNotificationIfNeeded();
 #else
     UNUSED_PARAM(document);
@@ -333,21 +302,21 @@
 }
 
 void ResourceLoadObserver::logNavigatorAPIAccessed(const Document& document, const ResourceLoadStatistics::NavigatorAPI functionName)
 {
 #if ENABLE(WEB_API_STATISTICS)
-    if (!shouldLog(document.sessionID().isEphemeral()))
+    if (!shouldLog(document.sessionID()))
         return;
-    auto registrableDomain = primaryDomain(document.url());
-    auto& statistics = ensureResourceStatisticsForPrimaryDomain(registrableDomain);
+    RegistrableDomain registrableDomain { document.url() };
+    auto& statistics = ensureResourceStatisticsForRegistrableDomain(document.sessionID, registrableDomain);
     bool shouldCallNotificationCallback = false;
     if (!statistics.navigatorFunctionsAccessed.contains(functionName)) {
         statistics.navigatorFunctionsAccessed.add(functionName);
         shouldCallNotificationCallback = true;
     }
-    auto mainFrameRegistrableDomain = primaryDomain(document.topDocument().url());
-    if (statistics.topFrameRegistrableDomainsWhichAccessedWebAPIs.add(mainFrameRegistrableDomain).isNewEntry)
+    RegistrableDomain mainFrameRegistrableDomain { document.topDocument().url() };
+    if (statistics.topFrameRegistrableDomainsWhichAccessedWebAPIs.add(mainFrameRegistrableDomain.string()).isNewEntry)
         shouldCallNotificationCallback = true;
     if (shouldCallNotificationCallback)
         scheduleNotificationIfNeeded();
 #else
     UNUSED_PARAM(document);
@@ -356,82 +325,96 @@
 }
 
 void ResourceLoadObserver::logScreenAPIAccessed(const Document& document, const ResourceLoadStatistics::ScreenAPI functionName)
 {
 #if ENABLE(WEB_API_STATISTICS)
-    if (!shouldLog(document.sessionID().isEphemeral()))
+    if (!shouldLog(document.sessionID()))
         return;
-    auto registrableDomain = primaryDomain(document.url());
-    auto& statistics = ensureResourceStatisticsForPrimaryDomain(registrableDomain);
+    RegistrableDomain registrableDomain { document.url() };
+    auto& statistics = ensureResourceStatisticsForRegistrableDomain(document.sessionID, registrableDomain);
     bool shouldCallNotificationCallback = false;
     if (!statistics.screenFunctionsAccessed.contains(functionName)) {
         statistics.screenFunctionsAccessed.add(functionName);
         shouldCallNotificationCallback = true;
     }
-    auto mainFrameRegistrableDomain = primaryDomain(document.topDocument().url());
-    if (statistics.topFrameRegistrableDomainsWhichAccessedWebAPIs.add(mainFrameRegistrableDomain).isNewEntry)
+    RegistrableDomain mainFrameRegistrableDomain { document.topDocument().url() };
+    if (statistics.topFrameRegistrableDomainsWhichAccessedWebAPIs.add(mainFrameRegistrableDomain.string()).isNewEntry)
         shouldCallNotificationCallback = true;
     if (shouldCallNotificationCallback)
         scheduleNotificationIfNeeded();
 #else
     UNUSED_PARAM(document);
     UNUSED_PARAM(functionName);
 #endif
 }
 
-ResourceLoadStatistics& ResourceLoadObserver::ensureResourceStatisticsForPrimaryDomain(const String& primaryDomain)
+ResourceLoadStatistics& ResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(PAL::SessionID sessionID, const RegistrableDomain& domain)
 {
-    auto addResult = m_resourceStatisticsMap.ensure(primaryDomain, [&primaryDomain] {
-        return ResourceLoadStatistics(primaryDomain);
+    auto addResult = m_perSessionResourceStatisticsMap.ensure(sessionID, [] {
+        return makeUnique<HashMap<RegistrableDomain, ResourceLoadStatistics>>();
     });
-    return addResult.iterator->value;
+
+    auto addDomainResult = addResult.iterator->value->ensure(domain, [&domain] {
+        return ResourceLoadStatistics(domain);
+    });
+    return addDomainResult.iterator->value;
 }
 
 void ResourceLoadObserver::scheduleNotificationIfNeeded()
 {
     ASSERT(m_notificationCallback);
-    if (m_resourceStatisticsMap.isEmpty()) {
+    if (m_perSessionResourceStatisticsMap.isEmpty()) {
         m_notificationTimer.stop();
         return;
     }
 
     if (!m_notificationTimer.isActive())
         m_notificationTimer.startOneShot(minimumNotificationInterval);
 }
 
-void ResourceLoadObserver::notifyObserver()
+void ResourceLoadObserver::updateCentralStatisticsStore()
 {
     ASSERT(m_notificationCallback);
     m_notificationTimer.stop();
     m_notificationCallback(takeStatistics());
 }
 
-String ResourceLoadObserver::statisticsForOrigin(const String& origin)
+String ResourceLoadObserver::statisticsForURL(PAL::SessionID sessionID, const URL& url)
 {
-    auto iter = m_resourceStatisticsMap.find(origin);
-    if (iter == m_resourceStatisticsMap.end())
+    auto* resourceStatisticsByDomain = m_perSessionResourceStatisticsMap.get(sessionID);
+    if (!resourceStatisticsByDomain)
         return emptyString();
 
-    return "Statistics for " + origin + ":\n" + iter->value.toString();
+    auto iter = resourceStatisticsByDomain->find(RegistrableDomain { url });
+    if (iter == resourceStatisticsByDomain->end())
+        return emptyString();
+
+    return makeString("Statistics for ", url.host().toString(), ":\n", iter->value.toString());
 }
 
-Vector<ResourceLoadStatistics> ResourceLoadObserver::takeStatistics()
+auto ResourceLoadObserver::takeStatistics() -> PerSessionResourceLoadData
 {
-    Vector<ResourceLoadStatistics> statistics;
-    statistics.reserveInitialCapacity(m_resourceStatisticsMap.size());
-    for (auto& statistic : m_resourceStatisticsMap.values())
-        statistics.uncheckedAppend(WTFMove(statistic));
+    PerSessionResourceLoadData perSessionStatistics;
+
+    for (auto& iter : m_perSessionResourceStatisticsMap) {
+        Vector<ResourceLoadStatistics> statistics;
+        statistics.reserveInitialCapacity(iter.value->size());
 
-    m_resourceStatisticsMap.clear();
+        for (auto& statistic : iter.value->values())
+            statistics.uncheckedAppend(WTFMove(statistic));
+
+        perSessionStatistics.append(std::make_pair(iter.key, WTFMove(statistics)));
+    }
 
-    return statistics;
+    m_perSessionResourceStatisticsMap.clear();
+    return perSessionStatistics;
 }
 
 void ResourceLoadObserver::clearState()
 {
     m_notificationTimer.stop();
-    m_resourceStatisticsMap.clear();
+    m_perSessionResourceStatisticsMap.clear();
     m_lastReportedUserInteractionMap.clear();
 }
 
 URL ResourceLoadObserver::nonNullOwnerURL(const Document& document) const
 {
