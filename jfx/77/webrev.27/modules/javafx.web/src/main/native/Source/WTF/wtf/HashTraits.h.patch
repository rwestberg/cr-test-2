diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/HashTraits.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/HashTraits.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/HashTraits.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/HashTraits.h
@@ -43,10 +43,13 @@
     // The hasIsEmptyValueFunction flag allows the hash table to automatically generate code to check
     // for the empty value when it can be done with the equality operator, but allows custom functions
     // for cases like String that need them.
     static const bool hasIsEmptyValueFunction = false;
 
+    // Used by WeakPtr to indicate that the value may become deleted without being explicitly removed.
+    static const bool hasIsReleasedWeakValueFunction = false;
+
     // The starting table size. Can be overridden when we know beforehand that
     // a hash table will have at least N entries.
     static const unsigned minimumTableSize = 8;
 };
 
@@ -190,11 +193,11 @@
         auto valueToBeDestroyed = WTFMove(value);
         SimpleClassHashTraits<RefPtr<P>>::constructDeletedValue(value);
     }
 };
 
-template<typename P> struct HashTraits<Ref<P>> : SimpleClassHashTraits<Ref<P>> {
+template<typename P> struct RefHashTraits : SimpleClassHashTraits<Ref<P>> {
     static const bool emptyValueIsZero = true;
     static Ref<P> emptyValue() { return HashTableEmptyValue; }
 
     template <typename>
     static void constructEmptyValue(Ref<P>& slot)
@@ -213,10 +216,12 @@
 
     typedef Optional<Ref<P>> TakeType;
     static TakeType take(Ref<P>&& value) { return isEmptyValue(value) ? WTF::nullopt : Optional<Ref<P>>(WTFMove(value)); }
 };
 
+template<typename P> struct HashTraits<Ref<P>> : RefHashTraits<P> { };
+
 template<> struct HashTraits<String> : SimpleClassHashTraits<String> {
     static const bool hasIsEmptyValueFunction = true;
     static bool isEmptyValue(const String&);
 
     static void customDeleteBucket(String&);
@@ -234,10 +239,22 @@
 template<typename Traits, typename T> inline bool isHashTraitsEmptyValue(const T& value)
 {
     return HashTraitsEmptyValueChecker<Traits, Traits::hasIsEmptyValueFunction>::isEmptyValue(value);
 }
 
+template<typename Traits, bool hasIsReleasedWeakValueFunction> struct HashTraitsReleasedWeakValueChecker;
+template<typename Traits> struct HashTraitsReleasedWeakValueChecker<Traits, true> {
+    template<typename T> static bool isReleasedWeakValue(const T& value) { return Traits::isReleasedWeakValue(value); }
+};
+template<typename Traits> struct HashTraitsReleasedWeakValueChecker<Traits, false> {
+    template<typename T> static bool isReleasedWeakValue(const T&) { return false; }
+};
+template<typename Traits, typename T> inline bool isHashTraitsReleasedWeakValue(const T& value)
+{
+    return HashTraitsReleasedWeakValueChecker<Traits, Traits::hasIsReleasedWeakValueFunction>::isReleasedWeakValue(value);
+}
+
 template<typename Traits, typename T>
 struct HashTraitHasCustomDelete {
     static T& bucketArg;
     template<typename X> static std::true_type TestHasCustomDelete(X*, decltype(X::customDeleteBucket(bucketArg))* = nullptr);
     static std::false_type TestHasCustomDelete(...);
