diff a/modules/javafx.web/src/main/native/Source/WebCore/html/FormAssociatedElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/FormAssociatedElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/FormAssociatedElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/FormAssociatedElement.cpp
@@ -40,21 +40,21 @@
 using namespace HTMLNames;
 
 class FormAttributeTargetObserver final : private IdTargetObserver {
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    FormAttributeTargetObserver(const AtomicString& id, FormAssociatedElement&);
+    FormAttributeTargetObserver(const AtomString& id, FormAssociatedElement&);
 
 private:
     void idTargetChanged() override;
 
     FormAssociatedElement& m_element;
 };
 
 FormAssociatedElement::FormAssociatedElement(HTMLFormElement* form)
     : m_form(nullptr)
-    , m_formSetByParser(form)
+    , m_formSetByParser(makeWeakPtr(form))
 {
 }
 
 FormAssociatedElement::~FormAssociatedElement()
 {
@@ -72,11 +72,11 @@
 {
     HTMLElement& element = asHTMLElement();
     if (m_formSetByParser) {
         // The form could have been removed by a script during parsing.
         if (m_formSetByParser->isConnected())
-            setForm(m_formSetByParser);
+            setForm(m_formSetByParser.get());
         m_formSetByParser = nullptr;
     }
 
     if (m_form && element.rootElement() != m_form->rootElement())
         setForm(nullptr);
@@ -99,11 +99,11 @@
         setForm(nullptr);
 }
 
 HTMLFormElement* FormAssociatedElement::findAssociatedForm(const HTMLElement* element, HTMLFormElement* currentAssociatedForm)
 {
-    const AtomicString& formId(element->attributeWithoutSynchronization(formAttr));
+    const AtomString& formId(element->attributeWithoutSynchronization(formAttr));
     if (!formId.isNull() && element->isConnected()) {
         // The HTML5 spec says that the element should be associated with
         // the first element in the document to have an ID that equal to
         // the value of form attribute, so we put the result of
         // treeScope().getElementById() over the given element.
@@ -117,10 +117,15 @@
         return HTMLFormElement::findClosestFormAncestor(*element);
 
     return currentAssociatedForm;
 }
 
+HTMLFormElement* FormAssociatedElement::form() const
+{
+    return m_form.get();
+}
+
 void FormAssociatedElement::formOwnerRemovedFromTree(const Node& formRoot)
 {
     ASSERT(m_form);
     // Can't use RefPtr here beacuse this function might be called inside ~ShadowRoot via addChildNodesToDeletionQueue. See webkit.org/b/189493.
     Node* rootNode = &asHTMLElement();
@@ -144,13 +149,13 @@
     if (m_form == newForm)
         return;
     willChangeForm();
     if (m_form)
         m_form->removeFormElement(this);
-    m_form = newForm;
-    if (m_form)
-        m_form->registerFormElement(this);
+    m_form = makeWeakPtr(newForm);
+    if (newForm)
+        newForm->registerFormElement(this);
     didChangeForm();
 }
 
 void FormAssociatedElement::willChangeForm()
 {
@@ -170,25 +175,28 @@
     didChangeForm();
 }
 
 void FormAssociatedElement::resetFormOwner()
 {
-    RefPtr<HTMLFormElement> originalForm = m_form;
-    setForm(findAssociatedForm(&asHTMLElement(), m_form));
+    RefPtr<HTMLFormElement> originalForm = m_form.get();
+    setForm(findAssociatedForm(&asHTMLElement(), originalForm.get()));
     HTMLElement& element = asHTMLElement();
-    if (m_form && m_form != originalForm && m_form->isConnected())
+    auto* newForm = m_form.get();
+    if (newForm && newForm != originalForm && newForm->isConnected())
         element.document().didAssociateFormControl(element);
 }
 
 void FormAssociatedElement::formAttributeChanged()
 {
     HTMLElement& element = asHTMLElement();
     if (!element.hasAttributeWithoutSynchronization(formAttr)) {
         // The form attribute removed. We need to reset form owner here.
-        RefPtr<HTMLFormElement> originalForm = m_form;
+        RefPtr<HTMLFormElement> originalForm = m_form.get();
+        // FIXME: Why does this not pass originalForm to findClosestFormAncestor?
         setForm(HTMLFormElement::findClosestFormAncestor(element));
-        if (m_form && m_form != originalForm && m_form->isConnected())
+        auto* newForm = m_form.get();
+        if (newForm && newForm != originalForm && newForm->isConnected())
             element.document().didAssociateFormControl(element);
         m_formAttributeTargetObserver = nullptr;
     } else {
         resetFormOwner();
         if (element.isConnected())
@@ -269,30 +277,30 @@
 }
 
 void FormAssociatedElement::resetFormAttributeTargetObserver()
 {
     ASSERT_WITH_SECURITY_IMPLICATION(asHTMLElement().isConnected());
-    m_formAttributeTargetObserver = std::make_unique<FormAttributeTargetObserver>(asHTMLElement().attributeWithoutSynchronization(formAttr), *this);
+    m_formAttributeTargetObserver = makeUnique<FormAttributeTargetObserver>(asHTMLElement().attributeWithoutSynchronization(formAttr), *this);
 }
 
 void FormAssociatedElement::formAttributeTargetChanged()
 {
     resetFormOwner();
 }
 
-const AtomicString& FormAssociatedElement::name() const
+const AtomString& FormAssociatedElement::name() const
 {
-    const AtomicString& name = asHTMLElement().getNameAttribute();
+    const AtomString& name = asHTMLElement().getNameAttribute();
     return name.isNull() ? emptyAtom() : name;
 }
 
 bool FormAssociatedElement::isFormControlElementWithState() const
 {
     return false;
 }
 
-FormAttributeTargetObserver::FormAttributeTargetObserver(const AtomicString& id, FormAssociatedElement& element)
+FormAttributeTargetObserver::FormAttributeTargetObserver(const AtomString& id, FormAssociatedElement& element)
     : IdTargetObserver(element.asHTMLElement().treeScope().idTargetObserverRegistry(), id)
     , m_element(element)
 {
 }
 
