diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/ElementData.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/ElementData.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/ElementData.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/ElementData.h
@@ -86,13 +86,13 @@
 
     void setClassNames(const SpaceSplitString& classNames) const { m_classNames = classNames; }
     const SpaceSplitString& classNames() const { return m_classNames; }
     static ptrdiff_t classNamesMemoryOffset() { return OBJECT_OFFSETOF(ElementData, m_classNames); }
 
-    const AtomicString& idForStyleResolution() const { return m_idForStyleResolution; }
+    const AtomString& idForStyleResolution() const { return m_idForStyleResolution; }
     static ptrdiff_t idForStyleResolutionMemoryOffset() { return OBJECT_OFFSETOF(ElementData, m_idForStyleResolution); }
-    void setIdForStyleResolution(const AtomicString& newId) const { m_idForStyleResolution = newId; }
+    void setIdForStyleResolution(const AtomString& newId) const { m_idForStyleResolution = newId; }
 
     const StyleProperties* inlineStyle() const { return m_inlineStyle.get(); }
     const StyleProperties* presentationAttributeStyle() const;
 
     unsigned length() const;
@@ -100,11 +100,11 @@
 
     AttributeIteratorAccessor attributesIterator() const;
     const Attribute& attributeAt(unsigned index) const;
     const Attribute* findAttributeByName(const QualifiedName&) const;
     unsigned findAttributeIndexByName(const QualifiedName&) const;
-    unsigned findAttributeIndexByName(const AtomicString& name, bool shouldIgnoreAttributeCase) const;
+    unsigned findAttributeIndexByName(const AtomString& name, bool shouldIgnoreAttributeCase) const;
     const Attribute* findLanguageAttribute() const;
 
     bool hasID() const { return !m_idForStyleResolution.isNull(); }
     bool hasClass() const { return !m_classNames.isEmpty(); }
     bool hasName() const { return m_arraySizeAndFlags & s_flagHasNameAttribute; }
@@ -159,11 +159,11 @@
     bool animatedSVGAttributesAreDirty() const { return m_arraySizeAndFlags & s_flagAnimatedSVGAttributesAreDirty; }
     void setAnimatedSVGAttributesAreDirty(bool dirty) const { updateFlag(s_flagAnimatedSVGAttributesAreDirty, dirty); }
 
     mutable RefPtr<StyleProperties> m_inlineStyle;
     mutable SpaceSplitString m_classNames;
-    mutable AtomicString m_idForStyleResolution;
+    mutable AtomString m_idForStyleResolution;
 
 private:
     friend class Element;
     friend class StyledElement;
     friend class ShareableElementData;
@@ -171,11 +171,11 @@
     friend class SVGElement;
 
     void destroy();
 
     const Attribute* attributeBase() const;
-    const Attribute* findAttributeByName(const AtomicString& name, bool shouldIgnoreAttributeCase) const;
+    const Attribute* findAttributeByName(const AtomString& name, bool shouldIgnoreAttributeCase) const;
 
     Ref<UniqueElementData> makeUniqueCopy() const;
 };
 
 #if COMPILER(MSVC)
@@ -204,11 +204,11 @@
 public:
     static Ref<UniqueElementData> create();
     Ref<ShareableElementData> makeShareableCopy() const;
 
     // These functions do no error/duplicate checking.
-    void addAttribute(const QualifiedName&, const AtomicString&);
+    void addAttribute(const QualifiedName&, const AtomString&);
     void removeAttribute(unsigned index);
 
     Attribute& attributeAt(unsigned index);
     Attribute* findAttributeByName(const QualifiedName&);
 
@@ -258,11 +258,11 @@
         return AttributeIteratorAccessor(attributeVector.data(), attributeVector.size());
     }
     return AttributeIteratorAccessor(downcast<ShareableElementData>(*this).m_attributeArray, arraySize());
 }
 
-ALWAYS_INLINE const Attribute* ElementData::findAttributeByName(const AtomicString& name, bool shouldIgnoreAttributeCase) const
+ALWAYS_INLINE const Attribute* ElementData::findAttributeByName(const AtomString& name, bool shouldIgnoreAttributeCase) const
 {
     unsigned index = findAttributeIndexByName(name, shouldIgnoreAttributeCase);
     if (index != attributeNotFound)
         return &attributeAt(index);
     return nullptr;
@@ -278,18 +278,18 @@
     return attributeNotFound;
 }
 
 // We use a boolean parameter instead of calling shouldIgnoreAttributeCase so that the caller
 // can tune the behavior (hasAttribute is case sensitive whereas getAttribute is not).
-ALWAYS_INLINE unsigned ElementData::findAttributeIndexByName(const AtomicString& name, bool shouldIgnoreAttributeCase) const
+ALWAYS_INLINE unsigned ElementData::findAttributeIndexByName(const AtomString& name, bool shouldIgnoreAttributeCase) const
 {
     unsigned attributeCount = length();
     if (!attributeCount)
         return attributeNotFound;
 
     const Attribute* attributes = attributeBase();
-    const AtomicString& caseAdjustedName = shouldIgnoreAttributeCase ? name.convertToASCIILowercase() : name;
+    const AtomString& caseAdjustedName = shouldIgnoreAttributeCase ? name.convertToASCIILowercase() : name;
 
     unsigned attributeIndex = 0;
     do {
         const Attribute& attribute = attributes[attributeIndex];
         if (!attribute.name().hasPrefix()) {
@@ -320,11 +320,11 @@
 {
     RELEASE_ASSERT(index < length());
     return attributeBase()[index];
 }
 
-inline void UniqueElementData::addAttribute(const QualifiedName& attributeName, const AtomicString& value)
+inline void UniqueElementData::addAttribute(const QualifiedName& attributeName, const AtomString& value)
 {
     m_attributeVector.append(Attribute(attributeName, value));
 }
 
 inline void UniqueElementData::removeAttribute(unsigned index)
