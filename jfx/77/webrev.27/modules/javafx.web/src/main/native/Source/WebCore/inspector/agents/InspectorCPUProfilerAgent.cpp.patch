diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorCPUProfilerAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorCPUProfilerAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorCPUProfilerAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorCPUProfilerAgent.cpp
@@ -37,22 +37,27 @@
 
 using namespace Inspector;
 
 InspectorCPUProfilerAgent::InspectorCPUProfilerAgent(PageAgentContext& context)
     : InspectorAgentBase("CPUProfiler"_s, context)
-    , m_frontendDispatcher(std::make_unique<Inspector::CPUProfilerFrontendDispatcher>(context.frontendRouter))
+    , m_frontendDispatcher(makeUnique<Inspector::CPUProfilerFrontendDispatcher>(context.frontendRouter))
     , m_backendDispatcher(Inspector::CPUProfilerBackendDispatcher::create(context.backendDispatcher, this))
 {
 }
 
+InspectorCPUProfilerAgent::~InspectorCPUProfilerAgent() = default;
+
 void InspectorCPUProfilerAgent::didCreateFrontendAndBackend(FrontendRouter*, BackendDispatcher*)
 {
     m_instrumentingAgents.setInspectorCPUProfilerAgent(this);
 }
 
 void InspectorCPUProfilerAgent::willDestroyFrontendAndBackend(DisconnectReason)
 {
+    ErrorString ignored;
+    stopTracking(ignored);
+
     m_instrumentingAgents.setInspectorCPUProfilerAgent(nullptr);
 }
 
 void InspectorCPUProfilerAgent::startTracking(ErrorString&)
 {
@@ -75,20 +80,47 @@
 
     ResourceUsageThread::removeObserver(this);
 
     m_tracking = false;
 
-    m_frontendDispatcher->trackingComplete();
+    m_frontendDispatcher->trackingComplete(m_environment.executionStopwatch()->elapsedTime().seconds());
+}
+
+static Ref<Protocol::CPUProfiler::ThreadInfo> buildThreadInfo(const ThreadCPUInfo& thread)
+{
+    ASSERT(thread.cpu <= 100);
+
+    auto threadInfo = Protocol::CPUProfiler::ThreadInfo::create()
+        .setName(thread.name)
+        .setUsage(thread.cpu)
+        .release();
+
+    if (thread.type == ThreadCPUInfo::Type::Main)
+        threadInfo->setType(Protocol::CPUProfiler::ThreadInfo::Type::Main);
+    else if (thread.type == ThreadCPUInfo::Type::WebKit)
+        threadInfo->setType(Protocol::CPUProfiler::ThreadInfo::Type::WebKit);
+
+    if (!thread.identifier.isEmpty())
+        threadInfo->setTargetId(thread.identifier);
+
+    return threadInfo;
 }
 
 void InspectorCPUProfilerAgent::collectSample(const ResourceUsageData& data)
 {
     auto event = Protocol::CPUProfiler::Event::create()
         .setTimestamp(m_environment.executionStopwatch()->elapsedTimeSince(data.timestamp).seconds())
         .setUsage(data.cpuExcludingDebuggerThreads)
         .release();
 
+    if (!data.cpuThreads.isEmpty()) {
+        RefPtr<JSON::ArrayOf<Protocol::CPUProfiler::ThreadInfo>> threads = JSON::ArrayOf<Protocol::CPUProfiler::ThreadInfo>::create();
+        for (auto& threadInfo : data.cpuThreads)
+            threads->addItem(buildThreadInfo(threadInfo));
+        event->setThreads(WTFMove(threads));
+    }
+
     m_frontendDispatcher->trackingUpdate(WTFMove(event));
 }
 
 } // namespace WebCore
 
