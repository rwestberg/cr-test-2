diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaStream.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaStream.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaStream.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaStream.h
@@ -1,9 +1,9 @@
 /*
  * Copyright (C) 2011 Google Inc. All rights reserved.
  * Copyright (C) 2011, 2015 Ericsson AB. All rights reserved.
- * Copyright (C) 2013-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  * Copyright (C) 2013 Nokia Corporation and/or its subsidiary(-ies).
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
@@ -38,37 +38,41 @@
 #include "PlatformMediaSession.h"
 #include "ScriptWrappable.h"
 #include "Timer.h"
 #include "URLRegistry.h"
 #include <wtf/HashMap.h>
+#include <wtf/LoggerHelper.h>
 #include <wtf/RefCounted.h>
 #include <wtf/RefPtr.h>
 
 namespace WebCore {
 
 class Document;
 
 class MediaStream final
-    : public URLRegistrable
-    , public EventTargetWithInlineData
+    : public EventTargetWithInlineData
     , public ActiveDOMObject
     , public MediaStreamTrack::Observer
     , public MediaStreamPrivate::Observer
     , private MediaCanStartListener
     , private PlatformMediaSessionClient
+#if !RELEASE_LOG_DISABLED
+    , private LoggerHelper
+#endif
     , public RefCounted<MediaStream> {
+    WTF_MAKE_ISO_ALLOCATED(MediaStream);
 public:
     class Observer {
     public:
         virtual ~Observer() = default;
         virtual void didAddOrRemoveTrack() = 0;
     };
 
-    static Ref<MediaStream> create(ScriptExecutionContext&);
-    static Ref<MediaStream> create(ScriptExecutionContext&, MediaStream&);
-    static Ref<MediaStream> create(ScriptExecutionContext&, const MediaStreamTrackVector&);
-    static Ref<MediaStream> create(ScriptExecutionContext&, Ref<MediaStreamPrivate>&&);
+    static Ref<MediaStream> create(Document&);
+    static Ref<MediaStream> create(Document&, MediaStream&);
+    static Ref<MediaStream> create(Document&, const MediaStreamTrackVector&);
+    static Ref<MediaStream> create(Document&, Ref<MediaStreamPrivate>&&);
     virtual ~MediaStream();
 
     String id() const { return m_private->id(); }
 
     void addTrack(MediaStreamTrack&);
@@ -87,22 +91,17 @@
     MediaStreamPrivate& privateStream() { return m_private.get(); }
 
     void startProducingData();
     void stopProducingData();
 
-    void endCaptureTracks();
-
     // EventTarget
     EventTargetInterface eventTargetInterface() const final { return MediaStreamEventTargetInterfaceType; }
     ScriptExecutionContext* scriptExecutionContext() const final { return ContextDestructionObserver::scriptExecutionContext(); }
 
     using RefCounted<MediaStream>::ref;
     using RefCounted<MediaStream>::deref;
 
-    // URLRegistrable
-    URLRegistry& registry() const override;
-
     void addObserver(Observer*);
     void removeObserver(Observer*);
 
     void addTrackFromPlatform(Ref<MediaStreamTrack>&&);
 
@@ -114,12 +113,19 @@
     enum class StreamModifier { DomAPI, Platform };
     bool internalAddTrack(Ref<MediaStreamTrack>&&, StreamModifier);
     WEBCORE_EXPORT bool internalRemoveTrack(const String&, StreamModifier);
 
 protected:
-    MediaStream(ScriptExecutionContext&, const MediaStreamTrackVector&);
-    MediaStream(ScriptExecutionContext&, Ref<MediaStreamPrivate>&&);
+    MediaStream(Document&, const MediaStreamTrackVector&);
+    MediaStream(Document&, Ref<MediaStreamPrivate>&&);
+
+#if !RELEASE_LOG_DISABLED
+    const Logger& logger() const final { return m_private->logger(); }
+    const void* logIdentifier() const final { return m_private->logIdentifier(); }
+    WTFLogChannel& logChannel() const final;
+    const char* logClassName() const final { return "MediaStream"; }
+#endif
 
 private:
 
     // EventTarget
     void refEventTarget() final { ref(); }
@@ -151,10 +157,11 @@
     bool shouldOverrideBackgroundPlaybackRestriction(PlatformMediaSession::InterruptionType) const final { return false; }
     String sourceApplicationIdentifier() const final;
     bool canProduceAudio() const final;
     Document* hostingDocument() const final { return document(); }
     bool processingUserGestureForMedia() const final;
+    bool shouldOverridePauseDuringRouteChange() const final { return true; }
 
     // ActiveDOMObject API.
     void stop() final;
     const char* activeDOMObjectName() const final;
     bool canSuspendForDocumentSuspension() const final;
