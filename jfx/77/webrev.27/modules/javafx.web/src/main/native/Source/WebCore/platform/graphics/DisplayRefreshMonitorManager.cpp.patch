diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/DisplayRefreshMonitorManager.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/DisplayRefreshMonitorManager.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/DisplayRefreshMonitorManager.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/DisplayRefreshMonitorManager.cpp
@@ -43,25 +43,23 @@
 }
 
 DisplayRefreshMonitor* DisplayRefreshMonitorManager::createMonitorForClient(DisplayRefreshMonitorClient& client)
 {
     PlatformDisplayID clientDisplayID = client.displayID();
-    for (const RefPtr<DisplayRefreshMonitor>& monitor : m_monitors) {
-        if (monitor->displayID() != clientDisplayID)
-            continue;
-        monitor->addClient(client);
-        return monitor.get();
+    if (auto* existingMonitor = monitorForDisplayID(clientDisplayID)) {
+        existingMonitor->addClient(client);
+        return existingMonitor;
     }
 
     auto monitor = DisplayRefreshMonitor::create(client);
     if (!monitor)
         return nullptr;
 
     LOG(RequestAnimationFrame, "DisplayRefreshMonitorManager::createMonitorForClient() - created monitor %p", monitor.get());
     monitor->addClient(client);
     DisplayRefreshMonitor* result = monitor.get();
-    m_monitors.append(WTFMove(monitor));
+    m_monitors.append({ WTFMove(monitor) });
     return result;
 }
 
 void DisplayRefreshMonitorManager::registerClient(DisplayRefreshMonitorClient& client)
 {
@@ -75,19 +73,17 @@
 {
     if (!client.hasDisplayID())
         return;
 
     PlatformDisplayID clientDisplayID = client.displayID();
-    for (size_t i = 0; i < m_monitors.size(); ++i) {
-        RefPtr<DisplayRefreshMonitor> monitor = m_monitors[i];
-        if (monitor->displayID() != clientDisplayID)
-            continue;
-        if (monitor->removeClient(client)) {
-            if (!monitor->hasClients())
-                m_monitors.remove(i);
-        }
+    auto index = findMonitorForDisplayID(clientDisplayID);
+    if (index == notFound)
         return;
+    RefPtr<DisplayRefreshMonitor> monitor = m_monitors[index].monitor;
+    if (monitor->removeClient(client)) {
+        if (!monitor->hasClients())
+            m_monitors.remove(index);
     }
 }
 
 bool DisplayRefreshMonitorManager::scheduleAnimation(DisplayRefreshMonitorClient& client)
 {
@@ -106,13 +102,13 @@
 {
     if (!monitor.shouldBeTerminated())
         return;
     LOG(RequestAnimationFrame, "DisplayRefreshMonitorManager::displayDidRefresh() - destroying monitor %p", &monitor);
 
-    size_t monitorIndex = m_monitors.find(&monitor);
-    if (monitorIndex != notFound)
-        m_monitors.remove(monitorIndex);
+    m_monitors.removeFirstMatching([&](auto& monitorWrapper) {
+        return monitorWrapper.monitor == &monitor;
+    });
 }
 
 void DisplayRefreshMonitorManager::windowScreenDidChange(PlatformDisplayID displayID, DisplayRefreshMonitorClient& client)
 {
     if (client.hasDisplayID() && client.displayID() == displayID)
@@ -125,14 +121,26 @@
         scheduleAnimation(client);
 }
 
 void DisplayRefreshMonitorManager::displayWasUpdated(PlatformDisplayID displayID)
 {
-    for (const auto& monitor : m_monitors) {
-        if (displayID == monitor->displayID() && monitor->hasRequestedRefreshCallback())
-            monitor->displayLinkFired();
-    }
+    auto* monitor = monitorForDisplayID(displayID);
+    if (monitor && monitor->hasRequestedRefreshCallback())
+        monitor->displayLinkFired();
+}
+
+size_t DisplayRefreshMonitorManager::findMonitorForDisplayID(PlatformDisplayID displayID) const
+{
+    return m_monitors.findMatching([&](auto& monitorWrapper) {
+        return monitorWrapper.monitor->displayID() == displayID;
+    });
+}
+
+DisplayRefreshMonitor* DisplayRefreshMonitorManager::monitorForDisplayID(PlatformDisplayID displayID) const
+{
+    auto index = findMonitorForDisplayID(displayID);
+    return index == notFound ? nullptr : m_monitors[index].monitor.get();
 }
 
 }
 
 #endif // USE(REQUEST_ANIMATION_FRAME_DISPLAY_MONITOR)
