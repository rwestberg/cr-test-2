diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MockRealtimeVideoSource.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MockRealtimeVideoSource.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MockRealtimeVideoSource.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MockRealtimeVideoSource.h
@@ -34,20 +34,21 @@
 #if ENABLE(MEDIA_STREAM)
 
 #include "FontCascade.h"
 #include "ImageBuffer.h"
 #include "MockMediaDevice.h"
+#include "OrientationNotifier.h"
 #include "RealtimeMediaSourceFactory.h"
-#include "RealtimeVideoSource.h"
+#include "RealtimeVideoCaptureSource.h"
 #include <wtf/RunLoop.h>
 
 namespace WebCore {
 
 class FloatRect;
 class GraphicsContext;
 
-class MockRealtimeVideoSource : public RealtimeVideoSource {
+class MockRealtimeVideoSource : public RealtimeVideoCaptureSource, private OrientationNotifier::Observer {
 public:
 
     static CaptureSourceOrError create(String&& deviceID, String&& name, String&& hashSalt, const MediaConstraints*);
 
 protected:
@@ -58,10 +59,11 @@
     void setCurrentFrame(MediaSample&);
     ImageBuffer* imageBuffer() const;
 
     Seconds elapsedTime();
     void settingsDidChange(OptionSet<RealtimeMediaSourceSettings::Flag>) override;
+    MediaSample::VideoRotation sampleRotation() const final { return m_deviceOrientation; }
 
 private:
     const RealtimeMediaSourceCapabilities& capabilities() final;
     const RealtimeMediaSourceSettings& settings() final;
 
@@ -69,23 +71,29 @@
     void stopProducingData() final;
     bool isCaptureSource() const final { return true; }
     CaptureDevice::DeviceType deviceType() const final { return CaptureDevice::DeviceType::Camera; }
     bool supportsSizeAndFrameRate(Optional<int> width, Optional<int> height, Optional<double>) final;
     void setSizeAndFrameRate(Optional<int> width, Optional<int> height, Optional<double>) final;
-    void setSizeAndFrameRateWithPreset(IntSize, double, RefPtr<VideoPreset>) final;
+    void setFrameRateWithPreset(double, RefPtr<VideoPreset>) final;
     IntSize captureSize() const;
 
     void generatePresets() final;
 
+    bool isMockSource() const final { return true; }
+
+    // OrientationNotifier::Observer
+    void orientationChanged(int orientation) final;
+    void monitorOrientation(OrientationNotifier&) final;
+
     void drawAnimation(GraphicsContext&);
     void drawText(GraphicsContext&);
     void drawBoxes(GraphicsContext&);
 
     void generateFrame();
     void startCaptureTimer();
 
-    void delaySamples(Seconds) override;
+    void delaySamples(Seconds) final;
 
     bool mockCamera() const { return WTF::holds_alternative<MockCameraProperties>(m_device.properties); }
     bool mockDisplay() const { return WTF::holds_alternative<MockDisplayProperties>(m_device.properties); }
     bool mockScreen() const { return mockDisplayType(CaptureDevice::DeviceType::Screen); }
     bool mockWindow() const { return mockDisplayType(CaptureDevice::DeviceType::Window); }
@@ -110,10 +118,11 @@
     Optional<RealtimeMediaSourceSettings> m_currentSettings;
     RealtimeMediaSourceSupportedConstraints m_supportedConstraints;
     Color m_fillColor { Color::black };
     MockMediaDevice m_device;
     RefPtr<VideoPreset> m_preset;
+    MediaSample::VideoRotation m_deviceOrientation { MediaSample::VideoRotation::None };
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(MEDIA_STREAM)
