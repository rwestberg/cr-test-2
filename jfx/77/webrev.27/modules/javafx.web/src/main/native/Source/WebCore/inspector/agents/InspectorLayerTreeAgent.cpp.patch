diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorLayerTreeAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorLayerTreeAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorLayerTreeAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorLayerTreeAgent.cpp
@@ -46,28 +46,25 @@
 
 using namespace Inspector;
 
 InspectorLayerTreeAgent::InspectorLayerTreeAgent(WebAgentContext& context)
     : InspectorAgentBase("LayerTree"_s, context)
-    , m_frontendDispatcher(std::make_unique<Inspector::LayerTreeFrontendDispatcher>(context.frontendRouter))
+    , m_frontendDispatcher(makeUnique<Inspector::LayerTreeFrontendDispatcher>(context.frontendRouter))
     , m_backendDispatcher(Inspector::LayerTreeBackendDispatcher::create(context.backendDispatcher, this))
 {
 }
 
-InspectorLayerTreeAgent::~InspectorLayerTreeAgent()
-{
-    reset();
-}
+InspectorLayerTreeAgent::~InspectorLayerTreeAgent() = default;
 
 void InspectorLayerTreeAgent::didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*)
 {
 }
 
 void InspectorLayerTreeAgent::willDestroyFrontendAndBackend(Inspector::DisconnectReason)
 {
-    ErrorString unused;
-    disable(unused);
+    ErrorString ignored;
+    disable(ignored);
 }
 
 void InspectorLayerTreeAgent::reset()
 {
     m_documentLayerToIdMap.clear();
@@ -83,10 +80,12 @@
 }
 
 void InspectorLayerTreeAgent::disable(ErrorString&)
 {
     m_instrumentingAgents.setInspectorLayerTreeAgent(nullptr);
+
+    reset();
 }
 
 void InspectorLayerTreeAgent::layerTreeDidChange()
 {
     if (m_suppressLayerChangeEvents)
@@ -111,17 +110,17 @@
 {
     layers = JSON::ArrayOf<Inspector::Protocol::LayerTree::Layer>::create();
 
     auto* node = m_instrumentingAgents.inspectorDOMAgent()->nodeForId(nodeId);
     if (!node) {
-        errorString = "Provided node id doesn't match any known node"_s;
+        errorString = "Missing node for given nodeId"_s;
         return;
     }
 
     auto* renderer = node->renderer();
     if (!renderer) {
-        errorString = "Node for provided node id doesn't have a renderer"_s;
+        errorString = "Missing renderer of node for given nodeId"_s;
         return;
     }
 
     if (!is<RenderElement>(*renderer))
         return;
@@ -237,11 +236,11 @@
 void InspectorLayerTreeAgent::reasonsForCompositingLayer(ErrorString& errorString, const String& layerId, RefPtr<Inspector::Protocol::LayerTree::CompositingReasons>& compositingReasonsResult)
 {
     const RenderLayer* renderLayer = m_idToLayer.get(layerId);
 
     if (!renderLayer) {
-        errorString = "Could not find a bound layer for the provided id"_s;
+        errorString = "Missing render layer for given layerId"_s;
         return;
     }
 
     OptionSet<CompositingReason> reasons = renderLayer->compositor().reasonsForCompositing(*renderLayer);
     auto compositingReasons = Inspector::Protocol::LayerTree::CompositingReasons::create().release();
@@ -274,13 +273,15 @@
         compositingReasons->setPositionFixed(true);
 
     if (reasons.contains(CompositingReason::PositionSticky))
         compositingReasons->setPositionSticky(true);
 
-    if (reasons.contains(CompositingReason::OverflowScrollingTouch))
+    if (reasons.contains(CompositingReason::OverflowScrolling))
         compositingReasons->setOverflowScrollingTouch(true);
 
+    // FIXME: handle OverflowScrollPositioning (webkit.org/b/195985).
+
     if (reasons.contains(CompositingReason::Stacking))
         compositingReasons->setStacking(true);
 
     if (reasons.contains(CompositingReason::Overlap))
         compositingReasons->setOverlap(true);
