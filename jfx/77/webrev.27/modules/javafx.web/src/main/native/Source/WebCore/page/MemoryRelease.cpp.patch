diff a/modules/javafx.web/src/main/native/Source/WebCore/page/MemoryRelease.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/MemoryRelease.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/MemoryRelease.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/MemoryRelease.cpp
@@ -48,19 +48,20 @@
 #include "StyleScope.h"
 #include "StyledElement.h"
 #include "TextPainter.h"
 #include "WorkerThread.h"
 #include <wtf/FastMalloc.h>
+#include <wtf/ResourceUsage.h>
 #include <wtf/SystemTracing.h>
 
 #if PLATFORM(COCOA)
 #include "ResourceUsageThread.h"
 #endif
 
 namespace WebCore {
 
-static void releaseNoncriticalMemory()
+static void releaseNoncriticalMemory(MaintainMemoryCache maintainMemoryCache)
 {
     RenderTheme::singleton().purgeCaches();
 
     FontCache::singleton().purgeInactiveFontData();
 
@@ -68,24 +69,28 @@
     TextPainter::clearGlyphDisplayLists();
 
     for (auto* document : Document::allDocuments())
         document->clearSelectorQueryCache();
 
-    MemoryCache::singleton().pruneDeadResourcesToSize(0);
+    if (maintainMemoryCache == MaintainMemoryCache::No)
+        MemoryCache::singleton().pruneDeadResourcesToSize(0);
 
     InlineStyleSheetOwner::clearCache();
 }
 
-static void releaseCriticalMemory(Synchronous synchronous, MaintainPageCache maintainPageCache)
+static void releaseCriticalMemory(Synchronous synchronous, MaintainPageCache maintainPageCache, MaintainMemoryCache maintainMemoryCache)
 {
     // Right now, the only reason we call release critical memory while not under memory pressure is if the process is about to be suspended.
     if (maintainPageCache == MaintainPageCache::No) {
         PruningReason pruningReason = MemoryPressureHandler::singleton().isUnderMemoryPressure() ? PruningReason::MemoryPressure : PruningReason::ProcessSuspended;
         PageCache::singleton().pruneToSizeNow(0, pruningReason);
     }
 
-    MemoryCache::singleton().pruneLiveResourcesToSize(0, /*shouldDestroyDecodedDataForAllLiveResources*/ true);
+    if (maintainMemoryCache == MaintainMemoryCache::No) {
+        auto shouldDestroyDecodedDataForAllLiveResources = true;
+        MemoryCache::singleton().pruneLiveResourcesToSize(0, shouldDestroyDecodedDataForAllLiveResources);
+    }
 
     CSSValuePool::singleton().drain();
 
     for (auto& document : copyToVectorOf<RefPtr<Document>>(Document::allDocuments())) {
         document->styleScope().releaseMemory();
@@ -111,21 +116,21 @@
         GCController::singleton().garbageCollectSoon();
 #endif
     }
 }
 
-void releaseMemory(Critical critical, Synchronous synchronous, MaintainPageCache maintainPageCache)
+void releaseMemory(Critical critical, Synchronous synchronous, MaintainPageCache maintainPageCache, MaintainMemoryCache maintainMemoryCache)
 {
     TraceScope scope(MemoryPressureHandlerStart, MemoryPressureHandlerEnd, static_cast<uint64_t>(critical), static_cast<uint64_t>(synchronous));
 
     if (critical == Critical::Yes) {
         // Return unused pages back to the OS now as this will likely give us a little memory to work with.
         WTF::releaseFastMallocFreeMemory();
-        releaseCriticalMemory(synchronous, maintainPageCache);
+        releaseCriticalMemory(synchronous, maintainPageCache, maintainMemoryCache);
     }
 
-    releaseNoncriticalMemory();
+    releaseNoncriticalMemory(maintainMemoryCache);
 
     platformReleaseMemory(critical);
 
     if (synchronous == Synchronous::Yes) {
         // FastMalloc has lock-free thread specific caches that can only be cleared from the thread itself.
