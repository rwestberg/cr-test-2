diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorMemoryAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorMemoryAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorMemoryAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorMemoryAgent.cpp
@@ -38,37 +38,49 @@
 
 using namespace Inspector;
 
 InspectorMemoryAgent::InspectorMemoryAgent(PageAgentContext& context)
     : InspectorAgentBase("Memory"_s, context)
-    , m_frontendDispatcher(std::make_unique<Inspector::MemoryFrontendDispatcher>(context.frontendRouter))
+    , m_frontendDispatcher(makeUnique<Inspector::MemoryFrontendDispatcher>(context.frontendRouter))
     , m_backendDispatcher(Inspector::MemoryBackendDispatcher::create(context.backendDispatcher, this))
 {
 }
 
+InspectorMemoryAgent::~InspectorMemoryAgent() = default;
+
 void InspectorMemoryAgent::didCreateFrontendAndBackend(FrontendRouter*, BackendDispatcher*)
 {
-    m_instrumentingAgents.setInspectorMemoryAgent(this);
 }
 
 void InspectorMemoryAgent::willDestroyFrontendAndBackend(DisconnectReason)
 {
-    m_instrumentingAgents.setInspectorMemoryAgent(nullptr);
-
     ErrorString ignored;
-    stopTracking(ignored);
     disable(ignored);
 }
 
-void InspectorMemoryAgent::enable(ErrorString&)
+void InspectorMemoryAgent::enable(ErrorString& errorString)
 {
-    m_enabled = true;
+    if (m_instrumentingAgents.inspectorMemoryAgent() == this) {
+        errorString = "Memory domain already enabled"_s;
+        return;
+    }
+
+    m_instrumentingAgents.setInspectorMemoryAgent(this);
 }
 
-void InspectorMemoryAgent::disable(ErrorString&)
+void InspectorMemoryAgent::disable(ErrorString& errorString)
 {
-    m_enabled = false;
+    if (m_instrumentingAgents.inspectorMemoryAgent() != this) {
+        errorString = "Memory domain already disabled"_s;
+        return;
+    }
+
+    m_instrumentingAgents.setInspectorMemoryAgent(nullptr);
+
+    m_tracking = false;
+
+    ResourceUsageThread::removeObserver(this);
 }
 
 void InspectorMemoryAgent::startTracking(ErrorString&)
 {
     if (m_tracking)
@@ -90,18 +102,15 @@
 
     ResourceUsageThread::removeObserver(this);
 
     m_tracking = false;
 
-    m_frontendDispatcher->trackingComplete();
+    m_frontendDispatcher->trackingComplete(m_environment.executionStopwatch()->elapsedTime().seconds());
 }
 
 void InspectorMemoryAgent::didHandleMemoryPressure(Critical critical)
 {
-    if (!m_enabled)
-        return;
-
     MemoryFrontendDispatcher::Severity severity = critical == Critical::Yes ? MemoryFrontendDispatcher::Severity::Critical : MemoryFrontendDispatcher::Severity::NonCritical;
     m_frontendDispatcher->memoryPressure(m_environment.executionStopwatch()->elapsedTime().seconds(), severity);
 }
 
 void InspectorMemoryAgent::collectSample(const ResourceUsageData& data)
