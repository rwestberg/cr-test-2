diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatAvoider.h b/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatAvoider.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatAvoider.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatAvoider.h
@@ -44,28 +44,25 @@
     WTF_MAKE_ISO_ALLOCATED(FloatAvoider);
 public:
     FloatAvoider(const Box&, const FloatingState&, const LayoutState&);
     virtual ~FloatAvoider() = default;
 
-    virtual Display::Box::Rect rect() const { return m_absoluteDisplayBox.rect(); }
-    Display::Box::Rect rectInContainingBlock() const;
+    virtual Display::Rect rect() const { return m_absoluteDisplayBox.rect(); }
+    Display::Rect rectInContainingBlock() const;
 
     struct HorizontalConstraints {
         Optional<PositionInContextRoot> left;
         Optional<PositionInContextRoot> right;
     };
     void setHorizontalConstraints(HorizontalConstraints);
     void setVerticalConstraint(PositionInContextRoot);
 
     bool overflowsContainingBlock() const;
 
-    void resetPosition();
-
 protected:
     virtual bool isLeftAligned() const { return layoutBox().style().isLeftToRightDirection(); }
-    virtual PositionInContextRoot initialHorizontalPosition() const;
-    virtual PositionInContextRoot initialVerticalPosition() const { return m_initialVerticalPosition; }
+    PositionInContextRoot initialHorizontalPosition() const;
 
     void resetHorizontalConstraints();
 
     virtual PositionInContextRoot horizontalPositionCandidate(HorizontalConstraints);
     virtual PositionInContextRoot verticalPositionCandidate(PositionInContextRoot);
@@ -79,17 +76,17 @@
     LayoutUnit marginBoxWidth() const { return marginStart() + displayBox().width() + marginEnd(); }
 
     const FloatingState& floatingState() const { return m_floatingState; }
     const Box& layoutBox() const { return *m_layoutBox; }
     const Display::Box& displayBox() const { return m_absoluteDisplayBox; }
+    Display::Box& displayBox() { return m_absoluteDisplayBox; }
 
 private:
     WeakPtr<const Box> m_layoutBox;
     const FloatingState& m_floatingState;
     Display::Box m_absoluteDisplayBox;
     Display::Box m_containingBlockAbsoluteDisplayBox;
-    PositionInContextRoot m_initialVerticalPosition;
 };
 
 }
 }
 #endif
