diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLCommaExpression.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLCommaExpression.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLCommaExpression.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLCommaExpression.h
@@ -26,35 +26,34 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "WHLSLExpression.h"
-#include "WHLSLLexer.h"
+#include <wtf/FastMalloc.h>
 #include <wtf/UniqueRef.h>
 #include <wtf/Vector.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class CommaExpression : public Expression {
+class CommaExpression final : public Expression {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    CommaExpression(Lexer::Token&& origin, Vector<UniqueRef<Expression>>&& list)
-        : Expression(WTFMove(origin))
+    CommaExpression(CodeLocation location, Vector<UniqueRef<Expression>>&& list)
+        : Expression(location, Kind::Comma)
         , m_list(WTFMove(list))
     {
     }
 
-    virtual ~CommaExpression() = default;
+    ~CommaExpression() = default;
 
     CommaExpression(const CommaExpression&) = delete;
     CommaExpression(CommaExpression&&) = default;
 
-    bool isCommaExpression() const override { return true; }
-
     Vector<UniqueRef<Expression>>& list() { return m_list; }
 
 private:
     Vector<UniqueRef<Expression>> m_list;
 };
@@ -63,8 +62,10 @@
 
 }
 
 }
 
+DEFINE_DEFAULT_DELETE(CommaExpression)
+
 SPECIALIZE_TYPE_TRAITS_WHLSL_EXPRESSION(CommaExpression, isCommaExpression())
 
 #endif
