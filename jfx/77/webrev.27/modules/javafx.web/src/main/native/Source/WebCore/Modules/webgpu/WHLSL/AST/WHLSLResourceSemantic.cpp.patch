diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLResourceSemantic.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLResourceSemantic.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLResourceSemantic.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLResourceSemantic.cpp
@@ -47,35 +47,31 @@
     case Mode::UnorderedAccessView:
         if (is<ReferenceType>(unnamedType)) {
             auto& referenceType = downcast<ReferenceType>(unnamedType);
             return referenceType.addressSpace() == AddressSpace::Constant || referenceType.addressSpace() == AddressSpace::Device;
         }
-        if (is<ArrayType>(unnamedType))
-            return true;
         if (is<TypeReference>(unnamedType)) {
             auto& typeReference = downcast<TypeReference>(unnamedType);
-            ASSERT(typeReference.resolvedType());
-            if (is<NativeTypeDeclaration>(*typeReference.resolvedType()))
-                return downcast<NativeTypeDeclaration>(*typeReference.resolvedType()).isTexture();
+            if (is<NativeTypeDeclaration>(typeReference.resolvedType()))
+                return downcast<NativeTypeDeclaration>(typeReference.resolvedType()).isTexture();
         }
         return false;
     case Mode::Texture:
         if (is<ReferenceType>(unnamedType))
             return downcast<ReferenceType>(unnamedType).addressSpace() == AddressSpace::Constant;
         if (is<ArrayType>(unnamedType))
             return true;
         if (is<TypeReference>(unnamedType)) {
             auto& typeReference = downcast<TypeReference>(unnamedType);
-            ASSERT(typeReference.resolvedType());
-            if (is<NativeTypeDeclaration>(*typeReference.resolvedType()))
-                return downcast<NativeTypeDeclaration>(*typeReference.resolvedType()).isTexture();
+            if (is<NativeTypeDeclaration>(typeReference.resolvedType()))
+                return downcast<NativeTypeDeclaration>(typeReference.resolvedType()).isTexture();
         }
         return false;
     case Mode::Buffer:
         if (is<ReferenceType>(unnamedType))
             return downcast<ReferenceType>(unnamedType).addressSpace() == AddressSpace::Constant;
-        return is<ArrayType>(unnamedType);
+        return false;
     case Mode::Sampler:
         return matches(unnamedType, intrinsics.samplerType());
     }
 }
 
