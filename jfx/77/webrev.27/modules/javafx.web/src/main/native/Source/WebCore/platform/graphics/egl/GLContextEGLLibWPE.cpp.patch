diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/egl/GLContextEGLLibWPE.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/egl/GLContextEGLLibWPE.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/egl/GLContextEGLLibWPE.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/egl/GLContextEGLLibWPE.cpp
@@ -17,20 +17,24 @@
  */
 
 #include "config.h"
 #include "GLContextEGL.h"
 
-#if USE(EGL) && USE(LIBWPE)
-
+#if USE(EGL) && USE(WPE_RENDERER)
 #include "PlatformDisplayLibWPE.h"
 
 #if USE(LIBEPOXY)
 // FIXME: For now default to the GBM EGL platform, but this should really be
 // somehow deducible from the build configuration.
 #define __GBM__ 1
 #include "EpoxyEGL.h"
 #else
+#if PLATFORM(WAYLAND)
+// These includes need to be in this order because wayland-egl.h defines WL_EGL_PLATFORM
+// and eglplatform.h, included by egl.h, checks that to decide whether it's Wayland platform.
+#include <wayland-egl.h>
+#endif
 #include <EGL/egl.h>
 #endif
 
 #include <wpe/wpe-egl.h>
 
@@ -57,20 +61,23 @@
     if (!getEGLConfig(display, &config, WindowSurface)) {
         WTFLogAlways("Cannot obtain EGL WPE context configuration: %s\n", lastErrorString());
         return nullptr;
     }
 
-    EGLContext context = createContextForEGLVersion(platformDisplay, config, sharingContext);
-    if (context == EGL_NO_CONTEXT) {
-        WTFLogAlways("Cannot create EGL WPE context: %s\n", lastErrorString());
+    auto* target = wpe_renderer_backend_egl_offscreen_target_create();
+    if (!target)
         return nullptr;
-    }
 
-    auto* target = wpe_renderer_backend_egl_offscreen_target_create();
     wpe_renderer_backend_egl_offscreen_target_initialize(target, downcast<PlatformDisplayLibWPE>(platformDisplay).backend());
     EGLNativeWindowType window = wpe_renderer_backend_egl_offscreen_target_get_native_window(target);
     if (!window) {
+        wpe_renderer_backend_egl_offscreen_target_destroy(target);
+        return nullptr;
+    }
+
+    EGLContext context = createContextForEGLVersion(platformDisplay, config, sharingContext);
+    if (context == EGL_NO_CONTEXT) {
         WTFLogAlways("Cannot create EGL WPE context: %s\n", lastErrorString());
         wpe_renderer_backend_egl_offscreen_target_destroy(target);
         return nullptr;
     }
 
@@ -91,6 +98,6 @@
         wpe_renderer_backend_egl_offscreen_target_destroy(m_wpeTarget);
 }
 
 } // namespace WebCore
 
-#endif // USE(EGL) && USE(LIBWPE)
+#endif // USE(EGL) && USE(WPE_RENDERER)
