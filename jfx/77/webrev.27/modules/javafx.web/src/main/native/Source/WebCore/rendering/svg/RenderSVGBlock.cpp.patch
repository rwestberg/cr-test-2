diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGBlock.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGBlock.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGBlock.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGBlock.cpp
@@ -34,20 +34,10 @@
 RenderSVGBlock::RenderSVGBlock(SVGGraphicsElement& element, RenderStyle&& style)
     : RenderBlockFlow(element, WTFMove(style))
 {
 }
 
-LayoutRect RenderSVGBlock::visualOverflowRect() const
-{
-    LayoutRect borderRect = borderBoxRect();
-
-    if (const ShadowData* textShadow = style().textShadow())
-        textShadow->adjustRectForShadow(borderRect);
-
-    return borderRect;
-}
-
 void RenderSVGBlock::updateFromStyle()
 {
     RenderBlockFlow::updateFromStyle();
 
     // RenderSVGlock, used by Render(SVGText|ForeignObject), is not allowed to call setHasOverflowClip(true).
@@ -83,6 +73,19 @@
         setNeedsBoundariesUpdate();
     RenderBlockFlow::styleDidChange(diff, oldStyle);
     SVGResourcesCache::clientStyleChanged(*this, diff, style());
 }
 
+void RenderSVGBlock::computeOverflow(LayoutUnit oldClientAfterEdge, bool recomputeFloats)
+{
+    RenderBlockFlow::computeOverflow(oldClientAfterEdge, recomputeFloats);
+
+    const auto* textShadow = style().textShadow();
+    if (!textShadow)
+        return;
+
+    LayoutRect borderRect = borderBoxRect();
+    textShadow->adjustRectForShadow(borderRect);
+    addVisualOverflow(snappedIntRect(borderRect));
+}
+
 }
