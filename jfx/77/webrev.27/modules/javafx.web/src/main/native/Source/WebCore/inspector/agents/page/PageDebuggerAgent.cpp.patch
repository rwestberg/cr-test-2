diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageDebuggerAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageDebuggerAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageDebuggerAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageDebuggerAgent.cpp
@@ -31,42 +31,66 @@
 
 #include "config.h"
 #include "PageDebuggerAgent.h"
 
 #include "CachedResource.h"
+#include "Chrome.h"
+#include "ChromeClient.h"
 #include "Document.h"
 #include "EventListener.h"
 #include "EventTarget.h"
 #include "Frame.h"
-#include "InspectorOverlay.h"
 #include "InspectorPageAgent.h"
 #include "InstrumentingAgents.h"
 #include "Page.h"
 #include "PageConsoleClient.h"
 #include "PageScriptDebugServer.h"
 #include "ScriptExecutionContext.h"
 #include "ScriptState.h"
 #include "Timer.h"
+#include "UserGestureIndicator.h"
 #include <JavaScriptCore/InjectedScript.h>
 #include <JavaScriptCore/InjectedScriptManager.h>
 #include <JavaScriptCore/ScriptCallStack.h>
 #include <JavaScriptCore/ScriptCallStackFactory.h>
 #include <wtf/NeverDestroyed.h>
-
+#include <wtf/Optional.h>
 
 namespace WebCore {
 
 using namespace Inspector;
 
-PageDebuggerAgent::PageDebuggerAgent(PageAgentContext& context, InspectorPageAgent* pageAgent, InspectorOverlay* overlay)
+PageDebuggerAgent::PageDebuggerAgent(PageAgentContext& context)
     : WebDebuggerAgent(context)
-    , m_page(context.inspectedPage)
-    , m_pageAgent(pageAgent)
-    , m_overlay(overlay)
+    , m_inspectedPage(context.inspectedPage)
 {
 }
 
+PageDebuggerAgent::~PageDebuggerAgent() = default;
+
+void PageDebuggerAgent::evaluateOnCallFrame(ErrorString& errorString, const String& callFrameId, const String& expression, const String* objectGroup, const bool* includeCommandLineAPI, const bool* doNotPauseOnExceptionsAndMuteConsole, const bool* returnByValue, const bool* generatePreview, const bool* saveResult, const bool* emulateUserGesture, RefPtr<Protocol::Runtime::RemoteObject>& result, Optional<bool>& wasThrown, Optional<int>& savedResultIndex)
+{
+    auto& pageChromeClient = m_inspectedPage.chrome().client();
+
+    auto shouldEmulateUserGesture = emulateUserGesture && *emulateUserGesture;
+
+    Optional<ProcessingUserGestureState> userGestureState = shouldEmulateUserGesture ? Optional<ProcessingUserGestureState>(ProcessingUserGesture) : WTF::nullopt;
+    UserGestureIndicator gestureIndicator(userGestureState);
+
+    bool userWasInteracting = false;
+    if (shouldEmulateUserGesture) {
+        userWasInteracting = pageChromeClient.userIsInteracting();
+        if (!userWasInteracting)
+            pageChromeClient.setUserIsInteracting(true);
+    }
+
+    WebDebuggerAgent::evaluateOnCallFrame(errorString, callFrameId, expression, objectGroup, includeCommandLineAPI, doNotPauseOnExceptionsAndMuteConsole, returnByValue, generatePreview, saveResult, emulateUserGesture, result, wasThrown, savedResultIndex);
+
+    if (shouldEmulateUserGesture && !userWasInteracting && pageChromeClient.userIsInteracting())
+        pageChromeClient.setUserIsInteracting(false);
+}
+
 void PageDebuggerAgent::enable()
 {
     WebDebuggerAgent::enable();
     m_instrumentingAgents.setPageDebuggerAgent(this);
 }
@@ -81,11 +105,11 @@
 {
     static NeverDestroyed<String> sourceMapHTTPHeader(MAKE_STATIC_STRING_IMPL("SourceMap"));
     static NeverDestroyed<String> sourceMapHTTPHeaderDeprecated(MAKE_STATIC_STRING_IMPL("X-SourceMap"));
 
     if (!script.url.isEmpty()) {
-        CachedResource* resource = m_pageAgent->cachedResource(&m_page.mainFrame(), URL({ }, script.url));
+        CachedResource* resource = InspectorPageAgent::cachedResource(&m_inspectedPage.mainFrame(), URL({ }, script.url));
         if (resource) {
             String sourceMapHeader = resource->response().httpHeaderField(sourceMapHTTPHeader);
             if (!sourceMapHeader.isEmpty())
                 return sourceMapHeader;
 
@@ -116,43 +140,39 @@
     PageConsoleClient::unmute();
 }
 
 void PageDebuggerAgent::breakpointActionLog(JSC::ExecState& state, const String& message)
 {
-    m_pageAgent->page().console().addMessage(MessageSource::JS, MessageLevel::Log, message, createScriptCallStack(&state));
+    m_inspectedPage.console().addMessage(MessageSource::JS, MessageLevel::Log, message, createScriptCallStack(&state));
 }
 
 InjectedScript PageDebuggerAgent::injectedScriptForEval(ErrorString& errorString, const int* executionContextId)
 {
     if (!executionContextId) {
-        JSC::ExecState* scriptState = mainWorldExecState(&m_pageAgent->mainFrame());
+        JSC::ExecState* scriptState = mainWorldExecState(&m_inspectedPage.mainFrame());
         return injectedScriptManager().injectedScriptFor(scriptState);
     }
 
     InjectedScript injectedScript = injectedScriptManager().injectedScriptForId(*executionContextId);
     if (injectedScript.hasNoValue())
-        errorString = "Execution context with given id not found."_s;
+        errorString = "Missing injected script for given executionContextId."_s;
 
     return injectedScript;
 }
 
-void PageDebuggerAgent::setOverlayMessage(ErrorString&, const String* message)
-{
-    m_overlay->setPausedInDebuggerMessage(message);
-}
-
 void PageDebuggerAgent::didClearMainFrameWindowObject()
 {
     didClearGlobalObject();
 }
 
 void PageDebuggerAgent::mainFrameStartedLoading()
 {
     if (isPaused()) {
         setSuppressAllPauses(true);
-        ErrorString unused;
-        resume(unused);
+
+        ErrorString ignored;
+        resume(ignored);
     }
 }
 
 void PageDebuggerAgent::mainFrameStoppedLoading()
 {
@@ -162,11 +182,11 @@
 void PageDebuggerAgent::mainFrameNavigated()
 {
     setSuppressAllPauses(false);
 }
 
-void PageDebuggerAgent::didAddEventListener(EventTarget& target, const AtomicString& eventType, EventListener& listener, bool capture)
+void PageDebuggerAgent::didAddEventListener(EventTarget& target, const AtomString& eventType, EventListener& listener, bool capture)
 {
     if (!breakpointsActive())
         return;
 
     auto& eventListeners = target.eventListeners(eventType);
@@ -175,14 +195,12 @@
     });
     if (position == notFound)
         return;
 
     auto& registeredListener = eventListeners.at(position);
-    if (m_registeredEventListeners.contains(registeredListener.get())) {
-        ASSERT_NOT_REACHED();
+    if (m_registeredEventListeners.contains(registeredListener.get()))
         return;
-    }
 
     JSC::ExecState* scriptState = target.scriptExecutionContext()->execState();
     if (!scriptState)
         return;
 
@@ -190,11 +208,11 @@
     m_registeredEventListeners.set(registeredListener.get(), identifier);
 
     didScheduleAsyncCall(scriptState, InspectorDebuggerAgent::AsyncCallType::EventListener, identifier, registeredListener->isOnce());
 }
 
-void PageDebuggerAgent::willRemoveEventListener(EventTarget& target, const AtomicString& eventType, EventListener& listener, bool capture)
+void PageDebuggerAgent::willRemoveEventListener(EventTarget& target, const AtomString& eventType, EventListener& listener, bool capture)
 {
     auto& eventListeners = target.eventListeners(eventType);
     size_t listenerIndex = eventListeners.findMatching([&](auto& registeredListener) {
         return &registeredListener->callback() == &listener && registeredListener->useCapture() == capture;
     });
@@ -240,14 +258,12 @@
 void PageDebuggerAgent::didPostMessage(const TimerBase& timer, JSC::ExecState& state)
 {
     if (!breakpointsActive())
         return;
 
-    if (m_postMessageTimers.contains(&timer)) {
-        ASSERT_NOT_REACHED();
+    if (m_postMessageTimers.contains(&timer))
         return;
-    }
 
     int postMessageIdentifier = m_nextPostMessageIdentifier++;
     m_postMessageTimers.set(&timer, postMessageIdentifier);
 
     didScheduleAsyncCall(&state, InspectorDebuggerAgent::AsyncCallType::PostMessage, postMessageIdentifier, true);
