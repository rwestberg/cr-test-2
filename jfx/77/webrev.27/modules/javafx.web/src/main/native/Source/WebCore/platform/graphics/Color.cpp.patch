diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Color.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Color.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Color.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/Color.cpp
@@ -375,11 +375,11 @@
 
 
     builder.appendNumber(static_cast<unsigned char>(blue()));
     if (colorHasAlpha) {
         builder.appendLiteral(", ");
-        builder.appendNumber(alpha() / 255.0f);
+        builder.appendFixedPrecisionNumber(alpha() / 255.0f);
     }
 
     builder.append(')');
     return builder.toString();
 }
@@ -540,11 +540,11 @@
 // FIXME: Use sRGBToHSL().
 void Color::getHSL(double& hue, double& saturation, double& lightness) const
 {
     // http://en.wikipedia.org/wiki/HSL_color_space. This is a direct copy of
     // the algorithm therein, although it's 360^o based and we end up wanting
-    // [0...1) based. It's clearer if we stick to 360^o until the end.
+    // [0...6) based. It's clearer if we stick to 360^o until the end.
     double r = static_cast<double>(red()) / 255.0;
     double g = static_cast<double>(green()) / 255.0;
     double b = static_cast<double>(blue()) / 255.0;
     double max = std::max(std::max(r, g), b);
     double min = std::min(std::min(r, g), b);
@@ -560,12 +560,12 @@
         hue = (60.0 * ((r - g) / chroma)) + 240.0;
 
     if (hue >= 360.0)
         hue -= 360.0;
 
-    // makeRGBAFromHSLA assumes that hue is in [0...1).
-    hue /= 360.0;
+    // makeRGBAFromHSLA assumes that hue is in [0...6).
+    hue /= 60.0;
 
     lightness = 0.5 * (max + min);
     if (!chroma)
         saturation = 0.0;
     else if (lightness <= 0.5)
