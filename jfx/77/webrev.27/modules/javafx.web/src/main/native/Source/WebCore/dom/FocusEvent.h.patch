diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/FocusEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/FocusEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/FocusEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/FocusEvent.h
@@ -33,11 +33,11 @@
 
 class Node;
 
 class FocusEvent final : public UIEvent {
 public:
-    static Ref<FocusEvent> create(const AtomicString& type, CanBubble canBubble, IsCancelable cancelable, RefPtr<WindowProxy>&& view, int detail, RefPtr<EventTarget>&& relatedTarget)
+    static Ref<FocusEvent> create(const AtomString& type, CanBubble canBubble, IsCancelable cancelable, RefPtr<WindowProxy>&& view, int detail, RefPtr<EventTarget>&& relatedTarget)
     {
         return adoptRef(*new FocusEvent(type, canBubble, cancelable, WTFMove(view), detail, WTFMove(relatedTarget)));
     }
 
     static Ref<FocusEvent> createForBindings()
@@ -47,21 +47,21 @@
 
     struct Init : UIEventInit {
         RefPtr<EventTarget> relatedTarget;
     };
 
-    static Ref<FocusEvent> create(const AtomicString& type, const Init& initializer)
+    static Ref<FocusEvent> create(const AtomString& type, const Init& initializer)
     {
         return adoptRef(*new FocusEvent(type, initializer));
     }
 
     EventTarget* relatedTarget() const final { return m_relatedTarget.get(); }
 
 private:
     FocusEvent() = default;
-    FocusEvent(const AtomicString& type, CanBubble, IsCancelable, RefPtr<WindowProxy>&&, int, RefPtr<EventTarget>&&);
-    FocusEvent(const AtomicString& type, const Init&);
+    FocusEvent(const AtomString& type, CanBubble, IsCancelable, RefPtr<WindowProxy>&&, int, RefPtr<EventTarget>&&);
+    FocusEvent(const AtomString& type, const Init&);
 
     EventInterface eventInterface() const final;
     bool isFocusEvent() const final;
 
     void setRelatedTarget(EventTarget& relatedTarget) final { m_relatedTarget = &relatedTarget; }
