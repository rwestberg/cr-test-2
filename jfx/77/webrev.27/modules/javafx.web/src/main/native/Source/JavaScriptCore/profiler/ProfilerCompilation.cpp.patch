diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/profiler/ProfilerCompilation.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/profiler/ProfilerCompilation.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/profiler/ProfilerCompilation.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/profiler/ProfilerCompilation.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2012-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2012-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -34,16 +34,16 @@
 #include <wtf/StringPrintStream.h>
 
 namespace JSC { namespace Profiler {
 
 Compilation::Compilation(Bytecodes* bytecodes, CompilationKind kind)
-    : m_bytecodes(bytecodes)
-    , m_kind(kind)
-    , m_jettisonReason(NotJettisoned)
+    : m_kind(kind)
+    , m_bytecodes(bytecodes)
     , m_numInlinedGetByIds(0)
     , m_numInlinedPutByIds(0)
     , m_numInlinedCalls(0)
+    , m_jettisonReason(NotJettisoned)
     , m_uid(UID::create())
 {
 }
 
 Compilation::~Compilation() { }
@@ -77,11 +77,11 @@
 
 ExecutionCounter* Compilation::executionCounterFor(const OriginStack& origin)
 {
     std::unique_ptr<ExecutionCounter>& counter = m_counters.add(origin, nullptr).iterator->value;
     if (!counter)
-        counter = std::make_unique<ExecutionCounter>();
+        counter = makeUnique<ExecutionCounter>();
 
     return counter.get();
 }
 
 void Compilation::addOSRExitSite(const Vector<MacroAssemblerCodePtr<JSInternalPtrTag>>& codeAddresses)
@@ -117,11 +117,11 @@
     VM& vm = exec->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
     JSObject* result = constructEmptyObject(exec);
     RETURN_IF_EXCEPTION(scope, { });
     result->putDirect(vm, vm.propertyNames->bytecodesID, jsNumber(m_bytecodes->id()));
-    result->putDirect(vm, vm.propertyNames->compilationKind, jsString(exec, String::fromUTF8(toCString(m_kind))));
+    result->putDirect(vm, vm.propertyNames->compilationKind, jsString(vm, String::fromUTF8(toCString(m_kind))));
 
     JSArray* profiledBytecodes = constructEmptyArray(exec, 0);
     RETURN_IF_EXCEPTION(scope, { });
     for (unsigned i = 0; i < m_profiledBytecodes.size(); ++i) {
         auto value = m_profiledBytecodes[i].toJS(exec);
@@ -174,13 +174,13 @@
     result->putDirect(vm, vm.propertyNames->osrExits, exits);
 
     result->putDirect(vm, vm.propertyNames->numInlinedGetByIds, jsNumber(m_numInlinedGetByIds));
     result->putDirect(vm, vm.propertyNames->numInlinedPutByIds, jsNumber(m_numInlinedPutByIds));
     result->putDirect(vm, vm.propertyNames->numInlinedCalls, jsNumber(m_numInlinedCalls));
-    result->putDirect(vm, vm.propertyNames->jettisonReason, jsString(exec, String::fromUTF8(toCString(m_jettisonReason))));
+    result->putDirect(vm, vm.propertyNames->jettisonReason, jsString(vm, String::fromUTF8(toCString(m_jettisonReason))));
     if (!m_additionalJettisonReason.isNull())
-        result->putDirect(vm, vm.propertyNames->additionalJettisonReason, jsString(exec, String::fromUTF8(m_additionalJettisonReason)));
+        result->putDirect(vm, vm.propertyNames->additionalJettisonReason, jsString(vm, String::fromUTF8(m_additionalJettisonReason)));
 
     result->putDirect(vm, vm.propertyNames->uid, m_uid.toJS(exec));
 
     return result;
 }
