diff a/modules/javafx.web/src/main/native/Source/WebCore/css/StyleProperties.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/StyleProperties.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/StyleProperties.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/StyleProperties.cpp
@@ -131,10 +131,15 @@
     const StylePropertyShorthand& shorthand = shorthandForProperty(propertyID);
     if (shorthand.length()) {
         RefPtr<CSSValue> value = getPropertyCSSValueInternal(shorthand.properties()[0]);
         if (!value || value->isPendingSubstitutionValue())
             return String();
+    // FIXME: If all longhands are the same css-generic keyword(e.g. initial or inherit),
+    // then the shorthand should be serialized to that keyword.
+    // It seems to be needed to handle this in a single function commonly for all the shorthands,
+    // not in each of the shorthand serialization function.
+    // We could call that function here.
     }
 
     // Shorthand and 4-values properties
     switch (propertyID) {
     case CSSPropertyAll:
@@ -207,10 +212,16 @@
         return getShorthandValue(gridShorthand());
     case CSSPropertyGridColumn:
         return getShorthandValue(gridColumnShorthand());
     case CSSPropertyGridRow:
         return getShorthandValue(gridRowShorthand());
+    case CSSPropertyPageBreakAfter:
+        return pageBreakPropertyValue(pageBreakAfterShorthand());
+    case CSSPropertyPageBreakBefore:
+        return pageBreakPropertyValue(pageBreakBeforeShorthand());
+    case CSSPropertyPageBreakInside:
+        return pageBreakPropertyValue(pageBreakInsideShorthand());
     case CSSPropertyPlaceContent:
         return getAlignmentShorthandValue(placeContentShorthand());
     case CSSPropertyPlaceItems:
         return getAlignmentShorthandValue(placeItemsShorthand());
     case CSSPropertyPlaceSelf:
@@ -711,10 +722,30 @@
     if (isInitialOrInherit(commonValue))
         return commonValue;
     return result.toString();
 }
 
+String StyleProperties::pageBreakPropertyValue(const StylePropertyShorthand& shorthand) const
+{
+    RefPtr<CSSValue> value = getPropertyCSSValueInternal(shorthand.properties()[0]);
+    // FIXME: Remove this isGlobalKeyword check after we do this consistently for all shorthands in getPropertyValue.
+    if (value->isGlobalKeyword())
+        return value->cssText();
+    CSSValueID valueId = downcast<CSSPrimitiveValue>(*value).valueID();
+    switch (valueId) {
+    case CSSValuePage:
+        return "always"_s;
+    case CSSValueAuto:
+    case CSSValueAvoid:
+    case CSSValueLeft:
+    case CSSValueRight:
+        return value->cssText();
+    default:
+        return String();
+    }
+}
+
 RefPtr<CSSValue> StyleProperties::getPropertyCSSValue(CSSPropertyID propertyID) const
 {
     return getPropertyCSSValueInternal(propertyID);
 }
 
@@ -1497,21 +1528,21 @@
     if (m_cssomWrapper) {
         ASSERT(!static_cast<CSSStyleDeclaration*>(m_cssomWrapper.get())->parentRule());
         ASSERT(!m_cssomWrapper->parentElement());
         return *m_cssomWrapper;
     }
-    m_cssomWrapper = std::make_unique<PropertySetCSSStyleDeclaration>(*this);
+    m_cssomWrapper = makeUnique<PropertySetCSSStyleDeclaration>(*this);
     return *m_cssomWrapper;
 }
 
 CSSStyleDeclaration& MutableStyleProperties::ensureInlineCSSStyleDeclaration(StyledElement& parentElement)
 {
     if (m_cssomWrapper) {
         ASSERT(m_cssomWrapper->parentElement() == &parentElement);
         return *m_cssomWrapper;
     }
-    m_cssomWrapper = std::make_unique<InlineCSSStyleDeclaration>(*this, parentElement);
+    m_cssomWrapper = makeUnique<InlineCSSStyleDeclaration>(*this, parentElement);
     return *m_cssomWrapper;
 }
 
 unsigned StyleProperties::averageSizeInBytes()
 {
