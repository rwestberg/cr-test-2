diff a/modules/javafx.web/src/main/native/Source/WebCore/html/NumberInputType.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/NumberInputType.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/NumberInputType.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/NumberInputType.cpp
@@ -84,11 +84,11 @@
     const unsigned sizeOfZero = 1;
     const unsigned numberOfZeroAfterDecimalPoint = -sizeBeforeDecimalPoint;
     return { sizeOfSign + sizeOfZero , numberOfZeroAfterDecimalPoint + sizeOfDigits };
 }
 
-const AtomicString& NumberInputType::formControlType() const
+const AtomString& NumberInputType::formControlType() const
 {
     return InputTypeNames::number();
 }
 
 void NumberInputType::setValue(const String& sanitizedValue, bool valueChanged, TextFieldEventBehavior eventBehavior)
@@ -149,11 +149,11 @@
     const Decimal floatMax = Decimal::fromDouble(std::numeric_limits<float>::max());
     const Element& element = *this->element();
 
     RangeLimitations rangeLimitations = RangeLimitations::Invalid;
     auto extractBound = [&] (const QualifiedName& attributeName, const Decimal& defaultValue) -> Decimal {
-        const AtomicString& attributeValue = element.attributeWithoutSynchronization(attributeName);
+        const AtomString& attributeValue = element.attributeWithoutSynchronization(attributeName);
         Decimal valueFromAttribute = parseToNumberOrNaN(attributeValue);
         if (valueFromAttribute.isFinite()) {
             rangeLimitations = RangeLimitations::Valid;
             return valueFromAttribute;
         }
@@ -211,15 +211,16 @@
 bool NumberInputType::isSteppable() const
 {
     return true;
 }
 
-void NumberInputType::handleKeydownEvent(KeyboardEvent& event)
+auto NumberInputType::handleKeydownEvent(KeyboardEvent& event) -> ShouldCallBaseEventHandler
 {
     handleKeydownEventForSpinButton(event);
     if (!event.defaultHandled())
-        TextFieldInputType::handleKeydownEvent(event);
+        return TextFieldInputType::handleKeydownEvent(event);
+    return ShouldCallBaseEventHandler::Yes;
 }
 
 Decimal NumberInputType::parseToNumber(const String& src, const Decimal& defaultValue) const
 {
     return parseToDecimalForNumberType(src, defaultValue);
