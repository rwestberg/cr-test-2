diff a/modules/javafx.web/src/main/native/Source/WebKitLegacy/WebCoreSupport/NetworkStorageSessionMap.cpp b/modules/javafx.web/src/main/native/Source/WebKitLegacy/WebCoreSupport/NetworkStorageSessionMap.cpp
--- a/modules/javafx.web/src/main/native/Source/WebKitLegacy/WebCoreSupport/NetworkStorageSessionMap.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebKitLegacy/WebCoreSupport/NetworkStorageSessionMap.cpp
@@ -53,11 +53,11 @@
 }
 
 WebCore::NetworkStorageSession& NetworkStorageSessionMap::defaultStorageSession()
 {
     if (!defaultNetworkStorageSession())
-        defaultNetworkStorageSession() = std::make_unique<WebCore::NetworkStorageSession>(PAL::SessionID::defaultSessionID());
+        defaultNetworkStorageSession() = makeUnique<WebCore::NetworkStorageSession>(PAL::SessionID::defaultSessionID());
     return *defaultNetworkStorageSession();
 }
 
 void NetworkStorageSessionMap::switchToNewTestingSession()
 {
@@ -72,11 +72,11 @@
         ASSERT(hasProcessPrivilege(ProcessPrivilege::CanAccessRawCookies));
         if (session)
             cookieStorage = adoptCF(_CFURLStorageSessionCopyCookieStorage(kCFAllocatorDefault, session.get()));
     }
 
-    defaultNetworkStorageSession() = std::make_unique<WebCore::NetworkStorageSession>(PAL::SessionID::defaultSessionID(), WTFMove(session), WTFMove(cookieStorage));
+    defaultNetworkStorageSession() = makeUnique<WebCore::NetworkStorageSession>(PAL::SessionID::defaultSessionID(), WTFMove(session), WTFMove(cookieStorage));
 #endif
 }
 
 void NetworkStorageSessionMap::ensureSession(const PAL::SessionID& sessionID, const String& identifierBase)
 {
@@ -98,15 +98,15 @@
         ASSERT(hasProcessPrivilege(ProcessPrivilege::CanAccessRawCookies));
         if (storageSession)
             cookieStorage = adoptCF(_CFURLStorageSessionCopyCookieStorage(kCFAllocatorDefault, storageSession.get()));
     }
 
-    addResult.iterator->value = std::make_unique<WebCore::NetworkStorageSession>(sessionID, WTFMove(storageSession), WTFMove(cookieStorage));
+    addResult.iterator->value = makeUnique<WebCore::NetworkStorageSession>(sessionID, WTFMove(storageSession), WTFMove(cookieStorage));
 
 #elif USE(CURL)
     globalSessionMap().ensure(sessionID, [sessionID] {
-        return std::make_unique<WebCore::NetworkStorageSession>(sessionID);
+        return makeUnique<WebCore::NetworkStorageSession>(sessionID);
     });
 #endif
 }
 
 void NetworkStorageSessionMap::destroySession(const PAL::SessionID& sessionID)
