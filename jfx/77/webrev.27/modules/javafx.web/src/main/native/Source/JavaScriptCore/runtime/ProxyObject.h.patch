diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ProxyObject.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ProxyObject.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ProxyObject.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ProxyObject.h
@@ -37,11 +37,12 @@
     const static unsigned StructureFlags = Base::StructureFlags | OverridesGetOwnPropertySlot | OverridesGetCallData | InterceptsGetOwnPropertySlotByIndexEvenWhenLengthIsNotZero | OverridesGetPropertyNames | ProhibitsPropertyCaching;
 
     static ProxyObject* create(ExecState* exec, JSGlobalObject* globalObject, JSValue target, JSValue handler)
     {
         VM& vm = exec->vm();
-        ProxyObject* proxy = new (NotNull, allocateCell<ProxyObject>(vm.heap)) ProxyObject(vm, ProxyObject::structureForTarget(globalObject, target));
+        Structure* structure = ProxyObject::structureForTarget(globalObject, target);
+        ProxyObject* proxy = new (NotNull, allocateCell<ProxyObject>(vm.heap)) ProxyObject(vm, structure);
         proxy->finishCreation(vm, exec, target, handler);
         return proxy;
     }
 
     static Structure* createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype, bool isCallable)
@@ -97,11 +98,11 @@
     bool performGet(ExecState*, PropertyName, PropertySlot&);
     bool performHasProperty(ExecState*, PropertyName, PropertySlot&);
     template <typename DefaultDeleteFunction>
     bool performDelete(ExecState*, PropertyName, DefaultDeleteFunction);
     template <typename PerformDefaultPutFunction>
-    bool performPut(ExecState*, JSValue putValue, JSValue thisValue, PropertyName, PerformDefaultPutFunction);
+    bool performPut(ExecState*, JSValue putValue, JSValue thisValue, PropertyName, PerformDefaultPutFunction, bool shouldThrow);
     bool performPreventExtensions(ExecState*);
     bool performIsExtensible(ExecState*);
     bool performDefineOwnProperty(ExecState*, PropertyName, const PropertyDescriptor&, bool shouldThrow);
     void performGetOwnPropertyNames(ExecState*, PropertyNameArray&, EnumerationMode);
     bool performSetPrototype(ExecState*, JSValue prototype, bool shouldThrowIfCantSet);
