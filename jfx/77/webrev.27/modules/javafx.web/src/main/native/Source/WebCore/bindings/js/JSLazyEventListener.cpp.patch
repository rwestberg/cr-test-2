diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSLazyEventListener.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSLazyEventListener.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSLazyEventListener.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSLazyEventListener.cpp
@@ -1,8 +1,8 @@
 /*
  *  Copyright (C) 2001 Peter Kelly (pmk@post.com)
- *  Copyright (C) 2003-2018 Apple Inc. All Rights Reserved.
+ *  Copyright (C) 2003-2019 Apple Inc. All Rights Reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Lesser General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -24,28 +24,30 @@
 #include "ContentSecurityPolicy.h"
 #include "Element.h"
 #include "Frame.h"
 #include "JSNode.h"
 #include "QualifiedName.h"
+#include "SVGElement.h"
 #include "ScriptController.h"
 #include <JavaScriptCore/CatchScope.h>
 #include <JavaScriptCore/FunctionConstructor.h>
 #include <JavaScriptCore/IdentifierInlines.h>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/RefCountedLeakCounter.h>
 #include <wtf/StdLibExtras.h>
+#include <wtf/WeakPtr.h>
 
 namespace WebCore {
 using namespace JSC;
 
 DEFINE_DEBUG_ONLY_GLOBAL(WTF::RefCountedLeakCounter, eventListenerCounter, ("JSLazyEventListener"));
 
 struct JSLazyEventListener::CreationArguments {
     const QualifiedName& attributeName;
-    const AtomicString& attributeValue;
+    const AtomString& attributeValue;
     Document& document;
-    ContainerNode* node;
+    WeakPtr<ContainerNode> node;
     JSObject* wrapper;
     bool shouldUseSVGEventName;
 };
 
 static const String& eventParameterName(bool shouldUseSVGEventName)
@@ -62,30 +64,53 @@
     if (position == TextPosition::belowRangePosition())
         return { };
     return position;
 }
 
-JSLazyEventListener::JSLazyEventListener(const CreationArguments& arguments, const String& sourceURL, const TextPosition& sourcePosition)
+JSLazyEventListener::JSLazyEventListener(CreationArguments&& arguments, const String& sourceURL, const TextPosition& sourcePosition)
     : JSEventListener(nullptr, arguments.wrapper, true, mainThreadNormalWorld())
     , m_functionName(arguments.attributeName.localName().string())
     , m_eventParameterName(eventParameterName(arguments.shouldUseSVGEventName))
     , m_code(arguments.attributeValue)
     , m_sourceURL(sourceURL)
     , m_sourcePosition(convertZeroToOne(sourcePosition))
-    , m_originalNode(arguments.node)
+    , m_originalNode(WTFMove(arguments.node))
 {
-    // We don't ref m_originalNode because we assume it will stay alive as long as this
-    // handler object is around and we need to avoid a reference cycle. If JS transfers
-    // this handler to another node, initializeJSFunction will be called and after that
-    // m_originalNode will never be looked at again.
-    // FIXME: Doesn't seem clear that is guaranteed to be true in the general case.
-
 #ifndef NDEBUG
     eventListenerCounter.increment();
 #endif
 }
 
+#if !ASSERT_DISABLED
+static inline bool isCloneInShadowTreeOfSVGUseElement(Node& originalNode, EventTarget& eventTarget)
+{
+    if (!eventTarget.isNode())
+        return false;
+
+    auto& node = downcast<Node>(eventTarget);
+    if (!is<SVGElement>(node))
+        return false;
+
+    auto& element = downcast<SVGElement>(node);
+    if (!element.correspondingElement())
+        return false;
+
+    ASSERT(element.isInShadowTree());
+    return &originalNode == element.correspondingElement();
+}
+
+// This is to help find the underlying cause of <rdar://problem/24314027>.
+void JSLazyEventListener::checkValidityForEventTarget(EventTarget& eventTarget)
+{
+    if (eventTarget.isNode()) {
+        ASSERT(m_originalNode);
+        ASSERT(static_cast<EventTarget*>(m_originalNode.get()) == &eventTarget || isCloneInShadowTreeOfSVGUseElement(*m_originalNode, eventTarget));
+    } else
+        ASSERT(!m_originalNode);
+}
+#endif
+
 JSLazyEventListener::~JSLazyEventListener()
 {
 #ifndef NDEBUG
     eventListenerCounter.decrement();
 #endif
@@ -122,20 +147,20 @@
     JSLockHolder lock(vm);
     auto scope = DECLARE_CATCH_SCOPE(vm);
     ExecState* exec = globalObject->globalExec();
 
     MarkedArgumentBuffer args;
-    args.append(jsNontrivialString(exec, m_eventParameterName));
+    args.append(jsNontrivialString(vm, m_eventParameterName));
     args.append(jsStringWithCache(exec, m_code));
     ASSERT(!args.hasOverflowed());
 
     // We want all errors to refer back to the line on which our attribute was
     // declared, regardless of any newlines in our JavaScript source text.
     int overrideLineNumber = m_sourcePosition.m_line.oneBasedInt();
 
     JSObject* jsFunction = constructFunctionSkippingEvalEnabledCheck(exec,
-        exec->lexicalGlobalObject(), args, Identifier::fromString(exec, m_functionName),
+        exec->lexicalGlobalObject(), args, Identifier::fromString(vm, m_functionName),
         SourceOrigin { m_sourceURL, CachedScriptFetcher::create(document.charset()) },
         m_sourceURL, m_sourcePosition, overrideLineNumber);
     if (UNLIKELY(scope.exception())) {
         reportCurrentException(exec);
         scope.clearException();
@@ -157,11 +182,11 @@
     }
 
     return jsFunction;
 }
 
-RefPtr<JSLazyEventListener> JSLazyEventListener::create(const CreationArguments& arguments)
+RefPtr<JSLazyEventListener> JSLazyEventListener::create(CreationArguments&& arguments)
 {
     if (arguments.attributeValue.isNull())
         return nullptr;
 
     // FIXME: We should be able to provide source information for frameless documents too (e.g. for importing nodes from XMLHttpRequest.responseXML).
@@ -172,26 +197,26 @@
             return nullptr;
         position = frame->script().eventHandlerPosition();
         sourceURL = arguments.document.url().string();
     }
 
-    return adoptRef(*new JSLazyEventListener(arguments, sourceURL, position));
+    return adoptRef(*new JSLazyEventListener(WTFMove(arguments), sourceURL, position));
 }
 
-RefPtr<JSLazyEventListener> JSLazyEventListener::create(Element& element, const QualifiedName& attributeName, const AtomicString& attributeValue)
+RefPtr<JSLazyEventListener> JSLazyEventListener::create(Element& element, const QualifiedName& attributeName, const AtomString& attributeValue)
 {
-    return create({ attributeName, attributeValue, element.document(), &element, nullptr, element.isSVGElement() });
+    return create({ attributeName, attributeValue, element.document(), makeWeakPtr(element), nullptr, element.isSVGElement() });
 }
 
-RefPtr<JSLazyEventListener> JSLazyEventListener::create(Document& document, const QualifiedName& attributeName, const AtomicString& attributeValue)
+RefPtr<JSLazyEventListener> JSLazyEventListener::create(Document& document, const QualifiedName& attributeName, const AtomString& attributeValue)
 {
     // FIXME: This always passes false for "shouldUseSVGEventName". Is that correct for events dispatched to SVG documents?
     // This has been this way for a long time, but became more obvious when refactoring to separate the Element and Document code paths.
-    return create({ attributeName, attributeValue, document, &document, nullptr, false });
+    return create({ attributeName, attributeValue, document, makeWeakPtr(document), nullptr, false });
 }
 
-RefPtr<JSLazyEventListener> JSLazyEventListener::create(DOMWindow& window, const QualifiedName& attributeName, const AtomicString& attributeValue)
+RefPtr<JSLazyEventListener> JSLazyEventListener::create(DOMWindow& window, const QualifiedName& attributeName, const AtomString& attributeValue)
 {
     ASSERT(window.document());
     auto& document = *window.document();
     ASSERT(document.frame());
     return create({ attributeName, attributeValue, document, nullptr, toJSDOMWindow(document.frame(), mainThreadNormalWorld()), document.isSVGDocument() });
