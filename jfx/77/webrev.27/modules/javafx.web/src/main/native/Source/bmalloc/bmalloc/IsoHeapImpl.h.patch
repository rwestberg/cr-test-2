diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoHeapImpl.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoHeapImpl.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoHeapImpl.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoHeapImpl.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -24,10 +24,11 @@
  */
 
 #pragma once
 
 #include "BMalloced.h"
+#include "IsoAllocator.h"
 #include "IsoDirectoryPage.h"
 #include "IsoTLSAllocatorEntry.h"
 #include "PhysicalPageMap.h"
 
 namespace bmalloc {
@@ -35,28 +36,39 @@
 class AllIsoHeaps;
 
 class BEXPORT IsoHeapImplBase {
     MAKE_BMALLOCED;
 public:
+    static constexpr unsigned maxAllocationFromShared = 8;
+    static constexpr unsigned maxAllocationFromSharedMask = (1U << maxAllocationFromShared) - 1U;
+    static_assert(maxAllocationFromShared <= bmalloc::alignment, "");
+    static_assert(isPowerOfTwo(maxAllocationFromShared), "");
+
     virtual ~IsoHeapImplBase();
 
     virtual void scavenge(Vector<DeferredDecommit>&) = 0;
-    virtual void scavengeToHighWatermark(Vector<DeferredDecommit>&) = 0;
     virtual size_t freeableMemory() = 0;
     virtual size_t footprint() = 0;
 
     void scavengeNow();
     static void finishScavenging(Vector<DeferredDecommit>&);
 
 protected:
     IsoHeapImplBase();
     void addToAllIsoHeaps();
 
-private:
+    friend class IsoSharedPage;
     friend class AllIsoHeaps;
 
     IsoHeapImplBase* m_next { nullptr };
+    std::chrono::steady_clock::time_point m_lastSlowPathTime;
+    std::array<void*, maxAllocationFromShared> m_sharedCells { };
+    unsigned m_numberOfAllocationsFromSharedInOneCycle { 0 };
+    unsigned m_availableShared { maxAllocationFromSharedMask };
+    AllocationMode m_allocationMode { AllocationMode::Init };
+
+    static_assert(sizeof(m_availableShared) * 8 >= maxAllocationFromShared, "");
 };
 
 template<typename Config>
 class IsoHeapImpl final : public IsoHeapImplBase {
     // Pick a size that makes us most efficiently use the bitvectors.
@@ -66,15 +78,14 @@
     IsoHeapImpl();
 
     EligibilityResult<Config> takeFirstEligible();
 
     // Callbacks from directory.
-    void didBecomeEligible(IsoDirectory<Config, numPagesInInlineDirectory>*);
-    void didBecomeEligible(IsoDirectory<Config, IsoDirectoryPage<Config>::numPages>*);
+    void didBecomeEligibleOrDecommited(IsoDirectory<Config, numPagesInInlineDirectory>*);
+    void didBecomeEligibleOrDecommited(IsoDirectory<Config, IsoDirectoryPage<Config>::numPages>*);
 
     void scavenge(Vector<DeferredDecommit>&) override;
-    void scavengeToHighWatermark(Vector<DeferredDecommit>&) override;
 
     size_t freeableMemory() override;
 
     size_t footprint() override;
 
@@ -99,10 +110,13 @@
     void didDecommit(void* ptr, size_t bytes);
 
     void isNowFreeable(void* ptr, size_t bytes);
     void isNoLongerFreeable(void* ptr, size_t bytes);
 
+    AllocationMode updateAllocationMode();
+    void* allocateFromShared(const std::lock_guard<Mutex>&, bool abortOnFailure);
+
     // It's almost always the caller's responsibility to grab the lock. This lock comes from the
     // PerProcess<IsoTLSDeallocatorEntry<Config>>::get()->lock. That's pretty weird, and we don't
     // try to disguise the fact that it's weird. We only do that because heaps in the same size class
     // share the same deallocator log, so it makes sense for them to also share the same lock to
     // amortize lock acquisition costs.
@@ -118,12 +132,12 @@
     PhysicalPageMap m_physicalPageMap;
 #endif
     unsigned m_nextDirectoryPageIndex { 1 }; // We start at 1 so that the high water mark being zero means we've only allocated in the inline directory since the last scavenge.
     unsigned m_directoryHighWatermark { 0 };
 
-    bool m_isInlineDirectoryEligible { true };
-    IsoDirectoryPage<Config>* m_firstEligibleDirectory { nullptr };
+    bool m_isInlineDirectoryEligibleOrDecommitted { true };
+    IsoDirectoryPage<Config>* m_firstEligibleOrDecommitedDirectory { nullptr };
 
     IsoTLSAllocatorEntry<Config> m_allocator;
 };
 
 } // namespace bmalloc
