diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaDevices.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaDevices.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaDevices.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaDevices.cpp
@@ -1,8 +1,8 @@
 /*
  * Copyright (C) 2015 Ericsson AB. All rights reserved.
- * Copyright (C) 2015-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  *
@@ -35,20 +35,23 @@
 #if ENABLE(MEDIA_STREAM)
 
 #include "Document.h"
 #include "Event.h"
 #include "EventNames.h"
-#include "MediaDevicesRequest.h"
+#include "JSMediaDeviceInfo.h"
 #include "MediaTrackSupportedConstraints.h"
 #include "RealtimeMediaSourceSettings.h"
 #include "RuntimeEnabledFeatures.h"
 #include "UserMediaController.h"
 #include "UserMediaRequest.h"
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/RandomNumber.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(MediaDevices);
+
 inline MediaDevices::MediaDevices(Document& document)
     : ActiveDOMObject(document)
     , m_scheduledEventTimer(*this, &MediaDevices::scheduledEventTimerFired)
     , m_eventNames(eventNames())
 {
@@ -56,22 +59,27 @@
 
     static_assert(static_cast<size_t>(MediaDevices::DisplayCaptureSurfaceType::Monitor) == static_cast<size_t>(RealtimeMediaSourceSettings::DisplaySurfaceType::Monitor), "MediaDevices::DisplayCaptureSurfaceType::Monitor is not equal to RealtimeMediaSourceSettings::DisplaySurfaceType::Monitor as expected");
     static_assert(static_cast<size_t>(MediaDevices::DisplayCaptureSurfaceType::Window) == static_cast<size_t>(RealtimeMediaSourceSettings::DisplaySurfaceType::Window), "MediaDevices::DisplayCaptureSurfaceType::Window is not RealtimeMediaSourceSettings::DisplaySurfaceType::Window as expected");
     static_assert(static_cast<size_t>(MediaDevices::DisplayCaptureSurfaceType::Application) == static_cast<size_t>(RealtimeMediaSourceSettings::DisplaySurfaceType::Application), "MediaDevices::DisplayCaptureSurfaceType::Application is not RealtimeMediaSourceSettings::DisplaySurfaceType::Application as expected");
     static_assert(static_cast<size_t>(MediaDevices::DisplayCaptureSurfaceType::Browser) == static_cast<size_t>(RealtimeMediaSourceSettings::DisplaySurfaceType::Browser), "MediaDevices::DisplayCaptureSurfaceType::Browser is not RealtimeMediaSourceSettings::DisplaySurfaceType::Browser as expected");
+
+    if (auto* controller = UserMediaController::from(document.page())) {
+        m_canAccessCamera = controller->canCallGetUserMedia(document, { UserMediaController::CaptureType::Camera }) == UserMediaController::GetUserMediaAccess::CanCall;
+        m_canAccessMicrophone = controller->canCallGetUserMedia(document, { UserMediaController::CaptureType::Microphone }) == UserMediaController::GetUserMediaAccess::CanCall;
+    }
 }
 
 MediaDevices::~MediaDevices() = default;
 
 void MediaDevices::stop()
 {
     if (m_deviceChangeToken) {
-        auto* document = this->document();
-        auto* controller = document ? UserMediaController::from(document->page()) : nullptr;
-        if (document && controller)
-            controller->removeDeviceChangeObserver(m_deviceChangeToken);
+        auto* controller = UserMediaController::from(document()->page());
+        controller->removeDeviceChangeObserver(m_deviceChangeToken);
     }
+    m_devices.clear();
+    m_scheduledEventTimer.stop();
 }
 
 Ref<MediaDevices> MediaDevices::create(Document& document)
 {
     return adoptRef(*new MediaDevices(document));
@@ -97,44 +105,85 @@
 }
 
 void MediaDevices::getUserMedia(const StreamConstraints& constraints, Promise&& promise) const
 {
     auto* document = this->document();
-    if (!document) {
-        promise.reject(Exception { InvalidStateError });
+    if (!document)
         return;
-    }
 
     auto audioConstraints = createMediaConstraints(constraints.audio);
     auto videoConstraints = createMediaConstraints(constraints.video);
     if (videoConstraints.isValid)
         videoConstraints.setDefaultVideoConstraints();
 
     auto request = UserMediaRequest::create(*document, { MediaStreamRequest::Type::UserMedia, WTFMove(audioConstraints), WTFMove(videoConstraints) }, WTFMove(promise));
     request->start();
-
-    return;
 }
 
-ExceptionOr<void> MediaDevices::getDisplayMedia(const StreamConstraints& constraints, Promise&& promise) const
+void MediaDevices::getDisplayMedia(const StreamConstraints& constraints, Promise&& promise) const
 {
     auto* document = this->document();
     if (!document)
-        return Exception { InvalidStateError };
+        return;
+
+    if (!m_disableGetDisplayMediaUserGestureConstraint && !UserGestureIndicator::processingUserGesture()) {
+        promise.reject(Exception { InvalidAccessError, "getDisplayMedia must be called from a user gesture handler."_s });
+        return;
+    }
 
     auto request = UserMediaRequest::create(*document, { MediaStreamRequest::Type::DisplayMedia, { }, createMediaConstraints(constraints.video) }, WTFMove(promise));
     request->start();
+}
 
-    return { };
+void MediaDevices::refreshDevices(const Vector<CaptureDevice>& newDevices)
+{
+    Vector<Ref<MediaDeviceInfo>> devices;
+    for (auto& newDevice : newDevices) {
+        if (!m_canAccessMicrophone && newDevice.type() == CaptureDevice::DeviceType::Microphone)
+            continue;
+        if (!m_canAccessCamera && newDevice.type() == CaptureDevice::DeviceType::Camera)
+            continue;
+
+        auto index = m_devices.findMatching([&newDevice](auto& oldDevice) {
+            return oldDevice->deviceId() == newDevice.persistentId();
+        });
+        if (index != notFound) {
+            devices.append(m_devices[index].copyRef());
+            continue;
+        }
+
+        auto deviceType = newDevice.type() == CaptureDevice::DeviceType::Microphone ? MediaDeviceInfo::Kind::Audioinput : MediaDeviceInfo::Kind::Videoinput;
+        devices.append(MediaDeviceInfo::create(newDevice.label(), newDevice.persistentId(), newDevice.groupId(), deviceType));
+    }
+    m_devices = WTFMove(devices);
 }
 
-void MediaDevices::enumerateDevices(EnumerateDevicesPromise&& promise) const
+void MediaDevices::enumerateDevices(EnumerateDevicesPromise&& promise)
 {
     auto* document = this->document();
     if (!document)
         return;
-    MediaDevicesRequest::create(*document, WTFMove(promise))->start();
+
+    auto* controller = UserMediaController::from(document->page());
+    if (!controller) {
+        promise.resolve({ });
+        return;
+    }
+    if (!m_canAccessCamera && !m_canAccessMicrophone) {
+        controller->logGetUserMediaDenial(*document, UserMediaController::GetUserMediaAccess::BlockedByFeaturePolicy, UserMediaController::BlockedCaller::EnumerateDevices);
+        promise.resolve({ });
+        return;
+    }
+
+    controller->enumerateMediaDevices(*document, [this, weakThis = makeWeakPtr(this), promise = WTFMove(promise)](const auto& newDevices, const auto& deviceIDHashSalt) mutable {
+        if (!weakThis || isContextStopped())
+            return;
+
+        this->document()->setDeviceIDHashSalt(deviceIDHashSalt);
+        refreshDevices(newDevices);
+        promise.resolve(m_devices);
+    });
 }
 
 MediaTrackSupportedConstraints MediaDevices::getSupportedConstraints()
 {
     auto& supported = RealtimeMediaSourceCenter::singleton().supportedConstraints();
@@ -154,12 +203,12 @@
     return result;
 }
 
 void MediaDevices::scheduledEventTimerFired()
 {
-    if (scriptExecutionContext())
-        dispatchEvent(Event::create(eventNames().devicechangeEvent, Event::CanBubble::No, Event::IsCancelable::No));
+    ASSERT(!isContextStopped());
+    dispatchEvent(Event::create(eventNames().devicechangeEvent, Event::CanBubble::No, Event::IsCancelable::No));
 }
 
 bool MediaDevices::hasPendingActivity() const
 {
     return !isContextStopped() && hasEventListeners(m_eventNames.devicechangeEvent);
@@ -173,37 +222,34 @@
 bool MediaDevices::canSuspendForDocumentSuspension() const
 {
     return true;
 }
 
-bool MediaDevices::addEventListener(const AtomicString& eventType, Ref<EventListener>&& listener, const AddEventListenerOptions& options)
+void MediaDevices::listenForDeviceChanges()
 {
-    if (!m_listeningForDeviceChanges && eventType == eventNames().devicechangeEvent) {
-        auto* document = this->document();
-        auto* controller = document ? UserMediaController::from(document->page()) : nullptr;
-        if (document && controller) {
-            m_listeningForDeviceChanges = true;
+    if (m_listeningForDeviceChanges || (!m_canAccessCamera && !m_canAccessMicrophone))
+        return;
 
-            m_deviceChangeToken = controller->addDeviceChangeObserver([weakThis = makeWeakPtr(*this), this]() {
+    m_listeningForDeviceChanges = true;
 
-                if (!weakThis || m_scheduledEventTimer.isActive())
-                    return;
+    auto* document = this->document();
+    auto* controller = document ? UserMediaController::from(document->page()) : nullptr;
+    if (!controller)
+        return;
 
-                auto* document = this->document();
-                auto* controller = document ? UserMediaController::from(document->page()) : nullptr;
-                if (!controller)
-                    return;
+    m_deviceChangeToken = controller->addDeviceChangeObserver([weakThis = makeWeakPtr(*this), this]() {
+        if (!weakThis || isContextStopped() || m_scheduledEventTimer.isActive())
+            return;
 
-                bool canAccessMicrophone = controller->canCallGetUserMedia(*document, { UserMediaController::CaptureType::Microphone }) == UserMediaController::GetUserMediaAccess::CanCall;
-                bool canAccessCamera = controller->canCallGetUserMedia(*document, { UserMediaController::CaptureType::Camera }) == UserMediaController::GetUserMediaAccess::CanCall;
-                if (!canAccessMicrophone && !canAccessCamera)
-                    return;
+        m_scheduledEventTimer.startOneShot(Seconds(randomNumber() / 2));
+    });
+}
 
-                m_scheduledEventTimer.startOneShot(Seconds(randomNumber() / 2));
-            });
-        }
-    }
+bool MediaDevices::addEventListener(const AtomString& eventType, Ref<EventListener>&& listener, const AddEventListenerOptions& options)
+{
+    if (eventType == eventNames().devicechangeEvent)
+        listenForDeviceChanges();
 
     return EventTargetWithInlineData::addEventListener(eventType, WTFMove(listener), options);
 }
 
 } // namespace WebCore
