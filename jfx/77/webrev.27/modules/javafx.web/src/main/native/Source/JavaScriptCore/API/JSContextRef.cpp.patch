diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/API/JSContextRef.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/API/JSContextRef.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/API/JSContextRef.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/API/JSContextRef.cpp
@@ -26,19 +26,21 @@
 #include "config.h"
 #include "JSContextRef.h"
 #include "JSContextRefInternal.h"
 
 #include "APICast.h"
+#include "APIUtils.h"
 #include "CallFrame.h"
 #include "InitializeThreading.h"
 #include "JSAPIGlobalObject.h"
 #include "JSCallbackObject.h"
 #include "JSClassRef.h"
 #include "JSObject.h"
 #include "JSCInlines.h"
 #include "SourceProvider.h"
 #include "StackVisitor.h"
+#include "StrongInlines.h"
 #include "Watchdog.h"
 #include <wtf/text/StringBuilder.h>
 #include <wtf/text/StringHash.h>
 
 #if ENABLE(REMOTE_INSPECTOR)
@@ -64,10 +66,11 @@
 //     OR
 //     (b) one of its contexts has been JSContextRetained
 
 JSContextGroupRef JSContextGroupCreate()
 {
+    WTF::initializeMainThread();
     initializeThreading();
     return toRef(&VM::createContextGroup().leakRef());
 }
 
 JSContextGroupRef JSContextGroupRetain(JSContextGroupRef group)
@@ -114,10 +117,11 @@
 
 // From the API's perspective, a global context remains alive iff it has been JSGlobalContextRetained.
 
 JSGlobalContextRef JSGlobalContextCreate(JSClassRef globalObjectClass)
 {
+    WTF::initializeMainThread();
     initializeThreading();
 
 #if OS(DARWIN)
     // If the application was linked before JSGlobalContextCreate was changed to use a unique VM,
     // we use a shared one for backwards compatibility.
@@ -129,10 +133,11 @@
     return JSGlobalContextCreateInGroup(0, globalObjectClass);
 }
 
 JSGlobalContextRef JSGlobalContextCreateInGroup(JSContextGroupRef group, JSClassRef globalObjectClass)
 {
+    WTF::initializeMainThread();
     initializeThreading();
 
     Ref<VM> vm = group ? Ref<VM>(*toJS(group)) : VM::createContextGroup();
 
     JSLockHolder locker(vm.ptr());
@@ -247,10 +252,29 @@
     JSLockHolder locker(vm);
 
     vm.vmEntryGlobalObject(exec)->setName(name ? name->string() : String());
 }
 
+void JSGlobalContextSetUnhandledRejectionCallback(JSGlobalContextRef ctx, JSObjectRef function, JSValueRef* exception)
+{
+    if (!ctx) {
+        ASSERT_NOT_REACHED();
+        return;
+    }
+
+    ExecState* exec = toJS(ctx);
+    VM& vm = exec->vm();
+    JSLockHolder locker(vm);
+
+    JSObject* object = toJS(function);
+    if (!object->isFunction(vm)) {
+        *exception = toRef(createTypeError(exec));
+        return;
+    }
+
+    vm.vmEntryGlobalObject(exec)->setUnhandledRejectionCallback(vm, object);
+}
 
 class BacktraceFunctor {
 public:
     BacktraceFunctor(StringBuilder& builder, unsigned remainingCapacityForFrameCapture)
         : m_builder(builder)
