diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/MarkedSpace.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/MarkedSpace.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/MarkedSpace.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/MarkedSpace.cpp
@@ -248,19 +248,20 @@
         if (allocation->isEmpty()) {
             m_capacity -= allocation->cellSize();
             allocation->destroy();
             continue;
         }
+        allocation->setIndexInSpace(dstIndex);
         m_largeAllocations[dstIndex++] = allocation;
     }
     m_largeAllocations.shrink(dstIndex);
     m_largeAllocationsNurseryOffset = m_largeAllocations.size();
 }
 
 void MarkedSpace::prepareForAllocation()
 {
-    ASSERT(!mayBeGCThread() || m_heap->worldIsStopped());
+    ASSERT(!Thread::mayBeGCThread() || m_heap->worldIsStopped());
     for (Subspace* subspace : m_subspaces)
         subspace->prepareForAllocation();
 
     m_activeWeakSets.takeFrom(m_newActiveWeakSets);
 
@@ -325,10 +326,16 @@
     std::sort(
         m_largeAllocationsForThisCollectionBegin, m_largeAllocationsForThisCollectionEnd,
         [&] (LargeAllocation* a, LargeAllocation* b) {
             return a < b;
         });
+    unsigned index = m_largeAllocationsOffsetForThisCollection;
+    for (auto* start = m_largeAllocationsForThisCollectionBegin; start != m_largeAllocationsForThisCollectionEnd; ++start, ++index) {
+        (*start)->setIndexInSpace(index);
+        ASSERT(m_largeAllocations[index] == *start);
+        ASSERT(m_largeAllocations[index]->indexInSpace() == index);
+    }
 }
 
 void MarkedSpace::prepareForMarking()
 {
     if (m_heap->collectionScope() == CollectionScope::Eden)
