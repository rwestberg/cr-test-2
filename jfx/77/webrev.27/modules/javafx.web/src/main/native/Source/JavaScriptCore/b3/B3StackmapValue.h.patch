diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapValue.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapValue.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapValue.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapValue.h
@@ -58,14 +58,14 @@
         }
     }
 
     ~StackmapValue();
 
-    // Use this to add children. Note that you could also add children by doing
-    // children().append(). That will work fine, but it's not recommended.
+    // Use this to add children.
     void append(const ConstrainedValue& value)
     {
+        ASSERT(value.value()->type().isNumeric());
         append(value.value(), value.rep());
     }
 
     void append(Value*, const ValueRep&);
 
@@ -219,10 +219,11 @@
 
     void setConstraint(unsigned index, const ValueRep&);
 
     class ConstrainedValueCollection {
     public:
+
         ConstrainedValueCollection(const StackmapValue& value)
             : m_value(value)
         {
         }
 
@@ -232,10 +233,16 @@
 
         ConstrainedValue operator[](unsigned index) const { return at(index); }
 
         class iterator {
         public:
+            using iterator_category = std::forward_iterator_tag;
+            using value_type = ConstrainedValue;
+            using difference_type = int;
+            using pointer = void;
+            using reference = ConstrainedValue;
+
             iterator()
                 : m_collection(nullptr)
                 , m_index(0)
             {
             }
@@ -283,10 +290,12 @@
     ConstrainedValueCollection constrainedChildren() const
     {
         return ConstrainedValueCollection(*this);
     }
 
+    B3_SPECIALIZE_VALUE_FOR_VARARGS_CHILDREN
+
 protected:
     void dumpChildren(CommaPrinter&, PrintStream&) const override;
     void dumpMeta(CommaPrinter&, PrintStream&) const override;
 
     StackmapValue(CheckedOpcodeTag, Kind, Type, Origin);
