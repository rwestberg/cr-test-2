diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/applepay/ApplePayRequestBase.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/applepay/ApplePayRequestBase.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/applepay/ApplePayRequestBase.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/applepay/ApplePayRequestBase.cpp
@@ -29,32 +29,40 @@
 #if ENABLE(APPLE_PAY)
 
 #include "PaymentCoordinator.h"
 #include <wtf/text/StringConcatenateNumbers.h>
 
+#if USE(APPLE_INTERNAL_SDK)
+#include <WebKitAdditions/ApplePayRequestBaseAdditions.cpp>
+#else
+namespace WebCore {
+static void finishConverting(ApplePaySessionPaymentRequest&, ApplePayRequestBase&) { }
+}
+#endif
+
 namespace WebCore {
 
-static ExceptionOr<Vector<String>> convertAndValidate(unsigned version, const Vector<String>& supportedNetworks, const PaymentCoordinator& paymentCoordinator)
+static ExceptionOr<Vector<String>> convertAndValidate(Document& document, unsigned version, const Vector<String>& supportedNetworks, const PaymentCoordinator& paymentCoordinator)
 {
     if (supportedNetworks.isEmpty())
         return Exception { TypeError, "At least one supported network must be provided." };
 
     Vector<String> result;
     result.reserveInitialCapacity(supportedNetworks.size());
     for (auto& supportedNetwork : supportedNetworks) {
-        auto validatedNetwork = paymentCoordinator.validatedPaymentNetwork(version, supportedNetwork);
+        auto validatedNetwork = paymentCoordinator.validatedPaymentNetwork(document, version, supportedNetwork);
         if (!validatedNetwork)
             return Exception { TypeError, makeString("\"", supportedNetwork, "\" is not a valid payment network.") };
         result.uncheckedAppend(*validatedNetwork);
     }
 
     return WTFMove(result);
 }
 
-ExceptionOr<ApplePaySessionPaymentRequest> convertAndValidate(unsigned version, ApplePayRequestBase& request, const PaymentCoordinator& paymentCoordinator)
+ExceptionOr<ApplePaySessionPaymentRequest> convertAndValidate(Document& document, unsigned version, ApplePayRequestBase& request, const PaymentCoordinator& paymentCoordinator)
 {
-    if (!version || !paymentCoordinator.supportsVersion(version))
+    if (!version || !paymentCoordinator.supportsVersion(document, version))
         return Exception { InvalidAccessError, makeString('"', version, "\" is not a supported version.") };
 
     ApplePaySessionPaymentRequest result;
     result.setVersion(version);
     result.setCountryCode(request.countryCode);
@@ -62,11 +70,11 @@
     auto merchantCapabilities = convertAndValidate(request.merchantCapabilities);
     if (merchantCapabilities.hasException())
         return merchantCapabilities.releaseException();
     result.setMerchantCapabilities(merchantCapabilities.releaseReturnValue());
 
-    auto supportedNetworks = convertAndValidate(version, request.supportedNetworks, paymentCoordinator);
+    auto supportedNetworks = convertAndValidate(document, version, request.supportedNetworks, paymentCoordinator);
     if (supportedNetworks.hasException())
         return supportedNetworks.releaseException();
     result.setSupportedNetworks(supportedNetworks.releaseReturnValue());
 
     if (request.requiredBillingContactFields) {
@@ -92,10 +100,12 @@
     result.setApplicationData(request.applicationData);
 
     if (version >= 3)
         result.setSupportedCountries(WTFMove(request.supportedCountries));
 
+    finishConverting(result, request);
+
     return WTFMove(result);
 }
 
 } // namespace WebCore
 
