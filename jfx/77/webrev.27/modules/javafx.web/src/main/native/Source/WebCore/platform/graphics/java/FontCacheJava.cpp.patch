diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/java/FontCacheJava.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/java/FontCacheJava.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/java/FontCacheJava.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/java/FontCacheJava.cpp
@@ -24,11 +24,11 @@
  */
 
 #include "config.h"
 
 #include "NotImplemented.h"
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 #include "FontCache.h"
 #include "FontRanges.h"
 #include "FontPlatformData.h"
 #include "Font.h"
 #include "FontSelector.h"
@@ -43,20 +43,20 @@
 {
     return nullptr;
 }
 
 
-std::unique_ptr<FontPlatformData> FontCache::createFontPlatformData(const FontDescription& fontDescription, const AtomicString& family, const FontFeatureSettings*, const FontVariantSettings*, FontSelectionSpecifiedCapabilities) {
+std::unique_ptr<FontPlatformData> FontCache::createFontPlatformData(const FontDescription& fontDescription, const AtomString& family, const FontFeatureSettings*, const FontVariantSettings*, FontSelectionSpecifiedCapabilities) {
 
     return FontPlatformData::create(fontDescription, family);
 }
 
 Ref<Font> FontCache::lastResortFallbackFont(const FontDescription& fontDescription)
 {
     // We want to return a fallback font here, otherwise the logic preventing FontConfig
     // matches for non-fallback fonts might return 0. See isFallbackFontAllowed.
-    static AtomicString timesStr("serif");
+    static AtomString timesStr("serif");
     return *fontForFamily(fontDescription, timesStr);
 }
 
 Vector<String> FontCache::systemFontFamilies()
 {
@@ -64,17 +64,22 @@
     // FIXME: JDK-8146864
     notImplemented();
     return Vector<String>();
 }
 
-const AtomicString& FontCache::platformAlternateFamilyName(const AtomicString&)
+bool FontCache::isSystemFontForbiddenForEditing(const String&)
+{
+    return false;
+}
+
+const AtomString& FontCache::platformAlternateFamilyName(const AtomString&)
 {
     notImplemented();
     return nullAtom();
 }
 
-Vector<FontSelectionCapabilities> FontCache::getFontSelectionCapabilitiesInFamily(const AtomicString&, AllowUserInstalledFonts)
+Vector<FontSelectionCapabilities> FontCache::getFontSelectionCapabilitiesInFamily(const AtomString&, AllowUserInstalledFonts)
 {
     notImplemented();
     return { };
 }
 
