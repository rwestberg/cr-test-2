diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/ExecutableAllocator.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/ExecutableAllocator.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/ExecutableAllocator.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/ExecutableAllocator.h
@@ -25,10 +25,11 @@
 
 #pragma once
 
 #include "JITCompilationEffort.h"
 #include "JSCPtrTag.h"
+#include "Options.h"
 #include <stddef.h> // for ptrdiff_t
 #include <limits>
 #include <wtf/Assertions.h>
 #include <wtf/Lock.h>
 #include <wtf/MetaAllocatorHandle.h>
@@ -57,10 +58,43 @@
 
 static const unsigned jitAllocationGranule = 32;
 
 typedef WTF::MetaAllocatorHandle ExecutableMemoryHandle;
 
+class ExecutableAllocatorBase {
+    WTF_MAKE_FAST_ALLOCATED;
+    WTF_MAKE_NONCOPYABLE(ExecutableAllocatorBase);
+public:
+    bool isValid() const { return false; }
+
+    static bool underMemoryPressure() { return false; }
+
+    static double memoryPressureMultiplier(size_t) { return 1.0; }
+
+    static void dumpProfile() { }
+
+    RefPtr<ExecutableMemoryHandle> allocate(size_t, void*, JITCompilationEffort) { return nullptr; }
+
+    static void setJITEnabled(bool) { };
+
+    bool isValidExecutableMemory(const AbstractLocker&, void*) { return false; }
+
+    static size_t committedByteCount() { return 0; }
+
+    Lock& getLock() const
+    {
+        return m_lock;
+    }
+
+protected:
+    ExecutableAllocatorBase() = default;
+    ~ExecutableAllocatorBase() = default;
+
+private:
+    mutable Lock m_lock;
+};
+
 #if ENABLE(JIT)
 
 JS_EXPORT_PRIVATE void* startOfFixedExecutableMemoryPoolImpl();
 JS_EXPORT_PRIVATE void* endOfFixedExecutableMemoryPoolImpl();
 
@@ -76,10 +110,12 @@
     return bitwise_cast<T>(endOfFixedExecutableMemoryPoolImpl());
 }
 
 JS_EXPORT_PRIVATE bool isJITPC(void* pc);
 
+JS_EXPORT_PRIVATE void dumpJITMemory(const void*, const void*, size_t);
+
 #if ENABLE(SEPARATED_WX_HEAP)
 
 typedef void (*JITWriteSeparateHeapsFunction)(off_t, const void*, size_t);
 extern JS_EXPORT_PRIVATE JITWriteSeparateHeapsFunction jitWriteSeparateHeapsFunction;
 extern JS_EXPORT_PRIVATE bool useFastPermisionsJITCopy;
@@ -93,10 +129,13 @@
     RELEASE_ASSERT(roundUpToMultipleOf<instructionSize>(dst) == dst);
     RELEASE_ASSERT(roundUpToMultipleOf<instructionSize>(src) == src);
 #endif
     if (isJITPC(dst)) {
         RELEASE_ASSERT(reinterpret_cast<uint8_t*>(dst) + n <= endOfFixedExecutableMemoryPool());
+
+        if (UNLIKELY(Options::dumpJITMemoryPath()))
+            dumpJITMemory(dst, src, n);
 #if ENABLE(FAST_JIT_PERMISSIONS)
 #if ENABLE(SEPARATED_WX_HEAP)
         if (useFastPermisionsJITCopy)
 #endif
         {
@@ -120,18 +159,17 @@
 
     // Use regular memcpy for writes outside the JIT region.
     return memcpy(dst, src, n);
 }
 
-class ExecutableAllocator {
-    WTF_MAKE_FAST_ALLOCATED;
-    WTF_MAKE_NONCOPYABLE(ExecutableAllocator);
-    enum ProtectionSetting { Writable, Executable };
-
+class ExecutableAllocator : private ExecutableAllocatorBase {
 public:
+    using Base = ExecutableAllocatorBase;
+
     static ExecutableAllocator& singleton();
-    static void initializeAllocator();
+    static void initialize();
+    static void initializeUnderlyingAllocator();
 
     bool isValid() const;
 
     static bool underMemoryPressure();
 
@@ -150,48 +188,27 @@
     bool isValidExecutableMemory(const AbstractLocker&, void* address);
 
     static size_t committedByteCount();
 
     Lock& getLock() const;
-private:
 
-    ExecutableAllocator();
-    ~ExecutableAllocator();
+private:
+    ExecutableAllocator() = default;
+    ~ExecutableAllocator() = default;
 };
 
 #else
 
-class ExecutableAllocator {
-    enum ProtectionSetting { Writable, Executable };
-
+class ExecutableAllocator : public ExecutableAllocatorBase {
 public:
     static ExecutableAllocator& singleton();
-    static void initializeAllocator();
-
-    bool isValid() const { return false; }
-
-    static bool underMemoryPressure() { return false; }
-
-    static double memoryPressureMultiplier(size_t) { return 1.0; }
-
-    static void dumpProfile() { }
-
-    RefPtr<ExecutableMemoryHandle> allocate(size_t, void*, JITCompilationEffort) { return nullptr; }
-
-    static void setJITEnabled(bool) { };
-
-    bool isValidExecutableMemory(const AbstractLocker&, void*) { return false; }
-
-    static size_t committedByteCount() { return 0; }
-
-    Lock& getLock() const
-    {
-        return m_lock;
-    }
+    static void initialize();
+    static void initializeUnderlyingAllocator() { }
 
 private:
-    mutable Lock m_lock;
+    ExecutableAllocator() = default;
+    ~ExecutableAllocator() = default;
 };
 
 static inline void* performJITMemcpy(void *dst, const void *src, size_t n)
 {
     return memcpy(dst, src, n);
