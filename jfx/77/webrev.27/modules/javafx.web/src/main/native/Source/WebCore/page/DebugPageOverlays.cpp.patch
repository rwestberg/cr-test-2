diff a/modules/javafx.web/src/main/native/Source/WebCore/page/DebugPageOverlays.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/DebugPageOverlays.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/DebugPageOverlays.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/DebugPageOverlays.cpp
@@ -86,11 +86,11 @@
     bool updateRegion() override;
 };
 
 bool MouseWheelRegionOverlay::updateRegion()
 {
-    auto region = std::make_unique<Region>();
+    auto region = makeUnique<Region>();
 
     for (const Frame* frame = &m_page.mainFrame(); frame; frame = frame->tree().traverseNext()) {
         if (!frame->view() || !frame->document())
             continue;
 
@@ -150,18 +150,21 @@
             int g;
             int b;
         };
         static const MapEntry entries[] = {
             { "touchstart"_s, 191, 191, 63 },
-            { "touchmove"_s, 63, 191, 191 },
+            { "touchmove"_s, 80, 204, 245 },
             { "touchend"_s, 191, 63, 127 },
             { "touchforcechange"_s, 63, 63, 191 },
             { "wheel"_s, 255, 128, 0 },
+            { "mousedown"_s, 80, 245, 80 },
+            { "mousemove"_s, 245, 245, 80 },
+            { "mouseup"_s, 80, 245, 176 },
         };
         HashMap<String, Color> map;
         for (auto& entry : entries)
-            map.add(entry.name, Color { entry.r, entry.g, entry.b, 80 });
+            map.add(entry.name, Color { entry.r, entry.g, entry.b, 50 });
         return map;
     }());
     return regionColors;
 }
 
@@ -215,19 +218,37 @@
 
     legendRect.move(0, 30);
     context.setFillColor(m_color);
     context.fillRect(legendRect);
     drawRightAlignedText("passive listeners", context, font, legendRect.location());
+
+    legendRect.move(0, 30);
+    context.setFillColor(touchEventRegionColors().get("mousedown"));
+    context.fillRect(legendRect);
+    drawRightAlignedText("mousedown", context, font, legendRect.location());
+
+    legendRect.move(0, 30);
+    context.setFillColor(touchEventRegionColors().get("mousemove"));
+    context.fillRect(legendRect);
+    drawRightAlignedText("mousemove", context, font, legendRect.location());
+
+    legendRect.move(0, 30);
+    context.setFillColor(touchEventRegionColors().get("mouseup"));
+    context.fillRect(legendRect);
+    drawRightAlignedText("mouseup", context, font, legendRect.location());
 #else
     // On desktop platforms, the "wheel" region includes the non-fast scrollable region.
     context.setFillColor(touchEventRegionColors().get("wheel"));
     context.fillRect(legendRect);
     drawRightAlignedText("non-fast region", context, font, legendRect.location());
 #endif
 
     for (const auto& synchronousEventRegion : m_eventTrackingRegions.eventSpecificSynchronousDispatchRegions) {
-        Color regionColor = touchEventRegionColors().get(synchronousEventRegion.key);
+        Color regionColor(0, 0, 0, 64);
+        auto it = touchEventRegionColors().find(synchronousEventRegion.key);
+        if (it != touchEventRegionColors().end())
+            regionColor = it->value;
         drawRegion(context, synchronousEventRegion.value, regionColor, bounds);
     }
 
     drawRegion(context, m_eventTrackingRegions.asynchronousDispatchRegion, m_color, bounds);
 }
