diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITCode.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITCode.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITCode.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITCode.cpp
@@ -30,33 +30,34 @@
 #include "ProtoCallFrame.h"
 #include <wtf/PrintStream.h>
 
 namespace JSC {
 
-JITCode::JITCode(JITType jitType)
+JITCode::JITCode(JITType jitType, ShareAttribute shareAttribute)
     : m_jitType(jitType)
+    , m_shareAttribute(shareAttribute)
 {
 }
 
 JITCode::~JITCode()
 {
 }
 
 const char* JITCode::typeName(JITType jitType)
 {
     switch (jitType) {
-    case None:
+    case JITType::None:
         return "None";
-    case HostCallThunk:
+    case JITType::HostCallThunk:
         return "Host";
-    case InterpreterThunk:
+    case JITType::InterpreterThunk:
         return "LLInt";
-    case BaselineJIT:
+    case JITType::BaselineJIT:
         return "Baseline";
-    case DFGJIT:
+    case JITType::DFGJIT:
         return "DFG";
-    case FTLJIT:
+    case JITType::FTLJIT:
         return "FTL";
     default:
         CRASH();
         return "";
     }
@@ -93,12 +94,12 @@
 JITCodeWithCodeRef::JITCodeWithCodeRef(JITType jitType)
     : JITCode(jitType)
 {
 }
 
-JITCodeWithCodeRef::JITCodeWithCodeRef(CodeRef<JSEntryPtrTag> ref, JITType jitType)
-    : JITCode(jitType)
+JITCodeWithCodeRef::JITCodeWithCodeRef(CodeRef<JSEntryPtrTag> ref, JITType jitType, JITCode::ShareAttribute shareAttribute)
+    : JITCode(jitType, shareAttribute)
     , m_ref(ref)
 {
 }
 
 JITCodeWithCodeRef::~JITCodeWithCodeRef()
@@ -149,20 +150,20 @@
 DirectJITCode::DirectJITCode(JITType jitType)
     : JITCodeWithCodeRef(jitType)
 {
 }
 
-DirectJITCode::DirectJITCode(JITCode::CodeRef<JSEntryPtrTag> ref, JITCode::CodePtr<JSEntryPtrTag> withArityCheck, JITType jitType)
-    : JITCodeWithCodeRef(ref, jitType)
+DirectJITCode::DirectJITCode(JITCode::CodeRef<JSEntryPtrTag> ref, JITCode::CodePtr<JSEntryPtrTag> withArityCheck, JITType jitType, JITCode::ShareAttribute shareAttribute)
+    : JITCodeWithCodeRef(ref, jitType, shareAttribute)
     , m_withArityCheck(withArityCheck)
 {
     ASSERT(m_ref);
     ASSERT(m_withArityCheck);
 }
 
-DirectJITCode::DirectJITCode(JITCode::CodeRef<JSEntryPtrTag> ref, JITCode::CodePtr<JSEntryPtrTag> withArityCheck, JITType jitType, Intrinsic intrinsic)
-    : JITCodeWithCodeRef(ref, jitType)
+DirectJITCode::DirectJITCode(JITCode::CodeRef<JSEntryPtrTag> ref, JITCode::CodePtr<JSEntryPtrTag> withArityCheck, JITType jitType, Intrinsic intrinsic, JITCode::ShareAttribute shareAttribute)
+    : JITCodeWithCodeRef(ref, jitType, shareAttribute)
     , m_withArityCheck(withArityCheck)
 {
     m_intrinsic = intrinsic;
     ASSERT(m_ref);
     ASSERT(m_withArityCheck);
@@ -198,12 +199,12 @@
 NativeJITCode::NativeJITCode(JITType jitType)
     : JITCodeWithCodeRef(jitType)
 {
 }
 
-NativeJITCode::NativeJITCode(CodeRef<JSEntryPtrTag> ref, JITType jitType, Intrinsic intrinsic)
-    : JITCodeWithCodeRef(ref, jitType)
+NativeJITCode::NativeJITCode(CodeRef<JSEntryPtrTag> ref, JITType jitType, Intrinsic intrinsic, JITCode::ShareAttribute shareAttribute)
+    : JITCodeWithCodeRef(ref, jitType, shareAttribute)
 {
     m_intrinsic = intrinsic;
 }
 
 NativeJITCode::~NativeJITCode()
@@ -238,11 +239,11 @@
 
 } // namespace JSC
 
 namespace WTF {
 
-void printInternal(PrintStream& out, JSC::JITCode::JITType type)
+void printInternal(PrintStream& out, JSC::JITType type)
 {
     out.print(JSC::JITCode::typeName(type));
 }
 
 } // namespace WTF
