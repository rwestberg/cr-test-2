diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorDatabaseResource.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorDatabaseResource.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorDatabaseResource.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorDatabaseResource.cpp
@@ -38,31 +38,31 @@
 
 using namespace Inspector;
 
 static int nextUnusedId = 1;
 
-Ref<InspectorDatabaseResource> InspectorDatabaseResource::create(RefPtr<Database>&& database, const String& domain, const String& name, const String& version)
+Ref<InspectorDatabaseResource> InspectorDatabaseResource::create(Database& database, const String& domain, const String& name, const String& version)
 {
-    return adoptRef(*new InspectorDatabaseResource(WTFMove(database), domain, name, version));
+    return adoptRef(*new InspectorDatabaseResource(database, domain, name, version));
 }
 
-InspectorDatabaseResource::InspectorDatabaseResource(RefPtr<Database>&& database, const String& domain, const String& name, const String& version)
+InspectorDatabaseResource::InspectorDatabaseResource(Database& database, const String& domain, const String& name, const String& version)
     : m_database(database)
     , m_id(String::number(nextUnusedId++))
     , m_domain(domain)
     , m_name(name)
     , m_version(version)
 {
 }
 
-void InspectorDatabaseResource::bind(Inspector::DatabaseFrontendDispatcher* databaseFrontendDispatcher)
+void InspectorDatabaseResource::bind(Inspector::DatabaseFrontendDispatcher& databaseFrontendDispatcher)
 {
     auto jsonObject = Inspector::Protocol::Database::Database::create()
         .setId(m_id)
         .setDomain(m_domain)
         .setName(m_name)
         .setVersion(m_version)
         .release();
-    databaseFrontendDispatcher->addDatabase(WTFMove(jsonObject));
+    databaseFrontendDispatcher.addDatabase(WTFMove(jsonObject));
 }
 
 } // namespace WebCore
