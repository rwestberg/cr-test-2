diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/encryptedmedia/clearkey/CDMClearKey.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/encryptedmedia/clearkey/CDMClearKey.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/encryptedmedia/clearkey/CDMClearKey.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/encryptedmedia/clearkey/CDMClearKey.cpp
@@ -122,11 +122,11 @@
             decodedKeys.append({ CDMInstanceSession::KeyStatus::Usable, SharedBuffer::create(WTFMove(keyIDData)), SharedBuffer::create(WTFMove(keyValueData)) });
             return true;
         });
     if (!validFormat)
         return WTF::nullopt;
-    return WTFMove(decodedKeys);
+    return decodedKeys;
 }
 
 static bool parseLicenseReleaseAcknowledgementFormat(const JSON::Object& root)
 {
     // If the 'kids' key is present in the root object, parse the JSON further
@@ -301,11 +301,11 @@
 #ifdef NDEBUG
     UNUSED_PARAM(keySystem);
 #else
     ASSERT(supportsKeySystem(keySystem));
 #endif
-    return std::make_unique<CDMPrivateClearKey>();
+    return makeUnique<CDMPrivateClearKey>();
 }
 
 bool CDMFactoryClearKey::supportsKeySystem(const String& keySystem)
 {
     // `org.w3.clearkey` is the only supported key system.
@@ -313,11 +313,11 @@
 }
 
 CDMPrivateClearKey::CDMPrivateClearKey() = default;
 CDMPrivateClearKey::~CDMPrivateClearKey() = default;
 
-bool CDMPrivateClearKey::supportsInitDataType(const AtomicString& initDataType) const
+bool CDMPrivateClearKey::supportsInitDataType(const AtomString& initDataType) const
 {
     // `keyids` and 'cenc' are the only supported init data type.
     return (equalLettersIgnoringASCIICase(initDataType, "keyids") || equalLettersIgnoringASCIICase(initDataType, "cenc") || equalLettersIgnoringASCIICase(initDataType, "webm"));
 }
 
@@ -417,11 +417,11 @@
 {
     // Sessions are supported.
     return true;
 }
 
-bool CDMPrivateClearKey::supportsInitData(const AtomicString& initDataType, const SharedBuffer& initData) const
+bool CDMPrivateClearKey::supportsInitData(const AtomString& initDataType, const SharedBuffer& initData) const
 {
     // Validate the initData buffer as an JSON object in keyids case.
     if (equalLettersIgnoringASCIICase(initDataType, "keyids") && parseJSONObject(initData))
         return true;
 
@@ -505,10 +505,11 @@
 
 const Vector<CDMInstanceClearKey::Key> CDMInstanceClearKey::keys() const
 {
     // Return the keys of all sessions.
     Vector<CDMInstanceClearKey::Key> allKeys { };
+    auto locker = holdLock(m_keysMutex);
     size_t initialCapacity = 0;
     for (auto& key : ClearKeyState::singleton().keys().values())
         initialCapacity += key.size();
     allKeys.reserveInitialCapacity(initialCapacity);
 
@@ -516,11 +517,11 @@
         allKeys.appendVector(key);
 
     return allKeys;
 }
 
-void CDMInstanceSessionClearKey::requestLicense(LicenseType, const AtomicString& initDataType, Ref<SharedBuffer>&& initData, LicenseCallback&& callback)
+void CDMInstanceSessionClearKey::requestLicense(LicenseType, const AtomString& initDataType, Ref<SharedBuffer>&& initData, LicenseCallback&& callback)
 {
     static uint32_t s_sessionIdValue = 0;
     ++s_sessionIdValue;
 
     if (equalLettersIgnoringASCIICase(initDataType, "cenc"))
