diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchHeaders.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchHeaders.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchHeaders.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchHeaders.cpp
@@ -31,42 +31,45 @@
 
 #include "HTTPParsers.h"
 
 namespace WebCore {
 
-static ExceptionOr<bool> canWriteHeader(const String& name, const String& value, FetchHeaders::Guard guard)
+static ExceptionOr<bool> canWriteHeader(const String& name, const String& value, const String& combinedValue, FetchHeaders::Guard guard)
 {
     if (!isValidHTTPToken(name))
         return Exception { TypeError, makeString("Invalid header name: '", name, "'") };
     if (!isValidHTTPHeaderValue(value))
         return Exception { TypeError, makeString("Header '", name, "' has invalid value: '", value, "'") };
     if (guard == FetchHeaders::Guard::Immutable)
         return Exception { TypeError, "Headers object's guard is 'immutable'"_s };
     if (guard == FetchHeaders::Guard::Request && isForbiddenHeaderName(name))
         return false;
-    if (guard == FetchHeaders::Guard::RequestNoCors && !isSimpleHeader(name, value))
+    if (guard == FetchHeaders::Guard::RequestNoCors && !combinedValue.isEmpty() && !isSimpleHeader(name, combinedValue))
         return false;
     if (guard == FetchHeaders::Guard::Response && isForbiddenResponseHeaderName(name))
         return false;
     return true;
 }
 
 static ExceptionOr<void> appendToHeaderMap(const String& name, const String& value, HTTPHeaderMap& headers, FetchHeaders::Guard guard)
 {
     String normalizedValue = stripLeadingAndTrailingHTTPSpaces(value);
-    auto canWriteResult = canWriteHeader(name, normalizedValue, guard);
+    String combinedValue = normalizedValue;
+    if (headers.contains(name))
+        combinedValue = makeString(headers.get(name), ", ", normalizedValue);
+    auto canWriteResult = canWriteHeader(name, normalizedValue, combinedValue, guard);
     if (canWriteResult.hasException())
         return canWriteResult.releaseException();
     if (!canWriteResult.releaseReturnValue())
         return { };
-    headers.add(name, normalizedValue);
+    headers.set(name, combinedValue);
     return { };
 }
 
 static ExceptionOr<void> appendToHeaderMap(const HTTPHeaderMap::HTTPHeaderMapConstIterator::KeyValue& header, HTTPHeaderMap& headers, FetchHeaders::Guard guard)
 {
-    auto canWriteResult = canWriteHeader(header.key, header.value, guard);
+    auto canWriteResult = canWriteHeader(header.key, header.value, header.value, guard);
     if (canWriteResult.hasException())
         return canWriteResult.releaseException();
     if (!canWriteResult.releaseReturnValue())
         return { };
     if (header.keyAsHTTPHeaderName)
@@ -134,11 +137,11 @@
     return appendToHeaderMap(name, value, m_headers, m_guard);
 }
 
 ExceptionOr<void> FetchHeaders::remove(const String& name)
 {
-    auto canWriteResult = canWriteHeader(name, { }, m_guard);
+    auto canWriteResult = canWriteHeader(name, { }, { }, m_guard);
     if (canWriteResult.hasException())
         return canWriteResult.releaseException();
     if (!canWriteResult.releaseReturnValue())
         return { };
     m_headers.remove(name);
@@ -160,11 +163,11 @@
 }
 
 ExceptionOr<void> FetchHeaders::set(const String& name, const String& value)
 {
     String normalizedValue = stripLeadingAndTrailingHTTPSpaces(value);
-    auto canWriteResult = canWriteHeader(name, normalizedValue, m_guard);
+    auto canWriteResult = canWriteHeader(name, normalizedValue, normalizedValue, m_guard);
     if (canWriteResult.hasException())
         return canWriteResult.releaseException();
     if (!canWriteResult.releaseReturnValue())
         return { };
     m_headers.set(name, normalizedValue);
@@ -172,11 +175,11 @@
 }
 
 void FetchHeaders::filterAndFill(const HTTPHeaderMap& headers, Guard guard)
 {
     for (auto& header : headers) {
-        auto canWriteResult = canWriteHeader(header.key, header.value, guard);
+        auto canWriteResult = canWriteHeader(header.key, header.value, header.value, guard);
         if (canWriteResult.hasException())
             continue;
         if (!canWriteResult.releaseReturnValue())
             continue;
         if (header.keyAsHTTPHeaderName)
