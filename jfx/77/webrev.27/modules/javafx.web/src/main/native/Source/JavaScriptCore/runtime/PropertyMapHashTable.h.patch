diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertyMapHashTable.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertyMapHashTable.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertyMapHashTable.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertyMapHashTable.h
@@ -25,11 +25,11 @@
 #include "Structure.h"
 #include "WriteBarrier.h"
 #include <wtf/HashTable.h>
 #include <wtf/MathExtras.h>
 #include <wtf/Vector.h>
-#include <wtf/text/AtomicStringImpl.h>
+#include <wtf/text/AtomStringImpl.h>
 
 
 #define DUMP_PROPERTYMAP_STATS 0
 #define DUMP_PROPERTYMAP_COLLISIONS 0
 
@@ -286,11 +286,11 @@
 }
 
 inline PropertyTable::find_iterator PropertyTable::find(const KeyType& key)
 {
     ASSERT(key);
-    ASSERT(key->isAtomic() || key->isSymbol());
+    ASSERT(key->isAtom() || key->isSymbol());
     unsigned hash = IdentifierRepHash::hash(key);
 
 #if DUMP_PROPERTYMAP_STATS
     ++propertyMapHashTableStats->numFinds;
 #endif
@@ -316,11 +316,11 @@
 }
 
 inline PropertyTable::ValueType* PropertyTable::get(const KeyType& key)
 {
     ASSERT(key);
-    ASSERT(key->isAtomic() || key->isSymbol());
+    ASSERT(key->isAtom() || key->isSymbol());
 
     if (!m_keyCount)
         return nullptr;
 
     unsigned hash = IdentifierRepHash::hash(key);
@@ -446,11 +446,11 @@
 }
 
 inline void PropertyTable::addDeletedOffset(PropertyOffset offset)
 {
     if (!m_deletedOffsets)
-        m_deletedOffsets = std::make_unique<Vector<PropertyOffset>>();
+        m_deletedOffsets = makeUnique<Vector<PropertyOffset>>();
     m_deletedOffsets->append(offset);
 }
 
 inline PropertyOffset PropertyTable::nextOffset(PropertyOffset inlineCapacity)
 {
