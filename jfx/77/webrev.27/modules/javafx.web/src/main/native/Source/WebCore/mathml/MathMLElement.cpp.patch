diff a/modules/javafx.web/src/main/native/Source/WebCore/mathml/MathMLElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/mathml/MathMLElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/mathml/MathMLElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/mathml/MathMLElement.cpp
@@ -72,11 +72,11 @@
     auto& rowSpanValue = attributeWithoutSynchronization(rowspanAttr);
     static const unsigned maxRowspan = 8190; // This constant comes from HTMLTableCellElement.
     return std::max(1u, std::min(limitToOnlyHTMLNonNegative(rowSpanValue, 1u), maxRowspan));
 }
 
-void MathMLElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void MathMLElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == hrefAttr) {
         bool wasLink = isLink();
         setIsLink(!value.isNull() && !shouldProhibitLinks(this));
         if (wasLink != isLink())
@@ -96,30 +96,36 @@
     if (name == backgroundAttr || name == colorAttr || name == dirAttr || name == fontfamilyAttr || name == fontsizeAttr || name == fontstyleAttr || name == fontweightAttr || name == mathbackgroundAttr || name == mathcolorAttr || name == mathsizeAttr)
         return true;
     return StyledElement::isPresentationAttribute(name);
 }
 
-static String convertToPercentageIfNeeded(const AtomicString& value)
+static String convertMathSizeIfNeeded(const AtomString& value)
 {
+    if (value == "small")
+        return "0.75em";
+    if (value == "normal")
+        return "1em";
+    if (value == "big")
+        return "1.5em";
+
+    // FIXME: mathsize accepts any MathML length, including named spaces (see parseMathMLLength).
     // FIXME: Might be better to use double than float.
     // FIXME: Might be better to use "shortest" numeric formatting instead of fixed width.
     bool ok = false;
     float unitlessValue = value.toFloat(&ok);
     if (!ok)
         return value;
     return makeString(FormattedNumber::fixedWidth(unitlessValue * 100, 3), '%');
 }
 
-void MathMLElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomicString& value, MutableStyleProperties& style)
+void MathMLElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomString& value, MutableStyleProperties& style)
 {
     if (name == mathbackgroundAttr)
         addPropertyToPresentationAttributeStyle(style, CSSPropertyBackgroundColor, value);
-    else if (name == mathsizeAttr) {
-        // The following three values of mathsize are handled in WebCore/css/mathml.css
-        if (value != "normal" && value != "small" && value != "big")
-            addPropertyToPresentationAttributeStyle(style, CSSPropertyFontSize, convertToPercentageIfNeeded(value));
-    } else if (name == mathcolorAttr)
+    else if (name == mathsizeAttr)
+        addPropertyToPresentationAttributeStyle(style, CSSPropertyFontSize, convertMathSizeIfNeeded(value));
+    else if (name == mathcolorAttr)
         addPropertyToPresentationAttributeStyle(style, CSSPropertyColor, value);
     // FIXME: The following are deprecated attributes that should lose if there is a conflict with a non-deprecated attribute.
     else if (name == fontsizeAttr)
         addPropertyToPresentationAttributeStyle(style, CSSPropertyFontSize, value);
     else if (name == backgroundAttr)
@@ -213,26 +219,8 @@
         return StyledElement::supportsFocus();
     // If not a link we should still be able to focus the element if it has tabIndex.
     return isLink() || StyledElement::supportsFocus();
 }
 
-int MathMLElement::tabIndex() const
-{
-    // Skip the supportsFocus check in StyledElement.
-    return Element::tabIndex();
-}
-
-StringView MathMLElement::stripLeadingAndTrailingWhitespace(const StringView& stringView)
-{
-    unsigned start = 0, stringLength = stringView.length();
-    while (stringLength > 0 && isHTMLSpace(stringView[start])) {
-        start++;
-        stringLength--;
-    }
-    while (stringLength > 0 && isHTMLSpace(stringView[start + stringLength - 1]))
-        stringLength--;
-    return stringView.substring(start, stringLength);
-}
-
 }
 
 #endif // ENABLE(MATHML)
