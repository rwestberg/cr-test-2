diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Identifier.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Identifier.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Identifier.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Identifier.cpp
@@ -1,7 +1,7 @@
 /*
- *  Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2012 Apple Inc. All rights reserved.
+ *  Copyright (C) 2003-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Library General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -33,67 +33,47 @@
 #include <wtf/text/ASCIIFastPath.h>
 #include <wtf/text/StringHash.h>
 
 namespace JSC {
 
-Ref<StringImpl> Identifier::add(VM* vm, const char* c)
+Ref<StringImpl> Identifier::add(VM& vm, const char* c)
 {
     ASSERT(c);
     ASSERT(c[0]);
     if (!c[1])
-        return vm->smallStrings.singleCharacterStringRep(c[0]);
+        return vm.smallStrings.singleCharacterStringRep(c[0]);
 
-    return *AtomicStringImpl::add(c);
+    return *AtomStringImpl::add(c);
 }
 
-Ref<StringImpl> Identifier::add(ExecState* exec, const char* c)
-{
-    return add(&exec->vm(), c);
-}
-
-Ref<StringImpl> Identifier::add8(VM* vm, const UChar* s, int length)
+Ref<StringImpl> Identifier::add8(VM& vm, const UChar* s, int length)
 {
     if (length == 1) {
         UChar c = s[0];
-        ASSERT(c <= 0xff);
+        ASSERT(isLatin1(c));
         if (canUseSingleCharacterString(c))
-            return vm->smallStrings.singleCharacterStringRep(c);
+            return vm.smallStrings.singleCharacterStringRep(c);
     }
     if (!length)
         return *StringImpl::empty();
 
-    return *AtomicStringImpl::add(s, length);
-}
-
-Identifier Identifier::from(ExecState* exec, unsigned value)
-{
-    return Identifier(exec, exec->vm().numericStrings.add(value));
+    return *AtomStringImpl::add(s, length);
 }
 
-Identifier Identifier::from(ExecState* exec, int value)
+Identifier Identifier::from(VM& vm, unsigned value)
 {
-    return Identifier(exec, exec->vm().numericStrings.add(value));
+    return Identifier(vm, vm.numericStrings.add(value));
 }
 
-Identifier Identifier::from(ExecState* exec, double value)
+Identifier Identifier::from(VM& vm, int value)
 {
-    return Identifier(exec, exec->vm().numericStrings.add(value));
+    return Identifier(vm, vm.numericStrings.add(value));
 }
 
-Identifier Identifier::from(VM* vm, unsigned value)
+Identifier Identifier::from(VM& vm, double value)
 {
-    return Identifier(vm, vm->numericStrings.add(value));
-}
-
-Identifier Identifier::from(VM* vm, int value)
-{
-    return Identifier(vm, vm->numericStrings.add(value));
-}
-
-Identifier Identifier::from(VM* vm, double value)
-{
-    return Identifier(vm, vm->numericStrings.add(value));
+    return Identifier(vm, vm.numericStrings.add(value));
 }
 
 void Identifier::dump(PrintStream& out) const
 {
     if (impl()) {
@@ -107,27 +87,21 @@
         out.print("<null identifier>");
 }
 
 #ifndef NDEBUG
 
-void Identifier::checkCurrentAtomicStringTable(VM* vm)
+void Identifier::checkCurrentAtomStringTable(VM& vm)
 {
     // Check the identifier table accessible through the threadspecific matches the
     // vm's identifier table.
-    ASSERT_UNUSED(vm, vm->atomicStringTable() == Thread::current().atomicStringTable());
-}
-
-void Identifier::checkCurrentAtomicStringTable(ExecState* exec)
-{
-    checkCurrentAtomicStringTable(&exec->vm());
+    ASSERT_UNUSED(vm, vm.atomStringTable() == Thread::current().atomStringTable());
 }
 
 #else
 
 // These only exists so that our exports are the same for debug and release builds.
 // This would be an RELEASE_ASSERT_NOT_REACHED(), but we're in NDEBUG only code here!
-NO_RETURN_DUE_TO_CRASH void Identifier::checkCurrentAtomicStringTable(VM*) { CRASH(); }
-NO_RETURN_DUE_TO_CRASH void Identifier::checkCurrentAtomicStringTable(ExecState*) { CRASH(); }
+NO_RETURN_DUE_TO_CRASH void Identifier::checkCurrentAtomStringTable(VM&) { CRASH(); }
 
 #endif
 
 } // namespace JSC
