diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLLogicalNotExpression.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLLogicalNotExpression.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLLogicalNotExpression.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLLogicalNotExpression.h
@@ -26,34 +26,33 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "WHLSLExpression.h"
-#include "WHLSLLexer.h"
+#include <wtf/FastMalloc.h>
 #include <wtf/UniqueRef.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class LogicalNotExpression : public Expression {
+class LogicalNotExpression final : public Expression {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    LogicalNotExpression(Lexer::Token&& origin, UniqueRef<Expression>&& operand)
-        : Expression(WTFMove(origin))
+    LogicalNotExpression(CodeLocation location, UniqueRef<Expression>&& operand)
+        : Expression(location, Kind::LogicalNot)
         , m_operand(WTFMove(operand))
     {
     }
 
-    virtual ~LogicalNotExpression() = default;
+    ~LogicalNotExpression() = default;
 
     LogicalNotExpression(const LogicalNotExpression&) = delete;
     LogicalNotExpression(LogicalNotExpression&&) = default;
 
-    bool isLogicalNotExpression() const override { return true; }
-
     Expression& operand() { return m_operand; }
 
 private:
     UniqueRef<Expression> m_operand;
 };
@@ -62,8 +61,10 @@
 
 }
 
 }
 
+DEFINE_DEFAULT_DELETE(LogicalNotExpression)
+
 SPECIALIZE_TYPE_TRAITS_WHLSL_EXPRESSION(LogicalNotExpression, isLogicalNotExpression())
 
 #endif
