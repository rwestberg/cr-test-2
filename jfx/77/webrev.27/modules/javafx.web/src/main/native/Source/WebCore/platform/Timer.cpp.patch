diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/Timer.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/Timer.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/Timer.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/Timer.cpp
@@ -252,25 +252,22 @@
     return false;
 #endif
 }
 
 TimerBase::TimerBase()
-    : m_wasDeleted(false)
 {
 }
 
 TimerBase::~TimerBase()
 {
     ASSERT(canAccessThreadLocalDataForThread(m_thread.get()));
     RELEASE_ASSERT(canAccessThreadLocalDataForThread(m_thread.get()) || shouldSuppressThreadSafetyCheck());
     stop();
     ASSERT(!inHeap());
-    if (m_heapItem) {
+    if (m_heapItem)
         m_heapItem->clearTimer();
-        m_heapItem = nullptr;
-    }
-    m_wasDeleted = true;
+    m_unalignedNextFireTime = MonotonicTime::nan();
 }
 
 void TimerBase::start(Seconds nextFireInterval, Seconds repeatInterval)
 {
     ASSERT(canAccessThreadLocalDataForThread(m_thread.get()));
@@ -465,14 +462,17 @@
 
 void TimerBase::setNextFireTime(MonotonicTime newTime)
 {
     ASSERT(canAccessThreadLocalDataForThread(m_thread.get()));
     RELEASE_ASSERT(canAccessThreadLocalDataForThread(m_thread.get()) || shouldSuppressThreadSafetyCheck());
-    RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(!m_wasDeleted);
+    bool timerHasBeenDeleted = std::isnan(m_unalignedNextFireTime);
+    RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(!timerHasBeenDeleted);
 
-    if (m_unalignedNextFireTime != newTime)
+    if (m_unalignedNextFireTime != newTime) {
+        RELEASE_ASSERT(!std::isnan(newTime));
         m_unalignedNextFireTime = newTime;
+    }
 
     // Keep heap valid while changing the next-fire time.
     MonotonicTime oldTime = nextFireTime();
     // Don't realign zero-delay timers.
     if (newTime) {
@@ -515,10 +515,12 @@
 }
 
 Seconds TimerBase::nextUnalignedFireInterval() const
 {
     ASSERT(isActive());
-    return std::max(m_unalignedNextFireTime - MonotonicTime::now(), 0_s);
+    auto result = std::max(m_unalignedNextFireTime - MonotonicTime::now(), 0_s);
+    RELEASE_ASSERT(std::isfinite(result));
+    return result;
 }
 
 } // namespace WebCore
 
