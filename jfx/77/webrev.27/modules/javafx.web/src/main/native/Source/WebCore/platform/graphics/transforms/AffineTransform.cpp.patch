diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/transforms/AffineTransform.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/transforms/AffineTransform.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/transforms/AffineTransform.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/transforms/AffineTransform.cpp
@@ -29,14 +29,15 @@
 
 #include "FloatConversion.h"
 #include "FloatQuad.h"
 #include "FloatRect.h"
 #include "IntRect.h"
+#include "Region.h"
 #include "TransformationMatrix.h"
-#include <wtf/text/TextStream.h>
-
 #include <wtf/MathExtras.h>
+#include <wtf/Optional.h>
+#include <wtf/text/TextStream.h>
 
 namespace WebCore {
 
 #if COMPILER(MSVC)
 AffineTransform::AffineTransform()
@@ -332,10 +333,25 @@
     result.setP3(mapPoint(q.p3()));
     result.setP4(mapPoint(q.p4()));
     return result;
 }
 
+Region AffineTransform::mapRegion(const Region& region) const
+{
+    if (isIdentityOrTranslation()) {
+        Region mappedRegion(region);
+        mappedRegion.translate(roundedIntSize(FloatSize(narrowPrecisionToFloat(m_transform[4]), narrowPrecisionToFloat(m_transform[5]))));
+        return mappedRegion;
+    }
+
+    Region mappedRegion;
+    for (auto& rect : region.rects())
+        mappedRegion.unite(mapRect(rect));
+
+    return mappedRegion;
+}
+
 void AffineTransform::blend(const AffineTransform& from, double progress)
 {
     DecomposedType srA, srB;
 
     from.decompose(srA);
