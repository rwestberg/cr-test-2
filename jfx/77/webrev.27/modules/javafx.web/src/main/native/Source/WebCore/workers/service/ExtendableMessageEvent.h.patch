diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ExtendableMessageEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ExtendableMessageEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ExtendableMessageEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ExtendableMessageEvent.h
@@ -55,11 +55,11 @@
         String lastEventId;
         Optional<ExtendableMessageEventSource> source;
         Vector<RefPtr<MessagePort>> ports;
     };
 
-    static Ref<ExtendableMessageEvent> create(JSC::ExecState& state, const AtomicString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
+    static Ref<ExtendableMessageEvent> create(JSC::ExecState& state, const AtomString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
     {
         return adoptRef(*new ExtendableMessageEvent(state, type, initializer, isTrusted));
     }
 
     static Ref<ExtendableMessageEvent> create(Vector<RefPtr<MessagePort>>&&, RefPtr<SerializedScriptValue>&&, const String& origin = { }, const String& lastEventId = { }, Optional<ExtendableMessageEventSource>&& source = WTF::nullopt);
@@ -73,11 +73,11 @@
     const Vector<RefPtr<MessagePort>>& ports() const { return m_ports; }
 
     EventInterface eventInterface() const final { return ExtendableMessageEventInterfaceType; }
 
 private:
-    ExtendableMessageEvent(JSC::ExecState&, const AtomicString&, const Init&, IsTrusted);
+    ExtendableMessageEvent(JSC::ExecState&, const AtomString&, const Init&, IsTrusted);
     ExtendableMessageEvent(RefPtr<SerializedScriptValue>&& data, const String& origin, const String& lastEventId, Optional<ExtendableMessageEventSource>&&, Vector<RefPtr<MessagePort>>&&);
 
     RefPtr<SerializedScriptValue> m_data;
     String m_origin;
     String m_lastEventId;
