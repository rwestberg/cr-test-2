diff a/modules/javafx.web/src/main/native/Source/WebKitLegacy/WebCoreSupport/WebResourceLoadScheduler.cpp b/modules/javafx.web/src/main/native/Source/WebKitLegacy/WebCoreSupport/WebResourceLoadScheduler.cpp
--- a/modules/javafx.web/src/main/native/Source/WebKitLegacy/WebCoreSupport/WebResourceLoadScheduler.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebKitLegacy/WebCoreSupport/WebResourceLoadScheduler.cpp
@@ -86,13 +86,13 @@
 
 WebResourceLoadScheduler::~WebResourceLoadScheduler()
 {
 }
 
-void WebResourceLoadScheduler::loadResource(DocumentLoader& documentLoader, CachedResource& resource, ResourceRequest&& request, const ResourceLoaderOptions& options, CompletionHandler<void(RefPtr<WebCore::SubresourceLoader>&&)>&& completionHandler)
+void WebResourceLoadScheduler::loadResource(Frame& frame, CachedResource& resource, ResourceRequest&& request, const ResourceLoaderOptions& options, CompletionHandler<void(RefPtr<WebCore::SubresourceLoader>&&)>&& completionHandler)
 {
-    SubresourceLoader::create(documentLoader, resource, WTFMove(request), options, [this, completionHandler = WTFMove(completionHandler)] (RefPtr<WebCore::SubresourceLoader>&& loader) mutable {
+    SubresourceLoader::create(frame, resource, WTFMove(request), options, [this, completionHandler = WTFMove(completionHandler)] (RefPtr<WebCore::SubresourceLoader>&& loader) mutable {
         if (loader)
             scheduleLoad(loader.get());
 #if PLATFORM(IOS_FAMILY)
         // Since we defer loader initialization until scheduling on iOS, the frame
         // load delegate that would be called in SubresourceLoader::create() on
@@ -109,17 +109,17 @@
 void WebResourceLoadScheduler::loadResourceSynchronously(FrameLoader& frameLoader, unsigned long, const ResourceRequest& request, ClientCredentialPolicy, const FetchOptions& options, const HTTPHeaderMap&, ResourceError& error, ResourceResponse& response, Vector<char>& data)
 {
     ResourceHandle::loadResourceSynchronously(frameLoader.networkingContext(), request, options.credentials == FetchOptions::Credentials::Omit ? StoredCredentialsPolicy::DoNotUse : StoredCredentialsPolicy::Use, error, response, data);
 }
 
-void WebResourceLoadScheduler::pageLoadCompleted(uint64_t /*webPageID*/)
+void WebResourceLoadScheduler::pageLoadCompleted(PageIdentifier)
 {
 }
 
-void WebResourceLoadScheduler::schedulePluginStreamLoad(DocumentLoader& documentLoader, NetscapePlugInStreamLoaderClient& client, ResourceRequest&& request, CompletionHandler<void(RefPtr<WebCore::NetscapePlugInStreamLoader>&&)>&& completionHandler)
+void WebResourceLoadScheduler::schedulePluginStreamLoad(Frame& frame, NetscapePlugInStreamLoaderClient& client, ResourceRequest&& request, CompletionHandler<void(RefPtr<WebCore::NetscapePlugInStreamLoader>&&)>&& completionHandler)
 {
-    NetscapePlugInStreamLoader::create(documentLoader, client, WTFMove(request), [this, completionHandler = WTFMove(completionHandler)] (RefPtr<WebCore::NetscapePlugInStreamLoader>&& loader) mutable {
+    NetscapePlugInStreamLoader::create(frame, client, WTFMove(request), [this, completionHandler = WTFMove(completionHandler)] (RefPtr<WebCore::NetscapePlugInStreamLoader>&& loader) mutable {
         if (loader)
             scheduleLoad(loader.get());
         completionHandler(WTFMove(loader));
     });
 }
