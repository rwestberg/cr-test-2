diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/ContentData.h b/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/ContentData.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/ContentData.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/ContentData.h
@@ -93,13 +93,13 @@
 
 private:
     RenderPtr<RenderObject> createContentRenderer(Document&, const RenderStyle&) const final;
     std::unique_ptr<ContentData> cloneInternal() const final
     {
-        auto image = std::make_unique<ImageContentData>(m_image.copyRef());
+        auto image = makeUnique<ImageContentData>(m_image.copyRef());
         image->setAltText(altText());
-        return WTFMove(image);
+        return image;
     }
 
     Ref<StyleImage> m_image;
 };
 
@@ -124,11 +124,11 @@
     const String& text() const { return m_text; }
     void setText(const String& text) { m_text = text; }
 
 private:
     RenderPtr<RenderObject> createContentRenderer(Document&, const RenderStyle&) const final;
-    std::unique_ptr<ContentData> cloneInternal() const final { return std::make_unique<TextContentData>(m_text); }
+    std::unique_ptr<ContentData> cloneInternal() const final { return makeUnique<TextContentData>(m_text); }
 
     String m_text;
 };
 
 inline bool operator==(const TextContentData& a, const TextContentData& b)
@@ -159,11 +159,11 @@
 
 private:
     RenderPtr<RenderObject> createContentRenderer(Document&, const RenderStyle&) const final;
     std::unique_ptr<ContentData> cloneInternal() const final
     {
-        return std::make_unique<CounterContentData>(std::make_unique<CounterContent>(counter()));
+        return makeUnique<CounterContentData>(makeUnique<CounterContent>(counter()));
     }
 
     std::unique_ptr<CounterContent> m_counter;
 };
 
@@ -188,11 +188,11 @@
     QuoteType quote() const { return m_quote; }
     void setQuote(QuoteType quote) { m_quote = quote; }
 
 private:
     RenderPtr<RenderObject> createContentRenderer(Document&, const RenderStyle&) const final;
-    std::unique_ptr<ContentData> cloneInternal() const final { return std::make_unique<QuoteContentData>(quote()); }
+    std::unique_ptr<ContentData> cloneInternal() const final { return makeUnique<QuoteContentData>(quote()); }
 
     QuoteType m_quote;
 };
 
 inline bool operator==(const QuoteContentData& a, const QuoteContentData& b)
