diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLIndexExpression.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLIndexExpression.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLIndexExpression.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLIndexExpression.h
@@ -25,51 +25,52 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
-#include "WHLSLLexer.h"
+#include "WHLSLCodeLocation.h"
 #include "WHLSLPropertyAccessExpression.h"
+#include <wtf/FastMalloc.h>
 #include <wtf/UniqueRef.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class IndexExpression : public PropertyAccessExpression {
+class IndexExpression final : public PropertyAccessExpression {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    IndexExpression(Lexer::Token&& origin, UniqueRef<Expression>&& base, UniqueRef<Expression>&& index)
-        : PropertyAccessExpression(WTFMove(origin), WTFMove(base))
+    IndexExpression(CodeLocation location, UniqueRef<Expression>&& base, UniqueRef<Expression>&& index)
+        : PropertyAccessExpression(location, Kind::Index, WTFMove(base))
         , m_index(WTFMove(index))
     {
     }
 
-    virtual ~IndexExpression() = default;
+    ~IndexExpression() = default;
 
     IndexExpression(const IndexExpression&) = delete;
     IndexExpression(IndexExpression&&) = default;
 
-    bool isIndexExpression() const override { return true; }
-
-    String getFunctionName() const override
+    String getterFunctionName() const
     {
         return "operator[]"_str;
     }
 
-    String setFunctionName() const override
+    String setterFunctionName() const
     {
-        return "operator&[]"_str;
+        return "operator[]="_str;
     }
 
-    String andFunctionName() const override
+    String anderFunctionName() const
     {
-        return "operator[]="_str;
+        return "operator&[]"_str;
     }
 
     Expression& indexExpression() { return m_index; }
+    UniqueRef<Expression> takeIndex() { return WTFMove(m_index); }
 
 private:
     UniqueRef<Expression> m_index;
 };
 
@@ -77,8 +78,10 @@
 
 }
 
 }
 
+DEFINE_DEFAULT_DELETE(IndexExpression)
+
 SPECIALIZE_TYPE_TRAITS_WHLSL_EXPRESSION(IndexExpression, isIndexExpression())
 
 #endif
