diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ExceptionScope.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ExceptionScope.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ExceptionScope.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ExceptionScope.h
@@ -36,14 +36,16 @@
 
 #define EXCEPTION_ASSERT(assertion) RELEASE_ASSERT(assertion)
 #define EXCEPTION_ASSERT_UNUSED(variable, assertion) RELEASE_ASSERT(assertion)
 #define EXCEPTION_ASSERT_WITH_MESSAGE(assertion, message) RELEASE_ASSERT_WITH_MESSAGE(assertion, message)
 
-#if ASAN_ENABLED && COMPILER(GCC_COMPATIBLE)
-#define EXCEPTION_SCOPE_POSITION_FOR_ASAN currentStackPointer()
+#if ENABLE(C_LOOP)
+#define EXCEPTION_SCOPE_POSITION_FOR_ASAN(vm__) (vm__).currentCLoopStackPointer()
+#elif ASAN_ENABLED && COMPILER(GCC_COMPATIBLE)
+#define EXCEPTION_SCOPE_POSITION_FOR_ASAN(vm__) currentStackPointer()
 #else
-#define EXCEPTION_SCOPE_POSITION_FOR_ASAN nullptr
+#define EXCEPTION_SCOPE_POSITION_FOR_ASAN(vm__) nullptr
 #endif
 
 class ExceptionScope {
 public:
     VM& vm() const { return m_vm; }
@@ -51,11 +53,11 @@
     Exception* exception() { return m_vm.exception(); }
 
     ALWAYS_INLINE void assertNoException() { RELEASE_ASSERT_WITH_MESSAGE(!exception(), "%s", unexpectedExceptionMessage().data()); }
     ALWAYS_INLINE void releaseAssertNoException() { RELEASE_ASSERT_WITH_MESSAGE(!exception(), "%s", unexpectedExceptionMessage().data()); }
 
-#if ASAN_ENABLED
+#if ASAN_ENABLED || ENABLE(C_LOOP)
     const void* stackPosition() const {  return m_location.stackPosition; }
 #else
     const void* stackPosition() const {  return this; }
 #endif
 
