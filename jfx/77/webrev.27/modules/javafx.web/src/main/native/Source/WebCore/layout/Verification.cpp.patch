diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/Verification.cpp b/modules/javafx.web/src/main/native/Source/WebCore/layout/Verification.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/Verification.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/Verification.cpp
@@ -33,22 +33,37 @@
 #include "LayoutBox.h"
 #include "LayoutContainer.h"
 #include "LayoutTreeBuilder.h"
 #include "RenderBox.h"
 #include "RenderInline.h"
+#include "RenderLineBreak.h"
 #include "RenderView.h"
 #include <wtf/text/TextStream.h>
 
 namespace WebCore {
 namespace Layout {
 
-static bool areEssentiallyEqual(float a, LayoutUnit b)
+static bool areEssentiallyEqual(LayoutUnit a, LayoutUnit b)
 {
-    if (a == b.toFloat())
+    if (a == b)
         return true;
+    // 1/4th CSS pixel.
+    constexpr float epsilon = kFixedPointDenominator / 4;
+    return abs(a.rawValue() - b.rawValue()) <= epsilon;
+}
 
-    return fabs(a - b.toFloat()) <= 8 * LayoutUnit::epsilon();
+static bool areEssentiallyEqual(float a, LayoutUnit b)
+{
+    return areEssentiallyEqual(LayoutUnit { a }, b);
+}
+
+static bool areEssentiallyEqual(LayoutRect a, LayoutRect b)
+{
+    return areEssentiallyEqual(a.x(), b.x())
+        && areEssentiallyEqual(a.y(), b.y())
+        && areEssentiallyEqual(a.width(), b.width())
+        && areEssentiallyEqual(a.height(), b.height());
 }
 
 static bool outputMismatchingSimpleLineInformationIfNeeded(TextStream& stream, const LayoutState& layoutState, const RenderBlockFlow& blockFlow, const Container& inlineFormattingRoot)
 {
     auto* lineLayoutData = blockFlow.simpleLineLayout();
@@ -70,37 +85,44 @@
     auto mismatched = false;
     for (unsigned i = 0; i < lineLayoutData->runCount(); ++i) {
         auto& simpleRun = lineLayoutData->runAt(i);
         auto& inlineRun = inlineRunList[i];
 
-        auto matchingRuns = areEssentiallyEqual(simpleRun.logicalLeft, inlineRun.logicalLeft()) && areEssentiallyEqual(simpleRun.logicalRight, inlineRun.logicalRight());
-        if (matchingRuns)
-            matchingRuns = (simpleRun.start == inlineRun.textContext()->start() && simpleRun.end == (inlineRun.textContext()->start() + inlineRun.textContext()->length()));
+        auto matchingRuns = areEssentiallyEqual(simpleRun.logicalLeft, inlineRun->logicalLeft()) && areEssentiallyEqual(simpleRun.logicalRight, inlineRun->logicalRight());
+        if (matchingRuns && inlineRun->textContext()) {
+            matchingRuns = simpleRun.start == inlineRun->textContext()->start() && simpleRun.end == inlineRun->textContext()->end();
+            // SLL handles strings in a more concatenated format <div>foo<br>bar</div> -> foo -> 0,3 bar -> 3,6 vs. 0,3 and 0,3
+            if (!matchingRuns)
+                matchingRuns = (simpleRun.end - simpleRun.start) == (inlineRun->textContext()->end() - inlineRun->textContext()->start());
+        }
         if (matchingRuns)
             continue;
 
-        stream << "Mismatching: simple run(" << simpleRun.start << ", " << simpleRun.end << ") (" << simpleRun.logicalLeft << ", " << simpleRun.logicalRight << ") layout run(" << inlineRun.textContext()->start() << ", " << inlineRun.textContext()->start() + inlineRun.textContext()->length() << ") (" << inlineRun.logicalLeft() << ", " << inlineRun.logicalRight() << ")";
+        stream << "Mismatching: simple run(" << simpleRun.start << ", " << simpleRun.end << ") (" << simpleRun.logicalLeft << ", " << simpleRun.logicalRight << ") layout run(" << inlineRun->textContext()->start() << ", " << inlineRun->textContext()->end() << ") (" << inlineRun->logicalLeft() << ", " << inlineRun->logicalRight() << ")";
         stream.nextLine();
         mismatched = true;
     }
     return mismatched;
 }
 
-static bool checkForMatchingNonTextRuns(const InlineRun& inlineRun, const WebCore::InlineBox& inlineBox)
+static bool checkForMatchingNonTextRuns(const Display::Run& inlineRun, const WebCore::InlineBox& inlineBox)
 {
     return areEssentiallyEqual(inlineBox.logicalLeft(), inlineRun.logicalLeft())
         && areEssentiallyEqual(inlineBox.logicalRight(), inlineRun.logicalRight())
-        && areEssentiallyEqual(inlineBox.logicalHeight(), inlineRun.logicalHeight());
+        && areEssentiallyEqual(inlineBox.logicalTop(), inlineRun.logicalTop())
+        && areEssentiallyEqual(inlineBox.logicalBottom(), inlineRun.logicalBottom());
 }
 
-static bool checkForMatchingTextRuns(const InlineRun& inlineRun, float logicalLeft, float logicalRight, unsigned start, unsigned end, float logicalHeight)
+
+static bool checkForMatchingTextRuns(const Display::Run& inlineRun, const InlineTextBox& inlineTextBox)
 {
-    return areEssentiallyEqual(logicalLeft, inlineRun.logicalLeft())
-        && areEssentiallyEqual(logicalRight, inlineRun.logicalRight())
-        && start == inlineRun.textContext()->start()
-        && (end == (inlineRun.textContext()->start() + inlineRun.textContext()->length()))
-        && areEssentiallyEqual(logicalHeight, inlineRun.logicalHeight());
+    return areEssentiallyEqual(inlineTextBox.logicalLeft(), inlineRun.logicalLeft())
+        && areEssentiallyEqual(inlineTextBox.logicalRight(), inlineRun.logicalRight())
+        && areEssentiallyEqual(inlineTextBox.logicalTop(), inlineRun.logicalTop())
+        && areEssentiallyEqual(inlineTextBox.logicalBottom(), inlineRun.logicalBottom())
+        && inlineTextBox.start() == inlineRun.textContext()->start()
+        && (inlineTextBox.end() + 1) == inlineRun.textContext()->end();
 }
 
 static void collectFlowBoxSubtree(const InlineFlowBox& flowbox, Vector<WebCore::InlineBox*>& inlineBoxes)
 {
     auto* inlineBox = flowbox.firstLeafChild();
@@ -124,23 +146,10 @@
             collectFlowBoxSubtree(downcast<InlineFlowBox>(*inlineBox), inlineBoxes);
         }
     }
 }
 
-static LayoutUnit resolveForRelativePositionIfNeeded(const InlineTextBox& inlineTextBox)
-{
-    LayoutUnit xOffset;
-    auto* parent = inlineTextBox.parent();
-    while (is<InlineFlowBox>(parent)) {
-        auto& renderer = parent->renderer();
-        if (renderer.isInFlowPositioned())
-            xOffset = renderer.offsetForInFlowPosition().width();
-        parent = parent->parent();
-    }
-    return xOffset;
-}
-
 static bool outputMismatchingComplexLineInformationIfNeeded(TextStream& stream, const LayoutState& layoutState, const RenderBlockFlow& blockFlow, const Container& inlineFormattingRoot)
 {
     auto& inlineFormattingState = layoutState.establishedFormattingState(inlineFormattingRoot);
     ASSERT(is<InlineFormattingState>(inlineFormattingState));
     auto& inlineRunList = downcast<InlineFormattingState>(inlineFormattingState).inlineRuns();
@@ -156,70 +165,34 @@
         stream << "Warning: mismatching number of runs: inlineboxes(" << inlineBoxes.size() << ") vs. inline runs(" << inlineRunList.size() << ")";
         stream.nextLine();
     }
 
     for (unsigned inlineBoxIndex = 0; inlineBoxIndex < inlineBoxes.size() && runIndex < inlineRunList.size(); ++inlineBoxIndex) {
+        auto& inlineRun = inlineRunList[runIndex];
         auto* inlineBox = inlineBoxes[inlineBoxIndex];
         auto* inlineTextBox = is<InlineTextBox>(inlineBox) ? downcast<InlineTextBox>(inlineBox) : nullptr;
+        bool matchingRuns = inlineTextBox ? checkForMatchingTextRuns(*inlineRun, *inlineTextBox) : matchingRuns = checkForMatchingNonTextRuns(*inlineRun, *inlineBox);
 
-        auto& inlineRun = inlineRunList[runIndex];
-        auto matchingRuns = false;
-        if (inlineTextBox) {
-            auto xOffset = resolveForRelativePositionIfNeeded(*inlineTextBox);
-            matchingRuns = checkForMatchingTextRuns(inlineRun, inlineTextBox->logicalLeft() + xOffset,
-                inlineTextBox->logicalRight() + xOffset,
-                inlineTextBox->start(),
-                inlineTextBox->end() + 1,
-                inlineTextBox->logicalHeight());
-
-            // <span>foobar</span>foobar generates 2 inline text boxes while we only generate one inline run.
-            // also <div>foo<img style="float: left;">bar</div> too.
-            auto inlineRunEnd = inlineRun.textContext()->start() + inlineRun.textContext()->length();
-            auto textRunMightBeExtended = !matchingRuns && inlineTextBox->end() < inlineRunEnd && inlineBoxIndex < inlineBoxes.size() - 1;
-
-            if (textRunMightBeExtended) {
-                auto logicalLeft = inlineTextBox->logicalLeft() + xOffset;
-                auto logicalRight = inlineTextBox->logicalRight() + xOffset;
-                auto start = inlineTextBox->start();
-                auto end = inlineTextBox->end() + 1;
-                auto index = ++inlineBoxIndex;
-                for (; index < inlineBoxes.size(); ++index) {
-                    auto* inlineBox = inlineBoxes[index];
-                    auto* inlineTextBox = is<InlineTextBox>(inlineBox) ? downcast<InlineTextBox>(inlineBox) : nullptr;
-                    // Can't mix different inline boxes.
-                    if (!inlineTextBox)
-                        break;
-
-                    auto xOffset = resolveForRelativePositionIfNeeded(*inlineTextBox);
-                    logicalRight = inlineTextBox->logicalRight() + xOffset;
-                    end += (inlineTextBox->end() + 1);
-                    if (checkForMatchingTextRuns(inlineRun, logicalLeft, logicalRight, start, end, inlineTextBox->logicalHeight())) {
-                        matchingRuns = true;
-                        inlineBoxIndex = index;
-                        break;
-                    }
-
-                    // Went too far?
-                    if (end >= inlineRunEnd)
-                        break;
-                }
-            }
-        } else
-            matchingRuns = checkForMatchingNonTextRuns(inlineRun, *inlineBox);
+        if (!matchingRuns) {
 
+            if (is<RenderLineBreak>(inlineBox->renderer())) {
+                // <br> positioning is weird at this point. It needs proper baseline.
+                matchingRuns = true;
+                ++runIndex;
+                continue;
+            }
 
-        if (!matchingRuns) {
-            stream << "Mismatching: run ";
+            stream << "Mismatching: run";
 
             if (inlineTextBox)
-                stream << "(" << inlineTextBox->start() << ", " << inlineTextBox->end() + 1 << ")";
-            stream << " (" << inlineBox->logicalLeft() << ", " << inlineBox->logicalRight() << ") (" << inlineBox->logicalWidth() << "x" << inlineBox->logicalHeight() << ")";
+                stream << " (" << inlineTextBox->start() << ", " << inlineTextBox->end() + 1 << ")";
+            stream << " (" << inlineBox->logicalLeft() << ", " << inlineBox->logicalTop() << ") (" << inlineBox->logicalWidth() << "x" << inlineBox->logicalHeight() << ")";
 
-            stream << "inline run ";
-            if (inlineRun.textContext())
-                stream << "(" << inlineRun.textContext()->start() << ", " << inlineRun.textContext()->start() + inlineRun.textContext()->length() << ") ";
-            stream << "(" << inlineRun.logicalLeft() << ", " << inlineRun.logicalRight() << ") (" << inlineRun.logicalWidth() << "x" << inlineRun.logicalHeight() << ")";
+            stream << " inline run";
+            if (inlineRun->textContext())
+                stream << " (" << inlineRun->textContext()->start() << ", " << inlineRun->textContext()->end() << ")";
+            stream << " (" << inlineRun->logicalLeft() << ", " << inlineRun->logicalTop() << ") (" << inlineRun->logicalWidth() << "x" << inlineRun->logicalHeight() << ")";
             stream.nextLine();
             mismatched = true;
         }
         ++runIndex;
     }
@@ -243,11 +216,11 @@
 
     auto renderBoxLikeMarginBox = [](auto& displayBox) {
         // Produce a RenderBox matching margin box.
         auto borderBox = displayBox.borderBox();
 
-        return Display::Box::Rect {
+        return Display::Rect {
             borderBox.top() - displayBox.nonCollapsedMarginBefore(),
             borderBox.left() - displayBox.computedMarginStart().valueOr(0),
             displayBox.computedMarginStart().valueOr(0) + borderBox.width() + displayBox.computedMarginEnd().valueOr(0),
             displayBox.nonCollapsedMarginBefore() + borderBox.height() + displayBox.nonCollapsedMarginAfter()
         };
@@ -258,31 +231,31 @@
     auto frameRect = renderer.frameRect();
     // rendering does not offset for relative positioned boxes.
     if (renderer.isInFlowPositioned())
         frameRect.move(renderer.offsetForInFlowPosition());
 
-    if (frameRect != displayBox.rect()) {
+    if (!areEssentiallyEqual(frameRect, displayBox.rect())) {
         outputRect("frameBox", renderer.frameRect(), displayBox.rect());
         return true;
     }
 
-    if (renderer.borderBoxRect() != displayBox.borderBox()) {
+    if (!areEssentiallyEqual(renderer.borderBoxRect(), displayBox.borderBox())) {
         outputRect("borderBox", renderer.borderBoxRect(), displayBox.borderBox());
         return true;
     }
 
-    if (renderer.paddingBoxRect() != displayBox.paddingBox()) {
+    if (!areEssentiallyEqual(renderer.paddingBoxRect(), displayBox.paddingBox())) {
         outputRect("paddingBox", renderer.paddingBoxRect(), displayBox.paddingBox());
         return true;
     }
 
-    if (renderer.contentBoxRect() != displayBox.contentBox()) {
+    if (!areEssentiallyEqual(renderer.contentBoxRect(), displayBox.contentBox())) {
         outputRect("contentBox", renderer.contentBoxRect(), displayBox.contentBox());
         return true;
     }
 
-    if (renderer.marginBoxRect() != renderBoxLikeMarginBox(displayBox)) {
+    if (!areEssentiallyEqual(renderer.marginBoxRect(), renderBoxLikeMarginBox(displayBox))) {
         // In certain cases, like out-of-flow boxes with margin auto, marginBoxRect() returns 0. It's clearly incorrect,
         // so let's check the individual margin values instead (and at this point we know that all other boxes match).
         auto marginsMatch = displayBox.marginBefore() == renderer.marginBefore()
             && displayBox.marginAfter() == renderer.marginAfter()
             && displayBox.marginStart() == renderer.marginStart()
@@ -303,36 +276,40 @@
 
     if (!is<Container>(layoutBox))
         return mismtachingGeometry;
 
     auto& container = downcast<Container>(layoutBox);
-    auto* childBox = container.firstChild();
+    auto* childLayoutBox = container.firstChild();
     auto* childRenderer = renderer.firstChild();
 
     while (childRenderer) {
         if (!is<RenderBox>(*childRenderer)) {
             childRenderer = childRenderer->nextSibling();
             continue;
         }
 
-        if (!childBox) {
+        if (!childLayoutBox) {
             stream  << "Trees are out of sync!";
             stream.nextLine();
             return true;
         }
 
-        if (is<RenderBlockFlow>(*childRenderer) && childBox->establishesInlineFormattingContext()) {
+        if (is<RenderBlockFlow>(*childRenderer) && childLayoutBox->establishesInlineFormattingContext()) {
             ASSERT(childRenderer->childrenInline());
+            auto mismtachingGeometry = outputMismatchingBlockBoxInformationIfNeeded(stream, context, downcast<RenderBox>(*childRenderer), *childLayoutBox);
+            if (mismtachingGeometry)
+                return true;
+
             auto& blockFlow = downcast<RenderBlockFlow>(*childRenderer);
-            auto& formattingRoot = downcast<Container>(*childBox);
+            auto& formattingRoot = downcast<Container>(*childLayoutBox);
             mismtachingGeometry |= blockFlow.lineLayoutPath() == RenderBlockFlow::SimpleLinesPath ? outputMismatchingSimpleLineInformationIfNeeded(stream, context, blockFlow, formattingRoot) : outputMismatchingComplexLineInformationIfNeeded(stream, context, blockFlow, formattingRoot);
         } else {
-            auto mismatchingSubtreeGeometry = verifyAndOutputSubtree(stream, context, downcast<RenderBox>(*childRenderer), *childBox);
+            auto mismatchingSubtreeGeometry = verifyAndOutputSubtree(stream, context, downcast<RenderBox>(*childRenderer), *childLayoutBox);
             mismtachingGeometry |= mismatchingSubtreeGeometry;
         }
 
-        childBox = childBox->nextSibling();
+        childLayoutBox = childLayoutBox->nextSibling();
         childRenderer = childRenderer->nextSibling();
     }
 
     return mismtachingGeometry;
 }
