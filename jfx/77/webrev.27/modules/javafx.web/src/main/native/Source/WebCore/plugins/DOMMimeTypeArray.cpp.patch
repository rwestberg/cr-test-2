diff a/modules/javafx.web/src/main/native/Source/WebCore/plugins/DOMMimeTypeArray.cpp b/modules/javafx.web/src/main/native/Source/WebCore/plugins/DOMMimeTypeArray.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/plugins/DOMMimeTypeArray.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/plugins/DOMMimeTypeArray.cpp
@@ -22,16 +22,19 @@
 
 #include "DOMPlugin.h"
 #include "Frame.h"
 #include "Page.h"
 #include "PluginData.h"
-#include <wtf/text/AtomicString.h>
+#include <wtf/IsoMallocInlines.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
-DOMMimeTypeArray::DOMMimeTypeArray(DOMWindow* window)
-    : DOMWindowProperty(window)
+WTF_MAKE_ISO_ALLOCATED_IMPL(DOMMimeTypeArray);
+
+DOMMimeTypeArray::DOMMimeTypeArray(Navigator& navigator)
+    : m_navigator(makeWeakPtr(navigator))
 {
 }
 
 DOMMimeTypeArray::~DOMMimeTypeArray() = default;
 
@@ -60,11 +63,11 @@
     if (index >= mimes.size())
         return nullptr;
     return DOMMimeType::create(data, frame(), index);
 }
 
-RefPtr<DOMMimeType> DOMMimeTypeArray::namedItem(const AtomicString& propertyName)
+RefPtr<DOMMimeType> DOMMimeTypeArray::namedItem(const AtomString& propertyName)
 {
     PluginData* data = getPluginData();
     if (!data)
         return nullptr;
 
@@ -76,21 +79,21 @@
             return DOMMimeType::create(data, frame(), i);
     }
     return nullptr;
 }
 
-Vector<AtomicString> DOMMimeTypeArray::supportedPropertyNames()
+Vector<AtomString> DOMMimeTypeArray::supportedPropertyNames()
 {
     PluginData* data = getPluginData();
     if (!data)
         return { };
 
     Vector<MimeClassInfo> mimes;
     Vector<size_t> mimePluginIndices;
     data->getWebVisibleMimesAndPluginIndices(mimes, mimePluginIndices);
 
-    Vector<AtomicString> result;
+    Vector<AtomString> result;
     result.reserveInitialCapacity(mimes.size());
     for (auto& info : mimes)
         result.uncheckedAppend(WTFMove(info.type));
 
     return result;
