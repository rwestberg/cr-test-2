diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoAllocatorInlines.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoAllocatorInlines.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoAllocatorInlines.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoAllocatorInlines.h
@@ -26,11 +26,11 @@
 #pragma once
 
 #include "BInline.h"
 #include "EligibilityResult.h"
 #include "IsoAllocator.h"
-#include "IsoHeapImpl.h"
+#include "IsoHeapImplInlines.h"
 #include "IsoPage.h"
 
 namespace bmalloc {
 
 template<typename Config>
@@ -60,10 +60,22 @@
 template<typename Config>
 BNO_INLINE void* IsoAllocator<Config>::allocateSlow(bool abortOnFailure)
 {
     std::lock_guard<Mutex> locker(m_heap->lock);
 
+    AllocationMode allocationMode = m_heap->updateAllocationMode();
+    if (allocationMode == AllocationMode::Shared) {
+        if (m_currentPage) {
+            m_currentPage->stopAllocating(m_freeList);
+            m_currentPage = nullptr;
+            m_freeList.clear();
+        }
+        return m_heap->allocateFromShared(locker, abortOnFailure);
+    }
+
+    BASSERT(allocationMode == AllocationMode::Fast);
+
     EligibilityResult<Config> result = m_heap->takeFirstEligible();
     if (result.kind != EligibilityKind::Success) {
         RELEASE_BASSERT(result.kind == EligibilityKind::OutOfMemory);
         RELEASE_BASSERT(!abortOnFailure);
         return nullptr;
