diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/StdLibExtras.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/StdLibExtras.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/StdLibExtras.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/StdLibExtras.h
@@ -170,18 +170,14 @@
 #if COMPILER(GCC_COMPATIBLE)
 template<typename T> char (&ArrayLengthHelperFunction(T (&)[0]))[0];
 #endif
 #define WTF_ARRAY_LENGTH(array) sizeof(::WTF::ArrayLengthHelperFunction(array))
 
-ALWAYS_INLINE constexpr size_t roundUpToMultipleOfImpl0(size_t remainderMask, size_t x)
-{
-    return (x + remainderMask) & ~remainderMask;
-}
-
 ALWAYS_INLINE constexpr size_t roundUpToMultipleOfImpl(size_t divisor, size_t x)
 {
-    return roundUpToMultipleOfImpl0(divisor - 1, x);
+    size_t remainderMask = divisor - 1;
+    return (x + remainderMask) & ~remainderMask;
 }
 
 // Efficient implementation that takes advantage of powers of two.
 inline size_t roundUpToMultipleOf(size_t divisor, size_t x)
 {
@@ -525,11 +521,11 @@
 template<class... _Args> struct conjunction : wtf_conjunction_impl<_Args...> { };
 #endif
 
 // Provide in_place_t when not building with -std=c++17, or when building with libstdc++ 6
 // (which doesn't define the _GLIBCXX_RELEASE macro that's been introduced in libstdc++ 7).
-#if (__cplusplus < 201703L || (defined(__GLIBCXX__) && !defined(_GLIBCXX_RELEASE))) && (!defined(_MSVC_LANG) || _MSVC_LANG < 201703L)
+#if ((defined(__GLIBCXX__) && !defined(_GLIBCXX_RELEASE))) && (!defined(_MSVC_LANG) || _MSVC_LANG < 201703L)
 
 // These are inline variable for C++17 and later.
 #define __IN_PLACE_INLINE_VARIABLE static const
 
 struct in_place_t {
@@ -567,10 +563,28 @@
     return 32;
 }
 
 } // namespace std
 
+namespace WTF {
+
+template<class T, class... Args>
+ALWAYS_INLINE decltype(auto) makeUnique(Args&&... args)
+{
+    static_assert(std::is_same<typename T::webkitFastMalloced, int>::value, "T is FastMalloced");
+    return std::make_unique<T>(std::forward<Args>(args)...);
+}
+
+template<class T, class... Args>
+ALWAYS_INLINE decltype(auto) makeUniqueWithoutFastMallocCheck(Args&&... args)
+{
+    return std::make_unique<T>(std::forward<Args>(args)...);
+}
+
+
+} // namespace WTF
+
 #define WTFMove(value) std::move<WTF::CheckMoveParameter>(value)
 
 using WTF::KB;
 using WTF::MB;
 using WTF::GB;
@@ -587,5 +601,7 @@
 using WTF::is8ByteAligned;
 using WTF::mergeDeduplicatedSorted;
 using WTF::roundUpToMultipleOf;
 using WTF::safeCast;
 using WTF::tryBinarySearch;
+using WTF::makeUnique;
+using WTF::makeUniqueWithoutFastMallocCheck;
