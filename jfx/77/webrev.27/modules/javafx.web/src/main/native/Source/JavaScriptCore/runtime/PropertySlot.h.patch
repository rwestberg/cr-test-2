diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertySlot.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertySlot.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertySlot.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertySlot.h
@@ -1,7 +1,7 @@
 /*
- *  Copyright (C) 2005-2018 Apple Inc. All rights reserved.
+ *  Copyright (C) 2005-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Library General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -18,20 +18,20 @@
  *
  */
 
 #pragma once
 
+#include "CallFrame.h"
 #include "DOMAnnotation.h"
 #include "JSCJSValue.h"
 #include "PropertyName.h"
 #include "PropertyOffset.h"
 #include "ScopeOffset.h"
 #include <wtf/Assertions.h>
 #include <wtf/ForbidHeapAllocation.h>
 
 namespace JSC {
-class ExecState;
 class GetterSetter;
 class JSObject;
 class JSModuleEnvironment;
 
 // ECMA 262-3 8.6.1
@@ -414,15 +414,16 @@
     return customGetter(exec, propertyName);
 }
 
 ALWAYS_INLINE JSValue PropertySlot::getValue(ExecState* exec, unsigned propertyName) const
 {
+    VM& vm = exec->vm();
     if (m_propertyType == TypeValue)
         return JSValue::decode(m_data.value);
     if (m_propertyType == TypeGetter)
         return functionGetter(exec);
     if (m_propertyType == TypeCustomAccessor)
-        return customAccessorGetter(exec, Identifier::from(exec, propertyName));
-    return customGetter(exec, Identifier::from(exec, propertyName));
+        return customAccessorGetter(exec, Identifier::from(vm, propertyName));
+    return customGetter(exec, Identifier::from(vm, propertyName));
 }
 
 } // namespace JSC
