diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSRunLoopTimer.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSRunLoopTimer.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSRunLoopTimer.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSRunLoopTimer.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2012-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2012-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -85,11 +85,11 @@
     }
 }
 #else
 JSRunLoopTimer::Manager::PerVMData::PerVMData(Manager& manager)
     : runLoop(&RunLoop::current())
-    , timer(std::make_unique<RunLoop::Timer<Manager>>(*runLoop, &manager, &JSRunLoopTimer::Manager::timerDidFireCallback))
+    , timer(makeUnique<RunLoop::Timer<Manager>>(*runLoop, &manager, &JSRunLoopTimer::Manager::timerDidFireCallback))
 {
 #if USE(GLIB_EVENT_LOOP)
     timer->setPriority(RunLoopSourcePriority::JavascriptTimer);
     timer->setName("[JavaScriptCore] JSRunLoopTimer");
 #endif
@@ -119,11 +119,11 @@
 #else
         RunLoop* currentRunLoop = &RunLoop::current();
 #endif
         EpochTime nowEpochTime = epochTime(0_s);
         for (auto& entry : m_mapping) {
-            PerVMData& data = entry.value;
+            PerVMData& data = *entry.value;
 #if USE(CF)
             if (data.runLoop.get() != currentRunLoop)
                 continue;
 #else
             if (data.runLoop != currentRunLoop)
@@ -170,13 +170,13 @@
     return *manager;
 }
 
 void JSRunLoopTimer::Manager::registerVM(VM& vm)
 {
-    PerVMData data { *this };
+    auto data = makeUnique<PerVMData>(*this);
 #if USE(CF)
-    data.setRunLoop(this, vm.runLoop());
+    data->setRunLoop(this, vm.runLoop());
 #endif
 
     auto locker = holdLock(m_lock);
     auto addResult = m_mapping.add({ vm.apiLock() }, WTFMove(data));
     RELEASE_ASSERT(addResult.isNewEntry);
@@ -197,11 +197,11 @@
 
     auto locker = holdLock(m_lock);
     auto iter = m_mapping.find(timer.m_apiLock);
     RELEASE_ASSERT(iter != m_mapping.end()); // We don't allow calling this after the VM dies.
 
-    PerVMData& data = iter->value;
+    PerVMData& data = *iter->value;
     EpochTime scheduleTime = fireEpochTime;
     bool found = false;
     for (auto& entry : data.timers) {
         if (entry.first.ptr() == &timer) {
             entry.second = fireEpochTime;
@@ -227,11 +227,11 @@
     if (iter == m_mapping.end()) {
         // It's trivial to allow this to be called after the VM dies, so we allow for it.
         return;
     }
 
-    PerVMData& data = iter->value;
+    PerVMData& data = *iter->value;
     EpochTime scheduleTime = epochTime(s_decade);
     for (unsigned i = 0; i < data.timers.size(); ++i) {
         {
             auto& entry = data.timers[i];
             if (entry.first.ptr() == &timer) {
@@ -259,11 +259,11 @@
 {
     auto locker = holdLock(m_lock);
     auto iter = m_mapping.find(timer.m_apiLock);
     RELEASE_ASSERT(iter != m_mapping.end()); // We only allow this to be called with a live VM.
 
-    PerVMData& data = iter->value;
+    PerVMData& data = *iter->value;
     for (auto& entry : data.timers) {
         if (entry.first.ptr() == &timer) {
             EpochTime nowEpochTime = epochTime(0_s);
             return entry.second - nowEpochTime;
         }
@@ -277,11 +277,11 @@
 {
     auto locker = holdLock(m_lock);
     auto iter = m_mapping.find({ vm.apiLock() });
     RELEASE_ASSERT(iter != m_mapping.end());
 
-    PerVMData& data = iter->value;
+    PerVMData& data = *iter->value;
     data.setRunLoop(this, newRunLoop);
 }
 #endif
 
 void JSRunLoopTimer::timerDidFire()
@@ -305,12 +305,12 @@
     }
 
     doWork(*vm);
 }
 
-JSRunLoopTimer::JSRunLoopTimer(VM* vm)
-    : m_apiLock(vm->apiLock())
+JSRunLoopTimer::JSRunLoopTimer(VM& vm)
+    : m_apiLock(vm.apiLock())
 {
 }
 
 JSRunLoopTimer::~JSRunLoopTimer()
 {
