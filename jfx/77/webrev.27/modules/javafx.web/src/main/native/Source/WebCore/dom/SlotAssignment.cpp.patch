diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/SlotAssignment.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/SlotAssignment.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/SlotAssignment.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/SlotAssignment.cpp
@@ -33,25 +33,25 @@
 
 namespace WebCore {
 
 using namespace HTMLNames;
 
-static const AtomicString& slotNameFromAttributeValue(const AtomicString& value)
+static const AtomString& slotNameFromAttributeValue(const AtomString& value)
 {
     return value == nullAtom() ? SlotAssignment::defaultSlotName() : value;
 }
 
-static const AtomicString& slotNameFromSlotAttribute(const Node& child)
+static const AtomString& slotNameFromSlotAttribute(const Node& child)
 {
     if (is<Text>(child))
         return SlotAssignment::defaultSlotName();
 
     return slotNameFromAttributeValue(downcast<Element>(child).attributeWithoutSynchronization(slotAttr));
 }
 
 #if !ASSERT_DISABLED
-static HTMLSlotElement* findSlotElement(ShadowRoot& shadowRoot, const AtomicString& slotName)
+static HTMLSlotElement* findSlotElement(ShadowRoot& shadowRoot, const AtomString& slotName)
 {
     for (auto& slotElement : descendantsOfType<HTMLSlotElement>(shadowRoot)) {
         if (slotNameFromAttributeValue(slotElement.attributeWithoutSynchronization(nameAttr)) == slotName)
             return &slotElement;
     }
@@ -92,21 +92,21 @@
     if (!m_slotAssignmentsIsValid)
         assignSlots(shadowRoot);
     return !slot.assignedNodes.isEmpty();
 }
 
-void SlotAssignment::renameSlotElement(HTMLSlotElement& slotElement, const AtomicString& oldName, const AtomicString& newName, ShadowRoot& shadowRoot)
+void SlotAssignment::renameSlotElement(HTMLSlotElement& slotElement, const AtomString& oldName, const AtomString& newName, ShadowRoot& shadowRoot)
 {
     ASSERT(m_slotElementsForConsistencyCheck.contains(&slotElement));
 
     m_slotMutationVersion++;
 
     removeSlotElementByName(oldName, slotElement, nullptr, shadowRoot);
     addSlotElementByName(newName, slotElement, shadowRoot);
 }
 
-void SlotAssignment::addSlotElementByName(const AtomicString& name, HTMLSlotElement& slotElement, ShadowRoot& shadowRoot)
+void SlotAssignment::addSlotElementByName(const AtomString& name, HTMLSlotElement& slotElement, ShadowRoot& shadowRoot)
 {
 #ifndef NDEBUG
     ASSERT(!m_slotElementsForConsistencyCheck.contains(&slotElement));
     m_slotElementsForConsistencyCheck.add(&slotElement);
 #endif
@@ -118,11 +118,11 @@
     auto addResult = m_slots.ensure(slotName, [&] {
         // Unlike named slots, assignSlots doesn't collect nodes assigned to the default slot
         // to avoid always having a vector of all child nodes of a shadow host.
         if (slotName == defaultSlotName())
             m_slotAssignmentsIsValid = false;
-        return std::make_unique<Slot>();
+        return makeUnique<Slot>();
     });
     auto& slot = *addResult.iterator->value;
     bool needsSlotchangeEvent = shadowRoot.shouldFireSlotchangeEvent() && hasAssignedNodes(shadowRoot, slot);
 
     slot.elementCount++;
@@ -141,11 +141,11 @@
     }
 
     resolveSlotsAfterSlotMutation(shadowRoot, SlotMutationType::Insertion);
 }
 
-void SlotAssignment::removeSlotElementByName(const AtomicString& name, HTMLSlotElement& slotElement, ContainerNode* oldParentOfRemovedTreeForRemoval, ShadowRoot& shadowRoot)
+void SlotAssignment::removeSlotElementByName(const AtomString& name, HTMLSlotElement& slotElement, ContainerNode* oldParentOfRemovedTreeForRemoval, ShadowRoot& shadowRoot)
 {
 #ifndef NDEBUG
     ASSERT(m_slotElementsForConsistencyCheck.contains(&slotElement));
     m_slotElementsForConsistencyCheck.remove(&slotElement);
 #endif
@@ -287,11 +287,11 @@
     m_willBeRemovingAllChildren = true;
     if (m_needsToResolveSlotElements)
         resolveAllSlotElements(shadowRoot);
 }
 
-void SlotAssignment::didChangeSlot(const AtomicString& slotAttrValue, ShadowRoot& shadowRoot)
+void SlotAssignment::didChangeSlot(const AtomString& slotAttrValue, ShadowRoot& shadowRoot)
 {
     auto& slotName = slotNameFromAttributeValue(slotAttrValue);
     auto* slot = m_slots.get(slotName);
     if (!slot)
         return;
@@ -315,11 +315,11 @@
 }
 
 const Vector<Node*>* SlotAssignment::assignedNodesForSlot(const HTMLSlotElement& slotElement, ShadowRoot& shadowRoot)
 {
     ASSERT(slotElement.containingShadowRoot() == &shadowRoot);
-    const AtomicString& slotName = slotNameFromAttributeValue(slotElement.attributeWithoutSynchronization(nameAttr));
+    const AtomString& slotName = slotNameFromAttributeValue(slotElement.attributeWithoutSynchronization(nameAttr));
     auto* slot = m_slots.get(slotName);
     RELEASE_ASSERT(slot);
 
     if (!m_slotAssignmentsIsValid)
         assignSlots(shadowRoot);
@@ -332,11 +332,11 @@
         return nullptr;
 
     return &slot->assignedNodes;
 }
 
-const AtomicString& SlotAssignment::slotNameForHostChild(const Node& child) const
+const AtomString& SlotAssignment::slotNameForHostChild(const Node& child) const
 {
     return slotNameFromSlotAttribute(child);
 }
 
 HTMLSlotElement* SlotAssignment::findFirstSlotElement(Slot& slot, ShadowRoot& shadowRoot)
@@ -397,22 +397,22 @@
 
     for (auto& entry : m_slots)
         entry.value->assignedNodes.shrinkToFit();
 }
 
-void SlotAssignment::assignToSlot(Node& child, const AtomicString& slotName)
+void SlotAssignment::assignToSlot(Node& child, const AtomString& slotName)
 {
     ASSERT(!slotName.isNull());
     if (slotName == defaultSlotName()) {
         auto defaultSlotEntry = m_slots.find(defaultSlotName());
         if (defaultSlotEntry != m_slots.end())
             defaultSlotEntry->value->assignedNodes.append(&child);
         return;
     }
 
     auto addResult = m_slots.ensure(slotName, [] {
-        return std::make_unique<Slot>();
+        return makeUnique<Slot>();
     });
     addResult.iterator->value->assignedNodes.append(&child);
 }
 
 }
