diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScriptExecutable.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScriptExecutable.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScriptExecutable.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScriptExecutable.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2009-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2009-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -27,29 +27,33 @@
 
 #include "ExecutableBase.h"
 
 namespace JSC {
 
+class JSArray;
+class JSTemplateObjectDescriptor;
 class IsoCellSet;
 
 class ScriptExecutable : public ExecutableBase {
 public:
     typedef ExecutableBase Base;
     static const unsigned StructureFlags = Base::StructureFlags;
 
     static void destroy(JSCell*);
 
+    using TemplateObjectMap = HashMap<uint64_t, WriteBarrier<JSArray>, WTF::IntHash<uint64_t>, WTF::UnsignedWithZeroKeyHashTraits<uint64_t>>;
+
     CodeBlockHash hashFor(CodeSpecializationKind) const;
 
     const SourceCode& source() const { return m_source; }
     intptr_t sourceID() const { return m_source.providerID(); }
     const SourceOrigin& sourceOrigin() const { return m_source.provider()->sourceOrigin(); }
     const String& sourceURL() const { return m_source.provider()->url(); }
     int firstLine() const { return m_source.firstLine().oneBasedInt(); }
-    int lastLine() const { return m_lastLine; }
+    JS_EXPORT_PRIVATE int lastLine() const;
     unsigned startColumn() const { return m_source.startColumn().oneBasedInt(); }
-    unsigned endColumn() const { return m_endColumn; }
+    JS_EXPORT_PRIVATE unsigned endColumn() const;
 
     Optional<int> overrideLineNumber(VM&) const;
     unsigned typeProfilingStartOffset(VM&) const;
     unsigned typeProfilingEndOffset(VM&) const;
 
@@ -79,57 +83,52 @@
 
     CodeFeatures features() const { return m_features; }
 
     DECLARE_EXPORT_INFO;
 
-    void recordParse(CodeFeatures features, bool hasCapturedVariables, int lastLine, unsigned endColumn)
-    {
-        m_features = features;
-        m_hasCapturedVariables = hasCapturedVariables;
-        m_lastLine = lastLine;
-        ASSERT(endColumn != UINT_MAX);
-        m_endColumn = endColumn;
-    }
-
+    void recordParse(CodeFeatures, bool hasCapturedVariables, int lastLine, unsigned endColumn);
     void installCode(CodeBlock*);
     void installCode(VM&, CodeBlock*, CodeType, CodeSpecializationKind);
-    CodeBlock* newCodeBlockFor(CodeSpecializationKind, JSFunction*, JSScope*, JSObject*& exception);
+    CodeBlock* newCodeBlockFor(CodeSpecializationKind, JSFunction*, JSScope*, Exception*&);
     CodeBlock* newReplacementCodeBlockFor(CodeSpecializationKind);
 
     void clearCode(IsoCellSet&);
 
     Intrinsic intrinsic() const
     {
         return m_intrinsic;
     }
 
-    static constexpr int NUM_PARAMETERS_NOT_COMPILED = -1;
-
     bool hasJITCodeForCall() const
     {
-        return m_numParametersForCall >= 0;
+        return m_jitCodeForCall;
     }
     bool hasJITCodeForConstruct() const
     {
-        return m_numParametersForConstruct >= 0;
+        return m_jitCodeForConstruct;
     }
 
     // This function has an interesting GC story. Callers of this function are asking us to create a CodeBlock
     // that is not jettisoned before this function returns. Callers are essentially asking for a strong reference
     // to the CodeBlock. Because the Executable may be allocating the CodeBlock, we require callers to pass in
     // their CodeBlock*& reference because it's safe for CodeBlock to be jettisoned if Executable is the only thing
     // to point to it. This forces callers to have a CodeBlock* in a register or on the stack that will be marked
     // by conservative GC if a GC happens after we create the CodeBlock.
     template <typename ExecutableType>
-    JSObject* prepareForExecution(VM&, JSFunction*, JSScope*, CodeSpecializationKind, CodeBlock*& resultCodeBlock);
+    Exception* prepareForExecution(VM&, JSFunction*, JSScope*, CodeSpecializationKind, CodeBlock*& resultCodeBlock);
+
+    ScriptExecutable* topLevelExecutable();
+    JSArray* createTemplateObject(ExecState*, JSTemplateObjectDescriptor*);
 
 private:
     friend class ExecutableBase;
-    JSObject* prepareForExecutionImpl(VM&, JSFunction*, JSScope*, CodeSpecializationKind, CodeBlock*&);
+    Exception* prepareForExecutionImpl(VM&, JSFunction*, JSScope*, CodeSpecializationKind, CodeBlock*&);
 
     bool hasClearableCode(VM&) const;
 
+    TemplateObjectMap& ensureTemplateObjectMap(VM&);
+
 protected:
     ScriptExecutable(Structure*, VM&, const SourceCode&, bool isInStrictContext, DerivedContextType, bool isInArrowFunctionContext, EvalContextType, Intrinsic);
 
     void finishCreation(VM& vm)
     {
@@ -139,27 +138,30 @@
         if (SamplingTool* sampler = vm.interpreter->sampler())
             sampler->notifyOfScope(vm, this);
 #endif
     }
 
-    SourceCode m_source;
-
-    int m_numParametersForCall { NUM_PARAMETERS_NOT_COMPILED };
-    int m_numParametersForConstruct { NUM_PARAMETERS_NOT_COMPILED };
+    void recordParse(CodeFeatures features, bool hasCapturedVariables)
+    {
+        m_features = features;
+        m_hasCapturedVariables = hasCapturedVariables;
+    }
 
-    int m_lastLine { -1 };
-    unsigned m_endColumn { UINT_MAX };
+    static TemplateObjectMap& ensureTemplateObjectMapImpl(std::unique_ptr<TemplateObjectMap>& dest);
 
+    SourceCode m_source;
     Intrinsic m_intrinsic { NoIntrinsic };
     bool m_didTryToEnterInLoop { false };
     CodeFeatures m_features;
+    OptionSet<CodeGenerationMode> m_codeGenerationModeForGeneratorBody;
     bool m_hasCapturedVariables : 1;
     bool m_neverInline : 1;
     bool m_neverOptimize : 1;
     bool m_neverFTLOptimize : 1;
     bool m_isArrowFunctionContext : 1;
     bool m_canUseOSRExitFuzzing : 1;
+    bool m_codeForGeneratorBodyWasGenerated : 1;
     unsigned m_derivedContextType : 2; // DerivedContextType
     unsigned m_evalContextType : 2; // EvalContextType
 };
 
 } // namespace JSC
