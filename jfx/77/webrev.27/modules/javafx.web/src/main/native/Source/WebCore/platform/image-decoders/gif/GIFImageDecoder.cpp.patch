diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/image-decoders/gif/GIFImageDecoder.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/image-decoders/gif/GIFImageDecoder.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/image-decoders/gif/GIFImageDecoder.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/image-decoders/gif/GIFImageDecoder.cpp
@@ -43,23 +43,19 @@
     if (failed())
         return;
 
     ScalableImageDecoder::setData(data, allDataReceived);
     if (m_reader)
-        m_reader->setData(&data);
+        m_reader->setData(*m_data);
 }
 
 bool GIFImageDecoder::setSize(const IntSize& size)
 {
     if (ScalableImageDecoder::encodedDataStatus() >= EncodedDataStatus::SizeAvailable && this->size() == size)
         return true;
 
-    if (!ScalableImageDecoder::setSize(size))
-        return false;
-
-    prepareScaleDataIfNecessary();
-    return true;
+    return ScalableImageDecoder::setSize(size);
 }
 
 size_t GIFImageDecoder::frameCount() const
 {
     const_cast<GIFImageDecoder*>(this)->decode(std::numeric_limits<unsigned>::max(), GIFFrameCountQuery, isAllDataReceived());
@@ -124,13 +120,10 @@
             // when the frame was removed from the cache. We need to get the values from the
             // reader context.
             const auto* frameContext = m_reader->frameContext(i - 1);
             ASSERT(frameContext);
             IntRect frameRect(frameContext->xOffset, frameContext->yOffset, frameContext->width, frameContext->height);
-            // We would need to scale frameRect and check whether it fills the whole scaledSize(). But
-            // can check whether the original frameRect fills size() instead. If the frame fills the
-            // whole area then it can be decoded without dependencies.
             if (frameRect.contains({ { }, size() }))
                 return i;
         }
     }
 
@@ -214,15 +207,15 @@
     // origin within the entire image size, i.e.
     // (frameContext->xOffset, frameContext->yOffset). There is no guarantee
     // that width == (size().width() - frameContext->xOffset), so
     // we must ensure we don't run off the end of either the source data or the
     // row's X-coordinates.
-    int xBegin = upperBoundScaledX(frameContext->xOffset);
-    int yBegin = upperBoundScaledY(frameContext->yOffset + rowNumber);
-    int xEnd = lowerBoundScaledX(std::min(static_cast<int>(frameContext->xOffset + width), size().width()) - 1, xBegin + 1) + 1;
-    int yEnd = lowerBoundScaledY(std::min(static_cast<int>(frameContext->yOffset + rowNumber + repeatCount), size().height()) - 1, yBegin + 1) + 1;
-    if (rowBuffer.isEmpty() || (xBegin < 0) || (yBegin < 0) || (xEnd <= xBegin) || (yEnd <= yBegin))
+    int xBegin = frameContext->xOffset;
+    int yBegin = frameContext->yOffset + rowNumber;
+    int xEnd = std::min(static_cast<int>(frameContext->xOffset + width), size().width());
+    int yEnd = std::min(static_cast<int>(frameContext->yOffset + rowNumber + repeatCount), size().height());
+    if (rowBuffer.isEmpty() || xEnd <= xBegin || yEnd <= yBegin)
         return true;
 
     // Get the colormap.
     const unsigned char* colorMap;
     unsigned colorMapSize;
@@ -242,11 +235,11 @@
         return false;
 
     auto* currentAddress = buffer.backingStore()->pixelAt(xBegin, yBegin);
     // Write one row's worth of data into the frame.
     for (int x = xBegin; x < xEnd; ++x) {
-        const unsigned char sourceValue = rowBuffer[(m_scaled ? m_scaledColumns[x] : x) - frameContext->xOffset];
+        const unsigned char sourceValue = rowBuffer[x - frameContext->xOffset];
         if ((!frameContext->isTransparent || (sourceValue != frameContext->tpixel)) && (sourceValue < colorMapSize)) {
             const size_t colorIndex = static_cast<size_t>(sourceValue) * 3;
             buffer.backingStore()->setPixel(currentAddress, colorMap[colorIndex], colorMap[colorIndex + 1], colorMap[colorIndex + 2], 255);
         } else {
             m_currentBufferSawAlpha = true;
@@ -285,11 +278,11 @@
     if (!m_currentBufferSawAlpha) {
         IntRect rect = buffer.backingStore()->frameRect();
 
         // The whole frame was non-transparent, so it's possible that the entire
         // resulting buffer was non-transparent, and we can setHasAlpha(false).
-        if (rect.contains(IntRect(IntPoint(), scaledSize())))
+        if (rect.contains(IntRect(IntPoint(), size())))
             buffer.setHasAlpha(false);
         else if (frameIndex) {
             // Tricky case.  This frame does not have alpha only if everywhere
             // outside its rect doesn't have alpha.  To know whether this is
             // true, we check the start state of the frame -- if it doesn't have
@@ -332,12 +325,12 @@
 {
     if (failed())
         return;
 
     if (!m_reader) {
-        m_reader = std::make_unique<GIFImageReader>(this);
-        m_reader->setData(m_data.get());
+        m_reader = makeUnique<GIFImageReader>(this);
+        m_reader->setData(*m_data);
     }
 
     if (query == GIFSizeQuery) {
         if (!m_reader->decode(GIFSizeQuery, haltAtFrame))
             setFailed();
@@ -372,11 +365,11 @@
     IntRect frameRect(frameContext->xOffset, frameContext->yOffset, frameContext->width, frameContext->height);
     auto* const buffer = &m_frameBufferCache[frameIndex];
 
     if (!frameIndex) {
         // This is the first frame, so we're not relying on any previous data.
-        if (!buffer->initialize(scaledSize(), m_premultiplyAlpha))
+        if (!buffer->initialize(size(), m_premultiplyAlpha))
             return setFailed();
     } else {
         // The starting state for this frame depends on the previous frame's
         // disposal method.
         //
@@ -400,12 +393,12 @@
                 return setFailed();
         } else {
             // We want to clear the previous frame to transparent, without
             // affecting pixels in the image outside of the frame.
             IntRect prevRect = prevBuffer->backingStore()->frameRect();
-            const IntSize& bufferSize = scaledSize();
-            if (!frameIndex || prevRect.contains(IntRect(IntPoint(), scaledSize()))) {
+            const IntSize& bufferSize = size();
+            if (!frameIndex || prevRect.contains(IntRect(IntPoint(), size()))) {
                 // Clearing the first frame, or a frame the size of the whole
                 // image, results in a completely empty image.
                 if (!buffer->initialize(bufferSize, m_premultiplyAlpha))
                     return setFailed();
             } else {
@@ -422,15 +415,11 @@
     if (frameRect.maxX() > size().width())
         frameRect.setWidth(size().width() - frameContext->xOffset);
     if (frameRect.maxY() > size().height())
         frameRect.setHeight(size().height() - frameContext->yOffset);
 
-    int left = upperBoundScaledX(frameRect.x());
-    int right = lowerBoundScaledX(frameRect.maxX(), left);
-    int top = upperBoundScaledY(frameRect.y());
-    int bottom = lowerBoundScaledY(frameRect.maxY(), top);
-    buffer->backingStore()->setFrameRect(IntRect(left, top, right - left, bottom - top));
+    buffer->backingStore()->setFrameRect(frameRect);
 
     // Update our status to be partially complete.
     buffer->setDecodingStatus(DecodingStatus::Partial);
 
     // Reset the alpha pixel tracker for this frame.
