diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBDatabaseIdentifier.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBDatabaseIdentifier.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBDatabaseIdentifier.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBDatabaseIdentifier.cpp
@@ -33,41 +33,37 @@
 #include <wtf/Ref.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
-IDBDatabaseIdentifier::IDBDatabaseIdentifier(const String& databaseName, const PAL::SessionID& sessionID, SecurityOriginData&& openingOrigin, SecurityOriginData&& mainFrameOrigin)
+IDBDatabaseIdentifier::IDBDatabaseIdentifier(const String& databaseName, SecurityOriginData&& openingOrigin, SecurityOriginData&& mainFrameOrigin)
     : m_databaseName(databaseName)
-    , m_sessionID(sessionID)
-    , m_openingOrigin(WTFMove(openingOrigin))
-    , m_mainFrameOrigin(WTFMove(mainFrameOrigin))
-
+    , m_origin { WTFMove(openingOrigin), WTFMove(mainFrameOrigin) }
 {
     // The empty string is a valid database name, but a null string is not.
     ASSERT(!databaseName.isNull());
 }
 
 IDBDatabaseIdentifier IDBDatabaseIdentifier::isolatedCopy() const
 {
     IDBDatabaseIdentifier identifier;
 
     identifier.m_databaseName = m_databaseName.isolatedCopy();
-    identifier.m_sessionID = m_sessionID.isolatedCopy();
-    identifier.m_openingOrigin = m_openingOrigin.isolatedCopy();
-    identifier.m_mainFrameOrigin = m_mainFrameOrigin.isolatedCopy();
+    identifier.m_origin = m_origin.isolatedCopy();
 
     return identifier;
 }
 
-String IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot(const String& rootDirectory) const
+String IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot(const String& rootDirectory, const String& versionString) const
 {
-    return databaseDirectoryRelativeToRoot(m_mainFrameOrigin, m_openingOrigin, rootDirectory);
+    return databaseDirectoryRelativeToRoot(m_origin.topOrigin, m_origin.clientOrigin, rootDirectory, versionString);
 }
 
-String IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot(const SecurityOriginData& topLevelOrigin, const SecurityOriginData& openingOrigin, const String& rootDirectory)
+String IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot(const SecurityOriginData& topLevelOrigin, const SecurityOriginData& openingOrigin, const String& rootDirectory, const String& versionString)
 {
-    String mainFrameDirectory = FileSystem::pathByAppendingComponent(rootDirectory, topLevelOrigin.databaseIdentifier());
+    String versionDirectory = FileSystem::pathByAppendingComponent(rootDirectory, versionString);
+    String mainFrameDirectory = FileSystem::pathByAppendingComponent(versionDirectory, topLevelOrigin.databaseIdentifier());
 
     // If the opening origin and main frame origins are the same, there is no partitioning.
     if (openingOrigin == topLevelOrigin)
         return mainFrameDirectory;
 
@@ -75,11 +71,11 @@
 }
 
 #if !LOG_DISABLED
 String IDBDatabaseIdentifier::debugString() const
 {
-    return makeString(m_databaseName, "@", m_openingOrigin.debugString(), ":", m_mainFrameOrigin.debugString());
+    return makeString(m_databaseName, "@", m_origin.topOrigin.debugString(), ":", m_origin.clientOrigin.debugString());
 }
 #endif
 
 } // namespace WebCore
 
