diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/ContainerNode.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/ContainerNode.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/ContainerNode.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/ContainerNode.cpp
@@ -392,12 +392,12 @@
         return { };
 
     // We need this extra check because collectChildrenAndRemoveFromOldParent() can fire mutation events.
     for (auto& child : targets) {
         auto checkAcceptResult = checkAcceptChildGuaranteedNodeTypes(*this, child);
-    if (checkAcceptResult.hasException())
-        return checkAcceptResult.releaseException();
+        if (checkAcceptResult.hasException())
+            return checkAcceptResult.releaseException();
     }
 
     InspectorInstrumentation::willInsertDOMNode(document(), *this);
 
     ChildListMutationScope mutation(*this);
@@ -510,12 +510,12 @@
     }
 
     // Do this one more time because collectChildrenAndRemoveFromOldParent() fires a MutationEvent.
     for (auto& child : targets) {
         validityResult = checkPreReplacementValidity(*this, child, oldChild);
-    if (validityResult.hasException())
-        return validityResult.releaseException();
+        if (validityResult.hasException())
+            return validityResult.releaseException();
     }
 
     // Remove the node we're replacing.
     Ref<Node> protectOldChild(oldChild);
 
@@ -528,13 +528,13 @@
             return removeResult.releaseException();
 
         // Does this one more time because removeChild() fires a MutationEvent.
         for (auto& child : targets) {
             validityResult = checkPreReplacementValidity(*this, child, oldChild);
-        if (validityResult.hasException())
-            return validityResult.releaseException();
-    }
+            if (validityResult.hasException())
+                return validityResult.releaseException();
+        }
     }
 
     InspectorInstrumentation::willInsertDOMNode(document(), *this);
 
     // Add the new child(ren).
@@ -709,12 +709,12 @@
         return { };
 
     // We need this extra check because collectChildrenAndRemoveFromOldParent() can fire mutation events.
     for (auto& child : targets) {
         auto nodeTypeResult = checkAcceptChildGuaranteedNodeTypes(*this, child);
-    if (nodeTypeResult.hasException())
-        return nodeTypeResult.releaseException();
+        if (nodeTypeResult.hasException())
+            return nodeTypeResult.releaseException();
     }
 
     InspectorInstrumentation::willInsertDOMNode(document(), *this);
 
     // Now actually add the child(ren)
@@ -873,11 +873,11 @@
     if (query.hasException())
         return query.releaseException();
     return query.releaseReturnValue().queryAll(*this);
 }
 
-Ref<HTMLCollection> ContainerNode::getElementsByTagName(const AtomicString& qualifiedName)
+Ref<HTMLCollection> ContainerNode::getElementsByTagName(const AtomString& qualifiedName)
 {
     ASSERT(!qualifiedName.isNull());
 
     if (qualifiedName == starAtom())
         return ensureRareData().ensureNodeLists().addCachedCollection<AllDescendantsCollection>(*this, AllDescendants);
@@ -885,27 +885,27 @@
     if (document().isHTMLDocument())
         return ensureRareData().ensureNodeLists().addCachedCollection<HTMLTagCollection>(*this, ByHTMLTag, qualifiedName);
     return ensureRareData().ensureNodeLists().addCachedCollection<TagCollection>(*this, ByTag, qualifiedName);
 }
 
-Ref<HTMLCollection> ContainerNode::getElementsByTagNameNS(const AtomicString& namespaceURI, const AtomicString& localName)
+Ref<HTMLCollection> ContainerNode::getElementsByTagNameNS(const AtomString& namespaceURI, const AtomString& localName)
 {
     ASSERT(!localName.isNull());
     return ensureRareData().ensureNodeLists().addCachedTagCollectionNS(*this, namespaceURI.isEmpty() ? nullAtom() : namespaceURI, localName);
 }
 
 Ref<NodeList> ContainerNode::getElementsByName(const String& elementName)
 {
     return ensureRareData().ensureNodeLists().addCacheWithAtomicName<NameNodeList>(*this, elementName);
 }
 
-Ref<HTMLCollection> ContainerNode::getElementsByClassName(const AtomicString& classNames)
+Ref<HTMLCollection> ContainerNode::getElementsByClassName(const AtomString& classNames)
 {
     return ensureRareData().ensureNodeLists().addCachedCollection<ClassCollection>(*this, ByClass, classNames);
 }
 
-Ref<RadioNodeList> ContainerNode::radioNodeList(const AtomicString& name)
+Ref<RadioNodeList> ContainerNode::radioNodeList(const AtomString& name)
 {
     ASSERT(hasTagName(HTMLNames::formTag) || hasTagName(HTMLNames::fieldsetTag));
     return ensureRareData().ensureNodeLists().addCacheWithAtomicName<RadioNodeList>(*this, name);
 }
 
