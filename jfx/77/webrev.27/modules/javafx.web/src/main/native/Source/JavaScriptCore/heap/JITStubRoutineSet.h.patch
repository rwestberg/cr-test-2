diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/JITStubRoutineSet.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/JITStubRoutineSet.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/JITStubRoutineSet.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/JITStubRoutineSet.h
@@ -26,10 +26,11 @@
 #pragma once
 
 #include "JITStubRoutine.h"
 #include <wtf/FastMalloc.h>
 #include <wtf/HashMap.h>
+#include <wtf/Range.h>
 #include <wtf/Vector.h>
 
 namespace JSC {
 
 class GCAwareJITStubRoutine;
@@ -50,28 +51,30 @@
     void clearMarks();
 
     void mark(void* candidateAddress)
     {
         uintptr_t address = removeCodePtrTag<uintptr_t>(candidateAddress);
-        if (!JITStubRoutine::passesFilter(address))
+        if (!m_range.contains(address))
             return;
-
         markSlow(address);
     }
 
+    void prepareForConservativeScan();
+
     void deleteUnmarkedJettisonedStubRoutines();
 
     void traceMarkedStubRoutines(SlotVisitor&);
 
-    unsigned size() const { return m_listOfRoutines.size(); }
-    GCAwareJITStubRoutine* at(unsigned i) const { return m_listOfRoutines[i]; }
-
 private:
     void markSlow(uintptr_t address);
 
-    HashMap<uintptr_t, GCAwareJITStubRoutine*> m_addressToRoutineMap;
-    Vector<GCAwareJITStubRoutine*> m_listOfRoutines;
+    struct Routine {
+        uintptr_t startAddress;
+        GCAwareJITStubRoutine* routine;
+    };
+    Vector<Routine> m_routines;
+    Range<uintptr_t> m_range { 0, 0 };
 };
 
 #else // !ENABLE(JIT)
 
 class JITStubRoutineSet {
@@ -83,10 +86,11 @@
     ~JITStubRoutineSet() { }
 
     void add(GCAwareJITStubRoutine*) { }
     void clearMarks() { }
     void mark(void*) { }
+    void prepareForConservativeScan() { }
     void deleteUnmarkedJettisonedStubRoutines() { }
     void traceMarkedStubRoutines(SlotVisitor&) { }
 };
 
 #endif // !ENABLE(JIT)
