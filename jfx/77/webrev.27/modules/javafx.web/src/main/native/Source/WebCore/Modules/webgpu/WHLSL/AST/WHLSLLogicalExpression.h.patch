diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLLogicalExpression.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLLogicalExpression.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLLogicalExpression.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLLogicalExpression.h
@@ -26,43 +26,42 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "WHLSLExpression.h"
-#include "WHLSLLexer.h"
+#include <wtf/FastMalloc.h>
 #include <wtf/UniqueRef.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class LogicalExpression : public Expression {
+class LogicalExpression final : public Expression {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     enum class Type : uint8_t {
         And,
         Or
     };
 
-    LogicalExpression(Lexer::Token&& origin, Type type, UniqueRef<Expression>&& left, UniqueRef<Expression>&& right)
-        : Expression(WTFMove(origin))
+    LogicalExpression(CodeLocation location, Type type, UniqueRef<Expression>&& left, UniqueRef<Expression>&& right)
+        : Expression(location, Kind::Logical)
         , m_type(type)
         , m_left(WTFMove(left))
         , m_right(WTFMove(right))
     {
     }
 
-    virtual ~LogicalExpression() = default;
+    ~LogicalExpression() = default;
 
     LogicalExpression(const LogicalExpression&) = delete;
     LogicalExpression(LogicalExpression&&) = default;
 
     Type type() const { return m_type; }
 
-    bool isLogicalExpression() const override { return true; }
-
     Expression& left() { return m_left; }
     Expression& right() { return m_right; }
 
 private:
     Type m_type;
@@ -74,8 +73,10 @@
 
 }
 
 }
 
+DEFINE_DEFAULT_DELETE(LogicalExpression)
+
 SPECIALIZE_TYPE_TRAITS_WHLSL_EXPRESSION(LogicalExpression, isLogicalExpression())
 
 #endif
