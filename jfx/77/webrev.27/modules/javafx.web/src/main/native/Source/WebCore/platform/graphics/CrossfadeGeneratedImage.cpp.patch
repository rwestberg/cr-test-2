diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/CrossfadeGeneratedImage.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/CrossfadeGeneratedImage.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/CrossfadeGeneratedImage.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/CrossfadeGeneratedImage.cpp
@@ -49,23 +49,24 @@
     // SVGImage resets the opacity when painting, so we have to use transparency layers to accurately paint one at a given opacity.
     bool useTransparencyLayer = image.isSVGImage();
 
     GraphicsContextStateSaver stateSaver(context);
 
-    CompositeOperator drawImageOperation = operation;
+    ImagePaintingOptions options;
 
     if (useTransparencyLayer) {
         context.setCompositeOperation(operation);
         context.beginTransparencyLayer(opacity);
-        drawImageOperation = CompositeSourceOver;
-    } else
+    } else {
         context.setAlpha(opacity);
+        options = { operation };
+    }
 
     if (targetSize != imageSize)
         context.scale(targetSize / imageSize);
 
-    context.drawImage(image, IntPoint(), ImagePaintingOptions(drawImageOperation));
+    context.drawImage(image, IntPoint(), options);
 
     if (useTransparencyLayer)
         context.endTransparencyLayer();
 }
 
@@ -84,36 +85,36 @@
     drawCrossfadeSubimage(context, m_toImage.get(), CompositePlusLighter, m_percentage, m_crossfadeSize);
 
     context.endTransparencyLayer();
 }
 
-ImageDrawResult CrossfadeGeneratedImage::draw(GraphicsContext& context, const FloatRect& dstRect, const FloatRect& srcRect, CompositeOperator compositeOp, BlendMode blendMode, DecodingMode, ImageOrientationDescription)
+ImageDrawResult CrossfadeGeneratedImage::draw(GraphicsContext& context, const FloatRect& dstRect, const FloatRect& srcRect, const ImagePaintingOptions& options)
 {
     GraphicsContextStateSaver stateSaver(context);
-    context.setCompositeOperation(compositeOp, blendMode);
+    context.setCompositeOperation(options.compositeOperator(), options.blendMode());
     context.clip(dstRect);
     context.translate(dstRect.location());
     if (dstRect.size() != srcRect.size())
         context.scale(dstRect.size() / srcRect.size());
     context.translate(-srcRect.location());
 
     drawCrossfade(context);
     return ImageDrawResult::DidDraw;
 }
 
-void CrossfadeGeneratedImage::drawPattern(GraphicsContext& context, const FloatRect& dstRect, const FloatRect& srcRect, const AffineTransform& patternTransform, const FloatPoint& phase, const FloatSize& spacing, CompositeOperator compositeOp, BlendMode blendMode)
+void CrossfadeGeneratedImage::drawPattern(GraphicsContext& context, const FloatRect& dstRect, const FloatRect& srcRect, const AffineTransform& patternTransform, const FloatPoint& phase, const FloatSize& spacing, const ImagePaintingOptions& options)
 {
     std::unique_ptr<ImageBuffer> imageBuffer = ImageBuffer::create(size(), context.renderingMode());
     if (!imageBuffer)
         return;
 
     // Fill with the cross-faded image.
     GraphicsContext& graphicsContext = imageBuffer->context();
     drawCrossfade(graphicsContext);
 
     // Tile the image buffer into the context.
-    imageBuffer->drawPattern(context, dstRect, srcRect, patternTransform, phase, spacing, compositeOp, blendMode);
+    imageBuffer->drawPattern(context, dstRect, srcRect, patternTransform, phase, spacing, options);
 }
 
 void CrossfadeGeneratedImage::dump(TextStream& ts) const
 {
     GeneratedImage::dump(ts);
