diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLCanvasElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLCanvasElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLCanvasElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLCanvasElement.cpp
@@ -74,15 +74,11 @@
 #if ENABLE(WEBGL2)
 #include "WebGL2RenderingContext.h"
 #endif
 
 #if ENABLE(WEBGPU)
-#include "WebGPURenderingContext.h"
-#endif
-
-#if ENABLE(WEBMETAL)
-#include "WebMetalRenderingContext.h"
+#include "GPUCanvasContext.h"
 #endif
 
 #if PLATFORM(COCOA)
 #include "MediaSampleAVFObjC.h"
 #include <pal/cf/CoreMediaSoftLink.h>
@@ -153,11 +149,11 @@
     m_context = nullptr; // Ensure this goes away before the ImageBuffer.
 
     releaseImageBufferAndContext();
 }
 
-void HTMLCanvasElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLCanvasElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == widthAttr || name == heightAttr)
         reset();
     HTMLElement::parseAttribute(name, value);
 }
@@ -182,19 +178,19 @@
 
 ExceptionOr<void> HTMLCanvasElement::setHeight(unsigned value)
 {
     if (m_context && m_context->isPlaceholder())
         return Exception { InvalidStateError };
-    setAttributeWithoutSynchronization(heightAttr, AtomicString::number(limitToOnlyHTMLNonNegative(value, defaultHeight)));
+    setAttributeWithoutSynchronization(heightAttr, AtomString::number(limitToOnlyHTMLNonNegative(value, defaultHeight)));
     return { };
 }
 
 ExceptionOr<void> HTMLCanvasElement::setWidth(unsigned value)
 {
     if (m_context && m_context->isPlaceholder())
         return Exception { InvalidStateError };
-    setAttributeWithoutSynchronization(widthAttr, AtomicString::number(limitToOnlyHTMLNonNegative(value, defaultWidth)));
+    setAttributeWithoutSynchronization(widthAttr, AtomString::number(limitToOnlyHTMLNonNegative(value, defaultWidth)));
     return { };
 }
 
 static inline size_t maxActivePixelMemory()
 {
@@ -243,19 +239,11 @@
 
 #if ENABLE(WEBGPU)
         if (m_context->isWebGPU()) {
             if (!isWebGPUType(contextId))
                 return Optional<RenderingContext> { WTF::nullopt };
-            return Optional<RenderingContext> { RefPtr<WebGPURenderingContext> { &downcast<WebGPURenderingContext>(*m_context) } };
-        }
-#endif
-
-#if ENABLE(WEBMETAL)
-        if (m_context->isWebMetal()) {
-            if (!isWebMetalType(contextId))
-                return Optional<RenderingContext> { WTF::nullopt };
-            return Optional<RenderingContext> { RefPtr<WebMetalRenderingContext> { &downcast<WebMetalRenderingContext>(*m_context) } };
+            return Optional<RenderingContext> { RefPtr<GPUCanvasContext> { &downcast<GPUCanvasContext>(*m_context) } };
         }
 #endif
 
         ASSERT_NOT_REACHED();
         return Optional<RenderingContext> { WTF::nullopt };
@@ -301,20 +289,11 @@
 #if ENABLE(WEBGPU)
     if (isWebGPUType(contextId)) {
         auto context = createContextWebGPU(contextId);
         if (!context)
             return Optional<RenderingContext> { WTF::nullopt };
-        return Optional<RenderingContext> { RefPtr<WebGPURenderingContext> { context } };
-    }
-#endif
-
-#if ENABLE(WEBMETAL)
-    if (isWebMetalType(contextId)) {
-        auto context = createContextWebMetal(contextId);
-        if (!context)
-            return Optional<RenderingContext> { WTF::nullopt };
-        return Optional<RenderingContext> { RefPtr<WebMetalRenderingContext> { context } };
+        return Optional<RenderingContext> { RefPtr<GPUCanvasContext> { context } };
     }
 #endif
 
     return Optional<RenderingContext> { WTF::nullopt };
 }
@@ -325,15 +304,10 @@
         return getContext2d(type);
 
     if (HTMLCanvasElement::isBitmapRendererType(type))
         return getContextBitmapRenderer(type);
 
-#if ENABLE(WEBMETAL)
-    if (HTMLCanvasElement::isWebMetalType(type) && RuntimeEnabledFeatures::sharedFeatures().webMetalEnabled())
-        return getContextWebMetal(type);
-#endif
-
 #if ENABLE(WEBGL)
     if (HTMLCanvasElement::isWebGLType(type))
         return getContextWebGL(type);
 #endif
 
@@ -353,15 +327,10 @@
 CanvasRenderingContext2D* HTMLCanvasElement::createContext2d(const String& type)
 {
     ASSERT_UNUSED(HTMLCanvasElement::is2dType(type), type);
     ASSERT(!m_context);
 
-    bool usesDashboardCompatibilityMode = false;
-#if ENABLE(DASHBOARD_SUPPORT)
-    usesDashboardCompatibilityMode = document().settings().usesDashboardBackwardCompatibilityMode();
-#endif
-
     // Make sure we don't use more pixel memory than the system can support.
     size_t requestedPixelMemory = 4 * width() * height();
     if (activePixelMemory + requestedPixelMemory > maxActivePixelMemory()) {
         StringBuilder stringBuilder;
         stringBuilder.appendLiteral("Total canvas memory use exceeds the maximum limit (");
@@ -369,11 +338,11 @@
         stringBuilder.appendLiteral(" MB).");
         document().addConsoleMessage(MessageSource::JS, MessageLevel::Warning, stringBuilder.toString());
         return nullptr;
     }
 
-    m_context = CanvasRenderingContext2D::create(*this, document().inQuirksMode(), usesDashboardCompatibilityMode);
+    m_context = CanvasRenderingContext2D::create(*this, document().inQuirksMode());
 
     downcast<CanvasRenderingContext2D>(*m_context).setUsesDisplayListDrawing(m_usesDisplayListDrawing);
     downcast<CanvasRenderingContext2D>(*m_context).setTracksDisplayListReplay(m_tracksDisplayListReplay);
 
 #if USE(IOSURFACE_CANVAS_BACKING_STORE) || ENABLE(ACCELERATED_2D_CANVAS)
@@ -464,31 +433,31 @@
 
 #if ENABLE(WEBGPU)
 
 bool HTMLCanvasElement::isWebGPUType(const String& type)
 {
-    return type == "webgpu";
+    return type == "gpu";
 }
 
-WebGPURenderingContext* HTMLCanvasElement::createContextWebGPU(const String& type)
+GPUCanvasContext* HTMLCanvasElement::createContextWebGPU(const String& type)
 {
     ASSERT_UNUSED(type, HTMLCanvasElement::isWebGPUType(type));
     ASSERT(!m_context);
 
     if (!RuntimeEnabledFeatures::sharedFeatures().webGPUEnabled())
         return nullptr;
 
-    m_context = WebGPURenderingContext::create(*this);
+    m_context = GPUCanvasContext::create(*this);
     if (m_context) {
         // Need to make sure a RenderLayer and compositing layer get created for the Canvas.
         invalidateStyleAndLayerComposition();
     }
 
-    return static_cast<WebGPURenderingContext*>(m_context.get());
+    return static_cast<GPUCanvasContext*>(m_context.get());
 }
 
-WebGPURenderingContext* HTMLCanvasElement::getContextWebGPU(const String& type)
+GPUCanvasContext* HTMLCanvasElement::getContextWebGPU(const String& type)
 {
     ASSERT_UNUSED(type, HTMLCanvasElement::isWebGPUType(type));
 
     if (!RuntimeEnabledFeatures::sharedFeatures().webGPUEnabled())
         return nullptr;
@@ -496,55 +465,15 @@
     if (m_context && !m_context->isWebGPU())
         return nullptr;
 
     if (!m_context)
         return createContextWebGPU(type);
-    return static_cast<WebGPURenderingContext*>(m_context.get());
+    return static_cast<GPUCanvasContext*>(m_context.get());
 }
 
 #endif // ENABLE(WEBGPU)
 
-#if ENABLE(WEBMETAL)
-
-bool HTMLCanvasElement::isWebMetalType(const String& type)
-{
-    return type == "webmetal";
-}
-
-WebMetalRenderingContext* HTMLCanvasElement::createContextWebMetal(const String& type)
-{
-    ASSERT_UNUSED(type, HTMLCanvasElement::isWebMetalType(type));
-    ASSERT(!m_context);
-
-    if (!RuntimeEnabledFeatures::sharedFeatures().webMetalEnabled())
-        return nullptr;
-
-    m_context = WebMetalRenderingContext::create(*this);
-    if (m_context) {
-        // Need to make sure a RenderLayer and compositing layer get created for the Canvas.
-        invalidateStyleAndLayerComposition();
-    }
-
-    return static_cast<WebMetalRenderingContext*>(m_context.get());
-}
-
-WebMetalRenderingContext* HTMLCanvasElement::getContextWebMetal(const String& type)
-{
-    ASSERT_UNUSED(type, HTMLCanvasElement::isWebMetalType(type));
-
-    if (!RuntimeEnabledFeatures::sharedFeatures().webMetalEnabled())
-        return nullptr;
-
-    if (m_context && !m_context->isWebMetal())
-        return nullptr;
-
-    if (!m_context)
-        return createContextWebMetal(type);
-    return static_cast<WebMetalRenderingContext*>(m_context.get());
-}
-#endif
-
 bool HTMLCanvasElement::isBitmapRendererType(const String& type)
 {
     return type == "bitmaprenderer";
 }
 
@@ -665,42 +594,37 @@
 }
 
 
 void HTMLCanvasElement::paint(GraphicsContext& context, const LayoutRect& r)
 {
-    if (UNLIKELY(m_context && m_context->callTracingActive()))
-        InspectorInstrumentation::didFinishRecordingCanvasFrame(*m_context);
-
     // Clear the dirty rect
     m_dirtyRect = FloatRect();
 
-    if (context.paintingDisabled())
-        return;
+    if (!context.paintingDisabled()) {
+        bool shouldPaint = true;
 
-    if (m_context) {
-        if (!paintsIntoCanvasBuffer() && !document().printing())
-            return;
+        if (m_context) {
+            shouldPaint = paintsIntoCanvasBuffer() || document().printing();
+            if (shouldPaint)
+                m_context->paintRenderingResultsToCanvas();
+        }
 
-        m_context->paintRenderingResultsToCanvas();
-    }
+        if (shouldPaint) {
+            if (hasCreatedImageBuffer()) {
+                if (m_presentedImage)
+                    context.drawImage(*m_presentedImage, snappedIntRect(r), renderer()->imageOrientation());
+                else if (ImageBuffer* imageBuffer = buffer())
+                    context.drawImageBuffer(*imageBuffer, snappedIntRect(r));
+            }
 
-    if (hasCreatedImageBuffer()) {
-        ImageBuffer* imageBuffer = buffer();
-        if (imageBuffer) {
-            if (m_presentedImage) {
-                ImageOrientationDescription orientationDescription;
-#if ENABLE(CSS_IMAGE_ORIENTATION)
-                orientationDescription.setImageOrientationEnum(renderer()->style().imageOrientation());
-#endif
-                context.drawImage(*m_presentedImage, snappedIntRect(r), ImagePaintingOptions(orientationDescription));
-            } else
-                context.drawImageBuffer(*imageBuffer, snappedIntRect(r));
+            if (isGPUBased())
+                downcast<GPUBasedCanvasRenderingContext>(*m_context).markLayerComposited();
         }
     }
 
-    if (isGPUBased())
-        downcast<GPUBasedCanvasRenderingContext>(*m_context).markLayerComposited();
+    if (UNLIKELY(m_context && m_context->callTracingActive()))
+        InspectorInstrumentation::didFinishRecordingCanvasFrame(*m_context);
 }
 
 bool HTMLCanvasElement::isGPUBased() const
 {
     return m_context && m_context->isGPUBased();
@@ -806,22 +730,22 @@
 #if USE(CG)
     if (auto imageData = getImageData()) {
         RefPtr<Blob> blob;
         Vector<uint8_t> blobData = data(*imageData, encodingMIMEType, quality);
         if (!blobData.isEmpty())
-            blob = Blob::create(WTFMove(blobData), encodingMIMEType);
+            blob = Blob::create(context.sessionID(), WTFMove(blobData), encodingMIMEType);
         callback->scheduleCallback(context, WTFMove(blob));
         return { };
     }
 #endif
 
     makeRenderingResultsAvailable();
 
     RefPtr<Blob> blob;
     Vector<uint8_t> blobData = buffer()->toData(encodingMIMEType, quality);
     if (!blobData.isEmpty())
-        blob = Blob::create(WTFMove(blobData), encodingMIMEType);
+        blob = Blob::create(context.sessionID(), WTFMove(blobData), encodingMIMEType);
     callback->scheduleCallback(context, WTFMove(blob));
     return { };
 }
 
 RefPtr<ImageData> HTMLCanvasElement::getImageData()
@@ -852,24 +776,24 @@
 #else
     return nullptr;
 #endif
 }
 
-ExceptionOr<Ref<MediaStream>> HTMLCanvasElement::captureStream(ScriptExecutionContext& context, Optional<double>&& frameRequestRate)
+ExceptionOr<Ref<MediaStream>> HTMLCanvasElement::captureStream(Document& document, Optional<double>&& frameRequestRate)
 {
     if (!originClean())
         return Exception(SecurityError, "Canvas is tainted"_s);
     if (RuntimeEnabledFeatures::sharedFeatures().webAPIStatisticsEnabled())
-        ResourceLoadObserver::shared().logCanvasRead(document());
+        ResourceLoadObserver::shared().logCanvasRead(this->document());
 
     if (frameRequestRate && frameRequestRate.value() < 0)
         return Exception(NotSupportedError, "frameRequestRate is negative"_s);
 
-    auto track = CanvasCaptureMediaStreamTrack::create(context, *this, WTFMove(frameRequestRate));
-    auto stream =  MediaStream::create(context);
+    auto track = CanvasCaptureMediaStreamTrack::create(document, *this, WTFMove(frameRequestRate));
+    auto stream =  MediaStream::create(document);
     stream->addTrack(track);
-    return WTFMove(stream);
+    return stream;
 }
 #endif
 
 SecurityOrigin* HTMLCanvasElement::securityOrigin() const
 {
@@ -1026,11 +950,11 @@
     if (!m_imageBuffer)
         return;
     m_imageBuffer->context().setShadowsIgnoreTransforms(true);
     m_imageBuffer->context().setImageInterpolationQuality(defaultInterpolationQuality);
     m_imageBuffer->context().setStrokeThickness(1);
-    m_contextStateSaver = std::make_unique<GraphicsContextStateSaver>(m_imageBuffer->context());
+    m_contextStateSaver = makeUnique<GraphicsContextStateSaver>(m_imageBuffer->context());
 
     JSC::JSLockHolder lock(HTMLElement::scriptExecutionContext()->vm());
     HTMLElement::scriptExecutionContext()->vm().heap.reportExtraMemoryAllocated(memoryCost());
 
 #if USE(IOSURFACE_CANVAS_BACKING_STORE) || ENABLE(ACCELERATED_2D_CANVAS)
