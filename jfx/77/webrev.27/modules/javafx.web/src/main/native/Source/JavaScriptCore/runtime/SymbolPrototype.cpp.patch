diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolPrototype.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolPrototype.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolPrototype.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolPrototype.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2012, 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2012-2019 Apple Inc. All rights reserved.
  * Copyright (C) 2015 Yusuke Suzuki <utatane.tea@gmail.com>.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
@@ -60,11 +60,11 @@
 }
 
 void SymbolPrototype::finishCreation(VM& vm, JSGlobalObject* globalObject)
 {
     Base::finishCreation(vm);
-    putDirectWithoutTransition(vm, vm.propertyNames->toStringTagSymbol, jsString(&vm, "Symbol"), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
+    putDirectWithoutTransition(vm, vm.propertyNames->toStringTagSymbol, jsString(vm, "Symbol"), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
     ASSERT(inherits(vm, info()));
 
     JSFunction* toPrimitiveFunction = JSFunction::create(vm, globalObject, 1, "[Symbol.toPrimitive]"_s, symbolProtoFuncValueOf, NoIntrinsic);
     putDirectWithoutTransition(vm, vm.propertyNames->toPrimitiveSymbol, toPrimitiveFunction, PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
 }
@@ -96,22 +96,22 @@
     Symbol* symbol = tryExtractSymbol(vm, exec->thisValue());
     if (!symbol)
         return throwVMTypeError(exec, scope, SymbolDescriptionTypeError);
     scope.release();
     const auto description = symbol->description();
-    return JSValue::encode(description.isNull() ? jsUndefined() : jsString(&vm, description));
+    return JSValue::encode(description.isNull() ? jsUndefined() : jsString(vm, description));
 }
 
 EncodedJSValue JSC_HOST_CALL symbolProtoFuncToString(ExecState* exec)
 {
     VM& vm = exec->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     Symbol* symbol = tryExtractSymbol(vm, exec->thisValue());
     if (!symbol)
         return throwVMTypeError(exec, scope, SymbolToStringTypeError);
-    RELEASE_AND_RETURN(scope, JSValue::encode(jsNontrivialString(&vm, symbol->descriptiveString())));
+    RELEASE_AND_RETURN(scope, JSValue::encode(jsNontrivialString(vm, symbol->descriptiveString())));
 }
 
 EncodedJSValue JSC_HOST_CALL symbolProtoFuncValueOf(ExecState* exec)
 {
     VM& vm = exec->vm();
