diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CallLinkStatus.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CallLinkStatus.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CallLinkStatus.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CallLinkStatus.cpp
@@ -84,11 +84,11 @@
     default:
         return CallLinkStatus();
     }
 
 
-    return CallLinkStatus(callLinkInfo->lastSeenCallee.get());
+    return CallLinkStatus(callLinkInfo->lastSeenCallee());
 }
 
 CallLinkStatus CallLinkStatus::computeFor(
     CodeBlock* profiledBlock, unsigned bytecodeIndex, const ICStatusMap& map,
     ExitSiteData exitSiteData)
@@ -300,11 +300,11 @@
     CodeBlock* profiledBlock, CodeOrigin codeOrigin,
     const ICStatusMap& baselineMap, const ICStatusContextStack& optimizedStack)
 {
     if (CallLinkStatusInternal::verbose)
         dataLog("Figuring out call profiling for ", codeOrigin, "\n");
-    ExitSiteData exitSiteData = computeExitSiteData(profiledBlock, codeOrigin.bytecodeIndex);
+    ExitSiteData exitSiteData = computeExitSiteData(profiledBlock, codeOrigin.bytecodeIndex());
     if (CallLinkStatusInternal::verbose) {
         dataLog("takesSlowPath = ", exitSiteData.takesSlowPath, "\n");
         dataLog("badFunction = ", exitSiteData.badFunction, "\n");
     }
 
@@ -340,15 +340,15 @@
         //
         // Luckily, this case doesn't matter for the other ICStatuses, since they never do the
         // fast-path-slow-path control-flow-diamond style of IC inlining. It's either all fast
         // path or it's a full IC. So, for them, if there is an IC status then it means case (1).
 
-        bool checkStatusFirst = context->optimizedCodeBlock->jitType() == JITCode::FTLJIT;
+        bool checkStatusFirst = context->optimizedCodeBlock->jitType() == JITType::FTLJIT;
 
         auto bless = [&] (CallLinkStatus& result) {
             if (!context->isInlined(codeOrigin))
-                result.merge(computeFor(profiledBlock, codeOrigin.bytecodeIndex, baselineMap, exitSiteData));
+                result.merge(computeFor(profiledBlock, codeOrigin.bytecodeIndex(), baselineMap, exitSiteData));
         };
 
         auto checkInfo = [&] () -> CallLinkStatus {
             if (!status.callLinkInfo)
                 return CallLinkStatus();
@@ -391,11 +391,11 @@
             return result;
         if (CallLinkStatus result = checkStatus())
             return result;
     }
 
-    return computeFor(profiledBlock, codeOrigin.bytecodeIndex, baselineMap, exitSiteData);
+    return computeFor(profiledBlock, codeOrigin.bytecodeIndex(), baselineMap, exitSiteData);
 }
 #endif
 
 void CallLinkStatus::setProvenConstantCallee(CallVariant variant)
 {
@@ -416,14 +416,14 @@
 void CallLinkStatus::makeClosureCall()
 {
     m_variants = despecifiedVariantList(m_variants);
 }
 
-bool CallLinkStatus::finalize()
+bool CallLinkStatus::finalize(VM& vm)
 {
     for (CallVariant& variant : m_variants) {
-        if (!variant.finalize())
+        if (!variant.finalize(vm))
             return false;
     }
     return true;
 }
 
