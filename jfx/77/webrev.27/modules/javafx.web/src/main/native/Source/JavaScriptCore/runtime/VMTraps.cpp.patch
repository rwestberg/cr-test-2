diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/VMTraps.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/VMTraps.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/VMTraps.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/VMTraps.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -213,11 +213,11 @@
                 if (!currentCodeBlock) {
                     // Either we trapped for some other reason, e.g. Wasm OOB, or we didn't properly monitor the PC. Regardless, we can't do much now...
                     return SignalAction::NotHandled;
                 }
                 ASSERT(currentCodeBlock->hasInstalledVMTrapBreakpoints());
-                VM& vm = *currentCodeBlock->vm();
+                VM& vm = currentCodeBlock->vm();
 
                 // We are in JIT code so it's safe to acquire this lock.
                 auto codeBlockSetLocker = holdLock(vm.heap.codeBlockSet().getLock());
                 bool sawCurrentCodeBlock = false;
                 vm.heap.forEachCodeBlockIgnoringJITPlans(codeBlockSetLocker, [&] (CodeBlock* codeBlock) {
