diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/API/JSObjectRef.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/API/JSObjectRef.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/API/JSObjectRef.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/API/JSObjectRef.cpp
@@ -145,16 +145,16 @@
     VM& vm = exec->vm();
     JSLockHolder locker(vm);
     auto scope = DECLARE_CATCH_SCOPE(vm);
 
     startingLineNumber = std::max(1, startingLineNumber);
-    Identifier nameID = name ? name->identifier(&vm) : Identifier::fromString(exec, "anonymous");
+    Identifier nameID = name ? name->identifier(&vm) : Identifier::fromString(vm, "anonymous");
 
     MarkedArgumentBuffer args;
     for (unsigned i = 0; i < parameterCount; i++)
-        args.append(jsString(exec, parameterNames[i]->string()));
-    args.append(jsString(exec, body->string()));
+        args.append(jsString(vm, parameterNames[i]->string()));
+    args.append(jsString(vm, body->string()));
     if (UNLIKELY(args.hasOverflowed())) {
         auto throwScope = DECLARE_THROW_SCOPE(vm);
         throwOutOfMemoryError(exec, throwScope);
         handleExceptionIfNeeded(scope, exec, exception);
         return 0;
@@ -544,22 +544,22 @@
 // API objects have private properties, which may get accessed during destruction. This
 // helper lets us get the ClassInfo of an API object from a function that may get called
 // during destruction.
 static const ClassInfo* classInfoPrivate(JSObject* jsObject)
 {
-    VM& vm = *jsObject->vm();
+    VM& vm = jsObject->vm();
 
     if (vm.currentlyDestructingCallbackObject != jsObject)
         return jsObject->classInfo(vm);
 
     return vm.currentlyDestructingCallbackObjectClassInfo;
 }
 
 void* JSObjectGetPrivate(JSObjectRef object)
 {
     JSObject* jsObject = uncheckedToJS(object);
-    VM& vm = *jsObject->vm();
+    VM& vm = jsObject->vm();
 
     const ClassInfo* classInfo = classInfoPrivate(jsObject);
 
     // Get wrapped object if proxied
     if (classInfo->isSubClassOf(JSProxy::info())) {
@@ -580,11 +580,11 @@
 }
 
 bool JSObjectSetPrivate(JSObjectRef object, void* data)
 {
     JSObject* jsObject = uncheckedToJS(object);
-    VM& vm = *jsObject->vm();
+    VM& vm = jsObject->vm();
 
     const ClassInfo* classInfo = classInfoPrivate(jsObject);
 
     // Get wrapped object if proxied
     if (classInfo->isSubClassOf(JSProxy::info())) {
@@ -808,16 +808,16 @@
         return 0;
     }
     ExecState* exec = toJS(ctx);
     JSLockHolder locker(exec);
 
-    VM* vm = &exec->vm();
+    VM& vm = exec->vm();
 
     JSObject* jsObject = toJS(object);
-    JSPropertyNameArrayRef propertyNames = new OpaqueJSPropertyNameArray(vm);
+    JSPropertyNameArrayRef propertyNames = new OpaqueJSPropertyNameArray(&vm);
     PropertyNameArray array(vm, PropertyNameMode::Strings, PrivateSymbolMode::Exclude);
-    jsObject->methodTable(*vm)->getPropertyNames(jsObject, exec, array, EnumerationMode());
+    jsObject->methodTable(vm)->getPropertyNames(jsObject, exec, array, EnumerationMode());
 
     size_t size = array.size();
     propertyNames->array.reserveInitialCapacity(size);
     for (size_t i = 0; i < size; ++i)
         propertyNames->array.uncheckedAppend(OpaqueJSString::tryCreate(array[i].string()).releaseNonNull());
@@ -850,21 +850,21 @@
 }
 
 void JSPropertyNameAccumulatorAddName(JSPropertyNameAccumulatorRef array, JSStringRef propertyName)
 {
     PropertyNameArray* propertyNames = toJS(array);
-    VM* vm = propertyNames->vm();
+    VM& vm = propertyNames->vm();
     JSLockHolder locker(vm);
-    propertyNames->add(propertyName->identifier(vm));
+    propertyNames->add(propertyName->identifier(&vm));
 }
 
 JSObjectRef JSObjectGetProxyTarget(JSObjectRef objectRef)
 {
     JSObject* object = toJS(objectRef);
     if (!object)
         return nullptr;
-    VM& vm = *object->vm();
+    VM& vm = object->vm();
     JSLockHolder locker(vm);
     JSObject* result = nullptr;
     if (JSProxy* proxy = jsDynamicCast<JSProxy*>(vm, object))
         result = proxy->target();
     else if (ProxyObject* proxy = jsDynamicCast<ProxyObject*>(vm, object))
