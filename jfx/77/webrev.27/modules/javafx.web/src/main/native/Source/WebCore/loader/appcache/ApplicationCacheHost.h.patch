diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheHost.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheHost.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheHost.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheHost.h
@@ -32,10 +32,11 @@
 #pragma once
 
 #include <wtf/Deque.h>
 #include <wtf/URL.h>
 #include <wtf/Vector.h>
+#include <wtf/WeakPtr.h>
 
 namespace WebCore {
 
 class ApplicationCache;
 class ApplicationCacheGroup;
@@ -110,11 +111,11 @@
     bool update();
     bool swapCache();
     void abort();
 
     void setDOMApplicationCache(DOMApplicationCache*);
-    void notifyDOMApplicationCache(const AtomicString& eventType, int progressTotal, int progressDone);
+    void notifyDOMApplicationCache(const AtomString& eventType, int progressTotal, int progressDone);
 
     void stopLoadingInFrame(Frame&);
 
     void stopDeferringEvents(); // Also raises the events that have been queued up.
 
@@ -126,29 +127,29 @@
 
 private:
     friend class ApplicationCacheGroup;
 
     struct DeferredEvent {
-        AtomicString eventType;
+        AtomString eventType;
         int progressTotal;
         int progressDone;
     };
 
     bool isApplicationCacheEnabled();
     bool isApplicationCacheBlockedForRequest(const ResourceRequest&);
 
-    void dispatchDOMEvent(const AtomicString& eventType, int progressTotal, int progressDone);
+    void dispatchDOMEvent(const AtomString& eventType, int progressTotal, int progressDone);
 
     bool scheduleLoadFallbackResourceFromApplicationCache(ResourceLoader*, ApplicationCache* = nullptr);
     void setCandidateApplicationCacheGroup(ApplicationCacheGroup*);
     ApplicationCacheGroup* candidateApplicationCacheGroup() const { return m_candidateApplicationCacheGroup; }
     void setApplicationCache(RefPtr<ApplicationCache>&&);
     ApplicationCache* applicationCache() const { return m_applicationCache.get(); }
     ApplicationCache* mainResourceApplicationCache() const { return m_mainResourceApplicationCache.get(); }
     bool maybeLoadFallbackForMainError(const ResourceRequest&, const ResourceError&);
 
-    DOMApplicationCache* m_domApplicationCache { nullptr };
+    WeakPtr<DOMApplicationCache> m_domApplicationCache;
     DocumentLoader& m_documentLoader;
 
     bool m_defersEvents { true }; // Events are deferred until after document onload.
     Vector<DeferredEvent> m_deferredEvents;
 
