diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLNullLiteral.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLNullLiteral.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLNullLiteral.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLNullLiteral.h
@@ -26,43 +26,43 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "WHLSLExpression.h"
-#include "WHLSLLexer.h"
 #include "WHLSLNullLiteralType.h"
+#include <wtf/FastMalloc.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class NullLiteral : public Expression {
+class NullLiteral final : public Expression {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    NullLiteral(Lexer::Token&& origin)
-        : Expression(WTFMove(origin))
+    NullLiteral(CodeLocation location)
+        : Expression(location, Kind::NullLiteral)
     {
     }
 
-    virtual ~NullLiteral() = default;
+    ~NullLiteral() = default;
 
     NullLiteral(const NullLiteral&) = delete;
     NullLiteral(NullLiteral&&) = default;
 
     NullLiteral& operator=(const NullLiteral&) = delete;
     NullLiteral& operator=(NullLiteral&&) = default;
 
     NullLiteralType& type() { return m_type; }
 
-    bool isNullLiteral() const override { return true; }
-
     NullLiteral clone() const
     {
-        auto result = NullLiteral(Lexer::Token(origin()));
-        if (result.m_type.resolvedType())
-            result.m_type.resolve(result.m_type.resolvedType()->clone());
+        auto result = NullLiteral(codeLocation());
+        if (auto* resolvedType = m_type.maybeResolvedType())
+            result.m_type.resolve(const_cast<AST::UnnamedType&>(*resolvedType));
+        copyTypeTo(result);
         return result;
     }
 
 private:
     NullLiteralType m_type;
@@ -72,8 +72,10 @@
 
 }
 
 }
 
+DEFINE_DEFAULT_DELETE(NullLiteral)
+
 SPECIALIZE_TYPE_TRAITS_WHLSL_EXPRESSION(NullLiteral, isNullLiteral())
 
 #endif
