diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/Atomics.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/Atomics.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/Atomics.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/Atomics.h
@@ -51,10 +51,12 @@
 // Atomic is a struct without explicitly defined constructors so that it can be
 // initialized at compile time.
 
 template<typename T>
 struct Atomic {
+    WTF_MAKE_STRUCT_FAST_ALLOCATED;
+
     // Don't pass a non-default value for the order parameter unless you really know
     // what you are doing and have thought about it very hard. The cost of seq_cst
     // is usually not high enough to justify the risk.
 
     ALWAYS_INLINE T load(std::memory_order order = std::memory_order_seq_cst) const { return value.load(order); }
@@ -344,10 +346,11 @@
     u.value = value;
     return opaqueMixture(arguments...) + u.copy;
 }
 
 class Dependency {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     Dependency()
         : m_value(0)
     {
     }
@@ -406,10 +409,12 @@
     InternalDependencyType m_value;
 };
 
 template<typename InputType, typename ValueType>
 struct InputAndValue {
+    WTF_MAKE_STRUCT_FAST_ALLOCATED;
+
     InputAndValue() { }
 
     InputAndValue(InputType input, ValueType value)
         : input(input)
         , value(value)
