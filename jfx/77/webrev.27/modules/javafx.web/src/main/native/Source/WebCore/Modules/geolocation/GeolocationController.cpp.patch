diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/GeolocationController.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/GeolocationController.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/GeolocationController.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/GeolocationController.cpp
@@ -28,11 +28,11 @@
 
 #if ENABLE(GEOLOCATION)
 
 #include "GeolocationClient.h"
 #include "GeolocationError.h"
-#include "GeolocationPosition.h"
+#include "GeolocationPositionData.h"
 
 namespace WebCore {
 
 GeolocationController::GeolocationController(Page& page, GeolocationClient& client)
     : m_page(page)
@@ -97,11 +97,11 @@
         return;
 
     m_client.cancelPermissionRequest(geolocation);
 }
 
-void GeolocationController::positionChanged(const Optional<GeolocationPosition>& position)
+void GeolocationController::positionChanged(const Optional<GeolocationPositionData>& position)
 {
     m_lastPosition = position;
     Vector<Ref<Geolocation>> observersVector;
     observersVector.reserveInitialCapacity(m_observers.size());
     for (auto& observer : m_observers)
@@ -118,11 +118,11 @@
         observersVector.uncheckedAppend(observer.copyRef());
     for (auto& observer : observersVector)
         observer->setError(error);
 }
 
-Optional<GeolocationPosition> GeolocationController::lastPosition()
+Optional<GeolocationPositionData> GeolocationController::lastPosition()
 {
     if (m_lastPosition)
         return m_lastPosition.value();
 
     return m_client.lastPosition();
@@ -153,11 +153,11 @@
 }
 
 void provideGeolocationTo(Page* page, GeolocationClient& client)
 {
     ASSERT(page);
-    Supplement<Page>::provideTo(page, GeolocationController::supplementName(), std::make_unique<GeolocationController>(*page, client));
+    Supplement<Page>::provideTo(page, GeolocationController::supplementName(), makeUnique<GeolocationController>(*page, client));
 }
 
 } // namespace WebCore
 
 #endif // ENABLE(GEOLOCATION)
