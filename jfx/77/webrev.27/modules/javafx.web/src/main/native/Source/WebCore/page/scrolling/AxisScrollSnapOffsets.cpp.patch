diff a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/AxisScrollSnapOffsets.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/AxisScrollSnapOffsets.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/AxisScrollSnapOffsets.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/AxisScrollSnapOffsets.cpp
@@ -195,11 +195,11 @@
     // predicted scroll destination is still within proximity of the snap offset. In this case, the regular (mandatory
     // scroll snapping) behavior would be to snap to the next offset in the direction of momentum scrolling, but
     // instead, it is more intuitive to either return to the original snap position (which we arbitrarily choose here)
     // or scroll just outside of the snap offset range. This is another minor behavior tweak that we should play around
     // with to see what feels best.
-    LayoutUnit proximityDistance = ratioOfScrollPortAxisLengthToBeConsideredForProximity * scrollPortAxisLength;
+    LayoutUnit proximityDistance { ratioOfScrollPortAxisLengthToBeConsideredForProximity * scrollPortAxisLength };
     for (size_t index = 1; index < snapOffsets.size(); ++index) {
         auto startOffset = snapOffsets[index - 1] + proximityDistance;
         auto endOffset = snapOffsets[index] - proximityDistance;
         if (startOffset < endOffset)
             offsetRanges.append({ startOffset, endOffset });
