diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGVariableEventStream.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGVariableEventStream.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGVariableEventStream.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGVariableEventStream.cpp
@@ -99,16 +99,16 @@
     if (node->hasConstant()) {
         recovery = ValueRecovery::constant(node->constant());
         return true;
     }
 
-    if (node->op() == PhantomDirectArguments) {
+    if (node->isPhantomDirectArguments()) {
         recovery = ValueRecovery::directArgumentsThatWereNotCreated(node->id());
         return true;
     }
 
-    if (node->op() == PhantomClonedArguments) {
+    if (node->isPhantomClonedArguments()) {
         recovery = ValueRecovery::clonedArgumentsThatWereNotCreated(node->id());
         return true;
     }
 
     return false;
@@ -117,11 +117,11 @@
 template<VariableEventStream::ReconstructionStyle style>
 unsigned VariableEventStream::reconstruct(
     CodeBlock* codeBlock, CodeOrigin codeOrigin, MinifiedGraph& graph,
     unsigned index, Operands<ValueRecovery>& valueRecoveries, Vector<UndefinedOperandSpan>* undefinedOperandSpans) const
 {
-    ASSERT(codeBlock->jitType() == JITCode::DFGJIT);
+    ASSERT(codeBlock->jitType() == JITType::DFGJIT);
     CodeBlock* baselineCodeBlock = codeBlock->baselineVersion();
 
     unsigned numVariables;
     static const unsigned invalidIndex = std::numeric_limits<unsigned>::max();
     unsigned firstUndefined = invalidIndex;
@@ -145,12 +145,13 @@
             firstUndefined = i;
             firstUndefinedIsArgument = valueRecoveries.isArgument(i);
         }
     };
 
-    if (codeOrigin.inlineCallFrame)
-        numVariables = baselineCodeBlockForInlineCallFrame(codeOrigin.inlineCallFrame)->numCalleeLocals() + VirtualRegister(codeOrigin.inlineCallFrame->stackOffset).toLocal() + 1;
+    auto* inlineCallFrame = codeOrigin.inlineCallFrame();
+    if (inlineCallFrame)
+        numVariables = baselineCodeBlockForInlineCallFrame(inlineCallFrame)->numCalleeLocals() + VirtualRegister(inlineCallFrame->stackOffset).toLocal() + 1;
     else
         numVariables = baselineCodeBlock->numCalleeLocals();
 
     // Crazy special case: if we're at index == 0 then this must be an argument check
     // failure, in which case all variables are already set up. The recoveries should
