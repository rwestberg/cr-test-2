diff a/modules/javafx.web/src/main/native/Source/WebCore/worklets/WorkletGlobalScope.cpp b/modules/javafx.web/src/main/native/Source/WebCore/worklets/WorkletGlobalScope.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/worklets/WorkletGlobalScope.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/worklets/WorkletGlobalScope.cpp
@@ -27,30 +27,31 @@
 #include "config.h"
 #include "WorkletGlobalScope.h"
 
 #if ENABLE(CSS_PAINTING_API)
 
-#include "Document.h"
 #include "Frame.h"
 #include "InspectorInstrumentation.h"
 #include "JSWorkletGlobalScope.h"
 #include "PageConsoleClient.h"
 #include "SecurityOriginPolicy.h"
 #include "Settings.h"
 #include "WorkletScriptController.h"
-
 #include <JavaScriptCore/Exception.h>
 #include <JavaScriptCore/JSLock.h>
 #include <JavaScriptCore/ScriptCallStack.h>
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 using namespace Inspector;
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(WorkletGlobalScope);
+
 WorkletGlobalScope::WorkletGlobalScope(Document& document, ScriptSourceCode&& code)
     : m_document(makeWeakPtr(document))
     , m_sessionID(m_document->sessionID())
-    , m_script(std::make_unique<WorkletScriptController>(this))
+    , m_script(makeUnique<WorkletScriptController>(this))
     , m_topOrigin(SecurityOrigin::createUnique())
     , m_eventQueue(*this)
     , m_code(WTFMove(code))
 {
     auto addResult = allWorkletGlobalScopesSet().add(this);
@@ -59,11 +60,11 @@
     auto* frame = document.frame();
     m_jsRuntimeFlags = frame ? frame->settings().javaScriptRuntimeFlags() : JSC::RuntimeFlags();
     ASSERT(document.page());
 
     setSecurityOriginPolicy(SecurityOriginPolicy::create(m_topOrigin.copyRef()));
-    setContentSecurityPolicy(std::make_unique<ContentSecurityPolicy>(URL { m_code.url() }, *this));
+    setContentSecurityPolicy(makeUnique<ContentSecurityPolicy>(URL { m_code.url() }, *this));
 }
 
 WorkletGlobalScope::~WorkletGlobalScope()
 {
     ASSERT(!m_script);
@@ -137,11 +138,11 @@
 
 void WorkletGlobalScope::addConsoleMessage(std::unique_ptr<Inspector::ConsoleMessage>&& message)
 {
     if (!m_document || isJSExecutionForbidden() || !message)
         return;
-    m_document->addConsoleMessage(std::make_unique<Inspector::ConsoleMessage>(message->source(), message->type(), message->level(), message->message(), 0));
+    m_document->addConsoleMessage(makeUnique<Inspector::ConsoleMessage>(message->source(), message->type(), message->level(), message->message(), 0));
 }
 
 void WorkletGlobalScope::addConsoleMessage(MessageSource source, MessageLevel level, const String& message, unsigned long requestIdentifier)
 {
     if (!m_document || isJSExecutionForbidden())
