diff a/modules/javafx.web/src/main/native/Source/WebCore/html/track/TextTrack.h b/modules/javafx.web/src/main/native/Source/WebCore/html/track/TextTrack.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/track/TextTrack.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/track/TextTrack.h
@@ -50,12 +50,13 @@
     virtual void textTrackAddCue(TextTrack&, TextTrackCue&) = 0;
     virtual void textTrackRemoveCue(TextTrack&, TextTrackCue&) = 0;
 };
 
 class TextTrack : public TrackBase, public EventTargetWithInlineData, public ContextDestructionObserver {
+    WTF_MAKE_ISO_ALLOCATED(TextTrack);
 public:
-    static Ref<TextTrack> create(ScriptExecutionContext* context, TextTrackClient* client, const AtomicString& kind, const AtomicString& id, const AtomicString& label, const AtomicString& language)
+    static Ref<TextTrack> create(ScriptExecutionContext* context, TextTrackClient* client, const AtomString& kind, const AtomString& id, const AtomString& label, const AtomString& language)
     {
         return adoptRef(*new TextTrack(context, client, kind, id, label, language, AddTrack));
     }
     virtual ~TextTrack();
 
@@ -63,28 +64,28 @@
     ScriptExecutionContext* scriptExecutionContext() const final { return ContextDestructionObserver::scriptExecutionContext(); }
 
     static TextTrack* captionMenuOffItem();
     static TextTrack* captionMenuAutomaticItem();
 
-    static const AtomicString& subtitlesKeyword();
-    static bool isValidKindKeyword(const AtomicString&);
+    static const AtomString& subtitlesKeyword();
+    static bool isValidKindKeyword(const AtomString&);
 
-    static const AtomicString& disabledKeyword();
-    static const AtomicString& hiddenKeyword();
-    static const AtomicString& showingKeyword();
+    static const AtomString& disabledKeyword();
+    static const AtomString& hiddenKeyword();
+    static const AtomString& showingKeyword();
 
     enum class Kind { Subtitles, Captions, Descriptions, Chapters, Metadata, Forced };
     Kind kind() const;
     void setKind(Kind);
 
     Kind kindForBindings() const;
     void setKindForBindings(Kind);
 
-    const AtomicString& kindKeyword() const;
+    const AtomString& kindKeyword() const;
     void setKindKeywordIgnoringASCIICase(StringView);
 
-    virtual AtomicString inBandMetadataTrackDispatchType() const { return emptyString(); }
+    virtual AtomString inBandMetadataTrackDispatchType() const { return emptyString(); }
 
     enum class Mode { Disabled, Hidden, Showing };
     Mode mode() const;
     virtual void setMode(Mode);
 
@@ -132,11 +133,11 @@
     virtual void setIsDefault(bool) { }
 
     void removeAllCues();
 
 #if ENABLE(MEDIA_SOURCE)
-    void setLanguage(const AtomicString&) override;
+    void setLanguage(const AtomString&) override;
 #endif
 
     virtual bool isInband() const { return false; }
 
     virtual MediaTime startTimeVariance() const { return MediaTime::zeroTime(); }
@@ -145,11 +146,11 @@
     using RefCounted<TrackBase>::deref;
 
     const Optional<Vector<String>>& styleSheets() const { return m_styleSheets; }
 
 protected:
-    TextTrack(ScriptExecutionContext*, TextTrackClient*, const AtomicString& kind, const AtomicString& id, const AtomicString& label, const AtomicString& language, TextTrackType);
+    TextTrack(ScriptExecutionContext*, TextTrackClient*, const AtomString& kind, const AtomString& id, const AtomString& label, const AtomString& language, TextTrackType);
 
 #if !RELEASE_LOG_DISABLED
     const char* logClassName() const override { return "TextTrack"; }
 #endif
 
