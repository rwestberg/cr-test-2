diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLock.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLock.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLock.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLock.h
@@ -24,11 +24,11 @@
 #include <wtf/Assertions.h>
 #include <wtf/Lock.h>
 #include <wtf/Noncopyable.h>
 #include <wtf/RefPtr.h>
 #include <wtf/Threading.h>
-#include <wtf/text/AtomicStringTable.h>
+#include <wtf/text/AtomStringTable.h>
 
 namespace JSC {
 
 // To make it safe to use JavaScript on multiple threads, it is
 // important to lock before doing anything that allocates a
@@ -68,13 +68,12 @@
     JS_EXPORT_PRIVATE JSLockHolder(VM*);
     JS_EXPORT_PRIVATE JSLockHolder(VM&);
     JS_EXPORT_PRIVATE JSLockHolder(ExecState*);
 
     JS_EXPORT_PRIVATE ~JSLockHolder();
-private:
-    void init();
 
+private:
     RefPtr<VM> m_vm;
 };
 
 class JSLock : public ThreadSafeRefCounted<JSLock> {
     WTF_MAKE_NONCOPYABLE(JSLock);
@@ -117,10 +116,17 @@
         intptr_t m_droppedLockCount;
         RefPtr<VM> m_vm;
         unsigned m_dropDepth;
     };
 
+    void makeWebThreadAware()
+    {
+        m_isWebThreadAware = true;
+    }
+
+    bool isWebThreadAware() const { return m_isWebThreadAware; }
+
 private:
     void lock(intptr_t lockCount);
     void unlock(intptr_t unlockCount);
 
     void didAcquireLock();
@@ -128,19 +134,20 @@
 
     unsigned dropAllLocks(DropAllLocks*);
     void grabAllLocks(DropAllLocks*, unsigned lockCount);
 
     Lock m_lock;
+    bool m_isWebThreadAware { false };
     // We cannot make m_ownerThread an optional (instead of pairing it with an explicit
     // m_hasOwnerThread) because currentThreadIsHoldingLock() may be called from a
     // different thread, and an optional is vulnerable to races.
     // See https://bugs.webkit.org/show_bug.cgi?id=169042#c6
     bool m_hasOwnerThread { false };
     RefPtr<Thread> m_ownerThread;
     intptr_t m_lockCount;
     unsigned m_lockDropDepth;
     bool m_shouldReleaseHeapAccess;
     VM* m_vm;
-    AtomicStringTable* m_entryAtomicStringTable;
+    AtomStringTable* m_entryAtomStringTable;
 };
 
 } // namespace
