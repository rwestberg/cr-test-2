diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/StructureStubInfo.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/StructureStubInfo.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/StructureStubInfo.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/StructureStubInfo.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2008, 2014-2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2008-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -62,11 +62,11 @@
 void StructureStubInfo::initGetByIdSelf(CodeBlock* codeBlock, Structure* baseObjectStructure, PropertyOffset offset)
 {
     cacheType = CacheType::GetByIdSelf;
 
     u.byIdSelf.baseObjectStructure.set(
-        *codeBlock->vm(), codeBlock, baseObjectStructure);
+        codeBlock->vm(), codeBlock, baseObjectStructure);
     u.byIdSelf.offset = offset;
 }
 
 void StructureStubInfo::initArrayLength()
 {
@@ -81,20 +81,20 @@
 void StructureStubInfo::initPutByIdReplace(CodeBlock* codeBlock, Structure* baseObjectStructure, PropertyOffset offset)
 {
     cacheType = CacheType::PutByIdReplace;
 
     u.byIdSelf.baseObjectStructure.set(
-        *codeBlock->vm(), codeBlock, baseObjectStructure);
+        codeBlock->vm(), codeBlock, baseObjectStructure);
     u.byIdSelf.offset = offset;
 }
 
 void StructureStubInfo::initInByIdSelf(CodeBlock* codeBlock, Structure* baseObjectStructure, PropertyOffset offset)
 {
     cacheType = CacheType::InByIdSelf;
 
     u.byIdSelf.baseObjectStructure.set(
-        *codeBlock->vm(), codeBlock, baseObjectStructure);
+        codeBlock->vm(), codeBlock, baseObjectStructure);
     u.byIdSelf.offset = offset;
 }
 
 void StructureStubInfo::deref()
 {
@@ -133,97 +133,101 @@
 }
 
 AccessGenerationResult StructureStubInfo::addAccessCase(
     const GCSafeConcurrentJSLocker& locker, CodeBlock* codeBlock, const Identifier& ident, std::unique_ptr<AccessCase> accessCase)
 {
-    VM& vm = *codeBlock->vm();
+    VM& vm = codeBlock->vm();
+    ASSERT(vm.heap.isDeferred());
+    AccessGenerationResult result = ([&] () -> AccessGenerationResult {
+        if (StructureStubInfoInternal::verbose)
+            dataLog("Adding access case: ", accessCase, "\n");
 
-    if (StructureStubInfoInternal::verbose)
-        dataLog("Adding access case: ", accessCase, "\n");
+        if (!accessCase)
+            return AccessGenerationResult::GaveUp;
 
-    if (!accessCase)
-        return AccessGenerationResult::GaveUp;
+        AccessGenerationResult result;
 
-    AccessGenerationResult result;
+        if (cacheType == CacheType::Stub) {
+            result = u.stub->addCase(locker, vm, codeBlock, *this, ident, WTFMove(accessCase));
 
-    if (cacheType == CacheType::Stub) {
-        result = u.stub->addCase(locker, vm, codeBlock, *this, ident, WTFMove(accessCase));
+            if (StructureStubInfoInternal::verbose)
+                dataLog("Had stub, result: ", result, "\n");
 
-        if (StructureStubInfoInternal::verbose)
-            dataLog("Had stub, result: ", result, "\n");
+            if (result.shouldResetStubAndFireWatchpoints())
+                return result;
 
-        if (result.shouldResetStubAndFireWatchpoints())
-            return result;
+            if (!result.buffered()) {
+                bufferedStructures.clear();
+                return result;
+            }
+        } else {
+            std::unique_ptr<PolymorphicAccess> access = makeUnique<PolymorphicAccess>();
 
-        if (!result.buffered()) {
-            bufferedStructures.clear();
-            return result;
-        }
-    } else {
-        std::unique_ptr<PolymorphicAccess> access = std::make_unique<PolymorphicAccess>();
+            Vector<std::unique_ptr<AccessCase>, 2> accessCases;
 
-        Vector<std::unique_ptr<AccessCase>, 2> accessCases;
+            std::unique_ptr<AccessCase> previousCase =
+                AccessCase::fromStructureStubInfo(vm, codeBlock, *this);
+            if (previousCase)
+                accessCases.append(WTFMove(previousCase));
 
-        std::unique_ptr<AccessCase> previousCase =
-            AccessCase::fromStructureStubInfo(vm, codeBlock, *this);
-        if (previousCase)
-            accessCases.append(WTFMove(previousCase));
+            accessCases.append(WTFMove(accessCase));
 
-        accessCases.append(WTFMove(accessCase));
+            result = access->addCases(locker, vm, codeBlock, *this, ident, WTFMove(accessCases));
 
-        result = access->addCases(locker, vm, codeBlock, *this, ident, WTFMove(accessCases));
+            if (StructureStubInfoInternal::verbose)
+                dataLog("Created stub, result: ", result, "\n");
 
-        if (StructureStubInfoInternal::verbose)
-            dataLog("Created stub, result: ", result, "\n");
+            if (result.shouldResetStubAndFireWatchpoints())
+                return result;
 
-        if (result.shouldResetStubAndFireWatchpoints())
-            return result;
+            if (!result.buffered()) {
+                bufferedStructures.clear();
+                return result;
+            }
+
+            cacheType = CacheType::Stub;
+            u.stub = access.release();
+        }
 
+        RELEASE_ASSERT(!result.generatedSomeCode());
+
+        // If we didn't buffer any cases then bail. If this made no changes then we'll just try again
+        // subject to cool-down.
         if (!result.buffered()) {
+            if (StructureStubInfoInternal::verbose)
+                dataLog("Didn't buffer anything, bailing.\n");
             bufferedStructures.clear();
             return result;
         }
 
-        cacheType = CacheType::Stub;
-        u.stub = access.release();
-    }
-
-    RELEASE_ASSERT(!result.generatedSomeCode());
+        // The buffering countdown tells us if we should be repatching now.
+        if (bufferingCountdown) {
+            if (StructureStubInfoInternal::verbose)
+                dataLog("Countdown is too high: ", bufferingCountdown, ".\n");
+            return result;
+        }
 
-    // If we didn't buffer any cases then bail. If this made no changes then we'll just try again
-    // subject to cool-down.
-    if (!result.buffered()) {
-        if (StructureStubInfoInternal::verbose)
-            dataLog("Didn't buffer anything, bailing.\n");
+        // Forget the buffered structures so that all future attempts to cache get fully handled by the
+        // PolymorphicAccess.
         bufferedStructures.clear();
-        return result;
-    }
 
-    // The buffering countdown tells us if we should be repatching now.
-    if (bufferingCountdown) {
-        if (StructureStubInfoInternal::verbose)
-            dataLog("Countdown is too high: ", bufferingCountdown, ".\n");
-        return result;
-    }
-
-    // Forget the buffered structures so that all future attempts to cache get fully handled by the
-    // PolymorphicAccess.
-    bufferedStructures.clear();
+        result = u.stub->regenerate(locker, vm, codeBlock, *this, ident);
 
-    result = u.stub->regenerate(locker, vm, codeBlock, *this, ident);
+        if (StructureStubInfoInternal::verbose)
+            dataLog("Regeneration result: ", result, "\n");
 
-    if (StructureStubInfoInternal::verbose)
-        dataLog("Regeneration result: ", result, "\n");
+        RELEASE_ASSERT(!result.buffered());
 
-    RELEASE_ASSERT(!result.buffered());
+        if (!result.generatedSomeCode())
+            return result;
 
-    if (!result.generatedSomeCode())
+        // If we generated some code then we don't want to attempt to repatch in the future until we
+        // gather enough cases.
+        bufferingCountdown = Options::repatchBufferingCountdown();
         return result;
-
-    // If we generated some code then we don't want to attempt to repatch in the future until we
-    // gather enough cases.
-    bufferingCountdown = Options::repatchBufferingCountdown();
+    })();
+    vm.heap.writeBarrier(codeBlock);
     return result;
 }
 
 void StructureStubInfo::reset(CodeBlock* codeBlock)
 {
@@ -266,22 +270,22 @@
     cacheType = CacheType::Unset;
 }
 
 void StructureStubInfo::visitWeakReferences(CodeBlock* codeBlock)
 {
-    VM& vm = *codeBlock->vm();
+    VM& vm = codeBlock->vm();
 
     bufferedStructures.genericFilter(
         [&] (Structure* structure) -> bool {
-            return Heap::isMarked(structure);
+            return vm.heap.isMarked(structure);
         });
 
     switch (cacheType) {
     case CacheType::GetByIdSelf:
     case CacheType::PutByIdReplace:
     case CacheType::InByIdSelf:
-        if (Heap::isMarked(u.byIdSelf.baseObjectStructure.get()))
+        if (vm.heap.isMarked(u.byIdSelf.baseObjectStructure.get()))
             return;
         break;
     case CacheType::Stub:
         if (u.stub->visitWeak(vm))
             return;
