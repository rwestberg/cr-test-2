diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDOMStorageAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDOMStorageAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDOMStorageAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDOMStorageAgent.cpp
@@ -52,50 +52,56 @@
 
 namespace WebCore {
 
 using namespace Inspector;
 
-InspectorDOMStorageAgent::InspectorDOMStorageAgent(WebAgentContext& context, InspectorPageAgent* pageAgent)
+InspectorDOMStorageAgent::InspectorDOMStorageAgent(PageAgentContext& context)
     : InspectorAgentBase("DOMStorage"_s, context)
-    , m_frontendDispatcher(std::make_unique<Inspector::DOMStorageFrontendDispatcher>(context.frontendRouter))
+    , m_frontendDispatcher(makeUnique<Inspector::DOMStorageFrontendDispatcher>(context.frontendRouter))
     , m_backendDispatcher(Inspector::DOMStorageBackendDispatcher::create(context.backendDispatcher, this))
-    , m_pageAgent(pageAgent)
+    , m_inspectedPage(context.inspectedPage)
 {
-    m_instrumentingAgents.setInspectorDOMStorageAgent(this);
 }
 
-InspectorDOMStorageAgent::~InspectorDOMStorageAgent()
-{
-    m_instrumentingAgents.setInspectorDOMStorageAgent(nullptr);
-}
+InspectorDOMStorageAgent::~InspectorDOMStorageAgent() = default;
 
 void InspectorDOMStorageAgent::didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*)
 {
 }
 
 void InspectorDOMStorageAgent::willDestroyFrontendAndBackend(Inspector::DisconnectReason)
 {
-    ErrorString unused;
-    disable(unused);
+    ErrorString ignored;
+    disable(ignored);
 }
 
-void InspectorDOMStorageAgent::enable(ErrorString&)
+void InspectorDOMStorageAgent::enable(ErrorString& errorString)
 {
-    m_enabled = true;
+    if (m_instrumentingAgents.inspectorDOMStorageAgent() == this) {
+        errorString = "DOMStorage domain already enabled"_s;
+        return;
+    }
+
+    m_instrumentingAgents.setInspectorDOMStorageAgent(this);
 }
 
-void InspectorDOMStorageAgent::disable(ErrorString&)
+void InspectorDOMStorageAgent::disable(ErrorString& errorString)
 {
-    m_enabled = false;
+    if (m_instrumentingAgents.inspectorDOMStorageAgent() != this) {
+        errorString = "DOMStorage domain already disabled"_s;
+        return;
+    }
+
+    m_instrumentingAgents.setInspectorDOMStorageAgent(nullptr);
 }
 
 void InspectorDOMStorageAgent::getDOMStorageItems(ErrorString& errorString, const JSON::Object& storageId, RefPtr<JSON::ArrayOf<JSON::ArrayOf<String>>>& items)
 {
     Frame* frame;
     RefPtr<StorageArea> storageArea = findStorageArea(errorString, storageId, frame);
     if (!storageArea) {
-        errorString = "No StorageArea for given storageId"_s;
+        errorString = "Missing storage for given storageId"_s;
         return;
     }
 
     auto storageItems = JSON::ArrayOf<JSON::ArrayOf<String>>::create();
 
@@ -115,11 +121,11 @@
 void InspectorDOMStorageAgent::setDOMStorageItem(ErrorString& errorString, const JSON::Object& storageId, const String& key, const String& value)
 {
     Frame* frame;
     RefPtr<StorageArea> storageArea = findStorageArea(errorString, storageId, frame);
     if (!storageArea) {
-        errorString = "Storage not found"_s;
+        errorString = "Missing storage for given storageId"_s;
         return;
     }
 
     bool quotaException = false;
     storageArea->setItem(frame, key, value, quotaException);
@@ -130,11 +136,11 @@
 void InspectorDOMStorageAgent::removeDOMStorageItem(ErrorString& errorString, const JSON::Object& storageId, const String& key)
 {
     Frame* frame;
     RefPtr<StorageArea> storageArea = findStorageArea(errorString, storageId, frame);
     if (!storageArea) {
-        errorString = "Storage not found"_s;
+        errorString = "Missing storage for given storageId"_s;
         return;
     }
 
     storageArea->removeItem(frame, key);
 }
@@ -145,11 +151,11 @@
     ASSERT(document);
     DOMWindow* window = document->domWindow();
     ASSERT(window);
     Ref<SecurityOrigin> securityOrigin = document->securityOrigin();
     bool isLocalStorage = window->optionalLocalStorage() == &storage;
-    return storageId(securityOrigin.ptr(), isLocalStorage)->toJSONString();
+    return InspectorDOMStorageAgent::storageId(securityOrigin.ptr(), isLocalStorage)->toJSONString();
 }
 
 RefPtr<Inspector::Protocol::DOMStorage::StorageId> InspectorDOMStorageAgent::storageId(SecurityOrigin* securityOrigin, bool isLocalStorage)
 {
     return Inspector::Protocol::DOMStorage::StorageId::create()
@@ -158,14 +164,11 @@
         .release();
 }
 
 void InspectorDOMStorageAgent::didDispatchDOMStorageEvent(const String& key, const String& oldValue, const String& newValue, StorageType storageType, SecurityOrigin* securityOrigin)
 {
-    if (!m_enabled)
-        return;
-
-    RefPtr<Inspector::Protocol::DOMStorage::StorageId> id = storageId(securityOrigin, storageType == StorageType::Local);
+    RefPtr<Inspector::Protocol::DOMStorage::StorageId> id = InspectorDOMStorageAgent::storageId(securityOrigin, storageType == StorageType::Local);
 
     if (key.isNull())
         m_frontendDispatcher->domStorageItemsCleared(id);
     else if (newValue.isNull())
         m_frontendDispatcher->domStorageItemRemoved(id, key);
@@ -176,27 +179,28 @@
 }
 
 RefPtr<StorageArea> InspectorDOMStorageAgent::findStorageArea(ErrorString& errorString, const JSON::Object& storageId, Frame*& targetFrame)
 {
     String securityOrigin;
+    if (!storageId.getString("securityOrigin"_s, securityOrigin)) {
+        errorString = "Missing securityOrigin in given storageId";
+        return nullptr;
+    }
+
     bool isLocalStorage = false;
-    bool success = storageId.getString("securityOrigin"_s, securityOrigin);
-    if (success)
-        success = storageId.getBoolean("isLocalStorage"_s, isLocalStorage);
-    if (!success) {
-        errorString = "Invalid storageId format"_s;
-        targetFrame = nullptr;
+    if (!storageId.getBoolean("isLocalStorage"_s, isLocalStorage)) {
+        errorString = "Missing isLocalStorage in given storageId";
         return nullptr;
     }
 
-    targetFrame = m_pageAgent->findFrameWithSecurityOrigin(securityOrigin);
+    targetFrame = InspectorPageAgent::findFrameWithSecurityOrigin(m_inspectedPage, securityOrigin);
     if (!targetFrame) {
-        errorString = "Frame not found for the given security origin"_s;
+        errorString = "Missing frame for given securityOrigin"_s;
         return nullptr;
     }
 
     if (!isLocalStorage)
-        return m_pageAgent->page().sessionStorage()->storageArea(targetFrame->document()->securityOrigin().data());
-    return m_pageAgent->page().storageNamespaceProvider().localStorageArea(*targetFrame->document());
+        return m_inspectedPage.sessionStorage()->storageArea(targetFrame->document()->securityOrigin().data());
+    return m_inspectedPage.storageNamespaceProvider().localStorageArea(*targetFrame->document());
 }
 
 } // namespace WebCore
