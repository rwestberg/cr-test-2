diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScopedArgumentsTable.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScopedArgumentsTable.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScopedArgumentsTable.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScopedArgumentsTable.h
@@ -59,14 +59,11 @@
     ScopedArgumentsTable* clone(VM&);
 
     uint32_t length() const { return m_length; }
     ScopedArgumentsTable* setLength(VM&, uint32_t newLength);
 
-    ScopeOffset get(uint32_t i) const
-    {
-        return const_cast<ScopedArgumentsTable*>(this)->at(i);
-    }
+    ScopeOffset get(uint32_t i) const { return at(i); }
 
     void lock()
     {
         m_locked = true;
     }
@@ -78,17 +75,17 @@
     static Structure* createStructure(VM&, JSGlobalObject*, JSValue prototype);
 
     static ptrdiff_t offsetOfLength() { return OBJECT_OFFSETOF(ScopedArgumentsTable, m_length); }
     static ptrdiff_t offsetOfArguments() { return OBJECT_OFFSETOF(ScopedArgumentsTable, m_arguments); }
 
-    typedef CagedUniquePtr<Gigacage::Primitive, ScopeOffset[]> ArgumentsPtr;
+    typedef CagedUniquePtr<Gigacage::Primitive, ScopeOffset> ArgumentsPtr;
 
 private:
-    ScopeOffset& at(uint32_t i)
+    ScopeOffset& at(uint32_t i) const
     {
         ASSERT_WITH_SECURITY_IMPLICATION(i < m_length);
-        return m_arguments[i];
+        return m_arguments.get(length())[i];
     }
 
     uint32_t m_length;
     bool m_locked; // Being locked means that there are multiple references to this object and none of them expect to see the others' modifications. This means that modifications need to make a copy first.
     ArgumentsPtr m_arguments;
