diff a/modules/javafx.web/src/main/native/Source/WebCore/html/InputMode.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/InputMode.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/InputMode.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/InputMode.cpp
@@ -28,11 +28,11 @@
 
 #include <wtf/NeverDestroyed.h>
 
 namespace WebCore {
 
-InputMode inputModeForAttributeValue(const AtomicString& value)
+InputMode inputModeForAttributeValue(const AtomString& value)
 {
     if (equalIgnoringASCIICase(value, InputModeNames::none()))
         return InputMode::None;
     if (equalIgnoringASCIICase(value, InputModeNames::text()))
         return InputMode::Text;
@@ -50,11 +50,11 @@
         return InputMode::Search;
 
     return InputMode::Unspecified;
 }
 
-const AtomicString& stringForInputMode(InputMode mode)
+const AtomString& stringForInputMode(InputMode mode)
 {
     switch (mode) {
     case InputMode::Unspecified:
         return emptyAtom();
     case InputMode::None:
@@ -78,55 +78,55 @@
     return emptyAtom();
 }
 
 namespace InputModeNames {
 
-const AtomicString& none()
+const AtomString& none()
 {
-    static NeverDestroyed<AtomicString> mode("none", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> mode("none", AtomString::ConstructFromLiteral);
     return mode;
 }
 
-const AtomicString& text()
+const AtomString& text()
 {
-    static NeverDestroyed<AtomicString> mode("text", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> mode("text", AtomString::ConstructFromLiteral);
     return mode;
 }
 
-const AtomicString& tel()
+const AtomString& tel()
 {
-    static NeverDestroyed<AtomicString> mode("tel", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> mode("tel", AtomString::ConstructFromLiteral);
     return mode;
 }
 
-const AtomicString& url()
+const AtomString& url()
 {
-    static NeverDestroyed<AtomicString> mode("url", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> mode("url", AtomString::ConstructFromLiteral);
     return mode;
 }
 
-const AtomicString& email()
+const AtomString& email()
 {
-    static NeverDestroyed<AtomicString> mode("email", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> mode("email", AtomString::ConstructFromLiteral);
     return mode;
 }
 
-const AtomicString& numeric()
+const AtomString& numeric()
 {
-    static NeverDestroyed<AtomicString> mode("numeric", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> mode("numeric", AtomString::ConstructFromLiteral);
     return mode;
 }
 
-const AtomicString& decimal()
+const AtomString& decimal()
 {
-    static NeverDestroyed<AtomicString> mode("decimal", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> mode("decimal", AtomString::ConstructFromLiteral);
     return mode;
 }
 
-const AtomicString& search()
+const AtomString& search()
 {
-    static NeverDestroyed<AtomicString> mode("search", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> mode("search", AtomString::ConstructFromLiteral);
     return mode;
 }
 
 } // namespace InputModeNames
 
