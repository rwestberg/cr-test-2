diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorNodeFinder.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorNodeFinder.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorNodeFinder.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorNodeFinder.cpp
@@ -51,17 +51,18 @@
     unsigned start = startCharFound ? 1 : 0;
     unsigned end = string.length() - (endCharFound ? 1 : 0);
     return string.substring(start, end - start);
 }
 
-InspectorNodeFinder::InspectorNodeFinder(const String& whitespaceTrimmedQuery)
-    : m_whitespaceTrimmedQuery(whitespaceTrimmedQuery)
+InspectorNodeFinder::InspectorNodeFinder(const String& query, bool caseSensitive)
+    : m_query(query)
+    , m_caseSensitive(caseSensitive)
 {
-    m_tagNameQuery = stripCharacters(whitespaceTrimmedQuery, '<', '>', m_startTagFound, m_endTagFound);
+    m_tagNameQuery = stripCharacters(query, '<', '>', m_startTagFound, m_endTagFound);
 
     bool startQuoteFound, endQuoteFound;
-    m_attributeQuery = stripCharacters(whitespaceTrimmedQuery, '"', '"', startQuoteFound, endQuoteFound);
+    m_attributeQuery = stripCharacters(query, '"', '"', startQuoteFound, endQuoteFound);
     m_exactAttributeMatch = startQuoteFound && endQuoteFound;
 }
 
 void InspectorNodeFinder::performSearch(Node* parentNode)
 {
@@ -81,11 +82,11 @@
     for (auto* node = &parentNode; node; node = NodeTraversal::next(*node, &parentNode)) {
         switch (node->nodeType()) {
         case Node::TEXT_NODE:
         case Node::COMMENT_NODE:
         case Node::CDATA_SECTION_NODE:
-            if (node->nodeValue().containsIgnoringASCIICase(m_whitespaceTrimmedQuery))
+            if (checkContains(node->nodeValue(), m_query))
                 m_results.add(node);
             break;
         case Node::ELEMENT_NODE:
             if (matchesElement(downcast<Element>(*node)))
                 m_results.add(node);
@@ -96,24 +97,54 @@
             break;
         }
     }
 }
 
+bool InspectorNodeFinder::checkEquals(const String& a, const String& b)
+{
+    if (m_caseSensitive)
+        return a == b;
+    return equalIgnoringASCIICase(a, b);
+}
+
+bool InspectorNodeFinder::checkContains(const String& a, const String& b)
+{
+    if (m_caseSensitive)
+        return a.contains(b);
+    return a.containsIgnoringASCIICase(b);
+}
+
+bool InspectorNodeFinder::checkStartsWith(const String& a, const String& b)
+{
+    if (m_caseSensitive)
+        return a.startsWith(b);
+    return a.startsWithIgnoringASCIICase(b);
+}
+
+bool InspectorNodeFinder::checkEndsWith(const String& a, const String& b)
+{
+    if (m_caseSensitive)
+        return a.endsWith(b);
+    return a.endsWithIgnoringASCIICase(b);
+}
+
 bool InspectorNodeFinder::matchesAttribute(const Attribute& attribute)
 {
-    if (attribute.localName().string().containsIgnoringASCIICase(m_whitespaceTrimmedQuery))
+    if (checkContains(attribute.localName().string(), m_query))
         return true;
-    return m_exactAttributeMatch ? attribute.value() == m_attributeQuery : attribute.value().string().containsIgnoringASCIICase(m_attributeQuery);
+
+    auto value = attribute.value().string();
+    return m_exactAttributeMatch ? checkEquals(value, m_attributeQuery) : checkContains(value, m_attributeQuery);
 }
 
 bool InspectorNodeFinder::matchesElement(const Element& element)
 {
     String nodeName = element.nodeName();
-    if ((!m_startTagFound && !m_endTagFound && nodeName.containsIgnoringASCIICase(m_tagNameQuery))
-        || (m_startTagFound && m_endTagFound && equalIgnoringASCIICase(nodeName, m_tagNameQuery))
-        || (m_startTagFound && !m_endTagFound && nodeName.startsWithIgnoringASCIICase(m_tagNameQuery))
-        || (!m_startTagFound && m_endTagFound && nodeName.endsWithIgnoringASCIICase(m_tagNameQuery)))
+    if ((!m_startTagFound && !m_endTagFound && checkContains(nodeName, m_tagNameQuery))
+        || (m_startTagFound && m_endTagFound && checkEquals(nodeName, m_tagNameQuery))
+        || (m_startTagFound && !m_endTagFound && checkStartsWith(nodeName, m_tagNameQuery))
+        || (!m_startTagFound && m_endTagFound && checkEndsWith(nodeName, m_tagNameQuery)))
         return true;
 
     if (!element.hasAttributes())
         return false;
 
@@ -125,11 +156,11 @@
     return false;
 }
 
 void InspectorNodeFinder::searchUsingXPath(Node& parentNode)
 {
-    auto evaluateResult = parentNode.document().evaluate(m_whitespaceTrimmedQuery, &parentNode, nullptr, XPathResult::ORDERED_NODE_SNAPSHOT_TYPE, nullptr);
+    auto evaluateResult = parentNode.document().evaluate(m_query, &parentNode, nullptr, XPathResult::ORDERED_NODE_SNAPSHOT_TYPE, nullptr);
     if (evaluateResult.hasException())
         return;
     auto result = evaluateResult.releaseReturnValue();
 
     auto snapshotLengthResult = result->snapshotLength();
@@ -155,11 +186,11 @@
 void InspectorNodeFinder::searchUsingCSSSelectors(Node& parentNode)
 {
     if (!is<ContainerNode>(parentNode))
         return;
 
-    auto queryResult = downcast<ContainerNode>(parentNode).querySelectorAll(m_whitespaceTrimmedQuery);
+    auto queryResult = downcast<ContainerNode>(parentNode).querySelectorAll(m_query);
     if (queryResult.hasException())
         return;
 
     auto nodeList = queryResult.releaseReturnValue();
     unsigned size = nodeList->length();
