diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StructureChain.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StructureChain.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StructureChain.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StructureChain.h
@@ -38,55 +38,29 @@
 
 class StructureChain final : public JSCell {
     friend class JIT;
 
 public:
-    typedef JSCell Base;
+    using Base = JSCell;
     static const unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
 
-    static StructureChain* create(VM& vm, JSObject* head)
-    {
-        StructureChain* chain = new (NotNull, allocateCell<StructureChain>(vm.heap)) StructureChain(vm, vm.structureChainStructure.get());
-        chain->finishCreation(vm, head);
-        return chain;
-    }
+    static StructureChain* create(VM&, JSObject*);
     WriteBarrier<Structure>* head() { return m_vector.get(); }
     static void visitChildren(JSCell*, SlotVisitor&);
 
     static Structure* createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
     {
         return Structure::create(vm, globalObject, prototype, TypeInfo(CellType, StructureFlags), info());
     }
 
     DECLARE_INFO;
 
-    static const bool needsDestruction = true;
-    static void destroy(JSCell*);
-
-protected:
-    void finishCreation(VM& vm, JSObject* head)
-    {
-        Base::finishCreation(vm);
-
-        size_t size = 0;
-        for (JSObject* current = head; current; current = current->structure(vm)->storedPrototypeObject(current))
-            ++size;
-
-        auto vector = makeUniqueArray<WriteBarrier<Structure>>(size + 1);
-
-        size_t i = 0;
-        for (JSObject* current = head; current; current = current->structure(vm)->storedPrototypeObject(current))
-            vector[i++].set(vm, this, current->structure(vm));
-
-        vm.heap.mutatorFence();
-        m_vector = WTFMove(vector);
-        vm.heap.writeBarrier(this);
-    }
-
 private:
     friend class LLIntOffsetsExtractor;
 
-    StructureChain(VM&, Structure*);
-    UniqueArray<WriteBarrier<Structure>> m_vector;
+    void finishCreation(VM&, JSObject* head);
+
+    StructureChain(VM&, Structure*, WriteBarrier<Structure>*);
+    AuxiliaryBarrier<WriteBarrier<Structure>*> m_vector;
 };
 
 } // namespace JSC
