diff a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/GPUBasedCanvasRenderingContext.h b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/GPUBasedCanvasRenderingContext.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/GPUBasedCanvasRenderingContext.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/GPUBasedCanvasRenderingContext.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -25,14 +25,18 @@
 
 #pragma once
 
 #include "ActiveDOMObject.h"
 #include "CanvasRenderingContext.h"
+#include <wtf/IsoMalloc.h>
 
 namespace WebCore {
 
+class HTMLCanvasElement;
+
 class GPUBasedCanvasRenderingContext : public CanvasRenderingContext, public ActiveDOMObject {
+    WTF_MAKE_ISO_NONALLOCATABLE(GPUBasedCanvasRenderingContext);
 public:
 
     bool isGPUBased() const override { return true; }
 
     bool isAccelerated() const override
@@ -47,15 +51,14 @@
 
     virtual void reshape(int width, int height) = 0;
     virtual void markLayerComposited() = 0;
 
 protected:
-    GPUBasedCanvasRenderingContext(CanvasBase& canvas)
-        : CanvasRenderingContext(canvas)
-        , ActiveDOMObject(canvas.scriptExecutionContext())
-    {
-    }
+    explicit GPUBasedCanvasRenderingContext(CanvasBase&);
+
+    HTMLCanvasElement* htmlCanvas() const;
+    void notifyCanvasContentChanged();
 };
 
 } // namespace WebCore
 
 SPECIALIZE_TYPE_TRAITS_CANVASRENDERINGCONTEXT(WebCore::GPUBasedCanvasRenderingContext, isGPUBased())
