diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/remote/RemoteControllableTarget.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/remote/RemoteControllableTarget.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/remote/RemoteControllableTarget.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/remote/RemoteControllableTarget.h
@@ -36,22 +36,24 @@
 
 namespace Inspector {
 
 class FrontendChannel;
 
+using TargetID = unsigned;
+
 class JS_EXPORT_PRIVATE RemoteControllableTarget {
 public:
     virtual ~RemoteControllableTarget();
 
     void init();
     void update();
 
     virtual void connect(FrontendChannel&, bool isAutomaticConnection = false, bool immediatelyPause = false) = 0;
     virtual void disconnect(FrontendChannel&) = 0;
 
-    unsigned targetIdentifier() const { return m_identifier; }
-    void setTargetIdentifier(unsigned identifier) { m_identifier = identifier; }
+    TargetID targetIdentifier() const { return m_identifier; }
+    void setTargetIdentifier(TargetID identifier) { m_identifier = identifier; }
 
     enum class Type { JavaScript, ServiceWorker, Web, Automation };
     virtual Type type() const = 0;
     virtual bool remoteControlAllowed() const = 0;
     virtual void dispatchMessageFromRemote(const String& message) = 0;
@@ -60,11 +62,11 @@
     // The dispatch block will be scheduled on a global run loop if null is returned.
     virtual CFRunLoopRef targetRunLoop() const { return nullptr; }
 #endif
 
 private:
-    unsigned m_identifier { 0 };
+    TargetID m_identifier { 0 };
 };
 
 } // namespace Inspector
 
 #define SPECIALIZE_TYPE_TRAITS_CONTROLLABLE_TARGET(ToClassName, ToClassType) \
