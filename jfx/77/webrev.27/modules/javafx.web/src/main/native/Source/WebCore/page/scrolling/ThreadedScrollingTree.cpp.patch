diff a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ThreadedScrollingTree.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ThreadedScrollingTree.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ThreadedScrollingTree.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ThreadedScrollingTree.cpp
@@ -29,10 +29,11 @@
 #if ENABLE(ASYNC_SCROLLING)
 
 #include "AsyncScrollingCoordinator.h"
 #include "PlatformWheelEvent.h"
 #include "ScrollingThread.h"
+#include "ScrollingTreeFrameScrollingNode.h"
 #include "ScrollingTreeNode.h"
 #include "ScrollingTreeScrollingNode.h"
 #include <wtf/RunLoop.h>
 
 namespace WebCore {
@@ -86,22 +87,33 @@
 
 void ThreadedScrollingTree::commitTreeState(std::unique_ptr<ScrollingStateTree> scrollingStateTree)
 {
     ASSERT(ScrollingThread::isCurrentThread());
     ScrollingTree::commitTreeState(WTFMove(scrollingStateTree));
+
+    decrementPendingCommitCount();
 }
 
-void ThreadedScrollingTree::scrollingTreeNodeDidScroll(ScrollingNodeID nodeID, const FloatPoint& scrollPosition, const Optional<FloatPoint>& layoutViewportOrigin, ScrollingLayerPositionAction scrollingLayerPositionAction)
+void ThreadedScrollingTree::scrollingTreeNodeDidScroll(ScrollingTreeScrollingNode& node, ScrollingLayerPositionAction scrollingLayerPositionAction)
 {
     if (!m_scrollingCoordinator)
         return;
 
-    if (nodeID == rootNode()->scrollingNodeID())
+    auto scrollPosition = node.currentScrollPosition();
+
+    if (node.isRootNode())
         setMainFrameScrollPosition(scrollPosition);
 
-    RunLoop::main().dispatch([scrollingCoordinator = m_scrollingCoordinator, nodeID, scrollPosition, layoutViewportOrigin, localIsHandlingProgrammaticScroll = isHandlingProgrammaticScroll(), scrollingLayerPositionAction] {
-        scrollingCoordinator->scheduleUpdateScrollPositionAfterAsyncScroll(nodeID, scrollPosition, layoutViewportOrigin, localIsHandlingProgrammaticScroll, scrollingLayerPositionAction);
+    if (isHandlingProgrammaticScroll())
+        return;
+
+    Optional<FloatPoint> layoutViewportOrigin;
+    if (is<ScrollingTreeFrameScrollingNode>(node))
+        layoutViewportOrigin = downcast<ScrollingTreeFrameScrollingNode>(node).layoutViewport().location();
+
+    RunLoop::main().dispatch([scrollingCoordinator = m_scrollingCoordinator, nodeID = node.scrollingNodeID(), scrollPosition, layoutViewportOrigin, scrollingLayerPositionAction] {
+        scrollingCoordinator->scheduleUpdateScrollPositionAfterAsyncScroll(nodeID, scrollPosition, layoutViewportOrigin, scrollingLayerPositionAction);
     });
 }
 
 void ThreadedScrollingTree::reportSynchronousScrollingReasonsChanged(MonotonicTime timestamp, SynchronousScrollingReasons reasons)
 {
@@ -115,10 +127,39 @@
     RunLoop::main().dispatch([scrollingCoordinator = m_scrollingCoordinator, timestamp, unfilledArea] {
         scrollingCoordinator->reportExposedUnfilledArea(timestamp, unfilledArea);
     });
 }
 
+void ThreadedScrollingTree::incrementPendingCommitCount()
+{
+    LockHolder commitLocker(m_pendingCommitCountMutex);
+    ++m_pendingCommitCount;
+}
+
+void ThreadedScrollingTree::decrementPendingCommitCount()
+{
+    LockHolder commitLocker(m_pendingCommitCountMutex);
+    ASSERT(m_pendingCommitCount > 0);
+    if (!--m_pendingCommitCount)
+        m_commitCondition.notifyOne();
+}
+
+void ThreadedScrollingTree::waitForPendingCommits()
+{
+    ASSERT(isMainThread());
+
+    LockHolder commitLocker(m_pendingCommitCountMutex);
+    while (m_pendingCommitCount)
+        m_commitCondition.wait(m_pendingCommitCountMutex);
+}
+
+void ThreadedScrollingTree::applyLayerPositions()
+{
+    waitForPendingCommits();
+    ScrollingTree::applyLayerPositions();
+}
+
 #if PLATFORM(COCOA)
 void ThreadedScrollingTree::currentSnapPointIndicesDidChange(ScrollingNodeID nodeID, unsigned horizontal, unsigned vertical)
 {
     if (!m_scrollingCoordinator)
         return;
