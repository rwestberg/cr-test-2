diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/cocoa/FileSystemCocoa.mm b/modules/javafx.web/src/main/native/Source/WTF/wtf/cocoa/FileSystemCocoa.mm
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/cocoa/FileSystemCocoa.mm
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/cocoa/FileSystemCocoa.mm
@@ -27,10 +27,24 @@
  */
 
 #import "config.h"
 #import <wtf/FileSystem.h>
 
+#include <wtf/SoftLinking.h>
+
+typedef struct _BOMCopier* BOMCopier;
+
+SOFT_LINK_PRIVATE_FRAMEWORK(Bom)
+SOFT_LINK(Bom, BOMCopierNew, BOMCopier, (), ())
+SOFT_LINK(Bom, BOMCopierFree, void, (BOMCopier copier), (copier))
+SOFT_LINK(Bom, BOMCopierCopyWithOptions, int, (BOMCopier copier, const char* fromObj, const char* toObj, CFDictionaryRef options), (copier, fromObj, toObj, options))
+
+#define kBOMCopierOptionCreatePKZipKey CFSTR("createPKZip")
+#define kBOMCopierOptionSequesterResourcesKey CFSTR("sequesterResources")
+#define kBOMCopierOptionKeepParentKey CFSTR("keepParent")
+#define kBOMCopierOptionCopyResourcesKey CFSTR("copyResources")
+
 @interface WTFWebFileManagerDelegate : NSObject <NSFileManagerDelegate>
 @end
 
 @implementation WTFWebFileManagerDelegate
 
@@ -46,10 +60,36 @@
 
 namespace WTF {
 
 namespace FileSystemImpl {
 
+String createTemporaryZipArchive(const String& path)
+{
+    String temporaryFile;
+    
+    RetainPtr<NSFileCoordinator> coordinator = adoptNS([[NSFileCoordinator alloc] initWithFilePresenter:nil]);
+    [coordinator coordinateReadingItemAtURL:[NSURL fileURLWithPath:path] options:NSFileCoordinatorReadingWithoutChanges error:nullptr byAccessor:[&](NSURL *newURL) mutable {
+        CString archivePath([NSTemporaryDirectory() stringByAppendingPathComponent:@"WebKitGeneratedFileXXXXXX"].fileSystemRepresentation);
+        if (mkstemp(archivePath.mutableData()) == -1)
+            return;
+        
+        NSDictionary *options = @{
+            (__bridge id)kBOMCopierOptionCreatePKZipKey : @YES,
+            (__bridge id)kBOMCopierOptionSequesterResourcesKey : @YES,
+            (__bridge id)kBOMCopierOptionKeepParentKey : @YES,
+            (__bridge id)kBOMCopierOptionCopyResourcesKey : @YES,
+        };
+        
+        BOMCopier copier = BOMCopierNew();
+        if (!BOMCopierCopyWithOptions(copier, newURL.path.fileSystemRepresentation, archivePath.data(), (__bridge CFDictionaryRef)options))
+            temporaryFile = String::fromUTF8(archivePath);
+        BOMCopierFree(copier);
+    }];
+    
+    return temporaryFile;
+}
+
 String homeDirectoryPath()
 {
     return NSHomeDirectory();
 }
 
@@ -137,7 +177,35 @@
 bool deleteNonEmptyDirectory(const String& path)
 {
     return [[NSFileManager defaultManager] removeItemAtPath:path error:nil];
 }
 
+#if PLATFORM(IOS_FAMILY)
+bool isSafeToUseMemoryMapForPath(const String& path)
+{
+    NSError *error = nil;
+    NSDictionary<NSFileAttributeKey, id> *attributes = [[NSFileManager defaultManager] attributesOfItemAtPath:path error:&error];
+    if (error) {
+        LOG_ERROR("Unable to get path protection class");
+        return false;
+    }
+    if ([[attributes objectForKey:NSFileProtectionKey] isEqualToString:NSFileProtectionComplete]) {
+        LOG_ERROR("Path protection class is NSFileProtectionComplete, so it is not safe to use memory map");
+        return false;
+    }
+    return true;
+}
+
+void makeSafeToUseMemoryMapForPath(const String& path)
+{
+    if (isSafeToUseMemoryMapForPath(path))
+        return;
+    
+    NSError *error = nil;
+    BOOL success = [[NSFileManager defaultManager] setAttributes:@{ NSFileProtectionKey: NSFileProtectionCompleteUnlessOpen } ofItemAtPath:path error:&error];
+    ASSERT(!error);
+    ASSERT_UNUSED(success, success);
+}
+#endif
+
 } // namespace FileSystemImpl
 } // namespace WTF
