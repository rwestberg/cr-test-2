diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/DataTransfer.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/DataTransfer.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/DataTransfer.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/DataTransfer.h
@@ -24,10 +24,11 @@
 #pragma once
 
 #include "CachedResourceHandle.h"
 #include "DragActions.h"
 #include "DragImage.h"
+#include <pal/SessionID.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 class CachedImage;
@@ -47,12 +48,12 @@
 #endif
 public:
     // https://html.spec.whatwg.org/multipage/dnd.html#drag-data-store-mode
     enum class StoreMode { Invalid, ReadWrite, Readonly, Protected };
 
-    static Ref<DataTransfer> createForCopyAndPaste(Document&, StoreMode, std::unique_ptr<Pasteboard>&&);
-    static Ref<DataTransfer> createForInputEvent(const String& plainText, const String& htmlText);
+    static Ref<DataTransfer> createForCopyAndPaste(const Document&, StoreMode, std::unique_ptr<Pasteboard>&&);
+    static Ref<DataTransfer> createForInputEvent(const Document&, const String& plainText, const String& htmlText);
 
     WEBCORE_EXPORT ~DataTransfer();
 
     String dropEffect() const;
     void setDropEffect(const String&);
@@ -60,11 +61,10 @@
     String effectAllowed() const;
     void setEffectAllowed(const String&);
 
     DataTransferItemList& items();
     Vector<String> types() const;
-
     Vector<String> typesForItemList() const;
 
     FileList& files() const;
 
     void clearData(const String& type = String());
@@ -88,14 +88,14 @@
 
     Pasteboard& pasteboard() { return *m_pasteboard; }
     void commitToPasteboard(Pasteboard&);
 
 #if ENABLE(DRAG_SUPPORT)
-    static Ref<DataTransfer> createForDrag();
-    static Ref<DataTransfer> createForDragStartEvent(Document&);
-    static Ref<DataTransfer> createForDrop(Document&, std::unique_ptr<Pasteboard>&&, DragOperation, bool draggingFiles);
-    static Ref<DataTransfer> createForUpdatingDropTarget(Document&, std::unique_ptr<Pasteboard>&&, DragOperation, bool draggingFiles);
+    static Ref<DataTransfer> createForDrag(const Document&);
+    static Ref<DataTransfer> createForDragStartEvent(const Document&);
+    static Ref<DataTransfer> createForDrop(const Document&, std::unique_ptr<Pasteboard>&&, DragOperation, bool draggingFiles);
+    static Ref<DataTransfer> createForUpdatingDropTarget(const Document&, std::unique_ptr<Pasteboard>&&, DragOperation, bool draggingFiles);
 
     bool dropEffectIsUninitialized() const { return m_dropEffect == "uninitialized"; }
 
     DragOperation sourceOperation() const;
     DragOperation destinationOperation() const;
@@ -119,11 +119,11 @@
     void setStoreMode(StoreMode mode) { m_storeMode = mode; }
 #endif
 
 private:
     enum class Type { CopyAndPaste, DragAndDropData, DragAndDropFiles, InputEvent };
-    DataTransfer(StoreMode, std::unique_ptr<Pasteboard>, Type = Type::CopyAndPaste);
+    DataTransfer(const Document&, StoreMode, std::unique_ptr<Pasteboard>, Type = Type::CopyAndPaste);
 
 #if ENABLE(DRAG_SUPPORT)
     bool forDrag() const { return m_type == Type::DragAndDropData || m_type == Type::DragAndDropFiles; }
     bool forFileDrag() const { return m_type == Type::DragAndDropFiles; }
 #else
@@ -136,10 +136,11 @@
 
     enum class AddFilesType { No, Yes };
     Vector<String> types(AddFilesType) const;
     Vector<Ref<File>> filesFromPasteboardAndItemList() const;
 
+    PAL::SessionID m_sessionID;
     String m_originIdentifier;
     StoreMode m_storeMode;
     std::unique_ptr<Pasteboard> m_pasteboard;
     std::unique_ptr<DataTransferItemList> m_itemList;
 
