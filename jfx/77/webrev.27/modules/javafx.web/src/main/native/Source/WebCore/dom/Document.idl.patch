diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/Document.idl b/modules/javafx.web/src/main/native/Source/WebCore/dom/Document.idl
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/Document.idl
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/Document.idl
@@ -24,14 +24,11 @@
 #endif
 #if defined(ENABLE_WEBGL2) && ENABLE_WEBGL2
     WebGL2RenderingContext or
 #endif
 #if defined(ENABLE_WEBGPU) && ENABLE_WEBGPU
-    WebGPURenderingContext or
-#endif
-#if defined(ENABLE_WEBMETAL) && ENABLE_WEBMETAL
-    WebMetalRenderingContext or
+    GPUCanvasContext or
 #endif
     ImageBitmapRenderingContext or 
     CanvasRenderingContext2D) RenderingContext;
 
 [
@@ -101,11 +98,11 @@
     readonly attribute HTMLCollection embeds; // Should be [SameObject].
     readonly attribute HTMLCollection plugins; // Should be [SameObject].
     readonly attribute HTMLCollection links; // Should be [SameObject].
     readonly attribute HTMLCollection forms; // Should be [SameObject].
     readonly attribute HTMLCollection scripts; // Should be [SameObject].
-    NodeList getElementsByName([AtomicString] DOMString elementName);
+    NodeList getElementsByName([AtomString] DOMString elementName);
     readonly attribute HTMLScriptElement? currentScript; // FIXME: Should return a HTMLOrSVGScriptElement.
 
     // dynamic markup insertion
     // FIXME: The HTML spec says this should consult the "responsible document". We should ensure
     // that the caller document matches those semantics. It is possible we should replace it with
@@ -141,22 +138,10 @@
     // XPath extensions (https://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathEvaluator).
     [MayThrowException] XPathExpression createExpression(optional DOMString expression = "undefined", optional XPathNSResolver? resolver); // FIXME: Using "undefined" as default parameter value is wrong.
     XPathNSResolver createNSResolver(Node? nodeResolver);
     [MayThrowException] XPathResult evaluate(optional DOMString expression = "undefined", optional Node? contextNode, optional XPathNSResolver? resolver, optional unsigned short type = 0, optional XPathResult? inResult); // FIXME: Using "undefined" as default parameter value is wrong.
 
-    // Extensions from FullScreen API (https://fullscreen.spec.whatwg.org/#api).
-    // FIXME: Should probably be unprefixed.
-    [Conditional=FULLSCREEN_API, EnabledBySetting=FullScreen] readonly attribute boolean webkitFullscreenEnabled;
-    [Conditional=FULLSCREEN_API, EnabledBySetting=FullScreen, ImplementedAs=webkitFullscreenElementForBindings] readonly attribute Element? webkitFullscreenElement;
-    [Conditional=FULLSCREEN_API, EnabledBySetting=FullScreen] void webkitExitFullscreen();
-    [Conditional=FULLSCREEN_API, EnabledBySetting=FullScreen] readonly attribute boolean webkitIsFullScreen; // Mozilla version.
-    [Conditional=FULLSCREEN_API, EnabledBySetting=FullScreen] readonly attribute boolean webkitFullScreenKeyboardInputAllowed; // Mozilla version.
-    [Conditional=FULLSCREEN_API, EnabledBySetting=FullScreen, ImplementedAs=webkitCurrentFullScreenElementForBindings] readonly attribute Element webkitCurrentFullScreenElement; // Mozilla version.
-    [Conditional=FULLSCREEN_API, EnabledBySetting=FullScreen] void webkitCancelFullScreen(); // Mozilla version.
-    [NotEnumerable, Conditional=FULLSCREEN_API, EnabledBySetting=FullScreen] attribute EventHandler onwebkitfullscreenchange;
-    [NotEnumerable, Conditional=FULLSCREEN_API, EnabledBySetting=FullScreen] attribute EventHandler onwebkitfullscreenerror;
-
     // Extensions from Pointer Lock API (https://www.w3.org/TR/pointerlock/#extensions-to-the-document-interface).
     [NotEnumerable, Conditional=POINTER_LOCK] attribute EventHandler onpointerlockchange; // FIXME: Should be enumerable.
     [NotEnumerable, Conditional=POINTER_LOCK] attribute EventHandler onpointerlockerror; // FIXME: Should be enumerable.
     [Conditional=POINTER_LOCK] void exitPointerLock();
 
@@ -186,14 +171,10 @@
     Range caretRangeFromPoint(optional long x = 0, optional long y = 0);
 
     // FIXME: This is not standard and has been dropped from Blink already.
     RenderingContext? getCSSCanvasContext(DOMString contextId, DOMString name, long width, long height);
 
-    // Non standard, to bring up with standards working group.
-    [EnabledBySetting=StorageAccessAPI] Promise<bool> hasStorageAccess();
-    [EnabledBySetting=StorageAccessAPI] Promise<void> requestStorageAccess();
-
     // Obsolete features from https://html.spec.whatwg.org/multipage/obsolete.html
 
     [CEReactions] attribute [TreatNullAs=EmptyString] DOMString fgColor;
     [CEReactions, ImplementedAs=linkColorForBindings] attribute [TreatNullAs=EmptyString] DOMString linkColor;
     [CEReactions] attribute [TreatNullAs=EmptyString] DOMString vlinkColor;
