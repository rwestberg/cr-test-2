diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorAuditAgent.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorAuditAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorAuditAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorAuditAgent.cpp
@@ -46,10 +46,12 @@
     , m_injectedScriptManager(context.injectedScriptManager)
     , m_scriptDebugServer(context.environment.scriptDebugServer())
 {
 }
 
+InspectorAuditAgent::~InspectorAuditAgent() = default;
+
 void InspectorAuditAgent::didCreateFrontendAndBackend(FrontendRouter*, BackendDispatcher*)
 {
 }
 
 void InspectorAuditAgent::willDestroyFrontendAndBackend(DisconnectReason)
@@ -57,21 +59,21 @@
 }
 
 void InspectorAuditAgent::setup(ErrorString& errorString, const int* executionContextId)
 {
     if (hasActiveAudit()) {
-        errorString = "Must call teardown before calling setup again."_s;
+        errorString = "Must call teardown before calling setup again"_s;
         return;
     }
 
     InjectedScript injectedScript = injectedScriptForEval(errorString, executionContextId);
     if (injectedScript.hasNoValue())
         return;
 
     JSC::ExecState* execState = injectedScript.scriptState();
     if (!execState) {
-        errorString = "Missing execution state for injected script."_s;
+        errorString = "Missing execution state of injected script for given executionContextId"_s;
         return;
     }
 
     VM& vm = execState->vm();
 
@@ -116,11 +118,11 @@
 }
 
 void InspectorAuditAgent::teardown(ErrorString& errorString)
 {
     if (!hasActiveAudit()) {
-        errorString = "Must call setup before calling teardown."_s;
+        errorString = "Must call setup before calling teardown"_s;
         return;
     }
 
     m_injectedWebInspectorAuditValue.clear();
 }
@@ -128,6 +130,18 @@
 bool InspectorAuditAgent::hasActiveAudit() const
 {
     return !!m_injectedWebInspectorAuditValue;
 }
 
+void InspectorAuditAgent::populateAuditObject(JSC::ExecState* execState, JSC::Strong<JSC::JSObject>& auditObject)
+{
+    ASSERT(execState);
+    if (!execState)
+        return;
+
+    JSC::VM& vm = execState->vm();
+    JSC::JSLockHolder lock(vm);
+
+    auditObject->putDirect(vm, JSC::Identifier::fromString(vm, "Version"), JSC::JSValue(Inspector::Protocol::Audit::VERSION));
+}
+
 } // namespace Inspector
