diff a/modules/javafx.web/src/main/native/Source/WebCore/animation/DocumentTimeline.cpp b/modules/javafx.web/src/main/native/Source/WebCore/animation/DocumentTimeline.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/animation/DocumentTimeline.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/animation/DocumentTimeline.cpp
@@ -31,11 +31,10 @@
 #include "CSSPropertyAnimation.h"
 #include "CSSTransition.h"
 #include "DOMWindow.h"
 #include "DeclarativeAnimation.h"
 #include "Document.h"
-#include "DocumentAnimationScheduler.h"
 #include "GraphicsLayer.h"
 #include "KeyframeEffect.h"
 #include "Microtasks.h"
 #include "Node.h"
 #include "Page.h"
@@ -59,14 +58,11 @@
     return adoptRef(*new DocumentTimeline(document, Seconds::fromMilliseconds(options.originTime)));
 }
 
 DocumentTimeline::DocumentTimeline(Document& document, Seconds originTime)
     : AnimationTimeline()
-#if !USE(REQUEST_ANIMATION_FRAME_DISPLAY_MONITOR)
-    , m_animationResolutionTimer(*this, &DocumentTimeline::animationResolutionTimerFired)
-#endif
-    , m_tickScheduleTimer(*this, &DocumentTimeline::scheduleAnimationResolutionIfNeeded)
+    , m_tickScheduleTimer(*this, &DocumentTimeline::scheduleAnimationResolution)
     , m_document(&document)
     , m_originTime(originTime)
 {
     if (m_document && m_document->page() && !m_document->page()->isVisible())
         suspendAnimations();
@@ -130,23 +126,23 @@
     Vector<RefPtr<WebAnimation>> cssAnimations;
     Vector<RefPtr<WebAnimation>> webAnimations;
 
     // First, let's get all qualifying animations in their right group.
     for (const auto& animation : m_allAnimations) {
-        if (!animation->isRelevant() || animation->timeline() != this || !is<KeyframeEffect>(animation->effect()))
+        if (!animation || !animation->isRelevant() || animation->timeline() != this || !is<KeyframeEffect>(animation->effect()))
             continue;
 
         auto* target = downcast<KeyframeEffect>(animation->effect())->target();
         if (!target || !target->isDescendantOf(*m_document))
             continue;
 
-        if (is<CSSTransition>(animation) && downcast<CSSTransition>(animation)->owningElement())
-            cssTransitions.append(animation);
-        else if (is<CSSAnimation>(animation) && downcast<CSSAnimation>(animation)->owningElement())
-            cssAnimations.append(animation);
+        if (is<CSSTransition>(animation.get()) && downcast<CSSTransition>(animation.get())->owningElement())
+            cssTransitions.append(animation.get());
+        else if (is<CSSAnimation>(animation.get()) && downcast<CSSAnimation>(animation.get())->owningElement())
+            cssAnimations.append(animation.get());
         else
-            webAnimations.append(animation);
+            webAnimations.append(animation.get());
     }
 
     // Now sort CSS Transitions by their composite order.
     std::sort(cssTransitions.begin(), cssTransitions.end(), [](auto& lhs, auto& rhs) {
         // https://drafts.csswg.org/css-transitions-2/#animation-composite-order
@@ -192,11 +188,11 @@
     return animations;
 }
 
 void DocumentTimeline::updateThrottlingState()
 {
-    scheduleAnimationResolutionIfNeeded();
+    scheduleAnimationResolution();
 }
 
 Seconds DocumentTimeline::animationInterval() const
 {
     if (!m_document || !m_document->page())
@@ -208,11 +204,11 @@
 {
     if (animationsAreSuspended())
         return;
 
     if (!m_cachedCurrentTime)
-        m_cachedCurrentTime = liveCurrentTime();
+        m_cachedCurrentTime = Seconds(liveCurrentTime());
 
     for (const auto& animation : m_animations)
         animation->setSuspended(true);
 
     m_isSuspended = true;
@@ -232,11 +228,11 @@
     m_isSuspended = false;
 
     for (const auto& animation : m_animations)
         animation->setSuspended(false);
 
-    scheduleAnimationResolutionIfNeeded();
+    scheduleAnimationResolution();
 }
 
 bool DocumentTimeline::animationsAreSuspended()
 {
     return m_isSuspended;
@@ -250,62 +246,36 @@
             ++count;
     }
     return count;
 }
 
-Seconds DocumentTimeline::liveCurrentTime() const
+DOMHighResTimeStamp DocumentTimeline::liveCurrentTime() const
 {
-#if USE(REQUEST_ANIMATION_FRAME_DISPLAY_MONITOR)
-    return m_document->animationScheduler().lastTimestamp();
-#else
-    return Seconds(m_document->domWindow()->nowTimestamp());
-#endif
+    return m_document->domWindow()->nowTimestamp();
 }
 
 Optional<Seconds> DocumentTimeline::currentTime()
 {
     if (!m_document || !m_document->domWindow())
         return AnimationTimeline::currentTime();
 
-    if (auto* mainDocumentTimeline = m_document->existingTimeline()) {
-        if (mainDocumentTimeline != this) {
-            if (auto mainDocumentTimelineCurrentTime = mainDocumentTimeline->currentTime())
-                return mainDocumentTimelineCurrentTime.value() - m_originTime;
-            return WTF::nullopt;
-        }
+    auto& mainDocumentTimeline = m_document->timeline();
+    if (&mainDocumentTimeline != this) {
+        if (auto mainDocumentTimelineCurrentTime = mainDocumentTimeline.currentTime())
+            return *mainDocumentTimelineCurrentTime - m_originTime;
+        return WTF::nullopt;
     }
 
-    auto currentTime = liveCurrentTime();
-
-#if USE(REQUEST_ANIMATION_FRAME_DISPLAY_MONITOR)
-    // If we're in the middle of firing a frame, either due to a requestAnimationFrame callback
-    // or scheduling an animation update, we want to ensure we use the same time we're using as
-    // the timestamp for requestAnimationFrame() callbacks.
-    if (m_document->animationScheduler().isFiring())
-        cacheCurrentTime(currentTime);
-#endif
-
-    if (!m_cachedCurrentTime) {
-#if USE(REQUEST_ANIMATION_FRAME_DISPLAY_MONITOR)
-        // If we're not in the middle of firing a frame, let's make our best guess at what the currentTime should
-        // be since the last time a frame fired by increment of our update interval. This way code using something
-        // like setTimeout() or handling events will get a time that's only updating at around 60fps, or less if
-        // we're throttled.
-        auto lastAnimationSchedulerTimestamp = currentTime;
-        auto delta = Seconds(m_document->domWindow()->nowTimestamp()) - lastAnimationSchedulerTimestamp;
-        int frames = std::floor(delta.seconds() / animationInterval().seconds());
-        cacheCurrentTime(lastAnimationSchedulerTimestamp + Seconds(frames * animationInterval().seconds()));
-#else
-        cacheCurrentTime(currentTime);
-#endif
-    }
+    if (!m_cachedCurrentTime)
+        cacheCurrentTime(liveCurrentTime());
+
     return m_cachedCurrentTime.value() - m_originTime;
 }
 
-void DocumentTimeline::cacheCurrentTime(Seconds newCurrentTime)
+void DocumentTimeline::cacheCurrentTime(DOMHighResTimeStamp newCurrentTime)
 {
-    m_cachedCurrentTime = newCurrentTime;
+    m_cachedCurrentTime = Seconds(newCurrentTime);
     // We want to be sure to keep this time cached until we've both finished running JS and finished updating
     // animations, so we schedule the invalidation task and register a whenIdle callback on the VM, which will
     // fire syncronously if no JS is running.
     m_waitingOnVMIdle = true;
     if (!m_currentTimeClearingTaskQueue.hasPendingTasks())
@@ -324,20 +294,14 @@
     // JS frame or throughout updating animations in WebCore.
     if (!m_isSuspended && !m_waitingOnVMIdle && !m_currentTimeClearingTaskQueue.hasPendingTasks())
         m_cachedCurrentTime = WTF::nullopt;
 }
 
-void DocumentTimeline::scheduleAnimationResolutionIfNeeded()
-{
-    if (!m_isUpdatingAnimations && !m_isSuspended && !m_animations.isEmpty())
-        scheduleAnimationResolution();
-}
-
 void DocumentTimeline::animationTimingDidChange(WebAnimation& animation)
 {
     AnimationTimeline::animationTimingDidChange(animation);
-    scheduleAnimationResolutionIfNeeded();
+    scheduleAnimationResolution();
 }
 
 void DocumentTimeline::removeAnimation(WebAnimation& animation)
 {
     AnimationTimeline::removeAnimation(animation);
@@ -346,48 +310,48 @@
         unscheduleAnimationResolution();
 }
 
 void DocumentTimeline::scheduleAnimationResolution()
 {
-#if USE(REQUEST_ANIMATION_FRAME_DISPLAY_MONITOR)
-    m_document->animationScheduler().scheduleWebAnimationsResolution();
-#else
-    // FIXME: We need to use the same logic as ScriptedAnimationController here,
-    // which will be addressed by the refactor tracked by webkit.org/b/179293.
-    m_animationResolutionTimer.startOneShot(animationInterval());
-#endif
+    if (m_isSuspended || m_animations.isEmpty() || m_animationResolutionScheduled)
+        return;
+
+    if (!m_document || !m_document->page())
+        return;
+
+    m_document->page()->renderingUpdateScheduler().scheduleTimedRenderingUpdate();
+    m_animationResolutionScheduled = true;
 }
 
 void DocumentTimeline::unscheduleAnimationResolution()
 {
     m_tickScheduleTimer.stop();
-#if USE(REQUEST_ANIMATION_FRAME_DISPLAY_MONITOR)
-    m_document->animationScheduler().unscheduleWebAnimationsResolution();
-#else
-    // FIXME: We need to use the same logic as ScriptedAnimationController here,
-    // which will be addressed by the refactor tracked by webkit.org/b/179293.
-    m_animationResolutionTimer.stop();
-#endif
-}
-
-#if USE(REQUEST_ANIMATION_FRAME_DISPLAY_MONITOR)
-void DocumentTimeline::documentAnimationSchedulerDidFire()
-#else
-void DocumentTimeline::animationResolutionTimerFired()
-#endif
-{
-    updateAnimationsAndSendEvents();
+    m_animationResolutionScheduled = false;
+}
+
+void DocumentTimeline::updateAnimationsAndSendEvents(DOMHighResTimeStamp timestamp)
+{
+    // We need to freeze the current time even if no animation is running.
+    // document.timeline.currentTime may be called from a rAF callback and
+    // it has to match the rAF timestamp.
+    if (!m_isSuspended)
+        cacheCurrentTime(timestamp);
+
+    if (m_isSuspended || m_animations.isEmpty() || !m_animationResolutionScheduled)
+        return;
+
+    internalUpdateAnimationsAndSendEvents();
     applyPendingAcceleratedAnimations();
+
+    m_animationResolutionScheduled = false;
     scheduleNextTick();
 }
 
-void DocumentTimeline::updateAnimationsAndSendEvents()
+void DocumentTimeline::internalUpdateAnimationsAndSendEvents()
 {
     m_numberOfAnimationTimelineInvalidationsForTesting++;
 
-    m_isUpdatingAnimations = true;
-
     // https://drafts.csswg.org/web-animations/#update-animations-and-send-events
 
     // 1. Update the current time of all timelines associated with doc passing now as the timestamp.
 
     Vector<RefPtr<WebAnimation>> animationsToRemove;
@@ -446,12 +410,10 @@
     // Now that animations that needed removal have been removed, let's update the list of completed transitions.
     // This needs to happen after dealing with the list of animations to remove as the animation may have been
     // removed from the list of completed transitions otherwise.
     for (auto& completedTransition : completedTransitions)
         transitionDidComplete(completedTransition);
-
-    m_isUpdatingAnimations = false;
 }
 
 void DocumentTimeline::transitionDidComplete(RefPtr<CSSTransition> transition)
 {
     ASSERT(transition);
@@ -471,21 +433,21 @@
     if (m_animations.isEmpty())
         return;
 
     for (const auto& animation : m_animations) {
         if (!animation->isRunningAccelerated()) {
-            scheduleAnimationResolutionIfNeeded();
+            scheduleAnimationResolution();
             return;
         }
     }
 
     Seconds scheduleDelay = Seconds::infinity();
 
     for (const auto& animation : m_animations) {
         auto animationTimeToNextRequiredTick = animation->timeToNextTick();
         if (animationTimeToNextRequiredTick < animationInterval()) {
-            scheduleAnimationResolutionIfNeeded();
+            scheduleAnimationResolution();
             return;
         }
         scheduleDelay = std::min(scheduleDelay, animationTimeToNextRequiredTick);
     }
 
@@ -591,22 +553,24 @@
 }
 
 void DocumentTimeline::updateListOfElementsWithRunningAcceleratedAnimationsForElement(Element& element)
 {
     auto animations = animationsForElement(element);
-    bool runningAnimationsForElementAreAllAccelerated = !animations.isEmpty();
+
+    if (animations.isEmpty()) {
+        m_elementsWithRunningAcceleratedAnimations.remove(&element);
+        return;
+    }
+
     for (const auto& animation : animations) {
         if (!animation->isRunningAccelerated()) {
-            runningAnimationsForElementAreAllAccelerated = false;
-            break;
+            m_elementsWithRunningAcceleratedAnimations.remove(&element);
+            return;
         }
     }
 
-    if (runningAnimationsForElementAreAllAccelerated)
-        m_elementsWithRunningAcceleratedAnimations.add(&element);
-    else
-        m_elementsWithRunningAcceleratedAnimations.remove(&element);
+    m_elementsWithRunningAcceleratedAnimations.add(&element);
 }
 
 void DocumentTimeline::applyPendingAcceleratedAnimations()
 {
     auto acceleratedAnimationsPendingRunningStateChange = m_acceleratedAnimationsPendingRunningStateChange;
@@ -623,34 +587,32 @@
     }
 }
 
 bool DocumentTimeline::resolveAnimationsForElement(Element& element, RenderStyle& targetStyle)
 {
-    bool hasNonAcceleratedAnimations = false;
-    bool hasPendingAcceleratedAnimations = true;
+    bool hasNonAcceleratedAnimationProperty = false;
+
     for (const auto& animation : animationsForElement(element)) {
         animation->resolve(targetStyle);
-        if (!hasNonAcceleratedAnimations) {
-            if (auto* effect = animation->effect()) {
-                if (is<KeyframeEffect>(effect)) {
-                    auto* keyframeEffect = downcast<KeyframeEffect>(effect);
-                    for (auto cssPropertyId : keyframeEffect->animatedProperties()) {
-                        if (!CSSPropertyAnimation::animationOfPropertyIsAccelerated(cssPropertyId)) {
-                            hasNonAcceleratedAnimations = true;
-                            continue;
-                        }
-                        if (!hasPendingAcceleratedAnimations)
-                            hasPendingAcceleratedAnimations = keyframeEffect->hasPendingAcceleratedAction();
-                    }
-                }
+
+        if (hasNonAcceleratedAnimationProperty)
+            continue;
+
+        auto* effect = animation->effect();
+        if (!effect || !is<KeyframeEffect>(effect))
+            continue;
+
+        auto* keyframeEffect = downcast<KeyframeEffect>(effect);
+        for (auto cssPropertyId : keyframeEffect->animatedProperties()) {
+            if (!CSSPropertyAnimation::animationOfPropertyIsAccelerated(cssPropertyId)) {
+                hasNonAcceleratedAnimationProperty = true;
+                break;
             }
         }
     }
 
-    // If there are no non-accelerated animations and we've encountered at least one pending
-    // accelerated animation, we should recomposite this element's layer for animation purposes.
-    return !hasNonAcceleratedAnimations && hasPendingAcceleratedAnimations;
+    return !hasNonAcceleratedAnimationProperty;
 }
 
 bool DocumentTimeline::runningAnimationsForElementAreAllAccelerated(Element& element) const
 {
     return m_elementsWithRunningAcceleratedAnimations.contains(&element);
