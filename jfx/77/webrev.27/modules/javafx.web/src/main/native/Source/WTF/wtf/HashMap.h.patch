diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/HashMap.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/HashMap.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/HashMap.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/HashMap.h
@@ -63,18 +63,28 @@
     class HashMapValuesProxy;
 
     using IdentityTranslatorType = typename HashTableType::IdentityTranslatorType;
 
 public:
+    /*
+     * Since figuring out the entries of an iterator is confusing, here is a cheat sheet:
+     * const KeyType& key = iterator->key;
+     * ValueType& value = iterator->value;
+     */
     using iterator = HashTableIteratorAdapter<HashTableType, KeyValuePairType>;
     using const_iterator = HashTableConstIteratorAdapter<HashTableType, KeyValuePairType>;
 
     using KeysIteratorRange = SizedIteratorRange<HashMap, typename iterator::Keys>;
     using KeysConstIteratorRange = SizedIteratorRange<HashMap, typename const_iterator::Keys>;
     using ValuesIteratorRange = SizedIteratorRange<HashMap, typename iterator::Values>;
     using ValuesConstIteratorRange = SizedIteratorRange<HashMap, typename const_iterator::Values>;
 
+    /*
+     * Since figuring out the entries of an AddResult is confusing, here is a cheat sheet:
+     * iterator iter = addResult.iterator;
+     * bool isNewEntry = addResult.isNewEntry;
+     */
     using AddResult = typename HashTableType::AddResult;
 
 public:
     HashMap()
     {
@@ -90,10 +100,12 @@
 
     unsigned size() const;
     unsigned capacity() const;
     bool isEmpty() const;
 
+    void reserveInitialCapacity(unsigned keyCount) { m_impl.reserveInitialCapacity(keyCount); }
+
     // iterators iterate over pairs of keys and values
     iterator begin();
     iterator end();
     const_iterator begin() const;
     const_iterator end() const;
