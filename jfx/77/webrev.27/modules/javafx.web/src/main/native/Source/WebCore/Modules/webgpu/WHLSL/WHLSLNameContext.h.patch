diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLNameContext.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLNameContext.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLNameContext.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLNameContext.h
@@ -25,10 +25,13 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
+#include "WHLSLError.h"
+#include "WHLSLNameSpace.h"
+
 #include <functional>
 #include <wtf/HashMap.h>
 #include <wtf/Vector.h>
 #include <wtf/text/WTFString.h>
 
@@ -52,29 +55,39 @@
 
 class NameContext {
 public:
     NameContext(NameContext* parent = nullptr);
 
-    bool add(AST::TypeDefinition&);
-    bool add(AST::StructureDefinition&);
-    bool add(AST::EnumerationDefinition&);
-    bool add(AST::FunctionDefinition&);
-    bool add(AST::NativeFunctionDeclaration&);
-    bool add(AST::NativeTypeDeclaration&);
-    bool add(AST::VariableDeclaration&);
-
-    Vector<std::reference_wrapper<AST::NamedType>, 1>* getTypes(const String&);
-    Vector<std::reference_wrapper<AST::FunctionDeclaration>, 1>* getFunctions(const String&);
+    void setCurrentNameSpace(AST::NameSpace currentNameSpace)
+    {
+        ASSERT(!m_parent);
+        m_currentNameSpace = currentNameSpace;
+    }
+
+    Expected<void, Error> add(AST::TypeDefinition&);
+    Expected<void, Error> add(AST::StructureDefinition&);
+    Expected<void, Error> add(AST::EnumerationDefinition&);
+    Expected<void, Error> add(AST::FunctionDefinition&);
+    Expected<void, Error> add(AST::NativeFunctionDeclaration&);
+    Expected<void, Error> add(AST::NativeTypeDeclaration&);
+    Expected<void, Error> add(AST::VariableDeclaration&);
+
+    Vector<std::reference_wrapper<AST::NamedType>, 1> getTypes(const String&, AST::NameSpace fromNamespace);
+    Vector<std::reference_wrapper<AST::FunctionDeclaration>, 1> getFunctions(const String&, AST::NameSpace fromNamespace);
     AST::VariableDeclaration* getVariable(const String&);
 
 private:
-    bool exists(String&);
+    AST::NamedType* searchTypes(String& name) const;
+    AST::FunctionDeclaration* searchFunctions(String& name) const;
+    Optional<CodeLocation> topLevelExists(String& name) const;
+    AST::VariableDeclaration* localExists(String& name) const;
 
-    HashMap<String, Vector<std::reference_wrapper<AST::NamedType>, 1>> m_types;
-    HashMap<String, Vector<std::reference_wrapper<AST::FunctionDeclaration>, 1>> m_functions;
+    HashMap<String, Vector<std::reference_wrapper<AST::NamedType>, 1>> m_types[AST::nameSpaceCount];
+    HashMap<String, Vector<std::reference_wrapper<AST::FunctionDeclaration>, 1>> m_functions[AST::nameSpaceCount];
     HashMap<String, AST::VariableDeclaration*> m_variables;
     NameContext* m_parent;
+    AST::NameSpace m_currentNameSpace { AST::NameSpace::StandardLibrary };
 };
 
 }
 
 }
