diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3AtomicValue.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3AtomicValue.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3AtomicValue.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3AtomicValue.cpp
@@ -23,10 +23,11 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #include "config.h"
 #include "B3AtomicValue.h"
+#include "B3ValueInlines.h"
 
 #if ENABLE(B3_JIT)
 
 namespace JSC { namespace B3 {
 
@@ -39,17 +40,12 @@
     out.print(comma, "width = ", m_width);
 
     MemoryValue::dumpMeta(comma, out);
 }
 
-Value* AtomicValue::cloneImpl() const
-{
-    return new AtomicValue(*this);
-}
-
 AtomicValue::AtomicValue(AtomicValue::AtomicValueRMW, Kind kind, Origin origin, Width width, Value* operand, Value* pointer, MemoryValue::OffsetType offset, HeapRange range, HeapRange fenceRange)
-    : MemoryValue(CheckedOpcode, kind, operand->type(), origin, offset, range, fenceRange, operand, pointer)
+    : MemoryValue(CheckedOpcode, kind, operand->type(), Two, origin, offset, range, fenceRange, operand, pointer)
     , m_width(width)
 {
     ASSERT(bestType(GP, accessWidth()) == accessType());
 
     switch (kind.opcode()) {
@@ -64,11 +60,11 @@
         ASSERT_NOT_REACHED();
     }
 }
 
 AtomicValue::AtomicValue(AtomicValue::AtomicValueCAS, Kind kind, Origin origin, Width width, Value* expectedValue, Value* newValue, Value* pointer, MemoryValue::OffsetType offset, HeapRange range, HeapRange fenceRange)
-    : MemoryValue(CheckedOpcode, kind, kind.opcode() == AtomicWeakCAS ? Int32 : expectedValue->type(), origin, offset, range, fenceRange, expectedValue, newValue, pointer)
+    : MemoryValue(CheckedOpcode, kind, kind.opcode() == AtomicWeakCAS ? Int32 : expectedValue->type(), Three, origin, offset, range, fenceRange, expectedValue, newValue, pointer)
     , m_width(width)
 {
     ASSERT(bestType(GP, accessWidth()) == accessType());
 
     switch (kind.opcode()) {
