diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGGraphicsElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGGraphicsElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGGraphicsElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGGraphicsElement.cpp
@@ -40,11 +40,14 @@
 SVGGraphicsElement::SVGGraphicsElement(const QualifiedName& tagName, Document& document)
     : SVGElement(tagName, document)
     , SVGTests(this)
     , m_shouldIsolateBlending(false)
 {
-    registerAttributes();
+    static std::once_flag onceFlag;
+    std::call_once(onceFlag, [] {
+        PropertyRegistry::registerProperty<SVGNames::transformAttr, &SVGGraphicsElement::m_transform>();
+    });
 }
 
 SVGGraphicsElement::~SVGGraphicsElement() = default;
 
 Ref<SVGMatrix> SVGGraphicsElement::getCTMForBindings()
@@ -104,60 +107,46 @@
             matrix.setE(matrix.e() / zoom);
             matrix.setF(matrix.f() / zoom);
         }
 
     } else
-        transform().concatenate(matrix);
+        matrix = transform().concatenate();
 
     if (m_supplementalTransform)
         return *m_supplementalTransform * matrix;
     return matrix;
 }
 
 AffineTransform* SVGGraphicsElement::supplementalTransform()
 {
     if (!m_supplementalTransform)
-        m_supplementalTransform = std::make_unique<AffineTransform>();
+        m_supplementalTransform = makeUnique<AffineTransform>();
     return m_supplementalTransform.get();
 }
 
-void SVGGraphicsElement::registerAttributes()
-{
-    auto& registry = attributeRegistry();
-    if (!registry.isEmpty())
-        return;
-    registry.registerAttribute<SVGNames::transformAttr, &SVGGraphicsElement::m_transform>();
-}
-
-void SVGGraphicsElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void SVGGraphicsElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == SVGNames::transformAttr) {
-        SVGTransformListValues newList;
-        newList.parse(value);
-        m_transform.detachAnimatedListWrappers(attributeOwnerProxy(), newList.size());
-        m_transform.setValue(newList);
+        m_transform->baseVal()->parse(value);
         return;
     }
 
     SVGElement::parseAttribute(name, value);
     SVGTests::parseAttribute(name, value);
 }
 
 void SVGGraphicsElement::svgAttributeChanged(const QualifiedName& attrName)
 {
-    if (isKnownAttribute(attrName)) {
+    if (attrName == SVGNames::transformAttr) {
         InstanceInvalidationGuard guard(*this);
 
-        auto renderer = this->renderer();
-        if (!renderer)
-            return;
-
-        if (attrName == SVGNames::transformAttr) {
+        if (auto renderer = this->renderer()) {
             renderer->setNeedsTransformUpdate();
             RenderSVGResource::markForLayoutAndParentResourceInvalidation(*renderer);
-            return;
         }
+
+        return;
     }
 
     SVGElement::svgAttributeChanged(attrName);
     SVGTests::svgAttributeChanged(attrName);
 }
