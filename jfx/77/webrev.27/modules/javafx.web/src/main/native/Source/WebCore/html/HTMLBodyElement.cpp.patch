diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLBodyElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLBodyElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLBodyElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLBodyElement.cpp
@@ -1,11 +1,11 @@
 /*
  * Copyright (C) 1999 Lars Knoll (knoll@kde.org)
  *           (C) 1999 Antti Koivisto (koivisto@kde.org)
  *           (C) 2000 Simon Hausmann (hausmann@kde.org)
  *           (C) 2001 Dirk Mueller (mueller@kde.org)
- * Copyright (C) 2004-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2004-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -67,11 +67,11 @@
     if (name == backgroundAttr || name == marginwidthAttr || name == leftmarginAttr || name == marginheightAttr || name == topmarginAttr || name == bgcolorAttr || name == textAttr || name == bgpropertiesAttr)
         return true;
     return HTMLElement::isPresentationAttribute(name);
 }
 
-void HTMLBodyElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomicString& value, MutableStyleProperties& style)
+void HTMLBodyElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomString& value, MutableStyleProperties& style)
 {
     if (name == backgroundAttr) {
         String url = stripLeadingAndTrailingHTMLSpaces(value);
         if (!url.isEmpty()) {
             auto imageValue = CSSImageValue::create(document().completeURL(url), LoadedFromOpaqueSource::No);
@@ -96,10 +96,12 @@
 }
 
 HTMLElement::EventHandlerNameMap HTMLBodyElement::createWindowEventHandlerNameMap()
 {
     static const QualifiedName* const table[] = {
+        &onafterprintAttr.get(),
+        &onbeforeprintAttr.get(),
         &onbeforeunloadAttr.get(),
         &onblurAttr.get(),
         &onerrorAttr.get(),
         &onfocusAttr.get(),
         &onfocusinAttr.get(),
@@ -131,17 +133,17 @@
     EventHandlerNameMap map;
     populateEventHandlerNameMap(map, table);
     return map;
 }
 
-const AtomicString& HTMLBodyElement::eventNameForWindowEventHandlerAttribute(const QualifiedName& attributeName)
+const AtomString& HTMLBodyElement::eventNameForWindowEventHandlerAttribute(const QualifiedName& attributeName)
 {
     static NeverDestroyed<EventHandlerNameMap> map = createWindowEventHandlerNameMap();
     return eventNameForEventHandlerAttribute(attributeName, map.get());
 }
 
-void HTMLBodyElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLBodyElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == vlinkAttr || name == alinkAttr || name == linkAttr) {
         if (value.isNull()) {
             if (name == linkAttr)
                 document().resetLinkColor();
@@ -182,36 +184,31 @@
 Node::InsertedIntoAncestorResult HTMLBodyElement::insertedIntoAncestor(InsertionType insertionType, ContainerNode& parentOfInsertedTree)
 {
     HTMLElement::insertedIntoAncestor(insertionType, parentOfInsertedTree);
     if (!insertionType.connectedToDocument)
         return InsertedIntoAncestorResult::Done;
-
-    // FIXME: It's surprising this is web compatible since it means a marginwidth and marginheight attribute can
-    // magically appear on the <body> of all documents embedded through <iframe> or <frame>.
-    // FIXME: Perhaps this code should be in attach() instead of here.
-    auto ownerElement = makeRefPtr(document().ownerElement());
-    if (!is<HTMLFrameElementBase>(ownerElement))
+    if (!is<HTMLFrameElementBase>(document().ownerElement()))
         return InsertedIntoAncestorResult::Done;
-
     return InsertedIntoAncestorResult::NeedsPostInsertionCallback;
 }
 
 void HTMLBodyElement::didFinishInsertingNode()
 {
-    auto ownerElement = makeRefPtr(document().ownerElement());
-    RELEASE_ASSERT(is<HTMLFrameElementBase>(ownerElement));
-    auto& ownerFrameElement = downcast<HTMLFrameElementBase>(*ownerElement);
-
-    // Read values from the owner before setting any attributes, since setting an attribute can run arbitrary
-    // JavaScript, which might delete the owner element.
-    int marginWidth = ownerFrameElement.marginWidth();
-    int marginHeight = ownerFrameElement.marginHeight();
-
-    if (marginWidth != -1)
-        setIntegralAttribute(marginwidthAttr, marginWidth);
-    if (marginHeight != -1)
-        setIntegralAttribute(marginheightAttr, marginHeight);
+    ASSERT(is<HTMLFrameElementBase>(document().ownerElement()));
+    auto ownerElement = makeRef(*document().ownerElement());
+
+    // FIXME: It's surprising this is web compatible since it means marginwidth and marginheight attributes
+    // appear or get overwritten on body elements of a document embedded through <iframe> or <frame>.
+    // Better to find a way to do addHTMLLengthToStyle based on the attributes from the frame element,
+    // without modifying the body element's attributes. Could also add code so we can respond to updates
+    // to the frame element attributes.
+    auto marginWidth = ownerElement->attributeWithoutSynchronization(marginwidthAttr);
+    if (!marginWidth.isNull())
+        setAttributeWithoutSynchronization(marginwidthAttr, marginWidth);
+    auto marginHeight = ownerElement->attributeWithoutSynchronization(marginheightAttr);
+    if (!marginHeight.isNull())
+        setAttributeWithoutSynchronization(marginheightAttr, marginHeight);
 }
 
 bool HTMLBodyElement::isURLAttribute(const Attribute& attribute) const
 {
     return attribute.name() == backgroundAttr || HTMLElement::isURLAttribute(attribute);
