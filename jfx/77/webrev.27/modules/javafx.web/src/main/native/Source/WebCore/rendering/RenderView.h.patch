diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderView.h b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderView.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderView.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderView.h
@@ -66,11 +66,10 @@
 
     float zoomFactor() const;
 
     FrameView& frameView() const { return m_frameView; }
 
-    LayoutRect visualOverflowRect() const override;
     Optional<LayoutRect> computeVisibleRectInContainer(const LayoutRect&, const RenderLayerModelObject* container, VisibleRectContext) const override;
     void repaintRootContents();
     void repaintViewRectangle(const LayoutRect&) const;
     void repaintViewAndCompositedLayers();
 
@@ -145,13 +144,17 @@
 
     // FIXME: This is a work around because the current implementation of counters
     // requires walking the entire tree repeatedly and most pages don't actually use either
     // feature so we shouldn't take the performance hit when not needed. Long term we should
     // rewrite the counter code.
-    void addRenderCounter() { m_renderCounterCount++; }
-    void removeRenderCounter() { ASSERT(m_renderCounterCount > 0); m_renderCounterCount--; }
-    bool hasRenderCounters() { return m_renderCounterCount; }
+    void addRenderCounter() { ++m_renderCounterCount; }
+    void removeRenderCounter() { ASSERT(m_renderCounterCount > 0); --m_renderCounterCount; }
+    bool hasRenderCounters() const { return m_renderCounterCount; }
+
+    void incrementRendersWithOutline() { ++m_renderersWithOutlineCount; }
+    void decrementRendersWithOutline() { ASSERT(m_renderersWithOutlineCount > 0); --m_renderersWithOutlineCount; }
+    bool hasRenderersWithOutline() const { return m_renderersWithOutlineCount; }
 
     ImageQualityController& imageQualityController();
 
     void setHasSoftwareFilters(bool hasSoftwareFilters) { m_hasSoftwareFilters = hasSoftwareFilters; }
     bool hasSoftwareFilters() const { return m_hasSoftwareFilters; }
@@ -161,11 +164,11 @@
     void didDestroyRenderer() { --m_rendererCount; }
 
     void updateVisibleViewportRect(const IntRect&);
     void registerForVisibleInViewportCallback(RenderElement&);
     void unregisterForVisibleInViewportCallback(RenderElement&);
-    void resumePausedImageAnimationsIfNeeded(IntRect visibleRect);
+    void resumePausedImageAnimationsIfNeeded(const IntRect& visibleRect);
     void addRendererWithPausedImageAnimations(RenderElement&, CachedImage&);
     void removeRendererWithPausedImageAnimations(RenderElement&);
     void removeRendererWithPausedImageAnimations(RenderElement&, CachedImage&);
 
     class RepaintRegionAccumulator {
@@ -240,10 +243,11 @@
     std::unique_ptr<RenderLayerCompositor> m_compositor;
 
     bool m_hasQuotesNeedingUpdate { false };
 
     unsigned m_renderCounterCount { 0 };
+    unsigned m_renderersWithOutlineCount { 0 };
 
     bool m_hasSoftwareFilters { false };
     bool m_usesFirstLineRules { false };
     bool m_usesFirstLetterRules { false };
 
