diff a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingTree.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingTree.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingTree.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ScrollingTree.cpp
@@ -33,10 +33,13 @@
 #include "PlatformWheelEvent.h"
 #include "ScrollingStateFrameScrollingNode.h"
 #include "ScrollingStateTree.h"
 #include "ScrollingTreeFrameScrollingNode.h"
 #include "ScrollingTreeNode.h"
+#include "ScrollingTreeOverflowScrollProxyNode.h"
+#include "ScrollingTreeOverflowScrollingNode.h"
+#include "ScrollingTreePositionedNode.h"
 #include "ScrollingTreeScrollingNode.h"
 #include <wtf/SetForScope.h>
 #include <wtf/text/TextStream.h>
 
 namespace WebCore {
@@ -46,68 +49,71 @@
 ScrollingTree::~ScrollingTree() = default;
 
 bool ScrollingTree::shouldHandleWheelEventSynchronously(const PlatformWheelEvent& wheelEvent)
 {
     // This method is invoked by the event handling thread
-    LockHolder lock(m_mutex);
+    LockHolder lock(m_treeStateMutex);
 
     bool shouldSetLatch = wheelEvent.shouldConsiderLatching();
 
     if (hasLatchedNode() && !shouldSetLatch)
         return false;
 
     if (shouldSetLatch)
-        m_latchedNodeID = 0;
+        m_treeState.latchedNodeID = 0;
 
-    if (!m_eventTrackingRegions.isEmpty() && m_rootNode) {
-        auto& frameScrollingNode = downcast<ScrollingTreeFrameScrollingNode>(*m_rootNode);
+    if (!m_treeState.eventTrackingRegions.isEmpty() && m_rootNode) {
         FloatPoint position = wheelEvent.position();
-        position.move(frameScrollingNode.viewToContentsOffset(m_mainFrameScrollPosition));
+        position.move(m_rootNode->viewToContentsOffset(m_treeState.mainFrameScrollPosition));
 
         const EventNames& names = eventNames();
         IntPoint roundedPosition = roundedIntPoint(position);
 
         // Event regions are affected by page scale, so no need to map through scale.
-        bool isSynchronousDispatchRegion = m_eventTrackingRegions.trackingTypeForPoint(names.wheelEvent, roundedPosition) == TrackingType::Synchronous
-            || m_eventTrackingRegions.trackingTypeForPoint(names.mousewheelEvent, roundedPosition) == TrackingType::Synchronous;
+        bool isSynchronousDispatchRegion = m_treeState.eventTrackingRegions.trackingTypeForPoint(names.wheelEvent, roundedPosition) == TrackingType::Synchronous
+            || m_treeState.eventTrackingRegions.trackingTypeForPoint(names.mousewheelEvent, roundedPosition) == TrackingType::Synchronous;
         LOG_WITH_STREAM(Scrolling, stream << "ScrollingTree::shouldHandleWheelEventSynchronously: wheelEvent at " << wheelEvent.position() << " mapped to content point " << position << ", in non-fast region " << isSynchronousDispatchRegion);
 
         if (isSynchronousDispatchRegion)
             return true;
     }
     return false;
 }
 
 void ScrollingTree::setOrClearLatchedNode(const PlatformWheelEvent& wheelEvent, ScrollingNodeID nodeID)
 {
-    if (wheelEvent.shouldConsiderLatching())
+    if (wheelEvent.shouldConsiderLatching()) {
+        LOG_WITH_STREAM(Scrolling, stream << "ScrollingTree " << this << " setOrClearLatchedNode: setting latched node " << nodeID);
         setLatchedNode(nodeID);
-    else if (wheelEvent.shouldResetLatching())
+    } else if (wheelEvent.shouldResetLatching()) {
+        LOG_WITH_STREAM(Scrolling, stream << "ScrollingTree " << this << " setOrClearLatchedNode: clearing latched node (was " << latchedNode() << ")");
         clearLatchedNode();
+    }
 }
 
 ScrollingEventResult ScrollingTree::handleWheelEvent(const PlatformWheelEvent& wheelEvent)
 {
     LOG_WITH_STREAM(Scrolling, stream << "ScrollingTree " << this << " handleWheelEvent (async scrolling enabled: " << asyncFrameOrOverflowScrollingEnabled() << ")");
 
+    LockHolder locker(m_treeMutex);
+
     if (!asyncFrameOrOverflowScrollingEnabled()) {
         if (m_rootNode)
-            downcast<ScrollingTreeScrollingNode>(*m_rootNode).handleWheelEvent(wheelEvent);
+            m_rootNode->handleWheelEvent(wheelEvent);
         return ScrollingEventResult::DidNotHandleEvent;
     }
 
     if (hasLatchedNode()) {
+        LOG_WITH_STREAM(Scrolling, stream << " has latched node " << latchedNode());
         auto* node = nodeForID(latchedNode());
         if (is<ScrollingTreeScrollingNode>(node))
             return downcast<ScrollingTreeScrollingNode>(*node).handleWheelEvent(wheelEvent);
     }
 
     if (m_rootNode) {
-        auto& frameScrollingNode = downcast<ScrollingTreeFrameScrollingNode>(*m_rootNode);
-
         FloatPoint position = wheelEvent.position();
-        ScrollingTreeNode* node = frameScrollingNode.scrollingNodeForPoint(LayoutPoint(position));
+        ScrollingTreeNode* node = m_rootNode->scrollingNodeForPoint(LayoutPoint(position));
 
         LOG_WITH_STREAM(Scrolling, stream << "ScrollingTree::handleWheelEvent found node " << (node ? node->scrollingNodeID() : 0) << " for point " << position << "\n");
 
         while (node) {
             if (is<ScrollingTreeScrollingNode>(*node)) {
@@ -120,80 +126,69 @@
         }
     }
     return ScrollingEventResult::DidNotHandleEvent;
 }
 
-void ScrollingTree::viewportChangedViaDelegatedScrolling(ScrollingNodeID nodeID, const FloatRect& fixedPositionRect, double scale)
+void ScrollingTree::mainFrameViewportChangedViaDelegatedScrolling(const FloatPoint& scrollPosition, const FloatRect& layoutViewport, double)
 {
-    auto* node = nodeForID(nodeID);
-    if (!is<ScrollingTreeScrollingNode>(node))
-        return;
-
-    downcast<ScrollingTreeScrollingNode>(*node).updateLayersAfterViewportChange(fixedPositionRect, scale);
-}
+    LOG_WITH_STREAM(Scrolling, stream << "ScrollingTree::viewportChangedViaDelegatedScrolling - layoutViewport " << layoutViewport);
 
-void ScrollingTree::scrollPositionChangedViaDelegatedScrolling(ScrollingNodeID nodeID, const WebCore::FloatPoint& scrollPosition, bool inUserInteraction)
-{
-    auto* node = nodeForID(nodeID);
-    if (!is<ScrollingTreeScrollingNode>(node))
+    if (!m_rootNode)
         return;
 
-    // Update descendant nodes
-    downcast<ScrollingTreeScrollingNode>(*node).updateLayersAfterDelegatedScroll(scrollPosition);
-
-    // Update GraphicsLayers and scroll state.
-    scrollingTreeNodeDidScroll(nodeID, scrollPosition, WTF::nullopt, inUserInteraction ? ScrollingLayerPositionAction::Sync : ScrollingLayerPositionAction::Set);
+    m_rootNode->wasScrolledByDelegatedScrolling(scrollPosition, layoutViewport);
 }
 
 void ScrollingTree::commitTreeState(std::unique_ptr<ScrollingStateTree> scrollingStateTree)
 {
+    LockHolder locker(m_treeMutex);
+
     bool rootStateNodeChanged = scrollingStateTree->hasNewRootStateNode();
 
     LOG(Scrolling, "\nScrollingTree %p commitTreeState", this);
 
     auto* rootNode = scrollingStateTree->rootStateNode();
     if (rootNode
         && (rootStateNodeChanged
             || rootNode->hasChangedProperty(ScrollingStateFrameScrollingNode::EventTrackingRegion)
             || rootNode->hasChangedProperty(ScrollingStateScrollingNode::ScrolledContentsLayer)
-            || rootNode->hasChangedProperty(ScrollingStateFrameScrollingNode::VisualViewportEnabled)
             || rootNode->hasChangedProperty(ScrollingStateFrameScrollingNode::AsyncFrameOrOverflowScrollingEnabled))) {
-        LockHolder lock(m_mutex);
+        LockHolder lock(m_treeStateMutex);
 
         if (rootStateNodeChanged || rootNode->hasChangedProperty(ScrollingStateScrollingNode::ScrolledContentsLayer))
-            m_mainFrameScrollPosition = FloatPoint();
+            m_treeState.mainFrameScrollPosition = { };
 
         if (rootStateNodeChanged || rootNode->hasChangedProperty(ScrollingStateFrameScrollingNode::EventTrackingRegion))
-            m_eventTrackingRegions = scrollingStateTree->rootStateNode()->eventTrackingRegions();
-
-        if (rootStateNodeChanged || rootNode->hasChangedProperty(ScrollingStateFrameScrollingNode::VisualViewportEnabled))
-            m_visualViewportEnabled = scrollingStateTree->rootStateNode()->visualViewportEnabled();
+            m_treeState.eventTrackingRegions = scrollingStateTree->rootStateNode()->eventTrackingRegions();
 
         if (rootStateNodeChanged || rootNode->hasChangedProperty(ScrollingStateFrameScrollingNode::AsyncFrameOrOverflowScrollingEnabled))
             m_asyncFrameOrOverflowScrollingEnabled = scrollingStateTree->rootStateNode()->asyncFrameOrOverflowScrollingEnabled();
     }
 
-    bool scrollRequestIsProgammatic = rootNode ? rootNode->requestedScrollPositionRepresentsProgrammaticScroll() : false;
-    SetForScope<bool> changeHandlingProgrammaticScroll(m_isHandlingProgrammaticScroll, scrollRequestIsProgammatic);
-
     // unvisitedNodes starts with all nodes in the map; we remove nodes as we visit them. At the end, it's the unvisited nodes.
     // We can't use orphanNodes for this, because orphanNodes won't contain descendants of removed nodes.
     HashSet<ScrollingNodeID> unvisitedNodes;
     for (auto nodeID : m_nodeMap.keys())
         unvisitedNodes.add(nodeID);
 
+    m_overflowRelatedNodesMap.clear();
+    m_activeOverflowScrollProxyNodes.clear();
+    m_activePositionedNodes.clear();
+
     // orphanNodes keeps child nodes alive while we rebuild child lists.
     OrphanScrollingNodeMap orphanNodes;
     updateTreeFromStateNode(rootNode, orphanNodes, unvisitedNodes);
 
     for (auto nodeID : unvisitedNodes) {
-        if (nodeID == m_latchedNodeID)
+        if (nodeID == m_treeState.latchedNodeID)
             clearLatchedNode();
 
         LOG(Scrolling, "ScrollingTree::commitTreeState - removing unvisited node %" PRIu64, nodeID);
         m_nodeMap.remove(nodeID);
     }
+
+    LOG_WITH_STREAM(Scrolling, stream << "committed ScrollingTree" << scrollingTreeAsText(ScrollingStateTreeAsTextBehaviorDebug));
 }
 
 void ScrollingTree::updateTreeFromStateNode(const ScrollingStateNode* stateNode, OrphanScrollingNodeMap& orphanNodes, HashSet<ScrollingNodeID>& unvisitedNodes)
 {
     if (!stateNode) {
@@ -214,22 +209,29 @@
     } else {
         node = createScrollingTreeNode(stateNode->nodeType(), nodeID);
         if (!parentNodeID) {
             // This is the root node. Clear the node map.
             ASSERT(stateNode->isFrameScrollingNode());
-            m_rootNode = node;
+            m_rootNode = downcast<ScrollingTreeFrameScrollingNode>(node.get());
             m_nodeMap.clear();
         }
         m_nodeMap.set(nodeID, node.get());
     }
 
     if (parentNodeID) {
         auto parentIt = m_nodeMap.find(parentNodeID);
         ASSERT_WITH_SECURITY_IMPLICATION(parentIt != m_nodeMap.end());
         if (parentIt != m_nodeMap.end()) {
-            auto* parent = parentIt->value;
-            node->setParent(parent);
+            auto* parent = parentIt->value.get();
+
+            auto* oldParent = node->parent();
+            if (oldParent)
+                oldParent->removeChild(*node);
+
+            if (oldParent != parent)
+                node->setParent(parent);
+
             parent->appendChild(*node);
         } else {
             // FIXME: Use WeakPtr in m_nodeMap.
             m_nodeMap.remove(nodeID);
         }
@@ -253,152 +255,177 @@
     }
 
     node->commitStateAfterChildren(*stateNode);
 }
 
-ScrollingTreeNode* ScrollingTree::nodeForID(ScrollingNodeID nodeID) const
+void ScrollingTree::applyLayerPositionsAfterCommit()
 {
-    if (!nodeID)
-        return nullptr;
+    // Scrolling tree needs to make adjustments only if the UI side positions have changed.
+    if (!m_wasScrolledByDelegatedScrollingSincePreviousCommit)
+        return;
+    m_wasScrolledByDelegatedScrollingSincePreviousCommit = false;
 
-    return m_nodeMap.get(nodeID);
+    applyLayerPositions();
 }
 
-void ScrollingTree::setAsyncFrameOrOverflowScrollingEnabled(bool enabled)
+void ScrollingTree::applyLayerPositions()
 {
-    LockHolder lock(m_mutex);
-    m_asyncFrameOrOverflowScrollingEnabled = enabled;
-}
+    ASSERT(isMainThread());
+    LockHolder locker(m_treeMutex);
 
-void ScrollingTree::setMainFramePinState(bool pinnedToTheLeft, bool pinnedToTheRight, bool pinnedToTheTop, bool pinnedToTheBottom)
-{
-    LockHolder locker(m_swipeStateMutex);
+    if (!m_rootNode)
+        return;
 
-    m_mainFramePinnedToTheLeft = pinnedToTheLeft;
-    m_mainFramePinnedToTheRight = pinnedToTheRight;
-    m_mainFramePinnedToTheTop = pinnedToTheTop;
-    m_mainFramePinnedToTheBottom = pinnedToTheBottom;
-}
+    LOG(Scrolling, "\nScrollingTree %p applyLayerPositions", this);
 
-FloatPoint ScrollingTree::mainFrameScrollPosition()
-{
-    LockHolder lock(m_mutex);
-    return m_mainFrameScrollPosition;
-}
+    applyLayerPositionsRecursive(*m_rootNode);
 
-void ScrollingTree::setMainFrameScrollPosition(FloatPoint position)
-{
-    LockHolder lock(m_mutex);
-    m_mainFrameScrollPosition = position;
+    LOG(Scrolling, "ScrollingTree %p applyLayerPositions - done\n", this);
 }
 
-TrackingType ScrollingTree::eventTrackingTypeForPoint(const AtomicString& eventName, IntPoint p)
+void ScrollingTree::applyLayerPositionsRecursive(ScrollingTreeNode& currNode)
 {
-    LockHolder lock(m_mutex);
+    currNode.applyLayerPositions();
 
-    return m_eventTrackingRegions.trackingTypeForPoint(eventName, p);
+    if (auto children = currNode.children()) {
+        for (auto& child : *children)
+            applyLayerPositionsRecursive(*child);
+    }
 }
 
-bool ScrollingTree::isRubberBandInProgress()
+ScrollingTreeNode* ScrollingTree::nodeForID(ScrollingNodeID nodeID) const
 {
-    LockHolder lock(m_mutex);
+    if (!nodeID)
+        return nullptr;
 
-    return m_mainFrameIsRubberBanding;
+    return m_nodeMap.get(nodeID);
 }
 
-void ScrollingTree::setMainFrameIsRubberBanding(bool isRubberBanding)
+void ScrollingTree::notifyRelatedNodesAfterScrollPositionChange(ScrollingTreeScrollingNode& changedNode)
 {
-    LockHolder locker(m_mutex);
+    Vector<ScrollingNodeID> additionalUpdateRoots;
 
-    m_mainFrameIsRubberBanding = isRubberBanding;
-}
+    if (is<ScrollingTreeOverflowScrollingNode>(changedNode))
+        additionalUpdateRoots = overflowRelatedNodes().get(changedNode.scrollingNodeID());
 
-bool ScrollingTree::isScrollSnapInProgress()
-{
-    LockHolder lock(m_mutex);
+    notifyRelatedNodesRecursive(changedNode);
 
-    return m_mainFrameIsScrollSnapping;
+    for (auto positionedNodeID : additionalUpdateRoots) {
+        auto* positionedNode = nodeForID(positionedNodeID);
+        if (positionedNode)
+            notifyRelatedNodesRecursive(*positionedNode);
+    }
 }
 
-void ScrollingTree::setMainFrameIsScrollSnapping(bool isScrollSnapping)
+void ScrollingTree::notifyRelatedNodesRecursive(ScrollingTreeNode& node)
 {
-    LockHolder locker(m_mutex);
+    node.applyLayerPositions();
+
+    if (!node.children())
+        return;
+
+    for (auto& child : *node.children()) {
+        // Never need to cross frame boundaries, since scroll layer adjustments are isolated to each document.
+        if (is<ScrollingTreeFrameScrollingNode>(child))
+            continue;
 
-    m_mainFrameIsScrollSnapping = isScrollSnapping;
+        notifyRelatedNodesRecursive(*child);
+    }
 }
 
-void ScrollingTree::setCanRubberBandState(bool canRubberBandAtLeft, bool canRubberBandAtRight, bool canRubberBandAtTop, bool canRubberBandAtBottom)
+void ScrollingTree::setAsyncFrameOrOverflowScrollingEnabled(bool enabled)
 {
-    LockHolder locker(m_swipeStateMutex);
-
-    m_rubberBandsAtLeft = canRubberBandAtLeft;
-    m_rubberBandsAtRight = canRubberBandAtRight;
-    m_rubberBandsAtTop = canRubberBandAtTop;
-    m_rubberBandsAtBottom = canRubberBandAtBottom;
+    m_asyncFrameOrOverflowScrollingEnabled = enabled;
 }
 
-bool ScrollingTree::rubberBandsAtLeft()
+void ScrollingTree::setMainFrameScrollPosition(FloatPoint position)
 {
-    LockHolder lock(m_swipeStateMutex);
+    LockHolder lock(m_treeStateMutex);
+    m_treeState.mainFrameScrollPosition = position;
+}
 
-    return m_rubberBandsAtLeft;
+TrackingType ScrollingTree::eventTrackingTypeForPoint(const AtomString& eventName, IntPoint p)
+{
+    LockHolder lock(m_treeStateMutex);
+    return m_treeState.eventTrackingRegions.trackingTypeForPoint(eventName, p);
 }
 
-bool ScrollingTree::rubberBandsAtRight()
+// Can be called from the main thread.
+bool ScrollingTree::isRubberBandInProgress()
 {
-    LockHolder lock(m_swipeStateMutex);
+    LockHolder lock(m_treeStateMutex);
+    return m_treeState.mainFrameIsRubberBanding;
+}
 
-    return m_rubberBandsAtRight;
+void ScrollingTree::setMainFrameIsRubberBanding(bool isRubberBanding)
+{
+    LockHolder locker(m_treeStateMutex);
+    m_treeState.mainFrameIsRubberBanding = isRubberBanding;
 }
 
-bool ScrollingTree::rubberBandsAtBottom()
+// Can be called from the main thread.
+bool ScrollingTree::isScrollSnapInProgress()
 {
-    LockHolder lock(m_swipeStateMutex);
+    LockHolder lock(m_treeStateMutex);
+    return m_treeState.mainFrameIsScrollSnapping;
+}
 
-    return m_rubberBandsAtBottom;
+void ScrollingTree::setMainFrameIsScrollSnapping(bool isScrollSnapping)
+{
+    LockHolder locker(m_treeStateMutex);
+    m_treeState.mainFrameIsScrollSnapping = isScrollSnapping;
 }
 
-bool ScrollingTree::rubberBandsAtTop()
+void ScrollingTree::setMainFramePinState(bool pinnedToTheLeft, bool pinnedToTheRight, bool pinnedToTheTop, bool pinnedToTheBottom)
 {
-    LockHolder lock(m_swipeStateMutex);
+    LockHolder locker(m_swipeStateMutex);
 
-    return m_rubberBandsAtTop;
+    m_swipeState.mainFramePinnedToTheLeft = pinnedToTheLeft;
+    m_swipeState.mainFramePinnedToTheRight = pinnedToTheRight;
+    m_swipeState.mainFramePinnedToTheTop = pinnedToTheTop;
+    m_swipeState.mainFramePinnedToTheBottom = pinnedToTheBottom;
 }
 
-bool ScrollingTree::isHandlingProgrammaticScroll()
+void ScrollingTree::setCanRubberBandState(bool canRubberBandAtLeft, bool canRubberBandAtRight, bool canRubberBandAtTop, bool canRubberBandAtBottom)
 {
-    return m_isHandlingProgrammaticScroll;
+    LockHolder locker(m_swipeStateMutex);
+
+    m_swipeState.rubberBandsAtLeft = canRubberBandAtLeft;
+    m_swipeState.rubberBandsAtRight = canRubberBandAtRight;
+    m_swipeState.rubberBandsAtTop = canRubberBandAtTop;
+    m_swipeState.rubberBandsAtBottom = canRubberBandAtBottom;
 }
 
+// Can be called from the main thread.
 void ScrollingTree::setScrollPinningBehavior(ScrollPinningBehavior pinning)
 {
     LockHolder locker(m_swipeStateMutex);
 
-    m_scrollPinningBehavior = pinning;
+    m_swipeState.scrollPinningBehavior = pinning;
 }
 
 ScrollPinningBehavior ScrollingTree::scrollPinningBehavior()
 {
     LockHolder lock(m_swipeStateMutex);
 
-    return m_scrollPinningBehavior;
+    return m_swipeState.scrollPinningBehavior;
 }
 
 bool ScrollingTree::willWheelEventStartSwipeGesture(const PlatformWheelEvent& wheelEvent)
 {
     if (wheelEvent.phase() != PlatformWheelEventPhaseBegan)
         return false;
 
     LockHolder lock(m_swipeStateMutex);
 
-    if (wheelEvent.deltaX() > 0 && m_mainFramePinnedToTheLeft && !m_rubberBandsAtLeft)
+    if (wheelEvent.deltaX() > 0 && m_swipeState.mainFramePinnedToTheLeft && !m_swipeState.rubberBandsAtLeft)
         return true;
-    if (wheelEvent.deltaX() < 0 && m_mainFramePinnedToTheRight && !m_rubberBandsAtRight)
+    if (wheelEvent.deltaX() < 0 && m_swipeState.mainFramePinnedToTheRight && !m_swipeState.rubberBandsAtRight)
         return true;
-    if (wheelEvent.deltaY() > 0 && m_mainFramePinnedToTheTop && !m_rubberBandsAtTop)
+    if (wheelEvent.deltaY() > 0 && m_swipeState.mainFramePinnedToTheTop && !m_swipeState.rubberBandsAtTop)
         return true;
-    if (wheelEvent.deltaY() < 0 && m_mainFramePinnedToTheBottom && !m_rubberBandsAtBottom)
+    if (wheelEvent.deltaY() < 0 && m_swipeState.mainFramePinnedToTheBottom && !m_swipeState.rubberBandsAtBottom)
         return true;
 
     return false;
 }
 
@@ -412,61 +439,58 @@
     return m_scrollingPerformanceLoggingEnabled;
 }
 
 ScrollingNodeID ScrollingTree::latchedNode()
 {
-    LockHolder locker(m_mutex);
-    return m_latchedNodeID;
+    LockHolder locker(m_treeStateMutex);
+    return m_treeState.latchedNodeID;
 }
 
 void ScrollingTree::setLatchedNode(ScrollingNodeID node)
 {
-    LockHolder locker(m_mutex);
-    m_latchedNodeID = node;
+    LockHolder locker(m_treeStateMutex);
+    m_treeState.latchedNodeID = node;
 }
 
 void ScrollingTree::clearLatchedNode()
 {
-    LockHolder locker(m_mutex);
-    m_latchedNodeID = 0;
+    LockHolder locker(m_treeStateMutex);
+    m_treeState.latchedNodeID = 0;
 }
 
-String ScrollingTree::scrollingTreeAsText()
+String ScrollingTree::scrollingTreeAsText(ScrollingStateTreeAsTextBehavior behavior)
 {
     TextStream ts(TextStream::LineMode::MultipleLine);
 
-    TextStream::GroupScope scope(ts);
-    ts << "scrolling tree";
+    {
+        TextStream::GroupScope scope(ts);
+        ts << "scrolling tree";
 
-    if (m_latchedNodeID)
-        ts.dumpProperty("latched node", m_latchedNodeID);
+        LockHolder locker(m_treeStateMutex);
 
-    if (m_mainFrameScrollPosition != IntPoint())
-        ts.dumpProperty("main frame scroll position", m_mainFrameScrollPosition);
+        if (m_treeState.latchedNodeID)
+            ts.dumpProperty("latched node", m_treeState.latchedNodeID);
+
+        if (!m_treeState.mainFrameScrollPosition.isZero())
+            ts.dumpProperty("main frame scroll position", m_treeState.mainFrameScrollPosition);
 
-    {
-        LockHolder lock(m_mutex);
         if (m_rootNode) {
             TextStream::GroupScope scope(ts);
-            m_rootNode->dump(ts, ScrollingStateTreeAsTextBehaviorIncludeLayerPositions);
+            m_rootNode->dump(ts, behavior | ScrollingStateTreeAsTextBehaviorIncludeLayerPositions);
         }
-    }
-
-    return ts.release();
-}
 
-#if ENABLE(POINTER_EVENTS)
-Optional<TouchActionData> ScrollingTree::touchActionDataAtPoint(IntPoint p) const
-{
-    // FIXME: This does not handle the case where there are multiple regions matching this point.
-    for (auto& touchActionData : m_eventTrackingRegions.touchActionData) {
-        if (touchActionData.region.contains(p))
-            return touchActionData;
+        if (behavior & ScrollingStateTreeAsTextBehaviorIncludeNodeIDs && !m_overflowRelatedNodesMap.isEmpty()) {
+            TextStream::GroupScope scope(ts);
+            ts << "overflow related nodes";
+            {
+                TextStream::IndentScope indentScope(ts);
+                for (auto& it : m_overflowRelatedNodesMap)
+                    ts << "\n" << indent << it.key << " -> " << it.value;
+            }
+        }
     }
-
-    return WTF::nullopt;
+    return ts.release();
 }
-#endif
 
 } // namespace WebCore
 
 #endif // ENABLE(ASYNC_SCROLLING)
