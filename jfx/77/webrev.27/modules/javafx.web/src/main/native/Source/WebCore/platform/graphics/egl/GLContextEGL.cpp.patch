diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp
@@ -36,11 +36,10 @@
 #endif
 
 #if USE(LIBEPOXY)
 #include <epoxy/gl.h>
 #elif USE(OPENGL_ES)
-#define GL_GLEXT_PROTOTYPES 1
 #include <GLES2/gl2.h>
 #include <GLES2/gl2ext.h>
 #else
 #include "OpenGLShims.h"
 #endif
@@ -181,15 +180,18 @@
 #endif
 #if PLATFORM(WAYLAND)
     if (platformDisplay.type() == PlatformDisplay::Type::Wayland)
         surface = createWindowSurfaceWayland(display, config, window);
 #endif
-#elif PLATFORM(WPE)
+#endif
+
+#if USE(WPE_RENDERER)
     if (platformDisplay.type() == PlatformDisplay::Type::WPE)
         surface = createWindowSurfaceWPE(display, config, window);
 #else
-    surface = eglCreateWindowSurface(display, config, static_cast<EGLNativeWindowType>(window), nullptr);
+    if (surface == EGL_NO_SURFACE)
+        surface = eglCreateWindowSurface(display, config, static_cast<EGLNativeWindowType>(window), nullptr);
 #endif
     if (surface == EGL_NO_SURFACE) {
         WTFLogAlways("Cannot create EGL window surface: %s\n", lastErrorString());
         eglDestroyContext(display, context);
         return nullptr;
@@ -231,14 +233,12 @@
         WTFLogAlways("Cannot create surfaceless EGL context: invalid display (last error: %s)\n", lastErrorString());
         return nullptr;
     }
 
     const char* extensions = eglQueryString(display, EGL_EXTENSIONS);
-    if (!GLContext::isExtensionSupported(extensions, "EGL_KHR_surfaceless_context") && !GLContext::isExtensionSupported(extensions, "EGL_KHR_surfaceless_opengl")) {
-        WTFLogAlways("Cannot create EGL surfaceless context: missing EGL_KHR_surfaceless_{context,opengl} extension.\n");
+    if (!GLContext::isExtensionSupported(extensions, "EGL_KHR_surfaceless_context") && !GLContext::isExtensionSupported(extensions, "EGL_KHR_surfaceless_opengl"))
         return nullptr;
-    }
 
     EGLConfig config;
     if (!getEGLConfig(display, &config, Surfaceless)) {
         WTFLogAlways("Cannot obtain EGL surfaceless configuration: %s\n", lastErrorString());
         return nullptr;
@@ -280,11 +280,11 @@
 #endif
 #if PLATFORM(WAYLAND)
         if (platformDisplay.type() == PlatformDisplay::Type::Wayland)
             context = createWaylandContext(platformDisplay, eglSharingContext);
 #endif
-#if PLATFORM(WPE)
+#if USE(WPE_RENDERER)
         if (platformDisplay.type() == PlatformDisplay::Type::WPE)
             context = createWPEContext(platformDisplay, eglSharingContext);
 #endif
     }
     if (!context)
@@ -317,11 +317,11 @@
 #endif
 #if PLATFORM(WAYLAND)
         if (platformDisplay.type() == PlatformDisplay::Type::Wayland)
             context = createWaylandContext(platformDisplay);
 #endif
-#if PLATFORM(WPE)
+#if USE(WPE_RENDERER)
         if (platformDisplay.type() == PlatformDisplay::Type::WPE)
             context = createWPEContext(platformDisplay);
 #endif
     }
     if (!context)
@@ -360,11 +360,11 @@
         eglDestroySurface(display, m_surface);
 
 #if PLATFORM(WAYLAND)
     destroyWaylandWindow();
 #endif
-#if PLATFORM(WPE)
+#if USE(WPE_RENDERER)
     destroyWPETarget();
 #endif
 }
 
 bool GLContextEGL::canRenderToDefaultFramebuffer()
