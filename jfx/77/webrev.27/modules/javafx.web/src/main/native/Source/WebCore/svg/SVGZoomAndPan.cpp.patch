diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGZoomAndPan.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGZoomAndPan.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGZoomAndPan.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGZoomAndPan.cpp
@@ -1,9 +1,9 @@
 /*
  * Copyright (C) 2004, 2005, 2008 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005, 2006, 2007 Rob Buis <buis@kde.org>
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -22,43 +22,30 @@
 #include "config.h"
 #include "SVGZoomAndPan.h"
 
 namespace WebCore {
 
-SVGZoomAndPan::SVGZoomAndPan()
-{
-    registerAttributes();
-}
-
-void SVGZoomAndPan::registerAttributes()
-{
-    auto& registry = attributeRegistry();
-    if (!registry.isEmpty())
-        return;
-    registry.registerAttribute<SVGNames::zoomAndPanAttr, &SVGZoomAndPan::m_zoomAndPan>();
-}
-
 bool SVGZoomAndPan::parseZoomAndPan(const UChar*& start, const UChar* end)
 {
     static const UChar disable[] = { 'd', 'i', 's', 'a', 'b', 'l', 'e' };
     if (skipString(start, end, disable, WTF_ARRAY_LENGTH(disable))) {
-        m_zoomAndPan.setValue(SVGZoomAndPanDisable);
+        m_zoomAndPan = SVGZoomAndPanDisable;
         return true;
     }
 
     static const UChar magnify[] = { 'm', 'a', 'g', 'n', 'i', 'f', 'y' };
     if (skipString(start, end, magnify, WTF_ARRAY_LENGTH(magnify))) {
-        m_zoomAndPan.setValue(SVGZoomAndPanMagnify);
+        m_zoomAndPan = SVGZoomAndPanMagnify;
         return true;
     }
 
     return false;
 }
 
-void SVGZoomAndPan::parseAttribute(const QualifiedName& attributeName, const AtomicString& value)
+void SVGZoomAndPan::parseAttribute(const QualifiedName& attributeName, const AtomString& value)
 {
     if (attributeName != SVGNames::zoomAndPanAttr)
         return;
-    m_zoomAndPan.setValue(SVGPropertyTraits<SVGZoomAndPanType>::fromString(value));
+    m_zoomAndPan = SVGPropertyTraits<SVGZoomAndPanType>::fromString(value);
 }
 
 }
