diff a/modules/javafx.web/src/main/native/Source/WebCore/fileapi/ThreadableBlobRegistry.h b/modules/javafx.web/src/main/native/Source/WebCore/fileapi/ThreadableBlobRegistry.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/fileapi/ThreadableBlobRegistry.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/fileapi/ThreadableBlobRegistry.h
@@ -31,25 +31,29 @@
 
 #pragma once
 
 #include <wtf/Forward.h>
 
+namespace PAL {
+class SessionID;
+}
+
 namespace WebCore {
 
 class BlobPart;
 class SecurityOrigin;
 
 class ThreadableBlobRegistry {
 public:
-    static void registerFileBlobURL(const URL&, const String& path, const String& contentType);
-    static void registerBlobURL(const URL&, Vector<BlobPart>&& blobParts, const String& contentType);
-    static void registerBlobURL(SecurityOrigin*, const URL&, const URL& srcURL);
-    static void registerBlobURLOptionallyFileBacked(const URL&, const URL& srcURL, const String& fileBackedPath, const String& contentType);
-    static void registerBlobURLForSlice(const URL& newURL, const URL& srcURL, long long start, long long end);
-    static void unregisterBlobURL(const URL&);
-
-    static unsigned long long blobSize(const URL&);
+    static void registerFileBlobURL(PAL::SessionID, const URL&, const String& path, const String& contentType);
+    static void registerBlobURL(PAL::SessionID, const URL&, Vector<BlobPart>&& blobParts, const String& contentType);
+    static void registerBlobURL(PAL::SessionID, SecurityOrigin*, const URL&, const URL& srcURL);
+    static void registerBlobURLOptionallyFileBacked(PAL::SessionID, const URL&, const URL& srcURL, const String& fileBackedPath, const String& contentType);
+    static void registerBlobURLForSlice(PAL::SessionID, const URL& newURL, const URL& srcURL, long long start, long long end);
+    static void unregisterBlobURL(PAL::SessionID, const URL&);
+
+    static unsigned long long blobSize(PAL::SessionID, const URL&);
 
     // Returns the origin for the given blob URL. This is because we are not able to embed the unique security origin or the origin of file URL
     // in the blob URL.
     static RefPtr<SecurityOrigin> getCachedOrigin(const URL&);
 };
