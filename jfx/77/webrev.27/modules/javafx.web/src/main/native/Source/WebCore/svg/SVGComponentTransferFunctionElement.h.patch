diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGComponentTransferFunctionElement.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGComponentTransferFunctionElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGComponentTransferFunctionElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGComponentTransferFunctionElement.h
@@ -1,9 +1,9 @@
 /*
  * Copyright (C) 2004, 2005, 2008 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005, 2006 Rob Buis <buis@kde.org>
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -20,13 +20,10 @@
  */
 
 #pragma once
 
 #include "FEComponentTransfer.h"
-#include "SVGAnimatedEnumeration.h"
-#include "SVGAnimatedNumber.h"
-#include "SVGAnimatedNumberList.h"
 #include "SVGElement.h"
 
 namespace WebCore {
 
 template<>
@@ -73,47 +70,44 @@
 class SVGComponentTransferFunctionElement : public SVGElement {
     WTF_MAKE_ISO_ALLOCATED(SVGComponentTransferFunctionElement);
 public:
     ComponentTransferFunction transferFunction() const;
 
-    ComponentTransferType type() const { return m_type.currentValue(attributeOwnerProxy()); }
-    const SVGNumberListValues& tableValues() const { return m_tableValues.currentValue(attributeOwnerProxy()); }
-    float slope() const { return m_slope.currentValue(attributeOwnerProxy()); }
-    float intercept() const { return m_intercept.currentValue(attributeOwnerProxy()); }
-    float amplitude() const { return m_amplitude.currentValue(attributeOwnerProxy()); }
-    float exponent() const { return m_exponent.currentValue(attributeOwnerProxy()); }
-    float offset() const { return m_offset.currentValue(attributeOwnerProxy()); }
-
-    RefPtr<SVGAnimatedEnumeration> typeAnimated() { return m_type.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumberList> tableValuesAnimated() { return m_tableValues.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> slopeAnimated() { return m_slope.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> interceptAnimated() { return m_intercept.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> amplitudeAnimated() { return m_amplitude.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> exponentAnimated() { return m_exponent.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> offsetAnimated() { return m_offset.animatedProperty(attributeOwnerProxy()); }
+    ComponentTransferType type() const { return m_type->currentValue<ComponentTransferType>(); }
+    const SVGNumberList& tableValues() const { return m_tableValues->currentValue(); }
+    float slope() const { return m_slope->currentValue(); }
+    float intercept() const { return m_intercept->currentValue(); }
+    float amplitude() const { return m_amplitude->currentValue(); }
+    float exponent() const { return m_exponent->currentValue(); }
+    float offset() const { return m_offset->currentValue(); }
+
+    SVGAnimatedEnumeration& typeAnimated() { return m_type; }
+    SVGAnimatedNumberList& tableValuesAnimated() { return m_tableValues; }
+    SVGAnimatedNumber& slopeAnimated() { return m_slope; }
+    SVGAnimatedNumber& interceptAnimated() { return m_intercept; }
+    SVGAnimatedNumber& amplitudeAnimated() { return m_amplitude; }
+    SVGAnimatedNumber& exponentAnimated() { return m_exponent; }
+    SVGAnimatedNumber& offsetAnimated() { return m_offset; }
 
 protected:
     SVGComponentTransferFunctionElement(const QualifiedName&, Document&);
 
-    using AttributeOwnerProxy = SVGAttributeOwnerProxyImpl<SVGComponentTransferFunctionElement, SVGElement>;
-    static AttributeOwnerProxy::AttributeRegistry& attributeRegistry() { return AttributeOwnerProxy::attributeRegistry(); }
-    static bool isKnownAttribute(const QualifiedName& attributeName) { return AttributeOwnerProxy::isKnownAttribute(attributeName); }
-    static void registerAttributes();
+    using PropertyRegistry = SVGPropertyOwnerRegistry<SVGComponentTransferFunctionElement, SVGElement>;
+    const SVGPropertyRegistry& propertyRegistry() const override { return m_propertyRegistry; }
 
-    const SVGAttributeOwnerProxy& attributeOwnerProxy() const override { return m_attributeOwnerProxy; }
-    void parseAttribute(const QualifiedName&, const AtomicString&) override;
+    void parseAttribute(const QualifiedName&, const AtomString&) override;
     void svgAttributeChanged(const QualifiedName&) override;
 
     bool rendererIsNeeded(const RenderStyle&) override { return false; }
 
 private:
-    AttributeOwnerProxy m_attributeOwnerProxy { *this };
-    SVGAnimatedEnumerationAttribute<ComponentTransferType> m_type { FECOMPONENTTRANSFER_TYPE_IDENTITY };
-    SVGAnimatedNumberListAttribute m_tableValues;
-    SVGAnimatedNumberAttribute m_slope { 1 };
-    SVGAnimatedNumberAttribute m_intercept;
-    SVGAnimatedNumberAttribute m_amplitude { 1 };
-    SVGAnimatedNumberAttribute m_exponent { 1 };
-    SVGAnimatedNumberAttribute m_offset;
+    PropertyRegistry m_propertyRegistry { *this };
+    Ref<SVGAnimatedEnumeration> m_type { SVGAnimatedEnumeration::create(this, FECOMPONENTTRANSFER_TYPE_IDENTITY) };
+    Ref<SVGAnimatedNumberList> m_tableValues { SVGAnimatedNumberList::create(this) };
+    Ref<SVGAnimatedNumber> m_slope { SVGAnimatedNumber::create(this, 1) };
+    Ref<SVGAnimatedNumber> m_intercept { SVGAnimatedNumber::create(this) };
+    Ref<SVGAnimatedNumber> m_amplitude { SVGAnimatedNumber::create(this, 1) };
+    Ref<SVGAnimatedNumber> m_exponent { SVGAnimatedNumber::create(this, 1) };
+    Ref<SVGAnimatedNumber> m_offset { SVGAnimatedNumber::create(this) };
 };
 
 } // namespace WebCore
