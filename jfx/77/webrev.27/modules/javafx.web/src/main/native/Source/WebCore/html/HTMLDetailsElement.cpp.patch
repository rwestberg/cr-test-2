diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLDetailsElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLDetailsElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLDetailsElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLDetailsElement.cpp
@@ -47,20 +47,20 @@
 {
     static NeverDestroyed<DetailEventSender> sharedToggleEventSender(eventNames().toggleEvent);
     return sharedToggleEventSender;
 }
 
-static const AtomicString& summarySlotName()
+static const AtomString& summarySlotName()
 {
-    static NeverDestroyed<AtomicString> summarySlot("summarySlot");
+    static NeverDestroyed<AtomString> summarySlot("summarySlot");
     return summarySlot;
 }
 
 class DetailsSlotAssignment final : public SlotAssignment {
 private:
     void hostChildElementDidChange(const Element&, ShadowRoot&) override;
-    const AtomicString& slotNameForHostChild(const Node&) const override;
+    const AtomString& slotNameForHostChild(const Node&) const override;
 };
 
 void DetailsSlotAssignment::hostChildElementDidChange(const Element& childElement, ShadowRoot& shadowRoot)
 {
     if (is<HTMLSummaryElement>(childElement)) {
@@ -69,11 +69,11 @@
         didChangeSlot(summarySlotName(), shadowRoot);
     } else
         didChangeSlot(SlotAssignment::defaultSlotName(), shadowRoot);
 }
 
-const AtomicString& DetailsSlotAssignment::slotNameForHostChild(const Node& child) const
+const AtomString& DetailsSlotAssignment::slotNameForHostChild(const Node& child) const
 {
     auto& parent = *child.parentNode();
     ASSERT(is<HTMLDetailsElement>(parent));
     auto& details = downcast<HTMLDetailsElement>(parent);
 
@@ -86,11 +86,11 @@
 }
 
 Ref<HTMLDetailsElement> HTMLDetailsElement::create(const QualifiedName& tagName, Document& document)
 {
     auto details = adoptRef(*new HTMLDetailsElement(tagName, document));
-    details->addShadowRoot(ShadowRoot::create(document, std::make_unique<DetailsSlotAssignment>()));
+    details->addShadowRoot(ShadowRoot::create(document, makeUnique<DetailsSlotAssignment>()));
     return details;
 }
 
 HTMLDetailsElement::HTMLDetailsElement(const QualifiedName& tagName, Document& document)
     : HTMLElement(tagName, document)
@@ -143,11 +143,11 @@
 {
     ASSERT_UNUSED(eventSender, eventSender == &detailToggleEventSender());
     dispatchEvent(Event::create(eventNames().toggleEvent, Event::CanBubble::No, Event::IsCancelable::No));
 }
 
-void HTMLDetailsElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLDetailsElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == openAttr) {
         bool oldValue = m_isOpen;
         m_isOpen = !value.isNull();
         if (oldValue != m_isOpen) {
