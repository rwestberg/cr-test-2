diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageRuntimeAgent.h b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageRuntimeAgent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageRuntimeAgent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageRuntimeAgent.h
@@ -39,43 +39,41 @@
 class ExecState;
 }
 
 namespace WebCore {
 
-class InspectorPageAgent;
 class Frame;
 class Page;
 class SecurityOrigin;
 typedef String ErrorString;
 
 class PageRuntimeAgent final : public Inspector::InspectorRuntimeAgent {
     WTF_MAKE_NONCOPYABLE(PageRuntimeAgent);
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    PageRuntimeAgent(PageAgentContext&, InspectorPageAgent*);
-    virtual ~PageRuntimeAgent() = default;
+    PageRuntimeAgent(PageAgentContext&);
+    virtual ~PageRuntimeAgent();
 
-    void didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*) override;
-    void willDestroyFrontendAndBackend(Inspector::DisconnectReason) override;
-    void enable(ErrorString&) override;
-    void disable(ErrorString&) override;
+    // RuntimeBackendDispatcherHandler
+    void enable(ErrorString&);
+    void disable(ErrorString&);
+    void evaluate(ErrorString&, const String& expression, const String* objectGroup, const bool* includeCommandLineAPI, const bool* doNotPauseOnExceptionsAndMuteConsole, const int* executionContextId, const bool* returnByValue, const bool* generatePreview, const bool* saveResult, const bool* emulateUserGesture, RefPtr<Inspector::Protocol::Runtime::RemoteObject>& result, Optional<bool>& wasThrown, Optional<int>& savedResultIndex);
 
     // InspectorInstrumentation
     void didCreateMainWorldContext(Frame&);
 
 private:
-    Inspector::InjectedScript injectedScriptForEval(ErrorString&, const int* executionContextId) override;
-    void muteConsole() override;
-    void unmuteConsole() override;
+    Inspector::InjectedScript injectedScriptForEval(ErrorString&, const int* executionContextId);
+    void muteConsole();
+    void unmuteConsole();
     void reportExecutionContextCreation();
     void notifyContextCreated(const String& frameId, JSC::ExecState*, SecurityOrigin*, bool isPageContext);
 
     std::unique_ptr<Inspector::RuntimeFrontendDispatcher> m_frontendDispatcher;
     RefPtr<Inspector::RuntimeBackendDispatcher> m_backendDispatcher;
-    InspectorPageAgent* m_pageAgent;
 
-    Page& m_inspectedPage;
+    InstrumentingAgents& m_instrumentingAgents;
 
-    bool m_mainWorldContextCreated { false };
+    Page& m_inspectedPage;
 };
 
 } // namespace WebCore
