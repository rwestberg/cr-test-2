diff a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/WebKitAccessibleInterfaceValue.cpp b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/WebKitAccessibleInterfaceValue.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/WebKitAccessibleInterfaceValue.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/WebKitAccessibleInterfaceValue.cpp
@@ -18,11 +18,11 @@
  */
 
 #include "config.h"
 #include "WebKitAccessibleInterfaceValue.h"
 
-#if HAVE(ACCESSIBILITY)
+#if ENABLE(ACCESSIBILITY)
 
 #include "AccessibilityObject.h"
 #include "HTMLNames.h"
 #include "WebKitAccessible.h"
 #include "WebKitAccessibleUtil.h"
@@ -47,11 +47,11 @@
     // Check value against range limits
     double value;
     value = std::max(static_cast<double>(coreObject->minValueForRange()), newValue);
     value = std::min(static_cast<double>(coreObject->maxValueForRange()), newValue);
 
-    coreObject->setValue(String::number(value));
+    coreObject->setValue(String::numberToStringFixedPrecision(value));
     return TRUE;
 }
 
 static float webkitAccessibleGetIncrementValue(AccessibilityObject* coreObject)
 {
@@ -62,11 +62,10 @@
     // range between minimum and maximum values. Implicit value of step should be one or larger.
     float step = (coreObject->maxValueForRange() - coreObject->minValueForRange()) * 0.05;
     return step < 1 ? 1 : step;
 }
 
-#if ATK_CHECK_VERSION(2,11,92)
 static void webkitAccessibleGetValueAndText(AtkValue* value, gdouble* currentValue, gchar** alternativeText)
 {
     g_return_if_fail(ATK_VALUE(value));
     returnIfWebKitAccessibleIsInvalid(WEBKIT_ACCESSIBLE(value));
 
@@ -112,11 +111,11 @@
     gdouble minValue = coreObject->minValueForRange();
     gdouble maxValue = coreObject->maxValueForRange();
     gchar* valueDescription = g_strdup_printf("%s", coreObject->valueDescription().utf8().data());
     return atk_range_new(minValue, maxValue, valueDescription);
 }
-#endif
+
 static void webkitAccessibleValueGetCurrentValue(AtkValue* value, GValue* gValue)
 {
     g_return_if_fail(ATK_VALUE(value));
     returnIfWebKitAccessibleIsInvalid(WEBKIT_ACCESSIBLE(value));
 
@@ -185,16 +184,14 @@
     g_value_set_float(gValue, webkitAccessibleGetIncrementValue(coreObject));
 }
 
 void webkitAccessibleValueInterfaceInit(AtkValueIface* iface)
 {
-#if ATK_CHECK_VERSION(2,11,92)
     iface->get_value_and_text = webkitAccessibleGetValueAndText;
     iface->get_increment = webkitAccessibleGetIncrement;
     iface->set_value = webkitAccessibleSetValue;
     iface->get_range = webkitAccessibleGetRange;
-#endif
     iface->get_current_value = webkitAccessibleValueGetCurrentValue;
     iface->get_maximum_value = webkitAccessibleValueGetMaximumValue;
     iface->get_minimum_value = webkitAccessibleValueGetMinimumValue;
     iface->set_current_value = webkitAccessibleValueSetCurrentValue;
     iface->get_minimum_increment = webkitAccessibleValueGetMinimumIncrement;
