diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLResolvingType.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLResolvingType.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLResolvingType.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLResolvingType.h
@@ -25,44 +25,102 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
-#include <memory>
-#include <wtf/Ref.h>
+#include "WHLSLUnnamedType.h"
 #include <wtf/RefCounted.h>
+#include <wtf/RefPtr.h>
 #include <wtf/UniqueRef.h>
 #include <wtf/Variant.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
 class ResolvableType;
-class UnnamedType;
 
 }
 
+// There are cases where the type of one AST node should match the type of another AST node.
+// One example of this is the comma expression - the type of the comma expression should match the type of its last item.
+// If this type happens to be a resolvable type, it will get resolved later. When that happens,
+// both of the AST nodes have to be resolved to the result type. This class represents a
+// reference counted wrapper around a resolvable type so both entries in the type map can point
+// to the same resolvable type, so resolving it once resolves both the entries in the map.
+// This class could probably be represented as
+// "class ResolvableTypeReference : public std::reference_wrapper<AST::ResolvableType>, public RefCounted<ResolvableTypeReference {}"
+// but I didn't want to be too clever.
 class ResolvableTypeReference : public RefCounted<ResolvableTypeReference> {
 public:
     ResolvableTypeReference(AST::ResolvableType& resolvableType)
         : m_resolvableType(&resolvableType)
     {
     }
 
     ResolvableTypeReference(const ResolvableTypeReference&) = delete;
     ResolvableTypeReference(ResolvableTypeReference&&) = delete;
+    ResolvableTypeReference& operator=(const ResolvableTypeReference&) = delete;
+    ResolvableTypeReference& operator=(ResolvableTypeReference&&) = delete;
 
     AST::ResolvableType& resolvableType() { return *m_resolvableType; }
 
 private:
     AST::ResolvableType* m_resolvableType;
 };
 
-using ResolvingType = Variant<UniqueRef<AST::UnnamedType>, Ref<ResolvableTypeReference>>;
+// This is a thin wrapper around a Variant.
+// It exists so we can make sure that the default constructor does the right thing.
+// FIXME: https://bugs.webkit.org/show_bug.cgi?id=198158 This wrapper might not be necessary.
+class ResolvingType {
+    WTF_MAKE_FAST_ALLOCATED;
+public:
+    ResolvingType()
+        : m_inner(RefPtr<ResolvableTypeReference>())
+    {
+    }
+
+    ResolvingType(Ref<AST::UnnamedType> v)
+        : m_inner(WTFMove(v))
+    {
+    }
+
+    ResolvingType(RefPtr<ResolvableTypeReference> v)
+        : m_inner(WTFMove(v))
+    {
+    }
+
+    ResolvingType(const ResolvingType&) = delete;
+    ResolvingType(ResolvingType&& other)
+        : m_inner(WTFMove(other.m_inner))
+    {
+    }
+
+    ResolvingType& operator=(const ResolvingType&) = delete;
+    ResolvingType& operator=(ResolvingType&& other)
+    {
+        m_inner = WTFMove(other.m_inner);
+        return *this;
+    }
+
+    AST::UnnamedType* getUnnamedType()
+    {
+        if (WTF::holds_alternative<Ref<AST::UnnamedType>>(m_inner))
+            return WTF::get<Ref<AST::UnnamedType>>(m_inner).ptr();
+        return nullptr;
+    }
+
+    template <typename Visitor> auto visit(const Visitor& visitor) -> decltype(WTF::visit(visitor, std::declval<Variant<Ref<AST::UnnamedType>, RefPtr<ResolvableTypeReference>>&>()))
+    {
+        return WTF::visit(visitor, m_inner);
+    }
+
+private:
+    Variant<Ref<AST::UnnamedType>, RefPtr<ResolvableTypeReference>> m_inner;
+};
 
 }
 
 }
 
