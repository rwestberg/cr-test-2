diff a/modules/javafx.web/src/main/native/Source/WebCore/html/FormController.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/FormController.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/FormController.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/FormController.cpp
@@ -70,40 +70,40 @@
         return WTF::nullopt;
     Vector<String> subvector;
     subvector.reserveInitialCapacity(size);
     for (size_t i = 0; i < size; ++i)
         subvector.uncheckedAppend(stateVector[index++]);
-    return WTFMove(subvector);
+    return subvector;
 }
 
 // ----------------------------------------------------------------------------
 
 class FormElementKey {
 public:
-    FormElementKey(AtomicStringImpl* = 0, AtomicStringImpl* = 0);
+    explicit FormElementKey(AtomStringImpl* = nullptr, AtomStringImpl* = nullptr);
     ~FormElementKey();
     FormElementKey(const FormElementKey&);
     FormElementKey& operator=(const FormElementKey&);
 
-    AtomicStringImpl* name() const { return m_name; }
-    AtomicStringImpl* type() const { return m_type; }
+    AtomStringImpl* name() const { return m_name; }
+    AtomStringImpl* type() const { return m_type; }
 
     // Hash table deleted values, which are only constructed and never copied or destroyed.
     FormElementKey(WTF::HashTableDeletedValueType) : m_name(hashTableDeletedValue()) { }
     bool isHashTableDeletedValue() const { return m_name == hashTableDeletedValue(); }
 
 private:
     void ref() const;
     void deref() const;
 
-    static AtomicStringImpl* hashTableDeletedValue() { return reinterpret_cast<AtomicStringImpl*>(-1); }
+    static AtomStringImpl* hashTableDeletedValue() { return reinterpret_cast<AtomStringImpl*>(-1); }
 
-    AtomicStringImpl* m_name;
-    AtomicStringImpl* m_type;
+    AtomStringImpl* m_name;
+    AtomStringImpl* m_type;
 };
 
-FormElementKey::FormElementKey(AtomicStringImpl* name, AtomicStringImpl* type)
+FormElementKey::FormElementKey(AtomStringImpl* name, AtomStringImpl* type)
     : m_name(name)
     , m_type(type)
 {
     ref();
 }
@@ -175,12 +175,12 @@
 public:
     SavedFormState() = default;
     static std::unique_ptr<SavedFormState> deserialize(const Vector<String>&, size_t& index);
     void serializeTo(Vector<String>&) const;
     bool isEmpty() const { return m_stateForNewFormElements.isEmpty(); }
-    void appendControlState(const AtomicString& name, const AtomicString& type, const FormControlState&);
-    FormControlState takeControlState(const AtomicString& name, const AtomicString& type);
+    void appendControlState(const AtomString& name, const AtomString& type, const FormControlState&);
+    FormControlState takeControlState(const AtomString& name, const AtomString& type);
 
     Vector<String> referencedFilePaths() const;
 
 private:
     HashMap<FormElementKey, Deque<FormControlState>, FormElementKeyHash, FormElementKeyHashTraits> m_stateForNewFormElements;
@@ -198,11 +198,11 @@
         return nullptr;
     // FIXME: We need String::toSizeT().
     size_t itemCount = stateVector[index++].toUInt();
     if (!itemCount)
         return nullptr;
-    auto savedFormState = std::make_unique<SavedFormState>();
+    auto savedFormState = makeUnique<SavedFormState>();
     while (itemCount--) {
         if (index + 1 >= stateVector.size())
             return nullptr;
         String name = stateVector[index++];
         String type = stateVector[index++];
@@ -225,19 +225,19 @@
             serializeFormControlStateTo(controlState, stateVector);
         }
     }
 }
 
-void SavedFormState::appendControlState(const AtomicString& name, const AtomicString& type, const FormControlState& state)
+void SavedFormState::appendControlState(const AtomString& name, const AtomString& type, const FormControlState& state)
 {
-    m_stateForNewFormElements.add({ name.impl(), type.impl() }, Deque<FormControlState> { }).iterator->value.append(state);
+    m_stateForNewFormElements.add(FormElementKey { name.impl(), type.impl() }, Deque<FormControlState> { }).iterator->value.append(state);
     ++m_controlStateCount;
 }
 
-FormControlState SavedFormState::takeControlState(const AtomicString& name, const AtomicString& type)
+FormControlState SavedFormState::takeControlState(const AtomString& name, const AtomString& type)
 {
-    auto iterator = m_stateForNewFormElements.find({ name.impl(), type.impl() });
+    auto iterator = m_stateForNewFormElements.find(FormElementKey { name.impl(), type.impl() });
     if (iterator == m_stateForNewFormElements.end())
         return { };
 
     auto state = iterator->value.takeFirst();
     --m_controlStateCount;
@@ -266,15 +266,15 @@
     WTF_MAKE_NONCOPYABLE(FormKeyGenerator);
     WTF_MAKE_FAST_ALLOCATED;
 
 public:
     FormKeyGenerator() = default;
-    AtomicString formKey(const HTMLFormControlElementWithState&);
+    AtomString formKey(const HTMLFormControlElementWithState&);
     void willDeleteForm(HTMLFormElement*);
 
 private:
-    typedef HashMap<HTMLFormElement*, AtomicString> FormToKeyMap;
+    typedef HashMap<HTMLFormElement*, AtomString> FormToKeyMap;
     typedef HashMap<String, unsigned> FormSignatureToNextIndexMap;
     FormToKeyMap m_formToKeyMap;
     FormSignatureToNextIndexMap m_formSignatureToNextIndexMap;
 };
 
@@ -289,11 +289,11 @@
         if (!controls[i]->isFormControlElementWithState())
             continue;
         RefPtr<HTMLFormControlElementWithState> control = static_cast<HTMLFormControlElementWithState*>(controls[i]);
         if (!ownerFormForState(*control))
             continue;
-        AtomicString name = control->name();
+        AtomString name = control->name();
         if (name.isEmpty())
             continue;
         namedControls++;
         builder.append(name);
         builder.append(' ');
@@ -313,22 +313,22 @@
 
     recordFormStructure(form, builder);
     return builder.toString();
 }
 
-AtomicString FormKeyGenerator::formKey(const HTMLFormControlElementWithState& control)
+AtomString FormKeyGenerator::formKey(const HTMLFormControlElementWithState& control)
 {
     auto form = makeRefPtr(ownerFormForState(control));
     if (!form) {
-        static NeverDestroyed<AtomicString> formKeyForNoOwner("No owner", AtomicString::ConstructFromLiteral);
+        static NeverDestroyed<AtomString> formKeyForNoOwner("No owner", AtomString::ConstructFromLiteral);
         return formKeyForNoOwner;
     }
 
     return m_formToKeyMap.ensure(form.get(), [this, &form] {
         auto signature = formSignature(*form);
         auto nextIndex = m_formSignatureToNextIndexMap.add(signature, 0).iterator->value++;
-        // FIXME: Would be nice to have makeAtomicString to use here.
+        // FIXME: Would be nice to have makeAtomString to use to optimize the case where the string already exists.
         return makeString(signature, " #", nextIndex);
     }).iterator->value;
 }
 
 void FormKeyGenerator::willDeleteForm(HTMLFormElement* form)
@@ -363,17 +363,17 @@
 }
 
 std::unique_ptr<FormController::SavedFormStateMap> FormController::createSavedFormStateMap(const FormElementListHashSet& controlList)
 {
     FormKeyGenerator keyGenerator;
-    auto stateMap = std::make_unique<SavedFormStateMap>();
+    auto stateMap = makeUnique<SavedFormStateMap>();
     for (auto& control : controlList) {
         if (!control->shouldSaveAndRestoreFormControlState())
             continue;
         auto& formState = stateMap->add(keyGenerator.formKey(*control).impl(), nullptr).iterator->value;
         if (!formState)
-            formState = std::make_unique<SavedFormState>();
+            formState = makeUnique<SavedFormState>();
         formState->appendControlState(control->name(), control->type(), control->saveFormControlState());
     }
     return stateMap;
 }
 
@@ -401,11 +401,11 @@
 FormControlState FormController::takeStateForFormElement(const HTMLFormControlElementWithState& control)
 {
     if (m_savedFormStateMap.isEmpty())
         return FormControlState();
     if (!m_formKeyGenerator)
-        m_formKeyGenerator = std::make_unique<FormKeyGenerator>();
+        m_formKeyGenerator = makeUnique<FormKeyGenerator>();
     SavedFormStateMap::iterator it = m_savedFormStateMap.find(m_formKeyGenerator->formKey(control).impl());
     if (it == m_savedFormStateMap.end())
         return FormControlState();
     FormControlState state = it->value->takeControlState(control.name(), control.type());
     if (it->value->isEmpty())
@@ -420,11 +420,11 @@
     size_t i = 0;
     if (stateVector.size() < 1 || stateVector[i++] != formStateSignature())
         return;
 
     while (i + 1 < stateVector.size()) {
-        AtomicString formKey = stateVector[i++];
+        AtomString formKey = stateVector[i++];
         auto state = SavedFormState::deserialize(stateVector, i);
         if (!state) {
             i = 0;
             break;
         }
