diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringImpl.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringImpl.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringImpl.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringImpl.cpp
@@ -25,11 +25,11 @@
 #include "config.h"
 #include <wtf/text/StringImpl.h>
 
 #include <wtf/ProcessID.h>
 #include <wtf/StdLibExtras.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 #include <wtf/text/CString.h>
 #include <wtf/text/ExternalStringImpl.h>
 #include <wtf/text/StringBuffer.h>
 #include <wtf/text/StringHash.h>
 #include <wtf/text/StringView.h>
@@ -100,24 +100,24 @@
     dataLogF("%8u StringImpl::ref calls\n", m_refCalls.load());
     dataLogF("%8u StringImpl::deref calls\n", m_derefCalls.load());
 }
 #endif
 
-StringImpl::StaticStringImpl StringImpl::s_atomicEmptyString("", StringImpl::StringAtomic);
+StringImpl::StaticStringImpl StringImpl::s_emptyAtomString("", StringImpl::StringAtom);
 
 StringImpl::~StringImpl()
 {
     ASSERT(!isStatic());
 
     StringView::invalidate(*this);
 
     STRING_STATS_REMOVE_STRING(*this);
 
-    if (isAtomic()) {
+    if (isAtom()) {
         ASSERT(!isSymbol());
         if (length())
-            AtomicStringImpl::remove(static_cast<AtomicStringImpl*>(this));
+            AtomStringImpl::remove(static_cast<AtomStringImpl*>(this));
     } else if (isSymbol()) {
         auto& symbol = static_cast<SymbolImpl&>(*this);
         auto* symbolRegistry = symbol.symbolRegistry();
         if (symbolRegistry)
             symbolRegistry->remove(*symbol.asRegisteredSymbolImpl());
@@ -516,21 +516,21 @@
     if (U_FAILURE(status))
         return *this;
     return newImpl;
 }
 
-static inline bool needsTurkishCasingRules(const AtomicString& localeIdentifier)
+static inline bool needsTurkishCasingRules(const AtomString& localeIdentifier)
 {
     // Either "tr" or "az" locale, with case sensitive comparison and allowing for an ignored subtag.
     UChar first = localeIdentifier[0];
     UChar second = localeIdentifier[1];
     return ((isASCIIAlphaCaselessEqual(first, 't') && isASCIIAlphaCaselessEqual(second, 'r'))
         || (isASCIIAlphaCaselessEqual(first, 'a') && isASCIIAlphaCaselessEqual(second, 'z')))
         && (localeIdentifier.length() == 2 || localeIdentifier[2] == '-');
 }
 
-Ref<StringImpl> StringImpl::convertToLowercaseWithLocale(const AtomicString& localeIdentifier)
+Ref<StringImpl> StringImpl::convertToLowercaseWithLocale(const AtomString& localeIdentifier)
 {
     // Use the more-optimized code path most of the time.
     // Assuming here that the only locale-specific lowercasing is the Turkish casing rules.
     // FIXME: Could possibly optimize further by looking for the specific sequences
     // that have locale-specific lowercasing. There are only three of them.
@@ -562,11 +562,11 @@
     if (U_FAILURE(status))
         return *this;
     return newString;
 }
 
-Ref<StringImpl> StringImpl::convertToUppercaseWithLocale(const AtomicString& localeIdentifier)
+Ref<StringImpl> StringImpl::convertToUppercaseWithLocale(const AtomString& localeIdentifier)
 {
     // Use the more-optimized code path most of the time.
     // Assuming here that the only locale-specific lowercasing is the Turkish casing rules,
     // and that the only affected character is lowercase "i".
     if (!needsTurkishCasingRules(localeIdentifier) || find('i') == notFound)
@@ -1754,36 +1754,36 @@
     if (mode == StrictConversionReplacingUnpairedSurrogatesWithFFFD) {
         const UChar* charactersEnd = characters + length;
         char* bufferEnd = buffer + bufferSize;
         while (characters < charactersEnd) {
             // Use strict conversion to detect unpaired surrogates.
-            ConversionResult result = convertUTF16ToUTF8(&characters, charactersEnd, &buffer, bufferEnd, true);
-            ASSERT(result != targetExhausted);
+            auto result = convertUTF16ToUTF8(&characters, charactersEnd, &buffer, bufferEnd);
+            ASSERT(result != TargetExhausted);
             // Conversion fails when there is an unpaired surrogate.
             // Put replacement character (U+FFFD) instead of the unpaired surrogate.
-            if (result != conversionOK) {
+            if (result != ConversionOK) {
                 ASSERT((0xD800 <= *characters && *characters <= 0xDFFF));
                 // There should be room left, since one UChar hasn't been converted.
                 ASSERT((buffer + 3) <= bufferEnd);
                 putUTF8Triple(buffer, replacementCharacter);
                 ++characters;
             }
         }
     } else {
         bool strict = mode == StrictConversion;
         const UChar* originalCharacters = characters;
-        ConversionResult result = convertUTF16ToUTF8(&characters, characters + length, &buffer, buffer + bufferSize, strict);
-        ASSERT(result != targetExhausted); // (length * 3) should be sufficient for any conversion
+        auto result = convertUTF16ToUTF8(&characters, characters + length, &buffer, buffer + bufferSize, strict);
+        ASSERT(result != TargetExhausted); // (length * 3) should be sufficient for any conversion
 
         // Only produced from strict conversion.
-        if (result == sourceIllegal) {
+        if (result == SourceIllegal) {
             ASSERT(strict);
             return UTF8ConversionError::IllegalSource;
         }
 
         // Check for an unconverted high surrogate.
-        if (result == sourceExhausted) {
+        if (result == SourceExhausted) {
             if (strict)
                 return UTF8ConversionError::SourceExhausted;
             // This should be one unpaired high surrogate. Treat it the same
             // was as an unpaired high surrogate would have been handled in
             // the middle of a string with non-strict conversion - which is
@@ -1807,12 +1807,12 @@
     if (length > MaxLength / 3)
         return makeUnexpected(UTF8ConversionError::OutOfMemory);
     Vector<char, 1024> bufferVector(length * 3);
     char* buffer = bufferVector.data();
     const LChar* source = characters;
-    ConversionResult result = convertLatin1ToUTF8(&source, source + length, &buffer, buffer + bufferVector.size());
-    ASSERT_UNUSED(result, result != targetExhausted); // (length * 3) should be sufficient for any conversion
+    bool success = convertLatin1ToUTF8(&source, source + length, &buffer, buffer + bufferVector.size());
+    ASSERT_UNUSED(success, success); // (length * 3) should be sufficient for any conversion
     return CString(bufferVector.data(), buffer - bufferVector.data());
 }
 
 Expected<CString, UTF8ConversionError> StringImpl::utf8ForCharacters(const UChar* characters, unsigned length, ConversionMode mode)
 {
@@ -1852,13 +1852,12 @@
 
     char* buffer = bufferVector.data();
 
     if (is8Bit()) {
         const LChar* characters = this->characters8() + offset;
-
-        ConversionResult result = convertLatin1ToUTF8(&characters, characters + length, &buffer, buffer + bufferVector.size());
-        ASSERT_UNUSED(result, result != targetExhausted); // (length * 3) should be sufficient for any conversion
+        auto success = convertLatin1ToUTF8(&characters, characters + length, &buffer, buffer + bufferVector.size());
+        ASSERT_UNUSED(success, success); // (length * 3) should be sufficient for any conversion
     } else {
         UTF8ConversionError error = utf8Impl(this->characters16() + offset, length, buffer, bufferVector.size(), mode);
         if (error != UTF8ConversionError::None)
             return makeUnexpected(error);
     }
