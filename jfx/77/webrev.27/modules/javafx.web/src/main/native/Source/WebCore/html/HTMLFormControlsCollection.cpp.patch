diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFormControlsCollection.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFormControlsCollection.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFormControlsCollection.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFormControlsCollection.cpp
@@ -21,22 +21,26 @@
  */
 
 #include "config.h"
 #include "HTMLFormControlsCollection.h"
 
+#include "FormAssociatedElement.h"
 #include "HTMLFormElement.h"
 #include "HTMLImageElement.h"
 #include "HTMLNames.h"
 #include "ScriptDisallowedScope.h"
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
 using namespace HTMLNames;
 
 // Since the collections are to be "live", we have to do the
 // calculation every time if anything has changed.
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(HTMLFormControlsCollection);
+
 HTMLFormControlsCollection::HTMLFormControlsCollection(ContainerNode& ownerNode)
     : CachedHTMLCollection<HTMLFormControlsCollection, CollectionTypeTraits<FormControls>::traversalType>(ownerNode, FormControls)
     , m_cachedElement(nullptr)
     , m_cachedElementOffsetInArray(0)
 {
@@ -70,15 +74,10 @@
 Vector<Ref<FormAssociatedElement>> HTMLFormControlsCollection::copyFormControlElementsVector() const
 {
     return ownerNode().copyAssociatedElementsVector();
 }
 
-const Vector<HTMLImageElement*>& HTMLFormControlsCollection::formImageElements() const
-{
-    return ownerNode().imageElements();
-}
-
 static unsigned findFormAssociatedElement(const Vector<FormAssociatedElement*>& elements, const Element& element)
 {
     for (unsigned i = 0; i < elements.size(); ++i) {
         auto& associatedElement = *elements[i];
         if (associatedElement.isEnumeratable() && &associatedElement.asHTMLElement() == &element)
@@ -118,38 +117,40 @@
 void HTMLFormControlsCollection::updateNamedElementCache() const
 {
     if (hasNamedElementCache())
         return;
 
-    auto cache = std::make_unique<CollectionNamedElementCache>();
+    auto cache = makeUnique<CollectionNamedElementCache>();
 
-    HashSet<AtomicStringImpl*> foundInputElements;
+    HashSet<AtomStringImpl*> foundInputElements;
 
     ScriptDisallowedScope::InMainThread scriptDisallowedScope;
     for (auto& elementPtr : unsafeFormControlElements()) {
         FormAssociatedElement& associatedElement = *elementPtr;
         if (associatedElement.isEnumeratable()) {
             HTMLElement& element = associatedElement.asHTMLElement();
-            const AtomicString& id = element.getIdAttribute();
+            const AtomString& id = element.getIdAttribute();
             if (!id.isEmpty()) {
                 cache->appendToIdCache(id, element);
                 foundInputElements.add(id.impl());
             }
-            const AtomicString& name = element.getNameAttribute();
+            const AtomString& name = element.getNameAttribute();
             if (!name.isEmpty() && id != name) {
                 cache->appendToNameCache(name, element);
                 foundInputElements.add(name.impl());
             }
         }
     }
 
-    for (auto* elementPtr : formImageElements()) {
+    for (auto& elementPtr : ownerNode().imageElements()) {
+        if (!elementPtr)
+            continue;
         HTMLImageElement& element = *elementPtr;
-        const AtomicString& id = element.getIdAttribute();
+        const AtomString& id = element.getIdAttribute();
         if (!id.isEmpty() && !foundInputElements.contains(id.impl()))
             cache->appendToIdCache(id, element);
-        const AtomicString& name = element.getNameAttribute();
+        const AtomString& name = element.getNameAttribute();
         if (!name.isEmpty() && id != name && !foundInputElements.contains(name.impl()))
             cache->appendToNameCache(name, element);
     }
 
     setNamedItemCache(WTFMove(cache));
