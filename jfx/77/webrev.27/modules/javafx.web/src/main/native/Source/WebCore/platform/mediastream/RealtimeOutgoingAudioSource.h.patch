diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeOutgoingAudioSource.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeOutgoingAudioSource.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeOutgoingAudioSource.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeOutgoingAudioSource.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017 Apple Inc.
+ * Copyright (C) 2017-2019 Apple Inc.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted, provided that the following conditions
  * are required to be met:
  *
@@ -67,29 +67,23 @@
     void stop() { unobserveSource(); }
 
     bool setSource(Ref<MediaStreamTrackPrivate>&&);
     MediaStreamTrackPrivate& source() const { return m_audioSource.get(); }
 
-#if !RELEASE_LOG_DISABLED
-    void setLogger(Ref<const Logger>&& logger) { m_logger = WTFMove(logger); }
-#endif
-
 protected:
     explicit RealtimeOutgoingAudioSource(Ref<MediaStreamTrackPrivate>&&);
 
     void unobserveSource();
 
-    virtual void pullAudioData() { }
-
     bool isSilenced() const { return m_muted || !m_enabled; }
 
     void sendAudioFrames(const void* audioData, int bitsPerSample, int sampleRate, size_t numberOfChannels, size_t numberOfFrames);
 
 #if !RELEASE_LOG_DISABLED
     // LoggerHelper API
-    const Logger& logger() const final;
-    const void* logIdentifier() const final { return m_logIdentifier; }
+    const Logger& logger() const final { return m_audioSource->logger(); }
+    const void* logIdentifier() const final { return m_audioSource->logIdentifier(); }
     const char* logClassName() const final { return "RealtimeOutgoingAudioSource"; }
     WTFLogChannel& logChannel() const final;
 #endif
 
 private:
@@ -117,10 +111,11 @@
     virtual void audioSamplesAvailable(const MediaTime&, const PlatformAudioData&, const AudioStreamDescription&, size_t) { };
 
     virtual bool isReachingBufferedAudioDataHighLimit() { return false; };
     virtual bool isReachingBufferedAudioDataLowLimit() { return false; };
     virtual bool hasBufferedEnoughData() { return false; };
+    virtual void sourceUpdated() { }
 
     // MediaStreamTrackPrivate::Observer API
     void trackMutedChanged(MediaStreamTrackPrivate&) final { sourceMutedChanged(); }
     void trackEnabledChanged(MediaStreamTrackPrivate&) final { sourceEnabledChanged(); }
     void audioSamplesAvailable(MediaStreamTrackPrivate&, const MediaTime& mediaTime, const PlatformAudioData& data, const AudioStreamDescription& description, size_t sampleCount) { audioSamplesAvailable(mediaTime, data, description, sampleCount); }
@@ -135,12 +130,10 @@
 
     mutable RecursiveLock m_sinksLock;
     HashSet<webrtc::AudioTrackSinkInterface*> m_sinks;
 
 #if !RELEASE_LOG_DISABLED
-    mutable RefPtr<const Logger> m_logger;
-    const void* m_logIdentifier;
     size_t m_chunksSent { 0 };
 #endif
 };
 
 } // namespace WebCore
