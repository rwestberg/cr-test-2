diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/DeviceMotionEvent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/DeviceMotionEvent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/DeviceMotionEvent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/DeviceMotionEvent.cpp
@@ -35,11 +35,11 @@
 DeviceMotionEvent::DeviceMotionEvent()
     : m_deviceMotionData(DeviceMotionData::create())
 {
 }
 
-DeviceMotionEvent::DeviceMotionEvent(const AtomicString& eventType, DeviceMotionData* deviceMotionData)
+DeviceMotionEvent::DeviceMotionEvent(const AtomString& eventType, DeviceMotionData* deviceMotionData)
     : Event(eventType, CanBubble::No, IsCancelable::No)
     , m_deviceMotionData(deviceMotionData)
 {
 }
 
@@ -99,11 +99,11 @@
 Optional<double> DeviceMotionEvent::interval() const
 {
     return m_deviceMotionData->interval();
 }
 
-void DeviceMotionEvent::initDeviceMotionEvent(const AtomicString& type, bool bubbles, bool cancelable, Optional<DeviceMotionEvent::Acceleration>&& acceleration, Optional<DeviceMotionEvent::Acceleration>&& accelerationIncludingGravity, Optional<DeviceMotionEvent::RotationRate>&& rotationRate, Optional<double> interval)
+void DeviceMotionEvent::initDeviceMotionEvent(const AtomString& type, bool bubbles, bool cancelable, Optional<DeviceMotionEvent::Acceleration>&& acceleration, Optional<DeviceMotionEvent::Acceleration>&& accelerationIncludingGravity, Optional<DeviceMotionEvent::RotationRate>&& rotationRate, Optional<double> interval)
 {
     if (isBeingDispatched())
         return;
 
     initEvent(type, bubbles, cancelable);
