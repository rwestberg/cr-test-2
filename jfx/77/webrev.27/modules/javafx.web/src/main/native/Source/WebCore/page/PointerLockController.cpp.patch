diff a/modules/javafx.web/src/main/native/Source/WebCore/page/PointerLockController.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/PointerLockController.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/PointerLockController.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/PointerLockController.cpp
@@ -36,10 +36,14 @@
 #include "PlatformMouseEvent.h"
 #include "RuntimeEnabledFeatures.h"
 #include "UserGestureIndicator.h"
 #include "VoidCallback.h"
 
+#if ENABLE(POINTER_EVENTS)
+#include "PointerCaptureController.h"
+#endif
+
 namespace WebCore {
 
 PointerLockController::PointerLockController(Page& page)
     : m_page(page)
 {
@@ -176,11 +180,11 @@
         m_forceCursorVisibleUponUnlock = false;
         m_page.chrome().client().setCursorHiddenUntilMouseMoves(false);
     }
 }
 
-void PointerLockController::dispatchLockedMouseEvent(const PlatformMouseEvent& event, const AtomicString& eventType)
+void PointerLockController::dispatchLockedMouseEvent(const PlatformMouseEvent& event, const AtomString& eventType)
 {
     if (!m_element || !m_element->document().frame())
         return;
 
     m_element->dispatchMouseEvent(event, eventType, event.clickCount());
@@ -202,17 +206,17 @@
 {
     m_lockPending = false;
     m_element = nullptr;
 }
 
-void PointerLockController::enqueueEvent(const AtomicString& type, Element* element)
+void PointerLockController::enqueueEvent(const AtomString& type, Element* element)
 {
     if (element)
         enqueueEvent(type, &element->document());
 }
 
-void PointerLockController::enqueueEvent(const AtomicString& type, Document* document)
+void PointerLockController::enqueueEvent(const AtomString& type, Document* document)
 {
     if (document)
         document->enqueueDocumentEvent(Event::create(type, Event::CanBubble::Yes, Event::IsCancelable::No));
 }
 
