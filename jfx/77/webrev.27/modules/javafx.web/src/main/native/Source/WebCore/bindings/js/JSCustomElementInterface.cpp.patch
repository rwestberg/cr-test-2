diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCustomElementInterface.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCustomElementInterface.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCustomElementInterface.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCustomElementInterface.cpp
@@ -53,22 +53,22 @@
 {
 }
 
 JSCustomElementInterface::~JSCustomElementInterface() = default;
 
-static RefPtr<Element> constructCustomElementSynchronously(Document&, VM&, ExecState&, JSObject* constructor, const AtomicString& localName);
+static RefPtr<Element> constructCustomElementSynchronously(Document&, VM&, ExecState&, JSObject* constructor, const AtomString& localName);
 
-Ref<Element> JSCustomElementInterface::constructElementWithFallback(Document& document, const AtomicString& localName)
+Ref<Element> JSCustomElementInterface::constructElementWithFallback(Document& document, const AtomString& localName)
 {
     if (auto element = tryToConstructCustomElement(document, localName))
         return element.releaseNonNull();
 
     auto element = HTMLUnknownElement::create(QualifiedName(nullAtom(), localName, HTMLNames::xhtmlNamespaceURI), document);
     element->setIsCustomElementUpgradeCandidate();
     element->setIsFailedCustomElement(*this);
 
-    return WTFMove(element);
+    return element;
 }
 
 Ref<Element> JSCustomElementInterface::constructElementWithFallback(Document& document, const QualifiedName& name)
 {
     if (auto element = tryToConstructCustomElement(document, name.localName())) {
@@ -79,14 +79,14 @@
 
     auto element = HTMLUnknownElement::create(name, document);
     element->setIsCustomElementUpgradeCandidate();
     element->setIsFailedCustomElement(*this);
 
-    return WTFMove(element);
+    return element;
 }
 
-RefPtr<Element> JSCustomElementInterface::tryToConstructCustomElement(Document& document, const AtomicString& localName)
+RefPtr<Element> JSCustomElementInterface::tryToConstructCustomElement(Document& document, const AtomString& localName)
 {
     if (!canInvokeCallback())
         return nullptr;
 
     Ref<JSCustomElementInterface> protectedThis(*this);
@@ -112,11 +112,11 @@
     return element;
 }
 
 // https://dom.spec.whatwg.org/#concept-create-element
 // 6. 1. If the synchronous custom elements flag is set
-static RefPtr<Element> constructCustomElementSynchronously(Document& document, VM& vm, ExecState& state, JSObject* constructor, const AtomicString& localName)
+static RefPtr<Element> constructCustomElementSynchronously(Document& document, VM& vm, ExecState& state, JSObject* constructor, const AtomString& localName)
 {
     auto scope = DECLARE_THROW_SCOPE(vm);
     ConstructData constructData;
     ConstructType constructType = constructor->methodTable(vm)->getConstructData(constructor, constructData);
     if (constructType == ConstructType::None) {
@@ -212,11 +212,11 @@
     }
 
     Element* wrappedElement = JSElement::toWrapped(vm, returnedElement);
     if (!wrappedElement || wrappedElement != &element) {
         element.setIsFailedCustomElement(*this);
-        reportException(state, createDOMException(state, InvalidStateError, "Custom element constructor failed to upgrade an element"));
+        reportException(state, createDOMException(state, TypeError, "Custom element constructor returned a wrong element"));
         return;
     }
     element.setIsDefinedCustomElement(*this);
 }
 
@@ -298,11 +298,11 @@
     m_observedAttributes.clear();
     for (auto& name : observedAttributes)
         m_observedAttributes.add(name);
 }
 
-void JSCustomElementInterface::invokeAttributeChangedCallback(Element& element, const QualifiedName& attributeName, const AtomicString& oldValue, const AtomicString& newValue)
+void JSCustomElementInterface::invokeAttributeChangedCallback(Element& element, const QualifiedName& attributeName, const AtomString& oldValue, const AtomString& newValue)
 {
     invokeCallback(element, m_attributeChangedCallback.get(), [&](ExecState* state, JSDOMGlobalObject*, MarkedArgumentBuffer& args) {
         args.append(toJS<IDLDOMString>(*state, attributeName.localName()));
         args.append(toJS<IDLNullable<IDLDOMString>>(*state, oldValue));
         args.append(toJS<IDLNullable<IDLDOMString>>(*state, newValue));
