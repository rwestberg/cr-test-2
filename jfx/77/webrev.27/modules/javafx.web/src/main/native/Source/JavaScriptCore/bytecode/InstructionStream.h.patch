diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InstructionStream.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InstructionStream.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InstructionStream.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InstructionStream.h
@@ -208,10 +208,24 @@
         else {
             m_instructions.append(byte);
             m_position++;
         }
     }
+
+    void write(uint16_t h)
+    {
+        ASSERT(!m_finalized);
+        uint8_t bytes[2];
+        std::memcpy(bytes, &h, sizeof(h));
+
+        // Though not always obvious, we don't have to invert the order of the
+        // bytes written here for CPU(BIG_ENDIAN). This is because the incoming
+        // i value is already ordered in big endian on CPU(BIG_EDNDIAN) platforms.
+        write(bytes[0]);
+        write(bytes[1]);
+    }
+
     void write(uint32_t i)
     {
         ASSERT(!m_finalized);
         uint8_t bytes[4];
         std::memcpy(bytes, &i, sizeof(i));
