diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGAbstractValue.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGAbstractValue.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGAbstractValue.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGAbstractValue.h
@@ -28,10 +28,11 @@
 #if ENABLE(DFG_JIT)
 
 #include "ArrayProfile.h"
 #include "DFGAbstractValueClobberEpoch.h"
 #include "DFGFiltrationResult.h"
+#include "DFGFlushFormat.h"
 #include "DFGFrozenValue.h"
 #include "DFGNodeFlags.h"
 #include "DFGStructureAbstractValue.h"
 #include "DFGStructureClobberState.h"
 #include "JSCast.h"
@@ -45,10 +46,11 @@
 
 namespace DFG {
 
 class Graph;
 struct Node;
+class VariableAccessData;
 
 struct AbstractValue {
     AbstractValue()
         : m_type(SpecNone)
         , m_arrayModes(0)
@@ -186,15 +188,28 @@
             && m_structure.isTop()
             && m_arrayModes == ALL_ARRAY_MODES
             && !m_value;
     }
 
+    bool isBytecodeTop() const
+    {
+        return (m_type | SpecBytecodeTop) == m_type
+            && m_structure.isTop()
+            && m_arrayModes == ALL_ARRAY_MODES
+            && !m_value;
+    }
+
     bool valueIsTop() const
     {
         return !m_value && m_type;
     }
 
+    bool isInt52Any() const
+    {
+        return !(m_type & ~SpecInt52Any);
+    }
+
     JSValue value() const
     {
         return m_value;
     }
 
@@ -287,11 +302,11 @@
         checkConsistency();
         ASSERT(result == (*this != oldMe));
         return result;
     }
 
-    bool mergeOSREntryValue(Graph&, JSValue);
+    bool mergeOSREntryValue(Graph&, JSValue, VariableAccessData*, Node*);
 
     void merge(SpeculatedType type)
     {
         mergeSpeculation(m_type, type);
 
@@ -367,24 +382,39 @@
 
     FiltrationResult changeStructure(Graph&, const RegisteredStructureSet&);
 
     bool contains(RegisteredStructure) const;
 
-    bool validate(JSValue value) const
+    bool validateOSREntryValue(JSValue value, FlushFormat format) const
     {
-        if (isHeapTop())
+        if (isBytecodeTop())
             return true;
 
-        if (!!m_value && m_value != value)
-            return false;
+        if (format == FlushedInt52) {
+            if (!isInt52Any())
+                return false;
 
-        if (mergeSpeculations(m_type, speculationFromValue(value)) != m_type)
-            return false;
+            if (!validateTypeAcceptingBoxedInt52(value))
+                return false;
 
-        if (value.isEmpty()) {
-            ASSERT(m_type & SpecEmpty);
-            return true;
+            if (!!m_value) {
+                ASSERT(m_value.isAnyInt());
+                ASSERT(value.isAnyInt());
+                if (jsDoubleNumber(m_value.asAnyInt()) != jsDoubleNumber(value.asAnyInt()))
+                    return false;
+            }
+        } else {
+            if (!!m_value && m_value != value)
+                return false;
+
+            if (mergeSpeculations(m_type, speculationFromValue(value)) != m_type)
+                return false;
+
+            if (value.isEmpty()) {
+                ASSERT(m_type & SpecEmpty);
+                return true;
+            }
         }
 
         if (!!value && value.isCell()) {
             ASSERT(m_type & SpecCell);
             Structure* structure = value.asCell()->structure();
@@ -403,11 +433,11 @@
 
 #if ASSERT_DISABLED
     void checkConsistency() const { }
     void assertIsRegistered(Graph&) const { }
 #else
-    void checkConsistency() const;
+    JS_EXPORT_PRIVATE void checkConsistency() const;
     void assertIsRegistered(Graph&) const;
 #endif
 
     ResultType resultType() const;
 
@@ -488,30 +518,23 @@
     {
         if (m_arrayModes & from)
             m_arrayModes |= to;
     }
 
-    bool validateType(JSValue value) const
+    bool validateTypeAcceptingBoxedInt52(JSValue value) const
     {
-        if (isHeapTop())
+        if (isBytecodeTop())
             return true;
 
-        // Constant folding always represents Int52's in a double (i.e. AnyIntAsDouble).
-        // So speculationFromValue(value) for an Int52 value will return AnyIntAsDouble,
-        // and that's fine - the type validates just fine.
-        SpeculatedType type = m_type;
-        if (type & SpecInt52Only)
-            type |= SpecAnyIntAsDouble;
+        if (m_type & SpecInt52Any) {
+            if (mergeSpeculations(m_type, int52AwareSpeculationFromValue(value)) == m_type)
+                return true;
+        }
 
-        if (mergeSpeculations(type, speculationFromValue(value)) != type)
+        if (mergeSpeculations(m_type, speculationFromValue(value)) != m_type)
             return false;
 
-        if (value.isEmpty()) {
-            ASSERT(m_type & SpecEmpty);
-            return true;
-        }
-
         return true;
     }
 
     void makeTop(SpeculatedType top)
     {
@@ -528,11 +551,11 @@
 
     void filterValueByType();
     void filterArrayModesByType();
 
 #if USE(JSVALUE64) && !defined(NDEBUG)
-    void ensureCanInitializeWithZeros();
+    JS_EXPORT_PRIVATE void ensureCanInitializeWithZeros();
 #endif
 
     bool shouldBeClear() const;
     FiltrationResult normalizeClarity();
     FiltrationResult normalizeClarity(Graph&);
