diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLVideoElement.h b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLVideoElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLVideoElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLVideoElement.h
@@ -99,29 +99,29 @@
 
     void scheduleResizeEvent() final;
     void scheduleResizeEventIfSizeChanged() final;
     bool rendererIsNeeded(const RenderStyle&) final;
     void didAttachRenderers() final;
-    void parseAttribute(const QualifiedName&, const AtomicString&) final;
+    void parseAttribute(const QualifiedName&, const AtomString&) final;
     bool isPresentationAttribute(const QualifiedName&) const final;
-    void collectStyleForPresentationAttribute(const QualifiedName&, const AtomicString&, MutableStyleProperties&) final;
+    void collectStyleForPresentationAttribute(const QualifiedName&, const AtomString&, MutableStyleProperties&) final;
     bool isVideo() const final { return true; }
     bool hasVideo() const final { return player() && player()->hasVideo(); }
     bool supportsFullscreen(HTMLMediaElementEnums::VideoFullscreenMode) const final;
     bool isURLAttribute(const Attribute&) const final;
-    const AtomicString& imageSourceURL() const final;
+    const AtomString& imageSourceURL() const final;
 
     bool hasAvailableVideoFrame() const;
     void updateDisplayState() final;
     void didMoveToNewDocument(Document& oldDocument, Document& newDocument) final;
     void setDisplayMode(DisplayMode) final;
 
     PlatformMediaSession::MediaType presentationType() const final { return PlatformMediaSession::Video; }
 
     std::unique_ptr<HTMLImageLoader> m_imageLoader;
 
-    AtomicString m_defaultPosterURL;
+    AtomString m_defaultPosterURL;
 
     unsigned m_lastReportedVideoWidth { 0 };
     unsigned m_lastReportedVideoHeight { 0 };
 };
 
