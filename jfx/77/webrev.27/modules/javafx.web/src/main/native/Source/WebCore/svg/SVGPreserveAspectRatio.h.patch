diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPreserveAspectRatio.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPreserveAspectRatio.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPreserveAspectRatio.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPreserveAspectRatio.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -24,77 +24,65 @@
  */
 
 #pragma once
 
 #include "SVGPreserveAspectRatioValue.h"
-#include "SVGPropertyTearOff.h"
+#include "SVGValueProperty.h"
 
 namespace WebCore {
 
-class SVGPreserveAspectRatio : public SVGPropertyTearOff<SVGPreserveAspectRatioValue> {
-public:
-    static Ref<SVGPreserveAspectRatio> create(SVGAnimatedProperty& animatedProperty, SVGPropertyRole role, SVGPreserveAspectRatioValue& value)
-    {
-        return adoptRef(*new SVGPreserveAspectRatio(animatedProperty, role, value));
-    }
+class SVGPreserveAspectRatio : public SVGValueProperty<SVGPreserveAspectRatioValue> {
+    using Base = SVGValueProperty<SVGPreserveAspectRatioValue>;
+    using Base::Base;
+    using Base::m_value;
 
-    static Ref<SVGPreserveAspectRatio> create(const SVGPreserveAspectRatioValue& initialValue = { })
+public:
+    static Ref<SVGPreserveAspectRatio> create(SVGPropertyOwner* owner, SVGPropertyAccess access, const SVGPreserveAspectRatioValue& value = { })
     {
-        return adoptRef(*new SVGPreserveAspectRatio(initialValue));
+        return adoptRef(*new SVGPreserveAspectRatio(owner, access, value));
     }
 
-    template<typename T> static ExceptionOr<Ref<SVGPreserveAspectRatio>> create(ExceptionOr<T>&& initialValue)
+    template<typename T>
+    static ExceptionOr<Ref<SVGPreserveAspectRatio>> create(ExceptionOr<T>&& value)
     {
-        if (initialValue.hasException())
-            return initialValue.releaseException();
-        return create(initialValue.releaseReturnValue());
+        if (value.hasException())
+            return value.releaseException();
+        return adoptRef(*new SVGPreserveAspectRatio(value.releaseReturnValue()));
     }
 
-    unsigned short align()
-    {
-        return propertyReference().align();
-    }
+    unsigned short align() const { return m_value.align(); }
 
     ExceptionOr<void> setAlign(float value)
     {
         if (isReadOnly())
             return Exception { NoModificationAllowedError };
 
-        auto result = propertyReference().setAlign(value);
+        auto result = m_value.setAlign(value);
         if (result.hasException())
             return result;
 
         commitChange();
         return result;
     }
 
-    unsigned short meetOrSlice()
-    {
-        return propertyReference().meetOrSlice();
-    }
+    unsigned short meetOrSlice() const { return m_value.meetOrSlice(); }
 
     ExceptionOr<void> setMeetOrSlice(float value)
     {
         if (isReadOnly())
             return Exception { NoModificationAllowedError };
 
-        auto result = propertyReference().setMeetOrSlice(value);
+        auto result = m_value.setMeetOrSlice(value);
         if (result.hasException())
             return result;
 
         commitChange();
         return result;
     }
 
-private:
-    SVGPreserveAspectRatio(SVGAnimatedProperty& animatedProperty, SVGPropertyRole role, SVGPreserveAspectRatioValue& value)
-        : SVGPropertyTearOff<SVGPreserveAspectRatioValue>(&animatedProperty, role, value)
-    {
-    }
-
-    explicit SVGPreserveAspectRatio(const SVGPreserveAspectRatioValue& initialValue)
-        : SVGPropertyTearOff<SVGPreserveAspectRatioValue>(initialValue)
+    String valueAsString() const override
     {
+        return m_value.valueAsString();
     }
 };
 
 } // namespace WebCore
