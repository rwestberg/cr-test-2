diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUSwapChain.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUSwapChain.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUSwapChain.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUSwapChain.h
@@ -26,10 +26,11 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "GPUTexture.h"
+#include <wtf/OptionSet.h>
 #include <wtf/RefPtr.h>
 #include <wtf/RetainPtr.h>
 
 OBJC_CLASS CALayer;
 OBJC_CLASS CAMetalDrawable;
@@ -37,33 +38,41 @@
 
 namespace WebCore {
 
 class GPUDevice;
 
+struct GPUSwapChainDescriptor;
+
 enum class GPUTextureFormat;
 
 using PlatformDrawableSmartPtr = RetainPtr<CAMetalDrawable>;
 using PlatformLayer = CALayer;
 using PlatformSwapLayerSmartPtr = RetainPtr<WebGPULayer>;
 
 class GPUSwapChain : public RefCounted<GPUSwapChain> {
 public:
-    static RefPtr<GPUSwapChain> create();
+    static RefPtr<GPUSwapChain> tryCreate(const GPUSwapChainDescriptor&, int width, int height);
 
-    void setDevice(const GPUDevice&);
-    void setFormat(GPUTextureFormat);
-    void reshape(int width, int height);
-    RefPtr<GPUTexture> getNextTexture();
-    void present();
+    RefPtr<GPUTexture> tryGetCurrentTexture();
+
+#if USE(METAL)
+    RetainPtr<CAMetalDrawable> takeDrawable();
+#endif
 
+    // For GPUCanvasContext.
     PlatformLayer* platformLayer() const;
 
+    void present();
+    void reshape(int width, int height);
+    void destroy() { m_currentDrawable = nullptr; }
+
 private:
-    GPUSwapChain(PlatformSwapLayerSmartPtr&&);
+    GPUSwapChain(PlatformSwapLayerSmartPtr&&, OptionSet<GPUTextureUsage::Flags>);
 
     PlatformSwapLayerSmartPtr m_platformSwapLayer;
     PlatformDrawableSmartPtr m_currentDrawable;
+    OptionSet<GPUTextureUsage::Flags> m_usage;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(WEBGPU)
