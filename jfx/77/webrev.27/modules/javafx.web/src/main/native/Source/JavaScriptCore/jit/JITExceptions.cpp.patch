diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITExceptions.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITExceptions.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITExceptions.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITExceptions.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2012-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2012-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -41,26 +41,26 @@
 #include "ShadowChicken.h"
 #include "VMInlines.h"
 
 namespace JSC {
 
-void genericUnwind(VM* vm, ExecState* callFrame)
+void genericUnwind(VM& vm, ExecState* callFrame)
 {
-    auto scope = DECLARE_CATCH_SCOPE(*vm);
-    CallFrame* topJSCallFrame = vm->topJSCallFrame();
+    auto scope = DECLARE_CATCH_SCOPE(vm);
+    CallFrame* topJSCallFrame = vm.topJSCallFrame();
     if (Options::breakOnThrow()) {
         CodeBlock* codeBlock = topJSCallFrame->codeBlock();
         dataLog("In call frame ", RawPointer(topJSCallFrame), " for code block ", codeBlock, "\n");
         CRASH();
     }
 
-    if (auto* shadowChicken = vm->shadowChicken())
-        shadowChicken->log(*vm, topJSCallFrame, ShadowChicken::Packet::throwPacket());
+    if (auto* shadowChicken = vm.shadowChicken())
+        shadowChicken->log(vm, topJSCallFrame, ShadowChicken::Packet::throwPacket());
 
     Exception* exception = scope.exception();
     RELEASE_ASSERT(exception);
-    HandlerInfo* handler = vm->interpreter->unwind(*vm, callFrame, exception); // This may update callFrame.
+    HandlerInfo* handler = vm.interpreter->unwind(vm, callFrame, exception); // This may update callFrame.
 
     void* catchRoutine;
     const Instruction* catchPCForInterpreter = nullptr;
     if (handler) {
         // handler->target is meaningless for getting a code offset when catching
@@ -72,23 +72,26 @@
         if (!JITCode::isOptimizingJIT(callFrame->codeBlock()->jitType()))
             catchPCForInterpreter = callFrame->codeBlock()->instructions().at(handler->target).ptr();
 #if ENABLE(JIT)
         catchRoutine = handler->nativeCode.executableAddress();
 #else
-        catchRoutine = catchPCForInterpreter->isWide()
-            ? LLInt::getWideCodePtr(catchPCForInterpreter->opcodeID())
-            : LLInt::getCodePtr(catchPCForInterpreter->opcodeID());
+        if (catchPCForInterpreter->isWide32())
+            catchRoutine = LLInt::getWide32CodePtr(catchPCForInterpreter->opcodeID());
+        else if (catchPCForInterpreter->isWide16())
+            catchRoutine = LLInt::getWide16CodePtr(catchPCForInterpreter->opcodeID());
+        else
+            catchRoutine = LLInt::getCodePtr(catchPCForInterpreter->opcodeID());
 #endif
     } else
         catchRoutine = LLInt::getCodePtr<ExceptionHandlerPtrTag>(handleUncaughtException).executableAddress();
 
-    ASSERT(bitwise_cast<uintptr_t>(callFrame) < bitwise_cast<uintptr_t>(vm->topEntryFrame));
+    ASSERT(bitwise_cast<uintptr_t>(callFrame) < bitwise_cast<uintptr_t>(vm.topEntryFrame));
 
     assertIsTaggedWith(catchRoutine, ExceptionHandlerPtrTag);
-    vm->callFrameForCatch = callFrame;
-    vm->targetMachinePCForThrow = catchRoutine;
-    vm->targetInterpreterPCForThrow = catchPCForInterpreter;
+    vm.callFrameForCatch = callFrame;
+    vm.targetMachinePCForThrow = catchRoutine;
+    vm.targetInterpreterPCForThrow = catchPCForInterpreter;
 
     RELEASE_ASSERT(catchRoutine);
 }
 
 } // namespace JSC
