diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/Nodes.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/Nodes.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/Nodes.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/Nodes.h
@@ -202,19 +202,26 @@
         virtual bool isMetaProperty() const { return false; }
         virtual bool isNewTarget() const { return false; }
         virtual bool isImportMeta() const { return false; }
         virtual bool isBytecodeIntrinsicNode() const { return false; }
         virtual bool isBinaryOpNode() const { return false; }
+        virtual bool isFunctionCall() const { return false; }
+        virtual bool isDeleteNode() const { return false; }
+        virtual bool isOptionalChain() const { return false; }
 
         virtual void emitBytecodeInConditionContext(BytecodeGenerator&, Label&, Label&, FallThroughMode);
 
         virtual ExpressionNode* stripUnaryPlus() { return this; }
 
         ResultType resultDescriptor() const { return m_resultType; }
 
+        bool isOptionalChainBase() const { return m_isOptionalChainBase; }
+        void setIsOptionalChainBase() { m_isOptionalChainBase = true; }
+
     private:
         ResultType m_resultType;
+        bool m_isOptionalChainBase { false };
     };
 
     class StatementNode : public Node {
     protected:
         StatementNode(const JSTokenLocation&);
@@ -867,20 +874,24 @@
         EvalFunctionCallNode(const JSTokenLocation&, ArgumentsNode*, const JSTextPosition& divot, const JSTextPosition& divotStart, const JSTextPosition& divotEnd);
 
     private:
         RegisterID* emitBytecode(BytecodeGenerator&, RegisterID* = 0) override;
 
+        bool isFunctionCall() const override { return true; }
+
         ArgumentsNode* m_args;
     };
 
     class FunctionCallValueNode final : public ExpressionNode, public ThrowableExpressionData {
     public:
         FunctionCallValueNode(const JSTokenLocation&, ExpressionNode*, ArgumentsNode*, const JSTextPosition& divot, const JSTextPosition& divotStart, const JSTextPosition& divotEnd);
 
     private:
         RegisterID* emitBytecode(BytecodeGenerator&, RegisterID* = 0) override;
 
+        bool isFunctionCall() const override { return true; }
+
         ExpressionNode* m_expr;
         ArgumentsNode* m_args;
     };
 
     class FunctionCallResolveNode final : public ExpressionNode, public ThrowableExpressionData {
@@ -888,10 +899,12 @@
         FunctionCallResolveNode(const JSTokenLocation&, const Identifier&, ArgumentsNode*, const JSTextPosition& divot, const JSTextPosition& divotStart, const JSTextPosition& divotEnd);
 
     private:
         RegisterID* emitBytecode(BytecodeGenerator&, RegisterID* = 0) override;
 
+        bool isFunctionCall() const override { return true; }
+
         const Identifier& m_ident;
         ArgumentsNode* m_args;
     };
 
     class FunctionCallBracketNode final : public ExpressionNode, public ThrowableSubExpressionData {
@@ -899,10 +912,12 @@
         FunctionCallBracketNode(const JSTokenLocation&, ExpressionNode* base, ExpressionNode* subscript, bool subscriptHasAssignments, ArgumentsNode*, const JSTextPosition& divot, const JSTextPosition& divotStart, const JSTextPosition& divotEnd);
 
     private:
         RegisterID* emitBytecode(BytecodeGenerator&, RegisterID* = 0) override;
 
+        bool isFunctionCall() const override { return true; }
+
         ExpressionNode* m_base;
         ExpressionNode* m_subscript;
         ArgumentsNode* m_args;
         bool m_subscriptHasAssignments;
     };
@@ -913,10 +928,12 @@
 
     private:
         RegisterID* emitBytecode(BytecodeGenerator&, RegisterID* = 0) override;
 
     protected:
+        bool isFunctionCall() const override { return true; }
+
         ExpressionNode* m_base;
         const Identifier& m_ident;
         ArgumentsNode* m_args;
     };
 
@@ -943,10 +960,12 @@
 #undef JSC_DECLARE_BYTECODE_INTRINSIC_FUNCTIONS
 
     private:
         RegisterID* emitBytecode(BytecodeGenerator&, RegisterID* = 0) override;
 
+        bool isFunctionCall() const override { return m_type == Type::Function; }
+
         EmitterType m_emitter;
         const Identifier& m_ident;
         ArgumentsNode* m_args;
         Type m_type;
     };
@@ -974,20 +993,24 @@
         DeleteResolveNode(const JSTokenLocation&, const Identifier&, const JSTextPosition& divot, const JSTextPosition& divotStart, const JSTextPosition& divotEnd);
 
     private:
         RegisterID* emitBytecode(BytecodeGenerator&, RegisterID* = 0) override;
 
+        bool isDeleteNode() const final { return true; }
+
         const Identifier& m_ident;
     };
 
     class DeleteBracketNode final : public ExpressionNode, public ThrowableExpressionData {
     public:
         DeleteBracketNode(const JSTokenLocation&, ExpressionNode* base, ExpressionNode* subscript, const JSTextPosition& divot, const JSTextPosition& divotStart, const JSTextPosition& divotEnd);
 
     private:
         RegisterID* emitBytecode(BytecodeGenerator&, RegisterID* = 0) override;
 
+        bool isDeleteNode() const final { return true; }
+
         ExpressionNode* m_base;
         ExpressionNode* m_subscript;
     };
 
     class DeleteDotNode final : public ExpressionNode, public ThrowableExpressionData {
@@ -995,10 +1018,12 @@
         DeleteDotNode(const JSTokenLocation&, ExpressionNode* base, const Identifier&, const JSTextPosition& divot, const JSTextPosition& divotStart, const JSTextPosition& divotEnd);
 
     private:
         RegisterID* emitBytecode(BytecodeGenerator&, RegisterID* = 0) override;
 
+        bool isDeleteNode() const final { return true; }
+
         ExpressionNode* m_base;
         const Identifier& m_ident;
     };
 
     class DeleteValueNode final : public ExpressionNode {
@@ -1006,10 +1031,12 @@
         DeleteValueNode(const JSTokenLocation&, ExpressionNode*);
 
     private:
         RegisterID* emitBytecode(BytecodeGenerator&, RegisterID* = 0) override;
 
+        bool isDeleteNode() const final { return true; }
+
         ExpressionNode* m_expr;
     };
 
     class VoidNode final : public ExpressionNode {
     public:
@@ -1290,10 +1317,38 @@
         LogicalOperator m_operator;
         ExpressionNode* m_expr1;
         ExpressionNode* m_expr2;
     };
 
+    class CoalesceNode final : public ExpressionNode {
+    public:
+        CoalesceNode(const JSTokenLocation&, ExpressionNode* expr1, ExpressionNode* expr2, bool);
+
+    private:
+        RegisterID* emitBytecode(BytecodeGenerator&, RegisterID* = nullptr) final;
+
+        ExpressionNode* m_expr1;
+        ExpressionNode* m_expr2;
+        bool m_hasAbsorbedOptionalChain;
+    };
+
+    class OptionalChainNode final : public ExpressionNode {
+    public:
+        OptionalChainNode(const JSTokenLocation&, ExpressionNode*, bool);
+
+        void setExpr(ExpressionNode* expr) { m_expr = expr; }
+        ExpressionNode* expr() const { return m_expr; }
+
+    private:
+        RegisterID* emitBytecode(BytecodeGenerator&, RegisterID* = nullptr) final;
+
+        bool isOptionalChain() const final { return true; }
+
+        ExpressionNode* m_expr;
+        bool m_isOutermost;
+    };
+
     // The ternary operator, "m_logical ? m_expr1 : m_expr2"
     class ConditionalNode final : public ExpressionNode {
     public:
         ConditionalNode(const JSTokenLocation&, ExpressionNode* logical, ExpressionNode* expr1, ExpressionNode* expr2);
 
@@ -1742,10 +1797,15 @@
         bool hasCapturedVariables() const { return m_varDeclarations.hasCapturedVariables(); }
         bool captures(UniquedStringImpl* uid) { return m_varDeclarations.captures(uid); }
         bool captures(const Identifier& ident) { return captures(ident.impl()); }
         bool hasSloppyModeHoistedFunction(UniquedStringImpl* uid) const { return m_sloppyModeHoistedFunctions.contains(uid); }
 
+        bool needsNewTargetRegisterForThisScope() const
+        {
+            return usesSuperCall() || usesNewTarget();
+        }
+
         VariableEnvironment& varDeclarations() { return m_varDeclarations; }
 
         int neededConstants()
         {
             // We may need 2 more constants than the count given by the parser,
@@ -1992,12 +2052,10 @@
 
         void overrideName(const Identifier& ident) { m_ident = ident; }
         const Identifier& ident() { return m_ident; }
         void setEcmaName(const Identifier& ecmaName) { m_ecmaName = ecmaName; }
         const Identifier& ecmaName() { return m_ident.isEmpty() ? m_ecmaName : m_ident; }
-        void setInferredName(const Identifier& inferredName) { ASSERT(!inferredName.isNull()); m_inferredName = inferredName; }
-        const Identifier& inferredName() { return m_inferredName.isEmpty() ? m_ident : m_inferredName; }
 
         FunctionMode functionMode() { return m_functionMode; }
 
         int functionNameStart() const { return m_functionNameStart; }
         int functionKeywordStart() const { return m_functionKeywordStart; }
@@ -2037,14 +2095,13 @@
         unsigned m_isInStrictContext : 1;
         unsigned m_superBinding : 1;
         unsigned m_constructorKind : 2;
         unsigned m_isArrowFunctionBodyExpression : 1;
         SourceParseMode m_parseMode;
+        FunctionMode m_functionMode;
         Identifier m_ident;
         Identifier m_ecmaName;
-        Identifier m_inferredName;
-        FunctionMode m_functionMode;
         unsigned m_startColumn;
         unsigned m_endColumn;
         int m_functionKeywordStart;
         int m_functionNameStart;
         int m_parametersStart;
