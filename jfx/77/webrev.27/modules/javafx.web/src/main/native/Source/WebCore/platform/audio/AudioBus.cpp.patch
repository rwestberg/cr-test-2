diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/AudioBus.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/AudioBus.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/AudioBus.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/AudioBus.cpp
@@ -62,11 +62,11 @@
     , m_sampleRate(0)
 {
     m_channels.reserveInitialCapacity(numberOfChannels);
 
     for (unsigned i = 0; i < numberOfChannels; ++i) {
-        auto channel = allocate ? std::make_unique<AudioChannel>(length) : std::make_unique<AudioChannel>(nullptr, length);
+        auto channel = allocate ? makeUnique<AudioChannel>(length) : makeUnique<AudioChannel>(nullptr, length);
         m_channels.uncheckedAppend(WTFMove(channel));
     }
 
     m_layout = LayoutCanonical; // for now this is the only layout we define
 }
@@ -487,11 +487,11 @@
     // FIXME: framesToDezipper could be smaller when target gain is close enough within this process loop.
     unsigned framesToDezipper = (gainDiff < epsilon) ? 0 : framesToProcess;
 
     if (framesToDezipper) {
         if (!m_dezipperGainValues.get() || m_dezipperGainValues->size() < framesToDezipper)
-            m_dezipperGainValues = std::make_unique<AudioFloatArray>(framesToDezipper);
+            m_dezipperGainValues = makeUnique<AudioFloatArray>(framesToDezipper);
 
         float* gainValues = m_dezipperGainValues->data();
         for (unsigned i = 0; i < framesToDezipper; ++i) {
             gain += (totalDesiredGain - gain) * DezipperRate;
 
