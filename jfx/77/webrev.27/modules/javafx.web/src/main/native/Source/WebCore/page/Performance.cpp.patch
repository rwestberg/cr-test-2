diff a/modules/javafx.web/src/main/native/Source/WebCore/page/Performance.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/Performance.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/Performance.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/Performance.cpp
@@ -31,10 +31,11 @@
  */
 
 #include "config.h"
 #include "Performance.h"
 
+#include "CustomHeaderFields.h"
 #include "Document.h"
 #include "DocumentLoader.h"
 #include "Event.h"
 #include "EventNames.h"
 #include "Frame.h"
@@ -44,13 +45,16 @@
 #include "PerformanceResourceTiming.h"
 #include "PerformanceTiming.h"
 #include "PerformanceUserTiming.h"
 #include "ResourceResponse.h"
 #include "ScriptExecutionContext.h"
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(Performance);
+
 Performance::Performance(ScriptExecutionContext* context, MonotonicTime timeOrigin)
     : ContextDestructionObserver(context)
     , m_resourceTimingBufferFullTimer(*this, &Performance::resourceTimingBufferFullTimerFired)
     , m_timeOrigin(timeOrigin)
     , m_performanceTimelineTaskQueue(context)
@@ -176,10 +180,12 @@
     m_resourceTimingBufferFullFlag = false;
 }
 
 void Performance::addResourceTiming(ResourceTiming&& resourceTiming)
 {
+    ASSERT(scriptExecutionContext());
+
     auto entry = PerformanceResourceTiming::create(m_timeOrigin, WTFMove(resourceTiming));
 
     if (m_waitingForBackupBufferToBeProcessed) {
         m_backupResourceTimingBuffer.append(WTFMove(entry));
         return;
@@ -212,15 +218,19 @@
 void Performance::resourceTimingBufferFullTimerFired()
 {
     ASSERT(scriptExecutionContext());
 
     while (!m_backupResourceTimingBuffer.isEmpty()) {
+        auto beforeCount = m_backupResourceTimingBuffer.size();
+
         auto backupBuffer = WTFMove(m_backupResourceTimingBuffer);
         ASSERT(m_backupResourceTimingBuffer.isEmpty());
 
-        m_resourceTimingBufferFullFlag = true;
-        dispatchEvent(Event::create(eventNames().resourcetimingbufferfullEvent, Event::CanBubble::No, Event::IsCancelable::No));
+        if (isResourceTimingBufferFull()) {
+            m_resourceTimingBufferFullFlag = true;
+            dispatchEvent(Event::create(eventNames().resourcetimingbufferfullEvent, Event::CanBubble::No, Event::IsCancelable::No));
+        }
 
         if (m_resourceTimingBufferFullFlag) {
             for (auto& entry : backupBuffer)
                 queueEntry(*entry);
             // Dispatching resourcetimingbufferfull event may have inserted more entries.
@@ -239,18 +249,25 @@
                 m_resourceTimingBuffer.append(entry.copyRef());
                 queueEntry(*entry);
             } else
                 m_backupResourceTimingBuffer.append(entry.copyRef());
         }
+
+        auto afterCount = m_backupResourceTimingBuffer.size();
+
+        if (beforeCount <= afterCount) {
+            m_backupResourceTimingBuffer.clear();
+            break;
+        }
     }
     m_waitingForBackupBufferToBeProcessed = false;
 }
 
 ExceptionOr<void> Performance::mark(const String& markName)
 {
     if (!m_userTiming)
-        m_userTiming = std::make_unique<UserTiming>(*this);
+        m_userTiming = makeUnique<UserTiming>(*this);
 
     auto result = m_userTiming->mark(markName);
     if (result.hasException())
         return result.releaseException();
 
@@ -260,18 +277,18 @@
 }
 
 void Performance::clearMarks(const String& markName)
 {
     if (!m_userTiming)
-        m_userTiming = std::make_unique<UserTiming>(*this);
+        m_userTiming = makeUnique<UserTiming>(*this);
     m_userTiming->clearMarks(markName);
 }
 
 ExceptionOr<void> Performance::measure(const String& measureName, const String& startMark, const String& endMark)
 {
     if (!m_userTiming)
-        m_userTiming = std::make_unique<UserTiming>(*this);
+        m_userTiming = makeUnique<UserTiming>(*this);
 
     auto result = m_userTiming->measure(measureName, startMark, endMark);
     if (result.hasException())
         return result.releaseException();
 
@@ -281,11 +298,11 @@
 }
 
 void Performance::clearMeasures(const String& measureName)
 {
     if (!m_userTiming)
-        m_userTiming = std::make_unique<UserTiming>(*this);
+        m_userTiming = makeUnique<UserTiming>(*this);
     m_userTiming->clearMeasures(measureName);
 }
 
 void Performance::removeAllObservers()
 {
