diff a/modules/javafx.web/src/main/native/Source/WebCore/testing/ServiceWorkerInternals.cpp b/modules/javafx.web/src/main/native/Source/WebCore/testing/ServiceWorkerInternals.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/testing/ServiceWorkerInternals.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/testing/ServiceWorkerInternals.cpp
@@ -66,18 +66,18 @@
     return event;
 }
 
 Ref<FetchResponse> ServiceWorkerInternals::createOpaqueWithBlobBodyResponse(ScriptExecutionContext& context)
 {
-    auto blob = Blob::create();
+    auto blob = Blob::create(context.sessionID());
     auto formData = FormData::create();
     formData->appendBlob(blob->url());
 
     ResourceResponse response;
     response.setType(ResourceResponse::Type::Cors);
     response.setTainting(ResourceResponse::Tainting::Opaque);
-    auto fetchResponse = FetchResponse::create(context, FetchBody::fromFormData(formData), FetchHeaders::Guard::Response, WTFMove(response));
+    auto fetchResponse = FetchResponse::create(context, FetchBody::fromFormData(context.sessionID(), formData), FetchHeaders::Guard::Response, WTFMove(response));
     fetchResponse->initializeOpaqueLoadIdentifierForTesting();
     return fetchResponse;
 }
 
 Vector<String> ServiceWorkerInternals::fetchResponseHeaderList(FetchResponse& response)
@@ -87,8 +87,21 @@
     for (auto keyValue : response.internalResponseHeaders())
         headerNames.uncheckedAppend(keyValue.key);
     return headerNames;
 }
 
+#if !PLATFORM(MAC)
+String ServiceWorkerInternals::processName() const
+{
+    return "none"_s;
+}
+#endif
+
+bool ServiceWorkerInternals::isThrottleable() const
+{
+    auto* connection = SWContextManager::singleton().connection();
+    return connection ? connection->isThrottleable() : true;
+}
+
 } // namespace WebCore
 
 #endif
