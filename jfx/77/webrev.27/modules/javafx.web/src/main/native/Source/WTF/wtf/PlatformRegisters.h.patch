diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/PlatformRegisters.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/PlatformRegisters.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/PlatformRegisters.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/PlatformRegisters.h
@@ -1,7 +1,8 @@
 /*
  * Copyright (C) 2017 Yusuke Suzuki <utatane.tea@gmail.com>
+ * Copyright (C) 2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -89,6 +90,73 @@
 
 #endif
 
 } // namespace WTF
 
+#if USE(PLATFORM_REGISTERS_WITH_PROFILE)
+#if CPU(ARM64E)
+
+namespace WTF {
+
+extern void* threadStateLRInternal(PlatformRegisters&);
+extern void* threadStatePCInternal(PlatformRegisters&);
+
+} // namespace WTF
+
+using WTF::threadStateLRInternal;
+using WTF::threadStatePCInternal;
+
+#else // not CPU(ARM64E)
+
+#define threadStateLRInternal(regs) bitwise_cast<void*>(arm_thread_state64_get_lr(regs))
+#define threadStatePCInternal(regs) bitwise_cast<void*>(arm_thread_state64_get_pc(regs))
+
+#endif // CPU(ARM64E)
+
+#define WTF_READ_PLATFORM_REGISTERS_SP_WITH_PROFILE(regs) \
+    reinterpret_cast<void*>(arm_thread_state64_get_sp(const_cast<PlatformRegisters&>(regs)))
+
+#define WTF_WRITE_PLATFORM_REGISTERS_SP_WITH_PROFILE(regs, newPointer) \
+    arm_thread_state64_set_sp(regs, reinterpret_cast<uintptr_t>(newPointer))
+
+#define WTF_READ_PLATFORM_REGISTERS_FP_WITH_PROFILE(regs) \
+    reinterpret_cast<void*>(arm_thread_state64_get_fp(const_cast<PlatformRegisters&>(regs)))
+
+#define WTF_WRITE_PLATFORM_REGISTERS_FP_WITH_PROFILE(regs, newPointer) \
+    arm_thread_state64_set_fp(regs, reinterpret_cast<uintptr_t>(newPointer))
+
+#define WTF_READ_PLATFORM_REGISTERS_LR_WITH_PROFILE(regs) \
+    threadStateLRInternal(const_cast<PlatformRegisters&>(regs))
+
+#define WTF_WRITE_PLATFORM_REGISTERS_LR_WITH_PROFILE(regs, newPointer) \
+    arm_thread_state64_set_lr_fptr(regs, newPointer)
+
+#define WTF_READ_PLATFORM_REGISTERS_PC_WITH_PROFILE(regs) \
+    threadStatePCInternal(const_cast<PlatformRegisters&>(regs))
+
+#define WTF_WRITE_PLATFORM_REGISTERS_PC_WITH_PROFILE(regs, newPointer) \
+    arm_thread_state64_set_pc_fptr(regs, newPointer)
+
+#define WTF_READ_MACHINE_CONTEXT_SP_WITH_PROFILE(machineContext) \
+    WTF_READ_PLATFORM_REGISTERS_SP_WITH_PROFILE(machineContext->__ss)
+
+#define WTF_WRITE_MACHINE_CONTEXT_SP_WITH_PROFILE(machineContext, newPointer) \
+    WTF_WRITE_PLATFORM_REGISTERS_SP_WITH_PROFILE(machineContext->__ss, newPointer)
+
+#define WTF_READ_MACHINE_CONTEXT_FP_WITH_PROFILE(machineContext) \
+    WTF_READ_PLATFORM_REGISTERS_FP_WITH_PROFILE(machineContext->__ss)
+
+#define WTF_WRITE_MACHINE_CONTEXT_FP_WITH_PROFILE(machineContext, newPointer) \
+    WTF_WRITE_PLATFORM_REGISTERS_FP_WITH_PROFILE(machineContext->__ss, newPointer)
+
+#define WTF_WRITE_MACHINE_CONTEXT_LR_WITH_PROFILE(machineContext, newPointer) \
+    WTF_WRITE_PLATFORM_REGISTERS_LR_WITH_PROFILE(machineContext->__ss, newPointer)
+
+#define WTF_READ_MACHINE_CONTEXT_PC_WITH_PROFILE(machineContext) \
+    WTF_READ_PLATFORM_REGISTERS_PC_WITH_PROFILE(machineContext->__ss)
+
+#define WTF_WRITE_MACHINE_CONTEXT_PC_WITH_PROFILE(machineContext, newPointer) \
+    WTF_WRITE_PLATFORM_REGISTERS_PC_WITH_PROFILE(machineContext->__ss, newPointer)
+
+#endif // USE(PLATFORM_REGISTERS_WITH_PROFILE)
+
 using WTF::PlatformRegisters;
