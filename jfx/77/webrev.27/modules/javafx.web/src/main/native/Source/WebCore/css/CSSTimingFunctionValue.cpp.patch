diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSTimingFunctionValue.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSTimingFunctionValue.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSTimingFunctionValue.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSTimingFunctionValue.cpp
@@ -32,17 +32,17 @@
 
 String CSSCubicBezierTimingFunctionValue::customCSSText() const
 {
     StringBuilder builder;
     builder.appendLiteral("cubic-bezier(");
-    builder.appendNumber(m_x1);
+    builder.appendFixedPrecisionNumber(m_x1);
     builder.appendLiteral(", ");
-    builder.appendNumber(m_y1);
+    builder.appendFixedPrecisionNumber(m_y1);
     builder.appendLiteral(", ");
-    builder.appendNumber(m_x2);
+    builder.appendFixedPrecisionNumber(m_x2);
     builder.appendLiteral(", ");
-    builder.appendNumber(m_y2);
+    builder.appendFixedPrecisionNumber(m_y2);
     builder.append(')');
     return builder.toString();
 }
 
 bool CSSCubicBezierTimingFunctionValue::equals(const CSSCubicBezierTimingFunctionValue& other) const
@@ -69,17 +69,17 @@
 
 String CSSSpringTimingFunctionValue::customCSSText() const
 {
     StringBuilder builder;
     builder.appendLiteral("spring(");
-    builder.appendNumber(m_mass);
+    builder.appendFixedPrecisionNumber(m_mass);
     builder.append(' ');
-    builder.appendNumber(m_stiffness);
+    builder.appendFixedPrecisionNumber(m_stiffness);
     builder.append(' ');
-    builder.appendNumber(m_damping);
+    builder.appendFixedPrecisionNumber(m_damping);
     builder.append(' ');
-    builder.appendNumber(m_initialVelocity);
+    builder.appendFixedPrecisionNumber(m_initialVelocity);
     builder.append(')');
     return builder.toString();
 }
 
 bool CSSSpringTimingFunctionValue::equals(const CSSSpringTimingFunctionValue& other) const
