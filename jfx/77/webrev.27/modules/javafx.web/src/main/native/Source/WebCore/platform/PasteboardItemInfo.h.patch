diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/PasteboardItemInfo.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/PasteboardItemInfo.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/PasteboardItemInfo.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/PasteboardItemInfo.h
@@ -35,14 +35,43 @@
     Unspecified,
     Inline,
     Attachment
 };
 
+struct PresentationSize {
+    Optional<double> width;
+    Optional<double> height;
+
+    template<class Encoder> void encode(Encoder&) const;
+    template<class Decoder> static Optional<PresentationSize> decode(Decoder&);
+};
+
+template<class Encoder>
+void PresentationSize::encode(Encoder& encoder) const
+{
+    encoder << width << height;
+}
+
+template<class Decoder>
+Optional<PresentationSize> PresentationSize::decode(Decoder& decoder)
+{
+    PresentationSize result;
+    if (!decoder.decode(result.width))
+        return WTF::nullopt;
+
+    if (!decoder.decode(result.height))
+        return WTF::nullopt;
+
+    return WTFMove(result);
+}
+
 struct PasteboardItemInfo {
     Vector<String> pathsForFileUpload;
     Vector<String> contentTypesForFileUpload;
+    Vector<String> contentTypesByFidelity;
     String suggestedFileName;
+    PresentationSize preferredPresentationSize;
     bool isNonTextType { false };
     bool containsFileURLAndFileUploadContent { false };
     PasteboardItemPresentationStyle preferredPresentationStyle { PasteboardItemPresentationStyle::Unspecified };
 
     String pathForContentType(const String& type) const
@@ -53,27 +82,52 @@
             return { };
 
         return pathsForFileUpload[index];
     }
 
+    // The preferredPresentationStyle flag is platform API used by drag or copy sources to explicitly indicate
+    // that the data being written to the item provider should be treated as an attachment; unfortunately, not
+    // all clients attempt to set this flag, so we additionally take having a suggested filename as a strong
+    // indicator that the item should be treated as an attachment or file.
+    bool canBeTreatedAsAttachmentOrFile() const
+    {
+        switch (preferredPresentationStyle) {
+        case PasteboardItemPresentationStyle::Inline:
+            return false;
+        case PasteboardItemPresentationStyle::Attachment:
+            return true;
+        case PasteboardItemPresentationStyle::Unspecified:
+            return !suggestedFileName.isEmpty();
+        }
+        ASSERT_NOT_REACHED();
+        return false;
+    }
+
+    String contentTypeForHighestFidelityItem() const
+    {
+        if (contentTypesForFileUpload.isEmpty())
+            return { };
+
+        return contentTypesForFileUpload.first();
+    }
+
     String pathForHighestFidelityItem() const
     {
         if (pathsForFileUpload.isEmpty())
             return { };
 
-        ASSERT(!pathsForFileUpload.first().isEmpty());
         return pathsForFileUpload.first();
     }
 
     template<class Encoder> void encode(Encoder&) const;
     template<class Decoder> static Optional<PasteboardItemInfo> decode(Decoder&);
 };
 
 template<class Encoder>
 void PasteboardItemInfo::encode(Encoder& encoder) const
 {
-    encoder << pathsForFileUpload << contentTypesForFileUpload << suggestedFileName << isNonTextType << containsFileURLAndFileUploadContent;
+    encoder << pathsForFileUpload << contentTypesForFileUpload << contentTypesByFidelity << suggestedFileName << preferredPresentationSize << isNonTextType << containsFileURLAndFileUploadContent;
     encoder.encodeEnum(preferredPresentationStyle);
 }
 
 template<class Decoder>
 Optional<PasteboardItemInfo> PasteboardItemInfo::decode(Decoder& decoder)
@@ -83,13 +137,19 @@
         return WTF::nullopt;
 
     if (!decoder.decode(result.contentTypesForFileUpload))
         return WTF::nullopt;
 
+    if (!decoder.decode(result.contentTypesByFidelity))
+        return WTF::nullopt;
+
     if (!decoder.decode(result.suggestedFileName))
         return WTF::nullopt;
 
+    if (!decoder.decode(result.preferredPresentationSize))
+        return WTF::nullopt;
+
     if (!decoder.decode(result.isNonTextType))
         return WTF::nullopt;
 
     if (!decoder.decode(result.containsFileURLAndFileUploadContent))
         return WTF::nullopt;
