diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBResultData.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBResultData.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBResultData.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBResultData.cpp
@@ -55,19 +55,19 @@
     , m_error(other.m_error)
     , m_databaseConnectionIdentifier(other.m_databaseConnectionIdentifier)
     , m_resultInteger(other.m_resultInteger)
 {
     if (other.m_databaseInfo)
-        m_databaseInfo = std::make_unique<IDBDatabaseInfo>(*other.m_databaseInfo);
+        m_databaseInfo = makeUnique<IDBDatabaseInfo>(*other.m_databaseInfo);
     if (other.m_transactionInfo)
-        m_transactionInfo = std::make_unique<IDBTransactionInfo>(*other.m_transactionInfo);
+        m_transactionInfo = makeUnique<IDBTransactionInfo>(*other.m_transactionInfo);
     if (other.m_resultKey)
-        m_resultKey = std::make_unique<IDBKeyData>(*other.m_resultKey);
+        m_resultKey = makeUnique<IDBKeyData>(*other.m_resultKey);
     if (other.m_getResult)
-        m_getResult = std::make_unique<IDBGetResult>(*other.m_getResult);
+        m_getResult = makeUnique<IDBGetResult>(*other.m_getResult);
     if (other.m_getAllResult)
-        m_getAllResult = std::make_unique<IDBGetAllResult>(*other.m_getAllResult);
+        m_getAllResult = makeUnique<IDBGetAllResult>(*other.m_getAllResult);
 }
 
 IDBResultData::IDBResultData(const IDBResultData& that, IsolatedCopyTag)
 {
     isolatedCopy(that, *this);
@@ -85,19 +85,19 @@
     destination.m_error = source.m_error.isolatedCopy();
     destination.m_databaseConnectionIdentifier = source.m_databaseConnectionIdentifier;
     destination.m_resultInteger = source.m_resultInteger;
 
     if (source.m_databaseInfo)
-        destination.m_databaseInfo = std::make_unique<IDBDatabaseInfo>(*source.m_databaseInfo, IDBDatabaseInfo::IsolatedCopy);
+        destination.m_databaseInfo = makeUnique<IDBDatabaseInfo>(*source.m_databaseInfo, IDBDatabaseInfo::IsolatedCopy);
     if (source.m_transactionInfo)
-        destination.m_transactionInfo = std::make_unique<IDBTransactionInfo>(*source.m_transactionInfo, IDBTransactionInfo::IsolatedCopy);
+        destination.m_transactionInfo = makeUnique<IDBTransactionInfo>(*source.m_transactionInfo, IDBTransactionInfo::IsolatedCopy);
     if (source.m_resultKey)
-        destination.m_resultKey = std::make_unique<IDBKeyData>(*source.m_resultKey, IDBKeyData::IsolatedCopy);
+        destination.m_resultKey = makeUnique<IDBKeyData>(*source.m_resultKey, IDBKeyData::IsolatedCopy);
     if (source.m_getResult)
-        destination.m_getResult = std::make_unique<IDBGetResult>(*source.m_getResult, IDBGetResult::IsolatedCopy);
+        destination.m_getResult = makeUnique<IDBGetResult>(*source.m_getResult, IDBGetResult::IsolatedCopy);
     if (source.m_getAllResult)
-        destination.m_getAllResult = std::make_unique<IDBGetAllResult>(*source.m_getAllResult, IDBGetAllResult::IsolatedCopy);
+        destination.m_getAllResult = makeUnique<IDBGetAllResult>(*source.m_getAllResult, IDBGetAllResult::IsolatedCopy);
 }
 
 IDBResultData IDBResultData::error(const IDBResourceIdentifier& requestIdentifier, const IDBError& error)
 {
     IDBResultData result { requestIdentifier };
@@ -109,29 +109,29 @@
 IDBResultData IDBResultData::openDatabaseSuccess(const IDBResourceIdentifier& requestIdentifier, IDBServer::UniqueIDBDatabaseConnection& connection)
 {
     IDBResultData result { requestIdentifier };
     result.m_type = IDBResultType::OpenDatabaseSuccess;
     result.m_databaseConnectionIdentifier = connection.identifier();
-    result.m_databaseInfo = std::make_unique<IDBDatabaseInfo>(connection.database()->info());
+    result.m_databaseInfo = makeUnique<IDBDatabaseInfo>(connection.database()->info());
     return result;
 }
 
 
 IDBResultData IDBResultData::openDatabaseUpgradeNeeded(const IDBResourceIdentifier& requestIdentifier, IDBServer::UniqueIDBDatabaseTransaction& transaction)
 {
     IDBResultData result { requestIdentifier };
     result.m_type = IDBResultType::OpenDatabaseUpgradeNeeded;
     result.m_databaseConnectionIdentifier = transaction.databaseConnection().identifier();
-    result.m_databaseInfo = std::make_unique<IDBDatabaseInfo>(transaction.databaseConnection().database()->info());
-    result.m_transactionInfo = std::make_unique<IDBTransactionInfo>(transaction.info());
+    result.m_databaseInfo = makeUnique<IDBDatabaseInfo>(transaction.databaseConnection().database()->info());
+    result.m_transactionInfo = makeUnique<IDBTransactionInfo>(transaction.info());
     return result;
 }
 
 IDBResultData IDBResultData::deleteDatabaseSuccess(const IDBResourceIdentifier& requestIdentifier, const IDBDatabaseInfo& info)
 {
     IDBResultData result {IDBResultType::DeleteDatabaseSuccess, requestIdentifier };
-    result.m_databaseInfo = std::make_unique<IDBDatabaseInfo>(info);
+    result.m_databaseInfo = makeUnique<IDBDatabaseInfo>(info);
     return result;
 }
 
 IDBResultData IDBResultData::createObjectStoreSuccess(const IDBResourceIdentifier& requestIdentifier)
 {
@@ -169,25 +169,25 @@
 }
 
 IDBResultData IDBResultData::putOrAddSuccess(const IDBResourceIdentifier& requestIdentifier, const IDBKeyData& resultKey)
 {
     IDBResultData result { IDBResultType::PutOrAddSuccess, requestIdentifier };
-    result.m_resultKey = std::make_unique<IDBKeyData>(resultKey);
+    result.m_resultKey = makeUnique<IDBKeyData>(resultKey);
     return result;
 }
 
 IDBResultData IDBResultData::getRecordSuccess(const IDBResourceIdentifier& requestIdentifier, const IDBGetResult& getResult)
 {
     IDBResultData result { IDBResultType::GetRecordSuccess, requestIdentifier };
-    result.m_getResult = std::make_unique<IDBGetResult>(getResult);
+    result.m_getResult = makeUnique<IDBGetResult>(getResult);
     return result;
 }
 
 IDBResultData IDBResultData::getAllRecordsSuccess(const IDBResourceIdentifier& requestIdentifier, const IDBGetAllResult& getAllResult)
 {
     IDBResultData result { IDBResultType::GetAllRecordsSuccess, requestIdentifier };
-    result.m_getAllResult = std::make_unique<IDBGetAllResult>(getAllResult);
+    result.m_getAllResult = makeUnique<IDBGetAllResult>(getAllResult);
     return result;
 }
 
 IDBResultData IDBResultData::getCountSuccess(const IDBResourceIdentifier& requestIdentifier, uint64_t count)
 {
@@ -202,18 +202,18 @@
 }
 
 IDBResultData IDBResultData::openCursorSuccess(const IDBResourceIdentifier& requestIdentifier, const IDBGetResult& getResult)
 {
     IDBResultData result { IDBResultType::OpenCursorSuccess, requestIdentifier };
-    result.m_getResult = std::make_unique<IDBGetResult>(getResult);
+    result.m_getResult = makeUnique<IDBGetResult>(getResult);
     return result;
 }
 
 IDBResultData IDBResultData::iterateCursorSuccess(const IDBResourceIdentifier& requestIdentifier, const IDBGetResult& getResult)
 {
     IDBResultData result { IDBResultType::IterateCursorSuccess, requestIdentifier };
-    result.m_getResult = std::make_unique<IDBGetResult>(getResult);
+    result.m_getResult = makeUnique<IDBGetResult>(getResult);
     return result;
 }
 
 const IDBDatabaseInfo& IDBResultData::databaseInfo() const
 {
@@ -231,10 +231,16 @@
 {
     RELEASE_ASSERT(m_getResult);
     return *m_getResult;
 }
 
+IDBGetResult& IDBResultData::getResultRef()
+{
+    RELEASE_ASSERT(m_getResult);
+    return *m_getResult;
+}
+
 const IDBGetAllResult& IDBResultData::getAllResult() const
 {
     RELEASE_ASSERT(m_getAllResult);
     return *m_getAllResult;
 }
