diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/mediasource/MockSourceBufferPrivate.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/mediasource/MockSourceBufferPrivate.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/mediasource/MockSourceBufferPrivate.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/mediasource/MockSourceBufferPrivate.cpp
@@ -47,18 +47,18 @@
     virtual ~MockMediaSample() = default;
 
 private:
     MockMediaSample(const MockSampleBox& box)
         : m_box(box)
-        , m_id(AtomicString::number(box.trackID()))
+        , m_id(AtomString::number(box.trackID()))
     {
     }
 
     MediaTime presentationTime() const override { return m_box.presentationTimestamp(); }
     MediaTime decodeTime() const override { return m_box.decodeTimestamp(); }
     MediaTime duration() const override { return m_box.duration(); }
-    AtomicString trackID() const override { return m_id; }
+    AtomString trackID() const override { return m_id; }
     void setTrackID(const String& id) override { m_id = id; }
     size_t sizeInBytes() const override { return sizeof(m_box); }
     SampleFlags flags() const override;
     PlatformSample platformSample() override;
     FloatSize presentationSize() const override { return FloatSize(); }
@@ -70,11 +70,11 @@
     Ref<MediaSample> createNonDisplayingCopy() const override;
 
     unsigned generation() const { return m_box.generation(); }
 
     MockSampleBox m_box;
-    AtomicString m_id;
+    AtomString m_id;
 };
 
 MediaSample::SampleFlags MockMediaSample::flags() const
 {
     unsigned flags = None;
@@ -98,19 +98,19 @@
 
 Ref<MediaSample> MockMediaSample::createNonDisplayingCopy() const
 {
     auto copy = MockMediaSample::create(m_box);
     copy->m_box.setFlag(MockSampleBox::IsNonDisplaying);
-    return WTFMove(copy);
+    return copy;
 }
 
 class MockMediaDescription final : public MediaDescription {
 public:
     static Ref<MockMediaDescription> create(const MockTrackBox& box) { return adoptRef(*new MockMediaDescription(box)); }
     virtual ~MockMediaDescription() = default;
 
-    AtomicString codec() const override { return m_box.codec(); }
+    AtomString codec() const override { return m_box.codec(); }
     bool isVideo() const override { return m_box.kind() == MockTrackBox::Video; }
     bool isAudio() const override { return m_box.kind() == MockTrackBox::Audio; }
     bool isText() const override { return m_box.kind() == MockTrackBox::Text; }
 
 protected:
@@ -233,24 +233,49 @@
 {
     if (m_mediaSource)
         m_mediaSource->sourceBufferPrivateDidChangeActiveState(this, isActive);
 }
 
-Vector<String> MockSourceBufferPrivate::enqueuedSamplesForTrackID(const AtomicString&)
+Vector<String> MockSourceBufferPrivate::enqueuedSamplesForTrackID(const AtomString&)
 {
     return m_enqueuedSamples;
 }
 
+MediaTime MockSourceBufferPrivate::minimumUpcomingPresentationTimeForTrackID(const AtomString&)
+{
+    return m_minimumUpcomingPresentationTime;
+}
+
+void MockSourceBufferPrivate::setMaximumQueueDepthForTrackID(const AtomString&, size_t maxQueueDepth)
+{
+    m_maxQueueDepth = maxQueueDepth;
+}
+
+bool MockSourceBufferPrivate::canSetMinimumUpcomingPresentationTime(const AtomString&) const
+{
+    return true;
+}
+
+void MockSourceBufferPrivate::setMinimumUpcomingPresentationTime(const AtomString&, const MediaTime& presentationTime)
+{
+    m_minimumUpcomingPresentationTime = presentationTime;
+}
+
+void MockSourceBufferPrivate::clearMinimumUpcomingPresentationTime(const AtomString&)
+{
+    m_minimumUpcomingPresentationTime = MediaTime::invalidTime();
+}
+
 bool MockSourceBufferPrivate::canSwitchToType(const ContentType& contentType)
 {
     MediaEngineSupportParameters parameters;
     parameters.isMediaSource = true;
     parameters.type = contentType;
     return MockMediaPlayerMediaSource::supportsType(parameters) != MediaPlayer::IsNotSupported;
 }
 
-void MockSourceBufferPrivate::enqueueSample(Ref<MediaSample>&& sample, const AtomicString&)
+void MockSourceBufferPrivate::enqueueSample(Ref<MediaSample>&& sample, const AtomString&)
 {
     if (!m_mediaSource)
         return;
 
     PlatformSample platformSample = sample->platformSample();
