diff a/modules/javafx.web/src/main/native/Source/WebCore/page/SettingsBase.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/SettingsBase.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/SettingsBase.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/SettingsBase.cpp
@@ -66,18 +66,18 @@
 // for dual G5s. :)
 static const Seconds layoutScheduleThreshold = 250_ms;
 
 SettingsBase::SettingsBase(Page* page)
     : m_page(nullptr)
-    , m_fontGenericFamilies(std::make_unique<FontGenericFamilies>())
+    , m_fontGenericFamilies(makeUnique<FontGenericFamilies>())
     , m_layoutInterval(layoutScheduleThreshold)
     , m_minimumDOMTimerInterval(DOMTimer::defaultMinimumInterval())
     , m_setImageLoadingSettingsTimer(*this, &SettingsBase::imageLoadingSettingsTimerFired)
 {
-    // A Frame may not have been created yet, so we initialize the AtomicString
+    // A Frame may not have been created yet, so we initialize the AtomString
     // hash before trying to use it.
-    AtomicString::init();
+    AtomString::init();
     initializeDefaultFontFamilies();
     m_page = page; // Page is not yet fully initialized when constructing Settings, so keeping m_page null over initializeDefaultFontFamilies() call.
 }
 
 SettingsBase::~SettingsBase() = default;
@@ -105,10 +105,19 @@
 #else
     return true;
 #endif
 }
 
+bool SettingsBase::defaultContentChangeObserverEnabled()
+{
+#if PLATFORM(IOS_FAMILY) && !PLATFORM(MACCATALYST)
+    return true;
+#else
+    return false;
+#endif
+}
+
 #if !PLATFORM(COCOA)
 const String& SettingsBase::defaultMediaContentTypesRequiringHardwareSupport()
 {
     return emptyString();
 }
@@ -126,88 +135,88 @@
 {
     return true;
 }
 #endif
 
-const AtomicString& SettingsBase::standardFontFamily(UScriptCode script) const
+const AtomString& SettingsBase::standardFontFamily(UScriptCode script) const
 {
     return m_fontGenericFamilies->standardFontFamily(script);
 }
 
-void SettingsBase::setStandardFontFamily(const AtomicString& family, UScriptCode script)
+void SettingsBase::setStandardFontFamily(const AtomString& family, UScriptCode script)
 {
     bool changes = m_fontGenericFamilies->setStandardFontFamily(family, script);
     if (changes)
         invalidateAfterGenericFamilyChange(m_page);
 }
 
-const AtomicString& SettingsBase::fixedFontFamily(UScriptCode script) const
+const AtomString& SettingsBase::fixedFontFamily(UScriptCode script) const
 {
     return m_fontGenericFamilies->fixedFontFamily(script);
 }
 
-void SettingsBase::setFixedFontFamily(const AtomicString& family, UScriptCode script)
+void SettingsBase::setFixedFontFamily(const AtomString& family, UScriptCode script)
 {
     bool changes = m_fontGenericFamilies->setFixedFontFamily(family, script);
     if (changes)
         invalidateAfterGenericFamilyChange(m_page);
 }
 
-const AtomicString& SettingsBase::serifFontFamily(UScriptCode script) const
+const AtomString& SettingsBase::serifFontFamily(UScriptCode script) const
 {
     return m_fontGenericFamilies->serifFontFamily(script);
 }
 
-void SettingsBase::setSerifFontFamily(const AtomicString& family, UScriptCode script)
+void SettingsBase::setSerifFontFamily(const AtomString& family, UScriptCode script)
 {
     bool changes = m_fontGenericFamilies->setSerifFontFamily(family, script);
     if (changes)
         invalidateAfterGenericFamilyChange(m_page);
 }
 
-const AtomicString& SettingsBase::sansSerifFontFamily(UScriptCode script) const
+const AtomString& SettingsBase::sansSerifFontFamily(UScriptCode script) const
 {
     return m_fontGenericFamilies->sansSerifFontFamily(script);
 }
 
-void SettingsBase::setSansSerifFontFamily(const AtomicString& family, UScriptCode script)
+void SettingsBase::setSansSerifFontFamily(const AtomString& family, UScriptCode script)
 {
     bool changes = m_fontGenericFamilies->setSansSerifFontFamily(family, script);
     if (changes)
         invalidateAfterGenericFamilyChange(m_page);
 }
 
-const AtomicString& SettingsBase::cursiveFontFamily(UScriptCode script) const
+const AtomString& SettingsBase::cursiveFontFamily(UScriptCode script) const
 {
     return m_fontGenericFamilies->cursiveFontFamily(script);
 }
 
-void SettingsBase::setCursiveFontFamily(const AtomicString& family, UScriptCode script)
+void SettingsBase::setCursiveFontFamily(const AtomString& family, UScriptCode script)
 {
     bool changes = m_fontGenericFamilies->setCursiveFontFamily(family, script);
     if (changes)
         invalidateAfterGenericFamilyChange(m_page);
 }
 
-const AtomicString& SettingsBase::fantasyFontFamily(UScriptCode script) const
+const AtomString& SettingsBase::fantasyFontFamily(UScriptCode script) const
 {
     return m_fontGenericFamilies->fantasyFontFamily(script);
 }
 
-void SettingsBase::setFantasyFontFamily(const AtomicString& family, UScriptCode script)
+void SettingsBase::setFantasyFontFamily(const AtomString& family, UScriptCode script)
 {
     bool changes = m_fontGenericFamilies->setFantasyFontFamily(family, script);
     if (changes)
         invalidateAfterGenericFamilyChange(m_page);
 }
 
-const AtomicString& SettingsBase::pictographFontFamily(UScriptCode script) const
+const AtomString& SettingsBase::pictographFontFamily(UScriptCode script) const
 {
     return m_fontGenericFamilies->pictographFontFamily(script);
 }
 
-void SettingsBase::setPictographFontFamily(const AtomicString& family, UScriptCode script)
+void SettingsBase::setPictographFontFamily(const AtomString& family, UScriptCode script)
 {
     bool changes = m_fontGenericFamilies->setPictographFontFamily(family, script);
     if (changes)
         invalidateAfterGenericFamilyChange(m_page);
 }
