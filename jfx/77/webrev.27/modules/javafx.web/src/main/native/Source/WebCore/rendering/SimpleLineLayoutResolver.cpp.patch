diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayoutResolver.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayoutResolver.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayoutResolver.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayoutResolver.cpp
@@ -204,11 +204,11 @@
     else
         adjustedY -= m_baseline - m_ascent;
     adjustedY = std::max<float>(adjustedY, 0);
     auto lineIndexCandidate =  std::min<unsigned>(adjustedY / m_lineHeight, m_layout.lineCount() - 1);
     if (m_layout.hasLineStruts())
-        return adjustLineIndexForStruts(y, type, lineIndexCandidate);
+        return adjustLineIndexForStruts(LayoutUnit(y), type, lineIndexCandidate);
     return lineIndexCandidate;
 }
 
 WTF::IteratorRange<RunResolver::Iterator> RunResolver::rangeForRect(const LayoutRect& rect) const
 {
@@ -297,22 +297,25 @@
 
 WTF::IteratorRange<RunResolver::Iterator> RunResolver::rangeForRendererWithOffsets(const RenderObject& renderer, unsigned startOffset, unsigned endOffset) const
 {
     ASSERT(startOffset <= endOffset);
     auto range = rangeForRenderer(renderer);
+    if (range.begin() == range.end())
+        return { end(), end() };
     auto it = range.begin();
-    // Advance to the firt run with the start offset inside.
+    auto localEnd = (*it).start() + endOffset;
+    // Advance to the first run with the start offset inside. Only the first node in a range can have a startOffset.
     while (it != range.end() && (*it).end() <= startOffset)
         ++it;
     if (it == range.end())
         return { end(), end() };
     auto rangeBegin = it;
     // Special case empty ranges that start at the edge of the run. Apparently normal line layout include those.
-    if (endOffset == startOffset && (*it).start() == endOffset)
+    if (localEnd == startOffset && (*it).start() == localEnd)
         return { rangeBegin, ++it };
     // Advance beyond the last run with the end offset.
-    while (it != range.end() && (*it).start() < endOffset)
+    while (it != range.end() && (*it).start() < localEnd)
         ++it;
     return { rangeBegin, it };
 }
 
 LineResolver::Iterator::Iterator(RunResolver::Iterator runIterator)
