diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/StructureStubClearingWatchpoint.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/StructureStubClearingWatchpoint.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/StructureStubClearingWatchpoint.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/StructureStubClearingWatchpoint.cpp
@@ -34,16 +34,19 @@
 
 namespace JSC {
 
 void StructureStubClearingWatchpoint::fireInternal(VM& vm, const FireDetail&)
 {
+    if (!m_holder->isValid())
+        return;
+
     if (!m_key || !m_key.isWatchable(PropertyCondition::EnsureWatchability)) {
         // This will implicitly cause my own demise: stub reset removes all watchpoints.
         // That works, because deleting a watchpoint removes it from the set's list, and
         // the set's list traversal for firing is robust against the set changing.
-        ConcurrentJSLocker locker(m_holder.codeBlock()->m_lock);
-        m_holder.stubInfo()->reset(m_holder.codeBlock());
+        ConcurrentJSLocker locker(m_holder->codeBlock()->m_lock);
+        m_holder->stubInfo()->reset(m_holder->codeBlock());
         return;
     }
 
     if (m_key.kind() == PropertyCondition::Presence) {
         // If this was a presence condition, let's watch the property for replacements. This is profitable
@@ -52,21 +55,26 @@
     }
 
     m_key.object()->structure(vm)->addTransitionWatchpoint(this);
 }
 
+inline bool WatchpointsOnStructureStubInfo::isValid() const
+{
+    return m_codeBlock->isLive();
+}
+
 StructureStubClearingWatchpoint* WatchpointsOnStructureStubInfo::addWatchpoint(const ObjectPropertyCondition& key)
 {
     return m_watchpoints.add(key, *this);
 }
 
 StructureStubClearingWatchpoint* WatchpointsOnStructureStubInfo::ensureReferenceAndAddWatchpoint(
     std::unique_ptr<WatchpointsOnStructureStubInfo>& holderRef, CodeBlock* codeBlock,
     StructureStubInfo* stubInfo, const ObjectPropertyCondition& key)
 {
     if (!holderRef)
-        holderRef = std::make_unique<WatchpointsOnStructureStubInfo>(codeBlock, stubInfo);
+        holderRef = makeUnique<WatchpointsOnStructureStubInfo>(codeBlock, stubInfo);
     else {
         ASSERT(holderRef->m_codeBlock == codeBlock);
         ASSERT(holderRef->m_stubInfo == stubInfo);
     }
 
