diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGLength.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGLength.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGLength.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGLength.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -24,15 +24,19 @@
  */
 
 #pragma once
 
 #include "SVGLengthValue.h"
-#include "SVGPropertyTearOff.h"
+#include "SVGValueProperty.h"
 
 namespace WebCore {
 
-class SVGLength : public SVGPropertyTearOff<SVGLengthValue> {
+class SVGLength : public SVGValueProperty<SVGLengthValue> {
+    using Base = SVGValueProperty<SVGLengthValue>;
+    using Base::Base;
+    using Base::m_value;
+
 public:
     // Forward declare these enums in the w3c naming scheme, for IDL generation
     enum {
         SVG_LENGTHTYPE_UNKNOWN = LengthTypeUnknown,
         SVG_LENGTHTYPE_NUMBER = LengthTypeNumber,
@@ -45,77 +49,82 @@
         SVG_LENGTHTYPE_IN = LengthTypeIN,
         SVG_LENGTHTYPE_PT = LengthTypePT,
         SVG_LENGTHTYPE_PC = LengthTypePC
     };
 
-    static Ref<SVGLength> create(SVGAnimatedProperty& animatedProperty, SVGPropertyRole role, SVGLengthValue& value)
+    static Ref<SVGLength> create()
+    {
+        return adoptRef(*new SVGLength());
+    }
+
+    static Ref<SVGLength> create(const SVGLengthValue& value)
+    {
+        return adoptRef(*new SVGLength(value));
+    }
+
+    static Ref<SVGLength> create(SVGPropertyOwner* owner, SVGPropertyAccess access, const SVGLengthValue& value = { })
     {
-        return adoptRef(*new SVGLength(animatedProperty, role, value));
+        return adoptRef(*new SVGLength(owner, access, value));
     }
 
-    static Ref<SVGLength> create(const SVGLengthValue& initialValue = { })
+    template<typename T>
+    static ExceptionOr<Ref<SVGLength>> create(ExceptionOr<T>&& value)
     {
-        return adoptRef(*new SVGLength(initialValue));
+        if (value.hasException())
+            return value.releaseException();
+        return adoptRef(*new SVGLength(value.releaseReturnValue()));
     }
 
-    template<typename T> static ExceptionOr<Ref<SVGLength>> create(ExceptionOr<T>&& initialValue)
+    Ref<SVGLength> clone() const
     {
-        if (initialValue.hasException())
-            return initialValue.releaseException();
-        return create(initialValue.releaseReturnValue());
+        return SVGLength::create(m_value);
     }
 
     unsigned short unitType()
     {
-        return propertyReference().unitType();
+        return m_value.unitType();
     }
 
     ExceptionOr<float> valueForBindings()
     {
-        return propertyReference().valueForBindings(SVGLengthContext { contextElement() });
+        return m_value.valueForBindings(SVGLengthContext { contextElement() });
     }
 
     ExceptionOr<void> setValueForBindings(float value)
     {
         if (isReadOnly())
             return Exception { NoModificationAllowedError };
 
-        auto result = propertyReference().setValue(value, SVGLengthContext { contextElement() });
+        auto result = m_value.setValue(value, SVGLengthContext { contextElement() });
         if (result.hasException())
             return result;
 
         commitChange();
         return result;
     }
 
     float valueInSpecifiedUnits()
     {
-        return propertyReference().valueInSpecifiedUnits();
+        return m_value.valueInSpecifiedUnits();
     }
 
     ExceptionOr<void> setValueInSpecifiedUnits(float valueInSpecifiedUnits)
     {
         if (isReadOnly())
             return Exception { NoModificationAllowedError };
 
-        propertyReference().setValueInSpecifiedUnits(valueInSpecifiedUnits);
+        m_value.setValueInSpecifiedUnits(valueInSpecifiedUnits);
         commitChange();
-
         return { };
     }
 
-    String valueAsString()
-    {
-        return propertyReference().valueAsString();
-    }
-
     ExceptionOr<void> setValueAsString(const String& value)
     {
         if (isReadOnly())
             return Exception { NoModificationAllowedError };
 
-        auto result = propertyReference().setValueAsString(value);
+        auto result = m_value.setValueAsString(value);
         if (result.hasException())
             return result;
 
         commitChange();
         return result;
@@ -124,11 +133,11 @@
     ExceptionOr<void> newValueSpecifiedUnits(unsigned short unitType, float valueInSpecifiedUnits)
     {
         if (isReadOnly())
             return Exception { NoModificationAllowedError };
 
-        auto result = propertyReference().newValueSpecifiedUnits(unitType, valueInSpecifiedUnits);
+        auto result = m_value.newValueSpecifiedUnits(unitType, valueInSpecifiedUnits);
         if (result.hasException())
             return result;
 
         commitChange();
         return result;
@@ -137,26 +146,20 @@
     ExceptionOr<void> convertToSpecifiedUnits(unsigned short unitType)
     {
         if (isReadOnly())
             return Exception { NoModificationAllowedError };
 
-        auto result = propertyReference().convertToSpecifiedUnits(unitType, SVGLengthContext { contextElement() });
+        auto result = m_value.convertToSpecifiedUnits(unitType, SVGLengthContext { contextElement() });
         if (result.hasException())
             return result;
 
         commitChange();
         return result;
     }
 
-private:
-    SVGLength(SVGAnimatedProperty& animatedProperty, SVGPropertyRole role, SVGLengthValue& value)
-        : SVGPropertyTearOff<SVGLengthValue>(&animatedProperty, role, value)
-    {
-    }
-
-    explicit SVGLength(const SVGLengthValue& initialValue)
-        : SVGPropertyTearOff<SVGLengthValue>(initialValue)
+    String valueAsString() const override
     {
+        return m_value.valueAsString();
     }
 };
 
 } // namespace WebCore
