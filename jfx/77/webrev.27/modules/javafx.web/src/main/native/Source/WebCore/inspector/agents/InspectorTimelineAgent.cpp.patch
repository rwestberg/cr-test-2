diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorTimelineAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorTimelineAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorTimelineAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorTimelineAgent.cpp
@@ -35,22 +35,24 @@
 
 #include "DOMWindow.h"
 #include "Event.h"
 #include "Frame.h"
 #include "InspectorCPUProfilerAgent.h"
+#include "InspectorClient.h"
+#include "InspectorController.h"
 #include "InspectorMemoryAgent.h"
 #include "InspectorPageAgent.h"
 #include "InstrumentingAgents.h"
 #include "JSDOMWindow.h"
+#include "PageHeapAgent.h"
 #include "PageScriptDebugServer.h"
 #include "RenderView.h"
 #include "ScriptState.h"
 #include "TimelineRecordFactory.h"
 #include "WebConsoleAgent.h"
 #include <JavaScriptCore/ConsoleMessage.h>
 #include <JavaScriptCore/InspectorDebuggerAgent.h>
-#include <JavaScriptCore/InspectorHeapAgent.h>
 #include <JavaScriptCore/InspectorScriptProfilerAgent.h>
 #include <JavaScriptCore/ScriptBreakpoint.h>
 #include <wtf/Stopwatch.h>
 
 #if PLATFORM(IOS_FAMILY)
@@ -81,50 +83,68 @@
 #endif
     return CFRunLoopGetCurrent();
 }
 #endif
 
-InspectorTimelineAgent::InspectorTimelineAgent(WebAgentContext& context, InspectorScriptProfilerAgent* scriptProfileAgent, InspectorHeapAgent* heapAgent, InspectorPageAgent* pageAgent)
+InspectorTimelineAgent::InspectorTimelineAgent(PageAgentContext& context)
     : InspectorAgentBase("Timeline"_s, context)
-    , m_frontendDispatcher(std::make_unique<Inspector::TimelineFrontendDispatcher>(context.frontendRouter))
+    , m_frontendDispatcher(makeUnique<Inspector::TimelineFrontendDispatcher>(context.frontendRouter))
     , m_backendDispatcher(Inspector::TimelineBackendDispatcher::create(context.backendDispatcher, this))
-    , m_scriptProfilerAgent(scriptProfileAgent)
-    , m_heapAgent(heapAgent)
-    , m_pageAgent(pageAgent)
+    , m_inspectedPage(context.inspectedPage)
 {
 }
 
 InspectorTimelineAgent::~InspectorTimelineAgent() = default;
 
 void InspectorTimelineAgent::didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*)
 {
-    m_instrumentingAgents.setPersistentInspectorTimelineAgent(this);
 }
 
 void InspectorTimelineAgent::willDestroyFrontendAndBackend(Inspector::DisconnectReason)
 {
-    m_instrumentingAgents.setPersistentInspectorTimelineAgent(nullptr);
+    ErrorString ignored;
+    disable(ignored);
+}
+
+void InspectorTimelineAgent::enable(ErrorString& errorString)
+{
+    if (m_instrumentingAgents.inspectorTimelineAgent() == this) {
+        errorString = "Timeline domain already enabled"_s;
+        return;
+    }
+
+    m_instrumentingAgents.setInspectorTimelineAgent(this);
+}
+
+void InspectorTimelineAgent::disable(ErrorString& errorString)
+{
+    if (m_instrumentingAgents.inspectorTimelineAgent() != this) {
+        errorString = "Timeline domain already disabled"_s;
+        return;
+    }
+
+    m_instrumentingAgents.setInspectorTimelineAgent(nullptr);
 
-    ErrorString unused;
-    stop(unused);
+    ErrorString ignored;
+    stop(ignored);
 
     m_autoCaptureEnabled = false;
     m_instruments.clear();
 }
 
 void InspectorTimelineAgent::start(ErrorString&, const int* maxCallStackDepth)
 {
-    m_enabledFromFrontend = true;
+    m_trackingFromFrontend = true;
 
     internalStart(maxCallStackDepth);
 }
 
 void InspectorTimelineAgent::stop(ErrorString&)
 {
     internalStop();
 
-    m_enabledFromFrontend = false;
+    m_trackingFromFrontend = false;
 }
 
 void InspectorTimelineAgent::setAutoCaptureEnabled(ErrorString&, bool enabled)
 {
     m_autoCaptureEnabled = enabled;
@@ -136,17 +156,17 @@
     newInstruments.reserveCapacity(instruments.length());
 
     for (const auto& instrumentValue : instruments) {
         String enumValueString;
         if (!instrumentValue->asString(enumValueString)) {
-            errorString = "Unexpected type in instruments list, should be string"_s;
+            errorString = "Unexpected non-string value in given instruments"_s;
             return;
         }
 
         Optional<Protocol::Timeline::Instrument> instrumentType = Protocol::InspectorHelpers::parseEnumValueFromString<Protocol::Timeline::Instrument>(enumValueString);
         if (!instrumentType) {
-            errorString = makeString("Unexpected enum value: ", enumValueString);
+            errorString = makeString("Unknown item in given instruments: ", enumValueString);
             return;
         }
 
         newInstruments.uncheckedAppend(*instrumentType);
     }
@@ -154,38 +174,38 @@
     m_instruments.swap(newInstruments);
 }
 
 void InspectorTimelineAgent::internalStart(const int* maxCallStackDepth)
 {
-    if (m_enabled)
+    if (m_tracking)
         return;
 
     if (maxCallStackDepth && *maxCallStackDepth > 0)
         m_maxCallStackDepth = *maxCallStackDepth;
     else
         m_maxCallStackDepth = 5;
 
-    m_instrumentingAgents.setInspectorTimelineAgent(this);
+    m_instrumentingAgents.setTrackingInspectorTimelineAgent(this);
 
     m_environment.scriptDebugServer().addListener(this);
 
-    m_enabled = true;
+    m_tracking = true;
 
     // FIXME: Abstract away platform-specific code once https://bugs.webkit.org/show_bug.cgi?id=142748 is fixed.
 
 #if PLATFORM(COCOA)
-    m_frameStartObserver = std::make_unique<RunLoopObserver>(static_cast<CFIndex>(RunLoopObserver::WellKnownRunLoopOrders::InspectorFrameBegin), [this]() {
-        if (!m_enabled || m_environment.scriptDebugServer().isPaused())
+    m_frameStartObserver = makeUnique<RunLoopObserver>(static_cast<CFIndex>(RunLoopObserver::WellKnownRunLoopOrders::InspectorFrameBegin), [this]() {
+        if (!m_tracking || m_environment.scriptDebugServer().isPaused())
             return;
 
         if (!m_runLoopNestingLevel)
             pushCurrentRecord(JSON::Object::create(), TimelineRecordType::RenderingFrame, false, nullptr);
         m_runLoopNestingLevel++;
     });
 
-    m_frameStopObserver = std::make_unique<RunLoopObserver>(static_cast<CFIndex>(RunLoopObserver::WellKnownRunLoopOrders::InspectorFrameEnd), [this]() {
-        if (!m_enabled || m_environment.scriptDebugServer().isPaused())
+    m_frameStopObserver = makeUnique<RunLoopObserver>(static_cast<CFIndex>(RunLoopObserver::WellKnownRunLoopOrders::InspectorFrameEnd), [this]() {
+        if (!m_tracking || m_environment.scriptDebugServer().isPaused())
             return;
 
         ASSERT(m_runLoopNestingLevel > 0);
         m_runLoopNestingLevel--;
         if (m_runLoopNestingLevel)
@@ -206,18 +226,21 @@
 
     m_runLoopNestingLevel = 1;
 #endif
 
     m_frontendDispatcher->recordingStarted(timestamp());
+
+    if (auto* client = m_inspectedPage.inspectorController().inspectorClient())
+        client->timelineRecordingChanged(true);
 }
 
 void InspectorTimelineAgent::internalStop()
 {
-    if (!m_enabled)
+    if (!m_tracking)
         return;
 
-    m_instrumentingAgents.setInspectorTimelineAgent(nullptr);
+    m_instrumentingAgents.setTrackingInspectorTimelineAgent(nullptr);
 
     m_environment.scriptDebugServer().removeListener(this, true);
 
 #if PLATFORM(COCOA)
     m_frameStartObserver = nullptr;
@@ -229,15 +252,18 @@
         didCompleteCurrentRecord(m_recordStack.last().type);
 #endif
 
     clearRecordStack();
 
-    m_enabled = false;
+    m_tracking = false;
     m_startedComposite = false;
     m_autoCapturePhase = AutoCapturePhase::None;
 
     m_frontendDispatcher->recordingStopped(timestamp());
+
+    if (auto* client = m_inspectedPage.inspectorController().inspectorClient())
+        client->timelineRecordingChanged(false);
 }
 
 double InspectorTimelineAgent::timestamp()
 {
     return m_environment.executionStopwatch()->elapsedTime().seconds();
@@ -252,18 +278,18 @@
             record.data->getString("title"_s, recordTitle);
             if (recordTitle == title) {
                 if (WebConsoleAgent* consoleAgent = m_instrumentingAgents.webConsoleAgent()) {
                     // FIXME: Send an enum to the frontend for localization?
                     String warning = title.isEmpty() ? "Unnamed Profile already exists"_s : makeString("Profile \"", title, "\" already exists");
-                    consoleAgent->addMessageToConsole(std::make_unique<ConsoleMessage>(MessageSource::ConsoleAPI, MessageType::Profile, MessageLevel::Warning, warning));
+                    consoleAgent->addMessageToConsole(makeUnique<ConsoleMessage>(MessageSource::ConsoleAPI, MessageType::Profile, MessageLevel::Warning, warning));
                 }
                 return;
             }
         }
     }
 
-    if (!m_enabled && m_pendingConsoleProfileRecords.isEmpty())
+    if (!m_tracking && m_pendingConsoleProfileRecords.isEmpty())
         startProgrammaticCapture();
 
     m_pendingConsoleProfileRecords.append(createRecordEntry(TimelineRecordFactory::createConsoleProfileData(title), TimelineRecordType::ConsoleProfile, true, frameFromExecState(exec)));
 }
 
@@ -278,21 +304,21 @@
         record.data->getString("title"_s, recordTitle);
         if (title.isEmpty() || recordTitle == title) {
             didCompleteRecordEntry(record);
             m_pendingConsoleProfileRecords.remove(i);
 
-            if (!m_enabledFromFrontend && m_pendingConsoleProfileRecords.isEmpty())
+            if (!m_trackingFromFrontend && m_pendingConsoleProfileRecords.isEmpty())
                 stopProgrammaticCapture();
 
             return;
         }
     }
 
     if (WebConsoleAgent* consoleAgent = m_instrumentingAgents.webConsoleAgent()) {
         // FIXME: Send an enum to the frontend for localization?
         String warning = title.isEmpty() ? "No profiles exist"_s : makeString("Profile \"", title, "\" does not exist");
-        consoleAgent->addMessageToConsole(std::make_unique<ConsoleMessage>(MessageSource::ConsoleAPI, MessageType::ProfileEnd, MessageLevel::Warning, warning));
+        consoleAgent->addMessageToConsole(makeUnique<ConsoleMessage>(MessageSource::ConsoleAPI, MessageType::ProfileEnd, MessageLevel::Warning, warning));
     }
 }
 
 void InspectorTimelineAgent::willCallFunction(const String& scriptName, int scriptLine, int scriptColumn, Frame* frame)
 {
@@ -307,12 +333,16 @@
 void InspectorTimelineAgent::willDispatchEvent(const Event& event, Frame* frame)
 {
     pushCurrentRecord(TimelineRecordFactory::createEventDispatchData(event), TimelineRecordType::EventDispatch, false, frame);
 }
 
-void InspectorTimelineAgent::didDispatchEvent()
+void InspectorTimelineAgent::didDispatchEvent(bool defaultPrevented)
 {
+    auto& entry = m_recordStack.last();
+    ASSERT(entry.type == TimelineRecordType::EventDispatch);
+    entry.data->setBoolean("defaultPrevented"_s, defaultPrevented);
+
     didCompleteCurrentRecord(TimelineRecordType::EventDispatch);
 }
 
 void InspectorTimelineAgent::didInvalidateLayout(Frame& frame)
 {
@@ -361,12 +391,12 @@
     m_startedComposite = true;
 }
 
 void InspectorTimelineAgent::didComposite()
 {
-    ASSERT(m_startedComposite);
-    didCompleteCurrentRecord(TimelineRecordType::Composite);
+    if (m_startedComposite)
+        didCompleteCurrentRecord(TimelineRecordType::Composite);
     m_startedComposite = false;
 }
 
 void InspectorTimelineAgent::willPaint(Frame& frame)
 {
@@ -428,11 +458,11 @@
     appendRecord(TimelineRecordFactory::createTimeStampData(message), TimelineRecordType::TimeEnd, true, &frame);
 }
 
 void InspectorTimelineAgent::mainFrameStartedLoading()
 {
-    if (m_enabled)
+    if (m_tracking)
         return;
 
     if (!m_autoCaptureEnabled)
         return;
 
@@ -441,12 +471,12 @@
 
     m_autoCapturePhase = AutoCapturePhase::BeforeLoad;
 
     // Pre-emptively disable breakpoints. The frontend must re-enable them.
     if (InspectorDebuggerAgent* debuggerAgent = m_instrumentingAgents.inspectorDebuggerAgent()) {
-        ErrorString unused;
-        debuggerAgent->setBreakpointsActive(unused, false);
+        ErrorString ignored;
+        debuggerAgent->setBreakpointsActive(ignored, false);
     }
 
     // Inform the frontend we started an auto capture. The frontend must stop capture.
     m_frontendDispatcher->autoCaptureStarted();
 
@@ -462,47 +492,43 @@
     }
 }
 
 void InspectorTimelineAgent::startProgrammaticCapture()
 {
-    ASSERT(!m_enabled);
+    ASSERT(!m_tracking);
 
     // Disable breakpoints during programmatic capture.
     if (InspectorDebuggerAgent* debuggerAgent = m_instrumentingAgents.inspectorDebuggerAgent()) {
         m_programmaticCaptureRestoreBreakpointActiveValue = debuggerAgent->breakpointsActive();
         if (m_programmaticCaptureRestoreBreakpointActiveValue) {
-            ErrorString unused;
-            debuggerAgent->setBreakpointsActive(unused, false);
+            ErrorString ignored;
+            debuggerAgent->setBreakpointsActive(ignored, false);
         }
     } else
         m_programmaticCaptureRestoreBreakpointActiveValue = false;
 
-    m_frontendDispatcher->programmaticCaptureStarted();
-
     toggleScriptProfilerInstrument(InstrumentState::Start); // Ensure JavaScript samping data.
     toggleTimelineInstrument(InstrumentState::Start); // Ensure Console Profile event records.
     toggleInstruments(InstrumentState::Start); // Any other instruments the frontend wants us to record.
 }
 
 void InspectorTimelineAgent::stopProgrammaticCapture()
 {
-    ASSERT(m_enabled);
-    ASSERT(!m_enabledFromFrontend);
+    ASSERT(m_tracking);
+    ASSERT(!m_trackingFromFrontend);
 
     toggleInstruments(InstrumentState::Stop);
     toggleTimelineInstrument(InstrumentState::Stop);
     toggleScriptProfilerInstrument(InstrumentState::Stop);
 
     // Re-enable breakpoints if they were enabled.
     if (m_programmaticCaptureRestoreBreakpointActiveValue) {
         if (InspectorDebuggerAgent* debuggerAgent = m_instrumentingAgents.inspectorDebuggerAgent()) {
-            ErrorString unused;
-            debuggerAgent->setBreakpointsActive(unused, true);
+            ErrorString ignored;
+            debuggerAgent->setBreakpointsActive(ignored, true);
         }
     }
-
-    m_frontendDispatcher->programmaticCaptureStopped();
 }
 
 void InspectorTimelineAgent::toggleInstruments(InstrumentState state)
 {
     for (auto instrumentType : m_instruments) {
@@ -530,56 +556,56 @@
     }
 }
 
 void InspectorTimelineAgent::toggleScriptProfilerInstrument(InstrumentState state)
 {
-    if (m_scriptProfilerAgent) {
-        ErrorString unused;
+    if (auto* scriptProfilerAgent = m_instrumentingAgents.inspectorScriptProfilerAgent()) {
+        ErrorString ignored;
         if (state == InstrumentState::Start) {
             const bool includeSamples = true;
-            m_scriptProfilerAgent->startTracking(unused, &includeSamples);
+            scriptProfilerAgent->startTracking(ignored, &includeSamples);
         } else
-            m_scriptProfilerAgent->stopTracking(unused);
+            scriptProfilerAgent->stopTracking(ignored);
     }
 }
 
 void InspectorTimelineAgent::toggleHeapInstrument(InstrumentState state)
 {
-    if (m_heapAgent) {
-        ErrorString unused;
+    if (auto* heapAgent = m_instrumentingAgents.pageHeapAgent()) {
+        ErrorString ignored;
         if (state == InstrumentState::Start) {
             if (m_autoCapturePhase == AutoCapturePhase::None || m_autoCapturePhase == AutoCapturePhase::FirstNavigation)
-                m_heapAgent->startTracking(unused);
+                heapAgent->startTracking(ignored);
         } else
-            m_heapAgent->stopTracking(unused);
+            heapAgent->stopTracking(ignored);
     }
 }
 
 void InspectorTimelineAgent::toggleCPUInstrument(InstrumentState state)
 {
 #if ENABLE(RESOURCE_USAGE)
     if (InspectorCPUProfilerAgent* cpuProfilerAgent = m_instrumentingAgents.inspectorCPUProfilerAgent()) {
-        ErrorString unused;
+        ErrorString ignored;
         if (state == InstrumentState::Start)
-            cpuProfilerAgent->startTracking(unused);
+            cpuProfilerAgent->startTracking(ignored);
         else
-            cpuProfilerAgent->stopTracking(unused);
+            cpuProfilerAgent->stopTracking(ignored);
     }
 #else
     UNUSED_PARAM(state);
 #endif
 }
 
 void InspectorTimelineAgent::toggleMemoryInstrument(InstrumentState state)
 {
 #if ENABLE(RESOURCE_USAGE)
     if (InspectorMemoryAgent* memoryAgent = m_instrumentingAgents.inspectorMemoryAgent()) {
-        ErrorString unused;
+        ErrorString ignored;
         if (state == InstrumentState::Start)
-            memoryAgent->startTracking(unused);
+            memoryAgent->startTracking(ignored);
         else
-            memoryAgent->stopTracking(unused);
+            memoryAgent->stopTracking(ignored);
     }
 #else
     UNUSED_PARAM(state);
 #endif
 }
@@ -590,15 +616,10 @@
         internalStart();
     else
         internalStop();
 }
 
-void InspectorTimelineAgent::didCommitLoad()
-{
-    clearRecordStack();
-}
-
 void InspectorTimelineAgent::didRequestAnimationFrame(int callbackId, Frame* frame)
 {
     appendRecord(TimelineRecordFactory::createAnimationFrameData(callbackId), TimelineRecordType::RequestAnimationFrame, true, frame);
 }
 
@@ -710,16 +731,18 @@
     }
 }
 
 void InspectorTimelineAgent::setFrameIdentifier(JSON::Object* record, Frame* frame)
 {
-    if (!frame || !m_pageAgent)
+    if (!frame)
         return;
-    String frameId;
-    if (frame && m_pageAgent)
-        frameId = m_pageAgent->frameId(frame);
-    record->setString("frameId", frameId);
+
+    auto* pageAgent = m_instrumentingAgents.inspectorPageAgent();
+    if (!pageAgent)
+        return;
+
+    record->setString("frameId"_s, pageAgent->frameId(frame));
 }
 
 void InspectorTimelineAgent::didCompleteRecordEntry(const TimelineRecordEntry& entry)
 {
     entry.record->setObject("data"_s, entry.data);
