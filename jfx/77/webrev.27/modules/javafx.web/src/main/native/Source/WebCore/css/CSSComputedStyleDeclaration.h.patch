diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSComputedStyleDeclaration.h b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSComputedStyleDeclaration.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSComputedStyleDeclaration.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSComputedStyleDeclaration.h
@@ -1,8 +1,8 @@
 /*
  * Copyright (C) 2004 Zack Rusin <zack@kde.org>
- * Copyright (C) 2004, 2005, 2006, 2008, 2012, 2013 Apple Inc. All rights reserved.
+ * Copyright (C) 2004-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -22,10 +22,11 @@
 
 #include "CSSStyleDeclaration.h"
 #include "RenderStyleConstants.h"
 #include "SVGRenderStyleDefs.h"
 #include "TextFlags.h"
+#include <wtf/IsoMalloc.h>
 #include <wtf/RefPtr.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
@@ -54,11 +55,11 @@
 public:
     ComputedStyleExtractor(Node*, bool allowVisitedStyle = false, PseudoId = PseudoId::None);
     ComputedStyleExtractor(Element*, bool allowVisitedStyle = false, PseudoId = PseudoId::None);
 
     RefPtr<CSSValue> propertyValue(CSSPropertyID, EUpdateLayout = UpdateLayout);
-    RefPtr<CSSValue> valueForPropertyinStyle(const RenderStyle&, CSSPropertyID, RenderElement* = nullptr);
+    RefPtr<CSSValue> valueForPropertyInStyle(const RenderStyle&, CSSPropertyID, RenderElement* = nullptr);
     String customPropertyText(const String& propertyName);
     RefPtr<CSSValue> customPropertyValue(const String& propertyName);
 
     // Helper methods for HTML editing.
     Ref<MutableStyleProperties> copyPropertiesInSet(const CSSPropertyID* set, unsigned length);
@@ -102,24 +103,22 @@
     PseudoId m_pseudoElementSpecifier;
     bool m_allowVisitedStyle;
 };
 
 class CSSComputedStyleDeclaration final : public CSSStyleDeclaration {
+    WTF_MAKE_ISO_ALLOCATED_EXPORT(CSSComputedStyleDeclaration, WEBCORE_EXPORT);
 public:
-    static Ref<CSSComputedStyleDeclaration> create(Element& element, bool allowVisitedStyle = false, const String& pseudoElementName = String())
-    {
-        return adoptRef(*new CSSComputedStyleDeclaration(element, allowVisitedStyle, pseudoElementName));
-    }
+    WEBCORE_EXPORT static Ref<CSSComputedStyleDeclaration> create(Element&, bool allowVisitedStyle = false, StringView pseudoElementName = StringView { });
     virtual ~CSSComputedStyleDeclaration();
 
     WEBCORE_EXPORT void ref() final;
     WEBCORE_EXPORT void deref() final;
 
     String getPropertyValue(CSSPropertyID) const;
 
 private:
-    WEBCORE_EXPORT CSSComputedStyleDeclaration(Element&, bool allowVisitedStyle, const String&);
+    CSSComputedStyleDeclaration(Element&, bool allowVisitedStyle, StringView);
 
     // CSSOM functions. Don't make these public.
     CSSRule* parentRule() const final;
     unsigned length() const final;
     String item(unsigned index) const final;
@@ -140,9 +139,9 @@
     RefPtr<CSSValue> getPropertyCSSValue(CSSPropertyID, EUpdateLayout = UpdateLayout) const;
 
     mutable Ref<Element> m_element;
     PseudoId m_pseudoElementSpecifier;
     bool m_allowVisitedStyle;
-    unsigned m_refCount;
+    unsigned m_refCount { 1 };
 };
 
 } // namespace WebCore
