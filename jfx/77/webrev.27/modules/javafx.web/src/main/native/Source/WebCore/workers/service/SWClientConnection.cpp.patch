diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/SWClientConnection.cpp b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/SWClientConnection.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/SWClientConnection.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/SWClientConnection.cpp
@@ -114,77 +114,79 @@
     if (!isPosted)
         failedFetchingScript(jobIdentifier, registrationKey, ResourceError { errorDomainWebKitInternal, 0, { }, makeString("Failed to fetch script for service worker with scope ", registrationKey.scope().string()) });
 }
 
 
-void SWClientConnection::postMessageToServiceWorkerClient(DocumentIdentifier destinationContextIdentifier, MessageWithMessagePorts&& message, ServiceWorkerData&& sourceData, const String& sourceOrigin)
+void SWClientConnection::postMessageToServiceWorkerClient(DocumentIdentifier destinationContextIdentifier, MessageWithMessagePorts&& message, ServiceWorkerData&& sourceData, String&& sourceOrigin)
 {
     ASSERT(isMainThread());
 
     // FIXME: destinationContextIdentifier can only identify a Document at the moment.
     auto* destinationDocument = Document::allDocumentsMap().get(destinationContextIdentifier);
     if (!destinationDocument)
         return;
 
-    auto* container = destinationDocument->serviceWorkerContainer();
-    if (!container)
-        return;
-
-    MessageEventSource source = RefPtr<ServiceWorker> { ServiceWorker::getOrCreate(*destinationDocument, WTFMove(sourceData)) };
-
-    auto messageEvent = MessageEvent::create(MessagePort::entanglePorts(*destinationDocument, WTFMove(message.transferredPorts)), message.message.releaseNonNull(), sourceOrigin, { }, WTFMove(source));
-    container->dispatchEvent(messageEvent);
+    destinationDocument->postTask([message = WTFMove(message), sourceData = WTFMove(sourceData), sourceOrigin = WTFMove(sourceOrigin)](auto& context) mutable {
+        if (auto* container = context.serviceWorkerContainer())
+            container->postMessage(WTFMove(message), WTFMove(sourceData), WTFMove(sourceOrigin));
+    });
 }
 
 void SWClientConnection::updateRegistrationState(ServiceWorkerRegistrationIdentifier identifier, ServiceWorkerRegistrationState state, const Optional<ServiceWorkerData>& serviceWorkerData)
 {
     ASSERT(isMainThread());
 
     SWContextManager::singleton().forEachServiceWorkerThread([identifier, state, &serviceWorkerData] (auto& workerThread) {
         workerThread.thread().runLoop().postTask([identifier, state, serviceWorkerData = crossThreadCopy(serviceWorkerData)](ScriptExecutionContext& context) mutable {
             if (auto* container = context.serviceWorkerContainer())
-                container->scheduleTaskToUpdateRegistrationState(identifier, state, WTFMove(serviceWorkerData));
+                container->updateRegistrationState(identifier, state, WTFMove(serviceWorkerData));
         });
     });
 
     for (auto* document : Document::allDocuments()) {
-        if (auto* container = document->serviceWorkerContainer())
-            container->scheduleTaskToUpdateRegistrationState(identifier, state, serviceWorkerData);
+        document->postTask([identifier, state, serviceWorkerData, document](auto&) {
+            if (auto* container = document->serviceWorkerContainer())
+                container->updateRegistrationState(identifier, state, serviceWorkerData);
+        });
     }
 }
 
 void SWClientConnection::updateWorkerState(ServiceWorkerIdentifier identifier, ServiceWorkerState state)
 {
     ASSERT(isMainThread());
 
     SWContextManager::singleton().forEachServiceWorkerThread([identifier, state] (auto& workerThread) {
         workerThread.thread().runLoop().postTask([identifier, state](ScriptExecutionContext& context) {
             if (auto* serviceWorker = context.serviceWorker(identifier))
-                serviceWorker->scheduleTaskToUpdateState(state);
+                serviceWorker->updateState(state);
         });
     });
 
     for (auto* document : Document::allDocuments()) {
-        if (auto* serviceWorker = document->serviceWorker(identifier))
-            serviceWorker->scheduleTaskToUpdateState(state);
+        document->postTask([identifier, document, state](auto&) {
+            if (auto* serviceWorker = document->serviceWorker(identifier))
+                serviceWorker->updateState(state);
+        });
     }
 }
 
 void SWClientConnection::fireUpdateFoundEvent(ServiceWorkerRegistrationIdentifier identifier)
 {
     ASSERT(isMainThread());
 
     SWContextManager::singleton().forEachServiceWorkerThread([identifier] (auto& workerThread) {
         workerThread.thread().runLoop().postTask([identifier](ScriptExecutionContext& context) {
             if (auto* container = context.serviceWorkerContainer())
-                container->scheduleTaskToFireUpdateFoundEvent(identifier);
+                container->fireUpdateFoundEvent(identifier);
         });
     });
 
     for (auto* document : Document::allDocuments()) {
-        if (auto* container = document->serviceWorkerContainer())
-            container->scheduleTaskToFireUpdateFoundEvent(identifier);
+        document->postTask([document, identifier](auto&) {
+            if (auto* container = document->serviceWorkerContainer())
+                container->fireUpdateFoundEvent(identifier);
+        });
     }
 }
 
 void SWClientConnection::setRegistrationLastUpdateTime(ServiceWorkerRegistrationIdentifier identifier, WallTime lastUpdateTime)
 {
@@ -237,14 +239,16 @@
         // FIXME: Support worker contexts.
         auto* client = Document::allDocumentsMap().get(clientIdentifier);
         if (!client)
             continue;
 
-        ASSERT(!client->activeServiceWorker() || client->activeServiceWorker()->identifier() != newController.identifier);
-        client->setActiveServiceWorker(ServiceWorker::getOrCreate(*client, ServiceWorkerData { newController }));
-        if (auto* container = client->serviceWorkerContainer())
-            container->scheduleTaskToFireControllerChangeEvent();
+        client->postTask([client, contextIdentifiers, newController = WTFMove(newController)](auto&) {
+            ASSERT(!client->activeServiceWorker() || client->activeServiceWorker()->identifier() != newController.identifier);
+            client->setActiveServiceWorker(ServiceWorker::getOrCreate(*client, ServiceWorkerData { newController }));
+            if (auto* container = client->serviceWorkerContainer())
+                container->fireControllerChangeEvent();
+        });
     }
 }
 
 void SWClientConnection::clearPendingJobs()
 {
