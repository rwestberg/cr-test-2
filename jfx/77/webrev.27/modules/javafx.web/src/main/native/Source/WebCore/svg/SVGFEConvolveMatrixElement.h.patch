diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFEConvolveMatrixElement.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFEConvolveMatrixElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFEConvolveMatrixElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFEConvolveMatrixElement.h
@@ -1,8 +1,8 @@
 /*
  * Copyright (C) 2009 Dirk Schulze <krit@webkit.org>
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -19,15 +19,10 @@
  */
 
 #pragma once
 
 #include "FEConvolveMatrix.h"
-#include "SVGAnimatedBoolean.h"
-#include "SVGAnimatedEnumeration.h"
-#include "SVGAnimatedInteger.h"
-#include "SVGAnimatedNumber.h"
-#include "SVGAnimatedNumberList.h"
 #include "SVGFilterPrimitiveStandardAttributes.h"
 
 namespace WebCore {
 
 template<>
@@ -70,67 +65,59 @@
     static Ref<SVGFEConvolveMatrixElement> create(const QualifiedName&, Document&);
 
     void setOrder(float orderX, float orderY);
     void setKernelUnitLength(float kernelUnitLengthX, float kernelUnitLengthY);
 
-    String in1() const { return m_in1.currentValue(attributeOwnerProxy()); }
-    int orderX() const { return m_orderX.currentValue(attributeOwnerProxy()); }
-    int orderY() const { return m_orderY.currentValue(attributeOwnerProxy()); }
-    const SVGNumberListValues& kernelMatrix() const { return m_kernelMatrix.currentValue(attributeOwnerProxy()); }
-    float divisor() const { return m_divisor.currentValue(attributeOwnerProxy()); }
-    float bias() const { return m_bias.currentValue(attributeOwnerProxy()); }
-    int targetX() const { return m_targetX.currentValue(attributeOwnerProxy()); }
-    int targetY() const { return m_targetY.currentValue(attributeOwnerProxy()); }
-    EdgeModeType edgeMode() const { return m_edgeMode.currentValue(attributeOwnerProxy()); }
-    float kernelUnitLengthX() const { return m_kernelUnitLengthX.currentValue(attributeOwnerProxy()); }
-    float kernelUnitLengthY() const { return m_kernelUnitLengthY.currentValue(attributeOwnerProxy()); }
-    bool preserveAlpha() const { return m_preserveAlpha.currentValue(attributeOwnerProxy()); }
-
-    RefPtr<SVGAnimatedString> in1Animated() { return m_in1.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedInteger> orderXAnimated() { return m_orderX.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedInteger> orderYAnimated() { return m_orderY.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumberList> kernelMatrixAnimated() { return m_kernelMatrix.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> divisorAnimated() { return m_divisor.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> biasAnimated() { return m_bias.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedInteger> targetXAnimated() { return m_targetX.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedInteger> targetYAnimated() { return m_targetY.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedEnumeration> edgeModeAnimated() { return m_edgeMode.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> kernelUnitLengthXAnimated() { return m_kernelUnitLengthX.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> kernelUnitLengthYAnimated() { return m_kernelUnitLengthY.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedBoolean> preserveAlphaAnimated() { return m_preserveAlpha.animatedProperty(attributeOwnerProxy()); }
+    String in1() const { return m_in1->currentValue(); }
+    int orderX() const { return m_orderX->currentValue(); }
+    int orderY() const { return m_orderY->currentValue(); }
+    const SVGNumberList& kernelMatrix() const { return m_kernelMatrix->currentValue(); }
+    float divisor() const { return m_divisor->currentValue(); }
+    float bias() const { return m_bias->currentValue(); }
+    int targetX() const { return m_targetX->currentValue(); }
+    int targetY() const { return m_targetY->currentValue(); }
+    EdgeModeType edgeMode() const { return m_edgeMode->currentValue<EdgeModeType>(); }
+    float kernelUnitLengthX() const { return m_kernelUnitLengthX->currentValue(); }
+    float kernelUnitLengthY() const { return m_kernelUnitLengthY->currentValue(); }
+    bool preserveAlpha() const { return m_preserveAlpha->currentValue(); }
+
+    SVGAnimatedString& in1Animated() { return m_in1; }
+    SVGAnimatedInteger& orderXAnimated() { return m_orderX; }
+    SVGAnimatedInteger& orderYAnimated() { return m_orderY; }
+    SVGAnimatedNumberList& kernelMatrixAnimated() { return m_kernelMatrix; }
+    SVGAnimatedNumber& divisorAnimated() { return m_divisor; }
+    SVGAnimatedNumber& biasAnimated() { return m_bias; }
+    SVGAnimatedInteger& targetXAnimated() { return m_targetX; }
+    SVGAnimatedInteger& targetYAnimated() { return m_targetY; }
+    SVGAnimatedEnumeration& edgeModeAnimated() { return m_edgeMode; }
+    SVGAnimatedNumber& kernelUnitLengthXAnimated() { return m_kernelUnitLengthX; }
+    SVGAnimatedNumber& kernelUnitLengthYAnimated() { return m_kernelUnitLengthY; }
+    SVGAnimatedBoolean& preserveAlphaAnimated() { return m_preserveAlpha; }
 
 private:
     SVGFEConvolveMatrixElement(const QualifiedName&, Document&);
 
-    using AttributeOwnerProxy = SVGAttributeOwnerProxyImpl<SVGFEConvolveMatrixElement, SVGFilterPrimitiveStandardAttributes>;
-    static AttributeOwnerProxy::AttributeRegistry& attributeRegistry() { return AttributeOwnerProxy::attributeRegistry(); }
-    static bool isKnownAttribute(const QualifiedName& attributeName) { return AttributeOwnerProxy::isKnownAttribute(attributeName); }
-    static void registerAttributes();
+    using PropertyRegistry = SVGPropertyOwnerRegistry<SVGFEConvolveMatrixElement, SVGFilterPrimitiveStandardAttributes>;
+    const SVGPropertyRegistry& propertyRegistry() const final { return m_propertyRegistry; }
 
-    const SVGAttributeOwnerProxy& attributeOwnerProxy() const final { return m_attributeOwnerProxy; }
-    void parseAttribute(const QualifiedName&, const AtomicString&) override;
+    void parseAttribute(const QualifiedName&, const AtomString&) override;
     void svgAttributeChanged(const QualifiedName&) override;
 
     bool setFilterEffectAttribute(FilterEffect*, const QualifiedName&) override;
-    RefPtr<FilterEffect> build(SVGFilterBuilder*, Filter&) override;
-
-    static const AtomicString& orderXIdentifier();
-    static const AtomicString& orderYIdentifier();
-    static const AtomicString& kernelUnitLengthXIdentifier();
-    static const AtomicString& kernelUnitLengthYIdentifier();
-
-    AttributeOwnerProxy m_attributeOwnerProxy { *this };
-    SVGAnimatedStringAttribute m_in1;
-    SVGAnimatedIntegerAttribute m_orderX;
-    SVGAnimatedIntegerAttribute m_orderY;
-    SVGAnimatedNumberListAttribute m_kernelMatrix;
-    SVGAnimatedNumberAttribute m_divisor;
-    SVGAnimatedNumberAttribute m_bias;
-    SVGAnimatedIntegerAttribute m_targetX;
-    SVGAnimatedIntegerAttribute m_targetY;
-    SVGAnimatedEnumerationAttribute<EdgeModeType> m_edgeMode { EDGEMODE_DUPLICATE };
-    SVGAnimatedNumberAttribute m_kernelUnitLengthX;
-    SVGAnimatedNumberAttribute m_kernelUnitLengthY;
-    SVGAnimatedBooleanAttribute m_preserveAlpha;
+    RefPtr<FilterEffect> build(SVGFilterBuilder*, Filter&) const override;
+
+    PropertyRegistry m_propertyRegistry { *this };
+    Ref<SVGAnimatedString> m_in1 { SVGAnimatedString::create(this) };
+    Ref<SVGAnimatedInteger> m_orderX { SVGAnimatedInteger::create(this) };
+    Ref<SVGAnimatedInteger> m_orderY { SVGAnimatedInteger::create(this) };
+    Ref<SVGAnimatedNumberList> m_kernelMatrix { SVGAnimatedNumberList::create(this) };
+    Ref<SVGAnimatedNumber> m_divisor { SVGAnimatedNumber::create(this) };
+    Ref<SVGAnimatedNumber> m_bias { SVGAnimatedNumber::create(this) };
+    Ref<SVGAnimatedInteger> m_targetX { SVGAnimatedInteger::create(this) };
+    Ref<SVGAnimatedInteger> m_targetY { SVGAnimatedInteger::create(this) };
+    Ref<SVGAnimatedEnumeration> m_edgeMode { SVGAnimatedEnumeration::create(this, EDGEMODE_DUPLICATE) };
+    Ref<SVGAnimatedNumber> m_kernelUnitLengthX { SVGAnimatedNumber::create(this) };
+    Ref<SVGAnimatedNumber> m_kernelUnitLengthY { SVGAnimatedNumber::create(this) };
+    Ref<SVGAnimatedBoolean> m_preserveAlpha { SVGAnimatedBoolean::create(this) };
 };
 
 } // namespace WebCore
