diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScript.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScript.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScript.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScript.cpp
@@ -345,10 +345,25 @@
     ASSERT_UNUSED(castSucceeded, castSucceeded);
 
     return BindingTraits<Protocol::Runtime::ObjectPreview>::runtimeCast(resultObject);
 }
 
+void InjectedScript::setEventValue(JSC::JSValue value)
+{
+    ASSERT(!hasNoValue());
+    Deprecated::ScriptFunctionCall function(injectedScriptObject(), "setEventValue"_s, inspectorEnvironment()->functionCallHandler());
+    function.appendArgument(value);
+    makeCall(function);
+}
+
+void InjectedScript::clearEventValue()
+{
+    ASSERT(!hasNoValue());
+    Deprecated::ScriptFunctionCall function(injectedScriptObject(), "clearEventValue"_s, inspectorEnvironment()->functionCallHandler());
+    makeCall(function);
+}
+
 void InjectedScript::setExceptionValue(JSC::JSValue value)
 {
     ASSERT(!hasNoValue());
     Deprecated::ScriptFunctionCall function(injectedScriptObject(), "setExceptionValue"_s, inspectorEnvironment()->functionCallHandler());
     function.appendArgument(value);
@@ -391,14 +406,10 @@
 }
 
 void InjectedScript::releaseObjectGroup(const String& objectGroup)
 {
     ASSERT(!hasNoValue());
-    // JDK-8164076
-    if (hasNoValue())
-        return;
-
     Deprecated::ScriptFunctionCall releaseFunction(injectedScriptObject(), "releaseObjectGroup"_s, inspectorEnvironment()->functionCallHandler());
     releaseFunction.appendArgument(objectGroup);
 
     bool hadException = false;
     callFunctionWithEvalEnabled(releaseFunction, hadException);
