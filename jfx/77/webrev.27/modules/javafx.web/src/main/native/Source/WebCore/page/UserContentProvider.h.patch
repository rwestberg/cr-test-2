diff a/modules/javafx.web/src/main/native/Source/WebCore/page/UserContentProvider.h b/modules/javafx.web/src/main/native/Source/WebCore/page/UserContentProvider.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/UserContentProvider.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/UserContentProvider.h
@@ -44,18 +44,17 @@
 class ResourceRequest;
 class UserMessageHandlerDescriptor;
 class UserScript;
 class UserStyleSheet;
 
-enum class ResourceType : uint16_t;
-
-struct ResourceLoadInfo;
-
+#if ENABLE(CONTENT_EXTENSIONS)
 namespace ContentExtensions {
 class ContentExtensionsBackend;
-struct Action;
+enum class ResourceType : uint16_t;
+struct ResourceLoadInfo;
 }
+#endif
 
 class UserContentProvider;
 
 class UserContentProviderInvalidationClient {
 public:
@@ -87,13 +86,13 @@
     void removePage(Page&);
 
 #if ENABLE(CONTENT_EXTENSIONS)
     // FIXME: These don't really belong here. They should probably bundled up in the ContentExtensionsBackend
     // which should always exist.
-    ContentExtensions::BlockedStatus processContentExtensionRulesForLoad(const URL&, ResourceType, DocumentLoader& initiatingDocumentLoader);
-    std::pair<Vector<ContentExtensions::Action>, Vector<String>> actionsForResourceLoad(const ResourceLoadInfo&, DocumentLoader& initiatingDocumentLoader);
-    WEBCORE_EXPORT void forEachContentExtension(const WTF::Function<void(const String&, ContentExtensions::ContentExtension&)>&, DocumentLoader& initiatingDocumentLoader);
+    ContentRuleListResults processContentRuleListsForLoad(const URL&, OptionSet<ContentExtensions::ResourceType>, DocumentLoader& initiatingDocumentLoader);
+    Vector<ContentExtensions::ActionsFromContentRuleList> actionsForResourceLoad(const ContentExtensions::ResourceLoadInfo&, DocumentLoader& initiatingDocumentLoader);
+    WEBCORE_EXPORT void forEachContentExtension(const Function<void(const String&, ContentExtensions::ContentExtension&)>&, DocumentLoader& initiatingDocumentLoader);
 #endif
 
 protected:
     WEBCORE_EXPORT void invalidateAllRegisteredUserMessageHandlerInvalidationClients();
     WEBCORE_EXPORT void invalidateInjectedStyleSheetCacheInAllFramesInAllPages();
