diff a/modules/javafx.web/src/main/native/Source/WebCore/style/StyleTreeResolver.cpp b/modules/javafx.web/src/main/native/Source/WebCore/style/StyleTreeResolver.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/style/StyleTreeResolver.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/style/StyleTreeResolver.cpp
@@ -40,10 +40,11 @@
 #include "HTMLSlotElement.h"
 #include "LoaderStrategy.h"
 #include "NodeRenderStyle.h"
 #include "Page.h"
 #include "PlatformStrategies.h"
+#include "Quirks.h"
 #include "RenderElement.h"
 #include "RenderStyle.h"
 #include "RenderView.h"
 #include "RuntimeEnabledFeatures.h"
 #include "Settings.h"
@@ -156,14 +157,14 @@
     current.clearChildNeedsStyleRecalc();
 }
 
 static bool affectsRenderedSubtree(Element& element, const RenderStyle& newStyle)
 {
-    if (element.renderer())
-        return true;
     if (newStyle.display() != DisplayType::None)
         return true;
+    if (element.renderOrDisplayContentsStyle())
+        return true;
     if (element.rendererIsNeeded(newStyle))
         return true;
     return false;
 }
 
@@ -235,13 +236,14 @@
     }
 
     auto beforeUpdate = resolvePseudoStyle(element, update, PseudoId::Before);
     auto afterUpdate = resolvePseudoStyle(element, update, PseudoId::After);
 
-#if ENABLE(POINTER_EVENTS)
-    if (RuntimeEnabledFeatures::sharedFeatures().pointerEventsEnabled())
-        m_document.updateTouchActionElements(element, *update.style.get());
+#if ENABLE(POINTER_EVENTS) && PLATFORM(IOS_FAMILY)
+    // FIXME: Track this exactly.
+    if (update.style->touchActions() != TouchAction::Auto && !m_document.quirks().shouldDisablePointerEventsQuirk() && RuntimeEnabledFeatures::sharedFeatures().pointerEventsEnabled())
+        m_document.setMayHaveElementsWithNonAutoTouchAction();
 #endif
 
     return { WTFMove(update), descendantsToResolve, WTFMove(beforeUpdate), WTFMove(afterUpdate) };
 }
 
@@ -544,11 +546,11 @@
     if (!documentElement->childNeedsStyleRecalc() && !documentElement->needsStyleRecalc())
         return nullptr;
 
     m_didSeePendingStylesheet = m_document.styleScope().hasPendingSheetsBeforeBody();
 
-    m_update = std::make_unique<Update>(m_document);
+    m_update = makeUnique<Update>(m_document);
     m_scopeStack.append(adoptRef(*new Scope(m_document)));
     m_parentStack.append(Parent(m_document));
 
     // Pseudo element removal and similar may only work with these flags still set. Reset them after the style recalc.
     renderView.setUsesFirstLineRules(renderView.usesFirstLineRules() || scope().styleResolver.usesFirstLineRules());
