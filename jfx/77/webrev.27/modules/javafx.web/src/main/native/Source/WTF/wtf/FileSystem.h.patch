diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/FileSystem.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/FileSystem.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/FileSystem.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/FileSystem.h
@@ -101,10 +101,15 @@
     Shared = 1 << 0,
     Exclusive = 1 << 1,
     Nonblocking = 1 << 2,
 };
 
+enum class MappedFileMode {
+    Shared,
+    Private,
+};
+
 enum class ShouldFollowSymbolicLinks { No, Yes };
 
 WTF_EXPORT_PRIVATE bool fileExists(const String&);
 WTF_EXPORT_PRIVATE bool deleteFile(const String&);
 WTF_EXPORT_PRIVATE bool deleteEmptyDirectory(const String&);
@@ -124,10 +129,11 @@
 WTF_EXPORT_PRIVATE String pathGetFileName(const String&);
 WTF_EXPORT_PRIVATE String directoryName(const String&);
 WTF_EXPORT_PRIVATE bool getVolumeFreeSpace(const String&, uint64_t&);
 WTF_EXPORT_PRIVATE Optional<int32_t> getFileDeviceId(const CString&);
 WTF_EXPORT_PRIVATE bool createSymbolicLink(const String& targetPath, const String& symbolicLinkPath);
+WTF_EXPORT_PRIVATE String createTemporaryZipArchive(const String& directory);
 
 WTF_EXPORT_PRIVATE void setMetadataURL(const String& path, const String& urlString, const String& referrer = { });
 
 bool canExcludeFromBackup(); // Returns true if any file can ever be excluded from backup.
 bool excludeFromBackup(const String&); // Returns true if successful.
@@ -143,11 +149,11 @@
 WTF_EXPORT_PRIVATE String openTemporaryFile(const String& prefix, PlatformFileHandle&);
 WTF_EXPORT_PRIVATE PlatformFileHandle openFile(const String& path, FileOpenMode);
 WTF_EXPORT_PRIVATE void closeFile(PlatformFileHandle&);
 // Returns the resulting offset from the beginning of the file if successful, -1 otherwise.
 WTF_EXPORT_PRIVATE long long seekFile(PlatformFileHandle, long long offset, FileSeekOrigin);
-bool truncateFile(PlatformFileHandle, long long offset);
+WTF_EXPORT_PRIVATE bool truncateFile(PlatformFileHandle, long long offset);
 // Returns number of bytes actually read if successful, -1 otherwise.
 WTF_EXPORT_PRIVATE int writeToFile(PlatformFileHandle, const char* data, int length);
 // Returns number of bytes actually written if successful, -1 otherwise.
 WTF_EXPORT_PRIVATE int readFromFile(PlatformFileHandle, char* data, int length);
 
@@ -156,10 +162,11 @@
 
 // Appends the contents of the file found at 'path' to the open PlatformFileHandle.
 // Returns true if the write was successful, false if it was not.
 WTF_EXPORT_PRIVATE bool appendFileContentsToFileHandle(const String& path, PlatformFileHandle&);
 
+WTF_EXPORT_PRIVATE bool hardLink(const String& source, const String& destination);
 // Hard links a file if possible, copies it if not.
 WTF_EXPORT_PRIVATE bool hardLinkOrCopyFile(const String& source, const String& destination);
 
 #if USE(FILE_LOCK)
 WTF_EXPORT_PRIVATE bool lockFile(PlatformFileHandle, OptionSet<FileLockMode>);
@@ -192,27 +199,43 @@
 WTF_EXPORT_PRIVATE bool deleteNonEmptyDirectory(const String&);
 #endif
 
 WTF_EXPORT_PRIVATE String realPath(const String&);
 
+WTF_EXPORT_PRIVATE bool isSafeToUseMemoryMapForPath(const String&);
+WTF_EXPORT_PRIVATE void makeSafeToUseMemoryMapForPath(const String&);
+
+WTF_EXPORT_PRIVATE bool unmapViewOfFile(void* buffer, size_t);
+
 class MappedFileData {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     MappedFileData() { }
     MappedFileData(MappedFileData&&);
-    WTF_EXPORT_PRIVATE MappedFileData(const String& filePath, bool& success);
+    WTF_EXPORT_PRIVATE MappedFileData(const String& filePath, MappedFileMode, bool& success);
+    WTF_EXPORT_PRIVATE MappedFileData(PlatformFileHandle, MappedFileMode, bool& success);
     WTF_EXPORT_PRIVATE ~MappedFileData();
     MappedFileData& operator=(MappedFileData&&);
 
     explicit operator bool() const { return !!m_fileData; }
     const void* data() const { return m_fileData; }
     unsigned size() const { return m_fileSize; }
 
+    void* leakHandle() { return std::exchange(m_fileData, nullptr); }
+
 private:
+    WTF_EXPORT_PRIVATE bool mapFileHandle(PlatformFileHandle, MappedFileMode);
+
     void* m_fileData { nullptr };
     unsigned m_fileSize { 0 };
 };
 
+inline MappedFileData::MappedFileData(PlatformFileHandle handle, MappedFileMode mode, bool& success)
+{
+    success = mapFileHandle(handle, mode);
+}
+
 inline MappedFileData::MappedFileData(MappedFileData&& other)
     : m_fileData(std::exchange(other.m_fileData, nullptr))
     , m_fileSize(std::exchange(other.m_fileSize, 0))
 {
 }
