diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/TextPaintStyle.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/TextPaintStyle.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/TextPaintStyle.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/TextPaintStyle.cpp
@@ -24,10 +24,11 @@
  */
 
 #include "config.h"
 #include "TextPaintStyle.h"
 
+#include "ColorUtilities.h"
 #include "FocusController.h"
 #include "Frame.h"
 #include "GraphicsContext.h"
 #include "Page.h"
 #include "PaintInfo.h"
@@ -49,18 +50,22 @@
 {
     return fillColor == other.fillColor && strokeColor == other.strokeColor && emphasisMarkColor == other.emphasisMarkColor
         && strokeWidth == other.strokeWidth && paintOrder == other.paintOrder && lineJoin == other.lineJoin
 #if ENABLE(LETTERPRESS)
         && useLetterpressEffect == other.useLetterpressEffect
+#endif
+#if HAVE(OS_DARK_MODE_SUPPORT)
+        && useDarkAppearance == other.useDarkAppearance
 #endif
         && lineCap == other.lineCap && miterLimit == other.miterLimit;
 }
 
 bool textColorIsLegibleAgainstBackgroundColor(const Color& textColor, const Color& backgroundColor)
 {
-    // Semi-arbitrarily chose 65025 (255^2) value here after a few tests.
-    return differenceSquared(textColor, backgroundColor) > 65025;
+    // Uses the WCAG 2.0 definition of legibility: a contrast ratio of 4.5:1 or greater.
+    // https://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast
+    return contrastRatio(textColor, backgroundColor) > 4.5;
 }
 
 static Color adjustColorForVisibilityOnBackground(const Color& textColor, const Color& backgroundColor)
 {
     if (textColorIsLegibleAgainstBackgroundColor(textColor, backgroundColor))
@@ -79,10 +84,15 @@
     TextPaintStyle paintStyle;
 
 #if ENABLE(LETTERPRESS)
     paintStyle.useLetterpressEffect = lineStyle.textDecorationsInEffect().contains(TextDecoration::Letterpress);
 #endif
+
+#if HAVE(OS_DARK_MODE_SUPPORT)
+    paintStyle.useDarkAppearance = frame.document() ? frame.document()->useDarkAppearance(&lineStyle) : false;
+#endif
+
     auto viewportSize = frame.view() ? frame.view()->size() : IntSize();
     paintStyle.strokeWidth = lineStyle.computedStrokeWidth(viewportSize);
     paintStyle.paintOrder = lineStyle.paintOrder();
     paintStyle.lineJoin = lineStyle.joinStyle();
     paintStyle.lineCap = lineStyle.capStyle();
@@ -184,10 +194,14 @@
     if (mode != newMode) {
         context.setTextDrawingMode(newMode);
         mode = newMode;
     }
 
+#if HAVE(OS_DARK_MODE_SUPPORT)
+    context.setUseDarkAppearance(paintStyle.useDarkAppearance);
+#endif
+
     Color fillColor = fillColorType == UseEmphasisMarkColor ? paintStyle.emphasisMarkColor : paintStyle.fillColor;
     if (mode & TextModeFill && (fillColor != context.fillColor()))
         context.setFillColor(fillColor);
 
     if (mode & TextModeStroke) {
