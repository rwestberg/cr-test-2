diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/MessageEvent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/MessageEvent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/MessageEvent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/MessageEvent.cpp
@@ -36,11 +36,11 @@
 
 using namespace JSC;
 
 MessageEvent::MessageEvent() = default;
 
-inline MessageEvent::MessageEvent(const AtomicString& type, Init&& initializer, IsTrusted isTrusted)
+inline MessageEvent::MessageEvent(const AtomString& type, Init&& initializer, IsTrusted isTrusted)
     : Event(type, initializer, isTrusted)
     , m_data(JSValueInWrappedObject { initializer.data })
     , m_origin(initializer.origin)
     , m_lastEventId(initializer.lastEventId)
     , m_source(WTFMove(initializer.source))
@@ -56,11 +56,11 @@
     , m_source(WTFMove(source))
     , m_ports(WTFMove(ports))
 {
 }
 
-inline MessageEvent::MessageEvent(const AtomicString& type, Ref<SerializedScriptValue>&& data, const String& origin, const String& lastEventId)
+inline MessageEvent::MessageEvent(const AtomString& type, Ref<SerializedScriptValue>&& data, const String& origin, const String& lastEventId)
     : Event(type, CanBubble::No, IsCancelable::No)
     , m_data(WTFMove(data))
     , m_origin(origin)
     , m_lastEventId(lastEventId)
 {
@@ -69,11 +69,11 @@
 Ref<MessageEvent> MessageEvent::create(Vector<RefPtr<MessagePort>>&& ports, Ref<SerializedScriptValue>&& data, const String& origin, const String& lastEventId, Optional<MessageEventSource>&& source)
 {
     return adoptRef(*new MessageEvent(WTFMove(data), origin, lastEventId, WTFMove(source), WTFMove(ports)));
 }
 
-Ref<MessageEvent> MessageEvent::create(const AtomicString& type, Ref<SerializedScriptValue>&& data, const String& origin, const String& lastEventId)
+Ref<MessageEvent> MessageEvent::create(const AtomString& type, Ref<SerializedScriptValue>&& data, const String& origin, const String& lastEventId)
 {
     return adoptRef(*new MessageEvent(type, WTFMove(data), origin, lastEventId));
 }
 
 Ref<MessageEvent> MessageEvent::create(const String& data, const String& origin)
@@ -94,18 +94,18 @@
 Ref<MessageEvent> MessageEvent::createForBindings()
 {
     return adoptRef(*new MessageEvent);
 }
 
-Ref<MessageEvent> MessageEvent::create(const AtomicString& type, Init&& initializer, IsTrusted isTrusted)
+Ref<MessageEvent> MessageEvent::create(const AtomString& type, Init&& initializer, IsTrusted isTrusted)
 {
     return adoptRef(*new MessageEvent(type, WTFMove(initializer), isTrusted));
 }
 
 MessageEvent::~MessageEvent() = default;
 
-void MessageEvent::initMessageEvent(const AtomicString& type, bool canBubble, bool cancelable, JSValue data, const String& origin, const String& lastEventId, Optional<MessageEventSource>&& source, Vector<RefPtr<MessagePort>>&& ports)
+void MessageEvent::initMessageEvent(const AtomString& type, bool canBubble, bool cancelable, JSValue data, const String& origin, const String& lastEventId, Optional<MessageEventSource>&& source, Vector<RefPtr<MessagePort>>&& ports)
 {
     if (isBeingDispatched())
         return;
 
     initEvent(type, canBubble, cancelable);
