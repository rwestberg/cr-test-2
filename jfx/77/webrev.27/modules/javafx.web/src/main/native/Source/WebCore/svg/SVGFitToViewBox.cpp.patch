diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFitToViewBox.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFitToViewBox.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFitToViewBox.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFitToViewBox.cpp
@@ -32,44 +32,40 @@
 #include "SVGPreserveAspectRatioValue.h"
 #include <wtf/text/StringView.h>
 
 namespace WebCore {
 
-SVGFitToViewBox::SVGFitToViewBox(SVGElement* contextElement, AnimatedPropertyState animatedState)
-    : m_attributeOwnerProxy(*this, *contextElement, animatedState)
+SVGFitToViewBox::SVGFitToViewBox(SVGElement* contextElement, SVGPropertyAccess access)
+    : m_viewBox(SVGAnimatedRect::create(contextElement, access))
+    , m_preserveAspectRatio(SVGAnimatedPreserveAspectRatio::create(contextElement, access))
 {
-    registerAttributes();
-}
-
-void SVGFitToViewBox::registerAttributes()
-{
-    auto& registry = attributeRegistry();
-    if (!registry.isEmpty())
-        return;
-    registry.registerAttribute<SVGNames::viewBoxAttr, &SVGFitToViewBox::m_viewBox>();
-    registry.registerAttribute<SVGNames::preserveAspectRatioAttr, &SVGFitToViewBox::m_preserveAspectRatio>();
+    static std::once_flag onceFlag;
+    std::call_once(onceFlag, [] {
+        PropertyRegistry::registerProperty<SVGNames::viewBoxAttr, &SVGFitToViewBox::m_viewBox>();
+        PropertyRegistry::registerProperty<SVGNames::preserveAspectRatioAttr, &SVGFitToViewBox::m_preserveAspectRatio>();
+    });
 }
 
 void SVGFitToViewBox::setViewBox(const FloatRect& viewBox)
 {
-    m_viewBox.setValue(viewBox);
+    m_viewBox->setBaseValInternal(viewBox);
     m_isViewBoxValid = true;
 }
 
 void SVGFitToViewBox::resetViewBox()
 {
-    m_viewBox.resetValue();
+    m_viewBox->setBaseValInternal({ });
     m_isViewBoxValid = false;
 }
 
 void SVGFitToViewBox::reset()
 {
     resetViewBox();
     resetPreserveAspectRatio();
 }
 
-bool SVGFitToViewBox::parseAttribute(const QualifiedName& name, const AtomicString& value)
+bool SVGFitToViewBox::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == SVGNames::viewBoxAttr) {
         FloatRect viewBox;
         if (!value.isNull() && parseViewBox(value, viewBox))
             setViewBox(viewBox);
@@ -86,11 +82,11 @@
     }
 
     return false;
 }
 
-bool SVGFitToViewBox::parseViewBox(const AtomicString& value, FloatRect& viewBox)
+bool SVGFitToViewBox::parseViewBox(const AtomString& value, FloatRect& viewBox)
 {
     auto upconvertedCharacters = StringView(value).upconvertedCharacters();
     const UChar* characters = upconvertedCharacters;
     return parseViewBox(characters, characters + value.length(), viewBox);
 }
@@ -106,11 +102,11 @@
     float width = 0.0f;
     float height = 0.0f;
     bool valid = parseNumber(c, end, x) && parseNumber(c, end, y) && parseNumber(c, end, width) && parseNumber(c, end, height, false);
 
     if (validate) {
-        Document& document = m_attributeOwnerProxy.element().document();
+        Document& document = m_viewBox->contextElement()->document();
 
         if (!valid) {
             document.accessSVGExtensions().reportWarning("Problem parsing viewBox=\"" + str + "\"");
             return false;
         }
