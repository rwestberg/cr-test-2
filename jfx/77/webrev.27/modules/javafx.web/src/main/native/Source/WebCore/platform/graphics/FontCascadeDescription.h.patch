diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCascadeDescription.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCascadeDescription.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCascadeDescription.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCascadeDescription.h
@@ -41,27 +41,27 @@
 typedef FontFamilySpecificationCoreText FontFamilyPlatformSpecification;
 #else
 typedef FontFamilySpecificationNull FontFamilyPlatformSpecification;
 #endif
 
-typedef Variant<AtomicString, FontFamilyPlatformSpecification> FontFamilySpecification;
+typedef Variant<AtomString, FontFamilyPlatformSpecification> FontFamilySpecification;
 
 class FontCascadeDescription : public FontDescription {
 public:
     WEBCORE_EXPORT FontCascadeDescription();
 
     bool operator==(const FontCascadeDescription&) const;
     bool operator!=(const FontCascadeDescription& other) const { return !(*this == other); }
 
     unsigned familyCount() const { return m_families.size(); }
-    const AtomicString& firstFamily() const { return familyAt(0); }
-    const AtomicString& familyAt(unsigned i) const { return m_families[i]; }
-    const RefCountedArray<AtomicString>& families() const { return m_families; }
+    const AtomString& firstFamily() const { return familyAt(0); }
+    const AtomString& familyAt(unsigned i) const { return m_families[i]; }
+    const RefCountedArray<AtomString>& families() const { return m_families; }
 
-    static bool familyNamesAreEqual(const AtomicString&, const AtomicString&);
-    static unsigned familyNameHash(const AtomicString&);
-    static String foldedFamilyName(const AtomicString&);
+    static bool familyNamesAreEqual(const AtomString&, const AtomString&);
+    static unsigned familyNameHash(const AtomString&);
+    static String foldedFamilyName(const String&);
 
     unsigned effectiveFamilyCount() const;
     FontFamilySpecification effectiveFamilyAt(unsigned) const;
 
     float specifiedSize() const { return m_specifiedSize; }
@@ -83,13 +83,13 @@
         return identifier;
     }
     FontSmoothingMode fontSmoothing() const { return static_cast<FontSmoothingMode>(m_fontSmoothing); }
     bool isSpecifiedFont() const { return m_isSpecifiedFont; }
 
-    void setOneFamily(const AtomicString& family) { ASSERT(m_families.size() == 1); m_families[0] = family; }
-    void setFamilies(const Vector<AtomicString>& families) { m_families = RefCountedArray<AtomicString>(families); }
-    void setFamilies(const RefCountedArray<AtomicString>& families) { m_families = families; }
+    void setOneFamily(const AtomString& family) { ASSERT(m_families.size() == 1); m_families[0] = family; }
+    void setFamilies(const Vector<AtomString>& families) { m_families = RefCountedArray<AtomString>(families); }
+    void setFamilies(const RefCountedArray<AtomString>& families) { m_families = families; }
     void setSpecifiedSize(float s) { m_specifiedSize = clampToFloat(s); }
     void setIsAbsoluteSize(bool s) { m_isAbsoluteSize = s; }
     void setKerning(Kerning kerning) { m_kerning = static_cast<unsigned>(kerning); }
     void setKeywordSize(unsigned size)
     {
@@ -130,14 +130,14 @@
     static FontSynthesis initialFontSynthesis() { return FontSynthesisWeight | FontSynthesisStyle | FontSynthesisSmallCaps; }
     static FontVariantPosition initialVariantPosition() { return FontVariantPosition::Normal; }
     static FontVariantCaps initialVariantCaps() { return FontVariantCaps::Normal; }
     static FontVariantAlternates initialVariantAlternates() { return FontVariantAlternates::Normal; }
     static FontOpticalSizing initialOpticalSizing() { return FontOpticalSizing::Enabled; }
-    static const AtomicString& initialLocale() { return nullAtom(); }
+    static const AtomString& initialLocale() { return nullAtom(); }
 
 private:
-    RefCountedArray<AtomicString> m_families { 1 };
+    RefCountedArray<AtomString> m_families { 1 };
 
     // Specified CSS value. Independent of rendering issues such as integer rounding, minimum font sizes, and zooming.
     float m_specifiedSize { 0 };
     // Whether or not CSS specified an explicit size (logical sizes like "medium" don't count).
     unsigned m_isAbsoluteSize : 1;
