diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGDesiredWatchpoints.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGDesiredWatchpoints.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGDesiredWatchpoints.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGDesiredWatchpoints.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013-2015 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -26,20 +26,22 @@
 #pragma once
 
 #if ENABLE(DFG_JIT)
 
 #include "DFGCommonData.h"
-#include "InferredValue.h"
+#include "FunctionExecutable.h"
 #include "JSArrayBufferView.h"
 #include "ObjectPropertyCondition.h"
+#include "SymbolTable.h"
 #include "Watchpoint.h"
 #include <wtf/CommaPrinter.h>
 #include <wtf/HashSet.h>
 
 namespace JSC { namespace DFG {
 
 class Graph;
+struct Prefix;
 
 template<typename T>
 struct SetPointerAdaptor {
     static void add(CodeBlock* codeBlock, T set, CommonData& common)
     {
@@ -53,19 +55,31 @@
     {
         out.print(RawPointer(set));
     }
 };
 
-struct InferredValueAdaptor {
-    static void add(CodeBlock*, InferredValue*, CommonData&);
-    static bool hasBeenInvalidated(InferredValue* inferredValue)
+struct SymbolTableAdaptor {
+    static void add(CodeBlock*, SymbolTable*, CommonData&);
+    static bool hasBeenInvalidated(SymbolTable* symbolTable)
     {
-        return inferredValue->hasBeenInvalidated();
+        return symbolTable->singleton().hasBeenInvalidated();
     }
-    static void dumpInContext(PrintStream& out, InferredValue* inferredValue, DumpContext*)
+    static void dumpInContext(PrintStream& out, SymbolTable* symbolTable, DumpContext*)
     {
-        out.print(RawPointer(inferredValue));
+        out.print(RawPointer(symbolTable));
+    }
+};
+
+struct FunctionExecutableAdaptor {
+    static void add(CodeBlock*, FunctionExecutable*, CommonData&);
+    static bool hasBeenInvalidated(FunctionExecutable* executable)
+    {
+        return executable->singleton().hasBeenInvalidated();
+    }
+    static void dumpInContext(PrintStream& out, FunctionExecutable* executable, DumpContext*)
+    {
+        out.print(RawPointer(executable));
     }
 };
 
 struct ArrayBufferViewWatchpointAdaptor {
     static void add(CodeBlock*, JSArrayBufferView*, CommonData&);
@@ -152,11 +166,12 @@
     DesiredWatchpoints();
     ~DesiredWatchpoints();
 
     void addLazily(WatchpointSet*);
     void addLazily(InlineWatchpointSet&);
-    void addLazily(InferredValue*);
+    void addLazily(SymbolTable*);
+    void addLazily(FunctionExecutable*);
     void addLazily(JSArrayBufferView*);
 
     // It's recommended that you don't call this directly. Use Graph::watchCondition(), which does
     // the required GC magic as well as some other bookkeeping.
     void addLazily(const ObjectPropertyCondition&);
@@ -173,29 +188,33 @@
     }
     bool isWatched(InlineWatchpointSet& set)
     {
         return m_inlineSets.isWatched(&set);
     }
-    bool isWatched(InferredValue* inferredValue)
+    bool isWatched(SymbolTable* symbolTable)
+    {
+        return m_symbolTables.isWatched(symbolTable);
+    }
+    bool isWatched(FunctionExecutable* executable)
     {
-        return m_inferredValues.isWatched(inferredValue);
+        return m_functionExecutables.isWatched(executable);
     }
     bool isWatched(JSArrayBufferView* view)
     {
         return m_bufferViews.isWatched(view);
     }
     bool isWatched(const ObjectPropertyCondition& key)
     {
         return m_adaptiveStructureSets.isWatched(key);
     }
     void dumpInContext(PrintStream&, DumpContext*) const;
-    void dump(PrintStream&) const;
 
 private:
     GenericDesiredWatchpoints<WatchpointSet*> m_sets;
     GenericDesiredWatchpoints<InlineWatchpointSet*> m_inlineSets;
-    GenericDesiredWatchpoints<InferredValue*, InferredValueAdaptor> m_inferredValues;
+    GenericDesiredWatchpoints<SymbolTable*, SymbolTableAdaptor> m_symbolTables;
+    GenericDesiredWatchpoints<FunctionExecutable*, FunctionExecutableAdaptor> m_functionExecutables;
     GenericDesiredWatchpoints<JSArrayBufferView*, ArrayBufferViewWatchpointAdaptor> m_bufferViews;
     GenericDesiredWatchpoints<ObjectPropertyCondition, AdaptiveStructureWatchpointAdaptor> m_adaptiveStructureSets;
 };
 
 } } // namespace JSC::DFG
