diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGExternalResourcesRequired.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGExternalResourcesRequired.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGExternalResourcesRequired.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGExternalResourcesRequired.h
@@ -1,9 +1,9 @@
 /*
  * Copyright (C) 2004, 2005, 2008 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005 Rob Buis <buis@kde.org>
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -20,11 +20,11 @@
  */
 
 #pragma once
 
 #include "QualifiedName.h"
-#include "SVGAttributeOwnerProxyImpl.h"
+#include "SVGPropertyOwnerRegistry.h"
 #include <wtf/HashSet.h>
 
 namespace WebCore {
 
 class SVGElement;
@@ -37,27 +37,24 @@
 class SVGExternalResourcesRequired {
     WTF_MAKE_NONCOPYABLE(SVGExternalResourcesRequired);
 public:
     virtual ~SVGExternalResourcesRequired() = default;
 
-    void parseAttribute(const QualifiedName&, const AtomicString&);
+    void parseAttribute(const QualifiedName&, const AtomString&);
     void svgAttributeChanged(const QualifiedName&);
 
     static void addSupportedAttributes(HashSet<QualifiedName>&);
 
-    using AttributeOwnerProxy = SVGAttributeOwnerProxyImpl<SVGExternalResourcesRequired>;
-    static auto& attributeRegistry() { return AttributeOwnerProxy::attributeRegistry(); }
+    using PropertyRegistry = SVGPropertyOwnerRegistry<SVGExternalResourcesRequired>;
 
-    auto externalResourcesRequiredAnimated() { return m_externalResourcesRequired.animatedProperty(attributeOwnerProxy()); }
-
-    bool externalResourcesRequired() const { return m_externalResourcesRequired.value(); }
-    void setExternalResourcesRequired(bool externalResourcesRequired) { m_externalResourcesRequired.setValue(externalResourcesRequired); }
+    bool externalResourcesRequired() const { return m_externalResourcesRequired->currentValue(); }
+    SVGAnimatedBoolean& externalResourcesRequiredAnimated() { return m_externalResourcesRequired; }
 
 protected:
     SVGExternalResourcesRequired(SVGElement* contextElement);
 
-    static bool isKnownAttribute(const QualifiedName& attributeName) { return AttributeOwnerProxy::isKnownAttribute(attributeName); }
+    static bool isKnownAttribute(const QualifiedName& attributeName) { return PropertyRegistry::isKnownAttribute(attributeName); }
 
     virtual void setHaveFiredLoadEvent(bool) { }
     virtual bool isParserInserted() const { return false; }
     virtual bool haveFiredLoadEvent() const { return false; }
 
@@ -65,13 +62,10 @@
     void insertedIntoDocument();
     void finishParsingChildren();
     bool haveLoadedRequiredResources() const;
 
 private:
-    static void registerAttributes();
-    AttributeOwnerProxy attributeOwnerProxy() { return { *this, m_contextElement }; }
-
     SVGElement& m_contextElement;
-    SVGAnimatedBooleanAttribute m_externalResourcesRequired;
+    Ref<SVGAnimatedBoolean> m_externalResourcesRequired;
 };
 
 } // namespace WebCore
