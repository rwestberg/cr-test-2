diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDatabaseAgent.h b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDatabaseAgent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDatabaseAgent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDatabaseAgent.h
@@ -31,10 +31,11 @@
 
 #include "InspectorWebAgentBase.h"
 #include <JavaScriptCore/InspectorBackendDispatchers.h>
 #include <JavaScriptCore/InspectorFrontendDispatchers.h>
 #include <wtf/HashMap.h>
+#include <wtf/Optional.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 class Database;
@@ -44,36 +45,36 @@
 
 class InspectorDatabaseAgent final : public InspectorAgentBase, public Inspector::DatabaseBackendDispatcherHandler {
     WTF_MAKE_NONCOPYABLE(InspectorDatabaseAgent);
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    explicit InspectorDatabaseAgent(WebAgentContext&);
+    InspectorDatabaseAgent(WebAgentContext&);
     virtual ~InspectorDatabaseAgent();
 
-    void didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*) override;
-    void willDestroyFrontendAndBackend(Inspector::DisconnectReason) override;
+    // InspectorAgentBase
+    void didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*);
+    void willDestroyFrontendAndBackend(Inspector::DisconnectReason);
 
-    void clearResources();
+    // DatabaseBackendDispatcherHandler
+    void enable(ErrorString&);
+    void disable(ErrorString&);
+    void getDatabaseTableNames(ErrorString&, const String& databaseId, RefPtr<JSON::ArrayOf<String>>& names);
+    void executeSQL(const String& databaseId, const String& query, Ref<ExecuteSQLCallback>&&);
 
-    // Called from the front-end.
-    void enable(ErrorString&) override;
-    void disable(ErrorString&) override;
-    void getDatabaseTableNames(ErrorString&, const String& databaseId, RefPtr<JSON::ArrayOf<String>>& names) override;
-    void executeSQL(const String& databaseId, const String& query, Ref<ExecuteSQLCallback>&&) override;
+    // InspectorInstrumentation
+    void didCommitLoad();
+    void didOpenDatabase(Database&);
 
-    // Called from the injected script.
+    // CommandLineAPI
     String databaseId(Database&);
 
-    void didOpenDatabase(RefPtr<Database>&&, const String& domain, const String& name, const String& version);
 private:
     Database* databaseForId(const String& databaseId);
     InspectorDatabaseResource* findByFileName(const String& fileName);
 
     std::unique_ptr<Inspector::DatabaseFrontendDispatcher> m_frontendDispatcher;
     RefPtr<Inspector::DatabaseBackendDispatcher> m_backendDispatcher;
 
-    typedef HashMap<String, RefPtr<InspectorDatabaseResource>> DatabaseResourcesMap;
-    DatabaseResourcesMap m_resources;
-    bool m_enabled { false };
+    HashMap<String, RefPtr<InspectorDatabaseResource>> m_resources;
 };
 
 } // namespace WebCore
