diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTrackElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTrackElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTrackElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTrackElement.cpp
@@ -97,11 +97,11 @@
 
     if (!parentNode() && is<HTMLMediaElement>(oldParentOfRemovedTree))
         downcast<HTMLMediaElement>(oldParentOfRemovedTree).didRemoveTextTrack(*this);
 }
 
-void HTMLTrackElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLTrackElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == srcAttr) {
         scheduleLoad();
 
     // 4.8.10.12.3 Sourcing out-of-band text tracks
@@ -116,26 +116,26 @@
         track().setIsDefault(!value.isNull());
 
     HTMLElement::parseAttribute(name, value);
 }
 
-const AtomicString& HTMLTrackElement::kind()
+const AtomString& HTMLTrackElement::kind()
 {
     return track().kindKeyword();
 }
 
-void HTMLTrackElement::setKind(const AtomicString& kind)
+void HTMLTrackElement::setKind(const AtomString& kind)
 {
     setAttributeWithoutSynchronization(kindAttr, kind);
 }
 
-const AtomicString& HTMLTrackElement::srclang() const
+const AtomString& HTMLTrackElement::srclang() const
 {
     return attributeWithoutSynchronization(srclangAttr);
 }
 
-const AtomicString& HTMLTrackElement::label() const
+const AtomString& HTMLTrackElement::label() const
 {
     return attributeWithoutSynchronization(labelAttr);
 }
 
 bool HTMLTrackElement::isDefault() const
@@ -277,11 +277,11 @@
 HTMLTrackElement::ReadyState HTMLTrackElement::readyState()
 {
     return static_cast<ReadyState>(track().readinessState());
 }
 
-const AtomicString& HTMLTrackElement::mediaElementCrossOriginAttribute() const
+const AtomString& HTMLTrackElement::mediaElementCrossOriginAttribute() const
 {
     if (auto parent = mediaElement())
         return parent->attributeWithoutSynchronization(HTMLNames::crossoriginAttr);
     return nullAtom();
 }
