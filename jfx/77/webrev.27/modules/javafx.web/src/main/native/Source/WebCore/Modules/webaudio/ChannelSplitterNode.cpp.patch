diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/ChannelSplitterNode.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/ChannelSplitterNode.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/ChannelSplitterNode.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/ChannelSplitterNode.cpp
@@ -29,13 +29,16 @@
 #include "ChannelSplitterNode.h"
 
 #include "AudioContext.h"
 #include "AudioNodeInput.h"
 #include "AudioNodeOutput.h"
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(ChannelSplitterNode);
+
 RefPtr<ChannelSplitterNode> ChannelSplitterNode::create(AudioContext& context, float sampleRate, unsigned numberOfOutputs)
 {
     if (!numberOfOutputs || numberOfOutputs > AudioContext::maxNumberOfChannels())
         return nullptr;
 
@@ -43,17 +46,17 @@
 }
 
 ChannelSplitterNode::ChannelSplitterNode(AudioContext& context, float sampleRate, unsigned numberOfOutputs)
     : AudioNode(context, sampleRate)
 {
-    addInput(std::make_unique<AudioNodeInput>(this));
+    setNodeType(NodeTypeChannelSplitter);
+
+    addInput(makeUnique<AudioNodeInput>(this));
 
     // Create a fixed number of outputs (able to handle the maximum number of channels fed to an input).
     for (unsigned i = 0; i < numberOfOutputs; ++i)
-        addOutput(std::make_unique<AudioNodeOutput>(this, 1));
-
-    setNodeType(NodeTypeChannelSplitter);
+        addOutput(makeUnique<AudioNodeOutput>(this, 1));
 
     initialize();
 }
 
 void ChannelSplitterNode::process(size_t framesToProcess)
