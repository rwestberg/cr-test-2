diff a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLProgram.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLProgram.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLProgram.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLProgram.cpp
@@ -29,27 +29,57 @@
 #if ENABLE(WEBGL)
 
 #include "WebGLContextGroup.h"
 #include "WebGLRenderingContextBase.h"
 #include "WebGLShader.h"
+#include <wtf/HashMap.h>
+#include <wtf/Lock.h>
+#include <wtf/NeverDestroyed.h>
 
 namespace WebCore {
 
+HashMap<WebGLProgram*, WebGLRenderingContextBase*>& WebGLProgram::instances(const LockHolder&)
+{
+    static NeverDestroyed<HashMap<WebGLProgram*, WebGLRenderingContextBase*>> instances;
+    return instances;
+}
+
+Lock& WebGLProgram::instancesMutex()
+{
+    static LazyNeverDestroyed<Lock> mutex;
+    static std::once_flag initializeMutex;
+    std::call_once(initializeMutex, [] {
+        mutex.construct();
+    });
+    return mutex.get();
+}
+
 Ref<WebGLProgram> WebGLProgram::create(WebGLRenderingContextBase& ctx)
 {
     return adoptRef(*new WebGLProgram(ctx));
 }
 
 WebGLProgram::WebGLProgram(WebGLRenderingContextBase& ctx)
     : WebGLSharedObject(ctx)
 {
+    {
+        LockHolder lock(instancesMutex());
+        instances(lock).add(this, &ctx);
+    }
+
     setObject(ctx.graphicsContext3D()->createProgram());
 }
 
 WebGLProgram::~WebGLProgram()
 {
     deleteObject(0);
+
+    {
+        LockHolder lock(instancesMutex());
+        ASSERT(instances(lock).contains(this));
+        instances(lock).remove(this);
+    }
 }
 
 void WebGLProgram::deleteObjectImpl(GraphicsContext3D* context3d, Platform3DObject obj)
 {
     context3d->deleteProgram(obj);
