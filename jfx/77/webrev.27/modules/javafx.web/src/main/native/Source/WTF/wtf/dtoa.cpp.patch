diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa.cpp
@@ -36,22 +36,22 @@
     auto& converter = double_conversion::DoubleToStringConverter::EcmaScriptConverter();
     converter.ToShortest(d, &builder);
     return builder.Finalize();
 }
 
-static inline const char* formatStringTruncatingTrailingZerosIfNeeded(NumberToStringBuffer& buffer, double_conversion::StringBuilder& builder)
+static inline void truncateTrailingZeros(NumberToStringBuffer& buffer, double_conversion::StringBuilder& builder)
 {
     size_t length = builder.position();
     size_t decimalPointPosition = 0;
     for (; decimalPointPosition < length; ++decimalPointPosition) {
         if (buffer[decimalPointPosition] == '.')
             break;
     }
 
     // No decimal separator found, early exit.
     if (decimalPointPosition == length)
-        return builder.Finalize();
+        return;
 
     size_t pastMantissa = decimalPointPosition + 1;
     for (; pastMantissa < length; ++pastMantissa) {
         if (buffer[pastMantissa] == 'e')
             break;
@@ -63,39 +63,52 @@
             break;
     }
 
     // No trailing zeros found to strip.
     if (truncatedLength == pastMantissa)
-        return builder.Finalize();
+        return;
 
     // If we removed all trailing zeros, remove the decimal point as well.
     if (truncatedLength == decimalPointPosition + 1)
         truncatedLength = decimalPointPosition;
 
     // Truncate the mantissa, and return the final result.
     builder.RemoveCharacters(truncatedLength, pastMantissa);
-    return builder.Finalize();
 }
 
-const char* numberToFixedPrecisionString(double d, unsigned significantFigures, NumberToStringBuffer& buffer, bool truncateTrailingZeros)
+const char* numberToFixedPrecisionString(float number, unsigned significantFigures, NumberToStringBuffer& buffer, bool shouldTruncateTrailingZeros)
+{
+    // For now, just call the double precision version.
+    // Do that here instead of at callers to pave the way to add a more efficient code path later.
+    return numberToFixedPrecisionString(static_cast<double>(number), significantFigures, buffer, shouldTruncateTrailingZeros);
+}
+
+const char* numberToFixedPrecisionString(double d, unsigned significantFigures, NumberToStringBuffer& buffer, bool shouldTruncateTrailingZeros)
 {
-    // Mimic sprintf("%.[precision]g", ...), but use dtoas rounding facilities.
+    // Mimic sprintf("%.[precision]g", ...).
     // "g": Signed value printed in f or e format, whichever is more compact for the given value and precision.
     // The e format is used only when the exponent of the value is less than –4 or greater than or equal to the
     // precision argument. Trailing zeros are truncated, and the decimal point appears only if one or more digits follow it.
     // "precision": The precision specifies the maximum number of significant digits printed.
     double_conversion::StringBuilder builder(&buffer[0], sizeof(buffer));
     auto& converter = double_conversion::DoubleToStringConverter::EcmaScriptConverter();
     converter.ToPrecision(d, significantFigures, &builder);
-    if (!truncateTrailingZeros)
-        return builder.Finalize();
-    return formatStringTruncatingTrailingZerosIfNeeded(buffer, builder);
+    if (shouldTruncateTrailingZeros)
+        truncateTrailingZeros(buffer, builder);
+    return builder.Finalize();
+}
+
+const char* numberToFixedWidthString(float number, unsigned decimalPlaces, NumberToStringBuffer& buffer)
+{
+    // For now, just call the double precision version.
+    // Do that here instead of at callers to pave the way to add a more efficient code path later.
+    return numberToFixedWidthString(static_cast<double>(number), decimalPlaces, buffer);
 }
 
 const char* numberToFixedWidthString(double d, unsigned decimalPlaces, NumberToStringBuffer& buffer)
 {
-    // Mimic sprintf("%.[precision]f", ...), but use dtoas rounding facilities.
+    // Mimic sprintf("%.[precision]f", ...).
     // "f": Signed value having the form [ – ]dddd.dddd, where dddd is one or more decimal digits.
     // The number of digits before the decimal point depends on the magnitude of the number, and
     // the number of digits after the decimal point depends on the requested precision.
     // "precision": The precision value specifies the number of digits after the decimal point.
     // If a decimal point appears, at least one digit appears before it.
