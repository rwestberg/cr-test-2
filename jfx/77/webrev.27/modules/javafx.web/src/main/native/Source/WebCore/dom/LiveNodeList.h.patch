diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/LiveNodeList.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/LiveNodeList.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/LiveNodeList.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/LiveNodeList.h
@@ -1,10 +1,10 @@
 /*
  * Copyright (C) 1999 Lars Knoll (knoll@kde.org)
  *           (C) 1999 Antti Koivisto (koivisto@kde.org)
  *           (C) 2001 Dirk Mueller (mueller@kde.org)
- * Copyright (C) 2004-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2004-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -28,18 +28,20 @@
 #include "Document.h"
 #include "ElementDescendantIterator.h"
 #include "HTMLNames.h"
 #include "NodeList.h"
 #include <wtf/Forward.h>
+#include <wtf/IsoMalloc.h>
 
 namespace WebCore {
 
 class Element;
 
 static bool shouldInvalidateTypeOnAttributeChange(NodeListInvalidationType, const QualifiedName&);
 
 class LiveNodeList : public NodeList {
+    WTF_MAKE_ISO_ALLOCATED(LiveNodeList);
 public:
     LiveNodeList(ContainerNode& ownerNode, NodeListInvalidationType);
     virtual ~LiveNodeList();
 
     virtual bool elementMatches(Element&) const = 0;
@@ -72,10 +74,11 @@
     bool m_isRegisteredForInvalidationAtDocument;
 };
 
 template <class NodeListType>
 class CachedLiveNodeList : public LiveNodeList {
+    WTF_MAKE_ISO_NONALLOCATABLE(CachedLiveNodeList);
 public:
     virtual ~CachedLiveNodeList();
 
     unsigned length() const final { return m_indexCache.nodeCount(nodeList()); }
     Element* item(unsigned offset) const override { return m_indexCache.nodeAt(nodeList(), offset); }
