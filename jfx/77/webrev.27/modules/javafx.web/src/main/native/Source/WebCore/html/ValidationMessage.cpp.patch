diff a/modules/javafx.web/src/main/native/Source/WebCore/html/ValidationMessage.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/ValidationMessage.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/ValidationMessage.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/ValidationMessage.cpp
@@ -1,7 +1,8 @@
 /*
  * Copyright (C) 2010, 2012 Google Inc. All rights reserved.
+ * Copyright (C) 2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are
  * met:
  *
@@ -87,11 +88,11 @@
     if (!validationMessageClient()) {
         // HTML5 specification doesn't ask UA to show the title attribute value
         // with the validationMessage. However, this behavior is same as Opera
         // and the specification describes such behavior as an example.
         if (!updatedMessage.isEmpty()) {
-            const AtomicString& title = m_element->attributeWithoutSynchronization(titleAttr);
+            const AtomString& title = m_element->attributeWithoutSynchronization(titleAttr);
             if (!title.isEmpty())
                 updatedMessage = updatedMessage + '\n' + title;
         }
     }
 
@@ -112,13 +113,13 @@
     // Don't modify the DOM tree in this context.
     // If so, an assertion in Element::isFocusable() fails.
     ASSERT(!message.isEmpty());
     m_message = message;
     if (!m_bubble)
-        m_timer = std::make_unique<Timer>(*this, &ValidationMessage::buildBubbleTree);
+        m_timer = makeUnique<Timer>(*this, &ValidationMessage::buildBubbleTree);
     else
-        m_timer = std::make_unique<Timer>(*this, &ValidationMessage::setMessageDOMAndStartTimer);
+        m_timer = makeUnique<Timer>(*this, &ValidationMessage::setMessageDOMAndStartTimer);
     m_timer->startOneShot(0_s);
 }
 
 void ValidationMessage::setMessageDOMAndStartTimer()
 {
@@ -140,11 +141,11 @@
 
     int magnification = document.page() ? document.page()->settings().validationMessageTimerMagnification() : -1;
     if (magnification <= 0)
         m_timer = nullptr;
     else {
-        m_timer = std::make_unique<Timer>(*this, &ValidationMessage::deleteBubbleTree);
+        m_timer = makeUnique<Timer>(*this, &ValidationMessage::deleteBubbleTree);
         m_timer->startOneShot(std::max(5_s, 1_ms * static_cast<double>(m_message.length()) * magnification));
     }
 }
 
 static void adjustBubblePosition(const LayoutRect& hostRect, HTMLElement* bubble)
@@ -180,37 +181,44 @@
 
     ShadowRoot& shadowRoot = m_element->ensureUserAgentShadowRoot();
 
     Document& document = m_element->document();
     m_bubble = HTMLDivElement::create(document);
-    m_bubble->setPseudo(AtomicString("-webkit-validation-bubble", AtomicString::ConstructFromLiteral));
+    m_bubble->setPseudo(AtomString("-webkit-validation-bubble", AtomString::ConstructFromLiteral));
     // Need to force position:absolute because RenderMenuList doesn't assume it
     // contains non-absolute or non-fixed renderers as children.
     m_bubble->setInlineStyleProperty(CSSPropertyPosition, CSSValueAbsolute);
     shadowRoot.appendChild(*m_bubble);
+
+    auto weakElement = makeWeakPtr(*m_element);
+
     document.updateLayout();
+
+    if (!weakElement || !m_element->renderer())
+        return;
+
     adjustBubblePosition(m_element->renderer()->absoluteBoundingBoxRect(), m_bubble.get());
 
     auto clipper = HTMLDivElement::create(document);
-    clipper->setPseudo(AtomicString("-webkit-validation-bubble-arrow-clipper", AtomicString::ConstructFromLiteral));
+    clipper->setPseudo(AtomString("-webkit-validation-bubble-arrow-clipper", AtomString::ConstructFromLiteral));
     auto bubbleArrow = HTMLDivElement::create(document);
-    bubbleArrow->setPseudo(AtomicString("-webkit-validation-bubble-arrow", AtomicString::ConstructFromLiteral));
+    bubbleArrow->setPseudo(AtomString("-webkit-validation-bubble-arrow", AtomString::ConstructFromLiteral));
     clipper->appendChild(bubbleArrow);
     m_bubble->appendChild(clipper);
 
     auto message = HTMLDivElement::create(document);
-    message->setPseudo(AtomicString("-webkit-validation-bubble-message", AtomicString::ConstructFromLiteral));
+    message->setPseudo(AtomString("-webkit-validation-bubble-message", AtomString::ConstructFromLiteral));
     auto icon = HTMLDivElement::create(document);
-    icon->setPseudo(AtomicString("-webkit-validation-bubble-icon", AtomicString::ConstructFromLiteral));
+    icon->setPseudo(AtomString("-webkit-validation-bubble-icon", AtomString::ConstructFromLiteral));
     message->appendChild(icon);
     auto textBlock = HTMLDivElement::create(document);
-    textBlock->setPseudo(AtomicString("-webkit-validation-bubble-text-block", AtomicString::ConstructFromLiteral));
+    textBlock->setPseudo(AtomString("-webkit-validation-bubble-text-block", AtomString::ConstructFromLiteral));
     m_messageHeading = HTMLDivElement::create(document);
-    m_messageHeading->setPseudo(AtomicString("-webkit-validation-bubble-heading", AtomicString::ConstructFromLiteral));
+    m_messageHeading->setPseudo(AtomString("-webkit-validation-bubble-heading", AtomString::ConstructFromLiteral));
     textBlock->appendChild(*m_messageHeading);
     m_messageBody = HTMLDivElement::create(document);
-    m_messageBody->setPseudo(AtomicString("-webkit-validation-bubble-body", AtomicString::ConstructFromLiteral));
+    m_messageBody->setPseudo(AtomString("-webkit-validation-bubble-body", AtomString::ConstructFromLiteral));
     textBlock->appendChild(*m_messageBody);
     message->appendChild(textBlock);
     m_bubble->appendChild(message);
 
     setMessageDOMAndStartTimer();
@@ -224,11 +232,11 @@
         client->hideValidationMessage(*m_element);
         return;
     }
 
     // We must not modify the DOM tree in this context by the same reason as setMessage().
-    m_timer = std::make_unique<Timer>(*this, &ValidationMessage::deleteBubbleTree);
+    m_timer = makeUnique<Timer>(*this, &ValidationMessage::deleteBubbleTree);
     m_timer->startOneShot(0_s);
 }
 
 bool ValidationMessage::shadowTreeContains(const Node& node) const
 {
