diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/AudioScheduledSourceNode.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/AudioScheduledSourceNode.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/AudioScheduledSourceNode.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/AudioScheduledSourceNode.cpp
@@ -33,18 +33,21 @@
 #include "Event.h"
 #include "EventNames.h"
 #include "ScriptController.h"
 #include "ScriptExecutionContext.h"
 #include <algorithm>
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/MathExtras.h>
 
 #if PLATFORM(IOS_FAMILY)
 #include "ScriptController.h"
 #endif
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(AudioScheduledSourceNode);
+
 const double AudioScheduledSourceNode::UnknownTime = -1;
 
 AudioScheduledSourceNode::AudioScheduledSourceNode(AudioContext& context, float sampleRate)
     : AudioNode(context, sampleRate)
     , m_endTime(UnknownTime)
@@ -130,10 +133,11 @@
 }
 
 ExceptionOr<void> AudioScheduledSourceNode::start(double when)
 {
     ASSERT(isMainThread());
+    ALWAYS_LOG(LOGIDENTIFIER, when);
 
     context().nodeWillBeginPlayback();
 
     if (m_playbackState != UNSCHEDULED_STATE)
         return Exception { InvalidStateError };
@@ -147,10 +151,11 @@
 }
 
 ExceptionOr<void> AudioScheduledSourceNode::stop(double when)
 {
     ASSERT(isMainThread());
+    ALWAYS_LOG(LOGIDENTIFIER, when);
 
     if (m_playbackState == UNSCHEDULED_STATE || m_endTime != UnknownTime)
         return Exception { InvalidStateError };
     if (!std::isfinite(when) || when < 0)
         return Exception { InvalidStateError };
@@ -170,32 +175,26 @@
     }
 
     if (!m_hasEndedListener)
         return;
 
-    auto* scriptExecutionContext = this->scriptExecutionContext();
-    if (!scriptExecutionContext)
-        return;
-
-    scriptExecutionContext->postTask([this, protectedThis = makeRef(*this)] (auto&) {
-        // Make sure ActiveDOMObjects have not been stopped after scheduling this task.
-        if (!this->scriptExecutionContext())
+    context().postTask([this, protectedThis = makeRef(*this)] {
+        if (context().isStopped())
             return;
-
         this->dispatchEvent(Event::create(eventNames().endedEvent, Event::CanBubble::No, Event::IsCancelable::No));
     });
 }
 
-bool AudioScheduledSourceNode::addEventListener(const AtomicString& eventType, Ref<EventListener>&& listener, const AddEventListenerOptions& options)
+bool AudioScheduledSourceNode::addEventListener(const AtomString& eventType, Ref<EventListener>&& listener, const AddEventListenerOptions& options)
 {
     bool success = AudioNode::addEventListener(eventType, WTFMove(listener), options);
     if (success && eventType == eventNames().endedEvent)
         m_hasEndedListener = hasEventListeners(eventNames().endedEvent);
     return success;
 }
 
-bool AudioScheduledSourceNode::removeEventListener(const AtomicString& eventType, EventListener& listener, const ListenerOptions& options)
+bool AudioScheduledSourceNode::removeEventListener(const AtomString& eventType, EventListener& listener, const ListenerOptions& options)
 {
     bool success = AudioNode::removeEventListener(eventType, listener, options);
     if (success && eventType == eventNames().endedEvent)
         m_hasEndedListener = hasEventListeners(eventNames().endedEvent);
     return success;
