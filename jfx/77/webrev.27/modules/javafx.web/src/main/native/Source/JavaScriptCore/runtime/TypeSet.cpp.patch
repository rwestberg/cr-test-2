diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/TypeSet.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/TypeSet.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/TypeSet.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/TypeSet.cpp
@@ -77,14 +77,16 @@
                 m_isOverflown = true;
         }
     }
 }
 
-void TypeSet::invalidateCache()
+void TypeSet::invalidateCache(VM& vm)
 {
     ConcurrentJSLocker locker(m_lock);
-    auto keepMarkedStructuresFilter = [] (Structure* structure) -> bool { return Heap::isMarked(structure); };
+    auto keepMarkedStructuresFilter = [&] (Structure* structure) -> bool {
+        return vm.heap.isMarked(structure);
+    };
     m_structureSet.genericFilter(keepMarkedStructuresFilter);
 }
 
 String TypeSet::dumpTypes() const
 {
@@ -185,10 +187,12 @@
         return "Number"_s;
     if (doesTypeConformTo(TypeString))
         return "String"_s;
     if (doesTypeConformTo(TypeSymbol))
         return "Symbol"_s;
+    if (doesTypeConformTo(TypeBigInt))
+        return "BigInt"_s;
 
     if (doesTypeConformTo(TypeNull | TypeUndefined))
         return "(?)"_s;
 
     if (doesTypeConformTo(TypeFunction | TypeNull | TypeUndefined))
@@ -201,10 +205,12 @@
         return "Number?"_s;
     if (doesTypeConformTo(TypeString | TypeNull | TypeUndefined))
         return "String?"_s;
     if (doesTypeConformTo(TypeSymbol | TypeNull | TypeUndefined))
         return "Symbol?"_s;
+    if (doesTypeConformTo(TypeBigInt | TypeNull | TypeUndefined))
+        return "BigInt?"_s;
 
     if (doesTypeConformTo(TypeObject | TypeFunction | TypeString))
         return "Object"_s;
     if (doesTypeConformTo(TypeObject | TypeFunction | TypeString | TypeNull | TypeUndefined))
         return "Object?"_s;
@@ -237,10 +243,11 @@
         .setIsInteger((m_seenTypes & TypeAnyInt) != TypeNothing)
         .setIsNumber((m_seenTypes & TypeNumber) != TypeNothing)
         .setIsString((m_seenTypes & TypeString) != TypeNothing)
         .setIsObject((m_seenTypes & TypeObject) != TypeNothing)
         .setIsSymbol((m_seenTypes & TypeSymbol) != TypeNothing)
+        .setIsBigInt((m_seenTypes & TypeBigInt) != TypeNothing)
         .release();
 }
 
 String TypeSet::toJSONString() const
 {
@@ -317,14 +324,14 @@
     json.append('}');
     return json.toString();
 }
 
 StructureShape::StructureShape()
-    : m_proto(nullptr)
-    , m_propertyHash(nullptr)
-    , m_final(false)
+    : m_final(false)
     , m_isInDictionaryMode(false)
+    , m_proto(nullptr)
+    , m_propertyHash(nullptr)
 {
 }
 
 void StructureShape::markAsFinal()
 {
@@ -358,11 +365,11 @@
         builder.append(':');
         builder.appendLiteral("__proto__");
         builder.append(m_proto->propertyHash());
     }
 
-    m_propertyHash = std::make_unique<String>(builder.toString());
+    m_propertyHash = makeUnique<String>(builder.toString());
     return *m_propertyHash;
 }
 
 String StructureShape::leastCommonAncestor(const Vector<Ref<StructureShape>>& shapes)
 {
@@ -403,22 +410,14 @@
     StringBuilder representation;
     RefPtr<StructureShape> curShape = this;
 
     representation.append('{');
     while (curShape) {
-        for (auto it = curShape->m_fields.begin(), end = curShape->m_fields.end(); it != end; ++it) {
-            String prop((*it).get());
-            representation.append(prop);
-            representation.appendLiteral(", ");
-        }
-
-        if (curShape->m_proto) {
-            representation.appendLiteral("__proto__ [");
-            representation.append(curShape->m_proto->m_constructorName);
-            representation.appendLiteral("], ");
-        }
-
+        for (auto& field : curShape->m_fields)
+            representation.append(StringView { field.get() }, ", ");
+        if (curShape->m_proto)
+            representation.append("__proto__ [", curShape->m_proto->m_constructorName, "], ");
         curShape = curShape->m_proto;
     }
 
     if (representation.length() >= 3)
         representation.resize(representation.length() - 2);
