diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ObjectAllocationProfileInlines.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ObjectAllocationProfileInlines.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ObjectAllocationProfileInlines.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ObjectAllocationProfileInlines.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -29,16 +29,15 @@
 
 #include "JSFunctionInlines.h"
 
 namespace JSC {
 
-ALWAYS_INLINE void ObjectAllocationProfile::initializeProfile(VM& vm, JSGlobalObject* globalObject, JSCell* owner, JSObject* prototype, unsigned inferredInlineCapacity, JSFunction* constructor, FunctionRareData* functionRareData)
+template<typename Derived>
+ALWAYS_INLINE void ObjectAllocationProfileBase<Derived>::initializeProfile(VM& vm, JSGlobalObject* globalObject, JSCell* owner, JSObject* prototype, unsigned inferredInlineCapacity, JSFunction* constructor, FunctionRareData* functionRareData)
 {
     ASSERT(!m_allocator);
     ASSERT(!m_structure);
-    ASSERT(!m_prototype);
-    ASSERT(!m_inlineCapacity);
 
     // FIXME: Teach create_this's fast path how to allocate poly
     // proto objects: https://bugs.webkit.org/show_bug.cgi?id=177517
 
     bool isPolyProto = false;
@@ -54,20 +53,19 @@
 
         if (Structure* structure = executable->cachedPolyProtoStructure()) {
             RELEASE_ASSERT(structure->typeInfo().type() == FinalObjectType);
             m_allocator = Allocator();
             m_structure.set(vm, owner, structure);
-            m_prototype.set(vm, owner, prototype);
-            m_inlineCapacity = structure->inlineCapacity();
+            static_cast<Derived*>(this)->setPrototype(vm, owner, prototype);
             return;
         }
 
         isPolyProto = false;
         if (Options::forcePolyProto())
             isPolyProto = true;
         else
-            isPolyProto = executable->ensurePolyProtoWatchpoint().hasBeenInvalidated() && executable->singletonFunctionHasBeenInvalidated();
+            isPolyProto = executable->ensurePolyProtoWatchpoint().hasBeenInvalidated() && executable->singleton().hasBeenInvalidated();
     }
 
     unsigned inlineCapacity = 0;
     if (inferredInlineCapacity < JSFinalObject::defaultInlineCapacity()) {
         // Try to shrink the object based on static analysis.
@@ -136,21 +134,21 @@
 
     // Ensure that if another thread sees the structure and prototype, it will see it properly created.
     WTF::storeStoreFence();
 
     m_structure.set(vm, owner, structure);
-    m_prototype.set(vm, owner, prototype);
-    m_inlineCapacity = inlineCapacity;
+    static_cast<Derived*>(this)->setPrototype(vm, owner, prototype);
 }
 
-ALWAYS_INLINE unsigned ObjectAllocationProfile::possibleDefaultPropertyCount(VM& vm, JSObject* prototype)
+template<typename Derived>
+ALWAYS_INLINE unsigned ObjectAllocationProfileBase<Derived>::possibleDefaultPropertyCount(VM& vm, JSObject* prototype)
 {
     if (prototype == prototype->globalObject(vm)->objectPrototype())
         return 0;
 
     size_t count = 0;
-    PropertyNameArray propertyNameArray(&vm, PropertyNameMode::StringsAndSymbols, PrivateSymbolMode::Include);
+    PropertyNameArray propertyNameArray(vm, PropertyNameMode::StringsAndSymbols, PrivateSymbolMode::Include);
     prototype->structure(vm)->getPropertyNamesFromStructure(vm, propertyNameArray, EnumerationMode());
     PropertyNameArrayData::PropertyNameVector& propertyNameVector = propertyNameArray.data()->propertyNameVector();
     for (size_t i = 0; i < propertyNameVector.size(); ++i) {
         JSValue value = prototype->getDirect(vm, propertyNameVector[i]);
 
