diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InlineCallFrame.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InlineCallFrame.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InlineCallFrame.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InlineCallFrame.cpp
@@ -54,11 +54,11 @@
     return baselineCodeBlock->hashAsStringIfPossible();
 }
 
 CString InlineCallFrame::inferredName() const
 {
-    return jsCast<FunctionExecutable*>(baselineCodeBlock->ownerExecutable())->inferredName().utf8();
+    return jsCast<FunctionExecutable*>(baselineCodeBlock->ownerExecutable())->ecmaName().utf8();
 }
 
 void InlineCallFrame::dumpBriefFunctionInformation(PrintStream& out) const
 {
     out.print(inferredName(), "#", hashAsStringIfPossible());
@@ -67,11 +67,11 @@
 void InlineCallFrame::dumpInContext(PrintStream& out, DumpContext* context) const
 {
     out.print(briefFunctionInformation(), ":<", RawPointer(baselineCodeBlock.get()));
     if (isStrictMode())
         out.print(" (StrictMode)");
-    out.print(", bc#", directCaller.bytecodeIndex, ", ", static_cast<Kind>(kind));
+    out.print(", bc#", directCaller.bytecodeIndex(), ", ", static_cast<Kind>(kind));
     if (isClosureCall)
         out.print(", closure call");
     else
         out.print(", known callee: ", inContext(calleeRecovery.constant(), context));
     out.print(", numArgs+this = ", argumentCountIncludingThis);
