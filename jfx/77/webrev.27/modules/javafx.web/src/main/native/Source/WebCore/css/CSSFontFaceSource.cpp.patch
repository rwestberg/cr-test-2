diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFaceSource.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFaceSource.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFaceSource.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFaceSource.cpp
@@ -30,10 +30,11 @@
 #include "CSSFontSelector.h"
 #include "CachedFont.h"
 #include "Document.h"
 #include "Font.h"
 #include "FontCache.h"
+#include "FontCascadeDescription.h"
 #include "FontCustomPlatformData.h"
 #include "FontDescription.h"
 #include "ResourceLoadObserver.h"
 #include "RuntimeEnabledFeatures.h"
 #include "SVGToOTFFontConversion.h"
@@ -45,14 +46,10 @@
 #include "SVGFontElement.h"
 #include "SVGFontFaceElement.h"
 #include "SVGURIReference.h"
 #endif
 
-#if USE(DIRECT2D)
-#include <dwrite.h>
-#endif
-
 namespace WebCore {
 
 inline void CSSFontFaceSource::setStatus(Status newStatus)
 {
     switch (newStatus) {
@@ -77,11 +74,12 @@
     : m_familyNameOrURI(familyNameOrURI)
     , m_font(font)
     , m_face(owner)
     , m_immediateSource(WTFMove(arrayBufferView))
 #if ENABLE(SVG_FONTS)
-    , m_svgFontFaceElement(fontFace)
+    , m_svgFontFaceElement(makeWeakPtr(fontFace))
+    , m_hasSVGFontFaceElement(m_svgFontFaceElement)
 #endif
 {
 #if !ENABLE(SVG_FONTS)
     UNUSED_PARAM(fontFace);
 #endif
@@ -152,12 +150,12 @@
         ASSERT(fontSelector);
         fontSelector->beginLoadingFontSoon(*m_font);
     } else {
         bool success = false;
 #if ENABLE(SVG_FONTS)
-        if (m_svgFontFaceElement) {
-            if (is<SVGFontElement>(m_svgFontFaceElement->parentNode())) {
+        if (m_hasSVGFontFaceElement) {
+            if (m_svgFontFaceElement && is<SVGFontElement>(m_svgFontFaceElement->parentNode())) {
                 ASSERT(!m_inDocumentCustomPlatformData);
                 SVGFontElement& fontElement = downcast<SVGFontElement>(*m_svgFontFaceElement->parentNode());
                 if (auto otfFont = convertSVGToOTFFont(fontElement))
                     m_generatedOTFBuffer = SharedBuffer::create(WTFMove(otfFont.value()));
                 if (m_generatedOTFBuffer) {
@@ -179,10 +177,11 @@
             // null if it wasn't going to otherwise (and vice-versa).
             FontCascadeDescription fontDescription;
             fontDescription.setOneFamily(m_familyNameOrURI);
             fontDescription.setComputedSize(1);
             fontDescription.setShouldAllowUserInstalledFonts(m_face.allowUserInstalledFonts());
+            fontDescription.setShouldAllowDesignSystemUIFonts(m_face.shouldAllowDesignSystemUIFonts());
             success = FontCache::singleton().fontForFamily(fontDescription, m_familyNameOrURI, nullptr, nullptr, FontSelectionSpecifiedCapabilities(), true);
             if (RuntimeEnabledFeatures::sharedFeatures().webAPIStatisticsEnabled()) {
                 if (auto* document = fontSelector->document())
                     ResourceLoadObserver::shared().logFontLoad(*document, m_familyNameOrURI.string(), success);
             }
@@ -193,16 +192,17 @@
 
 RefPtr<Font> CSSFontFaceSource::font(const FontDescription& fontDescription, bool syntheticBold, bool syntheticItalic, const FontFeatureSettings& fontFaceFeatures, const FontVariantSettings& fontFaceVariantSettings, FontSelectionSpecifiedCapabilities fontFaceCapabilities)
 {
     ASSERT(status() == Status::Success);
 
-    SVGFontFaceElement* fontFaceElement = nullptr;
 #if ENABLE(SVG_FONTS)
-    fontFaceElement = m_svgFontFaceElement.get();
+    bool usesInDocumentSVGFont = m_hasSVGFontFaceElement;
+#else
+    bool usesInDocumentSVGFont = false;
 #endif
 
-    if (!m_font && !fontFaceElement) {
+    if (!m_font && !usesInDocumentSVGFont) {
         if (m_immediateSource) {
             if (!m_immediateFontCustomPlatformData)
                 return nullptr;
             return Font::create(CachedFont::platformDataFromCustomData(*m_immediateFontCustomPlatformData, fontDescription, syntheticBold, syntheticItalic, fontFaceFeatures, fontFaceVariantSettings, fontFaceCapabilities), Font::Origin::Remote);
         }
@@ -220,16 +220,15 @@
         auto result = m_font->createFont(fontDescription, m_familyNameOrURI, syntheticBold, syntheticItalic, fontFaceFeatures, fontFaceVariantSettings, fontFaceCapabilities);
         ASSERT(result);
         return result;
     }
 
-    // In-Document SVG Fonts
-    if (!fontFaceElement)
+    if (!usesInDocumentSVGFont)
         return nullptr;
 
 #if ENABLE(SVG_FONTS)
-    if (!is<SVGFontElement>(m_svgFontFaceElement->parentNode()))
+    if (!m_svgFontFaceElement || !is<SVGFontElement>(m_svgFontFaceElement->parentNode()))
         return nullptr;
     if (!m_inDocumentCustomPlatformData)
         return nullptr;
     return Font::create(m_inDocumentCustomPlatformData->fontPlatformData(fontDescription, syntheticBold, syntheticItalic, fontFaceFeatures, fontFaceVariantSettings, fontFaceCapabilities), Font::Origin::Remote);
 #endif
@@ -239,10 +238,10 @@
 }
 
 #if ENABLE(SVG_FONTS)
 bool CSSFontFaceSource::isSVGFontFaceSource() const
 {
-    return m_svgFontFaceElement || is<CachedSVGFont>(m_font.get());
+    return m_hasSVGFontFaceElement || is<CachedSVGFont>(m_font.get());
 }
 #endif
 
 }
