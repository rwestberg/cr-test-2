diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/texmap/GraphicsContext3DTextureMapper.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/texmap/GraphicsContext3DTextureMapper.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/texmap/GraphicsContext3DTextureMapper.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/texmap/GraphicsContext3DTextureMapper.cpp
@@ -24,24 +24,20 @@
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #include "config.h"
+#include "GraphicsContext3D.h"
 
 #if ENABLE(GRAPHICS_CONTEXT_3D) && USE(TEXTURE_MAPPER)
-#include "GraphicsContext3D.h"
 
 #include "GraphicsContext3DPrivate.h"
 #include "TextureMapperGC3DPlatformLayer.h"
 #include <wtf/Deque.h>
 #include <wtf/NeverDestroyed.h>
 
-#if PLATFORM(WIN)
-#include <GLSLANG/ShaderLang.h>
-#else
 #include <ANGLE/ShaderLang.h>
-#endif
 
 #if USE(LIBEPOXY)
 #include <epoxy/gl.h>
 #elif !USE(OPENGL_ES)
 #include "OpenGLShims.h"
@@ -108,13 +104,13 @@
 GraphicsContext3D::GraphicsContext3D(GraphicsContext3DAttributes attributes, HostWindow*, GraphicsContext3D::RenderStyle renderStyle, GraphicsContext3D* sharedContext)
     : m_attrs(attributes)
 {
     ASSERT_UNUSED(sharedContext, !sharedContext);
 #if USE(NICOSIA)
-    m_nicosiaLayer = std::make_unique<Nicosia::GC3DLayer>(*this, renderStyle);
+    m_nicosiaLayer = makeUnique<Nicosia::GC3DLayer>(*this, renderStyle);
 #else
-    m_texmapLayer = std::make_unique<TextureMapperGC3DPlatformLayer>(*this, renderStyle);
+    m_texmapLayer = makeUnique<TextureMapperGC3DPlatformLayer>(*this, renderStyle);
 #endif
 
     makeContextCurrent();
 
     validateAttributes();
@@ -259,12 +255,14 @@
     ::glDeleteFramebuffers(1, &m_fbo);
 #if USE(COORDINATED_GRAPHICS)
     ::glDeleteTextures(1, &m_intermediateTexture);
 #endif
 
+#if USE(CAIRO)
     if (m_vao)
         deleteVertexArray(m_vao);
+#endif
 
     auto* activeContext = activeContexts().takeLast([this](auto* it) { return it == this; });
     ASSERT_UNUSED(activeContext, !!activeContext);
 }
 
@@ -325,14 +323,14 @@
 Extensions3D& GraphicsContext3D::getExtensions()
 {
     if (!m_extensions) {
 #if USE(OPENGL_ES)
         // glGetStringi is not available on GLES2.
-        m_extensions = std::make_unique<Extensions3DOpenGLES>(this,  false);
+        m_extensions = makeUnique<Extensions3DOpenGLES>(this,  false);
 #else
         // From OpenGL 3.2 on we use the Core profile, and there we must use glGetStringi.
-        m_extensions = std::make_unique<Extensions3DOpenGL>(this, GLContext::current()->version() >= 320);
+        m_extensions = makeUnique<Extensions3DOpenGL>(this, GLContext::current()->version() >= 320);
 #endif
     }
     return *m_extensions;
 }
 #endif
