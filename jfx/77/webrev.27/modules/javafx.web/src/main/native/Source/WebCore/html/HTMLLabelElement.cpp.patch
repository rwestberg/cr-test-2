diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLLabelElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLLabelElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLLabelElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLLabelElement.cpp
@@ -38,11 +38,11 @@
 
 WTF_MAKE_ISO_ALLOCATED_IMPL(HTMLLabelElement);
 
 using namespace HTMLNames;
 
-static LabelableElement* firstElementWithIdIfLabelable(TreeScope& treeScope, const AtomicString& id)
+static LabelableElement* firstElementWithIdIfLabelable(TreeScope& treeScope, const AtomString& id)
 {
     auto element = makeRefPtr(treeScope.getElementById(id));
     if (!is<LabelableElement>(element))
         return nullptr;
 
@@ -109,10 +109,26 @@
     // Also update our corresponding control.
     if (auto element = control())
         element->setHovered(over);
 }
 
+bool HTMLLabelElement::isEventTargetedAtInteractiveDescendants(Event& event) const
+{
+    if (!is<Node>(event.target()))
+        return false;
+
+    auto& node = downcast<Node>(*event.target());
+    if (!containsIncludingShadowDOM(&node))
+        return false;
+
+    for (const auto* it = &node; it && it != this; it = it->parentElementInComposedTree()) {
+        if (is<HTMLElement>(it) && downcast<HTMLElement>(*it).isInteractiveContent())
+            return true;
+    }
+
+    return false;
+}
 void HTMLLabelElement::defaultEventHandler(Event& event)
 {
     static bool processingClick = false;
 
     if (event.type() == eventNames().clickEvent && !processingClick) {
@@ -123,10 +139,19 @@
         if (!control || (is<Node>(event.target()) && control->containsIncludingShadowDOM(&downcast<Node>(*event.target())))) {
             HTMLElement::defaultEventHandler(event);
             return;
         }
 
+        // The activation behavior of a label element for events targeted at interactive
+        // content descendants of a label element, and any descendants of those interactive
+        // content descendants, must be to do nothing.
+        // https://html.spec.whatwg.org/#the-label-element
+        if (isEventTargetedAtInteractiveDescendants(event)) {
+            HTMLElement::defaultEventHandler(event);
+            return;
+        }
+
         processingClick = true;
 
         control->dispatchSimulatedClick(&event);
 
         document().updateLayoutIgnorePendingStylesheets();
