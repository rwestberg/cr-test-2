diff a/modules/javafx.web/src/main/native/Source/WebCore/page/FrameTree.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/FrameTree.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/FrameTree.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/FrameTree.cpp
@@ -21,10 +21,11 @@
 #include "config.h"
 #include "FrameTree.h"
 
 #include "Document.h"
 #include "Frame.h"
+#include "FrameLoader.h"
 #include "FrameView.h"
 #include "HTMLFrameOwnerElement.h"
 #include "Page.h"
 #include "PageGroup.h"
 #include <stdarg.h>
@@ -39,11 +40,11 @@
 {
     for (Frame* child = firstChild(); child; child = child->tree().nextSibling())
         child->setView(nullptr);
 }
 
-void FrameTree::setName(const AtomicString& name)
+void FrameTree::setName(const AtomString& name)
 {
     m_name = name;
     if (!parent()) {
         m_uniqueName = name;
         return;
@@ -91,22 +92,22 @@
     newLocationForNext = WTFMove(child.tree().m_nextSibling);
 
     m_scopedChildCount = invalidCount;
 }
 
-AtomicString FrameTree::uniqueChildName(const AtomicString& requestedName) const
+AtomString FrameTree::uniqueChildName(const AtomString& requestedName) const
 {
     // If the requested name (the frame's "name" attribute) is unique, just use that.
     if (!requestedName.isEmpty() && !child(requestedName) && !equalIgnoringASCIICase(requestedName, "_blank"))
         return requestedName;
 
     // The "name" attribute was not unique or absent. Generate a name based on a counter on the main frame that gets reset
     // on navigation. The name uses HTML comment syntax to avoid collisions with author names.
     return generateUniqueName();
 }
 
-AtomicString FrameTree::generateUniqueName() const
+AtomString FrameTree::generateUniqueName() const
 {
     auto& top = this->top();
     if (&top.tree() != this)
         return top.tree().generateUniqueName();
 
@@ -139,11 +140,11 @@
     }
 
     return nullptr;
 }
 
-inline Frame* FrameTree::scopedChild(const AtomicString& name, TreeScope* scope) const
+inline Frame* FrameTree::scopedChild(const AtomString& name, TreeScope* scope) const
 {
     if (!scope)
         return nullptr;
 
     for (Frame* child = firstChild(); child; child = child->tree().nextSibling()) {
@@ -170,11 +171,11 @@
 Frame* FrameTree::scopedChild(unsigned index) const
 {
     return scopedChild(index, m_thisFrame.document());
 }
 
-Frame* FrameTree::scopedChild(const AtomicString& name) const
+Frame* FrameTree::scopedChild(const AtomString& name) const
 {
     return scopedChild(name, m_thisFrame.document());
 }
 
 unsigned FrameTree::scopedChildCount() const
@@ -198,11 +199,11 @@
     for (unsigned i = 0; result && i != index; ++i)
         result = result->tree().nextSibling();
     return result;
 }
 
-Frame* FrameTree::child(const AtomicString& name) const
+Frame* FrameTree::child(const AtomString& name) const
 {
     for (Frame* child = firstChild(); child; child = child->tree().nextSibling())
         if (child->tree().uniqueName() == name)
             return child;
     return nullptr;
@@ -218,11 +219,11 @@
     auto* frameAOpener = frameA.mainFrame().loader().opener();
     auto* frameBOpener = frameB.mainFrame().loader().opener();
     return (frameAOpener && frameAOpener->page() == frameB.page()) || (frameBOpener && frameBOpener->page() == frameA.page()) || (frameAOpener && frameBOpener && frameAOpener->page() == frameBOpener->page());
 }
 
-Frame* FrameTree::find(const AtomicString& name, Frame& activeFrame) const
+Frame* FrameTree::find(const AtomString& name, Frame& activeFrame) const
 {
     // FIXME: _current is not part of the HTML specification.
     if (equalIgnoringASCIICase(name, "_self") || name == "_current" || name.isEmpty())
         return &m_thisFrame;
 
