diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/blockformatting/BlockFormattingContext.h b/modules/javafx.web/src/main/native/Source/WebCore/layout/blockformatting/BlockFormattingContext.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/blockformatting/BlockFormattingContext.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/blockformatting/BlockFormattingContext.h
@@ -53,35 +53,38 @@
 
 private:
     void layoutFormattingContextRoot(FloatingContext&, const Box&) const;
     void placeInFlowPositionedChildren(const Box&) const;
 
-    void computeWidthAndMargin(const Box&) const;
+    void computeWidthAndMargin(const Box&, Optional<LayoutUnit> usedAvailableWidth = { }) const;
     void computeHeightAndMargin(const Box&) const;
 
+    void computeStaticHorizontalPosition(const Box&) const;
+    void computeStaticVerticalPosition(const FloatingContext&, const Box&) const;
     void computeStaticPosition(const FloatingContext&, const Box&) const;
     void computeFloatingPosition(const FloatingContext&, const Box&) const;
     void computePositionToAvoidFloats(const FloatingContext&, const Box&) const;
 
     void computeEstimatedVerticalPosition(const Box&) const;
     void computeEstimatedVerticalPositionForAncestors(const Box&) const;
     void computeEstimatedVerticalPositionForFormattingRoot(const Box&) const;
     void computeEstimatedVerticalPositionForFloatClear(const FloatingContext&, const Box&) const;
 
-    void computeIntrinsicWidthConstraints() const override;
+    IntrinsicWidthConstraints computedIntrinsicWidthConstraints() const override;
     LayoutUnit verticalPositionWithMargin(const Box&, const UsedVerticalMargin&) const;
 
     // This class implements positioning and sizing for boxes participating in a block formatting context.
     class Geometry : public FormattingContext::Geometry {
     public:
         static HeightAndMargin inFlowHeightAndMargin(const LayoutState&, const Box&, UsedVerticalValues);
-        static WidthAndMargin inFlowWidthAndMargin(const LayoutState&, const Box&, UsedHorizontalValues);
+        static WidthAndMargin inFlowWidthAndMargin(LayoutState&, const Box&, UsedHorizontalValues);
 
         static Point staticPosition(const LayoutState&, const Box&);
+        static LayoutUnit staticVerticalPosition(const LayoutState&, const Box&);
+        static LayoutUnit staticHorizontalPosition(const LayoutState&, const Box&);
 
-        static bool intrinsicWidthConstraintsNeedChildrenWidth(const Box&);
-        static IntrinsicWidthConstraints intrinsicWidthConstraints(const LayoutState&, const Box&);
+        static IntrinsicWidthConstraints intrinsicWidthConstraints(LayoutState&, const Box&);
 
     private:
         static HeightAndMargin inFlowNonReplacedHeightAndMargin(const LayoutState&, const Box&, UsedVerticalValues);
         static WidthAndMargin inFlowNonReplacedWidthAndMargin(const LayoutState&, const Box&, UsedHorizontalValues);
         static WidthAndMargin inFlowReplacedWidthAndMargin(const LayoutState&, const Box&, UsedHorizontalValues);
@@ -129,10 +132,11 @@
     };
 
     void setEstimatedMarginBefore(const Box&, const EstimatedMarginBefore&) const;
     void removeEstimatedMarginBefore(const Box& layoutBox) const { m_estimatedMarginBeforeList.remove(&layoutBox); }
     bool hasEstimatedMarginBefore(const Box&) const;
+    Optional<LayoutUnit> usedAvailableWidthForFloatAvoider(const FloatingContext&, const Box&) const;
 #ifndef NDEBUG
     EstimatedMarginBefore estimatedMarginBefore(const Box& layoutBox) const { return m_estimatedMarginBeforeList.get(&layoutBox); }
     bool hasPrecomputedMarginBefore(const Box&) const;
 #endif
 
