diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSRunLoopTimer.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSRunLoopTimer.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSRunLoopTimer.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSRunLoopTimer.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2012, 2015-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2012-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -75,20 +75,19 @@
 #endif
 
     private:
         Lock m_lock;
 
-        struct PerVMData {
-            PerVMData() = default;
+        class PerVMData {
+            WTF_MAKE_FAST_ALLOCATED;
+            WTF_MAKE_NONCOPYABLE(PerVMData);
+        public:
 #if USE(CF)
             PerVMData(Manager&) { }
 #else
             PerVMData(Manager&);
 #endif
-            PerVMData(PerVMData&&) = default;
-            PerVMData& operator=(PerVMData&&) = default;
-
             ~PerVMData();
 
 #if USE(CF)
             void setRunLoop(Manager*, CFRunLoopRef);
             RetainPtr<CFRunLoopTimerRef> timer;
@@ -99,14 +98,14 @@
             std::unique_ptr<RunLoop::Timer<Manager>> timer;
 #endif
             Vector<std::pair<Ref<JSRunLoopTimer>, EpochTime>> timers;
         };
 
-        HashMap<Ref<JSLock>, PerVMData> m_mapping;
+        HashMap<Ref<JSLock>, std::unique_ptr<PerVMData>> m_mapping;
     };
 
-    JSRunLoopTimer(VM*);
+    JSRunLoopTimer(VM&);
     JS_EXPORT_PRIVATE virtual ~JSRunLoopTimer();
     virtual void doWork(VM&) = 0;
 
     void setTimeUntilFire(Seconds intervalInSeconds);
     void cancelTimer();
