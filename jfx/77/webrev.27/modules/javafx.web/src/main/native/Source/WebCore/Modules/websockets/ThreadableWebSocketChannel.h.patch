diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/websockets/ThreadableWebSocketChannel.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/websockets/ThreadableWebSocketChannel.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/websockets/ThreadableWebSocketChannel.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/websockets/ThreadableWebSocketChannel.h
@@ -30,36 +30,41 @@
 
 #pragma once
 
 #include <wtf/Forward.h>
 #include <wtf/Noncopyable.h>
+#include <wtf/URL.h>
 
 namespace JSC {
 class ArrayBuffer;
 }
 
 namespace WebCore {
 
 class Blob;
+class Document;
+class ResourceRequest;
 class ScriptExecutionContext;
 class SocketProvider;
 class WebSocketChannelClient;
 
 class ThreadableWebSocketChannel {
     WTF_MAKE_NONCOPYABLE(ThreadableWebSocketChannel);
 public:
+    static Ref<ThreadableWebSocketChannel> create(Document&, WebSocketChannelClient&, SocketProvider&);
     static Ref<ThreadableWebSocketChannel> create(ScriptExecutionContext&, WebSocketChannelClient&, SocketProvider&);
     ThreadableWebSocketChannel() = default;
 
     virtual bool isWebSocketChannel() const { return false; }
 
     enum SendResult {
         SendSuccess,
         SendFail
     };
 
-    virtual void connect(const URL&, const String& protocol) = 0;
+    enum class ConnectStatus { KO, OK };
+    virtual ConnectStatus connect(const URL&, const String& protocol) = 0;
     virtual String subprotocol() = 0; // Will be available after didConnect() callback is invoked.
     virtual String extensions() = 0; // Will be available after didConnect() callback is invoked.
     virtual SendResult send(const String& message) = 0;
     virtual SendResult send(const JSC::ArrayBuffer&, unsigned byteOffset, unsigned byteLength) = 0;
     virtual SendResult send(Blob&) = 0;
@@ -77,8 +82,15 @@
 
 protected:
     virtual ~ThreadableWebSocketChannel() = default;
     virtual void refThreadableWebSocketChannel() = 0;
     virtual void derefThreadableWebSocketChannel() = 0;
+
+    struct ValidatedURL {
+        URL url;
+        bool areCookiesAllowed { true };
+    };
+    static Optional<ValidatedURL> validateURL(Document&, const URL&);
+    WEBCORE_EXPORT static Optional<ResourceRequest> webSocketConnectRequest(Document&, const URL&);
 };
 
 } // namespace WebCore
