diff a/modules/javafx.web/src/main/native/Source/WebCore/xml/XSLTProcessorLibxslt.cpp b/modules/javafx.web/src/main/native/Source/WebCore/xml/XSLTProcessorLibxslt.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/xml/XSLTProcessorLibxslt.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/xml/XSLTProcessorLibxslt.cpp
@@ -46,12 +46,10 @@
 #include <libxslt/security.h>
 #include <libxslt/variables.h>
 #include <libxslt/xslt.h>
 #include <libxslt/xsltutils.h>
 #include <wtf/Assertions.h>
-#include <wtf/text/StringBuffer.h>
-#include <wtf/unicode/UTF8Conversion.h>
 
 #if OS(DARWIN) && !PLATFORM(GTK)
 #include "SoftLinkLibxslt.h"
 #endif
 
@@ -157,31 +155,45 @@
     xsltSetLoaderFunc(func);
     globalProcessor = processor;
     globalCachedResourceLoader = cachedResourceLoader;
 }
 
-static int writeToStringBuilder(void* context, const char* buffer, int len)
+static int writeToStringBuilder(void* context, const char* buffer, int length)
 {
     StringBuilder& resultOutput = *static_cast<StringBuilder*>(context);
 
-    if (!len)
-        return 0;
-
-    StringBuffer<UChar> stringBuffer(len);
-    UChar* bufferUChar = stringBuffer.characters();
-    UChar* bufferUCharEnd = bufferUChar + len;
-
-    const char* stringCurrent = buffer;
-    WTF::Unicode::ConversionResult result = WTF::Unicode::convertUTF8ToUTF16(&stringCurrent, buffer + len, &bufferUChar, bufferUCharEnd);
-    if (result != WTF::Unicode::conversionOK && result != WTF::Unicode::sourceExhausted) {
-        ASSERT_NOT_REACHED();
-        return -1;
+    // FIXME: Consider ways to make this more efficient by moving it into a
+    // StringBuilder::appendUTF8 function, and then optimizing to not need a
+    // Vector<UChar> and possibly optimize cases that can produce 8-bit Latin-1
+    // strings, but that would need to be sophisticated about not processing
+    // trailing incomplete sequences and communicating that to the caller.
+
+    Vector<UChar> outputBuffer(length);
+
+    UBool error = false;
+    int inputOffset = 0;
+    int outputOffset = 0;
+    while (inputOffset < length) {
+        UChar32 character;
+        int nextInputOffset = inputOffset;
+        U8_NEXT(reinterpret_cast<const uint8_t*>(buffer), nextInputOffset, length, character);
+        if (character < 0) {
+            if (nextInputOffset == length)
+                break;
+            ASSERT_NOT_REACHED();
+            return -1;
+        }
+        inputOffset = nextInputOffset;
+        U16_APPEND(outputBuffer.data(), outputOffset, length, character, error);
+        if (error) {
+            ASSERT_NOT_REACHED();
+            return -1;
+        }
     }
 
-    int utf16Length = bufferUChar - stringBuffer.characters();
-    resultOutput.append(stringBuffer.characters(), utf16Length);
-    return stringCurrent - buffer;
+    resultOutput.appendCharacters(outputBuffer.data(), outputOffset);
+    return inputOffset;
 }
 
 static bool saveResultToString(xmlDocPtr resultDoc, xsltStylesheetPtr sheet, String& resultString)
 {
     xmlOutputBufferPtr outputBuf = xmlAllocOutputBuffer(nullptr);
@@ -306,14 +318,10 @@
     int origXsltMaxDepth = *xsltMaxDepth;
     *xsltMaxDepth = 1000;
 #else
     int origXsltMaxDepth = xsltMaxDepth;
     xsltMaxDepth = 1000;
-#if USE(JSVALUE32_64) && PLATFORM(JAVA)
-    // Reduce the depth to half on 32-bit systems
-    xsltMaxDepth /= 2;
-#endif
 #endif
 
     xmlChar* origMethod = sheet->method;
     if (!origMethod && mimeType == "text/html")
         sheet->method = reinterpret_cast<xmlChar*>(const_cast<char*>("html"));
