diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/HitTestResult.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/HitTestResult.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/HitTestResult.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/HitTestResult.cpp
@@ -94,11 +94,11 @@
     , m_innerURLElement(other.URLElement())
     , m_scrollbar(other.scrollbar())
     , m_isOverWidget(other.isOverWidget())
 {
     // Only copy the NodeSet in case of list hit test.
-    m_listBasedTestResult = other.m_listBasedTestResult ? std::make_unique<NodeSet>(*other.m_listBasedTestResult) : nullptr;
+    m_listBasedTestResult = other.m_listBasedTestResult ? makeUnique<NodeSet>(*other.m_listBasedTestResult) : nullptr;
 }
 
 HitTestResult::~HitTestResult() = default;
 
 HitTestResult& HitTestResult::operator=(const HitTestResult& other)
@@ -111,11 +111,11 @@
     m_innerURLElement = other.URLElement();
     m_scrollbar = other.scrollbar();
     m_isOverWidget = other.isOverWidget();
 
     // Only copy the NodeSet in case of list hit test.
-    m_listBasedTestResult = other.m_listBasedTestResult ? std::make_unique<NodeSet>(*other.m_listBasedTestResult) : nullptr;
+    m_listBasedTestResult = other.m_listBasedTestResult ? makeUnique<NodeSet>(*other.m_listBasedTestResult) : nullptr;
 
     return *this;
 }
 
 static Node* moveOutOfUserAgentShadowTree(Node& node)
@@ -347,11 +347,11 @@
         return URL();
 
     if (!(m_innerNonSharedNode->renderer() && m_innerNonSharedNode->renderer()->isImage()))
         return URL();
 
-    AtomicString urlString;
+    AtomString urlString;
     if (is<HTMLEmbedElement>(*m_innerNonSharedNode)
         || is<HTMLImageElement>(*m_innerNonSharedNode)
         || is<HTMLInputElement>(*m_innerNonSharedNode)
         || is<HTMLObjectElement>(*m_innerNonSharedNode)
         || is<SVGImageElement>(*m_innerNonSharedNode)) {
@@ -688,18 +688,18 @@
 }
 
 const HitTestResult::NodeSet& HitTestResult::listBasedTestResult() const
 {
     if (!m_listBasedTestResult)
-        m_listBasedTestResult = std::make_unique<NodeSet>();
+        m_listBasedTestResult = makeUnique<NodeSet>();
     return *m_listBasedTestResult;
 }
 
 HitTestResult::NodeSet& HitTestResult::mutableListBasedTestResult()
 {
     if (!m_listBasedTestResult)
-        m_listBasedTestResult = std::make_unique<NodeSet>();
+        m_listBasedTestResult = makeUnique<NodeSet>();
     return *m_listBasedTestResult;
 }
 
 Vector<String> HitTestResult::dictationAlternatives() const
 {
