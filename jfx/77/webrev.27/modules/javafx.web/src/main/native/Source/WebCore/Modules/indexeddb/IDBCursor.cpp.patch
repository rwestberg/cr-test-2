diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBCursor.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBCursor.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBCursor.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBCursor.cpp
@@ -39,14 +39,17 @@
 #include "Logging.h"
 #include "ScriptExecutionContext.h"
 #include <JavaScriptCore/HeapInlines.h>
 #include <JavaScriptCore/JSCJSValueInlines.h>
 #include <JavaScriptCore/StrongInlines.h>
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 using namespace JSC;
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(IDBCursor);
+
 Ref<IDBCursor> IDBCursor::create(IDBObjectStore& objectStore, const IDBCursorInfo& info)
 {
     return adoptRef(*new IDBCursor(objectStore, info));
 }
 
@@ -133,11 +136,11 @@
         return putResult.releaseException();
 
     auto request = putResult.releaseReturnValue();
     request->setSource(*this);
 
-    return WTFMove(request);
+    return request;
 }
 
 ExceptionOr<void> IDBCursor::advance(unsigned count)
 {
     LOG(IndexedDB, "IDBCursor::advance");
@@ -304,18 +307,25 @@
         return result.releaseException();
 
     auto request = result.releaseReturnValue();
     request->setSource(*this);
 
-    return WTFMove(request);
+    return request;
 }
 
-void IDBCursor::setGetResult(IDBRequest&, const IDBGetResult& getResult)
+bool IDBCursor::setGetResult(IDBRequest& request, const IDBGetResult& getResult)
 {
     LOG(IndexedDB, "IDBCursor::setGetResult - current key %s", getResult.keyData().loggingString().substring(0, 100).utf8().data());
     ASSERT(&effectiveObjectStore().transaction().database().originThread() == &Thread::current());
 
+    auto* context = request.scriptExecutionContext();
+    if (!context)
+        return false;
+
+    VM& vm = context->vm();
+    JSLockHolder lock(vm);
+
     m_keyWrapper = { };
     m_primaryKeyWrapper = { };
     m_valueWrapper = { };
 
     if (!getResult.isDefined()) {
@@ -324,22 +334,32 @@
         m_primaryKeyData = { };
         m_primaryKey = nullptr;
         m_value = { };
 
         m_gotValue = false;
-        return;
+        return false;
     }
 
     m_keyData = getResult.keyData();
     m_key = m_keyData.maybeCreateIDBKey();
     m_primaryKeyData = getResult.primaryKeyData();
     m_primaryKey = m_primaryKeyData.maybeCreateIDBKey();
 
-    if (isKeyCursorWithValue())
+    if (isKeyCursorWithValue()) {
         m_value = getResult.value();
+        m_keyPath = getResult.keyPath();
+    }
 
     m_gotValue = true;
+    return true;
+}
+
+void IDBCursor::clearWrappers()
+{
+    m_keyWrapper.clear();
+    m_primaryKeyWrapper.clear();
+    m_valueWrapper.clear();
 }
 
 } // namespace WebCore
 
 #endif // ENABLE(INDEXED_DATABASE)
