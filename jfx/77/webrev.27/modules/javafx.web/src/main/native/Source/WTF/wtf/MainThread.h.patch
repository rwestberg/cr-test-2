diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/MainThread.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/MainThread.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/MainThread.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/MainThread.h
@@ -30,11 +30,10 @@
 #pragma once
 
 #include <stdint.h>
 #include <wtf/Forward.h>
 #include <wtf/Function.h>
-#include <wtf/Optional.h>
 #include <wtf/ThreadingPrimitives.h>
 
 namespace WTF {
 
 class PrintStream;
@@ -45,20 +44,26 @@
 
 WTF_EXPORT_PRIVATE void callOnMainThread(Function<void()>&&);
 WTF_EXPORT_PRIVATE void callOnMainThreadAndWait(Function<void()>&&);
 
 #if PLATFORM(COCOA)
+WTF_EXPORT_PRIVATE void dispatchAsyncOnMainThreadWithWebThreadLockIfNeeded(void (^block)());
 WTF_EXPORT_PRIVATE void callOnWebThreadOrDispatchAsyncOnMainThread(void (^block)());
 #endif
 
 WTF_EXPORT_PRIVATE void setMainThreadCallbacksPaused(bool paused);
 
 WTF_EXPORT_PRIVATE bool isMainThread();
 WTF_EXPORT_PRIVATE bool isMainThreadIfInitialized();
+WTF_EXPORT_PRIVATE bool isMainThreadInitialized();
 
 WTF_EXPORT_PRIVATE bool canAccessThreadLocalDataForThread(Thread&);
 
+WTF_EXPORT_PRIVATE bool isMainRunLoop();
+WTF_EXPORT_PRIVATE void callOnMainRunLoop(Function<void()>&&);
+WTF_EXPORT_PRIVATE void callOnMainRunLoopAndWait(Function<void()>&&);
+
 #if USE(WEB_THREAD)
 WTF_EXPORT_PRIVATE bool isWebThread();
 WTF_EXPORT_PRIVATE bool isUIThread();
 WTF_EXPORT_PRIVATE void initializeWebThread();
 WTF_EXPORT_PRIVATE void initializeApplicationUIThread();
@@ -66,21 +71,10 @@
 #else
 inline bool isWebThread() { return isMainThread(); }
 inline bool isUIThread() { return isMainThread(); }
 #endif // USE(WEB_THREAD)
 
-WTF_EXPORT_PRIVATE void initializeGCThreads();
-
-enum class GCThreadType {
-    Main,
-    Helper
-};
-
-void printInternal(PrintStream&, GCThreadType);
-
-WTF_EXPORT_PRIVATE void registerGCThread(GCThreadType);
-WTF_EXPORT_PRIVATE Optional<GCThreadType> mayBeGCThread();
 WTF_EXPORT_PRIVATE bool isMainThreadOrGCThread();
 
 // NOTE: these functions are internal to the callOnMainThread implementation.
 void initializeMainThreadPlatform();
 void scheduleDispatchFunctionsOnMainThread();
@@ -96,21 +90,22 @@
 void initializeMainThreadToProcessMainThreadPlatform();
 #endif
 
 } // namespace WTF
 
-using WTF::GCThreadType;
 using WTF::callOnMainThread;
 using WTF::callOnMainThreadAndWait;
+using WTF::callOnMainRunLoop;
+using WTF::callOnMainRunLoopAndWait;
 using WTF::canAccessThreadLocalDataForThread;
 using WTF::isMainThread;
 using WTF::isMainThreadOrGCThread;
 using WTF::isUIThread;
 using WTF::isWebThread;
-using WTF::mayBeGCThread;
 using WTF::setMainThreadCallbacksPaused;
 #if PLATFORM(COCOA)
+using WTF::dispatchAsyncOnMainThreadWithWebThreadLockIfNeeded;
 using WTF::callOnWebThreadOrDispatchAsyncOnMainThread;
 #endif
 #if USE(WEB_THREAD)
 using WTF::initializeWebThread;
 using WTF::initializeApplicationUIThread;
