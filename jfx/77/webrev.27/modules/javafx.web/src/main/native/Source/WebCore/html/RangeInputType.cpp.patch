diff a/modules/javafx.web/src/main/native/Source/WebCore/html/RangeInputType.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/RangeInputType.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/RangeInputType.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/RangeInputType.cpp
@@ -84,11 +84,11 @@
 bool RangeInputType::isRangeControl() const
 {
     return true;
 }
 
-const AtomicString& RangeInputType::formControlType() const
+const AtomString& RangeInputType::formControlType() const
 {
     return InputTypeNames::range();
 }
 
 double RangeInputType::valueAsDouble() const
@@ -118,11 +118,11 @@
 {
     ASSERT(element());
     const Decimal minimum = parseToNumber(element()->attributeWithoutSynchronization(minAttr), rangeDefaultMinimum);
     const Decimal maximum = ensureMaximum(parseToNumber(element()->attributeWithoutSynchronization(maxAttr), rangeDefaultMaximum), minimum, rangeDefaultMaximum);
 
-    const AtomicString& precisionValue = element()->attributeWithoutSynchronization(precisionAttr);
+    const AtomString& precisionValue = element()->attributeWithoutSynchronization(precisionAttr);
     if (!precisionValue.isNull()) {
         const Decimal step = equalLettersIgnoringASCIICase(precisionValue, "float") ? Decimal::nan() : 1;
         return StepRange(minimum, RangeLimitations::Valid, minimum, maximum, step, rangeStepDescription);
     }
 
@@ -193,24 +193,23 @@
 void RangeInputType::disabledStateChanged()
 {
     typedSliderThumbElement().hostDisabledStateChanged();
 }
 
-void RangeInputType::handleKeydownEvent(KeyboardEvent& event)
+auto RangeInputType::handleKeydownEvent(KeyboardEvent& event) -> ShouldCallBaseEventHandler
 {
     ASSERT(element());
     if (element()->isDisabledFormControl())
-        return;
+        return ShouldCallBaseEventHandler::Yes;
 
     const String& key = event.keyIdentifier();
 
     const Decimal current = parseToNumberOrNaN(element()->value());
     ASSERT(current.isFinite());
 
     StepRange stepRange(createStepRange(RejectAny));
 
-
     // FIXME: We can't use stepUp() for the step value "any". So, we increase
     // or decrease the value by 1/100 of the value range. Is it reasonable?
     const Decimal step = equalLettersIgnoringASCIICase(element()->attributeWithoutSynchronization(stepAttr), "any") ? (stepRange.maximum() - stepRange.minimum()) / 100 : stepRange.step();
     const Decimal bigStep = std::max((stepRange.maximum() - stepRange.minimum()) / 10, step);
 
@@ -236,11 +235,11 @@
     else if (key == "Home")
         newValue = isVertical ? stepRange.maximum() : stepRange.minimum();
     else if (key == "End")
         newValue = isVertical ? stepRange.minimum() : stepRange.maximum();
     else
-        return; // Did not match any key binding.
+        return ShouldCallBaseEventHandler::Yes; // Did not match any key binding.
 
     newValue = stepRange.clampValue(newValue);
 
     if (newValue != current) {
         EventQueueScope scope;
@@ -249,20 +248,21 @@
         if (AXObjectCache* cache = element()->document().existingAXObjectCache())
             cache->postNotification(element(), AXObjectCache::AXValueChanged);
     }
 
     event.setDefaultHandled();
+    return ShouldCallBaseEventHandler::Yes;
 }
 
 void RangeInputType::createShadowSubtree()
 {
     ASSERT(element());
     ASSERT(element()->userAgentShadowRoot());
 
     Document& document = element()->document();
     auto track = HTMLDivElement::create(document);
-    track->setPseudo(AtomicString("-webkit-slider-runnable-track", AtomicString::ConstructFromLiteral));
+    track->setPseudo(AtomString("-webkit-slider-runnable-track", AtomString::ConstructFromLiteral));
     track->appendChild(SliderThumbElement::create(document));
     auto container = SliderContainerElement::create(document);
     container->appendChild(track);
     element()->userAgentShadowRoot()->appendChild(container);
 }
