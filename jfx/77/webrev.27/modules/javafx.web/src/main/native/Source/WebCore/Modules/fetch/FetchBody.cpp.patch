diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBody.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBody.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBody.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBody.cpp
@@ -38,54 +38,59 @@
 #include "ReadableStreamSource.h"
 #include <JavaScriptCore/ArrayBufferView.h>
 
 namespace WebCore {
 
-FetchBody FetchBody::extract(ScriptExecutionContext& context, Init&& value, String& contentType)
+ExceptionOr<FetchBody> FetchBody::extract(Init&& value, String& contentType)
 {
-    return WTF::switchOn(value, [&](RefPtr<Blob>& value) mutable {
+    return WTF::switchOn(value, [&](RefPtr<Blob>& value) mutable -> ExceptionOr<FetchBody> {
         Ref<const Blob> blob = value.releaseNonNull();
         if (!blob->type().isEmpty())
             contentType = blob->type();
         return FetchBody(WTFMove(blob));
-    }, [&](RefPtr<DOMFormData>& value) mutable {
+    }, [&](RefPtr<DOMFormData>& value) mutable -> ExceptionOr<FetchBody> {
         Ref<DOMFormData> domFormData = value.releaseNonNull();
-        auto formData = FormData::createMultiPart(domFormData.get(), &downcast<Document>(context));
+        auto formData = FormData::createMultiPart(domFormData.get());
         contentType = makeString("multipart/form-data; boundary=", formData->boundary().data());
         return FetchBody(WTFMove(formData));
-    }, [&](RefPtr<URLSearchParams>& value) mutable {
+    }, [&](RefPtr<URLSearchParams>& value) mutable -> ExceptionOr<FetchBody> {
         Ref<const URLSearchParams> params = value.releaseNonNull();
         contentType = HTTPHeaderValues::formURLEncodedContentType();
         return FetchBody(WTFMove(params));
-    }, [&](RefPtr<ArrayBuffer>& value) mutable {
+    }, [&](RefPtr<ArrayBuffer>& value) mutable -> ExceptionOr<FetchBody> {
         Ref<const ArrayBuffer> buffer = value.releaseNonNull();
         return FetchBody(WTFMove(buffer));
-    }, [&](RefPtr<ArrayBufferView>& value) mutable {
+    }, [&](RefPtr<ArrayBufferView>& value) mutable -> ExceptionOr<FetchBody> {
         Ref<const ArrayBufferView> buffer = value.releaseNonNull();
         return FetchBody(WTFMove(buffer));
-    }, [&](RefPtr<ReadableStream>& stream) mutable {
+    }, [&](RefPtr<ReadableStream>& stream) mutable -> ExceptionOr<FetchBody> {
+        if (stream->isDisturbed())
+            return Exception { TypeError, "Input body is disturbed."_s };
+        if (stream->isLocked())
+            return Exception { TypeError, "Input body is locked."_s };
+
         return FetchBody(stream.releaseNonNull());
-    }, [&](String& value) {
+    }, [&](String& value) -> ExceptionOr<FetchBody> {
         contentType = HTTPHeaderValues::textPlainContentType();
         return FetchBody(WTFMove(value));
     });
 }
 
-Optional<FetchBody> FetchBody::fromFormData(FormData& formData)
+Optional<FetchBody> FetchBody::fromFormData(PAL::SessionID sessionID, FormData& formData)
 {
     ASSERT(!formData.isEmpty());
 
     if (auto buffer = formData.asSharedBuffer()) {
         FetchBody body;
         body.m_consumer.setData(buffer.releaseNonNull());
-        return WTFMove(body);
+        return body;
     }
 
     auto url = formData.asBlobURL();
     if (!url.isNull()) {
         // FIXME: Properly set mime type and size of the blob.
-        Ref<const Blob> blob = Blob::deserialize(url, { }, 0, { });
+        Ref<const Blob> blob = Blob::deserialize(sessionID, url, { }, { }, { });
         return FetchBody { WTFMove(blob) };
     }
 
     // FIXME: Support form data bodies.
     return WTF::nullopt;
@@ -241,21 +246,20 @@
     if (isURLSearchParams())
         return FormData::create(UTF8Encoding().encode(urlSearchParamsBody().toString(), UnencodableHandling::Entities));
     if (isBlob()) {
         auto body = FormData::create();
         body->appendBlob(blobBody().url());
-        return WTFMove(body);
+        return body;
     }
     if (isArrayBuffer())
         return FormData::create(arrayBufferBody().data(), arrayBufferBody().byteLength());
     if (isArrayBufferView())
         return FormData::create(arrayBufferViewBody().baseAddress(), arrayBufferViewBody().byteLength());
     if (isFormData()) {
-        ASSERT(!context.isWorkerGlobalScope());
+        ASSERT_UNUSED(context, !context.isWorkerGlobalScope());
         auto body = makeRef(const_cast<FormData&>(formDataBody()));
-        body->generateFiles(&downcast<Document>(context));
-        return WTFMove(body);
+        return body;
     }
     if (auto* data = m_consumer.data())
         return FormData::create(data->data(), data->size());
 
     ASSERT_NOT_REACHED();
@@ -272,11 +276,11 @@
     }
 
     if (isBlob()) {
         auto body = FormData::create();
         body->appendBlob(blobBody().url());
-        return WTFMove(body);
+        return TakenData { WTFMove(body) };
     }
 
     if (isFormData())
         return formDataBody();
 
