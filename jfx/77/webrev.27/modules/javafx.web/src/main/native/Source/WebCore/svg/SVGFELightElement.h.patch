diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFELightElement.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFELightElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFELightElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGFELightElement.h
@@ -1,10 +1,10 @@
 /*
  * Copyright (C) 2004, 2005 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005, 2006 Rob Buis <buis@kde.org>
  * Copyright (C) 2005 Oliver Hunt <oliver@nerget.com>
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -21,11 +21,10 @@
  */
 
 #pragma once
 
 #include "LightSource.h"
-#include "SVGAnimatedNumber.h"
 #include "SVGElement.h"
 
 namespace WebCore {
 
 class SVGFilterBuilder;
@@ -34,57 +33,54 @@
     WTF_MAKE_ISO_ALLOCATED(SVGFELightElement);
 public:
     virtual Ref<LightSource> lightSource(SVGFilterBuilder&) const = 0;
     static SVGFELightElement* findLightElement(const SVGElement*);
 
-    float azimuth() const { return m_azimuth.currentValue(attributeOwnerProxy()); }
-    float elevation() const { return m_elevation.currentValue(attributeOwnerProxy()); }
-    float x() const { return m_x.currentValue(attributeOwnerProxy()); }
-    float y() const { return m_y.currentValue(attributeOwnerProxy()); }
-    float z() const { return m_z.currentValue(attributeOwnerProxy()); }
-    float pointsAtX() const { return m_pointsAtX.currentValue(attributeOwnerProxy()); }
-    float pointsAtY() const { return m_pointsAtY.currentValue(attributeOwnerProxy()); }
-    float pointsAtZ() const { return m_pointsAtZ.currentValue(attributeOwnerProxy()); }
-    float specularExponent() const { return m_specularExponent.currentValue(attributeOwnerProxy()); }
-    float limitingConeAngle() const { return m_limitingConeAngle.currentValue(attributeOwnerProxy()); }
+    float azimuth() const { return m_azimuth->currentValue(); }
+    float elevation() const { return m_elevation->currentValue(); }
+    float x() const { return m_x->currentValue(); }
+    float y() const { return m_y->currentValue(); }
+    float z() const { return m_z->currentValue(); }
+    float pointsAtX() const { return m_pointsAtX->currentValue(); }
+    float pointsAtY() const { return m_pointsAtY->currentValue(); }
+    float pointsAtZ() const { return m_pointsAtZ->currentValue(); }
+    float specularExponent() const { return m_specularExponent->currentValue(); }
+    float limitingConeAngle() const { return m_limitingConeAngle->currentValue(); }
 
-    RefPtr<SVGAnimatedNumber> azimuthAnimated() { return m_azimuth.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> elevationAnimated() { return m_elevation.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> xAnimated() { return m_x.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> yAnimated() { return m_y.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> zAnimated() { return m_z.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> pointsAtXAnimated() { return m_pointsAtX.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> pointsAtYAnimated() { return m_pointsAtY.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> pointsAtZAnimated() { return m_pointsAtZ.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> specularExponentAnimated() { return m_specularExponent.animatedProperty(attributeOwnerProxy()); }
-    RefPtr<SVGAnimatedNumber> limitingConeAngleAnimated() { return m_limitingConeAngle.animatedProperty(attributeOwnerProxy()); }
+    SVGAnimatedNumber& azimuthAnimated() { return m_azimuth; }
+    SVGAnimatedNumber& elevationAnimated() { return m_elevation; }
+    SVGAnimatedNumber& xAnimated() { return m_x; }
+    SVGAnimatedNumber& yAnimated() { return m_y; }
+    SVGAnimatedNumber& zAnimated() { return m_z; }
+    SVGAnimatedNumber& pointsAtXAnimated() { return m_pointsAtX; }
+    SVGAnimatedNumber& pointsAtYAnimated() { return m_pointsAtY; }
+    SVGAnimatedNumber& pointsAtZAnimated() { return m_pointsAtZ; }
+    SVGAnimatedNumber& specularExponentAnimated() { return m_specularExponent; }
+    SVGAnimatedNumber& limitingConeAngleAnimated() { return m_limitingConeAngle; }
 
 protected:
     SVGFELightElement(const QualifiedName&, Document&);
 
     bool rendererIsNeeded(const RenderStyle&) override { return false; }
 
 private:
-    using AttributeOwnerProxy = SVGAttributeOwnerProxyImpl<SVGFELightElement, SVGElement>;
-    static auto& attributeRegistry() { return AttributeOwnerProxy::attributeRegistry(); }
-    static bool isKnownAttribute(const QualifiedName& attributeName) { return AttributeOwnerProxy::isKnownAttribute(attributeName); }
-    static void registerAttributes();
+    using PropertyRegistry = SVGPropertyOwnerRegistry<SVGFELightElement, SVGElement>;
+    const SVGPropertyRegistry& propertyRegistry() const final { return m_propertyRegistry; }
 
-    const SVGAttributeOwnerProxy& attributeOwnerProxy() const final { return m_attributeOwnerProxy; }
-    void parseAttribute(const QualifiedName&, const AtomicString&) override;
+    void parseAttribute(const QualifiedName&, const AtomString&) override;
     void svgAttributeChanged(const QualifiedName&) override;
     void childrenChanged(const ChildChange&) override;
 
-    AttributeOwnerProxy m_attributeOwnerProxy { *this };
-    SVGAnimatedNumberAttribute m_azimuth;
-    SVGAnimatedNumberAttribute m_elevation;
-    SVGAnimatedNumberAttribute m_x;
-    SVGAnimatedNumberAttribute m_y;
-    SVGAnimatedNumberAttribute m_z;
-    SVGAnimatedNumberAttribute m_pointsAtX;
-    SVGAnimatedNumberAttribute m_pointsAtY;
-    SVGAnimatedNumberAttribute m_pointsAtZ;
-    SVGAnimatedNumberAttribute m_specularExponent { 1 };
-    SVGAnimatedNumberAttribute m_limitingConeAngle;
+    PropertyRegistry m_propertyRegistry { *this };
+    Ref<SVGAnimatedNumber> m_azimuth { SVGAnimatedNumber::create(this) };
+    Ref<SVGAnimatedNumber> m_elevation { SVGAnimatedNumber::create(this) };
+    Ref<SVGAnimatedNumber> m_x { SVGAnimatedNumber::create(this) };
+    Ref<SVGAnimatedNumber> m_y { SVGAnimatedNumber::create(this) };
+    Ref<SVGAnimatedNumber> m_z { SVGAnimatedNumber::create(this) };
+    Ref<SVGAnimatedNumber> m_pointsAtX { SVGAnimatedNumber::create(this) };
+    Ref<SVGAnimatedNumber> m_pointsAtY { SVGAnimatedNumber::create(this) };
+    Ref<SVGAnimatedNumber> m_pointsAtZ { SVGAnimatedNumber::create(this) };
+    Ref<SVGAnimatedNumber> m_specularExponent { SVGAnimatedNumber::create(this, 1) };
+    Ref<SVGAnimatedNumber> m_limitingConeAngle { SVGAnimatedNumber::create(this) };
 };
 
 } // namespace WebCore
