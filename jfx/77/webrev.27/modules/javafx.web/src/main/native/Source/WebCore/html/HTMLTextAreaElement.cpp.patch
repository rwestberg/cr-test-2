diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTextAreaElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTextAreaElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTextAreaElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLTextAreaElement.cpp
@@ -107,13 +107,13 @@
 {
     root.appendChild(TextControlInnerTextElement::create(document()));
     updateInnerTextElementEditability();
 }
 
-const AtomicString& HTMLTextAreaElement::formControlType() const
+const AtomString& HTMLTextAreaElement::formControlType() const
 {
-    static NeverDestroyed<const AtomicString> textarea("textarea", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> textarea("textarea", AtomString::ConstructFromLiteral);
     return textarea;
 }
 
 FormControlState HTMLTextAreaElement::saveFormControlState() const
 {
@@ -146,11 +146,11 @@
     if (name == wrapAttr)
         return true;
     return HTMLTextFormControlElement::isPresentationAttribute(name);
 }
 
-void HTMLTextAreaElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomicString& value, MutableStyleProperties& style)
+void HTMLTextAreaElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomString& value, MutableStyleProperties& style)
 {
     if (name == wrapAttr) {
         if (shouldWrapText()) {
             addPropertyToPresentationAttributeStyle(style, CSSPropertyWhiteSpace, CSSValuePreWrap);
             addPropertyToPresentationAttributeStyle(style, CSSPropertyWordWrap, CSSValueBreakWord);
@@ -160,11 +160,11 @@
         }
     } else
         HTMLTextFormControlElement::collectStyleForPresentationAttribute(name, value, style);
 }
 
-void HTMLTextAreaElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLTextAreaElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == rowsAttr) {
         unsigned rows = limitToOnlyHTMLNonNegativeNumbersGreaterThanZero(value, defaultRows);
         if (m_rows != rows) {
             m_rows = rows;
@@ -199,17 +199,17 @@
         minLengthAttributeChanged(value);
     else
         HTMLTextFormControlElement::parseAttribute(name, value);
 }
 
-void HTMLTextAreaElement::maxLengthAttributeChanged(const AtomicString& newValue)
+void HTMLTextAreaElement::maxLengthAttributeChanged(const AtomString& newValue)
 {
     internalSetMaxLength(parseHTMLNonNegativeInteger(newValue).value_or(-1));
     updateValidity();
 }
 
-void HTMLTextAreaElement::minLengthAttributeChanged(const AtomicString& newValue)
+void HTMLTextAreaElement::minLengthAttributeChanged(const AtomString& newValue)
 {
     internalSetMinLength(parseHTMLNonNegativeInteger(newValue).value_or(-1));
     updateValidity();
 }
 
@@ -243,10 +243,15 @@
 bool HTMLTextAreaElement::hasCustomFocusLogic() const
 {
     return true;
 }
 
+int HTMLTextAreaElement::defaultTabIndex() const
+{
+    return 0;
+}
+
 bool HTMLTextAreaElement::isKeyboardFocusable(KeyboardEvent*) const
 {
     // If a given text area can be focused at all, then it will always be keyboard focusable.
     return isFocusable();
 }
@@ -549,17 +554,10 @@
 {
     auto textBlockStyle = RenderStyle::create();
     textBlockStyle.inheritFrom(style);
     adjustInnerTextStyle(style, textBlockStyle);
     textBlockStyle.setDisplay(DisplayType::Block);
-
-#if PLATFORM(IOS_FAMILY)
-    // We're adding three extra pixels of padding to line textareas up with text fields.
-    textBlockStyle.setPaddingLeft(Length(3, Fixed));
-    textBlockStyle.setPaddingRight(Length(3, Fixed));
-#endif
-
     return textBlockStyle;
 }
 
 void HTMLTextAreaElement::copyNonAttributePropertiesFromElement(const Element& source)
 {
