diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/llint/LowLevelInterpreter.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/llint/LowLevelInterpreter.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/llint/LowLevelInterpreter.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/llint/LowLevelInterpreter.cpp
@@ -247,25 +247,28 @@
     // caller (or one of its ancestors) is responsible for ensuring that this
     // is only called once during the initialization of the VM before threads
     // are at play.
     if (UNLIKELY(isInitializationPass)) {
         Opcode* opcodeMap = LLInt::opcodeMap();
-        Opcode* opcodeMapWide = LLInt::opcodeMapWide();
+        Opcode* opcodeMapWide16 = LLInt::opcodeMapWide16();
+        Opcode* opcodeMapWide32 = LLInt::opcodeMapWide32();
 
 #if ENABLE(COMPUTED_GOTO_OPCODES)
         #define OPCODE_ENTRY(__opcode, length) \
             opcodeMap[__opcode] = bitwise_cast<void*>(&&__opcode); \
-            opcodeMapWide[__opcode] = bitwise_cast<void*>(&&__opcode##_wide);
+            opcodeMapWide16[__opcode] = bitwise_cast<void*>(&&__opcode##_wide16); \
+            opcodeMapWide32[__opcode] = bitwise_cast<void*>(&&__opcode##_wide32);
 
         #define LLINT_OPCODE_ENTRY(__opcode, length) \
             opcodeMap[__opcode] = bitwise_cast<void*>(&&__opcode);
 #else
         // FIXME: this mapping is unnecessarily expensive in the absence of COMPUTED_GOTO
         //   narrow opcodes don't need any mapping and wide opcodes just need to add numOpcodeIDs
         #define OPCODE_ENTRY(__opcode, length) \
             opcodeMap[__opcode] = __opcode; \
-            opcodeMapWide[__opcode] = static_cast<OpcodeID>(__opcode##_wide);
+            opcodeMapWide16[__opcode] = static_cast<OpcodeID>(__opcode##_wide16); \
+            opcodeMapWide32[__opcode] = static_cast<OpcodeID>(__opcode##_wide32);
 
         #define LLINT_OPCODE_ENTRY(__opcode, length) \
             opcodeMap[__opcode] = __opcode;
 #endif
         FOR_EACH_BYTECODE_ID(OPCODE_ENTRY)
@@ -283,11 +286,11 @@
 
         return JSValue();
     }
 
     // Define the pseudo registers used by the LLINT C Loop backend:
-    ASSERT(sizeof(CLoopRegister) == sizeof(intptr_t));
+    static_assert(sizeof(CLoopRegister) == sizeof(intptr_t));
 
     // The CLoop llint backend is initially based on the ARMv7 backend, and
     // then further enhanced with a few instructions from the x86 backend to
     // support building for X64 targets. Hence, the shape of the generated
     // code and the usage convention of registers will look a lot like the
