diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/TagCollection.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/TagCollection.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/TagCollection.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/TagCollection.h
@@ -22,65 +22,68 @@
  */
 
 #pragma once
 
 #include "CachedHTMLCollection.h"
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
 // HTMLCollection that limits to a particular tag.
 class TagCollection final : public CachedHTMLCollection<TagCollection, CollectionTypeTraits<ByTag>::traversalType> {
+    WTF_MAKE_ISO_ALLOCATED(TagCollection);
 public:
-    static Ref<TagCollection> create(ContainerNode& rootNode, CollectionType type, const AtomicString& qualifiedName)
+    static Ref<TagCollection> create(ContainerNode& rootNode, CollectionType type, const AtomString& qualifiedName)
     {
         ASSERT_UNUSED(type, type == ByTag);
         return adoptRef(*new TagCollection(rootNode, qualifiedName));
     }
 
     virtual ~TagCollection();
     bool elementMatches(Element&) const;
 
 private:
-    TagCollection(ContainerNode& rootNode, const AtomicString& qualifiedName);
+    TagCollection(ContainerNode& rootNode, const AtomString& qualifiedName);
 
-    AtomicString m_qualifiedName;
+    AtomString m_qualifiedName;
 };
 
 class TagCollectionNS final : public CachedHTMLCollection<TagCollectionNS, CollectionTypeTraits<ByTag>::traversalType> {
+    WTF_MAKE_ISO_ALLOCATED(TagCollectionNS);
 public:
-    static Ref<TagCollectionNS> create(ContainerNode& rootNode, const AtomicString& namespaceURI, const AtomicString& localName)
+    static Ref<TagCollectionNS> create(ContainerNode& rootNode, const AtomString& namespaceURI, const AtomString& localName)
     {
         return adoptRef(*new TagCollectionNS(rootNode, namespaceURI, localName));
     }
 
     virtual ~TagCollectionNS();
     bool elementMatches(Element&) const;
 
 private:
-    TagCollectionNS(ContainerNode& rootNode, const AtomicString& namespaceURI, const AtomicString& localName);
+    TagCollectionNS(ContainerNode& rootNode, const AtomString& namespaceURI, const AtomString& localName);
 
-    AtomicString m_namespaceURI;
-    AtomicString m_localName;
+    AtomString m_namespaceURI;
+    AtomString m_localName;
 };
 
 class HTMLTagCollection final : public CachedHTMLCollection<HTMLTagCollection, CollectionTypeTraits<ByHTMLTag>::traversalType> {
+    WTF_MAKE_ISO_ALLOCATED(HTMLTagCollection);
 public:
-    static Ref<HTMLTagCollection> create(ContainerNode& rootNode, CollectionType type, const AtomicString& qualifiedName)
+    static Ref<HTMLTagCollection> create(ContainerNode& rootNode, CollectionType type, const AtomString& qualifiedName)
     {
         ASSERT_UNUSED(type, type == ByHTMLTag);
         return adoptRef(*new HTMLTagCollection(rootNode, qualifiedName));
     }
 
     virtual ~HTMLTagCollection();
     bool elementMatches(Element&) const;
 
 private:
-    HTMLTagCollection(ContainerNode& rootNode, const AtomicString& qualifiedName);
+    HTMLTagCollection(ContainerNode& rootNode, const AtomString& qualifiedName);
 
-    AtomicString m_qualifiedName;
-    AtomicString m_loweredQualifiedName;
+    AtomString m_qualifiedName;
+    AtomString m_loweredQualifiedName;
 };
 
 inline bool TagCollection::elementMatches(Element& element) const
 {
     return m_qualifiedName == element.tagQName().toString();
