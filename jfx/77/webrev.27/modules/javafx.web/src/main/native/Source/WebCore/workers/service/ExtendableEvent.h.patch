diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ExtendableEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ExtendableEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ExtendableEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ExtendableEvent.h
@@ -35,11 +35,11 @@
 
 class DOMPromise;
 
 class ExtendableEvent : public Event, public CanMakeWeakPtr<ExtendableEvent> {
 public:
-    static Ref<ExtendableEvent> create(const AtomicString& type, const ExtendableEventInit& initializer, IsTrusted isTrusted = IsTrusted::No)
+    static Ref<ExtendableEvent> create(const AtomString& type, const ExtendableEventInit& initializer, IsTrusted isTrusted = IsTrusted::No)
     {
         return adoptRef(*new ExtendableEvent(type, initializer, isTrusted));
     }
 
     ~ExtendableEvent();
@@ -50,12 +50,12 @@
     unsigned pendingPromiseCount() const { return m_pendingPromiseCount; }
 
     WEBCORE_EXPORT void whenAllExtendLifetimePromisesAreSettled(WTF::Function<void(HashSet<Ref<DOMPromise>>&&)>&&);
 
 protected:
-    WEBCORE_EXPORT ExtendableEvent(const AtomicString&, const ExtendableEventInit&, IsTrusted);
-    ExtendableEvent(const AtomicString&, CanBubble, IsCancelable);
+    WEBCORE_EXPORT ExtendableEvent(const AtomString&, const ExtendableEventInit&, IsTrusted);
+    ExtendableEvent(const AtomString&, CanBubble, IsCancelable);
 
     void addExtendLifetimePromise(Ref<DOMPromise>&&);
 
 private:
     unsigned m_pendingPromiseCount { 0 };
