diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/PathUtilities.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/PathUtilities.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/PathUtilities.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/PathUtilities.cpp
@@ -87,11 +87,11 @@
     for (auto& testNode : m_allNodes) {
         if (areEssentiallyEqual(*testNode, point))
             return testNode.get();
     }
 
-    m_allNodes.append(std::make_unique<FloatPointGraph::Node>(point));
+    m_allNodes.append(makeUnique<FloatPointGraph::Node>(point));
     return m_allNodes.last().get();
 }
 
 static bool findLineSegmentIntersection(const FloatPointGraph::Edge& edgeA, const FloatPointGraph::Edge& edgeB, FloatPoint& intersectionPoint)
 {
@@ -578,18 +578,14 @@
             // Do not apply border radius on corners that normal border painting skips. (multiline content)
             moveOrAddLineTo(*fromEdge.second);
             continue;
         }
         }
-        FloatPoint startPoint;
-        FloatPoint endPoint;
-        std::tie(startPoint, endPoint) = startAndEndPointsForCorner(fromEdge, toEdge, radius);
+        auto [startPoint, endPoint] = startAndEndPointsForCorner(fromEdge, toEdge, radius);
         moveOrAddLineTo(startPoint);
 
-        FloatPoint cp1;
-        FloatPoint cp2;
-        std::tie(cp1, cp2) = controlPointsForBezierCurve(corner, fromEdge, toEdge, radius);
+        auto [cp1, cp2] = controlPointsForBezierCurve(corner, fromEdge, toEdge, radius);
         path.addBezierCurveTo(cp1, cp2, endPoint);
     }
     path.closeSubpath();
     return path;
 }
