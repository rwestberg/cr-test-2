diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/MarkedBlock.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/MarkedBlock.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/MarkedBlock.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/MarkedBlock.h
@@ -1,9 +1,9 @@
 /*
  *  Copyright (C) 1999-2000 Harri Porten (porten@kde.org)
  *  Copyright (C) 2001 Peter Kelly (pmk@post.com)
- *  Copyright (C) 2003-2018 Apple Inc. All rights reserved.
+ *  Copyright (C) 2003-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Lesser General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -122,11 +122,11 @@
         BlockDirectory* directory() const;
         Subspace* subspace() const;
         AlignedMemoryAllocator* alignedMemoryAllocator() const;
         Heap* heap() const;
         inline MarkedSpace* space() const;
-        VM* vm() const;
+        VM& vm() const;
         WeakSet& weakSet();
 
         enum SweepMode { SweepOnly, SweepToFreeList };
 
         // Sweeping ensures that destructors get called and removes the block from the unswept
@@ -144,12 +144,10 @@
         template<typename DestroyFunc>
         void finishSweepKnowingHeapCellType(FreeList*, const DestroyFunc&);
 
         void unsweepWithNoNewlyAllocated();
 
-        void zap(const FreeList&);
-
         void shrink();
 
         void visitWeakSet(SlotVisitor&);
         void reapWeakSet();
 
@@ -198,10 +196,14 @@
         void removeFromDirectory();
 
         void didAddToDirectory(BlockDirectory*, size_t index);
         void didRemoveFromDirectory();
 
+        void* start() const { return &m_block->atoms()[0]; }
+        void* end() const { return &m_block->atoms()[m_endAtom]; }
+        bool contains(void* p) const { return start() <= p && p < end(); }
+
         void dumpState(PrintStream&);
 
     private:
         Handle(Heap&, AlignedMemoryAllocator*, void*);
 
@@ -253,10 +255,12 @@
     private:
         friend class LLIntOffsetsExtractor;
         friend class MarkedBlock;
 
         Handle& m_handle;
+        // m_vm must remain a pointer (instead of a reference) because JSCLLIntOffsetsExtractor
+        // will fail otherwise.
         VM* m_vm;
         Subspace* m_subspace;
 
         CountingLock m_lock;
 
@@ -302,18 +306,20 @@
     static constexpr size_t endAtom = (blockSize - sizeof(Footer)) / atomSize;
     static constexpr size_t payloadSize = endAtom * atomSize;
     static constexpr size_t footerSize = blockSize - payloadSize;
 
     static_assert(payloadSize == ((blockSize - sizeof(MarkedBlock::Footer)) & ~(atomSize - 1)), "Payload size computed the alternate way should give the same result");
-    static_assert(footerSize >= minimumDistanceBetweenCellsFromDifferentOrigins, "Footer is not big enough to create the necessary distance between objects from different origins");
+    // Some of JSCell types assume that the last JSCell in a MarkedBlock has a subsequent memory region (Footer) that can still safely accessed.
+    // For example, JSRopeString assumes that it can safely access up to 2 bytes beyond the JSRopeString cell.
+    static_assert(sizeof(Footer) >= sizeof(uint16_t));
 
     static MarkedBlock::Handle* tryCreate(Heap&, AlignedMemoryAllocator*);
 
     Handle& handle();
     const Handle& handle() const;
 
-    VM* vm() const;
+    VM& vm() const;
     inline Heap* heap() const;
     inline MarkedSpace* space() const;
 
     static bool isAtomAligned(const void*);
     static MarkedBlock* blockFor(const void*);
@@ -374,10 +380,15 @@
 
     CountingLock& lock() { return footer().m_lock; }
 
     Subspace* subspace() const { return footer().m_subspace; }
 
+    void populatePage() const
+    {
+        *bitwise_cast<volatile uint8_t*>(&footer());
+    }
+
     static constexpr size_t offsetOfFooter = endAtom * atomSize;
 
 private:
     MarkedBlock(VM&, Handle&);
     ~MarkedBlock();
@@ -460,18 +471,18 @@
 inline Heap* MarkedBlock::Handle::heap() const
 {
     return m_weakSet.heap();
 }
 
-inline VM* MarkedBlock::Handle::vm() const
+inline VM& MarkedBlock::Handle::vm() const
 {
     return m_weakSet.vm();
 }
 
-inline VM* MarkedBlock::vm() const
+inline VM& MarkedBlock::vm() const
 {
-    return footer().m_vm;
+    return *footer().m_vm;
 }
 
 inline WeakSet& MarkedBlock::Handle::weakSet()
 {
     return m_weakSet;
