diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/SharedBuffer.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/SharedBuffer.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/SharedBuffer.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/SharedBuffer.cpp
@@ -69,11 +69,11 @@
 #endif
 
 RefPtr<SharedBuffer> SharedBuffer::createWithContentsOfFile(const String& filePath)
 {
     bool mappingSuccess;
-    FileSystem::MappedFileData mappedFileData(filePath, mappingSuccess);
+    FileSystem::MappedFileData mappedFileData(filePath, FileSystem::MappedFileMode::Shared, mappingSuccess);
 
     if (!mappingSuccess)
         return SharedBuffer::createFromReadingFile(filePath);
 
     return adoptRef(new SharedBuffer(WTFMove(mappedFileData)));
@@ -332,21 +332,20 @@
     const int length = string.length();
     Vector<char> buffer(length * 3);
 
     // Convert to runs of 8-bit characters.
     char* p = buffer.data();
-    WTF::Unicode::ConversionResult result;
     if (length) {
         if (string.is8Bit()) {
             const LChar* d = string.characters8();
-            result = WTF::Unicode::convertLatin1ToUTF8(&d, d + length, &p, p + buffer.size());
+            if (!WTF::Unicode::convertLatin1ToUTF8(&d, d + length, &p, p + buffer.size()))
+                return nullptr;
         } else {
             const UChar* d = string.characters16();
-            result = WTF::Unicode::convertUTF16ToUTF8(&d, d + length, &p, p + buffer.size(), true);
+            if (WTF::Unicode::convertUTF16ToUTF8(&d, d + length, &p, p + buffer.size()) != WTF::Unicode::ConversionOK)
+                return nullptr;
         }
-        if (result != WTF::Unicode::conversionOK)
-            return nullptr;
     }
 
     buffer.shrink(p - buffer.data());
     return SharedBuffer::create(WTFMove(buffer));
 }
