diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsLayer.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsLayer.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsLayer.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsLayer.cpp
@@ -77,10 +77,11 @@
 {
     switch (type) {
     case Type::Normal:
     case Type::PageTiledBacking:
     case Type::ScrollContainer:
+    case Type::ScrolledContents:
         return true;
     case Type::Shape:
         return false;
     }
     ASSERT_NOT_REACHED();
@@ -109,11 +110,11 @@
     return false;
 }
 #endif
 
 // Singleton client used for layers on which clearClient has been called.
-class EmptyGraphicsLayerClient : public GraphicsLayerClient {
+class EmptyGraphicsLayerClient final : public GraphicsLayerClient {
     WTF_MAKE_FAST_ALLOCATED;
 public:
     static EmptyGraphicsLayerClient& singleton();
 };
 
@@ -340,11 +341,11 @@
 void GraphicsLayer::setTransform(const TransformationMatrix& matrix)
 {
     if (m_transform)
         *m_transform = matrix;
     else
-        m_transform = std::make_unique<TransformationMatrix>(matrix);
+        m_transform = makeUnique<TransformationMatrix>(matrix);
 }
 
 const TransformationMatrix& GraphicsLayer::childrenTransform() const
 {
     return m_childrenTransform ? *m_childrenTransform : TransformationMatrix::identity;
@@ -353,11 +354,11 @@
 void GraphicsLayer::setChildrenTransform(const TransformationMatrix& matrix)
 {
     if (m_childrenTransform)
         *m_childrenTransform = matrix;
     else
-        m_childrenTransform = std::make_unique<TransformationMatrix>(matrix);
+        m_childrenTransform = makeUnique<TransformationMatrix>(matrix);
 }
 
 void GraphicsLayer::setMaskLayer(RefPtr<GraphicsLayer>&& layer)
 {
     if (layer == m_maskLayer)
@@ -409,10 +410,15 @@
 #else
     UNUSED_PARAM(windRule);
 #endif
 }
 
+void GraphicsLayer::setEventRegion(EventRegion&& eventRegion)
+{
+    m_eventRegion = WTFMove(eventRegion);
+}
+
 void GraphicsLayer::noteDeviceOrPageScaleFactorChangedIncludingDescendants()
 {
     deviceOrPageScaleFactorChanged();
 
     if (m_maskLayer)
@@ -483,10 +489,19 @@
 void GraphicsLayer::setBackgroundColor(const Color& color)
 {
     m_backgroundColor = color;
 }
 
+void GraphicsLayer::setPaintingPhase(OptionSet<GraphicsLayerPaintingPhase> phase)
+{
+    if (phase == m_paintingPhase)
+        return;
+
+    setNeedsDisplay();
+    m_paintingPhase = phase;
+}
+
 void GraphicsLayer::paintGraphicsLayerContents(GraphicsContext& context, const FloatRect& clip, GraphicsLayerPaintBehavior layerPaintBehavior)
 {
     FloatSize offset = offsetFromRenderer() - toFloatSize(scrollOffset());
     context.translate(-offset);
 
@@ -494,10 +509,68 @@
     clipRect.move(offset);
 
     client().paintContents(this, context, m_paintingPhase, clipRect, layerPaintBehavior);
 }
 
+FloatRect GraphicsLayer::adjustCoverageRectForMovement(const FloatRect& coverageRect, const FloatRect& previousVisibleRect, const FloatRect& currentVisibleRect)
+{
+    // If the old visible rect is empty, we have no information about how the visible area is changing
+    // (maybe the layer was just created), so don't attempt to expand. Also don't attempt to expand if the rects don't overlap.
+    if (previousVisibleRect.isEmpty() || !currentVisibleRect.intersects(previousVisibleRect))
+        return unionRect(coverageRect, currentVisibleRect);
+
+    const float paddingMultiplier = 2;
+
+    float leftEdgeDelta = paddingMultiplier * (currentVisibleRect.x() - previousVisibleRect.x());
+    float rightEdgeDelta = paddingMultiplier * (currentVisibleRect.maxX() - previousVisibleRect.maxX());
+
+    float topEdgeDelta = paddingMultiplier * (currentVisibleRect.y() - previousVisibleRect.y());
+    float bottomEdgeDelta = paddingMultiplier * (currentVisibleRect.maxY() - previousVisibleRect.maxY());
+
+    FloatRect expandedRect = currentVisibleRect;
+
+    // More exposed on left side.
+    if (leftEdgeDelta < 0) {
+        float newLeft = expandedRect.x() + leftEdgeDelta;
+        // Pad to the left, but don't reduce padding that's already in the backing store (since we're still exposing to the left).
+        if (newLeft < previousVisibleRect.x())
+            expandedRect.shiftXEdgeTo(newLeft);
+        else
+            expandedRect.shiftXEdgeTo(previousVisibleRect.x());
+    }
+
+    // More exposed on right.
+    if (rightEdgeDelta > 0) {
+        float newRight = expandedRect.maxX() + rightEdgeDelta;
+        // Pad to the right, but don't reduce padding that's already in the backing store (since we're still exposing to the right).
+        if (newRight > previousVisibleRect.maxX())
+            expandedRect.setWidth(newRight - expandedRect.x());
+        else
+            expandedRect.setWidth(previousVisibleRect.maxX() - expandedRect.x());
+    }
+
+    // More exposed at top.
+    if (topEdgeDelta < 0) {
+        float newTop = expandedRect.y() + topEdgeDelta;
+        if (newTop < previousVisibleRect.y())
+            expandedRect.shiftYEdgeTo(newTop);
+        else
+            expandedRect.shiftYEdgeTo(previousVisibleRect.y());
+    }
+
+    // More exposed on bottom.
+    if (bottomEdgeDelta > 0) {
+        float newBottom = expandedRect.maxY() + bottomEdgeDelta;
+        if (newBottom > previousVisibleRect.maxY())
+            expandedRect.setHeight(newBottom - expandedRect.y());
+        else
+            expandedRect.setHeight(previousVisibleRect.maxY() - expandedRect.y());
+    }
+
+    return unionRect(coverageRect, expandedRect);
+}
+
 String GraphicsLayer::animationNameForTransition(AnimatedPropertyID property)
 {
     // | is not a valid identifier character in CSS, so this can never conflict with a keyframe identifier.
     StringBuilder id;
     id.appendLiteral("-|transition");
@@ -831,10 +904,13 @@
         ts << indent << "(contentsOpaque " << (m_contentsOpaque || needsIOSDumpRenderTreeMainFrameRenderViewLayerIsAlwaysOpaqueHack) << ")\n";
 
     if (m_supportsSubpixelAntialiasedText)
         ts << indent << "(supports subpixel antialiased text " << m_supportsSubpixelAntialiasedText << ")\n";
 
+    if (m_masksToBounds && behavior & LayerTreeAsTextIncludeClipping)
+        ts << indent << "(clips " << m_masksToBounds << ")\n";
+
     if (m_preserves3D)
         ts << indent << "(preserves3D " << m_preserves3D << ")\n";
 
     if (m_drawsContent && client().shouldDumpPropertyForLayer(this, "drawsContent", behavior))
         ts << indent << "(drawsContent " << m_drawsContent << ")\n";
@@ -843,14 +919,12 @@
         ts << indent << "(contentsVisible " << m_contentsVisible << ")\n";
 
     if (!m_backfaceVisibility)
         ts << indent << "(backfaceVisibility " << (m_backfaceVisibility ? "visible" : "hidden") << ")\n";
 
-    if (behavior & LayerTreeAsTextDebug) {
+    if (behavior & LayerTreeAsTextDebug)
         ts << indent << "(primary-layer-id " << primaryLayerID() << ")\n";
-        ts << indent << "(client " << static_cast<void*>(m_client) << ")\n";
-    }
 
     if (m_backgroundColor.isValid() && client().shouldDumpPropertyForLayer(this, "backgroundColor", behavior))
         ts << indent << "(backgroundColor " << m_backgroundColor.nameForRenderTreeAsText() << ")\n";
 
     if (behavior & LayerTreeAsTextIncludeAcceleratesDrawing && m_acceleratesDrawing)
@@ -919,34 +993,18 @@
             ts << ")\n";
         }
         ts << indent << ")\n";
     }
 
-    if (behavior & LayerTreeAsTextIncludePaintingPhases && paintingPhase()) {
-        ts << indent << "(paintingPhases\n";
-        TextStream::IndentScope indentScope(ts);
-        if (paintingPhase() & GraphicsLayerPaintBackground)
-            ts << indent << "GraphicsLayerPaintBackground\n";
-
-        if (paintingPhase() & GraphicsLayerPaintForeground)
-            ts << indent << "GraphicsLayerPaintForeground\n";
-
-        if (paintingPhase() & GraphicsLayerPaintMask)
-            ts << indent << "GraphicsLayerPaintMask\n";
-
-        if (paintingPhase() & GraphicsLayerPaintChildClippingMask)
-            ts << indent << "GraphicsLayerPaintChildClippingMask\n";
-
-        if (paintingPhase() & GraphicsLayerPaintOverflowContents)
-            ts << indent << "GraphicsLayerPaintOverflowContents\n";
-
-        if (paintingPhase() & GraphicsLayerPaintCompositedScroll)
-            ts << indent << "GraphicsLayerPaintCompositedScroll\n";
-
+    if (behavior & LayerTreeAsTextIncludeEventRegion && !m_eventRegion.isEmpty()) {
+        ts << indent << "(event region" << m_eventRegion;
         ts << indent << ")\n";
     }
 
+    if (behavior & LayerTreeAsTextIncludePaintingPhases && paintingPhase())
+        ts << indent << "(paintingPhases " << paintingPhase() << ")\n";
+
     dumpAdditionalProperties(ts, behavior);
 
     if (m_children.size()) {
         TextStream childrenStream;
 
@@ -971,11 +1029,26 @@
     }
 
     return ts;
 }
 
-TextStream& operator<<(TextStream& ts, const WebCore::GraphicsLayer::CustomAppearance& customAppearance)
+TextStream& operator<<(TextStream& ts, GraphicsLayerPaintingPhase phase)
+{
+    switch (phase) {
+    case GraphicsLayerPaintingPhase::Background: ts << "background"; break;
+    case GraphicsLayerPaintingPhase::Foreground: ts << "foreground"; break;
+    case GraphicsLayerPaintingPhase::Mask: ts << "mask"; break;
+    case GraphicsLayerPaintingPhase::ClipPath: ts << "clip-path"; break;
+    case GraphicsLayerPaintingPhase::OverflowContents: ts << "overflow-contents"; break;
+    case GraphicsLayerPaintingPhase::CompositedScroll: ts << "composited-scroll"; break;
+    case GraphicsLayerPaintingPhase::ChildClippingMask: ts << "child-clipping-mask"; break;
+    }
+
+    return ts;
+}
+
+TextStream& operator<<(TextStream& ts, const GraphicsLayer::CustomAppearance& customAppearance)
 {
     switch (customAppearance) {
     case GraphicsLayer::CustomAppearance::None: ts << "none"; break;
     case GraphicsLayer::CustomAppearance::ScrollingOverhang: ts << "scrolling-overhang"; break;
     case GraphicsLayer::CustomAppearance::ScrollingShadow: ts << "scrolling-shadow"; break;
