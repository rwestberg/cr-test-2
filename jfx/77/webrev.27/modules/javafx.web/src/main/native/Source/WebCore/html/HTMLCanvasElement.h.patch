diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLCanvasElement.h b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLCanvasElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLCanvasElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLCanvasElement.h
@@ -49,12 +49,11 @@
 class ImageBuffer;
 class ImageData;
 class MediaSample;
 class MediaStream;
 class WebGLRenderingContextBase;
-class WebGPURenderingContext;
-class WebMetalRenderingContext;
+class GPUCanvasContext;
 struct UncachedString;
 
 namespace DisplayList {
 using AsTextFlags = unsigned;
 }
@@ -98,17 +97,12 @@
     WebGLRenderingContextBase* createContextWebGL(const String&, WebGLContextAttributes&& = { });
     WebGLRenderingContextBase* getContextWebGL(const String&, WebGLContextAttributes&& = { });
 #endif
 #if ENABLE(WEBGPU)
     static bool isWebGPUType(const String&);
-    WebGPURenderingContext* createContextWebGPU(const String&);
-    WebGPURenderingContext* getContextWebGPU(const String&);
-#endif
-#if ENABLE(WEBMETAL)
-    static bool isWebMetalType(const String&);
-    WebMetalRenderingContext* createContextWebMetal(const String&);
-    WebMetalRenderingContext* getContextWebMetal(const String&);
+    GPUCanvasContext* createContextWebGPU(const String&);
+    GPUCanvasContext* getContextWebGPU(const String&);
 #endif
 
     static bool isBitmapRendererType(const String&);
     ImageBitmapRenderingContext* createContextBitmapRenderer(const String&, ImageBitmapRenderingContextSettings&& = { });
     ImageBitmapRenderingContext* getContextBitmapRenderer(const String&, ImageBitmapRenderingContextSettings&& = { });
@@ -125,11 +119,11 @@
     GraphicsContext* drawingContext() const final;
     GraphicsContext* existingDrawingContext() const final;
 
 #if ENABLE(MEDIA_STREAM)
     RefPtr<MediaSample> toMediaSample();
-    ExceptionOr<Ref<MediaStream>> captureStream(ScriptExecutionContext&, Optional<double>&& frameRequestRate);
+    ExceptionOr<Ref<MediaStream>> captureStream(Document&, Optional<double>&& frameRequestRate);
 #endif
 
     ImageBuffer* buffer() const;
     Image* copiedImage() const final;
     void clearCopiedImage();
@@ -161,11 +155,11 @@
 private:
     HTMLCanvasElement(const QualifiedName&, Document&);
 
     bool isHTMLCanvasElement() const final { return true; }
 
-    void parseAttribute(const QualifiedName&, const AtomicString&) final;
+    void parseAttribute(const QualifiedName&, const AtomString&) final;
     RenderPtr<RenderElement> createElementRenderer(RenderStyle&&, const RenderTreePosition&) final;
 
     bool canContainRangeEndPoint() const final;
     bool canStartSelection() const final;
 
