diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGURIReference.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGURIReference.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGURIReference.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGURIReference.cpp
@@ -1,9 +1,9 @@
 /*
  * Copyright (C) 2004, 2005, 2008 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005, 2006 Rob Buis <buis@kde.org>
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -22,56 +22,35 @@
 #include "config.h"
 #include "SVGURIReference.h"
 
 #include "Document.h"
 #include "Element.h"
-#include "SVGAttributeOwnerProxy.h"
 #include "SVGElement.h"
 #include <wtf/URL.h>
 #include "XLinkNames.h"
 
 namespace WebCore {
 
 SVGURIReference::SVGURIReference(SVGElement* contextElement)
-    : m_attributeOwnerProxy(std::make_unique<AttributeOwnerProxy>(*this, *contextElement))
+    : m_href(SVGAnimatedString::create(contextElement))
 {
-    registerAttributes();
-}
-
-void SVGURIReference::registerAttributes()
-{
-    auto& registry = attributeRegistry();
-    if (!registry.isEmpty())
-        return;
-    registry.registerAttribute<SVGNames::hrefAttr, &SVGURIReference::m_href>();
-    registry.registerAttribute<XLinkNames::hrefAttr, &SVGURIReference::m_href>();
-}
-
-SVGURIReference::AttributeRegistry& SVGURIReference::attributeRegistry()
-{
-    return AttributeOwnerProxy::attributeRegistry();
+    static std::once_flag onceFlag;
+    std::call_once(onceFlag, [] {
+        PropertyRegistry::registerProperty<SVGNames::hrefAttr, &SVGURIReference::m_href>();
+        PropertyRegistry::registerProperty<XLinkNames::hrefAttr, &SVGURIReference::m_href>();
+    });
 }
 
 bool SVGURIReference::isKnownAttribute(const QualifiedName& attributeName)
 {
-    return AttributeOwnerProxy::isKnownAttribute(attributeName);
+    return PropertyRegistry::isKnownAttribute(attributeName);
 }
 
-void SVGURIReference::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void SVGURIReference::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (isKnownAttribute(name))
-        m_href.setValue(value);
-}
-
-const String& SVGURIReference::href() const
-{
-    return m_href.currentValue(*m_attributeOwnerProxy);
-}
-
-RefPtr<SVGAnimatedString> SVGURIReference::hrefAnimated()
-{
-    return m_href.animatedProperty(*m_attributeOwnerProxy);
+        m_href->setBaseValInternal(value);
 }
 
 String SVGURIReference::fragmentIdentifierFromIRIString(const String& url, const Document& document)
 {
     size_t start = url.find('#');
