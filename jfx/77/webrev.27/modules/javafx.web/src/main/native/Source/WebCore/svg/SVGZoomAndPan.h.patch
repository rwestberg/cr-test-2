diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGZoomAndPan.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGZoomAndPan.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGZoomAndPan.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGZoomAndPan.h
@@ -1,9 +1,9 @@
 /*
  * Copyright (C) 2004, 2005, 2008 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005, 2006, 2007 Rob Buis <buis@kde.org>
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -19,10 +19,11 @@
  * Boston, MA 02110-1301, USA.
  */
 
 #pragma once
 
+#include "ExceptionOr.h"
 #include "QualifiedName.h"
 #include "SVGNames.h"
 #include "SVGZoomAndPanType.h"
 
 namespace WebCore {
@@ -35,28 +36,22 @@
         SVG_ZOOMANDPAN_UNKNOWN = SVGZoomAndPanUnknown,
         SVG_ZOOMANDPAN_DISABLE = SVGZoomAndPanDisable,
         SVG_ZOOMANDPAN_MAGNIFY = SVGZoomAndPanMagnify
     };
 
-    SVGZoomAndPanType zoomAndPan() const { return m_zoomAndPan.value(); }
-    void setZoomAndPan(SVGZoomAndPanType zoomAndPan) { m_zoomAndPan.setValue(zoomAndPan); }
+    SVGZoomAndPanType zoomAndPan() const { return m_zoomAndPan; }
+    void setZoomAndPan(SVGZoomAndPanType zoomAndPan) { m_zoomAndPan = zoomAndPan; }
     ExceptionOr<void> setZoomAndPan(unsigned) { return Exception { NoModificationAllowedError }; }
-    void reset() { m_zoomAndPan.setValue(SVGZoomAndPanMagnify); }
+    void reset() { m_zoomAndPan = SVGPropertyTraits<SVGZoomAndPanType>::initialValue(); }
 
-    using AttributeOwnerProxy = SVGAttributeOwnerProxyImpl<SVGZoomAndPan>;
-    static AttributeOwnerProxy::AttributeRegistry& attributeRegistry() { return AttributeOwnerProxy::attributeRegistry(); }
-
-    void parseAttribute(const QualifiedName&, const AtomicString&);
+    void parseAttribute(const QualifiedName&, const AtomString&);
 
 protected:
-    SVGZoomAndPan();
+    SVGZoomAndPan() = default;
 
-    static bool isKnownAttribute(const QualifiedName& attributeName) { return AttributeOwnerProxy::isKnownAttribute(attributeName); }
     bool parseZoomAndPan(const UChar*&, const UChar*);
 
 private:
-    static void registerAttributes();
-
-    SVGPropertyAttribute<SVGZoomAndPanType> m_zoomAndPan;
+    SVGZoomAndPanType m_zoomAndPan { SVGPropertyTraits<SVGZoomAndPanType>::initialValue() };
 };
 
 } // namespace WebCore
