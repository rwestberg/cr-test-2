diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSArrayBufferView.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSArrayBufferView.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSArrayBufferView.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSArrayBufferView.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013, 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -25,10 +25,11 @@
 
 #pragma once
 
 #include "AuxiliaryBarrier.h"
 #include "JSObject.h"
+#include <wtf/TaggedArrayStoragePtr.h>
 
 namespace JSC {
 
 class LLIntOffsetsExtractor;
 
@@ -94,10 +95,11 @@
 
 class JSArrayBufferView : public JSNonFinalObject {
 public:
     typedef JSNonFinalObject Base;
     static const unsigned fastSizeLimit = 1000;
+    using VectorPtr = CagedBarrierPtr<Gigacage::Primitive, void, tagCagedPtr>;
 
     static size_t sizeOf(uint32_t length, uint32_t elementSize)
     {
         return (length * elementSize + sizeof(EncodedJSValue) - 1)
             & ~(sizeof(EncodedJSValue) - 1);
@@ -131,18 +133,19 @@
             unsigned byteOffset, unsigned length, DataViewTag);
 
         bool operator!() const { return !m_structure; }
 
         Structure* structure() const { return m_structure; }
-        void* vector() const { return m_vector.getMayBeNull(); }
+        void* vector() const { return m_vector.getMayBeNull(m_length); }
         uint32_t length() const { return m_length; }
         TypedArrayMode mode() const { return m_mode; }
         Butterfly* butterfly() const { return m_butterfly; }
 
     private:
         Structure* m_structure;
-        CagedPtr<Gigacage::Primitive, void> m_vector;
+        using VectorType = CagedPtr<Gigacage::Primitive, void, tagCagedPtr>;
+        VectorType m_vector;
         uint32_t m_length;
         TypedArrayMode m_mode;
         Butterfly* m_butterfly;
     };
 
@@ -162,14 +165,15 @@
     ArrayBuffer* possiblySharedBuffer();
     JSArrayBuffer* unsharedJSBuffer(ExecState* exec);
     JSArrayBuffer* possiblySharedJSBuffer(ExecState* exec);
     RefPtr<ArrayBufferView> unsharedImpl();
     JS_EXPORT_PRIVATE RefPtr<ArrayBufferView> possiblySharedImpl();
-    bool isNeutered() { return hasArrayBuffer() && !vector(); }
+    bool isNeutered() { return hasArrayBuffer() && !hasVector(); }
     void neuter();
 
-    void* vector() const { return m_vector.getMayBeNull(); }
+    bool hasVector() const { return !!m_vector; }
+    void* vector() const { return m_vector.getMayBeNull(length()); }
 
     unsigned byteOffset();
     unsigned length() const { return m_length; }
 
     DECLARE_EXPORT_INFO;
@@ -189,11 +193,11 @@
 
     ArrayBuffer* existingBufferInButterfly();
 
     static String toStringName(const JSObject*, ExecState*);
 
-    CagedBarrierPtr<Gigacage::Primitive, void> m_vector;
+    VectorPtr m_vector;
     uint32_t m_length;
     TypedArrayMode m_mode;
 };
 
 } // namespace JSC
