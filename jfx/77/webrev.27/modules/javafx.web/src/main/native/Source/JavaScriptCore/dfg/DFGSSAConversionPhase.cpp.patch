diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGSSAConversionPhase.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGSSAConversionPhase.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGSSAConversionPhase.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGSSAConversionPhase.cpp
@@ -132,31 +132,31 @@
             ASSERT(ssaVariable->index() == m_variableForSSAIndex.size());
             m_variableForSSAIndex.append(&variable);
             m_ssaVariableForVariable.add(&variable, ssaVariable);
         }
 
-        // Find all SetLocals and create Defs for them. We handle SetArgument by creating a
+        // Find all SetLocals and create Defs for them. We handle SetArgumentDefinitely by creating a
         // GetLocal, and recording the flush format.
         for (BlockIndex blockIndex = m_graph.numBlocks(); blockIndex--;) {
             BasicBlock* block = m_graph.block(blockIndex);
             if (!block)
                 continue;
 
             // Must process the block in forward direction because we want to see the last
             // assignment for every local.
             for (unsigned nodeIndex = 0; nodeIndex < block->size(); ++nodeIndex) {
                 Node* node = block->at(nodeIndex);
-                if (node->op() != SetLocal && node->op() != SetArgument)
+                if (node->op() != SetLocal && node->op() != SetArgumentDefinitely)
                     continue;
 
                 VariableAccessData* variable = node->variableAccessData();
 
                 Node* childNode;
                 if (node->op() == SetLocal)
                     childNode = node->child1().node();
                 else {
-                    ASSERT(node->op() == SetArgument);
+                    ASSERT(node->op() == SetArgumentDefinitely);
                     childNode = m_insertionSet.insertNode(
                         nodeIndex, node->variableAccessData()->prediction(),
                         GetStack, node->origin,
                         OpInfo(m_graph.m_stackAccessData.add(variable->local(), variable->flushFormat())));
                     if (!ASSERT_DISABLED)
@@ -253,16 +253,18 @@
         //   - GetLocal die and get replaced with references to the node specified by
         //     valueForOperand.
         //
         //   - SetLocal turns into PutStack if it's flushed, or turns into a Check otherwise.
         //
-        //   - Flush loses its children and turns into a Phantom.
+        //   - Flush is removed.
         //
         //   - PhantomLocal becomes Phantom, and its child is whatever is specified by
         //     valueForOperand.
         //
-        //   - SetArgument is removed. Note that GetStack nodes have already been inserted.
+        //   - SetArgumentDefinitely is removed. Note that GetStack nodes have already been inserted.
+        //
+        //   - SetArgumentMaybe is removed. It should not have any data flow uses.
         Operands<Node*> valueForOperand(OperandsLike, m_graph.block(0)->variablesAtHead);
         for (BasicBlock* block : m_graph.blocksInPreOrder()) {
             valueForOperand.clear();
 
             // CPS will claim that the root block has all arguments live. But we have already done
@@ -386,11 +388,16 @@
                     node->child1() = valueForOperand.operand(variable->local())->defaultEdge();
                     node->remove(m_graph);
                     break;
                 }
 
-                case SetArgument: {
+                case SetArgumentDefinitely: {
+                    node->remove(m_graph);
+                    break;
+                }
+
+                case SetArgumentMaybe: {
                     node->remove(m_graph);
                     break;
                 }
 
                 default:
@@ -439,11 +446,11 @@
             block->phis.clear();
             block->variablesAtHead.clear();
             block->variablesAtTail.clear();
             block->valuesAtHead.clear();
             block->valuesAtHead.clear();
-            block->ssa = std::make_unique<BasicBlock::SSAData>(block);
+            block->ssa = makeUnique<BasicBlock::SSAData>(block);
         }
 
         for (auto& pair : entrypointIndexToArgumentsBlock) {
             unsigned entrypointIndex = pair.key;
             BasicBlock* oldRoot = pair.value;
