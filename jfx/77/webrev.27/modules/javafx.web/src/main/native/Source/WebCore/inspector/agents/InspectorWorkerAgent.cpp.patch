diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorWorkerAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorWorkerAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorWorkerAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorWorkerAgent.cpp
@@ -34,16 +34,18 @@
 
 using namespace Inspector;
 
 InspectorWorkerAgent::InspectorWorkerAgent(PageAgentContext& context)
     : InspectorAgentBase("Worker"_s, context)
-    , m_frontendDispatcher(std::make_unique<Inspector::WorkerFrontendDispatcher>(context.frontendRouter))
+    , m_frontendDispatcher(makeUnique<Inspector::WorkerFrontendDispatcher>(context.frontendRouter))
     , m_backendDispatcher(Inspector::WorkerBackendDispatcher::create(context.backendDispatcher, this))
     , m_page(context.inspectedPage)
 {
 }
 
+InspectorWorkerAgent::~InspectorWorkerAgent() = default;
+
 void InspectorWorkerAgent::didCreateFrontendAndBackend(FrontendRouter*, BackendDispatcher*)
 {
     m_instrumentingAgents.setInspectorWorkerAgent(this);
 }
 
@@ -77,27 +79,27 @@
 
 void InspectorWorkerAgent::initialized(ErrorString& errorString, const String& workerId)
 {
     WorkerInspectorProxy* proxy = m_connectedProxies.get(workerId);
     if (!proxy) {
-        errorString = "Worker not found."_s;
+        errorString = "Missing worker for given workerId"_s;
         return;
     }
 
     proxy->resumeWorkerIfPaused();
 }
 
 void InspectorWorkerAgent::sendMessageToWorker(ErrorString& errorString, const String& workerId, const String& message)
 {
     if (!m_enabled) {
-        errorString = "Worker inspection must be enabled."_s;
+        errorString = "Worker domain must be enabled"_s;
         return;
     }
 
     WorkerInspectorProxy* proxy = m_connectedProxies.get(workerId);
     if (!proxy) {
-        errorString = "Worker not found."_s;
+        errorString = "Missing worker for given workerId"_s;
         return;
     }
 
     proxy->sendMessageToWorkerInspectorController(message);
 }
