diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBRequest.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBRequest.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBRequest.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBRequest.cpp
@@ -46,17 +46,20 @@
 #include "JSDOMConvertSequences.h"
 #include "Logging.h"
 #include "ScriptExecutionContext.h"
 #include "ThreadSafeDataBuffer.h"
 #include <JavaScriptCore/StrongInlines.h>
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/Scope.h>
 #include <wtf/Variant.h>
 
 
 namespace WebCore {
 using namespace JSC;
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(IDBRequest);
+
 Ref<IDBRequest> IDBRequest::create(ScriptExecutionContext& context, IDBObjectStore& objectStore, IDBTransaction& transaction)
 {
     return adoptRef(*new IDBRequest(context, objectStore, transaction));
 }
 
@@ -83,22 +86,22 @@
 IDBRequest::IDBRequest(ScriptExecutionContext& context, IDBClient::IDBConnectionProxy& connectionProxy)
     : IDBActiveDOMObject(&context)
     , m_resourceIdentifier(connectionProxy)
     , m_connectionProxy(connectionProxy)
 {
-    m_result = NullResultType::Empty;
+    m_result = NullResultType::Undefined;
     suspendIfNeeded();
 }
 
 IDBRequest::IDBRequest(ScriptExecutionContext& context, IDBObjectStore& objectStore, IDBTransaction& transaction)
     : IDBActiveDOMObject(&context)
     , m_transaction(&transaction)
     , m_resourceIdentifier(transaction.connectionProxy())
     , m_source(&objectStore)
     , m_connectionProxy(transaction.database().connectionProxy())
 {
-    m_result = NullResultType::Empty;
+    m_result = NullResultType::Undefined;
     suspendIfNeeded();
 }
 
 IDBRequest::IDBRequest(ScriptExecutionContext& context, IDBCursor& cursor, IDBTransaction& transaction)
     : IDBActiveDOMObject(&context)
@@ -111,22 +114,22 @@
 
     WTF::switchOn(cursor.source(),
         [this] (const auto& value) { this->m_source = IDBRequest::Source { value }; }
     );
 
-    m_result = NullResultType::Empty;
+    m_result = NullResultType::Undefined;
     cursor.setRequest(*this);
 }
 
 IDBRequest::IDBRequest(ScriptExecutionContext& context, IDBIndex& index, IDBTransaction& transaction)
     : IDBActiveDOMObject(&context)
     , m_transaction(&transaction)
     , m_resourceIdentifier(transaction.connectionProxy())
     , m_source(&index)
     , m_connectionProxy(transaction.database().connectionProxy())
 {
-    m_result = NullResultType::Empty;
+    m_result = NullResultType::Undefined;
     suspendIfNeeded();
 }
 
 IDBRequest::IDBRequest(ScriptExecutionContext& context, IDBObjectStore& objectStore, IndexedDB::ObjectStoreRecordType type, IDBTransaction& transaction)
     : IDBActiveDOMObject(&context)
@@ -134,18 +137,18 @@
     , m_resourceIdentifier(transaction.connectionProxy())
     , m_source(&objectStore)
     , m_requestedObjectStoreRecordType(type)
     , m_connectionProxy(transaction.database().connectionProxy())
 {
-    m_result = NullResultType::Empty;
+    m_result = NullResultType::Undefined;
     suspendIfNeeded();
 }
 
 IDBRequest::IDBRequest(ScriptExecutionContext& context, IDBIndex& index, IndexedDB::IndexRecordType requestedRecordType, IDBTransaction& transaction)
     : IDBRequest(context, index, transaction)
 {
-    m_result = NullResultType::Empty;
+    m_result = NullResultType::Undefined;
     m_requestedIndexRecordType = requestedRecordType;
 }
 
 IDBRequest::~IDBRequest()
 {
@@ -262,11 +265,11 @@
     return false;
 }
 
 bool IDBRequest::hasPendingActivity() const
 {
-    ASSERT(&originThread() == &Thread::current() || mayBeGCThread());
+    ASSERT(&originThread() == &Thread::current() || Thread::mayBeGCThread());
     return !m_contextStopped && m_hasPendingActivity;
 }
 
 void IDBRequest::stop()
 {
@@ -275,10 +278,12 @@
 
     cancelForStop();
 
     removeAllEventListeners();
 
+    clearWrappers();
+
     m_contextStopped = true;
 }
 
 void IDBRequest::cancelForStop()
 {
@@ -302,19 +307,20 @@
     ASSERT(&originThread() == &Thread::current());
     ASSERT(m_hasPendingActivity);
     ASSERT(!m_contextStopped);
 
     auto protectedThis = makeRef(*this);
+    m_dispatchingEvent = true;
 
     if (event.type() != eventNames().blockedEvent)
         m_readyState = ReadyState::Done;
 
     Vector<EventTarget*> targets { this };
 
     if (&event == m_openDatabaseSuccessEvent)
         m_openDatabaseSuccessEvent = nullptr;
-    else if (m_transaction && !m_transaction->isFinished())
+    else if (m_transaction && !m_transaction->didDispatchAbortOrCommit())
         targets = { this, m_transaction.get(), &m_transaction->database() };
 
     m_hasPendingActivity = false;
 
     {
@@ -325,29 +331,39 @@
     // Dispatching the event might have set the pending activity flag back to true, suggesting the request will be reused.
     // We might also re-use the request if this event was the upgradeneeded event for an IDBOpenDBRequest.
     if (!m_hasPendingActivity)
         m_hasPendingActivity = isOpenDBRequest() && (event.type() == eventNames().upgradeneededEvent || event.type() == eventNames().blockedEvent);
 
+    m_dispatchingEvent = false;
+    if (!m_transaction)
+        return;
+
     // The request should only remain in the transaction's request list if it represents a pending cursor operation, or this is an open request that was blocked.
-    if (m_transaction && !m_pendingCursor && event.type() != eventNames().blockedEvent)
+    if (!m_pendingCursor && event.type() != eventNames().blockedEvent)
         m_transaction->removeRequest(*this);
 
-    if (!event.defaultPrevented() && event.type() == eventNames().errorEvent && m_transaction && !m_transaction->isFinishedOrFinishing()) {
+    if (m_hasUncaughtException)
+        m_transaction->abortDueToFailedRequest(DOMException::create(AbortError, "IDBTransaction will abort due to uncaught exception in an event handler"_s));
+    else if (!event.defaultPrevented() && event.type() == eventNames().errorEvent && !m_transaction->isFinishedOrFinishing()) {
         ASSERT(m_domError);
         m_transaction->abortDueToFailedRequest(*m_domError);
     }
 
-    if (m_transaction)
-        m_transaction->finishedDispatchEventForRequest(*this);
+    m_transaction->finishedDispatchEventForRequest(*this);
 }
 
 void IDBRequest::uncaughtExceptionInEventHandler()
 {
     LOG(IndexedDB, "IDBRequest::uncaughtExceptionInEventHandler");
 
     ASSERT(&originThread() == &Thread::current());
 
+    if (m_dispatchingEvent) {
+        ASSERT(!m_hasUncaughtException);
+        m_hasUncaughtException = true;
+        return;
+    }
     if (m_transaction && m_idbError.code() != AbortError)
         m_transaction->abortDueToFailedRequest(DOMException::create(AbortError, "IDBTransaction will abort due to uncaught exception in an event handler"_s));
 }
 
 void IDBRequest::setResult(const IDBKeyData& keyData)
@@ -356,14 +372,10 @@
 
     auto* context = scriptExecutionContext();
     if (!context)
         return;
 
-    auto* state = context->execState();
-    if (!state)
-        return;
-
     VM& vm = context->vm();
     JSLockHolder lock(vm);
     m_result = keyData;
     m_resultWrapper = { };
 }
@@ -374,35 +386,27 @@
 
     auto* context = scriptExecutionContext();
     if (!context)
         return;
 
-    auto* state = context->execState();
-    if (!state)
-        return;
-
     VM& vm = context->vm();
     JSLockHolder lock(vm);
     m_result = keyDatas;
     m_resultWrapper = { };
 }
 
-void IDBRequest::setResult(const Vector<IDBValue>& values)
+void IDBRequest::setResult(const IDBGetAllResult& result)
 {
     ASSERT(&originThread() == &Thread::current());
 
     auto* context = scriptExecutionContext();
     if (!context)
         return;
 
-    auto* state = context->execState();
-    if (!state)
-        return;
-
     VM& vm = context->vm();
     JSLockHolder lock(vm);
-    m_result = values;
+    m_result = result;
     m_resultWrapper = { };
 }
 
 void IDBRequest::setResult(uint64_t number)
 {
@@ -410,38 +414,42 @@
 
     auto* context = scriptExecutionContext();
     if (!context)
         return;
 
+    VM& vm = context->vm();
+    JSLockHolder lock(vm);
     m_result = number;
     m_resultWrapper = { };
 }
 
-void IDBRequest::setResultToStructuredClone(const IDBValue& value)
+void IDBRequest::setResultToStructuredClone(const IDBGetResult& result)
 {
     ASSERT(&originThread() == &Thread::current());
 
     LOG(IndexedDB, "IDBRequest::setResultToStructuredClone");
 
     auto* context = scriptExecutionContext();
     if (!context)
         return;
 
-    auto* state = context->execState();
-    if (!state)
-        return;
-
     VM& vm = context->vm();
     JSLockHolder lock(vm);
-    m_result = value;
+    m_result = result;
     m_resultWrapper = { };
 }
 
 void IDBRequest::setResultToUndefined()
 {
     ASSERT(&originThread() == &Thread::current());
 
+    auto* context = scriptExecutionContext();
+    if (!context)
+        return;
+
+    VM& vm = context->vm();
+    JSLockHolder lock(vm);
     m_result = NullResultType::Undefined;
     m_resultWrapper = { };
 }
 
 IDBCursor* IDBRequest::resultCursor()
@@ -464,10 +472,20 @@
     ASSERT(&cursor == resultCursor());
 
     m_pendingCursor = &cursor;
     m_hasPendingActivity = true;
     m_result = NullResultType::Empty;
+
+    auto* context = scriptExecutionContext();
+    if (!context)
+        return;
+
+    VM& vm = context->vm();
+    JSLockHolder lock(vm);
+
+    if (m_resultWrapper)
+        m_cursorWrapper = m_resultWrapper;
     m_resultWrapper = { };
     m_readyState = ReadyState::Pending;
     m_domError = nullptr;
     m_idbError = IDBError { };
 }
@@ -475,15 +493,23 @@
 void IDBRequest::didOpenOrIterateCursor(const IDBResultData& resultData)
 {
     ASSERT(&originThread() == &Thread::current());
     ASSERT(m_pendingCursor);
 
+    auto* context = scriptExecutionContext();
+    if (!context)
+        return;
+
+    VM& vm = context->vm();
+    JSLockHolder lock(vm);
+
     m_result = NullResultType::Empty;
     m_resultWrapper = { };
 
     if (resultData.type() == IDBResultType::IterateCursorSuccess || resultData.type() == IDBResultType::OpenCursorSuccess) {
-        m_pendingCursor->setGetResult(*this, resultData.getResult());
+        if (m_pendingCursor->setGetResult(*this, resultData.getResult()) && m_cursorWrapper)
+            m_resultWrapper = m_cursorWrapper;
         if (resultData.getResult().isDefined())
             m_result = m_pendingCursor;
     }
 
     m_pendingCursor = nullptr;
@@ -524,12 +550,37 @@
 
 void IDBRequest::setResult(Ref<IDBDatabase>&& database)
 {
     ASSERT(&originThread() == &Thread::current());
 
+    auto* context = scriptExecutionContext();
+    if (!context)
+        return;
+
+    VM& vm = context->vm();
+    JSLockHolder lock(vm);
+
     m_result = RefPtr<IDBDatabase> { WTFMove(database) };
     m_resultWrapper = { };
 }
 
+void IDBRequest::clearWrappers()
+{
+    auto* context = scriptExecutionContext();
+    if (!context)
+        return;
+    VM& vm = context->vm();
+    JSLockHolder lock(vm);
+
+    m_resultWrapper.clear();
+    m_cursorWrapper.clear();
+
+    WTF::switchOn(m_result,
+        [] (RefPtr<IDBCursor>& cursor) { cursor->clearWrappers(); },
+        [] (const auto&) { }
+    );
+}
+
+
 } // namespace WebCore
 
 #endif // ENABLE(INDEXED_DATABASE)
