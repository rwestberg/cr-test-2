diff a/modules/javafx.web/src/main/native/Source/WebCore/editing/Editing.cpp b/modules/javafx.web/src/main/native/Source/WebCore/editing/Editing.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/editing/Editing.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/editing/Editing.cpp
@@ -418,19 +418,19 @@
             previousCharacterWasSpace = true;
         }
         if (character == selectedWhitespaceCharacter)
             continue;
         rebalancedString.reserveCapacity(length);
-        rebalancedString.append(string, rebalancedString.length(), i - rebalancedString.length());
+        rebalancedString.appendSubstring(string, rebalancedString.length(), i - rebalancedString.length());
         rebalancedString.append(selectedWhitespaceCharacter);
     }
 
     if (rebalancedString.isEmpty())
         return string;
 
     rebalancedString.reserveCapacity(length);
-    rebalancedString.append(string, rebalancedString.length(), length - rebalancedString.length());
+    rebalancedString.appendSubstring(string, rebalancedString.length(), length - rebalancedString.length());
     return rebalancedString.toString();
 }
 
 bool isTableStructureNode(const Node* node)
 {
@@ -886,11 +886,11 @@
 Ref<HTMLElement> createHTMLElement(Document& document, const QualifiedName& name)
 {
     return HTMLElementFactory::createElement(name, document);
 }
 
-Ref<HTMLElement> createHTMLElement(Document& document, const AtomicString& tagName)
+Ref<HTMLElement> createHTMLElement(Document& document, const AtomString& tagName)
 {
     return createHTMLElement(document, QualifiedName(nullAtom(), tagName, xhtmlNamespaceURI));
 }
 
 bool isTabSpanNode(const Node* node)
@@ -915,11 +915,11 @@
     spanElement->setAttributeWithoutSynchronization(classAttr, AppleTabSpanClass);
     spanElement->setAttribute(styleAttr, "white-space:pre");
 
     spanElement->appendChild(tabTextNode);
 
-    return WTFMove(spanElement);
+    return spanElement;
 }
 
 Ref<Element> createTabSpanElement(Document& document, const String& tabText)
 {
     return createTabSpanElement(document, document.createTextNode(tabText));
@@ -1121,13 +1121,13 @@
     range->selectNodeContents(node);
     CharacterIterator it(range.get());
     it.advance(index - 1);
 
     if (!it.atEnd() && it.text()[0] == '\n') {
-        // FIXME: workaround for collapsed range (where only start position is correct) emitted for some emitted newlines (see rdar://5192593)
-        auto range = it.range();
-        if (range->startPosition() == range->endPosition()) {
+        // FIXME: workaround for collapsed range (where only start position is correct) emitted for some emitted newlines.
+        auto iteratorRange = it.range();
+        if (iteratorRange->startPosition() == iteratorRange->endPosition()) {
             it.advance(1);
             if (!it.atEnd())
                 return VisiblePosition(it.range()->startPosition());
         }
     }
