diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ObjectAllocationProfile.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ObjectAllocationProfile.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ObjectAllocationProfile.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ObjectAllocationProfile.h
@@ -33,21 +33,18 @@
 
 namespace JSC {
 
 class FunctionRareData;
 
-class ObjectAllocationProfile {
+template<typename Derived>
+class ObjectAllocationProfileBase {
     friend class LLIntOffsetsExtractor;
 public:
-    static ptrdiff_t offsetOfAllocator() { return OBJECT_OFFSETOF(ObjectAllocationProfile, m_allocator); }
-    static ptrdiff_t offsetOfStructure() { return OBJECT_OFFSETOF(ObjectAllocationProfile, m_structure); }
-    static ptrdiff_t offsetOfInlineCapacity() { return OBJECT_OFFSETOF(ObjectAllocationProfile, m_inlineCapacity); }
+    static ptrdiff_t offsetOfAllocator() { return OBJECT_OFFSETOF(ObjectAllocationProfileBase, m_allocator); }
+    static ptrdiff_t offsetOfStructure() { return OBJECT_OFFSETOF(ObjectAllocationProfileBase, m_structure); }
 
-    ObjectAllocationProfile()
-        : m_inlineCapacity(0)
-    {
-    }
+    ObjectAllocationProfileBase() = default;
 
     bool isNull() { return !m_structure; }
 
     void initializeProfile(VM&, JSGlobalObject*, JSCell* owner, JSObject* prototype, unsigned inferredInlineCapacity, JSFunction* constructor = nullptr, FunctionRareData* = nullptr);
 
@@ -56,39 +53,78 @@
         Structure* structure = m_structure.get();
         // Ensure that if we see the structure, it has been properly created
         WTF::loadLoadFence();
         return structure;
     }
+
+protected:
+    void clear()
+    {
+        m_allocator = Allocator();
+        m_structure.clear();
+        ASSERT(isNull());
+    }
+
+    void visitAggregate(SlotVisitor& visitor)
+    {
+        visitor.append(m_structure);
+    }
+
+private:
+    unsigned possibleDefaultPropertyCount(VM&, JSObject* prototype);
+
+    Allocator m_allocator; // Precomputed to make things easier for generated code.
+    WriteBarrier<Structure> m_structure;
+};
+
+class ObjectAllocationProfile : public ObjectAllocationProfileBase<ObjectAllocationProfile> {
+public:
+    using Base = ObjectAllocationProfileBase<ObjectAllocationProfile>;
+
+    ObjectAllocationProfile() = default;
+
+    using Base::clear;
+    using Base::visitAggregate;
+
+    void setPrototype(VM&, JSCell*, JSObject*) { }
+};
+
+class ObjectAllocationProfileWithPrototype : public ObjectAllocationProfileBase<ObjectAllocationProfileWithPrototype> {
+public:
+    using Base = ObjectAllocationProfileBase<ObjectAllocationProfileWithPrototype>;
+
+    static ptrdiff_t offsetOfPrototype() { return OBJECT_OFFSETOF(ObjectAllocationProfileWithPrototype, m_prototype); }
+
+    ObjectAllocationProfileWithPrototype() = default;
+
     JSObject* prototype()
     {
         JSObject* prototype = m_prototype.get();
         WTF::loadLoadFence();
         return prototype;
     }
-    unsigned inlineCapacity() { return m_inlineCapacity; }
-
 
     void clear()
     {
-        m_allocator = Allocator();
-        m_structure.clear();
+        Base::clear();
         m_prototype.clear();
-        m_inlineCapacity = 0;
         ASSERT(isNull());
     }
 
     void visitAggregate(SlotVisitor& visitor)
     {
-        visitor.append(m_structure);
+        Base::visitAggregate(visitor);
         visitor.append(m_prototype);
     }
 
-private:
-    unsigned possibleDefaultPropertyCount(VM&, JSObject* prototype);
+    void setPrototype(VM& vm, JSCell* owner, JSObject* object)
+    {
+        m_prototype.set(vm, owner, object);
+    }
 
-    Allocator m_allocator; // Precomputed to make things easier for generated code.
-    WriteBarrier<Structure> m_structure;
+private:
     WriteBarrier<JSObject> m_prototype;
-    unsigned m_inlineCapacity;
 };
 
+
+
 } // namespace JSC
