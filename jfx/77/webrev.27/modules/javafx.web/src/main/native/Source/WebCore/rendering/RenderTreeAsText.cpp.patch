diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderTreeAsText.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderTreeAsText.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderTreeAsText.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderTreeAsText.cpp
@@ -33,10 +33,11 @@
 #include "FrameView.h"
 #include "HTMLElement.h"
 #include "HTMLNames.h"
 #include "HTMLSpanElement.h"
 #include "InlineTextBox.h"
+#include "LineLayoutInterfaceTextBoxes.h"
 #include "Logging.h"
 #include "PrintContext.h"
 #include "PseudoElement.h"
 #include "RenderBlockFlow.h"
 #include "RenderCounter.h"
@@ -61,11 +62,10 @@
 #include "RenderTableCell.h"
 #include "RenderView.h"
 #include "RenderWidget.h"
 #include "SVGRenderTreeAsText.h"
 #include "ShadowRoot.h"
-#include "SimpleLineLayoutResolver.h"
 #include "StyleProperties.h"
 #include <wtf/HexNumber.h>
 #include <wtf/Vector.h>
 #include <wtf/text/TextStream.h>
 #include <wtf/unicode/CharacterNames.h>
@@ -76,11 +76,11 @@
 
 namespace WebCore {
 
 using namespace HTMLNames;
 
-static void writeLayers(TextStream&, const RenderLayer& rootLayer, RenderLayer&, const LayoutRect& paintDirtyRect, RenderAsTextBehavior = RenderAsTextBehaviorNormal);
+static void writeLayers(TextStream&, const RenderLayer& rootLayer, RenderLayer&, const LayoutRect& paintDirtyRect, OptionSet<RenderAsTextFlag>);
 
 static void printBorderStyle(TextStream& ts, const BorderStyle borderStyle)
 {
     switch (borderStyle) {
     case BorderStyle::None:
@@ -167,15 +167,15 @@
     }
     result.append('"');
     return result.toString();
 }
 
-void RenderTreeAsText::writeRenderObject(TextStream& ts, const RenderObject& o, RenderAsTextBehavior behavior)
+void RenderTreeAsText::writeRenderObject(TextStream& ts, const RenderObject& o, OptionSet<RenderAsTextFlag> behavior)
 {
     ts << o.renderName();
 
-    if (behavior & RenderAsTextShowAddresses)
+    if (behavior.contains(RenderAsTextFlag::ShowAddresses))
         ts << " " << static_cast<const void*>(&o);
 
     if (o.style().zIndex())
         ts << " zI: " << o.style().zIndex();
 
@@ -200,11 +200,12 @@
     if (is<RenderText>(o)) {
         // FIXME: Would be better to dump the bounding box x and y rather than the first run's x and y, but that would involve updating
         // many test results.
         const RenderText& text = downcast<RenderText>(o);
         r = IntRect(text.firstRunLocation(), text.linesBoundingBox().size());
-        if (!text.firstTextBox() && !text.simpleLineLayout())
+        auto textBoxes = LineLayoutInterface::textBoxes(text);
+        if (textBoxes.begin() == textBoxes.end())
             adjustForTableCells = false;
     } else if (o.isBR()) {
         const RenderLineBreak& br = downcast<RenderLineBreak>(o);
         IntRect linesBox = br.linesBoundingBox();
         r = IntRect(linesBox.x(), linesBox.y(), linesBox.width(), linesBox.height());
@@ -407,13 +408,13 @@
     }
 
     writeDebugInfo(ts, o, behavior);
 }
 
-void writeDebugInfo(TextStream& ts, const RenderObject& object, RenderAsTextBehavior behavior)
+void writeDebugInfo(TextStream& ts, const RenderObject& object, OptionSet<RenderAsTextFlag> behavior)
 {
-    if (behavior & RenderAsTextShowIDAndClass) {
+    if (behavior.contains(RenderAsTextFlag::ShowIDAndClass)) {
         if (Element* element = is<Element>(object.node()) ? downcast<Element>(object.node()) : nullptr) {
             if (element->hasID())
                 ts << " id=\"" + element->getIdAttribute() + "\"";
 
             if (element->hasClass()) {
@@ -426,11 +427,11 @@
                 ts << "\"";
             }
         }
     }
 
-    if (behavior & RenderAsTextShowLayoutState) {
+    if (behavior.contains(RenderAsTextFlag::ShowLayoutState)) {
         bool needsLayout = object.selfNeedsLayout() || object.needsPositionedMovementLayout() || object.posChildNeedsLayout() || object.normalChildNeedsLayout();
         if (needsLayout)
             ts << " (needs layout:";
 
         bool havePrevious = false;
@@ -461,11 +462,11 @@
 
         if (needsLayout)
             ts << ")";
     }
 
-    if (behavior & RenderAsTextShowOverflow && is<RenderBox>(object)) {
+    if (behavior.contains(RenderAsTextFlag::ShowOverflow) && is<RenderBox>(object)) {
         const auto& box = downcast<RenderBox>(object);
         if (box.hasRenderOverflow()) {
             LayoutRect layoutOverflow = box.layoutOverflowRect();
             ts << " (layout overflow " << layoutOverflow.x().toInt() << "," << layoutOverflow.y().toInt() << " " << layoutOverflow.width().toInt() << "x" << layoutOverflow.height().toInt() << ")";
 
@@ -475,53 +476,39 @@
             }
         }
     }
 }
 
-static void writeTextRun(TextStream& ts, const RenderText& o, const InlineTextBox& run)
+static void writeTextBox(TextStream& ts, const RenderText& o, const LineLayoutInterface::TextBox& textBox)
 {
-    // FIXME: For now use an "enclosingIntRect" model for x, y and logicalWidth, although this makes it harder
-    // to detect any changes caused by the conversion to floating point. :(
-    int x = run.x();
-    int y = run.y();
-    int logicalWidth = ceilf(run.left() + run.logicalWidth()) - x;
+    auto rect = textBox.rect();
+    auto logicalRect = textBox.logicalRect();
+
+    int x = rect.x();
+    int y = rect.y();
+
+    // FIXME: Mixing logical and physical here doesn't make sense.
+    int logicalWidth = ceilf(rect.x() + logicalRect.width()) - x;
 
     // FIXME: Table cell adjustment is temporary until results can be updated.
     if (is<RenderTableCell>(*o.containingBlock()))
         y -= floorToInt(downcast<RenderTableCell>(*o.containingBlock()).intrinsicPaddingBefore());
 
     ts << "text run at (" << x << "," << y << ") width " << logicalWidth;
-    if (!run.isLeftToRightDirection() || run.dirOverride()) {
-        ts << (!run.isLeftToRightDirection() ? " RTL" : " LTR");
-        if (run.dirOverride())
+    if (!textBox.isLeftToRightDirection() || textBox.dirOverride()) {
+        ts << (!textBox.isLeftToRightDirection() ? " RTL" : " LTR");
+        if (textBox.dirOverride())
             ts << " override";
     }
     ts << ": "
-        << quoteAndEscapeNonPrintables(String(o.text()).substring(run.start(), run.len()));
-    if (run.hasHyphen())
+        << quoteAndEscapeNonPrintables(textBox.text());
+    if (textBox.hasHyphen())
         ts << " + hyphen string " << quoteAndEscapeNonPrintables(o.style().hyphenString().string());
     ts << "\n";
 }
 
-static void writeSimpleLine(TextStream& ts, const RenderText& renderText, const SimpleLineLayout::RunResolver::Run& run)
-{
-    auto rect = run.rect();
-    int x = rect.x();
-    int y = rect.y();
-    int logicalWidth = ceilf(rect.x() + rect.width()) - x;
-
-    if (is<RenderTableCell>(*renderText.containingBlock()))
-        y -= floorToInt(downcast<RenderTableCell>(*renderText.containingBlock()).intrinsicPaddingBefore());
-
-    ts << "text run at (" << x << "," << y << ") width " << logicalWidth;
-    ts << ": " << quoteAndEscapeNonPrintables(run.text());
-    if (run.hasHyphen())
-        ts << " + hyphen string " << quoteAndEscapeNonPrintables(renderText.style().hyphenString().string());
-    ts << "\n";
-}
-
-void write(TextStream& ts, const RenderObject& o, RenderAsTextBehavior behavior)
+void write(TextStream& ts, const RenderObject& o, OptionSet<RenderAsTextFlag> behavior)
 {
     if (is<RenderSVGShape>(o)) {
         write(ts, downcast<RenderSVGShape>(o), behavior);
         return;
     }
@@ -561,24 +548,14 @@
 
     TextStream::IndentScope indentScope(ts);
 
     if (is<RenderText>(o)) {
         auto& text = downcast<RenderText>(o);
-        if (auto layout = text.simpleLineLayout()) {
-            ASSERT(!text.firstTextBox());
-            auto resolver = runResolver(downcast<RenderBlockFlow>(*text.parent()), *layout);
-            for (auto run : resolver.rangeForRenderer(text)) {
-                ts << indent;
-                writeSimpleLine(ts, text, run);
-            }
-        } else {
-            for (auto* box = text.firstTextBox(); box; box = box->nextTextBox()) {
-                ts << indent;
-                writeTextRun(ts, text, *box);
-            }
+        for (auto textBox : LineLayoutInterface::textBoxes(text)) {
+            ts << indent;
+            writeTextBox(ts, text, textBox);
         }
-
     } else {
         for (auto& child : childrenOfType<RenderObject>(downcast<RenderElement>(o))) {
             if (child.hasLayer())
                 continue;
             write(ts, child, behavior);
@@ -588,11 +565,11 @@
     if (is<RenderWidget>(o)) {
         Widget* widget = downcast<RenderWidget>(o).widget();
         if (is<FrameView>(widget)) {
             FrameView& view = downcast<FrameView>(*widget);
             if (RenderView* root = view.frame().contentRenderer()) {
-                if (!(behavior & RenderAsTextDontUpdateLayout))
+                if (!(behavior.contains(RenderAsTextFlag::DontUpdateLayout)))
                     view.layoutContext().layout();
                 if (RenderLayer* layer = root->layer())
                     writeLayers(ts, *layer, *layer, layer->rect(), behavior);
             }
         }
@@ -604,19 +581,19 @@
     LayerPaintPhaseBackground = -1,
     LayerPaintPhaseForeground = 1
 };
 
 static void writeLayer(TextStream& ts, const RenderLayer& layer, const LayoutRect& layerBounds, const LayoutRect& backgroundClipRect, const LayoutRect& clipRect,
-    LayerPaintPhase paintPhase = LayerPaintPhaseAll, RenderAsTextBehavior behavior = RenderAsTextBehaviorNormal)
+    LayerPaintPhase paintPhase = LayerPaintPhaseAll, OptionSet<RenderAsTextFlag> behavior = { })
 {
     IntRect adjustedLayoutBounds = snappedIntRect(layerBounds);
     IntRect adjustedBackgroundClipRect = snappedIntRect(backgroundClipRect);
     IntRect adjustedClipRect = snappedIntRect(clipRect);
 
     ts << indent << "layer ";
 
-    if (behavior & RenderAsTextShowAddresses)
+    if (behavior.contains(RenderAsTextFlag::ShowAddresses))
         ts << static_cast<const void*>(&layer) << " ";
 
     ts << adjustedLayoutBounds;
 
     if (!adjustedLayoutBounds.isEmpty()) {
@@ -648,15 +625,16 @@
     if (paintPhase == LayerPaintPhaseBackground)
         ts << " layerType: background only";
     else if (paintPhase == LayerPaintPhaseForeground)
         ts << " layerType: foreground only";
 
-    if (behavior & RenderAsTextShowCompositedLayers) {
+    if (behavior.contains(RenderAsTextFlag::ShowCompositedLayers)) {
         if (layer.isComposited()) {
             ts << " (composited, bounds=" << layer.backing()->compositedBounds() << ", drawsContent=" << layer.backing()->graphicsLayer()->drawsContent()
                 << ", paints into ancestor=" << layer.backing()->paintsIntoCompositedAncestor() << ")";
-        }
+        } else if (layer.paintsIntoProvidedBacking())
+            ts << " (shared backing of " << layer.backingProviderLayer() << ")";
     }
 
 #if ENABLE(CSS_COMPOSITING)
     if (layer.isolatesBlending())
         ts << " isolatesBlending";
@@ -665,11 +643,11 @@
 #endif
 
     ts << "\n";
 }
 
-static void writeLayerRenderers(TextStream& ts, const RenderLayer& layer, LayerPaintPhase paintPhase, RenderAsTextBehavior behavior)
+static void writeLayerRenderers(TextStream& ts, const RenderLayer& layer, LayerPaintPhase paintPhase, OptionSet<RenderAsTextFlag> behavior)
 {
     if (paintPhase != LayerPaintPhaseBackground) {
         TextStream::IndentScope indentScope(ts);
         write(ts, layer.renderer(), behavior);
     }
@@ -679,11 +657,11 @@
 {
     LayoutRect overflowRect = box->layoutOverflowRect();
     return LayoutSize(overflowRect.maxX(), overflowRect.maxY());
 }
 
-static void writeLayers(TextStream& ts, const RenderLayer& rootLayer, RenderLayer& layer, const LayoutRect& paintRect, RenderAsTextBehavior behavior)
+static void writeLayers(TextStream& ts, const RenderLayer& rootLayer, RenderLayer& layer, const LayoutRect& paintRect, OptionSet<RenderAsTextFlag> behavior)
 {
     // FIXME: Apply overflow to the root layer to not break every test. Complete hack. Sigh.
     LayoutRect paintDirtyRect(paintRect);
     if (&rootLayer == &layer) {
         paintDirtyRect.setWidth(std::max<LayoutUnit>(paintDirtyRect.width(), rootLayer.renderBox()->layoutOverflowRect().maxX()));
@@ -700,35 +678,35 @@
 
     // Ensure our lists are up-to-date.
     layer.updateLayerListsIfNeeded();
     layer.updateDescendantDependentFlags();
 
-    bool shouldPaint = (behavior & RenderAsTextShowAllLayers) ? true : layer.intersectsDamageRect(layerBounds, damageRect.rect(), &rootLayer, layer.offsetFromAncestor(&rootLayer));
+    bool shouldPaint = (behavior.contains(RenderAsTextFlag::ShowAllLayers)) ? true : layer.intersectsDamageRect(layerBounds, damageRect.rect(), &rootLayer, layer.offsetFromAncestor(&rootLayer));
     auto negativeZOrderLayers = layer.negativeZOrderLayers();
     bool paintsBackgroundSeparately = negativeZOrderLayers.size() > 0;
     if (shouldPaint && paintsBackgroundSeparately) {
         writeLayer(ts, layer, layerBounds, damageRect.rect(), clipRectToApply.rect(), LayerPaintPhaseBackground, behavior);
         writeLayerRenderers(ts, layer, LayerPaintPhaseBackground, behavior);
     }
 
     if (negativeZOrderLayers.size()) {
-        if (behavior & RenderAsTextShowLayerNesting) {
-            ts << indent << " negative z-order list(" << negativeZOrderLayers.size() << ")\n";
+        if (behavior.contains(RenderAsTextFlag::ShowLayerNesting)) {
+            ts << indent << " negative z-order list (" << negativeZOrderLayers.size() << ")\n";
             ts.increaseIndent();
         }
 
         for (auto* currLayer : negativeZOrderLayers)
             writeLayers(ts, rootLayer, *currLayer, paintDirtyRect, behavior);
 
-        if (behavior & RenderAsTextShowLayerNesting)
+        if (behavior.contains(RenderAsTextFlag::ShowLayerNesting))
             ts.decreaseIndent();
     }
 
     if (shouldPaint) {
         writeLayer(ts, layer, layerBounds, damageRect.rect(), clipRectToApply.rect(), paintsBackgroundSeparately ? LayerPaintPhaseForeground : LayerPaintPhaseAll, behavior);
 
-        if (behavior & RenderAsTextShowLayerFragments) {
+        if (behavior.contains(RenderAsTextFlag::ShowLayerFragments)) {
             LayerFragments layerFragments;
             layer.collectFragments(layerFragments, &rootLayer, paintDirtyRect, RenderLayer::PaginationInclusionMode::ExcludeCompositedPaginatedLayers, TemporaryClipRects, IgnoreOverlayScrollbarSize, RespectOverflowClip, offsetFromRoot);
 
             if (layerFragments.size() > 1) {
                 TextStream::IndentScope indentScope(ts, 2);
@@ -742,36 +720,36 @@
         writeLayerRenderers(ts, layer, paintsBackgroundSeparately ? LayerPaintPhaseForeground : LayerPaintPhaseAll, behavior);
     }
 
     auto normalFlowLayers = layer.normalFlowLayers();
     if (normalFlowLayers.size()) {
-        if (behavior & RenderAsTextShowLayerNesting) {
-            ts << indent << " normal flow list(" << normalFlowLayers.size() << ")\n";
+        if (behavior.contains(RenderAsTextFlag::ShowLayerNesting)) {
+            ts << indent << " normal flow list (" << normalFlowLayers.size() << ")\n";
             ts.increaseIndent();
         }
 
         for (auto* currLayer : normalFlowLayers)
             writeLayers(ts, rootLayer, *currLayer, paintDirtyRect, behavior);
 
-        if (behavior & RenderAsTextShowLayerNesting)
+        if (behavior.contains(RenderAsTextFlag::ShowLayerNesting))
             ts.decreaseIndent();
     }
 
     auto positiveZOrderLayers = layer.positiveZOrderLayers();
     if (positiveZOrderLayers.size()) {
         size_t layerCount = positiveZOrderLayers.size();
 
         if (layerCount) {
-            if (behavior & RenderAsTextShowLayerNesting) {
-                ts << indent << " positive z-order list(" << layerCount << ")\n";
+            if (behavior.contains(RenderAsTextFlag::ShowLayerNesting)) {
+                ts << indent << " positive z-order list (" << layerCount << ")\n";
                 ts.increaseIndent();
             }
 
             for (auto* currLayer : positiveZOrderLayers)
                 writeLayers(ts, rootLayer, *currLayer, paintDirtyRect, behavior);
 
-            if (behavior & RenderAsTextShowLayerNesting)
+            if (behavior.contains(RenderAsTextFlag::ShowLayerNesting))
                 ts.decreaseIndent();
         }
     }
 }
 
@@ -827,11 +805,11 @@
     } else if (selection.isRange())
         ts << "selection start: position " << selection.start().deprecatedEditingOffset() << " of " << nodePosition(selection.start().deprecatedNode()) << "\n"
            << "selection end:   position " << selection.end().deprecatedEditingOffset() << " of " << nodePosition(selection.end().deprecatedNode()) << "\n";
 }
 
-static String externalRepresentation(RenderBox& renderer, RenderAsTextBehavior behavior)
+static String externalRepresentation(RenderBox& renderer, OptionSet<RenderAsTextFlag> behavior)
 {
     TextStream ts(TextStream::LineMode::MultipleLine, TextStream::Formatting::SVGStyleRect | TextStream::Formatting::LayoutUnitsAsIntegers);
     if (!renderer.hasLayer())
         return ts.release();
 
@@ -851,44 +829,44 @@
         if (auto* document = subframe->document())
             document->updateLayoutIgnorePendingStylesheets();
     }
 }
 
-String externalRepresentation(Frame* frame, RenderAsTextBehavior behavior)
+String externalRepresentation(Frame* frame, OptionSet<RenderAsTextFlag> behavior)
 {
     ASSERT(frame);
     ASSERT(frame->document());
 
-    if (!(behavior & RenderAsTextDontUpdateLayout))
+    if (!(behavior.contains(RenderAsTextFlag::DontUpdateLayout)))
         updateLayoutIgnoringPendingStylesheetsIncludingSubframes(*frame->document());
 
     auto* renderer = frame->contentRenderer();
     if (!renderer)
         return String();
 
     PrintContext printContext(frame);
-    if (behavior & RenderAsTextPrintingMode)
+    if (behavior.contains(RenderAsTextFlag::PrintingMode))
         printContext.begin(renderer->width());
 
     return externalRepresentation(*renderer, behavior);
 }
 
-String externalRepresentation(Element* element, RenderAsTextBehavior behavior)
+String externalRepresentation(Element* element, OptionSet<RenderAsTextFlag> behavior)
 {
     ASSERT(element);
 
     // This function doesn't support printing mode.
-    ASSERT(!(behavior & RenderAsTextPrintingMode));
+    ASSERT(!(behavior.contains(RenderAsTextFlag::PrintingMode)));
 
-    if (!(behavior & RenderAsTextDontUpdateLayout))
+    if (!(behavior.contains(RenderAsTextFlag::DontUpdateLayout)))
         updateLayoutIgnoringPendingStylesheetsIncludingSubframes(element->document());
 
     auto* renderer = element->renderer();
     if (!is<RenderBox>(renderer))
         return String();
 
-    return externalRepresentation(downcast<RenderBox>(*renderer), behavior | RenderAsTextShowAllLayers);
+    return externalRepresentation(downcast<RenderBox>(*renderer), behavior | RenderAsTextFlag::ShowAllLayers);
 }
 
 static void writeCounterValuesFromChildren(TextStream& stream, const RenderElement* parent, bool& isFirstCounter)
 {
     if (!parent)
