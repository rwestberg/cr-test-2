diff a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLPreloadScanner.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLPreloadScanner.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLPreloadScanner.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLPreloadScanner.cpp
@@ -49,11 +49,11 @@
 
 using namespace HTMLNames;
 
 TokenPreloadScanner::TagId TokenPreloadScanner::tagIdFor(const HTMLToken::DataVector& data)
 {
-    AtomicString tagName(data);
+    AtomString tagName(data);
     if (tagName == imgTag)
         return TagId::Img;
     if (tagName == inputTag)
         return TagId::Input;
     if (tagName == linkTag)
@@ -118,11 +118,11 @@
         ASSERT(isMainThread());
         if (m_tagId >= TagId::Unknown)
             return;
 
         for (auto& attribute : attributes) {
-            AtomicString attributeName(attribute.name);
+            AtomString attributeName(attribute.name);
             String attributeValue = StringImpl::create8BitIfPossible(attribute.value);
             processAttribute(attributeName, attributeValue, document, pictureState);
         }
 
         if (m_tagId == TagId::Source && !pictureState.isEmpty() && !pictureState.last() && m_mediaMatched && m_typeMatched && !m_srcSetAttribute.isEmpty()) {
@@ -159,39 +159,39 @@
             return nullptr;
 
         if (!LinkLoader::isSupportedType(type.value(), m_typeAttribute))
             return nullptr;
 
-        auto request = std::make_unique<PreloadRequest>(initiatorFor(m_tagId), m_urlToLoad, predictedBaseURL, type.value(), m_mediaAttribute, m_moduleScript);
+        auto request = makeUnique<PreloadRequest>(initiatorFor(m_tagId), m_urlToLoad, predictedBaseURL, type.value(), m_mediaAttribute, m_moduleScript, m_referrerPolicy);
         request->setCrossOriginMode(m_crossOriginMode);
         request->setNonce(m_nonceAttribute);
 
         // According to the spec, the module tag ignores the "charset" attribute as the same to the worker's
         // importScript. But WebKit supports the "charset" for importScript intentionally. So to be consistent,
         // even for the module tags, we handle the "charset" attribute.
         request->setCharset(charset());
         return request;
     }
 
-    static bool match(const AtomicString& name, const QualifiedName& qName)
+    static bool match(const AtomString& name, const QualifiedName& qName)
     {
         ASSERT(isMainThread());
         return qName.localName() == name;
     }
 
 private:
-    void processImageAndScriptAttribute(const AtomicString& attributeName, const String& attributeValue)
+    void processImageAndScriptAttribute(const AtomString& attributeName, const String& attributeValue)
     {
         if (match(attributeName, srcAttr))
             setUrlToLoad(attributeValue);
         else if (match(attributeName, crossoriginAttr))
             m_crossOriginMode = stripLeadingAndTrailingHTMLSpaces(attributeValue);
         else if (match(attributeName, charsetAttr))
             m_charset = attributeValue;
     }
 
-    void processAttribute(const AtomicString& attributeName, const String& attributeValue, Document& document, const Vector<bool>& pictureState)
+    void processAttribute(const AtomString& attributeName, const String& attributeValue, Document& document, const Vector<bool>& pictureState)
     {
         bool inPicture = !pictureState.isEmpty();
         bool alreadyMatchedSource = inPicture && pictureState.last();
 
         switch (m_tagId) {
@@ -234,12 +234,17 @@
             break;
         case TagId::Script:
             if (match(attributeName, typeAttr)) {
                 m_moduleScript = equalLettersIgnoringASCIICase(attributeValue, "module") ? PreloadRequest::ModuleScript::Yes : PreloadRequest::ModuleScript::No;
                 break;
-            } else if (match(attributeName, nonceAttr))
+            } else if (match(attributeName, nonceAttr)) {
                 m_nonceAttribute = attributeValue;
+                break;
+            } else if (match(attributeName, referrerpolicyAttr)) {
+                m_referrerPolicy = parseReferrerPolicy(attributeValue, ReferrerPolicySource::ReferrerPolicyAttribute).valueOr(ReferrerPolicy::EmptyString);
+                break;
+            }
             processImageAndScriptAttribute(attributeName, attributeValue);
             break;
         case TagId::Link:
             if (match(attributeName, hrefAttr))
                 setUrlToLoad(attributeValue);
@@ -368,10 +373,11 @@
     bool m_metaIsViewport;
     bool m_metaIsDisabledAdaptations;
     bool m_inputIsImage;
     float m_deviceScaleFactor;
     PreloadRequest::ModuleScript m_moduleScript { PreloadRequest::ModuleScript::No };
+    ReferrerPolicy m_referrerPolicy { ReferrerPolicy::EmptyString };
 };
 
 TokenPreloadScanner::TokenPreloadScanner(const URL& documentURL, float deviceScaleFactor)
     : m_documentURL(documentURL)
     , m_deviceScaleFactor(deviceScaleFactor)
@@ -470,11 +476,11 @@
 
     PreloadRequestStream requests;
 
     while (auto token = m_tokenizer.nextToken(m_source)) {
         if (token->type() == HTMLToken::StartTag)
-            m_tokenizer.updateStateFor(AtomicString(token->name()));
+            m_tokenizer.updateStateFor(AtomString(token->name()));
         m_scanner.scan(*token, requests, document);
     }
 
     preloader.preload(WTFMove(requests));
 }
