diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTextPathElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTextPathElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTextPathElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTextPathElement.cpp
@@ -1,9 +1,9 @@
 /*
  * Copyright (C) 2007 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2010 Rob Buis <rwlbuis@gmail.com>
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -36,11 +36,17 @@
 inline SVGTextPathElement::SVGTextPathElement(const QualifiedName& tagName, Document& document)
     : SVGTextContentElement(tagName, document)
     , SVGURIReference(this)
 {
     ASSERT(hasTagName(SVGNames::textPathTag));
-    registerAttributes();
+
+    static std::once_flag onceFlag;
+    std::call_once(onceFlag, [] {
+        PropertyRegistry::registerProperty<SVGNames::startOffsetAttr, &SVGTextPathElement::m_startOffset>();
+        PropertyRegistry::registerProperty<SVGNames::methodAttr, SVGTextPathMethodType, &SVGTextPathElement::m_method>();
+        PropertyRegistry::registerProperty<SVGNames::spacingAttr, SVGTextPathSpacingType, &SVGTextPathElement::m_spacing>();
+    });
 }
 
 Ref<SVGTextPathElement> SVGTextPathElement::create(const QualifiedName& tagName, Document& document)
 {
     return adoptRef(*new SVGTextPathElement(tagName, document));
@@ -54,45 +60,35 @@
 void SVGTextPathElement::clearResourceReferences()
 {
     document().accessSVGExtensions().removeAllTargetReferencesForElement(*this);
 }
 
-void SVGTextPathElement::registerAttributes()
-{
-    auto& registry = attributeRegistry();
-    if (!registry.isEmpty())
-        return;
-    registry.registerAttribute<SVGNames::startOffsetAttr, &SVGTextPathElement::m_startOffset>();
-    registry.registerAttribute<SVGNames::methodAttr, SVGTextPathMethodType, &SVGTextPathElement::m_method>();
-    registry.registerAttribute<SVGNames::spacingAttr, SVGTextPathSpacingType, &SVGTextPathElement::m_spacing>();
-}
-
-void SVGTextPathElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void SVGTextPathElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     SVGParsingError parseError = NoError;
 
     if (name == SVGNames::startOffsetAttr)
-        m_startOffset.setValue(SVGLengthValue::construct(LengthModeOther, value, parseError));
+        m_startOffset->setBaseValInternal(SVGLengthValue::construct(LengthModeOther, value, parseError));
     else if (name == SVGNames::methodAttr) {
         SVGTextPathMethodType propertyValue = SVGPropertyTraits<SVGTextPathMethodType>::fromString(value);
         if (propertyValue > 0)
-            m_method.setValue(propertyValue);
+            m_method->setBaseValInternal<SVGTextPathMethodType>(propertyValue);
     } else if (name == SVGNames::spacingAttr) {
         SVGTextPathSpacingType propertyValue = SVGPropertyTraits<SVGTextPathSpacingType>::fromString(value);
         if (propertyValue > 0)
-            m_spacing.setValue(propertyValue);
+            m_spacing->setBaseValInternal<SVGTextPathSpacingType>(propertyValue);
     }
 
     reportAttributeParsingError(parseError, name, value);
 
     SVGTextContentElement::parseAttribute(name, value);
     SVGURIReference::parseAttribute(name, value);
 }
 
 void SVGTextPathElement::svgAttributeChanged(const QualifiedName& attrName)
 {
-    if (isKnownAttribute(attrName)) {
+    if (PropertyRegistry::isKnownAttribute(attrName)) {
         InstanceInvalidationGuard guard(*this);
 
         if (attrName == SVGNames::startOffsetAttr)
             updateRelativeLengthsInformation();
 
