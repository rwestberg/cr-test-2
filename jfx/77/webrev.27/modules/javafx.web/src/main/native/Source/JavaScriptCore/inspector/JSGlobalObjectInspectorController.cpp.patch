diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSGlobalObjectInspectorController.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSGlobalObjectInspectorController.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSGlobalObjectInspectorController.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSGlobalObjectInspectorController.cpp
@@ -61,36 +61,23 @@
 
 namespace Inspector {
 
 JSGlobalObjectInspectorController::JSGlobalObjectInspectorController(JSGlobalObject& globalObject)
     : m_globalObject(globalObject)
-    , m_injectedScriptManager(std::make_unique<InjectedScriptManager>(*this, InjectedScriptHost::create()))
+    , m_injectedScriptManager(makeUnique<InjectedScriptManager>(*this, InjectedScriptHost::create()))
     , m_executionStopwatch(Stopwatch::create())
     , m_scriptDebugServer(globalObject)
     , m_frontendRouter(FrontendRouter::create())
     , m_backendDispatcher(BackendDispatcher::create(m_frontendRouter.copyRef()))
 {
     auto context = jsAgentContext();
 
-    auto inspectorAgent = std::make_unique<InspectorAgent>(context);
-    auto runtimeAgent = std::make_unique<JSGlobalObjectRuntimeAgent>(context);
-    auto heapAgent = std::make_unique<InspectorHeapAgent>(context);
-    auto consoleAgent = std::make_unique<InspectorConsoleAgent>(context, heapAgent.get());
-    auto debuggerAgent = std::make_unique<JSGlobalObjectDebuggerAgent>(context, consoleAgent.get());
-    auto scriptProfilerAgent = std::make_unique<InspectorScriptProfilerAgent>(context);
-
-    m_inspectorAgent = inspectorAgent.get();
-    m_debuggerAgent = debuggerAgent.get();
+    auto consoleAgent = makeUnique<InspectorConsoleAgent>(context);
     m_consoleAgent = consoleAgent.get();
-    m_consoleClient = std::make_unique<JSGlobalObjectConsoleClient>(m_consoleAgent, m_debuggerAgent, scriptProfilerAgent.get());
-
-    m_agents.append(WTFMove(inspectorAgent));
-    m_agents.append(WTFMove(runtimeAgent));
     m_agents.append(WTFMove(consoleAgent));
-    m_agents.append(WTFMove(debuggerAgent));
-    m_agents.append(WTFMove(heapAgent));
-    m_agents.append(WTFMove(scriptProfilerAgent));
+
+    m_consoleClient = makeUnique<JSGlobalObjectConsoleClient>(m_consoleAgent);
 
     m_executionStopwatch->start();
 }
 
 JSGlobalObjectInspectorController::~JSGlobalObjectInspectorController()
@@ -129,11 +116,11 @@
 
     // FIXME: change this to notify agents which frontend has connected (by id).
     m_agents.didCreateFrontendAndBackend(nullptr, nullptr);
 
 #if ENABLE(INSPECTOR_ALTERNATE_DISPATCHERS)
-    m_inspectorAgent->activateExtraDomains(m_agents.extraDomains());
+    ensureInspectorAgent().activateExtraDomains(m_agents.extraDomains());
 
     if (m_augmentingClient)
         m_augmentingClient->inspectorConnected();
 #endif
 }
@@ -211,11 +198,11 @@
             ConsoleClient::printConsoleMessage(MessageSource::JS, MessageType::Log, MessageLevel::Error, errorMessage, callFrame.sourceURL(), callFrame.lineNumber(), callFrame.columnNumber());
         } else
             ConsoleClient::printConsoleMessage(MessageSource::JS, MessageType::Log, MessageLevel::Error, errorMessage, String(), 0, 0);
     }
 
-    m_consoleAgent->addMessageToConsole(std::make_unique<ConsoleMessage>(MessageSource::JS, MessageType::Log, MessageLevel::Error, errorMessage, WTFMove(callStack)));
+    m_consoleAgent->addMessageToConsole(makeUnique<ConsoleMessage>(MessageSource::JS, MessageType::Log, MessageLevel::Error, errorMessage, WTFMove(callStack)));
 }
 
 ConsoleClient* JSGlobalObjectInspectorController::consoleClient() const
 {
     return m_consoleClient.get();
@@ -246,13 +233,14 @@
 
 void JSGlobalObjectInspectorController::frontendInitialized()
 {
     if (m_pauseAfterInitialization) {
         m_pauseAfterInitialization = false;
+
         ErrorString ignored;
-        m_debuggerAgent->enable(ignored);
-        m_debuggerAgent->pause(ignored);
+        ensureDebuggerAgent().enable(ignored);
+        ensureDebuggerAgent().pause(ignored);
     }
 
 #if ENABLE(REMOTE_INSPECTOR)
     if (m_isAutomaticInspection)
         m_globalObject.inspectorDebuggable().unpauseForInitializedInspector();
@@ -282,14 +270,37 @@
     // FIXME: change this to notify agents which frontend has connected (by id).
     agent->didCreateFrontendAndBackend(nullptr, nullptr);
 
     m_agents.appendExtraAgent(WTFMove(agent));
 
-    m_inspectorAgent->activateExtraDomain(domainName);
+    ensureInspectorAgent().activateExtraDomain(domainName);
 }
 #endif
 
+InspectorAgent& JSGlobalObjectInspectorController::ensureInspectorAgent()
+{
+    if (!m_inspectorAgent) {
+        auto context = jsAgentContext();
+        auto inspectorAgent = makeUnique<InspectorAgent>(context);
+        m_inspectorAgent = inspectorAgent.get();
+        m_agents.append(WTFMove(inspectorAgent));
+    }
+    return *m_inspectorAgent;
+}
+
+InspectorDebuggerAgent& JSGlobalObjectInspectorController::ensureDebuggerAgent()
+{
+    if (!m_debuggerAgent) {
+        auto context = jsAgentContext();
+        auto debuggerAgent = makeUnique<JSGlobalObjectDebuggerAgent>(context, m_consoleAgent);
+        m_debuggerAgent = debuggerAgent.get();
+        m_consoleClient->setInspectorDebuggerAgent(m_debuggerAgent);
+        m_agents.append(WTFMove(debuggerAgent));
+    }
+    return *m_debuggerAgent;
+}
+
 JSAgentContext JSGlobalObjectInspectorController::jsAgentContext()
 {
     AgentContext baseContext = {
         *this,
         *m_injectedScriptManager,
@@ -312,9 +323,24 @@
 
     m_didCreateLazyAgents = true;
 
     auto context = jsAgentContext();
 
-    m_agents.append(std::make_unique<JSGlobalObjectAuditAgent>(context));
+    ensureInspectorAgent();
+
+    m_agents.append(makeUnique<JSGlobalObjectRuntimeAgent>(context));
+
+    ensureDebuggerAgent();
+
+    auto scriptProfilerAgentPtr = makeUnique<InspectorScriptProfilerAgent>(context);
+    m_consoleClient->setInspectorScriptProfilerAgent(scriptProfilerAgentPtr.get());
+    m_agents.append(WTFMove(scriptProfilerAgentPtr));
+
+    auto heapAgent = makeUnique<InspectorHeapAgent>(context);
+    if (m_consoleAgent)
+        m_consoleAgent->setInspectorHeapAgent(heapAgent.get());
+    m_agents.append(WTFMove(heapAgent));
+
+    m_agents.append(makeUnique<JSGlobalObjectAuditAgent>(context));
 }
 
 } // namespace Inspector
