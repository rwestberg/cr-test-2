diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/OscillatorNode.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/OscillatorNode.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/OscillatorNode.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/OscillatorNode.cpp
@@ -30,15 +30,18 @@
 
 #include "AudioNodeOutput.h"
 #include "AudioParam.h"
 #include "PeriodicWave.h"
 #include "VectorMath.h"
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
 using namespace VectorMath;
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(OscillatorNode);
+
 PeriodicWave* OscillatorNode::s_periodicWaveSine = nullptr;
 PeriodicWave* OscillatorNode::s_periodicWaveSquare = nullptr;
 PeriodicWave* OscillatorNode::s_periodicWaveSawtooth = nullptr;
 PeriodicWave* OscillatorNode::s_periodicWaveTriangle = nullptr;
 
@@ -63,11 +66,11 @@
 
     // Sets up default wave.
     setType(m_type);
 
     // An oscillator is always mono.
-    addOutput(std::make_unique<AudioNodeOutput>(this, 1));
+    addOutput(makeUnique<AudioNodeOutput>(this, 1));
 
     initialize();
 }
 
 OscillatorNode::~OscillatorNode()
@@ -77,10 +80,12 @@
 
 ExceptionOr<void> OscillatorNode::setType(Type type)
 {
     PeriodicWave* periodicWave = nullptr;
 
+    ALWAYS_LOG(LOGIDENTIFIER, type);
+
     switch (type) {
     case Type::Sine:
         if (!s_periodicWaveSine)
             s_periodicWaveSine = &PeriodicWave::createSine(sampleRate()).leakRef();
         periodicWave = s_periodicWaveSine;
@@ -295,10 +300,11 @@
     m_virtualReadIndex = 0;
 }
 
 void OscillatorNode::setPeriodicWave(PeriodicWave* periodicWave)
 {
+    ALWAYS_LOG(LOGIDENTIFIER, "sample rate = ", periodicWave ? periodicWave->sampleRate() : 0, ", wave size = ", periodicWave ? periodicWave->periodicWaveSize() : 0, ", rate scale = ", periodicWave ? periodicWave->rateScale() : 0);
     ASSERT(isMainThread());
 
     // This synchronizes with process().
     std::lock_guard<Lock> lock(m_processMutex);
     m_periodicWave = periodicWave;
