diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLArrayReferenceType.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLArrayReferenceType.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLArrayReferenceType.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLArrayReferenceType.h
@@ -25,47 +25,61 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
-#include "WHLSLLexer.h"
+#include "WHLSLCodeLocation.h"
 #include "WHLSLReferenceType.h"
+#include <wtf/FastMalloc.h>
+#include <wtf/Noncopyable.h>
 #include <wtf/UniqueRef.h>
+#include <wtf/text/StringConcatenate.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class ArrayReferenceType : public ReferenceType {
+class ArrayReferenceType final : public ReferenceType {
+    WTF_MAKE_FAST_ALLOCATED;
+    WTF_MAKE_NONCOPYABLE(ArrayReferenceType);
+    using Base = ReferenceType;
+
+    ArrayReferenceType(CodeLocation location, AddressSpace addressSpace, Ref<UnnamedType> elementType)
+        : Base(location, addressSpace, WTFMove(elementType), Kind::ArrayReference)
+    {
+    }
 public:
-    ArrayReferenceType(Lexer::Token&& origin, AddressSpace addressSpace, UniqueRef<UnnamedType>&& elementType)
-        : ReferenceType(WTFMove(origin), addressSpace, WTFMove(elementType))
+    static Ref<ArrayReferenceType> create(CodeLocation location, AddressSpace addressSpace, Ref<UnnamedType> elementType)
     {
+        return adoptRef(*new ArrayReferenceType(location, addressSpace, WTFMove(elementType)));
     }
 
-    virtual ~ArrayReferenceType() = default;
-
-    ArrayReferenceType(const ArrayReferenceType&) = delete;
-    ArrayReferenceType(ArrayReferenceType&&) = default;
+    ~ArrayReferenceType() = default;
 
-    bool isArrayReferenceType() const override { return true; }
+    unsigned hash() const
+    {
+        return this->Base::hash() ^ StringHasher::computeLiteralHash("array");
+    }
 
-    UniqueRef<UnnamedType> clone() const override
+    bool operator==(const ArrayReferenceType& other) const
     {
-        return makeUniqueRef<ArrayReferenceType>(Lexer::Token(origin()), addressSpace(), elementType().clone());
+        return addressSpace() == other.addressSpace() && elementType() == other.elementType();
     }
 
-private:
+    String toString() const
+    {
+        return makeString(elementType().toString(), "[]");
+    }
 };
 
 } // namespace AST
 
 }
 
 }
 
-SPECIALIZE_TYPE_TRAITS_WHLSL_UNNAMED_TYPE(ArrayReferenceType, isArrayReferenceType())
+SPECIALIZE_TYPE_TRAITS_WHLSL_TYPE(ArrayReferenceType, isArrayReferenceType())
 
 #endif
