diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/GeoNotifier.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/GeoNotifier.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/GeoNotifier.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/GeoNotifier.cpp
@@ -42,11 +42,11 @@
     , m_timer(*this, &GeoNotifier::timerFired)
     , m_useCachedPosition(false)
 {
 }
 
-void GeoNotifier::setFatalError(RefPtr<PositionError>&& error)
+void GeoNotifier::setFatalError(RefPtr<GeolocationPositionError>&& error)
 {
     // If a fatal error has already been set, stick with it. This makes sure that
     // when permission is denied, this is the error reported, as required by the
     // spec.
     if (m_fatalError)
@@ -67,21 +67,21 @@
 bool GeoNotifier::hasZeroTimeout() const
 {
     return !m_options.timeout;
 }
 
-void GeoNotifier::runSuccessCallback(Geoposition* position)
+void GeoNotifier::runSuccessCallback(GeolocationPosition* position)
 {
     // If we are here and the Geolocation permission is not approved, something has
     // gone horribly wrong.
     if (!m_geolocation->isAllowed())
         CRASH();
 
     m_successCallback->handleEvent(position);
 }
 
-void GeoNotifier::runErrorCallback(PositionError& error)
+void GeoNotifier::runErrorCallback(GeolocationPositionError& error)
 {
     if (m_errorCallback)
         m_errorCallback->handleEvent(error);
 }
 
@@ -119,11 +119,11 @@
         m_geolocation->requestUsesCachedPosition(this);
         return;
     }
 
     if (m_errorCallback) {
-        auto error = PositionError::create(PositionError::TIMEOUT, "Timeout expired"_s);
+        auto error = GeolocationPositionError::create(GeolocationPositionError::TIMEOUT, "Timeout expired"_s);
         m_errorCallback->handleEvent(error);
     }
     m_geolocation->requestTimedOut(this);
 }
 
