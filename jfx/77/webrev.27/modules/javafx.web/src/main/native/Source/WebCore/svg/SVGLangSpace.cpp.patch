diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGLangSpace.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGLangSpace.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGLangSpace.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGLangSpace.cpp
@@ -1,9 +1,9 @@
 /*
  * Copyright (C) 2004, 2005, 2007, 2008 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005, 2006 Rob Buis <buis@kde.org>
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -31,42 +31,37 @@
 namespace WebCore {
 
 SVGLangSpace::SVGLangSpace(SVGElement* contextElement)
     : m_contextElement(*contextElement)
 {
-    registerAttributes();
 }
 
-void SVGLangSpace::registerAttributes()
+const AtomString& SVGLangSpace::xmlspace() const
 {
-    auto& registry = attributeRegistry();
-    if (!registry.isEmpty())
-        return;
-    registry.registerAttribute(SVGStringAttributeAccessor::singleton<XMLNames::langAttr, &SVGLangSpace::m_lang>());
-    registry.registerAttribute(SVGStringAttributeAccessor::singleton<XMLNames::spaceAttr, &SVGLangSpace::m_space>());
+    if (!m_space) {
+        static NeverDestroyed<const AtomString> defaultString("default", AtomString::ConstructFromLiteral);
+        return defaultString;
+    }
+    return m_space;
 }
 
-const String& SVGLangSpace::xmlspace() const
+bool SVGLangSpace::isKnownAttribute(const QualifiedName& attributeName)
 {
-    if (!m_space.value()) {
-        static NeverDestroyed<String> defaultString("default");
-        return defaultString;
-    }
-    return m_space.value();
+    return attributeName.matches(XMLNames::langAttr) || attributeName.matches(XMLNames::spaceAttr);
 }
 
-void SVGLangSpace::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void SVGLangSpace::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name.matches(XMLNames::langAttr))
         setXmllang(value);
     if (name.matches(XMLNames::spaceAttr))
         setXmlspace(value);
 }
 
-void SVGLangSpace::svgAttributeChanged(const QualifiedName& attrName)
+void SVGLangSpace::svgAttributeChanged(const QualifiedName& attributeName)
 {
-    if (!isKnownAttribute(attrName))
+    if (!isKnownAttribute(attributeName))
         return;
 
     auto* renderer = m_contextElement.renderer();
     if (!is<RenderSVGShape>(renderer))
         return;
