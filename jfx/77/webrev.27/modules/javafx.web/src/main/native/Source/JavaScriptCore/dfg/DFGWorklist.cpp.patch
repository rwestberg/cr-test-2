diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGWorklist.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGWorklist.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGWorklist.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGWorklist.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -148,11 +148,11 @@
             dataLog(m_worklist, ": Thread started\n");
 
         if (m_relativePriority)
             Thread::current().changePriority(m_relativePriority);
 
-        m_compilationScope = std::make_unique<CompilationScope>();
+        m_compilationScope = makeUnique<CompilationScope>();
     }
 
     void threadIsStopping(const AbstractLocker&) override
     {
         // We're holding the Worklist::m_lock, so we should be careful not to deadlock.
@@ -183,13 +183,12 @@
 #endif
 }
 
 Worklist::Worklist(CString&& tierName)
     : m_threadName(createWorklistName(WTFMove(tierName)))
-    , m_lock(Box<Lock>::create())
     , m_planEnqueued(AutomaticThreadCondition::create())
-    , m_numberOfActiveThreads(0)
+    , m_lock(Box<Lock>::create())
 {
 }
 
 Worklist::~Worklist()
 {
@@ -213,11 +212,11 @@
     }
 }
 
 void Worklist::createNewThread(const AbstractLocker& locker, int relativePriority)
 {
-    std::unique_ptr<ThreadData> data = std::make_unique<ThreadData>(this);
+    std::unique_ptr<ThreadData> data = makeUnique<ThreadData>(this);
     data->m_thread = adoptRef(new ThreadBody(locker, *this, *data, m_lock, m_planEnqueued.copyRef(), relativePriority));
     m_threads.append(WTFMove(data));
 }
 
 Ref<Worklist> Worklist::create(CString&& tierName, unsigned numberOfThreads, int relativePriority)
@@ -379,11 +378,11 @@
     m_suspensionLock.unlock();
 }
 
 void Worklist::visitWeakReferences(SlotVisitor& visitor)
 {
-    VM* vm = visitor.heap()->vm();
+    VM* vm = &visitor.heap()->vm();
     {
         LockHolder locker(*m_lock);
         for (PlanMap::iterator iter = m_plans.begin(); iter != m_plans.end(); ++iter) {
             Plan* plan = iter->value.get();
             if (plan->vm() != vm)
