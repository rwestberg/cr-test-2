diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/ConsoleMessage.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/ConsoleMessage.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/ConsoleMessage.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/ConsoleMessage.h
@@ -53,11 +53,12 @@
     WTF_MAKE_FAST_ALLOCATED;
 public:
     ConsoleMessage(MessageSource, MessageType, MessageLevel, const String& message, unsigned long requestIdentifier = 0);
     ConsoleMessage(MessageSource, MessageType, MessageLevel, const String& message, const String& url, unsigned line, unsigned column, JSC::ExecState* = nullptr, unsigned long requestIdentifier = 0);
     ConsoleMessage(MessageSource, MessageType, MessageLevel, const String& message, Ref<ScriptCallStack>&&, unsigned long requestIdentifier = 0);
-    ConsoleMessage(MessageSource, MessageType, MessageLevel, const String& message, Ref<ScriptArguments>&&, JSC::ExecState*, unsigned long requestIdentifier = 0);
+    ConsoleMessage(MessageSource, MessageType, MessageLevel, const String& message, Ref<ScriptArguments>&&, Ref<ScriptCallStack>&&, unsigned long requestIdentifier = 0);
+    ConsoleMessage(MessageSource, MessageType, MessageLevel, const String& message, Ref<ScriptArguments>&&, JSC::ExecState* = nullptr, unsigned long requestIdentifier = 0);
     ConsoleMessage(MessageSource, MessageType, MessageLevel, Vector<JSONLogValue>&&, JSC::ExecState*, unsigned long requestIdentifier = 0);
     ~ConsoleMessage();
 
     void addToFrontend(ConsoleFrontendDispatcher&, InjectedScriptManager&, bool generatePreview);
     void updateRepeatCountInConsole(ConsoleFrontendDispatcher&);
@@ -72,10 +73,11 @@
 
     JSC::ExecState* scriptState() const;
 
     void incrementCount() { ++m_repeatCount; }
 
+    const RefPtr<ScriptArguments>& arguments() const { return m_arguments; }
     unsigned argumentCount() const;
 
     bool isEqual(ConsoleMessage* msg) const;
 
     void clear();
