diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPathUtilities.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPathUtilities.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPathUtilities.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPathUtilities.cpp
@@ -58,43 +58,43 @@
     if (!path.isNull() && !path.isEmpty()) {
         path.apply([&builder] (const PathElement& element) {
             switch (element.type) {
             case PathElementMoveToPoint:
                 builder.append('M');
-                builder.appendECMAScriptNumber(element.points[0].x());
+                builder.appendNumber(element.points[0].x());
                 builder.append(' ');
-                builder.appendECMAScriptNumber(element.points[0].y());
+                builder.appendNumber(element.points[0].y());
                 break;
             case PathElementAddLineToPoint:
                 builder.append('L');
-                builder.appendECMAScriptNumber(element.points[0].x());
+                builder.appendNumber(element.points[0].x());
                 builder.append(' ');
-                builder.appendECMAScriptNumber(element.points[0].y());
+                builder.appendNumber(element.points[0].y());
                 break;
             case PathElementAddQuadCurveToPoint:
                 builder.append('Q');
-                builder.appendECMAScriptNumber(element.points[0].x());
+                builder.appendNumber(element.points[0].x());
                 builder.append(' ');
-                builder.appendECMAScriptNumber(element.points[0].y());
+                builder.appendNumber(element.points[0].y());
                 builder.append(',');
-                builder.appendECMAScriptNumber(element.points[1].x());
+                builder.appendNumber(element.points[1].x());
                 builder.append(' ');
-                builder.appendECMAScriptNumber(element.points[1].y());
+                builder.appendNumber(element.points[1].y());
                 break;
             case PathElementAddCurveToPoint:
                 builder.append('C');
-                builder.appendECMAScriptNumber(element.points[0].x());
+                builder.appendNumber(element.points[0].x());
                 builder.append(' ');
-                builder.appendECMAScriptNumber(element.points[0].y());
+                builder.appendNumber(element.points[0].y());
                 builder.append(',');
-                builder.appendECMAScriptNumber(element.points[1].x());
+                builder.appendNumber(element.points[1].x());
                 builder.append(' ');
-                builder.appendECMAScriptNumber(element.points[1].y());
+                builder.appendNumber(element.points[1].y());
                 builder.append(',');
-                builder.appendECMAScriptNumber(element.points[2].x());
+                builder.appendNumber(element.points[2].x());
                 builder.append(' ');
-                builder.appendECMAScriptNumber(element.points[2].y());
+                builder.appendNumber(element.points[2].y());
                 break;
             case PathElementCloseSubpath:
                 builder.append('Z');
                 break;
             }
@@ -102,36 +102,18 @@
     }
 
     return builder.toString();
 }
 
-bool buildSVGPathByteStreamFromSVGPathSegListValues(const SVGPathSegListValues& list, SVGPathByteStream& result, PathParsingMode parsingMode)
+bool buildSVGPathByteStreamFromSVGPathSegList(const SVGPathSegList& list, SVGPathByteStream& stream, PathParsingMode parsingMode, bool checkForInitialMoveTo)
 {
-    result.clear();
+    stream.clear();
     if (list.isEmpty())
         return true;
 
     SVGPathSegListSource source(list);
-    return SVGPathParser::parseToByteStream(source, result, parsingMode);
-}
-
-bool appendSVGPathByteStreamFromSVGPathSeg(RefPtr<SVGPathSeg>&& pathSeg, SVGPathByteStream& result, PathParsingMode parsingMode)
-{
-    // FIXME: https://bugs.webkit.org/show_bug.cgi?id=15412 - Implement normalized path segment lists!
-    ASSERT(parsingMode == UnalteredParsing);
-
-    SVGPathSegListValues appendedItemList(PathSegUnalteredRole);
-    appendedItemList.append(WTFMove(pathSeg));
-
-    SVGPathByteStream appendedByteStream;
-    SVGPathSegListSource source(appendedItemList);
-    bool ok = SVGPathParser::parseToByteStream(source, result, parsingMode, false);
-
-    if (ok)
-        result.append(appendedByteStream);
-
-    return ok;
+    return SVGPathParser::parseToByteStream(source, stream, parsingMode, checkForInitialMoveTo);
 }
 
 Path buildPathFromByteStream(const SVGPathByteStream& stream)
 {
     if (stream.isEmpty())
@@ -142,37 +124,27 @@
     SVGPathByteStreamSource source(stream);
     SVGPathParser::parse(source, builder);
     return path;
 }
 
-bool buildSVGPathSegListValuesFromByteStream(const SVGPathByteStream& stream, SVGPathElement& element, SVGPathSegListValues& result, PathParsingMode parsingMode)
+bool buildSVGPathSegListFromByteStream(const SVGPathByteStream& stream, SVGPathSegList& list, PathParsingMode mode)
 {
     if (stream.isEmpty())
         return true;
 
-    SVGPathSegListBuilder builder(element, result, parsingMode == NormalizedParsing ? PathSegNormalizedRole : PathSegUnalteredRole);
+    SVGPathSegListBuilder builder(list);
     SVGPathByteStreamSource source(stream);
-    return SVGPathParser::parse(source, builder, parsingMode);
+    return SVGPathParser::parse(source, builder, mode);
 }
 
-bool buildStringFromByteStream(const SVGPathByteStream& stream, String& result, PathParsingMode parsingMode)
+bool buildStringFromByteStream(const SVGPathByteStream& stream, String& result, PathParsingMode parsingMode, bool checkForInitialMoveTo)
 {
     if (stream.isEmpty())
         return true;
 
     SVGPathByteStreamSource source(stream);
-    return SVGPathParser::parseToString(source, result, parsingMode);
-}
-
-bool buildStringFromSVGPathSegListValues(const SVGPathSegListValues& list, String& result, PathParsingMode parsingMode)
-{
-    result = String();
-    if (list.isEmpty())
-        return true;
-
-    SVGPathSegListSource source(list);
-    return SVGPathParser::parseToString(source, result, parsingMode);
+    return SVGPathParser::parseToString(source, result, parsingMode, checkForInitialMoveTo);
 }
 
 bool buildSVGPathByteStreamFromString(const String& d, SVGPathByteStream& result, PathParsingMode parsingMode)
 {
     result.clear();
