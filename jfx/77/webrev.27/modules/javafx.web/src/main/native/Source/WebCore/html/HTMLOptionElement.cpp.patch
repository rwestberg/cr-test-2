diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLOptionElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLOptionElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLOptionElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLOptionElement.cpp
@@ -82,11 +82,11 @@
         element->setValue(value);
     if (defaultSelected)
         element->setAttributeWithoutSynchronization(selectedAttr, emptyAtom());
     element->setSelected(selected);
 
-    return WTFMove(element);
+    return element;
 }
 
 bool HTMLOptionElement::isFocusable() const
 {
     if (!supportsFocus())
@@ -160,11 +160,11 @@
     }
 
     return 0;
 }
 
-void HTMLOptionElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLOptionElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
 #if ENABLE(DATALIST_ELEMENT)
     if (name == valueAttr) {
         if (RefPtr<HTMLDataListElement> dataList = ownerDataListElement())
             dataList->optionElementChildrenChanged();
@@ -192,11 +192,11 @@
         HTMLElement::parseAttribute(name, value);
 }
 
 String HTMLOptionElement::value() const
 {
-    const AtomicString& value = attributeWithoutSynchronization(valueAttr);
+    const AtomString& value = attributeWithoutSynchronization(valueAttr);
     if (!value.isNull())
         return value;
     return stripLeadingAndTrailingHTMLSpaces(collectOptionInnerText()).simplifyWhiteSpace(isHTMLSpace);
 }
 
