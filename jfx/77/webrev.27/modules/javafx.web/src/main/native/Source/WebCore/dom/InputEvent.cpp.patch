diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/InputEvent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/InputEvent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/InputEvent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/InputEvent.cpp
@@ -31,25 +31,25 @@
 #include "WindowProxy.h"
 #include <wtf/Vector.h>
 
 namespace WebCore {
 
-Ref<InputEvent> InputEvent::create(const AtomicString& eventType, const String& inputType, IsCancelable cancelable, RefPtr<WindowProxy>&& view, const String& data, RefPtr<DataTransfer>&& dataTransfer, const Vector<RefPtr<StaticRange>>& targetRanges, int detail)
+Ref<InputEvent> InputEvent::create(const AtomString& eventType, const String& inputType, IsCancelable cancelable, RefPtr<WindowProxy>&& view, const String& data, RefPtr<DataTransfer>&& dataTransfer, const Vector<RefPtr<StaticRange>>& targetRanges, int detail)
 {
     return adoptRef(*new InputEvent(eventType, inputType, cancelable, WTFMove(view), data, WTFMove(dataTransfer), targetRanges, detail));
 }
 
-InputEvent::InputEvent(const AtomicString& eventType, const String& inputType, IsCancelable cancelable, RefPtr<WindowProxy>&& view, const String& data, RefPtr<DataTransfer>&& dataTransfer, const Vector<RefPtr<StaticRange>>& targetRanges, int detail)
+InputEvent::InputEvent(const AtomString& eventType, const String& inputType, IsCancelable cancelable, RefPtr<WindowProxy>&& view, const String& data, RefPtr<DataTransfer>&& dataTransfer, const Vector<RefPtr<StaticRange>>& targetRanges, int detail)
     : UIEvent(eventType, CanBubble::Yes, cancelable, IsComposed::Yes, WTFMove(view), detail)
     , m_inputType(inputType)
     , m_data(data)
     , m_dataTransfer(dataTransfer)
     , m_targetRanges(targetRanges)
 {
 }
 
-InputEvent::InputEvent(const AtomicString& eventType, const Init& initializer)
+InputEvent::InputEvent(const AtomString& eventType, const Init& initializer)
     : UIEvent(eventType, initializer)
     , m_inputType(emptyString())
     , m_data(initializer.data)
 {
 }
