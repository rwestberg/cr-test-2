diff a/modules/javafx.web/src/main/native/Source/WebCore/css/makevalues.pl b/modules/javafx.web/src/main/native/Source/WebCore/css/makevalues.pl
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/makevalues.pl
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/makevalues.pl
@@ -72,11 +72,11 @@
 
 #include \"config.h\"
 #include \"CSSValueKeywords.h\"
 #include \"HashTools.h\"
 #include <wtf/ASCIICType.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 #include <wtf/text/WTFString.h>
 #include <string.h>
 
 IGNORE_WARNINGS_BEGIN(\"implicit-fallthrough\")
 
@@ -129,26 +129,26 @@
     if (id > lastCSSValueKeyword)
         return 0;
     return valueList[id];
 }
 
-const AtomicString& getValueNameAtomicString(CSSValueID id)
+const AtomString& getValueNameAtomString(CSSValueID id)
 {
     if (id < firstCSSValueKeyword || id > lastCSSValueKeyword)
         return nullAtom();
 
-    static AtomicString* valueKeywordStrings = new AtomicString[numCSSValueKeywords]; // Leaked intentionally.
-    AtomicString& valueKeywordString = valueKeywordStrings[id];
+    static AtomString* valueKeywordStrings = new AtomString[numCSSValueKeywords]; // Leaked intentionally.
+    AtomString& valueKeywordString = valueKeywordStrings[id];
     if (valueKeywordString.isNull())
         valueKeywordString = getValueName(id);
     return valueKeywordString;
 }
 
 String getValueNameString(CSSValueID id)
 {
-    // We share the StringImpl with the AtomicStrings.
-    return getValueNameAtomicString(id).string();
+    // We share the StringImpl with the AtomStrings.
+    return getValueNameAtomString(id).string();
 }
 
 } // namespace WebCore
 
 IGNORE_WARNINGS_END
@@ -192,11 +192,11 @@
 print HEADER "const int lastCSSValueKeyword = $last;\n";
 print HEADER "const size_t maxCSSValueKeywordLength = " . $maxLen . ";\n";
 print HEADER << "EOF";
 
 const char* getValueName(unsigned short id);
-const WTF::AtomicString& getValueNameAtomicString(CSSValueID id);
+const WTF::AtomString& getValueNameAtomString(CSSValueID id);
 WTF::String getValueNameString(CSSValueID id);
 
 inline CSSValueID convertToCSSValueID(int value)
 {
     ASSERT(value >= firstCSSValueKeyword && value <= lastCSSValueKeyword);
