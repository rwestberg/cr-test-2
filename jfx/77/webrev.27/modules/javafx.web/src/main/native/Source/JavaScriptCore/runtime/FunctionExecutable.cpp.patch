diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionExecutable.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionExecutable.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionExecutable.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionExecutable.cpp
@@ -27,10 +27,11 @@
 
 #include "BatchedTransitionOptimizer.h"
 #include "CodeBlock.h"
 #include "Debugger.h"
 #include "FunctionCodeBlock.h"
+#include "FunctionOverrides.h"
 #include "JIT.h"
 #include "JSCInlines.h"
 #include "LLIntEntrypoint.h"
 #include "Parser.h"
 #include "TypeProfiler.h"
@@ -39,30 +40,22 @@
 
 namespace JSC {
 
 const ClassInfo FunctionExecutable::s_info = { "FunctionExecutable", &ScriptExecutable::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(FunctionExecutable) };
 
-FunctionExecutable::FunctionExecutable(VM& vm, const SourceCode& source, UnlinkedFunctionExecutable* unlinkedExecutable, unsigned lastLine, unsigned endColumn, Intrinsic intrinsic)
+FunctionExecutable::FunctionExecutable(VM& vm, const SourceCode& source, UnlinkedFunctionExecutable* unlinkedExecutable, Intrinsic intrinsic)
     : ScriptExecutable(vm.functionExecutableStructure.get(), vm, source, unlinkedExecutable->isInStrictContext(), unlinkedExecutable->derivedContextType(), false, EvalContextType::None, intrinsic)
     , m_unlinkedExecutable(vm, this, unlinkedExecutable)
 {
     RELEASE_ASSERT(!source.isNull());
     ASSERT(source.length());
-    m_lastLine = lastLine;
-    ASSERT(endColumn != UINT_MAX);
-    m_endColumn = endColumn;
-    if (VM::canUseJIT())
-        new (&m_singletonFunction) WriteBarrier<InferredValue>();
-    else
-        m_singletonFunctionState = ClearWatchpoint;
 }
 
-void FunctionExecutable::finishCreation(VM& vm)
+void FunctionExecutable::finishCreation(VM& vm, ScriptExecutable* topLevelExecutable)
 {
     Base::finishCreation(vm);
-    if (VM::canUseJIT())
-        m_singletonFunction.set(vm, this, InferredValue::create(vm));
+    m_topLevelExecutable.set(vm, this, topLevelExecutable ? topLevelExecutable : this);
 }
 
 void FunctionExecutable::destroy(JSCell* cell)
 {
     static_cast<FunctionExecutable*>(cell)->FunctionExecutable::~FunctionExecutable();
@@ -85,16 +78,22 @@
 void FunctionExecutable::visitChildren(JSCell* cell, SlotVisitor& visitor)
 {
     FunctionExecutable* thisObject = jsCast<FunctionExecutable*>(cell);
     ASSERT_GC_OBJECT_INHERITS(thisObject, info());
     Base::visitChildren(thisObject, visitor);
+    visitor.append(thisObject->m_topLevelExecutable);
     visitor.append(thisObject->m_codeBlockForCall);
     visitor.append(thisObject->m_codeBlockForConstruct);
     visitor.append(thisObject->m_unlinkedExecutable);
-    if (VM::canUseJIT())
-        visitor.append(thisObject->m_singletonFunction);
-    visitor.append(thisObject->m_cachedPolyProtoStructure);
+    if (RareData* rareData = thisObject->m_rareData.get()) {
+        visitor.append(rareData->m_cachedPolyProtoStructure);
+        if (TemplateObjectMap* map = rareData->m_templateObjectMap.get()) {
+            auto locker = holdLock(thisObject->cellLock());
+            for (auto& entry : *map)
+                visitor.append(entry.value);
+        }
+    }
 }
 
 FunctionExecutable* FunctionExecutable::fromGlobalCode(
     const Identifier& name, ExecState& exec, const SourceCode& source,
     JSObject*& exception, int overrideLineNumber, Optional<int> functionConstructorParametersEndPosition)
@@ -103,19 +102,40 @@
         UnlinkedFunctionExecutable::fromGlobalCode(
             name, exec, source, exception, overrideLineNumber, functionConstructorParametersEndPosition);
     if (!unlinkedExecutable)
         return nullptr;
 
-    return unlinkedExecutable->link(exec.vm(), source, overrideLineNumber);
+    return unlinkedExecutable->link(exec.vm(), nullptr, source, overrideLineNumber);
 }
 
 FunctionExecutable::RareData& FunctionExecutable::ensureRareDataSlow()
 {
     ASSERT(!m_rareData);
-    m_rareData = std::make_unique<RareData>();
-    m_rareData->m_parametersStartOffset = m_unlinkedExecutable->parametersStartOffset();
-    m_rareData->m_typeProfilingStartOffset = m_unlinkedExecutable->typeProfilingStartOffset();
-    m_rareData->m_typeProfilingEndOffset = m_unlinkedExecutable->typeProfilingEndOffset();
+    auto rareData = makeUnique<RareData>();
+    rareData->m_lineCount = lineCount();
+    rareData->m_endColumn = endColumn();
+    rareData->m_parametersStartOffset = parametersStartOffset();
+    rareData->m_typeProfilingStartOffset = typeProfilingStartOffset();
+    rareData->m_typeProfilingEndOffset = typeProfilingEndOffset();
+    WTF::storeStoreFence();
+    m_rareData = WTFMove(rareData);
     return *m_rareData;
 }
 
+void FunctionExecutable::overrideInfo(const FunctionOverrideInfo& overrideInfo)
+{
+    auto& rareData = ensureRareData();
+    m_source = overrideInfo.sourceCode;
+    rareData.m_lineCount = overrideInfo.lineCount;
+    rareData.m_endColumn = overrideInfo.endColumn;
+    rareData.m_parametersStartOffset = overrideInfo.parametersStartOffset;
+    rareData.m_typeProfilingStartOffset = overrideInfo.typeProfilingStartOffset;
+    rareData.m_typeProfilingEndOffset = overrideInfo.typeProfilingEndOffset;
+}
+
+auto FunctionExecutable::ensureTemplateObjectMap(VM&) -> TemplateObjectMap&
+{
+    RareData& rareData = ensureRareData();
+    return ensureTemplateObjectMapImpl(rareData.m_templateObjectMap);
+}
+
 } // namespace JSC
