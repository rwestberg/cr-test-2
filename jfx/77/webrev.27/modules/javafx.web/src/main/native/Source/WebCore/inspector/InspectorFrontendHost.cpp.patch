diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendHost.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendHost.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendHost.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendHost.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2007-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2007-2019 Apple Inc. All rights reserved.
  * Copyright (C) 2008 Matt Lilek <webkit@mattlilek.com>
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
@@ -37,10 +37,11 @@
 #include "ContextMenuProvider.h"
 #include "DOMWrapperWorld.h"
 #include "Document.h"
 #include "Editor.h"
 #include "Event.h"
+#include "FloatRect.h"
 #include "FocusController.h"
 #include "Frame.h"
 #include "HitTestResult.h"
 #include "InspectorController.h"
 #include "InspectorFrontendClient.h"
@@ -155,11 +156,11 @@
     auto& vm = state.vm();
     JSC::JSLockHolder lock(vm);
     auto scope = DECLARE_CATCH_SCOPE(vm);
 
     auto& globalObject = *JSC::jsCast<JSDOMGlobalObject*>(state.lexicalGlobalObject());
-    globalObject.putDirect(vm, JSC::Identifier::fromString(&vm, "InspectorFrontendHost"), toJS<IDLInterface<InspectorFrontendHost>>(state, globalObject, *this));
+    globalObject.putDirect(vm, JSC::Identifier::fromString(vm, "InspectorFrontendHost"), toJS<IDLInterface<InspectorFrontendHost>>(state, globalObject, *this));
     if (UNLIKELY(scope.exception()))
         reportException(&state, scope.exception());
 }
 
 void InspectorFrontendHost::loaded()
@@ -194,10 +195,17 @@
 {
     if (m_client)
         m_client->reopen();
 }
 
+void InspectorFrontendHost::reset()
+{
+    if (m_client)
+        m_client->resetState();
+    reopen();
+}
+
 void InspectorFrontendHost::bringToFront()
 {
     if (m_client)
         m_client->bringToFront();
 }
@@ -240,10 +248,16 @@
 {
     if (m_client)
         m_client->changeAttachedWindowWidth(width);
 }
 
+void InspectorFrontendHost::setSheetRect(float x, float y, unsigned width, unsigned height)
+{
+    if (m_client)
+        m_client->changeSheetRect(FloatRect(x, y, width, height));
+}
+
 void InspectorFrontendHost::startWindowDrag()
 {
     if (m_client)
         m_client->startWindowDrag();
 }
@@ -393,11 +407,12 @@
 {
 #if ENABLE(CONTEXT_MENUS)
     ASSERT(m_frontendPage);
 
     auto& state = *execStateFromPage(debuggerWorld(), m_frontendPage);
-    auto value = state.lexicalGlobalObject()->get(&state, JSC::Identifier::fromString(&state.vm(), "InspectorFrontendAPI"));
+    auto& vm = state.vm();
+    auto value = state.lexicalGlobalObject()->get(&state, JSC::Identifier::fromString(vm, "InspectorFrontendAPI"));
     ASSERT(value);
     ASSERT(value.isObject());
     auto* frontendAPIObject = asObject(value);
 
     ContextMenu menu;
@@ -417,14 +432,12 @@
 #if ENABLE(CONTEXT_MENUS) && USE(ACCESSIBILITY_CONTEXT_MENUS)
     if (!is<MouseEvent>(event))
         return;
 
     auto& mouseEvent = downcast<MouseEvent>(event);
-    IntPoint mousePoint { mouseEvent.clientX(), mouseEvent.clientY() };
     auto& frame = *downcast<Node>(mouseEvent.target())->document().frame();
-
-    m_frontendPage->contextMenuController().showContextMenuAt(frame, mousePoint);
+    m_frontendPage->contextMenuController().showContextMenuAt(frame, roundedIntPoint(mouseEvent.absoluteLocation()));
 #else
     UNUSED_PARAM(event);
 #endif
 }
 
