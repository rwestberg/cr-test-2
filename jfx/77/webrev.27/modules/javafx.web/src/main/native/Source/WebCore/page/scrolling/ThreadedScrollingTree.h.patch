diff a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ThreadedScrollingTree.h b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ThreadedScrollingTree.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ThreadedScrollingTree.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/ThreadedScrollingTree.h
@@ -27,10 +27,11 @@
 
 #if ENABLE(ASYNC_SCROLLING)
 
 #include "ScrollingStateTree.h"
 #include "ScrollingTree.h"
+#include <wtf/Condition.h>
 #include <wtf/RefPtr.h>
 
 namespace WebCore {
 
 class AsyncScrollingCoordinator;
@@ -52,14 +53,17 @@
     // event must be sent again to the WebCore event handler.
     ScrollingEventResult tryToHandleWheelEvent(const PlatformWheelEvent&) override;
 
     void invalidate() override;
 
+    void incrementPendingCommitCount();
+    void decrementPendingCommitCount();
+
 protected:
     explicit ThreadedScrollingTree(AsyncScrollingCoordinator&);
 
-    void scrollingTreeNodeDidScroll(ScrollingNodeID, const FloatPoint& scrollPosition, const Optional<FloatPoint>& layoutViewportOrigin, ScrollingLayerPositionAction = ScrollingLayerPositionAction::Sync) override;
+    void scrollingTreeNodeDidScroll(ScrollingTreeScrollingNode&, ScrollingLayerPositionAction = ScrollingLayerPositionAction::Sync) override;
 #if PLATFORM(MAC)
     void handleWheelEventPhase(PlatformWheelEventPhase) override;
     void setActiveScrollSnapIndices(ScrollingNodeID, unsigned horizontalIndex, unsigned verticalIndex) override;
     void deferTestsForReason(WheelEventTestTrigger::ScrollableAreaIdentifier, WheelEventTestTrigger::DeferTestTriggerReason) override;
     void removeTestDeferralForReason(WheelEventTestTrigger::ScrollableAreaIdentifier, WheelEventTestTrigger::DeferTestTriggerReason) override;
@@ -72,12 +76,19 @@
     void reportExposedUnfilledArea(MonotonicTime, unsigned unfilledArea) override;
     void reportSynchronousScrollingReasonsChanged(MonotonicTime, SynchronousScrollingReasons) override;
 
 private:
     bool isThreadedScrollingTree() const override { return true; }
+    void applyLayerPositions() override;
 
     RefPtr<AsyncScrollingCoordinator> m_scrollingCoordinator;
+
+    void waitForPendingCommits();
+
+    Lock m_pendingCommitCountMutex;
+    unsigned m_pendingCommitCount { 0 };
+    Condition m_commitCondition;
 };
 
 } // namespace WebCore
 
 SPECIALIZE_TYPE_TRAITS_SCROLLING_TREE(WebCore::ThreadedScrollingTree, isThreadedScrollingTree())
