diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ResourceRequestBase.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ResourceRequestBase.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ResourceRequestBase.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ResourceRequestBase.cpp
@@ -70,11 +70,11 @@
     if (auto inspectorInitiatorNodeIdentifier = other.inspectorInitiatorNodeIdentifier())
         setInspectorInitiatorNodeIdentifier(*inspectorInitiatorNodeIdentifier);
 
     if (!other.isSameSiteUnspecified())
         setIsSameSite(other.isSameSite());
-        setIsTopSite(other.isTopSite());
+    setIsTopSite(other.isTopSite());
 
     updateResourceRequest();
     m_httpHeaderFields = other.httpHeaderFields().isolatedCopy();
 
     size_t encodingCount = other.m_responseContentDispositionEncodingFallbackArray.size();
@@ -355,10 +355,19 @@
     m_httpHeaderFields.remove(HTTPHeaderName::ContentType);
 
     m_platformRequestUpdated = false;
 }
 
+void ResourceRequestBase::clearPurpose()
+{
+    updateResourceRequest();
+
+    m_httpHeaderFields.remove(HTTPHeaderName::Purpose);
+
+    m_platformRequestUpdated = false;
+}
+
 String ResourceRequestBase::httpReferrer() const
 {
     return httpHeaderField(HTTPHeaderName::Referer);
 }
 
@@ -486,10 +495,22 @@
     updateResourceRequest(HTTPBodyUpdatePolicy::UpdateHTTPBody);
 
     return m_httpBody.get();
 }
 
+bool ResourceRequestBase::hasUpload() const
+{
+    if (auto* body = httpBody()) {
+        for (auto& element : body->elements()) {
+            if (WTF::holds_alternative<WebCore::FormDataElement::EncodedFileData>(element.data) || WTF::holds_alternative<WebCore::FormDataElement::EncodedBlobData>(element.data))
+                return true;
+        }
+    }
+
+    return false;
+}
+
 void ResourceRequestBase::setHTTPBody(RefPtr<FormData>&& httpBody)
 {
     updateResourceRequest();
 
     m_httpBody = WTFMove(httpBody);
