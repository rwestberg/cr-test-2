diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/ContentFilter.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/ContentFilter.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/ContentFilter.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/ContentFilter.cpp
@@ -76,11 +76,11 @@
     }
 
     if (filters.isEmpty())
         return nullptr;
 
-    return std::make_unique<ContentFilter>(WTFMove(filters), documentLoader);
+    return makeUnique<ContentFilter>(WTFMove(filters), documentLoader);
 }
 
 ContentFilter::ContentFilter(Container&& contentFilters, DocumentLoader& documentLoader)
     : m_contentFilters { WTFMove(contentFilters) }
     , m_documentLoader { documentLoader }
@@ -226,17 +226,16 @@
     if (m_state != State::Blocked)
         return;
 
     ContentFilterUnblockHandler unblockHandler { m_blockingContentFilter->unblockHandler() };
     unblockHandler.setUnreachableURL(m_documentLoader.documentURL());
-    RefPtr<Frame> frame { m_documentLoader.frame() };
+    auto frame { m_documentLoader.frame() };
     String unblockRequestDeniedScript { m_blockingContentFilter->unblockRequestDeniedScript() };
     if (!unblockRequestDeniedScript.isEmpty() && frame) {
-        static_assert(std::is_base_of<ThreadSafeRefCounted<AbstractFrame>, Frame>::value, "AbstractFrame must be ThreadSafeRefCounted.");
-        unblockHandler.wrapWithDecisionHandler([frame = WTFMove(frame), script = unblockRequestDeniedScript.isolatedCopy()](bool unblocked) {
-            if (!unblocked)
-                frame->script().executeScript(script);
+        unblockHandler.wrapWithDecisionHandler([scriptController = makeWeakPtr(frame->script()), script = unblockRequestDeniedScript.isolatedCopy()](bool unblocked) {
+            if (!unblocked && scriptController)
+                scriptController->executeScript(script);
         });
     }
     m_documentLoader.frameLoader()->client().contentFilterDidBlockLoad(WTFMove(unblockHandler));
 
     m_blockedError = m_documentLoader.frameLoader()->blockedByContentFilterError(m_documentLoader.request());
@@ -273,19 +272,25 @@
     }
 
     return true;
 }
 
-void ContentFilter::handleProvisionalLoadFailure(const ResourceError& error)
+bool ContentFilter::willHandleProvisionalLoadFailure(const ResourceError& error) const
 {
     if (m_state != State::Blocked)
-        return;
+        return false;
 
     if (m_blockedError.errorCode() != error.errorCode() || m_blockedError.domain() != error.domain())
-        return;
+        return false;
 
     ASSERT(m_blockedError.failingURL() == error.failingURL());
+    return true;
+}
+
+void ContentFilter::handleProvisionalLoadFailure(const ResourceError& error)
+{
+    ASSERT(willHandleProvisionalLoadFailure(error));
 
     RefPtr<SharedBuffer> replacementData { m_blockingContentFilter->replacementData() };
     ResourceResponse response { URL(), "text/html"_s, static_cast<long long>(replacementData->size()), "UTF-8"_s };
     SubstituteData substituteData { WTFMove(replacementData), error.failingURL(), response, SubstituteData::SessionHistoryVisibility::Hidden };
     SetForScope<bool> loadingBlockedPage { m_isLoadingBlockedPage, true };
