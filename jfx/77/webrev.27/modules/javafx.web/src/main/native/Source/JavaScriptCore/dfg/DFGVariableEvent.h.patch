diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGVariableEvent.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGVariableEvent.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGVariableEvent.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGVariableEvent.h
@@ -33,11 +33,11 @@
 #include "VirtualRegister.h"
 #include <stdio.h>
 
 namespace JSC { namespace DFG {
 
-enum VariableEventKind {
+enum VariableEventKind : uint8_t {
     // Marks the beginning of a checkpoint. If you interpret the variable
     // events starting at a Reset point then you'll get everything you need.
     Reset,
 
     // Node births. Points in the code where a node becomes relevant for OSR.
@@ -99,86 +99,114 @@
         ASSERT(dataFormat != DataFormatDouble);
 #if USE(JSVALUE32_64)
         ASSERT(!(dataFormat & DataFormatJS));
 #endif
         VariableEvent event;
-        event.m_which.id = id.bits();
-        event.m_representation.gpr = gpr;
+        WhichType which;
+        which.id = id.bits();
+        VariableRepresentation representation;
+        representation.gpr = gpr;
         event.m_kind = kind;
         event.m_dataFormat = dataFormat;
+        event.m_which = WTFMove(which);
+        event.m_representation = WTFMove(representation);
         return event;
     }
 
 #if USE(JSVALUE32_64)
     static VariableEvent fillPair(VariableEventKind kind, MinifiedID id, MacroAssembler::RegisterID tagGPR, MacroAssembler::RegisterID payloadGPR)
     {
         ASSERT(kind == BirthToFill || kind == Fill);
         VariableEvent event;
-        event.m_which.id = id.bits();
-        event.m_representation.pair.tagGPR = tagGPR;
-        event.m_representation.pair.payloadGPR = payloadGPR;
+        WhichType which;
+        which.id = id.bits();
+        VariableRepresentation representation;
+        representation.pair.tagGPR = tagGPR;
+        representation.pair.payloadGPR = payloadGPR;
         event.m_kind = kind;
         event.m_dataFormat = DataFormatJS;
+        event.m_which = WTFMove(which);
+        event.m_representation = WTFMove(representation);
         return event;
     }
 #endif // USE(JSVALUE32_64)
 
     static VariableEvent fillFPR(VariableEventKind kind, MinifiedID id, MacroAssembler::FPRegisterID fpr)
     {
         ASSERT(kind == BirthToFill || kind == Fill);
         VariableEvent event;
-        event.m_which.id = id.bits();
-        event.m_representation.fpr = fpr;
+        WhichType which;
+        which.id = id.bits();
+        VariableRepresentation representation;
+        representation.fpr = fpr;
         event.m_kind = kind;
         event.m_dataFormat = DataFormatDouble;
+        event.m_which = WTFMove(which);
+        event.m_representation = WTFMove(representation);
         return event;
     }
 
     static VariableEvent birth(MinifiedID id)
     {
         VariableEvent event;
-        event.m_which.id = id.bits();
+        WhichType which;
+        which.id = id.bits();
         event.m_kind = Birth;
+        event.m_which = WTFMove(which);
         return event;
     }
 
     static VariableEvent spill(VariableEventKind kind, MinifiedID id, VirtualRegister virtualRegister, DataFormat format)
     {
         ASSERT(kind == BirthToSpill || kind == Spill);
         VariableEvent event;
-        event.m_which.id = id.bits();
-        event.m_representation.virtualReg = virtualRegister.offset();
+        WhichType which;
+        which.id = id.bits();
+        VariableRepresentation representation;
+        representation.virtualReg = virtualRegister.offset();
         event.m_kind = kind;
         event.m_dataFormat = format;
+        event.m_which = WTFMove(which);
+        event.m_representation = WTFMove(representation);
         return event;
     }
 
     static VariableEvent death(MinifiedID id)
     {
         VariableEvent event;
-        event.m_which.id = id.bits();
+        WhichType which;
+        which.id = id.bits();
         event.m_kind = Death;
+        event.m_which = WTFMove(which);
         return event;
     }
 
     static VariableEvent setLocal(
         VirtualRegister bytecodeReg, VirtualRegister machineReg, DataFormat format)
     {
         VariableEvent event;
-        event.m_which.virtualReg = machineReg.offset();
-        event.m_representation.virtualReg = bytecodeReg.offset();
+        WhichType which;
+        which.virtualReg = machineReg.offset();
+        VariableRepresentation representation;
+        representation.virtualReg = bytecodeReg.offset();
         event.m_kind = SetLocalEvent;
         event.m_dataFormat = format;
+        event.m_which = WTFMove(which);
+        event.m_representation = WTFMove(representation);
         return event;
     }
 
     static VariableEvent movHint(MinifiedID id, VirtualRegister bytecodeReg)
     {
         VariableEvent event;
-        event.m_which.id = id.bits();
-        event.m_representation.virtualReg = bytecodeReg.offset();
+        WhichType which;
+        which.id = id.bits();
+        VariableRepresentation representation;
+        representation.virtualReg = bytecodeReg.offset();
         event.m_kind = MovHintEvent;
+        event.m_which = WTFMove(which);
+        event.m_representation = WTFMove(representation);
         return event;
     }
 
     VariableEventKind kind() const
     {
@@ -188,97 +216,98 @@
     MinifiedID id() const
     {
         ASSERT(
             m_kind == BirthToFill || m_kind == Fill || m_kind == BirthToSpill || m_kind == Spill
             || m_kind == Death || m_kind == MovHintEvent || m_kind == Birth);
-        return MinifiedID::fromBits(m_which.id);
+        return MinifiedID::fromBits(m_which.get().id);
     }
 
     DataFormat dataFormat() const
     {
         ASSERT(
             m_kind == BirthToFill || m_kind == Fill || m_kind == BirthToSpill || m_kind == Spill
             || m_kind == SetLocalEvent);
-        return static_cast<DataFormat>(m_dataFormat);
+        return m_dataFormat;
     }
 
     MacroAssembler::RegisterID gpr() const
     {
         ASSERT(m_kind == BirthToFill || m_kind == Fill);
         ASSERT(m_dataFormat);
         ASSERT(m_dataFormat != DataFormatDouble);
 #if USE(JSVALUE32_64)
         ASSERT(!(m_dataFormat & DataFormatJS));
 #endif
-        return m_representation.gpr;
+        return m_representation.get().gpr;
     }
 
 #if USE(JSVALUE32_64)
     MacroAssembler::RegisterID tagGPR() const
     {
         ASSERT(m_kind == BirthToFill || m_kind == Fill);
         ASSERT(m_dataFormat & DataFormatJS);
-        return m_representation.pair.tagGPR;
+        return m_representation.get().pair.tagGPR;
     }
     MacroAssembler::RegisterID payloadGPR() const
     {
         ASSERT(m_kind == BirthToFill || m_kind == Fill);
         ASSERT(m_dataFormat & DataFormatJS);
-        return m_representation.pair.payloadGPR;
+        return m_representation.get().pair.payloadGPR;
     }
 #endif // USE(JSVALUE32_64)
 
     MacroAssembler::FPRegisterID fpr() const
     {
         ASSERT(m_kind == BirthToFill || m_kind == Fill);
         ASSERT(m_dataFormat == DataFormatDouble);
-        return m_representation.fpr;
+        return m_representation.get().fpr;
     }
 
     VirtualRegister spillRegister() const
     {
         ASSERT(m_kind == BirthToSpill || m_kind == Spill);
-        return VirtualRegister(m_representation.virtualReg);
+        return VirtualRegister(m_representation.get().virtualReg);
     }
 
     VirtualRegister bytecodeRegister() const
     {
         ASSERT(m_kind == SetLocalEvent || m_kind == MovHintEvent);
-        return VirtualRegister(m_representation.virtualReg);
+        return VirtualRegister(m_representation.get().virtualReg);
     }
 
     VirtualRegister machineRegister() const
     {
         ASSERT(m_kind == SetLocalEvent);
-        return VirtualRegister(m_which.virtualReg);
+        return VirtualRegister(m_which.get().virtualReg);
     }
 
-    const VariableRepresentation& variableRepresentation() const { return m_representation; }
+    VariableRepresentation variableRepresentation() const { return m_representation.get(); }
 
     void dump(PrintStream&) const;
 
 private:
     void dumpFillInfo(const char* name, PrintStream&) const;
     void dumpSpillInfo(const char* name, PrintStream&) const;
 
-    union {
+    union WhichType {
         int virtualReg;
-        uintptr_t id;
-    } m_which;
+        unsigned id;
+    };
+    Packed<WhichType> m_which;
 
     // For BirthToFill, Fill:
     //   - The GPR or FPR, or a GPR pair.
     // For BirthToSpill, Spill:
     //   - The virtual register.
     // For MovHintEvent, SetLocalEvent:
     //   - The bytecode operand.
     // For Death:
     //   - Unused.
-    VariableRepresentation m_representation;
+    Packed<VariableRepresentation> m_representation;
 
-    int8_t m_kind;
-    int8_t m_dataFormat;
+    VariableEventKind m_kind;
+    DataFormat m_dataFormat { DataFormatNone };
 };
 
 } } // namespace JSC::DFG
 
 #endif // ENABLE(DFG_JIT)
