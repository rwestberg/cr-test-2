diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderTextControlSingleLine.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderTextControlSingleLine.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderTextControlSingleLine.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderTextControlSingleLine.cpp
@@ -310,11 +310,11 @@
     LayoutUnit result = LayoutUnit::fromFloatCeil(charWidth * factor);
 
     float maxCharWidth = 0.f;
 
 #if !PLATFORM(IOS_FAMILY)
-    const AtomicString& family = style().fontCascade().firstFamily();
+    const AtomString& family = style().fontCascade().firstFamily();
     // Since Lucida Grande is the default font, we want this to match the width
     // of MS Shell Dlg, the default font for textareas in Firefox, Safari Win and
     // IE for some encodings (in IE, the default font is encoding specific).
     // 4027 is the (xMax - xMin) value in the "head" font table for MS Shell Dlg.
     if (family == "Lucida Grande")
@@ -374,17 +374,17 @@
     if (innerTextElement())
         return innerTextElement()->scrollTop();
     return RenderBlockFlow::scrollTop();
 }
 
-void RenderTextControlSingleLine::setScrollLeft(int newLeft, ScrollClamping)
+void RenderTextControlSingleLine::setScrollLeft(int newLeft, ScrollType, ScrollClamping)
 {
     if (innerTextElement())
         innerTextElement()->setScrollLeft(newLeft);
 }
 
-void RenderTextControlSingleLine::setScrollTop(int newTop, ScrollClamping)
+void RenderTextControlSingleLine::setScrollTop(int newTop, ScrollType, ScrollClamping)
 {
     if (innerTextElement())
         innerTextElement()->setScrollTop(newTop);
 }
 
