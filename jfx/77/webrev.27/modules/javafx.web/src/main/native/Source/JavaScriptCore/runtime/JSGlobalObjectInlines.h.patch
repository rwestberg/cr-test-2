diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSGlobalObjectInlines.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSGlobalObjectInlines.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSGlobalObjectInlines.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSGlobalObjectInlines.h
@@ -60,40 +60,40 @@
     // Note: it only makes sense to call this from the main thread. If you're
     // trying to prove this behavior on the compiler thread, you'll want to
     // carefully set up watchpoints to have correct ordering while JS code is
     // executing concurrently.
 
-    return arrayIteratorProtocolWatchpoint().isStillValid() && !isHavingABadTime() && arrayPrototypeChainIsSane();
+    return arrayIteratorProtocolWatchpointSet().isStillValid() && !isHavingABadTime() && arrayPrototypeChainIsSane();
 }
 
 // We're non-observable if the iteration protocol hasn't changed.
 //
 // Note: it only makes sense to call this from the main thread. If you're
 // trying to prove this behavior on the compiler thread, you'll want to
 // carefully set up watchpoints to have correct ordering while JS code is
 // executing concurrently.
 ALWAYS_INLINE bool JSGlobalObject::isMapPrototypeIteratorProtocolFastAndNonObservable()
 {
-    return mapIteratorProtocolWatchpoint().isStillValid();
+    return mapIteratorProtocolWatchpointSet().isStillValid();
 }
 
 ALWAYS_INLINE bool JSGlobalObject::isSetPrototypeIteratorProtocolFastAndNonObservable()
 {
-    return setIteratorProtocolWatchpoint().isStillValid();
+    return setIteratorProtocolWatchpointSet().isStillValid();
 }
 
 ALWAYS_INLINE bool JSGlobalObject::isStringPrototypeIteratorProtocolFastAndNonObservable()
 {
-    return stringIteratorProtocolWatchpoint().isStillValid();
+    return stringIteratorProtocolWatchpointSet().isStillValid();
 }
 
 ALWAYS_INLINE bool JSGlobalObject::isMapPrototypeSetFastAndNonObservable()
 {
-    return mapSetWatchpoint().isStillValid();
+    return mapSetWatchpointSet().isStillValid();
 }
 
 ALWAYS_INLINE bool JSGlobalObject::isSetPrototypeAddFastAndNonObservable()
 {
-    return setAddWatchpoint().isStillValid();
+    return setAddWatchpointSet().isStillValid();
 }
 
 } // namespace JSC
