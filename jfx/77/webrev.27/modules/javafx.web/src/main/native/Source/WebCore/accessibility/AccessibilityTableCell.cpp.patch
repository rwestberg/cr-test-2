diff a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityTableCell.cpp b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityTableCell.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityTableCell.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityTableCell.cpp
@@ -146,11 +146,11 @@
     return node() && node()->hasTagName(thTag);
 }
 
 bool AccessibilityTableCell::isColumnHeaderCell() const
 {
-    const AtomicString& scope = getAttribute(scopeAttr);
+    const AtomString& scope = getAttribute(scopeAttr);
     if (scope == "col" || scope == "colgroup")
         return true;
     if (scope == "row" || scope == "rowgroup")
         return false;
     if (!isTableHeaderCell())
@@ -175,11 +175,11 @@
     return false;
 }
 
 bool AccessibilityTableCell::isRowHeaderCell() const
 {
-    const AtomicString& scope = getAttribute(scopeAttr);
+    const AtomString& scope = getAttribute(scopeAttr);
     if (scope == "row" || scope == "rowgroup")
         return true;
     if (scope == "col" || scope == "colgroup")
         return false;
     if (!isTableHeaderCell())
@@ -267,11 +267,11 @@
             continue;
 
         std::pair<unsigned, unsigned> childRowRange;
         tableCell->rowIndexRange(childRowRange);
 
-        const AtomicString& scope = tableCell->getAttribute(scopeAttr);
+        const AtomString& scope = tableCell->getAttribute(scopeAttr);
         if (scope == "colgroup" && isTableCellInSameColGroup(tableCell))
             headers.append(tableCell);
         else if (tableCell->isColumnHeaderCell())
             headers.append(tableCell);
     }
@@ -292,11 +292,11 @@
     for (unsigned column = 0; column < colRange.first; column++) {
         AccessibilityTableCell* tableCell = parent->cellForColumnAndRow(column, rowRange.first);
         if (!tableCell || tableCell == this || headers.contains(tableCell))
             continue;
 
-        const AtomicString& scope = tableCell->getAttribute(scopeAttr);
+        const AtomString& scope = tableCell->getAttribute(scopeAttr);
         if (scope == "rowgroup" && isTableCellInSameRowGroup(tableCell))
             headers.append(tableCell);
         else if (tableCell->isRowHeaderCell())
             headers.append(tableCell);
     }
@@ -383,11 +383,11 @@
     return axObjectCache()->getOrCreate(headerCell);
 }
 
 int AccessibilityTableCell::axColumnIndex() const
 {
-    const AtomicString& colIndexValue = getAttribute(aria_colindexAttr);
+    const AtomString& colIndexValue = getAttribute(aria_colindexAttr);
     if (colIndexValue.toInt() >= 1)
         return colIndexValue.toInt();
 
     // "ARIA 1.1: If the set of columns which is present in the DOM is contiguous, and if there are no cells which span more than one row
     // or column in that set, then authors may place aria-colindex on each row, setting the value to the index of the first column of the set."
@@ -401,11 +401,11 @@
 
 int AccessibilityTableCell::axRowIndex() const
 {
     // ARIA 1.1: Authors should place aria-rowindex on each row. Authors may also place
     // aria-rowindex on all of the children or owned elements of each row.
-    const AtomicString& rowIndexValue = getAttribute(aria_rowindexAttr);
+    const AtomString& rowIndexValue = getAttribute(aria_rowindexAttr);
     if (rowIndexValue.toInt() >= 1)
         return rowIndexValue.toInt();
 
     if (AccessibilityTableRow* parentRow = this->parentRow())
         return parentRow->axRowIndex();
@@ -418,11 +418,11 @@
     // According to the ARIA spec, "If aria-colpan is used on an element for which the host language
     // provides an equivalent attribute, user agents must ignore the value of aria-colspan."
     if (hasAttribute(colspanAttr))
         return -1;
 
-    const AtomicString& colSpanValue = getAttribute(aria_colspanAttr);
+    const AtomString& colSpanValue = getAttribute(aria_colspanAttr);
     // ARIA 1.1: Authors must set the value of aria-colspan to an integer greater than or equal to 1.
     if (colSpanValue.toInt() >= 1)
         return colSpanValue.toInt();
 
     return -1;
@@ -433,11 +433,11 @@
     // According to the ARIA spec, "If aria-rowspan is used on an element for which the host language
     // provides an equivalent attribute, user agents must ignore the value of aria-rowspan."
     if (hasAttribute(rowspanAttr))
         return -1;
 
-    const AtomicString& rowSpanValue = getAttribute(aria_rowspanAttr);
+    const AtomString& rowSpanValue = getAttribute(aria_rowspanAttr);
 
     // ARIA 1.1: Authors must set the value of aria-rowspan to an integer greater than or equal to 0.
     // Setting the value to 0 indicates that the cell or gridcell is to span all the remaining rows in the row group.
     if (rowSpanValue == "0")
         return 0;
