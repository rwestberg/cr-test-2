diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLEntryPointScaffolding.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLEntryPointScaffolding.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLEntryPointScaffolding.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLEntryPointScaffolding.h
@@ -25,37 +25,164 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
+#include "WHLSLMangledNames.h"
+#include "WHLSLPipelineDescriptor.h"
+#include <wtf/HashMap.h>
+#include <wtf/text/WTFString.h>
+
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
 class FunctionDefinition;
 
 }
 
+struct EntryPointItems;
 class Intrinsics;
 
 namespace Metal {
 
-// FIXME: This needs to know about the pipeline state object to emit function prologues and epilogues.
+class TypeNamer;
+
 class EntryPointScaffolding {
+    WTF_MAKE_FAST_ALLOCATED;
+public:
+    virtual ~EntryPointScaffolding() = default;
+
+    virtual void emitHelperTypes(StringBuilder&, Indentation<4>) = 0;
+    virtual void emitSignature(StringBuilder&, MangledFunctionName, Indentation<4>) = 0;
+    virtual void emitUnpack(StringBuilder&, Indentation<4>) = 0;
+    virtual void emitPack(StringBuilder&, MangledVariableName existingVariableName, MangledVariableName, Indentation<4>) = 0;
+
+    Vector<MangledVariableName>& parameterVariables() { return m_parameterVariables; }
+
+protected:
+    EntryPointScaffolding(AST::FunctionDefinition&, Intrinsics&, TypeNamer&, EntryPointItems&, HashMap<Binding*, size_t>& resourceMap, Layout&, std::function<MangledVariableName()>&& generateNextVariableName);
+
+    void emitResourceHelperTypes(StringBuilder&, Indentation<4>);
+
+    enum class IncludePrecedingComma {
+        Yes,
+        No
+    };
+    bool emitResourceSignature(StringBuilder&, IncludePrecedingComma);
+    bool emitBuiltInsSignature(StringBuilder&, IncludePrecedingComma);
+
+    void emitMangledInputPath(StringBuilder&, Vector<String>& path);
+    void emitMangledOutputPath(StringBuilder&, Vector<String>& path);
+    void emitUnpackResourcesAndNamedBuiltIns(StringBuilder&, Indentation<4>);
+
+    AST::FunctionDefinition& m_functionDefinition;
+    Intrinsics& m_intrinsics;
+    TypeNamer& m_typeNamer;
+    EntryPointItems& m_entryPointItems;
+    HashMap<Binding*, size_t>& m_resourceMap;
+    Layout& m_layout;
+    std::function<MangledVariableName()> m_generateNextVariableName;
+
+    struct LengthInformation {
+        MangledStructureElementName elementName;
+        MangledVariableName temporaryName;
+        unsigned index;
+    };
+    struct NamedBinding {
+        MangledStructureElementName elementName;
+        unsigned index;
+        Optional<LengthInformation> lengthInformation;
+    };
+    struct NamedBindGroup {
+        MangledTypeName structName;
+        MangledVariableName variableName;
+        Vector<NamedBinding> namedBindings;
+        unsigned argumentBufferIndex;
+    };
+    Vector<NamedBindGroup> m_namedBindGroups; // Parallel to m_layout
+
+    struct NamedBuiltIn {
+        size_t indexInEntryPointItems;
+        MangledVariableName variableName;
+    };
+    Vector<NamedBuiltIn> m_namedBuiltIns;
+
+    Vector<MangledVariableName> m_parameterVariables;
+};
+
+class VertexEntryPointScaffolding final : public EntryPointScaffolding {
+public:
+    VertexEntryPointScaffolding(AST::FunctionDefinition&, Intrinsics&, TypeNamer&, EntryPointItems&, HashMap<Binding*, size_t>& resourceMap, Layout&, std::function<MangledVariableName()>&& generateNextVariableName, HashMap<VertexAttribute*, size_t>& matchedVertexAttributes);
+    virtual ~VertexEntryPointScaffolding() = default;
+
+private:
+    void emitHelperTypes(StringBuilder&, Indentation<4>) override;
+    void emitSignature(StringBuilder&, MangledFunctionName, Indentation<4>) override;
+    void emitUnpack(StringBuilder&, Indentation<4>) override;
+    void emitPack(StringBuilder&, MangledVariableName existingVariableName, MangledVariableName, Indentation<4>) override;
+
+    HashMap<VertexAttribute*, size_t>& m_matchedVertexAttributes;
+    MangledTypeName m_stageInStructName;
+    MangledTypeName m_returnStructName;
+    MangledVariableName m_stageInParameterName;
+
+    struct NamedStageIn {
+        size_t indexInEntryPointItems;
+        MangledStructureElementName elementName;
+        unsigned attributeIndex;
+    };
+    Vector<NamedStageIn> m_namedStageIns;
+
+    struct NamedOutput {
+        MangledStructureElementName elementName;
+        MangledOrNativeTypeName internalTypeName;
+    };
+    Vector<NamedOutput> m_namedOutputs;
+};
+
+class FragmentEntryPointScaffolding final : public EntryPointScaffolding {
 public:
-    EntryPointScaffolding(AST::FunctionDefinition&, Intrinsics&);
+    FragmentEntryPointScaffolding(AST::FunctionDefinition&, Intrinsics&, TypeNamer&, EntryPointItems&, HashMap<Binding*, size_t>& resourceMap, Layout&, std::function<MangledVariableName()>&& generateNextVariableName, HashMap<AttachmentDescriptor*, size_t>& matchedColorAttachments);
+    virtual ~FragmentEntryPointScaffolding() = default;
 
-    String helperTypes();
-    String signature();
-    String unpack();
-    String pack(const String& existingVariableName, const String& variableName);
+private:
+    void emitHelperTypes(StringBuilder&, Indentation<4>) override;
+    void emitSignature(StringBuilder&, MangledFunctionName, Indentation<4>) override;
+    void emitUnpack(StringBuilder&, Indentation<4>) override;
+    void emitPack(StringBuilder&, MangledVariableName existingVariableName, MangledVariableName, Indentation<4>) override;
+
+    MangledTypeName m_stageInStructName;
+    MangledTypeName m_returnStructName;
+    MangledVariableName m_stageInParameterName;
+
+    struct NamedStageIn {
+        size_t indexInEntryPointItems;
+        MangledStructureElementName elementName;
+        unsigned attributeIndex;
+    };
+    Vector<NamedStageIn> m_namedStageIns;
+
+    struct NamedOutput {
+        MangledStructureElementName elementName;
+        MangledOrNativeTypeName internalTypeName;
+    };
+    Vector<NamedOutput> m_namedOutputs;
+};
+
+class ComputeEntryPointScaffolding final : public EntryPointScaffolding {
+public:
+    ComputeEntryPointScaffolding(AST::FunctionDefinition&, Intrinsics&, TypeNamer&, EntryPointItems&, HashMap<Binding*, size_t>& resourceMap, Layout&, std::function<MangledVariableName()>&& generateNextVariableName);
+    virtual ~ComputeEntryPointScaffolding() = default;
 
 private:
-    AST::FunctionDefinition* m_functionDefinition;
-    Intrinsics* m_intrinsics;
+    void emitHelperTypes(StringBuilder&, Indentation<4>) override;
+    void emitSignature(StringBuilder&, MangledFunctionName, Indentation<4>) override;
+    void emitUnpack(StringBuilder&, Indentation<4>) override;
+    void emitPack(StringBuilder&, MangledVariableName existingVariableName, MangledVariableName, Indentation<4>) override;
 };
 
 }
 
 }
