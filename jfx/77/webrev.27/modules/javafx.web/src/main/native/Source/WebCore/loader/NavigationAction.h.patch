diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/NavigationAction.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/NavigationAction.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/NavigationAction.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/NavigationAction.h
@@ -28,12 +28,14 @@
 
 #pragma once
 
 #include "AdClickAttribution.h"
 #include "BackForwardItemIdentifier.h"
+#include "FrameIdentifier.h"
 #include "FrameLoaderTypes.h"
 #include "LayoutPoint.h"
+#include "PageIdentifier.h"
 #include "ResourceRequest.h"
 #include "SecurityOrigin.h"
 #include "UserGestureIndicator.h"
 #include <wtf/Forward.h>
 #include <wtf/Optional.h>
@@ -50,30 +52,30 @@
 // or indirectly as doing so prevents its destruction even after navigating away from it because
 // DocumentLoader keeps around the NavigationAction for the last navigation.
 class NavigationAction {
 public:
     NavigationAction();
-    WEBCORE_EXPORT NavigationAction(Document&, const ResourceRequest&, InitiatedByMainFrame, NavigationType = NavigationType::Other, ShouldOpenExternalURLsPolicy = ShouldOpenExternalURLsPolicy::ShouldNotAllow, Event* = nullptr, const AtomicString& downloadAttribute = nullAtom());
-    NavigationAction(Document&, const ResourceRequest&, InitiatedByMainFrame, FrameLoadType, bool isFormSubmission, Event* = nullptr, ShouldOpenExternalURLsPolicy = ShouldOpenExternalURLsPolicy::ShouldNotAllow, const AtomicString& downloadAttribute = nullAtom());
+    WEBCORE_EXPORT NavigationAction(Document&, const ResourceRequest&, InitiatedByMainFrame, NavigationType = NavigationType::Other, ShouldOpenExternalURLsPolicy = ShouldOpenExternalURLsPolicy::ShouldNotAllow, Event* = nullptr, const AtomString& downloadAttribute = nullAtom());
+    NavigationAction(Document&, const ResourceRequest&, InitiatedByMainFrame, FrameLoadType, bool isFormSubmission, Event* = nullptr, ShouldOpenExternalURLsPolicy = ShouldOpenExternalURLsPolicy::ShouldNotAllow, const AtomString& downloadAttribute = nullAtom());
 
     WEBCORE_EXPORT ~NavigationAction();
 
     WEBCORE_EXPORT NavigationAction(const NavigationAction&);
     NavigationAction& operator=(const NavigationAction&);
 
     NavigationAction(NavigationAction&&);
     NavigationAction& operator=(NavigationAction&&);
 
-    using PageIDAndFrameIDPair = std::pair<uint64_t /* pageID */, uint64_t /* frameID */>;
+    using PageIDAndFrameIDPair = std::pair<PageIdentifier, FrameIdentifier>; // FIXME: Use GlobalFrameIdentifier.
     class Requester {
     public:
         Requester(const Document&);
 
         const URL& url() const { return m_url; }
         const SecurityOrigin& securityOrigin() const { return *m_origin; }
-        uint64_t pageID() const { return m_pageIDAndFrameIDPair.first; }
-        uint64_t frameID() const { return m_pageIDAndFrameIDPair.second; }
+        PageIdentifier pageID() const { return m_pageIDAndFrameIDPair.first; }
+        FrameIdentifier frameID() const { return m_pageIDAndFrameIDPair.second; }
     private:
         URL m_url;
         RefPtr<SecurityOrigin> m_origin;
         PageIDAndFrameIDPair m_pageIDAndFrameIDPair;
     };
@@ -91,11 +93,11 @@
     struct MouseEventData : UIEventWithKeyStateData {
         MouseEventData(const MouseEvent&);
 
         LayoutPoint absoluteLocation;
         FloatPoint locationInRootViewCoordinates;
-        unsigned short button;
+        short button;
         unsigned short syntheticClickType;
         bool buttonDown;
     };
     const Optional<UIEventWithKeyStateData>& keyStateEventData() const { return m_keyStateEventData; }
     const Optional<MouseEventData>& mouseEventData() const { return m_mouseEventData; }
@@ -114,11 +116,11 @@
 
     ShouldOpenExternalURLsPolicy shouldOpenExternalURLsPolicy() const { return m_shouldOpenExternalURLsPolicy; }
     void setShouldOpenExternalURLsPolicy(ShouldOpenExternalURLsPolicy policy) {  m_shouldOpenExternalURLsPolicy = policy; }
     InitiatedByMainFrame initiatedByMainFrame() const { return m_initiatedByMainFrame; }
 
-    const AtomicString& downloadAttribute() const { return m_downloadAttribute; }
+    const AtomString& downloadAttribute() const { return m_downloadAttribute; }
 
     bool treatAsSameOriginNavigation() const { return m_treatAsSameOriginNavigation; }
 
     bool hasOpenedFrames() const { return m_hasOpenedFrames; }
     void setHasOpenedFrames(bool value) { m_hasOpenedFrames = value; }
@@ -127,17 +129,20 @@
     void setOpenedByDOMWithOpener() { m_openedByDOMWithOpener = true; }
 
     void setTargetBackForwardItem(HistoryItem&);
     const Optional<BackForwardItemIdentifier>& targetBackForwardItemIdentifier() const { return m_targetBackForwardItemIdentifier; }
 
+    void setSourceBackForwardItem(HistoryItem*);
+    const Optional<BackForwardItemIdentifier>& sourceBackForwardItemIdentifier() const { return m_sourceBackForwardItemIdentifier; }
+
     LockHistory lockHistory() const { return m_lockHistory; }
     void setLockHistory(LockHistory lockHistory) { m_lockHistory = lockHistory; }
 
     LockBackForwardList lockBackForwardList() const { return m_lockBackForwardList; }
     void setLockBackForwardList(LockBackForwardList lockBackForwardList) { m_lockBackForwardList = lockBackForwardList; }
 
-    const Optional<AdClickAttribution>& adClickAttribution() { return m_adClickAttribution; };
+    const Optional<AdClickAttribution>& adClickAttribution() const { return m_adClickAttribution; };
     void setAdClickAttribution(AdClickAttribution&& adClickAttribution) { m_adClickAttribution = adClickAttribution; };
 
 private:
     // Do not add a strong reference to the originating document or a subobject that holds the
     // originating document. See comment above the class for more details.
@@ -147,15 +152,16 @@
     ShouldOpenExternalURLsPolicy m_shouldOpenExternalURLsPolicy;
     InitiatedByMainFrame m_initiatedByMainFrame;
     Optional<UIEventWithKeyStateData> m_keyStateEventData;
     Optional<MouseEventData> m_mouseEventData;
     RefPtr<UserGestureToken> m_userGestureToken { UserGestureIndicator::currentUserGesture() };
-    AtomicString m_downloadAttribute;
+    AtomString m_downloadAttribute;
     bool m_treatAsSameOriginNavigation;
     bool m_hasOpenedFrames { false };
     bool m_openedByDOMWithOpener { false };
     Optional<BackForwardItemIdentifier> m_targetBackForwardItemIdentifier;
+    Optional<BackForwardItemIdentifier> m_sourceBackForwardItemIdentifier;
     LockHistory m_lockHistory { LockHistory::No };
     LockBackForwardList m_lockBackForwardList { LockBackForwardList::No };
     Optional<AdClickAttribution> m_adClickAttribution;
 };
 
