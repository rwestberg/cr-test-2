diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/Threading.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/Threading.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/Threading.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/Threading.h
@@ -34,20 +34,21 @@
 #include <stdint.h>
 #include <wtf/Atomics.h>
 #include <wtf/Expected.h>
 #include <wtf/FastTLS.h>
 #include <wtf/Function.h>
+#include <wtf/HashMap.h>
+#include <wtf/HashSet.h>
 #include <wtf/PlatformRegisters.h>
 #include <wtf/Ref.h>
 #include <wtf/RefPtr.h>
 #include <wtf/StackBounds.h>
 #include <wtf/StackStats.h>
 #include <wtf/ThreadSafeRefCounted.h>
-#include <wtf/ThreadSpecific.h>
 #include <wtf/Vector.h>
 #include <wtf/WordLock.h>
-#include <wtf/text/AtomicStringTable.h>
+#include <wtf/text/AtomStringTable.h>
 
 #if USE(PTHREADS) && !OS(DARWIN)
 #include <signal.h>
 #endif
 
@@ -69,36 +70,36 @@
 // We use SIGUSR1 to suspend and resume machine threads in JavaScriptCore.
 constexpr const int SigThreadSuspendResume = SIGUSR1;
 
 #endif
 
-// FIXME: The following functions remain because they are used from WebKit Windows support library,
-// WebKitQuartzCoreAdditions.dll. When updating the support library, we should use new API instead
-// and the following workaound should be removed. And new code should not use the following APIs.
-// Remove this workaround code when <rdar://problem/31793213> is fixed.
-#if OS(WINDOWS)
-WTF_EXPORT_PRIVATE ThreadIdentifier createThread(ThreadFunction, void*, const char* threadName);
-WTF_EXPORT_PRIVATE int waitForThreadCompletion(ThreadIdentifier);
-#endif
+enum class GCThreadType : uint8_t {
+    None = 0,
+    Main,
+    Helper,
+};
 
 class Thread : public ThreadSafeRefCounted<Thread> {
 public:
     friend class ThreadGroup;
     friend WTF_EXPORT_PRIVATE void initializeThreading();
-#if OS(WINDOWS)
-    friend WTF_EXPORT_PRIVATE int waitForThreadCompletion(ThreadIdentifier);
-#endif
 
     WTF_EXPORT_PRIVATE ~Thread();
 
     // Returns nullptr if thread creation failed.
     // The thread name must be a literal since on some platforms it's passed in to the thread.
     WTF_EXPORT_PRIVATE static Ref<Thread> create(const char* threadName, Function<void()>&&);
 
     // Returns Thread object.
     static Thread& current();
 
+    // Set of all WTF::Thread created threads.
+    WTF_EXPORT_PRIVATE static HashSet<Thread*>& allThreads(const LockHolder&);
+    WTF_EXPORT_PRIVATE static Lock& allThreadsMutex();
+
+    WTF_EXPORT_PRIVATE unsigned numberOfThreadGroups();
+
 #if OS(WINDOWS)
     // Returns ThreadIdentifier directly. It is useful if the user only cares about identity
     // of threads. At that time, users should know that holding this ThreadIdentifier does not ensure
     // that the thread information is alive. While Thread::current() is not safe if it is called
     // from the destructor of the other TLS data, currentID() always returns meaningful thread ID.
@@ -143,29 +144,33 @@
     static void initializeCurrentThreadEvenIfNonWTFCreated();
 
     WTF_EXPORT_PRIVATE static const unsigned lockSpinLimit;
     WTF_EXPORT_PRIVATE static void yield();
 
+    WTF_EXPORT_PRIVATE static bool exchangeIsCompilationThread(bool newValue);
+    WTF_EXPORT_PRIVATE static void registerGCThread(GCThreadType);
+    WTF_EXPORT_PRIVATE static bool mayBeGCThread();
+
     WTF_EXPORT_PRIVATE void dump(PrintStream& out) const;
 
     static void initializePlatformThreading();
 
     const StackBounds& stack() const
     {
         return m_stack;
     }
 
-    AtomicStringTable* atomicStringTable()
+    AtomStringTable* atomStringTable()
     {
-        return m_currentAtomicStringTable;
+        return m_currentAtomStringTable;
     }
 
-    AtomicStringTable* setCurrentAtomicStringTable(AtomicStringTable* atomicStringTable)
+    AtomStringTable* setCurrentAtomStringTable(AtomStringTable* atomStringTable)
     {
-        AtomicStringTable* oldAtomicStringTable = m_currentAtomicStringTable;
-        m_currentAtomicStringTable = atomicStringTable;
-        return oldAtomicStringTable;
+        AtomStringTable* oldAtomStringTable = m_currentAtomStringTable;
+        m_currentAtomStringTable = atomStringTable;
+        return oldAtomStringTable;
     }
 
 #if ENABLE(STACK_STATS)
     StackStats::PerThreadStats& stackStats()
     {
@@ -195,14 +200,17 @@
 
 #if OS(DARWIN)
     mach_port_t machThread() { return m_platformThread; }
 #endif
 
+    bool isCompilationThread() const { return m_isCompilationThread; }
+    GCThreadType gcThreadType() const { return static_cast<GCThreadType>(m_gcThreadType); }
+
     struct NewThreadContext;
     static void entryPoint(NewThreadContext*);
 protected:
-    Thread() = default;
+    Thread();
 
     void initializeInThread();
 
     // Internal platform-specific Thread establishment implementation.
     bool establishHandle(NewThreadContext*);
@@ -231,15 +239,15 @@
 
         // The thread has been detached and can no longer be joined on. At this point, the thread must take care of cleaning up after itself.
         Detached,
     };
 
-    JoinableState joinableState() { return m_joinableState; }
+    JoinableState joinableState() const { return m_joinableState; }
     void didBecomeDetached() { m_joinableState = Detached; }
     void didExit();
     void didJoin() { m_joinableState = Joined; }
-    bool hasExited() { return m_didExit; }
+    bool hasExited() const { return m_didExit; }
 
     // These functions are only called from ThreadGroup.
     ThreadGroupAddResult addToThreadGroup(const AbstractLocker& threadGroupLocker, ThreadGroup&);
     void removeFromThreadGroup(const AbstractLocker& threadGroupLocker, ThreadGroup&);
 
@@ -273,41 +281,52 @@
     // - second, after all thread-specific destructors were invoked, it gets called again - this time, we remove the
     // Thread from the threadMap, completing the cleanup.
     static void THREAD_SPECIFIC_CALL destructTLS(void* data);
 
     JoinableState m_joinableState { Joinable };
-    bool m_isShuttingDown { false };
-    bool m_didExit { false };
-    bool m_isDestroyedOnce { false };
+    bool m_isShuttingDown : 1;
+    bool m_didExit : 1;
+    bool m_isDestroyedOnce : 1;
+    bool m_isCompilationThread: 1;
+    unsigned m_gcThreadType : 2;
 
     // Lock & ParkingLot rely on ThreadSpecific. But Thread object can be destroyed even after ThreadSpecific things are destroyed.
     // Use WordLock since WordLock does not depend on ThreadSpecific and this "Thread".
     WordLock m_mutex;
     StackBounds m_stack { StackBounds::emptyBounds() };
-    Vector<std::weak_ptr<ThreadGroup>> m_threadGroups;
+    HashMap<ThreadGroup*, std::weak_ptr<ThreadGroup>> m_threadGroupMap;
     PlatformThreadHandle m_handle;
 #if OS(WINDOWS)
     ThreadIdentifier m_id { 0 };
 #elif OS(DARWIN)
     mach_port_t m_platformThread { MACH_PORT_NULL };
 #elif USE(PTHREADS)
     PlatformRegisters* m_platformRegisters { nullptr };
     unsigned m_suspendCount { 0 };
 #endif
 
-    AtomicStringTable* m_currentAtomicStringTable { nullptr };
-    AtomicStringTable m_defaultAtomicStringTable;
+    AtomStringTable* m_currentAtomStringTable { nullptr };
+    AtomStringTable m_defaultAtomStringTable;
 
 #if ENABLE(STACK_STATS)
     StackStats::PerThreadStats m_stackStats;
 #endif
     void* m_savedStackPointerAtVMEntry { nullptr };
     void* m_savedLastStackTop;
 public:
     void* m_apiData { nullptr };
 };
 
+inline Thread::Thread()
+    : m_isShuttingDown(false)
+    , m_didExit(false)
+    , m_isDestroyedOnce(false)
+    , m_isCompilationThread(false)
+    , m_gcThreadType(static_cast<unsigned>(GCThreadType::None))
+{
+}
+
 inline Thread* Thread::currentMayBeNull()
 {
 #if !HAVE(FAST_TLS)
     ASSERT(s_key != InvalidThreadSpecificKey);
     return static_cast<Thread*>(threadSpecificGet(s_key));
@@ -338,11 +357,6 @@
 }
 
 } // namespace WTF
 
 using WTF::Thread;
-
-#if OS(WINDOWS)
-using WTF::ThreadIdentifier;
-using WTF::createThread;
-using WTF::waitForThreadCompletion;
-#endif
+using WTF::GCThreadType;
