diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/SecurityPolicyViolationEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/SecurityPolicyViolationEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/SecurityPolicyViolationEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/SecurityPolicyViolationEvent.h
@@ -29,11 +29,11 @@
 
 namespace WebCore {
 
 class SecurityPolicyViolationEvent final : public Event {
 public:
-    static Ref<SecurityPolicyViolationEvent> create(const AtomicString& type, CanBubble canBubble, IsCancelable cancelable, const String& documentURI, const String& referrer, const String& blockedURI, const String& violatedDirective, const String& effectiveDirective, const String& originalPolicy, const String& sourceFile, unsigned short statusCode, int lineNumber, int columnNumber)
+    static Ref<SecurityPolicyViolationEvent> create(const AtomString& type, CanBubble canBubble, IsCancelable cancelable, const String& documentURI, const String& referrer, const String& blockedURI, const String& violatedDirective, const String& effectiveDirective, const String& originalPolicy, const String& sourceFile, unsigned short statusCode, int lineNumber, int columnNumber)
     {
         return adoptRef(*new SecurityPolicyViolationEvent(type, canBubble, cancelable, documentURI, referrer, blockedURI, violatedDirective, effectiveDirective, originalPolicy, sourceFile, statusCode, lineNumber, columnNumber));
     }
 
     static Ref<SecurityPolicyViolationEvent> createForBindings()
@@ -55,11 +55,11 @@
 
         template<class Encoder> void encode(Encoder&) const;
         template<class Decoder> static bool decode(Decoder&, Init&);
     };
 
-    static Ref<SecurityPolicyViolationEvent> create(const AtomicString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
+    static Ref<SecurityPolicyViolationEvent> create(const AtomString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
     {
         return adoptRef(*new SecurityPolicyViolationEvent(type, initializer, isTrusted));
     }
 
     const String& documentURI() const { return m_documentURI; }
@@ -78,11 +78,11 @@
 private:
     SecurityPolicyViolationEvent()
     {
     }
 
-    SecurityPolicyViolationEvent(const AtomicString& type, CanBubble canBubble, IsCancelable cancelable, const String& documentURI, const String& referrer, const String& blockedURI, const String& violatedDirective, const String& effectiveDirective, const String& originalPolicy, const String& sourceFile, unsigned short statusCode, int lineNumber, int columnNumber)
+    SecurityPolicyViolationEvent(const AtomString& type, CanBubble canBubble, IsCancelable cancelable, const String& documentURI, const String& referrer, const String& blockedURI, const String& violatedDirective, const String& effectiveDirective, const String& originalPolicy, const String& sourceFile, unsigned short statusCode, int lineNumber, int columnNumber)
         : Event(type, canBubble, cancelable)
         , m_documentURI(documentURI)
         , m_referrer(referrer)
         , m_blockedURI(blockedURI)
         , m_violatedDirective(violatedDirective)
@@ -93,11 +93,11 @@
         , m_lineNumber(lineNumber)
         , m_columnNumber(columnNumber)
     {
     }
 
-    SecurityPolicyViolationEvent(const AtomicString& type, const Init& initializer, IsTrusted isTrusted)
+    SecurityPolicyViolationEvent(const AtomString& type, const Init& initializer, IsTrusted isTrusted)
         : Event(type, initializer, isTrusted)
         , m_documentURI(initializer.documentURI)
         , m_referrer(initializer.referrer)
         , m_blockedURI(initializer.blockedURI)
         , m_violatedDirective(initializer.violatedDirective)
