diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/DeviceOrientationEvent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/DeviceOrientationEvent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/DeviceOrientationEvent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/DeviceOrientationEvent.cpp
@@ -35,11 +35,11 @@
 DeviceOrientationEvent::DeviceOrientationEvent()
     : m_orientation(DeviceOrientationData::create())
 {
 }
 
-DeviceOrientationEvent::DeviceOrientationEvent(const AtomicString& eventType, DeviceOrientationData* orientation)
+DeviceOrientationEvent::DeviceOrientationEvent(const AtomString& eventType, DeviceOrientationData* orientation)
     : Event(eventType, CanBubble::No, IsCancelable::No)
     , m_orientation(orientation)
 {
 }
 
@@ -68,11 +68,11 @@
 Optional<double> DeviceOrientationEvent::compassAccuracy() const
 {
     return m_orientation->compassAccuracy();
 }
 
-void DeviceOrientationEvent::initDeviceOrientationEvent(const AtomicString& type, bool bubbles, bool cancelable, Optional<double> alpha, Optional<double> beta, Optional<double> gamma, Optional<double> compassHeading, Optional<double> compassAccuracy)
+void DeviceOrientationEvent::initDeviceOrientationEvent(const AtomString& type, bool bubbles, bool cancelable, Optional<double> alpha, Optional<double> beta, Optional<double> gamma, Optional<double> compassHeading, Optional<double> compassAccuracy)
 {
     if (isBeingDispatched())
         return;
 
     initEvent(type, bubbles, cancelable);
@@ -84,11 +84,11 @@
 Optional<bool> DeviceOrientationEvent::absolute() const
 {
     return m_orientation->absolute();
 }
 
-void DeviceOrientationEvent::initDeviceOrientationEvent(const AtomicString& type, bool bubbles, bool cancelable, Optional<double> alpha, Optional<double> beta, Optional<double> gamma, Optional<bool> absolute)
+void DeviceOrientationEvent::initDeviceOrientationEvent(const AtomString& type, bool bubbles, bool cancelable, Optional<double> alpha, Optional<double> beta, Optional<double> gamma, Optional<bool> absolute)
 {
     if (isBeingDispatched())
         return;
 
     initEvent(type, bubbles, cancelable);
