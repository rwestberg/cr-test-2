diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamBYOBReader.js b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamBYOBReader.js
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamBYOBReader.js
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamBYOBReader.js
@@ -47,11 +47,11 @@
 
     if (!@isReadableStreamBYOBReader(this))
         return @Promise.@reject(@makeThisTypeError("ReadableStreamBYOBReader", "cancel"));
 
     if (!@getByIdDirectPrivate(this, "ownerReadableStream"))
-        return @Promise.@reject(new @TypeError("cancel() called on a reader owned by no readable stream"));
+        return @Promise.@reject(@makeTypeError("cancel() called on a reader owned by no readable stream"));
 
     return @readableStreamReaderGenericCancel(this, reason);
 }
 
 function read(view)
@@ -60,20 +60,20 @@
 
     if (!@isReadableStreamBYOBReader(this))
         return @Promise.@reject(@makeThisTypeError("ReadableStreamBYOBReader", "read"));
 
     if (!@getByIdDirectPrivate(this, "ownerReadableStream"))
-        return @Promise.@reject(new @TypeError("read() called on a reader owned by no readable stream"));
+        return @Promise.@reject(@makeTypeError("read() called on a reader owned by no readable stream"));
 
     if (!@isObject(view))
-        return @Promise.@reject(new @TypeError("Provided view is not an object"));
+        return @Promise.@reject(@makeTypeError("Provided view is not an object"));
 
     if (!@ArrayBuffer.@isView(view))
-        return @Promise.@reject(new @TypeError("Provided view is not an ArrayBufferView"));
+        return @Promise.@reject(@makeTypeError("Provided view is not an ArrayBufferView"));
 
     if (view.byteLength === 0)
-        return @Promise.@reject(new @TypeError("Provided view cannot have a 0 byteLength"));
+        return @Promise.@reject(@makeTypeError("Provided view cannot have a 0 byteLength"));
 
     return @readableStreamBYOBReaderRead(this, view);
 }
 
 function releaseLock()
