diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/plugins/YouTubePluginReplacement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/plugins/YouTubePluginReplacement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/plugins/YouTubePluginReplacement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/plugins/YouTubePluginReplacement.cpp
@@ -83,23 +83,23 @@
 
     root.appendChild(*m_embedShadowElement);
 
     auto iframeElement = HTMLIFrameElement::create(HTMLNames::iframeTag, m_parentElement->document());
     if (m_attributes.contains("width"))
-        iframeElement->setAttributeWithoutSynchronization(HTMLNames::widthAttr, AtomicString("100%", AtomicString::ConstructFromLiteral));
+        iframeElement->setAttributeWithoutSynchronization(HTMLNames::widthAttr, AtomString("100%", AtomString::ConstructFromLiteral));
 
     const auto& heightValue = m_attributes.find("height");
     if (heightValue != m_attributes.end()) {
-        iframeElement->setAttribute(HTMLNames::styleAttr, AtomicString("max-height: 100%", AtomicString::ConstructFromLiteral));
+        iframeElement->setAttribute(HTMLNames::styleAttr, AtomString("max-height: 100%", AtomString::ConstructFromLiteral));
         iframeElement->setAttributeWithoutSynchronization(HTMLNames::heightAttr, heightValue->value);
     }
 
     iframeElement->setAttributeWithoutSynchronization(HTMLNames::srcAttr, youTubeURL(m_attributes.get("src")));
-    iframeElement->setAttributeWithoutSynchronization(HTMLNames::frameborderAttr, AtomicString("0", AtomicString::ConstructFromLiteral));
+    iframeElement->setAttributeWithoutSynchronization(HTMLNames::frameborderAttr, AtomString("0", AtomString::ConstructFromLiteral));
 
     // Disable frame flattening for this iframe.
-    iframeElement->setAttributeWithoutSynchronization(HTMLNames::scrollingAttr, AtomicString("no", AtomicString::ConstructFromLiteral));
+    iframeElement->setAttributeWithoutSynchronization(HTMLNames::scrollingAttr, AtomString("no", AtomString::ConstructFromLiteral));
     m_embedShadowElement->appendChild(iframeElement);
 
     return true;
 }
 
@@ -325,16 +325,13 @@
     StringBuilder finalURL;
     if (isYouTubeShortenedURL)
         finalURL.appendLiteral("http://www.youtube.com");
     else
         finalURL.append(srcURLPrefix);
-    finalURL.appendLiteral("/embed/");
-    finalURL.append(videoID);
-    if (!query.isEmpty()) {
-        finalURL.append('?');
-        finalURL.append(query);
-    }
+    finalURL.append("/embed/", videoID);
+    if (!query.isEmpty())
+        finalURL.append('?', query);
     return finalURL.toString();
 }
 
 bool YouTubePluginReplacement::supportsURL(const URL& url)
 {
