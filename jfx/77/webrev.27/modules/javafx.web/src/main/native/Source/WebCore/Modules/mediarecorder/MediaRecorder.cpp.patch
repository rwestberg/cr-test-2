diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediarecorder/MediaRecorder.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediarecorder/MediaRecorder.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediarecorder/MediaRecorder.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediarecorder/MediaRecorder.cpp
@@ -33,27 +33,30 @@
 #include "Document.h"
 #include "EventNames.h"
 #include "MediaRecorderErrorEvent.h"
 #include "MediaRecorderPrivate.h"
 #include "SharedBuffer.h"
+#include <wtf/IsoMallocInlines.h>
 
 #if PLATFORM(COCOA)
 #include "MediaRecorderPrivateAVFImpl.h"
 #endif
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(MediaRecorder);
+
 creatorFunction MediaRecorder::m_customCreator = nullptr;
 
 ExceptionOr<Ref<MediaRecorder>> MediaRecorder::create(Document& document, Ref<MediaStream>&& stream, Options&& options)
 {
     auto privateInstance = MediaRecorder::getPrivateImpl(stream->privateStream());
     if (!privateInstance)
         return Exception { NotSupportedError, "The MediaRecorder is unsupported on this platform"_s };
     auto recorder = adoptRef(*new MediaRecorder(document, WTFMove(stream), WTFMove(privateInstance), WTFMove(options)));
     recorder->suspendIfNeeded();
-    return WTFMove(recorder);
+    return recorder;
 }
 
 void MediaRecorder::setCustomPrivateRecorderCreator(creatorFunction creator)
 {
     m_customCreator = creator;
@@ -152,12 +155,12 @@
 
 Ref<Blob> MediaRecorder::createRecordingDataBlob()
 {
     auto data = m_private->fetchData();
     if (!data)
-        return Blob::create();
-    return Blob::create(*data, m_private->mimeType());
+        return Blob::create(scriptExecutionContext()->sessionID());
+    return Blob::create(scriptExecutionContext()->sessionID(), *data, m_private->mimeType());
 }
 
 void MediaRecorder::didAddOrRemoveTrack()
 {
     scheduleDeferredTask([this] {
