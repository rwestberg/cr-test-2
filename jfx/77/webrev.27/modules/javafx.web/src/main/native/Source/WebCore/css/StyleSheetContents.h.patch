diff a/modules/javafx.web/src/main/native/Source/WebCore/css/StyleSheetContents.h b/modules/javafx.web/src/main/native/Source/WebCore/css/StyleSheetContents.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/StyleSheetContents.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/StyleSheetContents.h
@@ -26,11 +26,11 @@
 #include <wtf/HashMap.h>
 #include <wtf/RefCounted.h>
 #include <wtf/URL.h>
 #include <wtf/Vector.h>
 #include <wtf/WeakPtr.h>
-#include <wtf/text/AtomicStringHash.h>
+#include <wtf/text/AtomStringHash.h>
 
 namespace WebCore {
 
 class CSSStyleSheet;
 class CachedCSSStyleSheet;
@@ -60,12 +60,12 @@
 
     WEBCORE_EXPORT ~StyleSheetContents();
 
     const CSSParserContext& parserContext() const { return m_parserContext; }
 
-    const AtomicString& defaultNamespace() { return m_defaultNamespace; }
-    const AtomicString& namespaceURIFromPrefix(const AtomicString& prefix);
+    const AtomString& defaultNamespace() { return m_defaultNamespace; }
+    const AtomString& namespaceURIFromPrefix(const AtomString& prefix);
 
     void parseAuthorStyleSheet(const CachedCSSStyleSheet*, const SecurityOrigin*);
     WEBCORE_EXPORT bool parseString(const String&);
 
     bool isCacheable() const;
@@ -92,11 +92,11 @@
     void setIsUserStyleSheet(bool b) { m_isUserStyleSheet = b; }
     bool isUserStyleSheet() const { return m_isUserStyleSheet; }
     void setHasSyntacticallyValidCSSHeader(bool b) { m_hasSyntacticallyValidCSSHeader = b; }
     bool hasSyntacticallyValidCSSHeader() const { return m_hasSyntacticallyValidCSSHeader; }
 
-    void parserAddNamespace(const AtomicString& prefix, const AtomicString& uri);
+    void parserAddNamespace(const AtomString& prefix, const AtomString& uri);
     void parserAppendRule(Ref<StyleRuleBase>&&);
     void parserSetEncodingFromCharsetRule(const String& encoding);
     void parserSetUsesStyleBasedEditability() { m_usesStyleBasedEditability = true; }
 
     void clearRules();
@@ -159,13 +159,13 @@
 
     String m_encodingFromCharsetRule;
     Vector<RefPtr<StyleRuleImport>> m_importRules;
     Vector<RefPtr<StyleRuleNamespace>> m_namespaceRules;
     Vector<RefPtr<StyleRuleBase>> m_childRules;
-    typedef HashMap<AtomicString, AtomicString> PrefixNamespaceURIMap;
+    typedef HashMap<AtomString, AtomString> PrefixNamespaceURIMap;
     PrefixNamespaceURIMap m_namespaces;
-    AtomicString m_defaultNamespace;
+    AtomString m_defaultNamespace;
 
     bool m_isUserStyleSheet;
     bool m_loadCompleted { false };
     bool m_hasSyntacticallyValidCSSHeader { true };
     bool m_didLoadErrorOccur { false };
