diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/DefaultAudioDestinationNode.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/DefaultAudioDestinationNode.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/DefaultAudioDestinationNode.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/DefaultAudioDestinationNode.cpp
@@ -30,16 +30,19 @@
 
 #include "AudioContext.h"
 #include "AudioDestination.h"
 #include "Logging.h"
 #include "ScriptExecutionContext.h"
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/MainThread.h>
 
 const unsigned EnabledInputChannels = 2;
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(DefaultAudioDestinationNode);
+
 DefaultAudioDestinationNode::DefaultAudioDestinationNode(AudioContext& context)
     : AudioDestinationNode(context, AudioDestination::hardwareSampleRate())
 {
     // Node-specific default mixing rules.
     m_channelCount = 2;
@@ -55,10 +58,11 @@
 void DefaultAudioDestinationNode::initialize()
 {
     ASSERT(isMainThread());
     if (isInitialized())
         return;
+    ALWAYS_LOG(LOGIDENTIFIER);
 
     createDestination();
     AudioNode::initialize();
 }
 
@@ -66,10 +70,11 @@
 {
     ASSERT(isMainThread());
     if (!isInitialized())
         return;
 
+    ALWAYS_LOG(LOGIDENTIFIER);
     m_destination->stop();
     m_destination = nullptr;
     m_numberOfInputChannels = 0;
 
     AudioNode::uninitialize();
@@ -83,10 +88,12 @@
     m_destination = AudioDestination::create(*this, m_inputDeviceId, m_numberOfInputChannels, channelCount(), hardwareSampleRate);
 }
 
 void DefaultAudioDestinationNode::enableInput(const String& inputDeviceId)
 {
+    ALWAYS_LOG(LOGIDENTIFIER);
+
     ASSERT(isMainThread());
     if (m_numberOfInputChannels != EnabledInputChannels) {
         m_numberOfInputChannels = EnabledInputChannels;
         m_inputDeviceId = inputDeviceId;
 
@@ -109,29 +116,26 @@
 void DefaultAudioDestinationNode::resume(Function<void ()>&& function)
 {
     ASSERT(isInitialized());
     if (isInitialized())
         m_destination->start();
-    if (auto scriptExecutionContext = context().scriptExecutionContext())
-        scriptExecutionContext->postTask(WTFMove(function));
+    context().postTask(WTFMove(function));
 }
 
 void DefaultAudioDestinationNode::suspend(Function<void ()>&& function)
 {
     ASSERT(isInitialized());
     if (isInitialized())
         m_destination->stop();
-    if (auto scriptExecutionContext = context().scriptExecutionContext())
-        scriptExecutionContext->postTask(WTFMove(function));
+    context().postTask(WTFMove(function));
 }
 
 void DefaultAudioDestinationNode::close(Function<void()>&& function)
 {
     ASSERT(isInitialized());
     uninitialize();
-    if (auto scriptExecutionContext = context().scriptExecutionContext())
-        scriptExecutionContext->postTask(WTFMove(function));
+    context().postTask(WTFMove(function));
 }
 
 unsigned DefaultAudioDestinationNode::maxChannelCount() const
 {
     return AudioDestination::maxChannelCount();
@@ -142,10 +146,11 @@
     // The channelCount for the input to this node controls the actual number of channels we
     // send to the audio hardware. It can only be set depending on the maximum number of
     // channels supported by the hardware.
 
     ASSERT(isMainThread());
+    ALWAYS_LOG(LOGIDENTIFIER, channelCount);
 
     if (!maxChannelCount() || channelCount > maxChannelCount())
         return Exception { InvalidStateError };
 
     auto oldChannelCount = this->channelCount();
