diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmFaultSignalHandler.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmFaultSignalHandler.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmFaultSignalHandler.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmFaultSignalHandler.cpp
@@ -28,10 +28,13 @@
 
 #if ENABLE(WEBASSEMBLY)
 
 #include "ExecutableAllocator.h"
 #include "MachineContext.h"
+#include "WasmCallee.h"
+#include "WasmCalleeRegistry.h"
+#include "WasmCapabilities.h"
 #include "WasmExceptionType.h"
 #include "WasmMemory.h"
 #include "WasmThunks.h"
 
 #include <wtf/HashSet.h>
@@ -45,13 +48,10 @@
 namespace WasmFaultSignalHandlerInternal {
 static const bool verbose = false;
 }
 }
 
-static Lock codeLocationsLock;
-static LazyNeverDestroyed<HashSet<std::tuple<void*, void*>>> codeLocations; // (start, end)
-
 static bool fastHandlerInstalled { false };
 
 #if ENABLE(WEBASSEMBLY_FAST_MEMORY)
 
 static SignalAction trapHandler(Signal, SigInfo& sigInfo, PlatformRegisters& context)
@@ -73,15 +73,14 @@
             dataLogLnIf(WasmFaultSignalHandlerInternal::verbose, "checking faulting address: ", RawPointer(faultingAddress), " is in an active fast memory");
             faultedInActiveFastMemory = Wasm::Memory::addressIsInActiveFastMemory(faultingAddress);
         }
         if (faultedInActiveFastMemory) {
             dataLogLnIf(WasmFaultSignalHandlerInternal::verbose, "found active fast memory for faulting address");
-            LockHolder locker(codeLocationsLock);
-            for (auto range : codeLocations.get()) {
-                void* start;
-                void* end;
-                std::tie(start, end) = range;
+            auto& calleeRegistry = CalleeRegistry::singleton();
+            auto locker = holdLock(calleeRegistry.getLock());
+            for (auto* callee : calleeRegistry.allCallees(locker)) {
+                auto [start, end] = callee->range();
                 dataLogLnIf(WasmFaultSignalHandlerInternal::verbose, "function start: ", RawPointer(start), " end: ", RawPointer(end));
                 if (start <= faultingInstruction && faultingInstruction < end) {
                     dataLogLnIf(WasmFaultSignalHandlerInternal::verbose, "found match");
                     MacroAssemblerCodeRef<JITThunkPtrTag> exceptionStub = Thunks::singleton().existingStub(throwExceptionFromWasmThunkGenerator);
                     // If for whatever reason we don't have a stub then we should just treat this like a regular crash.
@@ -98,44 +97,30 @@
     return SignalAction::NotHandled;
 }
 
 #endif // ENABLE(WEBASSEMBLY_FAST_MEMORY)
 
-void registerCode(void* start, void* end)
-{
-    if (!fastMemoryEnabled())
-        return;
-    LockHolder locker(codeLocationsLock);
-    codeLocations->add(std::make_tuple(start, end));
-}
-
-void unregisterCode(void* start, void* end)
-{
-    if (!fastMemoryEnabled())
-        return;
-    LockHolder locker(codeLocationsLock);
-    codeLocations->remove(std::make_tuple(start, end));
-}
-
 bool fastMemoryEnabled()
 {
     return fastHandlerInstalled;
 }
 
 void enableFastMemory()
 {
 #if ENABLE(WEBASSEMBLY_FAST_MEMORY)
     static std::once_flag once;
     std::call_once(once, [] {
+        if (!Wasm::isSupported())
+            return;
+
         if (!Options::useWebAssemblyFastMemory())
             return;
 
         installSignalHandler(Signal::BadAccess, [] (Signal signal, SigInfo& sigInfo, PlatformRegisters& ucontext) {
             return trapHandler(signal, sigInfo, ucontext);
         });
 
-        codeLocations.construct();
         fastHandlerInstalled = true;
     });
 #endif // ENABLE(WEBASSEMBLY_FAST_MEMORY)
 }
 
