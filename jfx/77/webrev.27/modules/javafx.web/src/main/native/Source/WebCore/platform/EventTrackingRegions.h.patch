diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/EventTrackingRegions.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/EventTrackingRegions.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/EventTrackingRegions.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/EventTrackingRegions.h
@@ -28,48 +28,26 @@
 #include "Region.h"
 #include <wtf/HashMap.h>
 #include <wtf/text/StringHash.h>
 #include <wtf/text/WTFString.h>
 
-#if ENABLE(POINTER_EVENTS)
-#include "CSSPrimitiveValueMappings.h"
-#include "ScrollingCoordinatorTypes.h"
-#include "TouchAction.h"
-#endif
-
 namespace WebCore {
 
 enum class TrackingType : uint8_t {
     NotTracking = 0,
     Asynchronous = 1,
     Synchronous = 2
 };
 
-#if ENABLE(POINTER_EVENTS)
-typedef uint64_t ScrollingNodeID;
-struct TouchActionData {
-    OptionSet<TouchAction> touchActions { TouchAction::Auto };
-    ScrollingNodeID scrollingNodeID { 0 };
-    Region region;
-};
-
-bool operator==(const TouchActionData&, const TouchActionData&);
-inline bool operator!=(const TouchActionData& a, const TouchActionData& b) { return !(a == b); }
-#endif
-
 struct EventTrackingRegions {
     // Region for which events can be dispatched without blocking scrolling.
     Region asynchronousDispatchRegion;
 
     // Regions for which events must be sent before performing the default behavior.
     // The key is the Event Name with an active handler.
     HashMap<String, Region> eventSpecificSynchronousDispatchRegions;
 
-#if ENABLE(POINTER_EVENTS)
-    Vector<TouchActionData> touchActionData;
-#endif
-
     bool isEmpty() const;
 
     void translate(IntSize);
     void uniteSynchronousRegion(const String& eventName, const Region&);
     void unite(const EventTrackingRegions&);
