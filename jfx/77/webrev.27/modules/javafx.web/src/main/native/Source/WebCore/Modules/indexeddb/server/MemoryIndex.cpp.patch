diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/MemoryIndex.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/MemoryIndex.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/MemoryIndex.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/MemoryIndex.cpp
@@ -124,11 +124,11 @@
     const IDBKeyData* keyValue = m_records->lowestValueForKey(keyToLookFor);
 
     if (!keyValue)
         return { };
 
-    return type == IndexedDB::IndexRecordType::Key ? IDBGetResult(*keyValue) : IDBGetResult(m_objectStore.valueForKeyRange(*keyValue));
+    return type == IndexedDB::IndexRecordType::Key ? IDBGetResult(*keyValue) : IDBGetResult(*keyValue, m_objectStore.valueForKeyRange(*keyValue), m_objectStore.info().keyPath());
 }
 
 uint64_t MemoryIndex::countForKeyRange(const IDBKeyRangeData& inRange)
 {
     LOG(IndexedDB, "MemoryIndex::countForKeyRange");
@@ -154,11 +154,11 @@
 
 void MemoryIndex::getAllRecords(const IDBKeyRangeData& keyRangeData, Optional<uint32_t> count, IndexedDB::GetAllType type, IDBGetAllResult& result) const
 {
     LOG(IndexedDB, "MemoryIndex::getAllRecords");
 
-    result = { type };
+    result = { type, m_objectStore.info().keyPath() };
 
     if (!m_records)
         return;
 
     uint32_t targetCount;
@@ -177,14 +177,12 @@
         range.lowerKey = key;
         range.lowerOpen = true;
 
         auto allValues = m_records->allValuesForKey(key, targetCount - currentCount);
         for (auto& keyValue : allValues) {
-            if (type == IndexedDB::GetAllType::Keys) {
-                IDBKeyData keyCopy { keyValue };
-                result.addKey(WTFMove(keyCopy));
-            } else
+            result.addKey(IDBKeyData(keyValue));
+            if (type == IndexedDB::GetAllType::Values)
                 result.addValue(m_objectStore.valueForKeyRange(keyValue));
         }
 
         currentCount += allValues.size();
     }
@@ -194,11 +192,11 @@
 IDBError MemoryIndex::putIndexKey(const IDBKeyData& valueKey, const IndexKey& indexKey)
 {
     LOG(IndexedDB, "MemoryIndex::provisionalPutIndexKey");
 
     if (!m_records) {
-        m_records = std::make_unique<IndexValueStore>(m_info.unique());
+        m_records = makeUnique<IndexValueStore>(m_info.unique());
         notifyCursorsOfAllRecordsChanged();
     }
 
     if (!m_info.multiEntry()) {
         IDBKeyData key = indexKey.asOneKey();
@@ -259,11 +257,11 @@
 {
     auto result = m_cursors.add(info.identifier(), nullptr);
     if (!result.isNewEntry)
         return nullptr;
 
-    result.iterator->value = std::make_unique<MemoryIndexCursor>(*this, info);
+    result.iterator->value = makeUnique<MemoryIndexCursor>(*this, info);
     return result.iterator->value.get();
 }
 
 } // namespace IDBServer
 } // namespace WebCore
