diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLCollection.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLCollection.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLCollection.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLCollection.cpp
@@ -24,15 +24,18 @@
 #include "HTMLCollection.h"
 
 #include "CachedHTMLCollection.h"
 #include "HTMLNames.h"
 #include "NodeRareData.h"
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
 using namespace HTMLNames;
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(HTMLCollection);
+
 inline auto HTMLCollection::rootTypeFromCollectionType(CollectionType type) -> RootType
 {
     switch (type) {
     case DocImages:
     case DocApplets:
@@ -154,11 +157,11 @@
         auto locker = holdLock(m_namedElementCacheAssignmentLock);
         m_namedElementCache = nullptr;
     }
 }
 
-Element* HTMLCollection::namedItemSlow(const AtomicString& name) const
+Element* HTMLCollection::namedItemSlow(const AtomString& name) const
 {
     // The pathological case. We need to walk the entire subtree.
     updateNamedElementCache();
     ASSERT(m_namedElementCache);
 
@@ -174,11 +177,11 @@
 
     return nullptr;
 }
 
 // Documented in https://dom.spec.whatwg.org/#interface-htmlcollection.
-const Vector<AtomicString>& HTMLCollection::supportedPropertyNames()
+const Vector<AtomString>& HTMLCollection::supportedPropertyNames()
 {
     updateNamedElementCache();
     ASSERT(m_namedElementCache);
 
     return m_namedElementCache->propertyNames();
@@ -200,29 +203,29 @@
 void HTMLCollection::updateNamedElementCache() const
 {
     if (hasNamedElementCache())
         return;
 
-    auto cache = std::make_unique<CollectionNamedElementCache>();
+    auto cache = makeUnique<CollectionNamedElementCache>();
 
     unsigned size = length();
     for (unsigned i = 0; i < size; ++i) {
         Element& element = *item(i);
-        const AtomicString& id = element.getIdAttribute();
+        const AtomString& id = element.getIdAttribute();
         if (!id.isEmpty())
             cache->appendToIdCache(id, element);
         if (!is<HTMLElement>(element))
             continue;
-        const AtomicString& name = element.getNameAttribute();
+        const AtomString& name = element.getNameAttribute();
         if (!name.isEmpty() && id != name && (type() != DocAll || nameShouldBeVisibleInDocumentAll(downcast<HTMLElement>(element))))
             cache->appendToNameCache(name, element);
     }
 
     setNamedItemCache(WTFMove(cache));
 }
 
-Vector<Ref<Element>> HTMLCollection::namedItems(const AtomicString& name) const
+Vector<Ref<Element>> HTMLCollection::namedItems(const AtomString& name) const
 {
     // FIXME: This non-virtual function can't possibly be doing the correct thing for
     // any derived class that overrides the virtual namedItem function.
 
     Vector<Ref<Element>> elements;
