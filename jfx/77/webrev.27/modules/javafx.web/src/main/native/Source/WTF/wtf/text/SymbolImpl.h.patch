diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/SymbolImpl.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/SymbolImpl.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/SymbolImpl.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/SymbolImpl.h
@@ -51,11 +51,11 @@
     RegisteredSymbolImpl* asRegisteredSymbolImpl();
 
     WTF_EXPORT_PRIVATE static Ref<SymbolImpl> createNullSymbol();
     WTF_EXPORT_PRIVATE static Ref<SymbolImpl> create(StringImpl& rep);
 
-    class StaticSymbolImpl : private StringImplShape {
+    class StaticSymbolImpl final : private StringImplShape {
         WTF_MAKE_NONCOPYABLE(StaticSymbolImpl);
     public:
         template<unsigned characterCount>
         constexpr StaticSymbolImpl(const char (&characters)[characterCount], Flags flags = s_flagDefault)
             : StringImplShape(s_refCountFlagIsStaticString, characterCount - 1, characters,
@@ -122,11 +122,11 @@
     unsigned m_hashForSymbol;
     Flags m_flags { s_flagDefault };
 };
 static_assert(sizeof(SymbolImpl) == sizeof(SymbolImpl::StaticSymbolImpl), "");
 
-class PrivateSymbolImpl : public SymbolImpl {
+class PrivateSymbolImpl final : public SymbolImpl {
 public:
     WTF_EXPORT_PRIVATE static Ref<PrivateSymbolImpl> createNullSymbol();
     WTF_EXPORT_PRIVATE static Ref<PrivateSymbolImpl> create(StringImpl& rep);
 
 private:
@@ -144,11 +144,11 @@
         : SymbolImpl(s_flagIsPrivate)
     {
     }
 };
 
-class RegisteredSymbolImpl : public SymbolImpl {
+class RegisteredSymbolImpl final : public SymbolImpl {
 private:
     friend class StringImpl;
     friend class SymbolImpl;
     friend class SymbolRegistry;
 
