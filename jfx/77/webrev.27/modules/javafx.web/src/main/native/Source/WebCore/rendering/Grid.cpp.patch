diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/Grid.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/Grid.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/Grid.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/Grid.cpp
@@ -231,11 +231,11 @@
 
     unsigned& varyingTrackIndex = (m_direction == ForColumns) ? m_rowIndex : m_columnIndex;
     const unsigned endOfVaryingTrackIndex = (m_direction == ForColumns) ? m_grid.size() : m_grid[0].size();
     for (; varyingTrackIndex < endOfVaryingTrackIndex; ++varyingTrackIndex) {
         if (isEmptyAreaEnough(rowSpan, columnSpan)) {
-            std::unique_ptr<GridArea> result = std::make_unique<GridArea>(GridSpan::translatedDefiniteGridSpan(m_rowIndex, m_rowIndex + rowSpan), GridSpan::translatedDefiniteGridSpan(m_columnIndex, m_columnIndex + columnSpan));
+            std::unique_ptr<GridArea> result = makeUnique<GridArea>(GridSpan::translatedDefiniteGridSpan(m_rowIndex, m_rowIndex + rowSpan), GridSpan::translatedDefiniteGridSpan(m_columnIndex, m_columnIndex + columnSpan));
             // Advance the iterator to avoid an infinite loop where we would return the same grid area over and over.
             ++varyingTrackIndex;
             return result;
         }
     }
