diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/CredentialStorage.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/CredentialStorage.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/CredentialStorage.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/CredentialStorage.h
@@ -25,10 +25,11 @@
 
 #pragma once
 
 #include "Credential.h"
 #include "ProtectionSpaceHash.h"
+#include "SecurityOriginData.h"
 #include <wtf/HashMap.h>
 #include <wtf/HashSet.h>
 #include <wtf/text/StringHash.h>
 #include <wtf/text/WTFString.h>
 
@@ -40,22 +41,26 @@
 public:
     // WebCore session credential storage.
     WEBCORE_EXPORT void set(const String&, const Credential&, const ProtectionSpace&, const URL&);
     WEBCORE_EXPORT Credential get(const String&, const ProtectionSpace&);
     WEBCORE_EXPORT void remove(const String&, const ProtectionSpace&);
+    WEBCORE_EXPORT void removeCredentialsWithOrigin(const SecurityOriginData&);
 
-    // OS persistent storage.
+    // OS credential storage.
     WEBCORE_EXPORT static Credential getFromPersistentStorage(const ProtectionSpace&);
+    WEBCORE_EXPORT static HashSet<SecurityOriginData> originsWithSessionCredentials();
+    WEBCORE_EXPORT static void removeSessionCredentialsWithOrigins(const Vector<SecurityOriginData>& origins);
+    WEBCORE_EXPORT static void clearSessionCredentials();
 
     WEBCORE_EXPORT void clearCredentials();
 
     // These methods work for authentication schemes that support sending credentials without waiting for a request. E.g., for HTTP Basic authentication scheme
     // a client should assume that all paths at or deeper than the depth of a known protected resource share are within the same protection space.
     WEBCORE_EXPORT bool set(const String&, const Credential&, const URL&); // Returns true if the URL corresponds to a known protection space, so credentials could be updated.
     WEBCORE_EXPORT Credential get(const String&, const URL&);
 
-    const HashSet<String>& originsWithCredentials() const { return m_originsWithCredentials; }
+    WEBCORE_EXPORT HashSet<SecurityOriginData> originsWithCredentials() const;
 
 private:
     HashMap<std::pair<String /* partitionName */, ProtectionSpace>, Credential> m_protectionSpaceToCredentialMap;
     HashSet<String> m_originsWithCredentials;
 
