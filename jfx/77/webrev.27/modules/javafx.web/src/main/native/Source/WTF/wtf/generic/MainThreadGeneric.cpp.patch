diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/generic/MainThreadGeneric.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/generic/MainThreadGeneric.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/generic/MainThreadGeneric.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/generic/MainThreadGeneric.cpp
@@ -1,10 +1,11 @@
 /*
  * Copyright (C) 2007, 2008 Apple Inc. All rights reserved.
  * Copyright (C) 2007 Justin Haygood (jhaygood@reaktix.com)
  * Copyright (C) 2016 Konstantin Tokavev <annulen@yandex.ru>
  * Copyright (C) 2016 Yusuke Suzuki <utatane.tea@gmail.com>
+ * Copyright (C) 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  *
@@ -34,10 +35,11 @@
 #if HAVE(PTHREAD_NP_H)
 #include <pthread_np.h>
 #endif
 
 #include <wtf/RunLoop.h>
+#include <wtf/NeverDestroyed.h>
 #if USE(GLIB)
 #include <wtf/glib/RunLoopSourcePriority.h>
 #endif
 
 namespace WTF {
@@ -45,10 +47,11 @@
 #if !HAVE(PTHREAD_MAIN_NP)
 static pthread_t mainThread;
 #endif
 
 class MainThreadDispatcher {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     MainThreadDispatcher()
         : m_timer(RunLoop::main(), this, &MainThreadDispatcher::fired)
     {
 #if USE(GLIB)
@@ -89,14 +92,19 @@
 bool isMainThreadIfInitialized()
 {
     return isMainThread();
 }
 
+bool isMainThreadInitialized()
+{
+    return true;
+}
+
 void scheduleDispatchFunctionsOnMainThread()
 {
     // Use a RunLoop::Timer instead of RunLoop::dispatch() to be able to use a different priority and
     // avoid the double queue because dispatchOnMainThread also queues the functions.
-    static MainThreadDispatcher dispatcher;
-    dispatcher.schedule();
+    static NeverDestroyed<MainThreadDispatcher> dispatcher;
+    dispatcher.get().schedule();
 }
 
 } // namespace WTF
