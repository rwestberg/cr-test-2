diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/blockformatting/BlockFormattingContext.cpp b/modules/javafx.web/src/main/native/Source/WebCore/layout/blockformatting/BlockFormattingContext.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/blockformatting/BlockFormattingContext.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/blockformatting/BlockFormattingContext.cpp
@@ -116,34 +116,73 @@
     // Place the inflow positioned children.
     placeInFlowPositionedChildren(formattingRoot);
     LOG_WITH_STREAM(FormattingContextLayout, stream << "[End] -> block formatting context -> formatting root(" << &root() << ")");
 }
 
+Optional<LayoutUnit> BlockFormattingContext::usedAvailableWidthForFloatAvoider(const FloatingContext& floatingContext, const Box& layoutBox) const
+{
+    // Normally the available width for an in-flow block level box is the width of the containing block's content box.
+    // However (and can't find it anywhere in the spec) non-floating positioned float avoider block level boxes are constrained by existing floats.
+    if (!layoutBox.isFloatAvoider() || layoutBox.isFloatingPositioned())
+        return { };
+    auto& floatingState = floatingContext.floatingState();
+    if (floatingState.isEmpty())
+        return { };
+    // Vertical static position is not computed yet, so let's just estimate it for now.
+    auto& formattingRoot = downcast<Container>(root());
+    auto verticalPosition = FormattingContext::mapTopToAncestor(layoutState(), layoutBox, formattingRoot);
+    auto constraints = floatingState.constraints({ verticalPosition }, formattingRoot);
+    if (!constraints.left && !constraints.right)
+        return { };
+    auto& containingBlock = downcast<Container>(*layoutBox.containingBlock());
+    auto& containingBlockDisplayBox = layoutState().displayBoxForLayoutBox(containingBlock);
+    auto availableWidth = containingBlockDisplayBox.contentBoxWidth();
+
+    LayoutUnit containingBlockLeft;
+    LayoutUnit containingBlockRight = containingBlockDisplayBox.right();
+    if (&containingBlock != &formattingRoot) {
+        // Move containing block left/right to the root's coordinate system.
+        containingBlockLeft = FormattingContext::mapLeftToAncestor(layoutState(), containingBlock, formattingRoot);
+        containingBlockRight = FormattingContext::mapRightToAncestor(layoutState(), containingBlock, formattingRoot);
+    }
+    auto containingBlockContentBoxLeft = containingBlockLeft + containingBlockDisplayBox.borderLeft() + containingBlockDisplayBox.paddingLeft().valueOr(0);
+    auto containingBlockContentBoxRight = containingBlockRight - containingBlockDisplayBox.borderRight() + containingBlockDisplayBox.paddingRight().valueOr(0);
+
+    // Shrink the available space if the floats are actually intruding at this vertical position.
+    if (constraints.left)
+        availableWidth -= std::max<LayoutUnit>(0, constraints.left->x - containingBlockContentBoxLeft);
+    if (constraints.right)
+        availableWidth -= std::max<LayoutUnit>(0, containingBlockContentBoxRight - constraints.right->x);
+    return availableWidth;
+}
+
 void BlockFormattingContext::layoutFormattingContextRoot(FloatingContext& floatingContext, const Box& layoutBox) const
 {
+    ASSERT(layoutBox.establishesFormattingContext());
     // Start laying out this formatting root in the formatting contenxt it lives in.
     LOG_WITH_STREAM(FormattingContextLayout, stream << "[Compute] -> [Position][Border][Padding][Width][Margin] -> for layoutBox(" << &layoutBox << ")");
     computeBorderAndPadding(layoutBox);
-    computeWidthAndMargin(layoutBox);
-    computeStaticPosition(floatingContext, layoutBox);
+    computeStaticVerticalPosition(floatingContext, layoutBox);
+
+    computeWidthAndMargin(layoutBox, usedAvailableWidthForFloatAvoider(floatingContext, layoutBox));
+    computeStaticHorizontalPosition(layoutBox);
     // Swich over to the new formatting context (the one that the root creates).
     auto formattingContext = layoutState().createFormattingContext(layoutBox);
     formattingContext->layout();
 
     // Come back and finalize the root's geometry.
     LOG_WITH_STREAM(FormattingContextLayout, stream << "[Compute] -> [Height][Margin] -> for layoutBox(" << &layoutBox << ")");
     computeHeightAndMargin(layoutBox);
+    // Now that we computed the root's height, we can go back and layout the out-of-flow content.
+    formattingContext->layoutOutOfFlowContent();
 
     // Float related final positioning.
     if (layoutBox.isFloatingPositioned()) {
         computeFloatingPosition(floatingContext, layoutBox);
         floatingContext.floatingState().append(layoutBox);
     } else if (layoutBox.establishesBlockFormattingContext())
         computePositionToAvoidFloats(floatingContext, layoutBox);
-
-    // Now that we computed the root's height, we can go back and layout the out-of-flow descedants (if any).
-    formattingContext->layoutOutOfFlowDescendants(layoutBox);
 }
 
 void BlockFormattingContext::placeInFlowPositionedChildren(const Box& layoutBox) const
 {
     if (!is<Container>(layoutBox))
@@ -170,20 +209,31 @@
         computeInFlowPositionedPosition();
     }
     LOG_WITH_STREAM(FormattingContextLayout, stream << "End: move in-flow positioned children -> parent: " << &layoutBox);
 }
 
-void BlockFormattingContext::computeStaticPosition(const FloatingContext& floatingContext, const Box& layoutBox) const
+void BlockFormattingContext::computeStaticVerticalPosition(const FloatingContext& floatingContext, const Box& layoutBox) const
 {
     auto& layoutState = this->layoutState();
-    layoutState.displayBoxForLayoutBox(layoutBox).setTopLeft(Geometry::staticPosition(layoutState, layoutBox));
+    layoutState.displayBoxForLayoutBox(layoutBox).setTop(Geometry::staticVerticalPosition(layoutState, layoutBox));
     if (layoutBox.hasFloatClear())
         computeEstimatedVerticalPositionForFloatClear(floatingContext, layoutBox);
     else if (layoutBox.establishesFormattingContext())
         computeEstimatedVerticalPositionForFormattingRoot(layoutBox);
 }
 
+void BlockFormattingContext::computeStaticHorizontalPosition(const Box& layoutBox) const
+{
+    layoutState().displayBoxForLayoutBox(layoutBox).setLeft(Geometry::staticHorizontalPosition(layoutState(), layoutBox));
+}
+
+void BlockFormattingContext::computeStaticPosition(const FloatingContext& floatingContext, const Box& layoutBox) const
+{
+    computeStaticVerticalPosition(floatingContext, layoutBox);
+    computeStaticHorizontalPosition(layoutBox);
+}
+
 void BlockFormattingContext::computeEstimatedVerticalPosition(const Box& layoutBox) const
 {
     auto& layoutState = this->layoutState();
     auto estimatedMarginBefore = MarginCollapse::estimatedMarginBefore(layoutState, layoutBox);
     setEstimatedMarginBefore(layoutBox, estimatedMarginBefore);
@@ -224,17 +274,21 @@
 void BlockFormattingContext::computeEstimatedVerticalPositionForFormattingRoot(const Box& layoutBox) const
 {
     ASSERT(layoutBox.establishesFormattingContext());
     ASSERT(!layoutBox.hasFloatClear());
 
-    auto avoidsFloats = layoutBox.isFloatingPositioned() || layoutBox.establishesBlockFormattingContext();
-    if (avoidsFloats)
+    if (layoutBox.isFloatingPositioned()) {
         computeEstimatedVerticalPositionForAncestors(layoutBox);
+        return;
+    }
+
+    computeEstimatedVerticalPosition(layoutBox);
+    computeEstimatedVerticalPositionForAncestors(layoutBox);
 
     // If the inline formatting root is also the root for the floats (happens when the root box also establishes a block formatting context)
     // the floats are in the coordinate system of this root. No need to find the final vertical position.
-    auto inlineContextInheritsFloats = layoutBox.establishesInlineFormattingContext() && !layoutBox.establishesBlockFormattingContext();
+    auto inlineContextInheritsFloats = layoutBox.establishesInlineFormattingContextOnly();
     if (inlineContextInheritsFloats) {
         computeEstimatedVerticalPosition(layoutBox);
         computeEstimatedVerticalPositionForAncestors(layoutBox);
     }
 }
@@ -289,21 +343,26 @@
     ASSERT(hasPrecomputedMarginBefore(layoutBox));
 
     if (floatingContext.floatingState().isEmpty())
         return;
 
-    if (auto adjustedPosition = floatingContext.positionForFloatAvoiding(layoutBox))
+    if (auto adjustedPosition = floatingContext.positionForFormattingContextRoot(layoutBox))
         layoutState.displayBoxForLayoutBox(layoutBox).setTopLeft(*adjustedPosition);
 }
 
-void BlockFormattingContext::computeWidthAndMargin(const Box& layoutBox) const
+void BlockFormattingContext::computeWidthAndMargin(const Box& layoutBox, Optional<LayoutUnit> usedAvailableWidth) const
 {
     auto& layoutState = this->layoutState();
-    auto containingBlockWidth = layoutState.displayBoxForLayoutBox(*layoutBox.containingBlock()).contentBoxWidth();
+
+    LayoutUnit availableWidth;
+    if (usedAvailableWidth)
+        availableWidth = *usedAvailableWidth;
+    else
+        availableWidth = layoutState.displayBoxForLayoutBox(*layoutBox.containingBlock()).contentBoxWidth();
 
     auto compute = [&](Optional<LayoutUnit> usedWidth) -> WidthAndMargin {
-        auto usedValues = UsedHorizontalValues { containingBlockWidth, usedWidth, { } };
+        auto usedValues = UsedHorizontalValues { availableWidth, usedWidth, { } };
         if (layoutBox.isInFlow())
             return Geometry::inFlowWidthAndMargin(layoutState, layoutBox, usedValues);
 
         if (layoutBox.isFloatingPositioned())
             return Geometry::floatingWidthAndMargin(layoutState, layoutBox, usedValues);
@@ -312,17 +371,17 @@
         return { };
     };
 
     auto widthAndMargin = compute({ });
 
-    if (auto maxWidth = Geometry::computedValueIfNotAuto(layoutBox.style().logicalMaxWidth(), containingBlockWidth)) {
+    if (auto maxWidth = Geometry::computedValueIfNotAuto(layoutBox.style().logicalMaxWidth(), availableWidth)) {
         auto maxWidthAndMargin = compute(maxWidth);
         if (widthAndMargin.width > maxWidthAndMargin.width)
             widthAndMargin = maxWidthAndMargin;
     }
 
-    auto minWidth = Geometry::computedValueIfNotAuto(layoutBox.style().logicalMinWidth(), containingBlockWidth).valueOr(0);
+    auto minWidth = Geometry::computedValueIfNotAuto(layoutBox.style().logicalMinWidth(), availableWidth).valueOr(0);
     auto minWidthAndMargin = compute(minWidth);
     if (widthAndMargin.width < minWidthAndMargin.width)
         widthAndMargin = minWidthAndMargin;
 
     auto& displayBox = layoutState.displayBoxForLayoutBox(layoutBox);
@@ -390,67 +449,55 @@
     MarginCollapse::updatePositiveNegativeMarginValues(layoutState, layoutBox);
     // Adjust the previous sibling's margin bottom now that this box's vertical margin is computed.
     MarginCollapse::updateMarginAfterForPreviousSibling(layoutState, layoutBox);
 }
 
-void BlockFormattingContext::computeIntrinsicWidthConstraints() const
+FormattingContext::IntrinsicWidthConstraints BlockFormattingContext::computedIntrinsicWidthConstraints() const
 {
     auto& layoutState = this->layoutState();
     auto& formattingRoot = root();
-    auto& formattingStateForRoot = layoutState.formattingStateForBox(formattingRoot);
-    ASSERT(!formattingStateForRoot.intrinsicWidthConstraints(formattingRoot));
-
-    // Can we just compute them without checking the children?
-    if (!Geometry::intrinsicWidthConstraintsNeedChildrenWidth(formattingRoot))
-        return formattingStateForRoot.setIntrinsicWidthConstraints(formattingRoot, Geometry::intrinsicWidthConstraints(layoutState, formattingRoot));
+    auto& formattingState = this->formattingState();
+    ASSERT(!formattingState.intrinsicWidthConstraints());
 
     // Visit the in-flow descendants and compute their min/max intrinsic width if needed.
     // 1. Go all the way down to the leaf node
     // 2. Check if actually need to visit all the boxes as we traverse down (already computed, container's min/max does not depend on descendants etc)
     // 3. As we climb back on the tree, compute min/max intrinsic width
     // (Any subtrees with new formatting contexts need to layout synchronously)
     Vector<const Box*> queue;
-    ASSERT(is<Container>(formattingRoot));
-    if (auto* firstChild = downcast<Container>(formattingRoot).firstInFlowOrFloatingChild())
-        queue.append(firstChild);
+    if (is<Container>(formattingRoot) && downcast<Container>(formattingRoot).hasInFlowOrFloatingChild())
+        queue.append(downcast<Container>(formattingRoot).firstInFlowOrFloatingChild());
 
-    auto& formattingState = this->formattingState();
+    IntrinsicWidthConstraints constraints;
     while (!queue.isEmpty()) {
         while (true) {
-            auto& childBox = *queue.last();
-            auto childIntrinsicWidthConstraints = formattingState.intrinsicWidthConstraints(childBox);
-            auto skipDescendants = childIntrinsicWidthConstraints || !Geometry::intrinsicWidthConstraintsNeedChildrenWidth(childBox) || childBox.establishesFormattingContext();
-
-            if (skipDescendants) {
-                if (!childIntrinsicWidthConstraints) {
-                    if (!Geometry::intrinsicWidthConstraintsNeedChildrenWidth(childBox))
-                        formattingState.setIntrinsicWidthConstraints(childBox, Geometry::intrinsicWidthConstraints(layoutState, childBox));
-                    else if (childBox.establishesFormattingContext())
-                        layoutState.createFormattingContext(childBox)->computeIntrinsicWidthConstraints();
-                    else
-                        ASSERT_NOT_REACHED();
-                }
-                queue.removeLast();
-                if (!childBox.nextInFlowOrFloatingSibling())
-                    break;
-                queue.append(childBox.nextInFlowOrFloatingSibling());
-                // Skip descendants
-                continue;
-            }
+            auto& layoutBox = *queue.last();
+            auto hasInFlowOrFloatingChild = is<Container>(layoutBox) && downcast<Container>(layoutBox).hasInFlowOrFloatingChild();
+            auto skipDescendants = formattingState.intrinsicWidthConstraintsForBox(layoutBox) || !hasInFlowOrFloatingChild || layoutBox.establishesFormattingContext() || layoutBox.style().width().isFixed();
+            if (skipDescendants)
+                break;
+            queue.append(downcast<Container>(layoutBox).firstInFlowOrFloatingChild());
         }
-
-        // Compute min/max intrinsic width bottom up.
+        // Compute min/max intrinsic width bottom up if needed.
         while (!queue.isEmpty()) {
-            auto& childBox = *queue.takeLast();
-            formattingState.setIntrinsicWidthConstraints(childBox, Geometry::intrinsicWidthConstraints(layoutState, childBox));
+            auto& layoutBox = *queue.takeLast();
+            auto desdendantConstraints = formattingState.intrinsicWidthConstraintsForBox(layoutBox);
+            if (!desdendantConstraints) {
+                desdendantConstraints = Geometry::intrinsicWidthConstraints(layoutState, layoutBox);
+                formattingState.setIntrinsicWidthConstraintsForBox(layoutBox, *desdendantConstraints);
+            }
+            constraints.minimum = std::max(constraints.minimum, desdendantConstraints->minimum);
+            constraints.maximum = std::max(constraints.maximum, desdendantConstraints->maximum);
             // Move over to the next sibling or take the next box in the queue.
-            if (!is<Container>(childBox) || !downcast<Container>(childBox).nextInFlowOrFloatingSibling())
-                continue;
-            queue.append(downcast<Container>(childBox).nextInFlowOrFloatingSibling());
+            if (auto* nextSibling = layoutBox.nextInFlowOrFloatingSibling()) {
+                queue.append(nextSibling);
+                break;
+            }
         }
     }
-    formattingStateForRoot.setIntrinsicWidthConstraints(formattingRoot, Geometry::intrinsicWidthConstraints(layoutState, formattingRoot));
+    formattingState.setIntrinsicWidthConstraints(constraints);
+    return constraints;
 }
 
 LayoutUnit BlockFormattingContext::verticalPositionWithMargin(const Box& layoutBox, const UsedVerticalMargin& verticalMargin) const
 {
     ASSERT(!layoutBox.isOutOfFlowPositioned());
