diff a/modules/javafx.web/src/main/native/Source/WebCore/worklets/PaintWorkletGlobalScope.cpp b/modules/javafx.web/src/main/native/Source/WebCore/worklets/PaintWorkletGlobalScope.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/worklets/PaintWorkletGlobalScope.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/worklets/PaintWorkletGlobalScope.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -32,15 +32,18 @@
 #include "Document.h"
 #include "JSCSSPaintCallback.h"
 #include "JSDOMConvertCallbacks.h"
 #include "JSDOMConvertSequences.h"
 #include "RenderView.h"
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/SetForScope.h>
 
 namespace WebCore {
 using namespace JSC;
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(PaintWorkletGlobalScope);
+
 Ref<PaintWorkletGlobalScope> PaintWorkletGlobalScope::create(Document& document, ScriptSourceCode&& code)
 {
     return adoptRef(*new PaintWorkletGlobalScope(document, WTFMove(code)));
 }
 
@@ -54,11 +57,11 @@
     if (!responsibleDocument() || !responsibleDocument()->domWindow())
         return 1.0;
     return responsibleDocument()->domWindow()->devicePixelRatio();
 }
 
-PaintWorkletGlobalScope::PaintDefinition::PaintDefinition(const AtomicString& name, JSC::JSObject* paintConstructor, Ref<CSSPaintCallback>&& paintCallback, Vector<String>&& inputProperties, Vector<String>&& inputArguments)
+PaintWorkletGlobalScope::PaintDefinition::PaintDefinition(const AtomString& name, JSC::JSObject* paintConstructor, Ref<CSSPaintCallback>&& paintCallback, Vector<String>&& inputProperties, Vector<String>&& inputArguments)
     : name(name)
     , paintConstructor(paintConstructor)
     , paintCallback(WTFMove(paintCallback))
     , inputProperties(WTFMove(inputProperties))
     , inputArguments(WTFMove(inputArguments))
@@ -66,11 +69,11 @@
 }
 
 // https://drafts.css-houdini.org/css-paint-api/#registering-custom-paint
 ExceptionOr<void> PaintWorkletGlobalScope::registerPaint(JSC::ExecState& state, JSDOMGlobalObject& globalObject, const String& name, Strong<JSObject> paintConstructor)
 {
-    auto& vm = *paintConstructor->vm();
+    auto& vm = paintConstructor->vm();
     JSC::JSLockHolder lock(vm);
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     // Validate that paintConstructor is a VoidFunction
     CallData callData;
@@ -86,31 +89,31 @@
         if (paintDefinitionMap().contains(name))
             return Exception { InvalidModificationError, "This name has already been registered" };
 
         Vector<String> inputProperties;
 
-        JSValue inputPropertiesIterableValue = paintConstructor->get(&state, Identifier::fromString(&vm, "inputProperties"));
+        JSValue inputPropertiesIterableValue = paintConstructor->get(&state, Identifier::fromString(vm, "inputProperties"));
         RETURN_IF_EXCEPTION(scope, Exception { ExistingExceptionError });
 
         if (!inputPropertiesIterableValue.isUndefined())
             inputProperties = convert<IDLSequence<IDLDOMString>>(state, inputPropertiesIterableValue);
         RETURN_IF_EXCEPTION(scope, Exception { ExistingExceptionError });
 
         // FIXME: Validate input properties here (step 7).
 
         Vector<String> inputArguments;
 
-        JSValue inputArgumentsIterableValue = paintConstructor->get(&state, Identifier::fromString(&vm, "inputArguments"));
+        JSValue inputArgumentsIterableValue = paintConstructor->get(&state, Identifier::fromString(vm, "inputArguments"));
         RETURN_IF_EXCEPTION(scope, Exception { ExistingExceptionError });
 
         if (!inputArgumentsIterableValue.isUndefined())
             inputArguments = convert<IDLSequence<IDLDOMString>>(state, inputArgumentsIterableValue);
         RETURN_IF_EXCEPTION(scope, Exception { ExistingExceptionError });
 
         // FIXME: Parse syntax for inputArguments here (steps 11 and 12).
 
-        JSValue contextOptionsValue = paintConstructor->get(&state, Identifier::fromString(&vm, "contextOptions"));
+        JSValue contextOptionsValue = paintConstructor->get(&state, Identifier::fromString(vm, "contextOptions"));
         RETURN_IF_EXCEPTION(scope, Exception { ExistingExceptionError });
         UNUSED_PARAM(contextOptionsValue);
 
         // FIXME: Convert to PaintRenderingContext2DSettings here (step 14).
 
@@ -121,20 +124,20 @@
         RETURN_IF_EXCEPTION(scope, Exception { ExistingExceptionError });
 
         if (!prototypeValue.isObject())
             return Exception { TypeError, "The second argument must have a prototype that is an object" };
 
-        JSValue paintValue = prototypeValue.get(&state, Identifier::fromString(&vm, "paint"));
+        JSValue paintValue = prototypeValue.get(&state, Identifier::fromString(vm, "paint"));
         RETURN_IF_EXCEPTION(scope, Exception { ExistingExceptionError });
 
         if (paintValue.isUndefined())
             return Exception { TypeError, "The class must have a paint method" };
 
         RefPtr<JSCSSPaintCallback> paint = convert<IDLCallbackFunction<JSCSSPaintCallback>>(state, paintValue, globalObject);
         RETURN_IF_EXCEPTION(scope, Exception { ExistingExceptionError });
 
-        auto paintDefinition = std::make_unique<PaintDefinition>(name, paintConstructor.get(), paint.releaseNonNull(), WTFMove(inputProperties), WTFMove(inputArguments));
+        auto paintDefinition = makeUnique<PaintDefinition>(name, paintConstructor.get(), paint.releaseNonNull(), WTFMove(inputProperties), WTFMove(inputArguments));
         paintDefinitionMap().add(name, WTFMove(paintDefinition));
     }
 
     // This is for the case when we have already visited the paint definition map, and the GC is currently running in the background.
     vm.heap.writeBarrier(&globalObject);
