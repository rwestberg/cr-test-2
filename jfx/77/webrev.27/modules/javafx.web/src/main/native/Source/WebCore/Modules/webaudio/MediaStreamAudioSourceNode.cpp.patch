diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/MediaStreamAudioSourceNode.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/MediaStreamAudioSourceNode.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/MediaStreamAudioSourceNode.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/MediaStreamAudioSourceNode.cpp
@@ -29,33 +29,36 @@
 #include "MediaStreamAudioSourceNode.h"
 
 #include "AudioContext.h"
 #include "AudioNodeOutput.h"
 #include "Logging.h"
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/Locker.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(MediaStreamAudioSourceNode);
+
 Ref<MediaStreamAudioSourceNode> MediaStreamAudioSourceNode::create(AudioContext& context, MediaStream& mediaStream, MediaStreamTrack& audioTrack)
 {
     return adoptRef(*new MediaStreamAudioSourceNode(context, mediaStream, audioTrack));
 }
 
 MediaStreamAudioSourceNode::MediaStreamAudioSourceNode(AudioContext& context, MediaStream& mediaStream, MediaStreamTrack& audioTrack)
     : AudioNode(context, context.sampleRate())
     , m_mediaStream(mediaStream)
     , m_audioTrack(audioTrack)
 {
+    setNodeType(NodeTypeMediaStreamAudioSource);
+
     AudioSourceProvider* audioSourceProvider = m_audioTrack->audioSourceProvider();
     ASSERT(audioSourceProvider);
 
     audioSourceProvider->setClient(this);
 
     // Default to stereo. This could change depending on the format of the MediaStream's audio track.
-    addOutput(std::make_unique<AudioNodeOutput>(this, 2));
-
-    setNodeType(NodeTypeMediaStreamAudioSource);
+    addOutput(makeUnique<AudioNodeOutput>(this, 2));
 
     initialize();
 }
 
 MediaStreamAudioSourceNode::~MediaStreamAudioSourceNode()
@@ -67,11 +70,11 @@
 }
 
 void MediaStreamAudioSourceNode::setFormat(size_t numberOfChannels, float sourceSampleRate)
 {
     float sampleRate = this->sampleRate();
-    if (numberOfChannels == m_sourceNumberOfChannels && sourceSampleRate == sampleRate)
+    if (numberOfChannels == m_sourceNumberOfChannels && sourceSampleRate == m_sourceSampleRate)
         return;
 
     // The sample-rate must be equal to the context's sample-rate.
     if (!numberOfChannels || numberOfChannels > AudioContext::maxNumberOfChannels()) {
         // process() will generate silence for these uninitialized values.
@@ -88,11 +91,11 @@
 
     if (sourceSampleRate == sampleRate)
         m_multiChannelResampler = nullptr;
     else {
         double scaleFactor = sourceSampleRate / sampleRate;
-        m_multiChannelResampler = std::make_unique<MultiChannelResampler>(scaleFactor, numberOfChannels);
+        m_multiChannelResampler = makeUnique<MultiChannelResampler>(scaleFactor, numberOfChannels);
     }
 
     m_sourceNumberOfChannels = numberOfChannels;
 
     {
@@ -121,10 +124,14 @@
     if (!lock.owns_lock()) {
         // We failed to acquire the lock.
         outputBus->zero();
         return;
     }
+    if (m_sourceNumberOfChannels != outputBus->numberOfChannels()) {
+        outputBus->zero();
+        return;
+    }
 
     if (m_multiChannelResampler.get()) {
         ASSERT(m_sourceSampleRate != sampleRate());
         m_multiChannelResampler->process(provider, outputBus, numberOfFrames);
     } else {
