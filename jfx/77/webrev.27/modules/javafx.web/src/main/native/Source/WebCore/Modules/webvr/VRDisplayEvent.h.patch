diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webvr/VRDisplayEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webvr/VRDisplayEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webvr/VRDisplayEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webvr/VRDisplayEvent.h
@@ -30,33 +30,33 @@
 
 namespace WebCore {
 
 class VRDisplayEvent final : public Event {
 public:
-    static Ref<VRDisplayEvent> create(const AtomicString& type, const RefPtr<VRDisplay>& display, Optional<VRDisplayEventReason>&& reason)
+    static Ref<VRDisplayEvent> create(const AtomString& type, const RefPtr<VRDisplay>& display, Optional<VRDisplayEventReason>&& reason)
     {
         return adoptRef(*new VRDisplayEvent(type, display, WTFMove(reason)));
     }
 
     struct Init : EventInit {
         RefPtr<VRDisplay> display;
         Optional<VRDisplayEventReason> reason;
     };
 
-    static Ref<VRDisplayEvent> create(const AtomicString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
+    static Ref<VRDisplayEvent> create(const AtomString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
     {
         return adoptRef(*new VRDisplayEvent(type, initializer, isTrusted));
     }
 
     virtual ~VRDisplayEvent();
 
     RefPtr<VRDisplay> display() const { return m_display; }
     const Optional<VRDisplayEventReason>& reason() const { return m_reason; }
 
 private:
-    VRDisplayEvent(const AtomicString&, const Init&, IsTrusted);
-    VRDisplayEvent(const AtomicString&, const RefPtr<VRDisplay>&, Optional<VRDisplayEventReason>&&);
+    VRDisplayEvent(const AtomString&, const Init&, IsTrusted);
+    VRDisplayEvent(const AtomString&, const RefPtr<VRDisplay>&, Optional<VRDisplayEventReason>&&);
 
     // Event
     EventInterface eventInterface() const override;
 
     RefPtr<VRDisplay> m_display;
