diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGLiveCatchVariablePreservationPhase.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGLiveCatchVariablePreservationPhase.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGLiveCatchVariablePreservationPhase.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGLiveCatchVariablePreservationPhase.cpp
@@ -123,16 +123,16 @@
         auto catchHandler = [&] (CodeOrigin origin) -> HandlerInfo* {
             ASSERT(origin);
             if (origin == cachedCodeOrigin)
                 return cachedHandlerResult;
 
-            unsigned bytecodeIndexToCheck = origin.bytecodeIndex;
+            unsigned bytecodeIndexToCheck = origin.bytecodeIndex();
 
             cachedCodeOrigin = origin;
 
             while (1) {
-                InlineCallFrame* inlineCallFrame = origin.inlineCallFrame;
+                InlineCallFrame* inlineCallFrame = origin.inlineCallFrame();
                 CodeBlock* codeBlock = m_graph.baselineCodeBlockFor(inlineCallFrame);
                 if (HandlerInfo* handler = codeBlock->handlerForBytecodeOffset(bytecodeIndexToCheck)) {
                     liveAtCatchHead.clearAll();
 
                     unsigned catchBytecodeIndex = handler->target;
@@ -147,26 +147,23 @@
                 if (!inlineCallFrame) {
                     cachedHandlerResult = nullptr;
                     break;
                 }
 
-                bytecodeIndexToCheck = inlineCallFrame->directCaller.bytecodeIndex;
+                bytecodeIndexToCheck = inlineCallFrame->directCaller.bytecodeIndex();
                 origin = inlineCallFrame->directCaller;
             }
 
             return cachedHandlerResult;
         };
 
         Operands<VariableAccessData*> currentBlockAccessData(block->variablesAtTail.numberOfArguments(), block->variablesAtTail.numberOfLocals(), nullptr);
-        HashSet<InlineCallFrame*> seenInlineCallFrames;
 
         auto flushEverything = [&] (NodeOrigin origin, unsigned index) {
             RELEASE_ASSERT(currentExceptionHandler);
-            auto flush = [&] (VirtualRegister operand, bool alwaysInsert) {
-                if ((operand.isLocal() && liveAtCatchHead[operand.toLocal()])
-                    || operand.isArgument()
-                    || alwaysInsert) {
+            auto flush = [&] (VirtualRegister operand) {
+                if ((operand.isLocal() && liveAtCatchHead[operand.toLocal()]) || operand.isArgument()) {
 
                     ASSERT(isValidFlushLocation(block, index, operand));
 
                     VariableAccessData* accessData = currentBlockAccessData.operand(operand);
                     if (!accessData)
@@ -178,16 +175,12 @@
                         Flush, origin, OpInfo(accessData));
                 }
             };
 
             for (unsigned local = 0; local < block->variablesAtTail.numberOfLocals(); local++)
-                flush(virtualRegisterForLocal(local), false);
-            for (InlineCallFrame* inlineCallFrame : seenInlineCallFrames)
-                flush(VirtualRegister(inlineCallFrame->stackOffset + CallFrame::thisArgumentOffset()), true);
-            flush(VirtualRegister(CallFrame::thisArgumentOffset()), true);
-
-            seenInlineCallFrames.clear();
+                flush(virtualRegisterForLocal(local));
+            flush(VirtualRegister(CallFrame::thisArgumentOffset()));
         };
 
         for (unsigned nodeIndex = 0; nodeIndex < block->size(); nodeIndex++) {
             Node* node = block->at(nodeIndex);
 
@@ -196,20 +189,13 @@
                 if (newHandler != currentExceptionHandler && currentExceptionHandler)
                     flushEverything(node->origin, nodeIndex);
                 currentExceptionHandler = newHandler;
             }
 
-            if (currentExceptionHandler && (node->op() == SetLocal || node->op() == SetArgument)) {
-                InlineCallFrame* inlineCallFrame = node->origin.semantic.inlineCallFrame;
-                if (inlineCallFrame)
-                    seenInlineCallFrames.add(inlineCallFrame);
+            if (currentExceptionHandler && (node->op() == SetLocal || node->op() == SetArgumentDefinitely || node->op() == SetArgumentMaybe)) {
                 VirtualRegister operand = node->local();
-
-                int stackOffset = inlineCallFrame ? inlineCallFrame->stackOffset : 0;
-                if ((operand.isLocal() && liveAtCatchHead[operand.toLocal()])
-                    || operand.isArgument()
-                    || (operand.offset() == stackOffset + CallFrame::thisArgumentOffset())) {
+                if ((operand.isLocal() && liveAtCatchHead[operand.toLocal()]) || operand.isArgument()) {
 
                     ASSERT(isValidFlushLocation(block, nodeIndex, operand));
 
                     VariableAccessData* variableAccessData = currentBlockAccessData.operand(operand);
                     if (!variableAccessData)
@@ -232,11 +218,11 @@
 
     VariableAccessData* newVariableAccessData(VirtualRegister operand)
     {
         ASSERT(!operand.isConstant());
 
-        m_graph.m_variableAccessData.append(VariableAccessData(operand));
+        m_graph.m_variableAccessData.append(operand);
         return &m_graph.m_variableAccessData.last();
     }
 };
 
 bool performLiveCatchVariablePreservationPhase(Graph& graph)
