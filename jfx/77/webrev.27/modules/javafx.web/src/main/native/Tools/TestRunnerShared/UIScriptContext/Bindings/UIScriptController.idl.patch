diff a/modules/javafx.web/src/main/native/Tools/TestRunnerShared/UIScriptContext/Bindings/UIScriptController.idl b/modules/javafx.web/src/main/native/Tools/TestRunnerShared/UIScriptContext/Bindings/UIScriptController.idl
--- a/modules/javafx.web/src/main/native/Tools/TestRunnerShared/UIScriptContext/Bindings/UIScriptController.idl
+++ b/modules/javafx.web/src/main/native/Tools/TestRunnerShared/UIScriptContext/Bindings/UIScriptController.idl
@@ -43,23 +43,25 @@
     void doAsyncTask(object callback); // Used to test the harness.
     void uiScriptComplete(DOMString result);
 
     void doAfterPresentationUpdate(object callback); // Call the callback after sending a message to the WebProcess and receiving a subsequent update.
     void doAfterNextStablePresentationUpdate(object callback);
-
+    void ensurePositionInformationIsUpToDateAt(long x, long y, object callback);
     void doAfterVisibleContentRectUpdate(object callback);
 
+    void doAfterDoubleTapDelay(object callback);
+
     void simulateAccessibilitySettingsChangeNotification(object callback);
 
     // Interaction.
     // These functions post events asynchronously. The callback is fired when the events have been dispatched, but any
-    // resulting behavior may also be asynchronous.
+    // resulting behavior may also be asynchronous. Points are in "global" (WKWebView) coordinates.
     void touchDownAtPoint(long x, long y, long touchCount, object callback);
     void liftUpAtPoint(long x, long y, long touchCount, object callback);
     void singleTapAtPoint(long x, long y, object callback);
     void singleTapAtPointWithModifiers(long x, long y, object modifierArray, object callback);
-    void doubleTapAtPoint(long x, long y, object callback);
+    void doubleTapAtPoint(long x, long y, float delay, object callback);
     void dragFromPointToPoint(long startX, long startY, long endX, long endY, double durationSeconds, object callback);
 
     void longPressAtPoint(long x, long y, object callback);
 
     void stylusDownAtPoint(long x, long y, float azimuthAngle, float altitudeAngle, float pressure, object callback);
@@ -72,10 +74,13 @@
     void typeCharacterUsingHardwareKeyboard(DOMString character, object callback);
 
     void keyDown(DOMString character, object modifierArray);
     void toggleCapsLock(object callback);
 
+    void rawKeyDown(DOMString key);
+    void rawKeyUp(DOMString key);
+
     // eventsJSON describes a series of user events in JSON form. For the keys, see HIDEventGenerator.mm.
     // For example, this JSON describes a touch down followed by a touch up (i.e. a single tap).
     //  {
     //      "events" : [
     //          {
@@ -185,10 +190,12 @@
     void playBackEventStream(DOMString eventStream, object callback);
 
     // Equivalent of pressing the Done button in the form accessory bar.
     void dismissFormAccessoryView();
 
+    void dismissFilePicker(object callback);
+
     readonly attribute DOMString textContentType;
 
     // Form control handling
     attribute object didStartFormControlInteractionCallback;
     attribute object didEndFormControlInteractionCallback;
@@ -220,31 +227,52 @@
 
     // These callbacks also work for the form accessory views.
     attribute object didShowKeyboardCallback;
     attribute object didHideKeyboardCallback;
     readonly attribute boolean isShowingKeyboard;
+    readonly attribute boolean hasInputSession;
+
+    attribute object didShowMenuCallback;
+    attribute object didHideMenuCallback;
+    readonly attribute boolean isDismissingMenu;
+    readonly attribute boolean isShowingMenu;
+    readonly attribute object menuRect;
+    object rectForMenuAction(DOMString action);
+
+    readonly attribute boolean isShowingPopover;
+    attribute object willPresentPopoverCallback;
+    attribute object didDismissPopoverCallback;
 
     attribute object willBeginZoomingCallback;
     attribute object didEndZoomingCallback;
 
+    attribute object willCreateNewPageCallback;
+
     void zoomToScale(double scale, object callback);
 
     void setViewScale(double scale);
     void setMinimumEffectiveWidth(double effectiveWidth);
+    void setAllowsViewportShrinkToFit(boolean allows);
 
+    void becomeFirstResponder();
     void resignFirstResponder();
     readonly attribute boolean isPresentingModally;
 
     readonly attribute double contentOffsetX;
     readonly attribute double contentOffsetY;
 
+    attribute boolean scrollUpdatesDisabled; // Turns off notifications back to the web process after scrolls (used for testing scrolling tree).
+
     void scrollToOffset(long x, long y); // Initiate an animated scroll in the UI process.
     attribute object didEndScrollingCallback;
 
     void immediateScrollToOffset(long x, long y); // Set the scroll position in the UI process without animation.
     void immediateZoomToScale(double scale); // Set the zoom scale in the UI process without animation.
 
+    // Find the scroller for the given point in content ("absolute") coordinates, and do an immediate scroll.
+    void immediateScrollElementAtContentPointToOffset(long x, long y, long xOffset, long yOffset);
+
     // View state
     readonly attribute double zoomScale;
     readonly attribute double minimumZoomScale;
     readonly attribute double maximumZoomScale;
 
@@ -291,10 +319,12 @@
 
     void firstResponderSuppressionForWebView(boolean shouldSuppress);
     void makeWindowContentViewFirstResponder();
     readonly attribute boolean isWindowContentViewFirstResponder;
 
+    void setHardwareKeyboardAttached(boolean attached);
+
     object attachmentInfo(DOMString attachmentIdentifier);
 
     // Editing
     void drawSquareInEditableImage();
     readonly attribute long numberOfStrokesInEditableImage;
