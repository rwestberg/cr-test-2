diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLIFrameElement.h b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLIFrameElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLIFrameElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLIFrameElement.h
@@ -1,10 +1,10 @@
 /*
  * Copyright (C) 1999 Lars Knoll (knoll@kde.org)
  *           (C) 1999 Antti Koivisto (koivisto@kde.org)
  *           (C) 2000 Simon Hausmann <hausmann@kde.org>
- * Copyright (C) 2004, 2006, 2008, 2009 Apple Inc. All rights reserved.
+ * Copyright (C) 2004-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -21,10 +21,11 @@
  *
  */
 
 #pragma once
 
+#include "FeaturePolicy.h"
 #include "HTMLFrameElementBase.h"
 
 namespace WebCore {
 
 class DOMTokenList;
@@ -36,26 +37,29 @@
     static Ref<HTMLIFrameElement> create(const QualifiedName&, Document&);
 
     DOMTokenList& sandbox();
 
     RenderIFrame* renderer() const;
-    const String& allow() const { return m_allow; }
+
+    void setReferrerPolicyForBindings(const AtomString&);
+    String referrerPolicyForBindings() const;
+    ReferrerPolicy referrerPolicy() const final;
+
+    const FeaturePolicy& featurePolicy() const;
 
 private:
     HTMLIFrameElement(const QualifiedName&, Document&);
 
-#if PLATFORM(IOS_FAMILY)
-    bool isKeyboardFocusable(KeyboardEvent*) const final { return false; }
-#endif
-
-    void parseAttribute(const QualifiedName&, const AtomicString&) final;
+    void parseAttribute(const QualifiedName&, const AtomString&) final;
     bool isPresentationAttribute(const QualifiedName&) const final;
-    void collectStyleForPresentationAttribute(const QualifiedName&, const AtomicString&, MutableStyleProperties&) final;
+    void collectStyleForPresentationAttribute(const QualifiedName&, const AtomString&, MutableStyleProperties&) final;
+
+    bool isInteractiveContent() const final { return true; }
 
     bool rendererIsNeeded(const RenderStyle&) final;
     RenderPtr<RenderElement> createElementRenderer(RenderStyle&&, const RenderTreePosition&) final;
 
     std::unique_ptr<DOMTokenList> m_sandbox;
-    String m_allow;
+    mutable Optional<FeaturePolicy> m_featurePolicy;
 };
 
 } // namespace WebCore
