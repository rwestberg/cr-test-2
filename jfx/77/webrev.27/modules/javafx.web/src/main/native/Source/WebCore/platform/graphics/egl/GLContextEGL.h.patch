diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/egl/GLContextEGL.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/egl/GLContextEGL.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/egl/GLContextEGL.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/egl/GLContextEGL.h
@@ -30,11 +30,11 @@
 #if PLATFORM(WAYLAND)
 #include "WlUniquePtr.h"
 struct wl_egl_window;
 #endif
 
-#if USE(LIBWPE)
+#if USE(WPE_RENDERER)
 struct wpe_renderer_backend_egl_offscreen_target;
 #endif
 
 typedef void *EGLConfig;
 typedef void *EGLContext;
@@ -80,11 +80,11 @@
 #endif
 #if PLATFORM(WAYLAND)
     GLContextEGL(PlatformDisplay&, EGLContext, EGLSurface, WlUniquePtr<struct wl_surface>&&, struct wl_egl_window*);
     void destroyWaylandWindow();
 #endif
-#if USE(LIBWPE)
+#if USE(WPE_RENDERER)
     GLContextEGL(PlatformDisplay&, EGLContext, EGLSurface, struct wpe_renderer_backend_egl_offscreen_target*);
     void destroyWPETarget();
 #endif
 
     static std::unique_ptr<GLContextEGL> createWindowContext(GLNativeWindowType, PlatformDisplay&, EGLContext sharingContext = nullptr);
@@ -96,11 +96,11 @@
 #endif
 #if PLATFORM(WAYLAND)
     static std::unique_ptr<GLContextEGL> createWaylandContext(PlatformDisplay&, EGLContext sharingContext = nullptr);
     static EGLSurface createWindowSurfaceWayland(EGLDisplay, EGLConfig, GLNativeWindowType);
 #endif
-#if USE(LIBWPE)
+#if USE(WPE_RENDERER)
     static std::unique_ptr<GLContextEGL> createWPEContext(PlatformDisplay&, EGLContext sharingContext = nullptr);
     static EGLSurface createWindowSurfaceWPE(EGLDisplay, EGLConfig, GLNativeWindowType);
 #endif
 
     static bool getEGLConfig(EGLDisplay, EGLConfig*, EGLSurfaceType);
@@ -113,11 +113,11 @@
 #endif
 #if PLATFORM(WAYLAND)
     WlUniquePtr<struct wl_surface> m_wlSurface;
     struct wl_egl_window* m_wlWindow { nullptr };
 #endif
-#if USE(LIBWPE)
+#if USE(WPE_RENDERER)
     struct wpe_renderer_backend_egl_offscreen_target* m_wpeTarget { nullptr };
 #endif
 #if USE(CAIRO)
     cairo_device_t* m_cairoDevice { nullptr };
 #endif
