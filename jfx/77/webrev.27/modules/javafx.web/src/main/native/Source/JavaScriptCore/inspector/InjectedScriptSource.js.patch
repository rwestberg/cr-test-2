diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScriptSource.js b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScriptSource.js
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScriptSource.js
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScriptSource.js
@@ -43,23 +43,31 @@
 function toStringDescription(obj)
 {
     if (obj === 0 && 1 / obj < 0)
         return "-0";
 
+    if (isBigInt(obj))
+        return toString(obj) + "n";
+
     return toString(obj);
 }
 
 function isUInt32(obj)
 {
     if (typeof obj === "number")
         return obj >>> 0 === obj && (obj > 0 || 1 / obj > 0);
     return "" + (obj >>> 0) === obj;
 }
 
-function isSymbol(obj)
+function isSymbol(value)
+{
+    return typeof value === "symbol";
+}
+
+function isBigInt(value)
 {
-    return typeof obj === "symbol";
+    return typeof value === "bigint";
 }
 
 function isEmptyObject(object)
 {
     for (let key in object)
@@ -288,11 +296,11 @@
 
         try {
             let callArgument = InjectedScriptHost.evaluate("(" + callArgumentJSON + ")");
             let value = this._resolveCallArgument(callArgument);
             this._saveResult(value);
-        } catch (e) {}
+        } catch { }
 
         return this._savedResultIndex;
     }
 
     wrapCallFrames(callFrame)
@@ -351,10 +359,20 @@
     previewValue(value)
     {
         return RemoteObject.createObjectPreviewForValue(value, true);
     }
 
+    setEventValue(value)
+    {
+        this._eventValue = value;
+    }
+
+    clearEventValue()
+    {
+        delete this._eventValue;
+    }
+
     setExceptionValue(value)
     {
         this._exceptionValue = value;
     }
 
@@ -367,16 +385,10 @@
     {
         let parsedObjectId = this._parseObjectId(objectId);
         return this._objectForId(parsedObjectId);
     }
 
-    inspectObject(object)
-    {
-        if (this._commandLineAPIImpl)
-            this._commandLineAPIImpl.inspect(object);
-    }
-
     releaseObject(objectId)
     {
         let parsedObjectId = this._parseObjectId(objectId);
         this._releaseObject(parsedObjectId.id);
     }
@@ -397,31 +409,35 @@
             this._releaseObject(group[i]);
 
         delete this._objectGroups[objectGroupName];
     }
 
+    // CommandLineAPI
+
+    inspectObject(object)
+    {
+        if (this._inspectObject)
+            this._inspectObject(object);
+    }
+
     // InjectedScriptModule C++ API
 
-    module(name)
+    hasInjectedModule(name)
     {
         return this._modules[name];
     }
 
     injectModule(name, source, host)
     {
-        delete this._modules[name];
+        this._modules[name] = false;
 
         let moduleFunction = InjectedScriptHost.evaluate("(" + source + ")");
-        if (typeof moduleFunction !== "function") {
-            if (inspectedGlobalObject.console)
-                inspectedGlobalObject.console.error("Web Inspector error: A function was expected for module %s evaluation", name);
-            return null;
-        }
+        if (typeof moduleFunction !== "function")
+            throw "Error: Web Inspector: a function was expected for injectModule";
+        moduleFunction(InjectedScriptHost, inspectedGlobalObject, injectedScriptId, this, {RemoteObject, CommandLineAPI}, host);
 
-        let module = moduleFunction.call(inspectedGlobalObject, InjectedScriptHost, inspectedGlobalObject, injectedScriptId, this, RemoteObject, host);
-        this._modules[name] = module;
-        return module;
+        this._modules[name] = true;
     }
 
     // InjectedScriptModule JavaScript API
 
     isPrimitiveValue(value)
@@ -472,11 +488,11 @@
         let result = {};
         result.type = typeof object;
         if (isPrimitiveValue(object))
             result.value = object;
         else
-            result.description = toString(object);
+            result.description = toStringDescription(object);
         return result;
     }
 
     _resolveCallArgument(callArgumentJSON)
     {
@@ -502,11 +518,11 @@
     _createThrownValue(value, objectGroup)
     {
         let remoteObject = RemoteObject.create(value, objectGroup);
         try {
             remoteObject.description = toStringDescription(value);
-        } catch (e) {}
+        } catch { }
         return {
             wasThrown: true,
             result: remoteObject
         };
     }
@@ -548,17 +564,12 @@
     }
 
     _evaluateOn(evalFunction, object, expression, isEvalOnCallFrame, includeCommandLineAPI)
     {
         let commandLineAPI = null;
-        if (includeCommandLineAPI) {
-            if (this.CommandLineAPI)
-                commandLineAPI = new this.CommandLineAPI(this._commandLineAPIImpl, isEvalOnCallFrame ? object : null);
-            else
-                commandLineAPI = new BasicCommandLineAPI(isEvalOnCallFrame ? object : null);
-        }
-
+        if (includeCommandLineAPI)
+            commandLineAPI = new CommandLineAPI(isEvalOnCallFrame ? object : null);
         return evalFunction.call(object, expression, commandLineAPI);
     }
 
     _callFrameForId(topCallFrame, callFrameId)
     {
@@ -641,11 +652,11 @@
                 if (isOwnProperty)
                     fakeDescriptor.isOwn = true;
                 if (symbol)
                     fakeDescriptor.symbol = symbol;
                 // Silence any possible unhandledrejection exceptions created from accessing a native accessor with a wrong this object.
-                if (fakeDescriptor.value instanceof Promise)
+                if (fakeDescriptor.value instanceof Promise && InjectedScriptHost.isPromiseRejectedWithNativeGetterTypeError(fakeDescriptor.value))
                     fakeDescriptor.value.catch(function(){});
                 return fakeDescriptor;
             } catch (e) {
                 let errorDescriptor = {name, value: e, wasThrown: true};
                 if (isOwnProperty)
@@ -732,11 +743,11 @@
         // FIXME: <https://webkit.org/b/143589> Web Inspector: Better handling for large collections in Object Trees
         // For array types with a large length we attempt to skip getOwnPropertyNames and instead just sublist of indexes.
         let isArrayLike = false;
         try {
             isArrayLike = RemoteObject.subtype(object) === "array" && isFinite(object.length) && object.length > 0;
-        } catch(e) {}
+        } catch { }
 
         for (let o = object; isDefined(o); o = Object.getPrototypeOf(o)) {
             let isOwnProperty = o === object;
 
             if (isArrayLike && isOwnProperty)
@@ -753,11 +764,11 @@
 
         // Always include __proto__ at the end.
         try {
             if (object.__proto__)
                 descriptors.push({name: "__proto__", value: object.__proto__, writable: true, configurable: true, enumerable: false, isOwn: true});
-        } catch (e) {}
+        } catch { }
 
         return descriptors;
     }
 
     _getSetEntries(object, skip, numberToFetch)
@@ -849,16 +860,11 @@
 
         // $n is limited from $1-$99. $0 is special.
         if (this._nextSavedResultIndex >= 100)
             this._nextSavedResultIndex = 1;
     }
-
-    _savedResult(index)
-    {
-        return this._savedResults[index];
-    }
-}
+};
 
 InjectedScript.CollectionMode = {
     OwnProperties: 1 << 0,          // own properties.
     NativeGetterProperties: 1 << 1, // native getter properties in the prototype chain.
     AllProperties: 1 << 2,          // all properties in the prototype chain.
@@ -875,22 +881,24 @@
         this.type = typeof object;
 
         if (this.type === "undefined" && InjectedScriptHost.isHTMLAllCollection(object))
             this.type = "object";
 
-        if (isPrimitiveValue(object) || object === null || forceValueType) {
+        if (isPrimitiveValue(object) || isBigInt(object) || object === null || forceValueType) {
             // We don't send undefined values over JSON.
-            if (this.type !== "undefined")
+            // BigInt values are not JSON serializable.
+            if (this.type !== "undefined" && this.type !== "bigint")
                 this.value = object;
 
             // Null object is object with 'null' subtype.
             if (object === null)
                 this.subtype = "null";
 
             // Provide user-friendly number values.
-            if (this.type === "number")
+            if (this.type === "number" || this.type === "bigint")
                 this.description = toStringDescription(object);
+
             return;
         }
 
         this.objectId = injectedScript._bind(object, objectGroupName);
 
@@ -954,11 +962,11 @@
     static subtype(value)
     {
         if (value === null)
             return "null";
 
-        if (isPrimitiveValue(value) || isSymbol(value))
+        if (isPrimitiveValue(value) || isBigInt(value) || isSymbol(value))
             return null;
 
         if (InjectedScriptHost.isHTMLAllCollection(value))
             return "array";
 
@@ -968,20 +976,23 @@
 
         // FireBug's array detection.
         try {
             if (typeof value.splice === "function" && isFinite(value.length))
                 return "array";
-        } catch (e) {}
+        } catch { }
 
         return null;
     }
 
     static describe(value)
     {
         if (isPrimitiveValue(value))
             return null;
 
+        if (isBigInt(value))
+            return null;
+
         if (isSymbol(value))
             return toString(value);
 
         let subtype = RemoteObject.subtype(value);
 
@@ -1122,11 +1133,11 @@
             let nativeGettersAsValues = true;
             let descriptors = injectedScript._propertyDescriptors(object, InjectedScript.CollectionMode.AllProperties, nativeGettersAsValues);
             this._appendPropertyPreviews(object, preview, descriptors, false, propertiesThreshold, firstLevelKeys, secondLevelKeys);
             if (propertiesThreshold.indexes < 0 || propertiesThreshold.properties < 0)
                 return preview;
-        } catch (e) {
+        } catch {
             preview.lossless = false;
         }
 
         return preview;
     }
@@ -1196,11 +1207,11 @@
             if (InjectedScriptHost.isHTMLAllCollection(value))
                 type = "object";
 
             // Primitive.
             const maxLength = 100;
-            if (isPrimitiveValue(value)) {
+            if (isPrimitiveValue(value) || isBigInt(value)) {
                 if (type === "string" && value.length > maxLength) {
                     value = this._abbreviateString(value, maxLength, true);
                     preview.lossless = false;
                 }
                 this._appendPropertyPreview(preview, internal, {name, type, value: toStringDescription(value)}, propertiesThreshold);
@@ -1314,11 +1325,11 @@
         // Deep object.
         if (depth > 3)
             return false;
 
         // Primitive.
-        if (isPrimitiveValue(object) || isSymbol(object))
+        if (isPrimitiveValue(object) || isBigInt(object) || isSymbol(object))
             return true;
 
         // Null.
         if (object === null)
             return true;
@@ -1374,11 +1385,11 @@
             return string.substr(0, leftHalf) + "\u2026" + string.substr(string.length - rightHalf, rightHalf);
         }
 
         return string.substr(0, maxLength) + "\u2026";
     }
-}
+};
 
 // -------
 
 InjectedScript.CallFrameProxy = function(ordinal, callFrame)
 {
@@ -1386,11 +1397,11 @@
     this.functionName = callFrame.functionName;
     this.location = {scriptId: String(callFrame.sourceID), lineNumber: callFrame.line, columnNumber: callFrame.column};
     this.scopeChain = this._wrapScopeChain(callFrame);
     this.this = RemoteObject.create(callFrame.thisObject, "backtrace");
     this.isTailDeleted = callFrame.isTailDeleted;
-}
+};
 
 InjectedScript.CallFrameProxy.prototype = {
     _wrapScopeChain(callFrame)
     {
         let scopeChain = callFrame.scopeChain;
@@ -1399,11 +1410,11 @@
         let scopeChainProxy = [];
         for (let i = 0; i < scopeChain.length; i++)
             scopeChainProxy[i] = InjectedScript.CallFrameProxy._createScopeJson(scopeChain[i], scopeDescriptions[i], "backtrace");
         return scopeChainProxy;
     }
-}
+};
 
 InjectedScript.CallFrameProxy._scopeTypeNames = {
     0: "global", // GLOBAL_SCOPE
     1: "with", // WITH_SCOPE
     2: "closure", // CLOSURE_SCOPE
@@ -1432,55 +1443,85 @@
     return scope;
 }
 
 // -------
 
-function bind(func, thisObject, ...outerArgs)
+function CommandLineAPI(callFrame)
 {
-    return function(...innerArgs) {
-        return func.apply(thisObject, outerArgs.concat(innerArgs));
-    };
-}
+    let savedResultAlias = InjectedScriptHost.savedResultAlias;
 
-function BasicCommandLineAPI(callFrame)
-{
-    this.$_ = injectedScript._lastResult;
-    this.$exception = injectedScript._exceptionValue;
+    let defineGetter = (key, value) => {
+        if (typeof value !== "function") {
+            let originalValue = value;
+            value = function() { return originalValue; };
+        }
 
-    // $1-$99
-    for (let i = 1; i <= injectedScript._savedResults.length; ++i)
-        this.__defineGetter__("$" + i, bind(injectedScript._savedResult, injectedScript, i));
+        this.__defineGetter__("$" + key, value);
+        if (savedResultAlias && savedResultAlias !== "$")
+            this.__defineGetter__(savedResultAlias + key, value);
+    };
 
-    // Command Line API methods.
-    for (let i = 0; i < BasicCommandLineAPI.methods.length; ++i) {
-        let method = BasicCommandLineAPI.methods[i];
-        this[method.name] = method;
-    }
-}
+    if ("_lastResult" in injectedScript)
+        defineGetter("_", injectedScript._lastResult);
 
-BasicCommandLineAPI.methods = [
-    function dir() { return inspectedGlobalObject.console.dir(...arguments); },
-    function clear() { return inspectedGlobalObject.console.clear(...arguments); },
-    function table() { return inspectedGlobalObject.console.table(...arguments); },
-    function profile() { return inspectedGlobalObject.console.profile(...arguments); },
-    function profileEnd() { return inspectedGlobalObject.console.profileEnd(...arguments); },
+    if ("_exceptionValue" in injectedScript)
+        defineGetter("exception", injectedScript._exceptionValue);
 
-    function keys(object) { return Object.keys(object); },
-    function values(object) {
-        let result = [];
-        for (let key in object)
-            result.push(object[key]);
-        return result;
-    },
+    if ("_eventValue" in injectedScript)
+        defineGetter("event", injectedScript._eventValue);
 
-    function queryObjects() {
-        return InjectedScriptHost.queryObjects(...arguments);
-    },
-];
+    // $1-$99
+    for (let i = 1; i < injectedScript._savedResults.length; ++i)
+        defineGetter(i, injectedScript._savedResults[i]);
+
+    for (let name in CommandLineAPI.getters)
+        defineGetter(name, CommandLineAPI.getters[name]);
 
-for (let i = 0; i < BasicCommandLineAPI.methods.length; ++i) {
-    let method = BasicCommandLineAPI.methods[i];
-    method.toString = function() { return "function " + method.name + "() { [Command Line API] }"; };
+    for (let name in CommandLineAPI.methods)
+        this[name] = CommandLineAPI.methods[name];
 }
 
+CommandLineAPI.getters = {};
+
+CommandLineAPI.methods = {};
+
+CommandLineAPI.methods["keys"] = function(object) { return Object.keys(object); };
+CommandLineAPI.methods["values"] = function(object) { return Object.values(object); };
+
+CommandLineAPI.methods["queryInstances"] = function() { return InjectedScriptHost.queryInstances(...arguments); };
+CommandLineAPI.methods["queryObjects"] = function() { return InjectedScriptHost.queryInstances(...arguments); };
+CommandLineAPI.methods["queryHolders"] = function() { return InjectedScriptHost.queryHolders(...arguments); };
+
+CommandLineAPI.methods["inspect"] = function(object) { return injectedScript.inspectObject(object); };
+
+CommandLineAPI.methods["assert"] = function() { return inspectedGlobalObject.console.assert(...arguments); };
+CommandLineAPI.methods["clear"] = function() { return inspectedGlobalObject.console.clear(...arguments); };
+CommandLineAPI.methods["count"] = function() { return inspectedGlobalObject.console.count(...arguments); };
+CommandLineAPI.methods["countReset"] = function() { return inspectedGlobalObject.console.countReset(...arguments); };
+CommandLineAPI.methods["debug"] = function() { return inspectedGlobalObject.console.debug(...arguments); };
+CommandLineAPI.methods["dir"] = function() { return inspectedGlobalObject.console.dir(...arguments); };
+CommandLineAPI.methods["dirxml"] = function() { return inspectedGlobalObject.console.dirxml(...arguments); };
+CommandLineAPI.methods["error"] = function() { return inspectedGlobalObject.console.error(...arguments); };
+CommandLineAPI.methods["group"] = function() { return inspectedGlobalObject.console.group(...arguments); };
+CommandLineAPI.methods["groupCollapsed"] = function() { return inspectedGlobalObject.console.groupCollapsed(...arguments); };
+CommandLineAPI.methods["groupEnd"] = function() { return inspectedGlobalObject.console.groupEnd(...arguments); };
+CommandLineAPI.methods["info"] = function() { return inspectedGlobalObject.console.info(...arguments); };
+CommandLineAPI.methods["log"] = function() { return inspectedGlobalObject.console.log(...arguments); };
+CommandLineAPI.methods["profile"] = function() { return inspectedGlobalObject.console.profile(...arguments); };
+CommandLineAPI.methods["profileEnd"] = function() { return inspectedGlobalObject.console.profileEnd(...arguments); };
+CommandLineAPI.methods["record"] = function() { return inspectedGlobalObject.console.record(...arguments); };
+CommandLineAPI.methods["recordEnd"] = function() { return inspectedGlobalObject.console.recordEnd(...arguments); };
+CommandLineAPI.methods["screenshot"] = function() { return inspectedGlobalObject.console.screenshot(...arguments); };
+CommandLineAPI.methods["table"] = function() { return inspectedGlobalObject.console.table(...arguments); };
+CommandLineAPI.methods["takeHeapSnapshot"] = function() { return inspectedGlobalObject.console.takeHeapSnapshot(...arguments); };
+CommandLineAPI.methods["time"] = function() { return inspectedGlobalObject.console.time(...arguments); };
+CommandLineAPI.methods["timeEnd"] = function() { return inspectedGlobalObject.console.timeEnd(...arguments); };
+CommandLineAPI.methods["timeLog"] = function() { return inspectedGlobalObject.console.timeLog(...arguments); };
+CommandLineAPI.methods["timeStamp"] = function() { return inspectedGlobalObject.console.timeStamp(...arguments); };
+CommandLineAPI.methods["trace"] = function() { return inspectedGlobalObject.console.trace(...arguments); };
+CommandLineAPI.methods["warn"] = function() { return inspectedGlobalObject.console.warn(...arguments); };
+
+for (let name in CommandLineAPI.methods)
+    CommandLineAPI.methods[name].toString = function() { return "function " + name + "() { [Command Line API] }"; };
+
 return injectedScript;
 })
