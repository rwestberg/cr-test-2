diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSSelector.h b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSSelector.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSSelector.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSSelector.h
@@ -106,10 +106,11 @@
             PseudoClassAny,
             PseudoClassAnyLink,
             PseudoClassAnyLinkDeprecated,
             PseudoClassAutofill,
             PseudoClassAutofillStrongPassword,
+            PseudoClassAutofillStrongPasswordViewable,
             PseudoClassHover,
             PseudoClassDrag,
             PseudoClassFocus,
             PseudoClassFocusWithin,
             PseudoClassActive,
@@ -221,35 +222,35 @@
         enum AttributeMatchType {
             CaseSensitive,
             CaseInsensitive,
         };
 
-        static PseudoElementType parsePseudoElementType(const String&);
+        static PseudoElementType parsePseudoElementType(StringView);
         static PseudoId pseudoId(PseudoElementType);
 
         // Selectors are kept in an array by CSSSelectorList. The next component of the selector is
         // the next item in the array.
         const CSSSelector* tagHistory() const { return m_isLastInTagHistory ? 0 : const_cast<CSSSelector*>(this + 1); }
 
         const QualifiedName& tagQName() const;
-        const AtomicString& tagLowercaseLocalName() const;
+        const AtomString& tagLowercaseLocalName() const;
 
-        const AtomicString& value() const;
-        const AtomicString& serializingValue() const;
+        const AtomString& value() const;
+        const AtomString& serializingValue() const;
         const QualifiedName& attribute() const;
-        const AtomicString& attributeCanonicalLocalName() const;
-        const AtomicString& argument() const { return m_hasRareData ? m_data.m_rareData->m_argument : nullAtom(); }
+        const AtomString& attributeCanonicalLocalName() const;
+        const AtomString& argument() const { return m_hasRareData ? m_data.m_rareData->m_argument : nullAtom(); }
         bool attributeValueMatchingIsCaseInsensitive() const;
-        const Vector<AtomicString>* langArgumentList() const { return m_hasRareData ? m_data.m_rareData->m_langArgumentList.get() : nullptr; }
+        const Vector<AtomString>* langArgumentList() const { return m_hasRareData ? m_data.m_rareData->m_langArgumentList.get() : nullptr; }
         const CSSSelectorList* selectorList() const { return m_hasRareData ? m_data.m_rareData->m_selectorList.get() : nullptr; }
 
-        void setValue(const AtomicString&, bool matchLowerCase = false);
+        void setValue(const AtomString&, bool matchLowerCase = false);
 
         void setAttribute(const QualifiedName&, bool convertToLowercase, AttributeMatchType);
         void setNth(int a, int b);
-        void setArgument(const AtomicString&);
-        void setLangArgumentList(std::unique_ptr<Vector<AtomicString>>);
+        void setArgument(const AtomString&);
+        void setLangArgumentList(std::unique_ptr<Vector<AtomString>>);
         void setSelectorList(std::unique_ptr<CSSSelectorList>);
 
         bool matchNth(int count) const;
         int nthA() const;
         int nthB() const;
@@ -339,49 +340,49 @@
 
         // Hide.
         CSSSelector& operator=(const CSSSelector&);
 
         struct RareData : public RefCounted<RareData> {
-            static Ref<RareData> create(AtomicString&& value) { return adoptRef(*new RareData(WTFMove(value))); }
+            static Ref<RareData> create(AtomString&& value) { return adoptRef(*new RareData(WTFMove(value))); }
             ~RareData();
 
             bool matchNth(int count);
 
             // For quirks mode, class and id are case-insensitive. In the case where uppercase
             // letters are used in quirks mode, |m_matchingValue| holds the lowercase class/id
             // and |m_serializingValue| holds the original string.
-            AtomicString m_matchingValue;
-            AtomicString m_serializingValue;
+            AtomString m_matchingValue;
+            AtomString m_serializingValue;
 
             int m_a; // Used for :nth-*
             int m_b; // Used for :nth-*
             QualifiedName m_attribute; // used for attribute selector
-            AtomicString m_attributeCanonicalLocalName;
-            AtomicString m_argument; // Used for :contains and :nth-*
-            std::unique_ptr<Vector<AtomicString>> m_langArgumentList; // Used for :lang arguments.
+            AtomString m_attributeCanonicalLocalName;
+            AtomString m_argument; // Used for :contains and :nth-*
+            std::unique_ptr<Vector<AtomString>> m_langArgumentList; // Used for :lang arguments.
             std::unique_ptr<CSSSelectorList> m_selectorList; // Used for :matches() and :not().
 
         private:
-            RareData(AtomicString&& value);
+            RareData(AtomString&& value);
         };
         void createRareData();
 
         struct NameWithCase : public RefCounted<NameWithCase> {
-            NameWithCase(const QualifiedName& originalName, const AtomicString& lowercaseName)
+            NameWithCase(const QualifiedName& originalName, const AtomString& lowercaseName)
                 : m_originalName(originalName)
                 , m_lowercaseLocalName(lowercaseName)
             {
                 ASSERT(originalName.localName() != lowercaseName);
             }
 
             const QualifiedName m_originalName;
-            const AtomicString m_lowercaseLocalName;
+            const AtomString m_lowercaseLocalName;
         };
 
         union DataUnion {
             DataUnion() : m_value(0) { }
-            AtomicStringImpl* m_value;
+            AtomStringImpl* m_value;
             QualifiedName::QualifiedNameImpl* m_tagQName;
             RareData* m_rareData;
             NameWithCase* m_nameWithCase;
         } m_data;
     };
@@ -391,11 +392,11 @@
     ASSERT(isAttributeSelector());
     ASSERT(m_hasRareData);
     return m_data.m_rareData->m_attribute;
 }
 
-inline const AtomicString& CSSSelector::attributeCanonicalLocalName() const
+inline const AtomString& CSSSelector::attributeCanonicalLocalName() const
 {
     ASSERT(isAttributeSelector());
     ASSERT(m_hasRareData);
     return m_data.m_rareData->m_attributeCanonicalLocalName;
 }
@@ -453,14 +454,14 @@
         || match() == CSSSelector::Contain
         || match() == CSSSelector::Begin
         || match() == CSSSelector::End;
 }
 
-inline void CSSSelector::setValue(const AtomicString& value, bool matchLowerCase)
+inline void CSSSelector::setValue(const AtomString& value, bool matchLowerCase)
 {
     ASSERT(match() != Tag);
-    AtomicString matchingValue = matchLowerCase ? value.convertToASCIILowercase() : value;
+    AtomString matchingValue = matchLowerCase ? value.convertToASCIILowercase() : value;
     if (!m_hasRareData && matchingValue != value)
         createRareData();
 
     // Need to do ref counting manually for the union.
     if (!m_hasRareData) {
@@ -552,35 +553,35 @@
     if (m_hasNameWithCase)
         return m_data.m_nameWithCase->m_originalName;
     return *reinterpret_cast<const QualifiedName*>(&m_data.m_tagQName);
 }
 
-inline const AtomicString& CSSSelector::tagLowercaseLocalName() const
+inline const AtomString& CSSSelector::tagLowercaseLocalName() const
 {
     if (m_hasNameWithCase)
         return m_data.m_nameWithCase->m_lowercaseLocalName;
     return m_data.m_tagQName->m_localName;
 }
 
-inline const AtomicString& CSSSelector::value() const
+inline const AtomString& CSSSelector::value() const
 {
     ASSERT(match() != Tag);
     if (m_hasRareData)
         return m_data.m_rareData->m_matchingValue;
 
-    // AtomicString is really just an AtomicStringImpl* so the cast below is safe.
-    return *reinterpret_cast<const AtomicString*>(&m_data.m_value);
+    // AtomString is really just an AtomStringImpl* so the cast below is safe.
+    return *reinterpret_cast<const AtomString*>(&m_data.m_value);
 }
 
-inline const AtomicString& CSSSelector::serializingValue() const
+inline const AtomString& CSSSelector::serializingValue() const
 {
     ASSERT(match() != Tag);
     if (m_hasRareData)
         return m_data.m_rareData->m_serializingValue;
 
-    // AtomicString is really just an AtomicStringImpl* so the cast below is safe.
-    return *reinterpret_cast<const AtomicString*>(&m_data.m_value);
+    // AtomString is really just an AtomStringImpl* so the cast below is safe.
+    return *reinterpret_cast<const AtomString*>(&m_data.m_value);
 }
 
 inline bool CSSSelector::attributeValueMatchingIsCaseInsensitive() const
 {
     return m_caseInsensitiveAttributeValueMatching;
