diff a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasRenderingContext2DBase.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasRenderingContext2DBase.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasRenderingContext2DBase.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasRenderingContext2DBase.cpp
@@ -43,10 +43,11 @@
 #include "DOMMatrix.h"
 #include "DOMMatrix2DInit.h"
 #include "DisplayListRecorder.h"
 #include "DisplayListReplayer.h"
 #include "FloatQuad.h"
+#include "HTMLCanvasElement.h"
 #include "HTMLImageElement.h"
 #include "HTMLVideoElement.h"
 #include "ImageBitmap.h"
 #include "ImageBuffer.h"
 #include "ImageData.h"
@@ -54,26 +55,30 @@
 #include "RenderElement.h"
 #include "RenderImage.h"
 #include "RenderLayer.h"
 #include "RenderTheme.h"
 #include "SecurityOrigin.h"
+#include "Settings.h"
 #include "StrokeStyleApplier.h"
 #include "StyleProperties.h"
 #include "StyleResolver.h"
 #include "TextMetrics.h"
 #include "TextRun.h"
 #include "TypedOMCSSImageValue.h"
 #include <wtf/CheckedArithmetic.h>
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/MathExtras.h>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/text/StringBuilder.h>
 #include <wtf/text/TextStream.h>
 
 namespace WebCore {
 
 using namespace HTMLNames;
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(CanvasRenderingContext2DBase);
+
 #if USE(CG)
 const ImageSmoothingQuality defaultSmoothingQuality = ImageSmoothingQuality::Low;
 #else
 const ImageSmoothingQuality defaultSmoothingQuality = ImageSmoothingQuality::Medium;
 #endif
@@ -93,11 +98,11 @@
     {
     }
 
     DisplayListDrawingContext(const GraphicsContextState& state, const FloatRect& clip)
         : context([&](GraphicsContext& displayListContext) {
-            return std::make_unique<DisplayList::Recorder>(displayListContext, displayList, state, clip, AffineTransform());
+            return makeUnique<DisplayList::Recorder>(displayListContext, displayList, state, clip, AffineTransform());
         })
     {
     }
 };
 
@@ -131,21 +136,15 @@
 
 private:
     CanvasRenderingContext2DBase* m_canvasContext;
 };
 
-CanvasRenderingContext2DBase::CanvasRenderingContext2DBase(CanvasBase& canvas, bool usesCSSCompatibilityParseMode, bool usesDashboardCompatibilityMode)
+CanvasRenderingContext2DBase::CanvasRenderingContext2DBase(CanvasBase& canvas, bool usesCSSCompatibilityParseMode)
     : CanvasRenderingContext(canvas)
     , m_stateStack(1)
     , m_usesCSSCompatibilityParseMode(usesCSSCompatibilityParseMode)
-#if ENABLE(DASHBOARD_SUPPORT)
-    , m_usesDashboardCompatibilityMode(usesDashboardCompatibilityMode)
-#endif
 {
-#if !ENABLE(DASHBOARD_SUPPORT)
-    ASSERT_UNUSED(usesDashboardCompatibilityMode, !usesDashboardCompatibilityMode);
-#endif
 }
 
 void CanvasRenderingContext2DBase::unwindStateStack()
 {
     // Ensure that the state stack in the ImageBuffer's context
@@ -316,11 +315,11 @@
     ASSERT(realized());
 
     update(selector);
 }
 
-inline void CanvasRenderingContext2DBase::FontProxy::initialize(FontSelector& fontSelector, const RenderStyle& newStyle)
+void CanvasRenderingContext2DBase::FontProxy::initialize(FontSelector& fontSelector, const RenderStyle& newStyle)
 {
     // Beware! m_font.fontSelector() might not point to document.fontSelector()!
     ASSERT(newStyle.fontCascade().fontSelector() == &fontSelector);
     if (realized())
         m_font.fontSelector()->unregisterForInvalidationCallbacks(*this);
@@ -328,26 +327,26 @@
     m_font.update(&fontSelector);
     ASSERT(&fontSelector == m_font.fontSelector());
     m_font.fontSelector()->registerForInvalidationCallbacks(*this);
 }
 
-inline const FontMetrics& CanvasRenderingContext2DBase::FontProxy::fontMetrics() const
+const FontMetrics& CanvasRenderingContext2DBase::FontProxy::fontMetrics() const
 {
     return m_font.fontMetrics();
 }
 
-inline const FontCascadeDescription& CanvasRenderingContext2DBase::FontProxy::fontDescription() const
+const FontCascadeDescription& CanvasRenderingContext2DBase::FontProxy::fontDescription() const
 {
     return m_font.fontDescription();
 }
 
-inline float CanvasRenderingContext2DBase::FontProxy::width(const TextRun& textRun, GlyphOverflow* overflow) const
+float CanvasRenderingContext2DBase::FontProxy::width(const TextRun& textRun, GlyphOverflow* overflow) const
 {
     return m_font.width(textRun, 0, overflow);
 }
 
-inline void CanvasRenderingContext2DBase::FontProxy::drawBidiText(GraphicsContext& context, const TextRun& run, const FloatPoint& point, FontCascade::CustomFontNotReadyAction action) const
+void CanvasRenderingContext2DBase::FontProxy::drawBidiText(GraphicsContext& context, const TextRun& run, const FloatPoint& point, FontCascade::CustomFontNotReadyAction action) const
 {
     context.drawBidiText(m_font, run, point, action);
 }
 
 void CanvasRenderingContext2DBase::realizeSaves()
@@ -913,11 +912,11 @@
 {
     auto checkValid = DOMMatrixReadOnly::validateAndFixup(matrixInit);
     if (checkValid.hasException())
         return checkValid.releaseException();
 
-    setTransform(matrixInit.a.valueOr(1), matrixInit.b.valueOr(0), matrixInit.c.valueOr(0), matrixInit.d.valueOr(1), matrixInit.e.valueOr(0), matrixInit.f.valueOr(0));
+    setTransform(matrixInit.m11.value(), matrixInit.m12.value(), matrixInit.m21.value(), matrixInit.m22.value(), matrixInit.m41.value(), matrixInit.m42.value());
     return { };
 }
 
 void CanvasRenderingContext2DBase::resetTransform()
 {
@@ -1051,23 +1050,20 @@
 }
 
 void CanvasRenderingContext2DBase::fill(CanvasFillRule windingRule)
 {
     fillInternal(m_path, windingRule);
-    clearPathForDashboardBackwardCompatibilityMode();
 }
 
 void CanvasRenderingContext2DBase::stroke()
 {
     strokeInternal(m_path);
-    clearPathForDashboardBackwardCompatibilityMode();
 }
 
 void CanvasRenderingContext2DBase::clip(CanvasFillRule windingRule)
 {
     clipInternal(m_path, windingRule);
-    clearPathForDashboardBackwardCompatibilityMode();
 }
 
 void CanvasRenderingContext2DBase::fill(Path2D& path, CanvasFillRule windingRule)
 {
     fillInternal(path.path(), windingRule);
@@ -1160,18 +1156,18 @@
 
     realizeSaves();
     c->canvasClip(path, toWindRule(windingRule));
 }
 
-inline void CanvasRenderingContext2DBase::beginCompositeLayer()
+void CanvasRenderingContext2DBase::beginCompositeLayer()
 {
 #if !USE(CAIRO)
     drawingContext()->beginTransparencyLayer(1);
 #endif
 }
 
-inline void CanvasRenderingContext2DBase::endCompositeLayer()
+void CanvasRenderingContext2DBase::endCompositeLayer()
 {
 #if !USE(CAIRO)
     drawingContext()->endTransparencyLayer();
 #endif
 }
@@ -1573,25 +1569,29 @@
     if (image->isSVGImage()) {
         image->setImageObserver(nullptr);
         image->setContainerSize(imageRect.size());
     }
 
-    if (image->isBitmapImage())
+    if (image->isBitmapImage()) {
+        // Drawing an animated image to a canvas should draw the first frame (except for a few layout tests)
+        if (image->isAnimated() && !document.settings().animatedImageDebugCanvasDrawingEnabled())
+            image = BitmapImage::create(image->nativeImage());
         downcast<BitmapImage>(*image).updateFromSettings(document.settings());
+    }
 
     if (rectContainsCanvas(normalizedDstRect)) {
-        c->drawImage(*image, normalizedDstRect, normalizedSrcRect, ImagePaintingOptions(op, blendMode));
+        c->drawImage(*image, normalizedDstRect, normalizedSrcRect, { op, blendMode });
         didDrawEntireCanvas();
     } else if (isFullCanvasCompositeMode(op)) {
         fullCanvasCompositedDrawImage(*image, normalizedDstRect, normalizedSrcRect, op);
         didDrawEntireCanvas();
     } else if (op == CompositeCopy) {
         clearCanvas();
-        c->drawImage(*image, normalizedDstRect, normalizedSrcRect, ImagePaintingOptions(op, blendMode));
+        c->drawImage(*image, normalizedDstRect, normalizedSrcRect, { op, blendMode });
         didDrawEntireCanvas();
     } else {
-        c->drawImage(*image, normalizedDstRect, normalizedSrcRect, ImagePaintingOptions(op, blendMode));
+        c->drawImage(*image, normalizedDstRect, normalizedSrcRect, { op, blendMode });
         didDraw(normalizedDstRect);
     }
 
     if (image->isSVGImage())
         image->setImageObserver(observer);
@@ -1635,28 +1635,28 @@
 #else
     sourceCanvas.makeRenderingResultsAvailable();
 #endif
 
     if (rectContainsCanvas(dstRect)) {
-        c->drawImageBuffer(*buffer, dstRect, srcRect, ImagePaintingOptions(state().globalComposite, state().globalBlend));
+        c->drawImageBuffer(*buffer, dstRect, srcRect, { state().globalComposite, state().globalBlend });
         didDrawEntireCanvas();
     } else if (isFullCanvasCompositeMode(state().globalComposite)) {
         fullCanvasCompositedDrawImage(*buffer, dstRect, srcRect, state().globalComposite);
         didDrawEntireCanvas();
     } else if (state().globalComposite == CompositeCopy) {
         if (&sourceCanvas == &canvasBase()) {
             if (auto copy = buffer->copyRectToBuffer(srcRect, ColorSpaceSRGB, *c)) {
                 clearCanvas();
-                c->drawImageBuffer(*copy, dstRect, { { }, srcRect.size() }, ImagePaintingOptions(state().globalComposite, state().globalBlend));
+                c->drawImageBuffer(*copy, dstRect, { { }, srcRect.size() }, { state().globalComposite, state().globalBlend });
             }
         } else {
-        clearCanvas();
-        c->drawImageBuffer(*buffer, dstRect, srcRect, ImagePaintingOptions(state().globalComposite, state().globalBlend));
+            clearCanvas();
+            c->drawImageBuffer(*buffer, dstRect, srcRect, { state().globalComposite, state().globalBlend });
         }
         didDrawEntireCanvas();
     } else {
-        c->drawImageBuffer(*buffer, dstRect, srcRect, ImagePaintingOptions(state().globalComposite, state().globalBlend));
+        c->drawImageBuffer(*buffer, dstRect, srcRect, { state().globalComposite, state().globalBlend });
         didDraw(dstRect);
     }
 
     return { };
 }
@@ -1733,21 +1733,21 @@
         return { };
 
     checkOrigin(&imageBitmap);
 
     if (rectContainsCanvas(dstRect)) {
-        c->drawImageBuffer(*buffer, dstRect, srcRect, ImagePaintingOptions(state().globalComposite, state().globalBlend));
+        c->drawImageBuffer(*buffer, dstRect, srcRect, { state().globalComposite, state().globalBlend });
         didDrawEntireCanvas();
     } else if (isFullCanvasCompositeMode(state().globalComposite)) {
         fullCanvasCompositedDrawImage(*buffer, dstRect, srcRect, state().globalComposite);
         didDrawEntireCanvas();
     } else if (state().globalComposite == CompositeCopy) {
         clearCanvas();
-        c->drawImageBuffer(*buffer, dstRect, srcRect, ImagePaintingOptions(state().globalComposite, state().globalBlend));
+        c->drawImageBuffer(*buffer, dstRect, srcRect, { state().globalComposite, state().globalBlend });
         didDrawEntireCanvas();
     } else {
-        c->drawImageBuffer(*buffer, dstRect, srcRect, ImagePaintingOptions(state().globalComposite, state().globalBlend));
+        c->drawImageBuffer(*buffer, dstRect, srcRect, { state().globalComposite, state().globalBlend });
         didDraw(dstRect);
     }
 
     return { };
 }
@@ -1832,18 +1832,18 @@
     c->restore();
     c->drawImageBuffer(buffer, bufferRect.location(), state().globalComposite);
     c->restore();
 }
 
-static void drawImageToContext(Image& image, GraphicsContext& context, const FloatRect& dest, const FloatRect& src, CompositeOperator op)
+static void drawImageToContext(Image& image, GraphicsContext& context, const FloatRect& dest, const FloatRect& src, const ImagePaintingOptions& options)
 {
-    context.drawImage(image, dest, src, op);
+    context.drawImage(image, dest, src, options);
 }
 
-static void drawImageToContext(ImageBuffer& imageBuffer, GraphicsContext& context, const FloatRect& dest, const FloatRect& src, CompositeOperator op)
+static void drawImageToContext(ImageBuffer& imageBuffer, GraphicsContext& context, const FloatRect& dest, const FloatRect& src, const ImagePaintingOptions& options)
 {
-    context.drawImageBuffer(imageBuffer, dest, src, op);
+    context.drawImageBuffer(imageBuffer, dest, src, options);
 }
 
 template<class T> void CanvasRenderingContext2DBase::fullCanvasCompositedDrawImage(T& image, const FloatRect& dest, const FloatRect& src, CompositeOperator op)
 {
     ASSERT(isFullCanvasCompositeMode(op));
@@ -1868,25 +1868,15 @@
     AffineTransform effectiveTransform = c->getCTM();
     IntRect transformedAdjustedRect = enclosingIntRect(effectiveTransform.mapRect(adjustedDest));
     buffer->context().translate(-transformedAdjustedRect.location());
     buffer->context().translate(croppedOffset);
     buffer->context().concatCTM(effectiveTransform);
-    drawImageToContext(image, buffer->context(), adjustedDest, src, CompositeSourceOver);
+    drawImageToContext(image, buffer->context(), adjustedDest, src, { CompositeSourceOver });
 
     compositeBuffer(*buffer, bufferRect, op);
 }
 
-void CanvasRenderingContext2DBase::prepareGradientForDashboard(CanvasGradient& gradient) const
-{
-#if ENABLE(DASHBOARD_SUPPORT)
-    if (m_usesDashboardCompatibilityMode)
-        gradient.setDashboardCompatibilityMode();
-#else
-    UNUSED_PARAM(gradient);
-#endif
-}
-
 static CanvasRenderingContext2DBase::Style toStyle(const CanvasStyle& style)
 {
     if (auto gradient = style.canvasGradient())
         return gradient;
     if (auto pattern = style.canvasPattern())
@@ -1925,26 +1915,22 @@
 ExceptionOr<Ref<CanvasGradient>> CanvasRenderingContext2DBase::createLinearGradient(float x0, float y0, float x1, float y1)
 {
     if (!std::isfinite(x0) || !std::isfinite(y0) || !std::isfinite(x1) || !std::isfinite(y1))
         return Exception { NotSupportedError };
 
-    auto gradient = CanvasGradient::create(FloatPoint(x0, y0), FloatPoint(x1, y1));
-    prepareGradientForDashboard(gradient.get());
-    return WTFMove(gradient);
+    return CanvasGradient::create(FloatPoint(x0, y0), FloatPoint(x1, y1));
 }
 
 ExceptionOr<Ref<CanvasGradient>> CanvasRenderingContext2DBase::createRadialGradient(float x0, float y0, float r0, float x1, float y1, float r1)
 {
     if (!std::isfinite(x0) || !std::isfinite(y0) || !std::isfinite(r0) || !std::isfinite(x1) || !std::isfinite(y1) || !std::isfinite(r1))
         return Exception { NotSupportedError };
 
     if (r0 < 0 || r1 < 0)
         return Exception { IndexSizeError };
 
-    auto gradient = CanvasGradient::create(FloatPoint(x0, y0), r0, FloatPoint(x1, y1), r1);
-    prepareGradientForDashboard(gradient.get());
-    return WTFMove(gradient);
+    return CanvasGradient::create(FloatPoint(x0, y0), r0, FloatPoint(x1, y1), r1);
 }
 
 ExceptionOr<RefPtr<CanvasPattern>> CanvasRenderingContext2DBase::createPattern(CanvasImageSource&& image, const String& repetition)
 {
     bool repeatX, repeatY;
@@ -2135,11 +2121,11 @@
 
 GraphicsContext* CanvasRenderingContext2DBase::drawingContext() const
 {
     if (UNLIKELY(m_usesDisplayListDrawing)) {
         if (!m_recordingContext)
-            m_recordingContext = std::make_unique<DisplayListDrawingContext>(GraphicsContextState(), FloatRect(FloatPoint::zero(), canvasBase().size()));
+            m_recordingContext = makeUnique<DisplayListDrawingContext>(GraphicsContextState(), FloatRect(FloatPoint::zero(), canvasBase().size()));
         return &m_recordingContext->context;
     }
 
     return canvasBase().drawingContext();
 }
@@ -2364,14 +2350,6 @@
 Ref<Path2D> CanvasRenderingContext2DBase::getPath() const
 {
     return Path2D::create(m_path);
 }
 
-inline void CanvasRenderingContext2DBase::clearPathForDashboardBackwardCompatibilityMode()
-{
-#if ENABLE(DASHBOARD_SUPPORT)
-    if (m_usesDashboardCompatibilityMode)
-        m_path.clear();
-#endif
-}
-
 } // namespace WebCore
