diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/inlineformatting/InlineItem.h b/modules/javafx.web/src/main/native/Source/WebCore/layout/inlineformatting/InlineItem.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/inlineformatting/InlineItem.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/inlineformatting/InlineItem.h
@@ -26,93 +26,47 @@
 #pragma once
 
 #if ENABLE(LAYOUT_FORMATTING_CONTEXT)
 
 #include "LayoutBox.h"
-#include "LayoutInlineBox.h"
-#include "LayoutLineBreakBox.h"
+#include <wtf/WeakPtr.h>
 
 namespace WebCore {
 namespace Layout {
 
-class InlineItem {
+class InlineItem : public CanMakeWeakPtr<InlineItem> {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    InlineItem(const Box& layoutBox);
+    enum class Type { Text, HardLineBreak, Box, Float, ContainerStart, ContainerEnd };
+    InlineItem(const Box& layoutBox, Type);
 
-    enum class Type { Text, HardLineBreak, InlineBox, Float };
-    Type type() const;
+    Type type() const { return m_type; }
     const Box& layoutBox() const { return m_layoutBox; }
     const RenderStyle& style() const { return m_layoutBox.style(); }
-    String textContent() const;
-    // DetachingRule indicates whether the inline element needs to be wrapped in a dediceted run or break from previous/next runs.
-    // <span>start</span><span style="position: relative;"> middle </span><span>end</span>
-    // input to line breaking -> <start middle end>
-    // output of line breaking (considering infinite constraint) -> <start middle end>
-    // due to the in-flow positioning, the final runs are: <start>< middle ><end>
-    // "start" -> n/a
-    // " middle " -> BreakAtStart and BreakAtEnd
-    // "end" -> n/a
-    //
-    // <span>parent </span><span style="padding: 10px;">start<span> middle </span>end</span><span> parent</span>
-    // input to line breaking -> <parent start middle end parent>
-    // output of line breaking (considering infinite constraint) -> <parent start middle end parent>
-    // due to padding, final runs -> <parent><start middle end><parent>
-    // "parent" -> n/a
-    // "start" -> BreakAtStart
-    // " middle " -> n/a
-    // "end" -> BreakAtEnd
-    // "parent" -> n/a
-    enum class DetachingRule {
-        BreakAtStart = 1 << 0,
-        BreakAtEnd = 1 << 1
-    };
-    void addDetachingRule(OptionSet<DetachingRule> detachingRule) { m_detachingRules.add(detachingRule); }
-    OptionSet<DetachingRule> detachingRules() const { return m_detachingRules; }
 
-    // Non-breakable start/end marks margin/padding/border space (even when it does not directly come from the associated layout box)
-    // <span style="padding: 5px"><span>nested content with padding parent</span</span>
-    // <nested content with padding parent> inline run has 5px non-breakable start/end.
-    LayoutUnit nonBreakableStart() const { return m_nonBreakableStart; }
-    LayoutUnit nonBreakableEnd() const { return m_nonBreakableEnd; }
-    void addNonBreakableStart(LayoutUnit value) { m_nonBreakableStart += value; }
-    void addNonBreakableEnd(LayoutUnit value) { m_nonBreakableEnd += value; }
+    bool isText() const { return type() == Type::Text; }
+    bool isBox() const { return type() == Type::Box; }
+    bool isHardLineBreak() const { return type() == Type::HardLineBreak; }
+    bool isFloat() const { return type() == Type::Float; }
+    bool isLineBreak() const { return type() == Type::HardLineBreak; }
+    bool isContainerStart() const { return type() == Type::ContainerStart; }
+    bool isContainerEnd() const { return type() == Type::ContainerEnd; }
 
 private:
     const Box& m_layoutBox;
-    OptionSet<DetachingRule> m_detachingRules;
-    LayoutUnit m_nonBreakableStart;
-    LayoutUnit m_nonBreakableEnd;
+    const Type m_type;
 };
 
-using InlineContent = ListHashSet<std::unique_ptr<InlineItem>>;
-
-inline InlineItem::InlineItem(const Box& layoutBox)
+inline InlineItem::InlineItem(const Box& layoutBox, Type type)
     : m_layoutBox(layoutBox)
+    , m_type(type)
 {
 }
 
-inline InlineItem::Type InlineItem::type() const
-{
-    if (is<InlineBox>(m_layoutBox) && downcast<InlineBox>(m_layoutBox).hasTextContent())
-        return Type::Text;
-
-    if (is<LineBreakBox>(m_layoutBox))
-        return Type::HardLineBreak;
-
-    if (m_layoutBox.isFloatingPositioned())
-        return Type::Float;
-
-    ASSERT(m_layoutBox.isInlineLevelBox());
-    return Type::InlineBox;
-}
-
-inline String InlineItem::textContent() const
-{
-    if (type() != Type::Text)
-        return { };
-
-    return downcast<InlineBox>(m_layoutBox).textContent();
-}
+#define SPECIALIZE_TYPE_TRAITS_INLINE_ITEM(ToValueTypeName, predicate) \
+SPECIALIZE_TYPE_TRAITS_BEGIN(WebCore::Layout::ToValueTypeName) \
+    static bool isType(const WebCore::Layout::InlineItem& inlineItem) { return inlineItem.predicate; } \
+SPECIALIZE_TYPE_TRAITS_END()
 
 }
 }
 #endif
