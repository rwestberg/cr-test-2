diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/Geolocation.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/Geolocation.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/Geolocation.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/Geolocation.cpp
@@ -28,54 +28,57 @@
 #include "config.h"
 #include "Geolocation.h"
 
 #if ENABLE(GEOLOCATION)
 
-#include "Coordinates.h"
 #include "Document.h"
 #include "Frame.h"
 #include "GeoNotifier.h"
 #include "GeolocationController.h"
+#include "GeolocationCoordinates.h"
 #include "GeolocationError.h"
 #include "GeolocationPosition.h"
-#include "Geoposition.h"
+#include "GeolocationPositionData.h"
+#include "Navigator.h"
 #include "Page.h"
-#include "PositionError.h"
 #include "RuntimeApplicationChecks.h"
 #include "SecurityOrigin.h"
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/Ref.h>
 #include <wtf/text/StringBuilder.h>
 
 namespace WebCore {
 
 static const ASCIILiteral permissionDeniedErrorMessage { "User denied Geolocation"_s };
 static const ASCIILiteral failedToStartServiceErrorMessage { "Failed to start Geolocation service"_s };
 static const ASCIILiteral framelessDocumentErrorMessage { "Geolocation cannot be used in frameless documents"_s };
 static const ASCIILiteral originCannotRequestGeolocationErrorMessage { "Origin does not have permission to use Geolocation service"_s };
 
-static RefPtr<Geoposition> createGeoposition(Optional<GeolocationPosition>&& position)
+WTF_MAKE_ISO_ALLOCATED_IMPL(Geolocation);
+
+static RefPtr<GeolocationPosition> createGeolocationPosition(Optional<GeolocationPositionData>&& position)
 {
     if (!position)
         return nullptr;
 
     DOMTimeStamp timestamp = convertSecondsToDOMTimeStamp(position->timestamp);
-    return Geoposition::create(Coordinates::create(WTFMove(position.value())), timestamp);
+    return GeolocationPosition::create(GeolocationCoordinates::create(WTFMove(position.value())), timestamp);
 }
 
-static Ref<PositionError> createPositionError(GeolocationError& error)
+static Ref<GeolocationPositionError> createGeolocationPositionError(GeolocationError& error)
 {
-    PositionError::ErrorCode code = PositionError::POSITION_UNAVAILABLE;
+    auto code = GeolocationPositionError::POSITION_UNAVAILABLE;
     switch (error.code()) {
     case GeolocationError::PermissionDenied:
-        code = PositionError::PERMISSION_DENIED;
+        code = GeolocationPositionError::PERMISSION_DENIED;
         break;
     case GeolocationError::PositionUnavailable:
-        code = PositionError::POSITION_UNAVAILABLE;
+        code = GeolocationPositionError::POSITION_UNAVAILABLE;
         break;
     }
 
-    return PositionError::create(code, error.message());
+    return GeolocationPositionError::create(code, error.message());
 }
 
 bool Geolocation::Watchers::add(int id, RefPtr<GeoNotifier>&& notifier)
 {
     ASSERT(id > 0);
@@ -124,22 +127,20 @@
 void Geolocation::Watchers::getNotifiersVector(GeoNotifierVector& copy) const
 {
     copy = copyToVector(m_idToNotifierMap.values());
 }
 
-Ref<Geolocation> Geolocation::create(ScriptExecutionContext* context)
+Ref<Geolocation> Geolocation::create(Navigator& navigator)
 {
-    auto geolocation = adoptRef(*new Geolocation(context));
+    auto geolocation = adoptRef(*new Geolocation(navigator));
     geolocation.get().suspendIfNeeded();
     return geolocation;
 }
 
-Geolocation::Geolocation(ScriptExecutionContext* context)
-    : ActiveDOMObject(context)
-    , m_allowGeolocation(Unknown)
-    , m_isSuspended(false)
-    , m_hasChangedPosition(false)
+Geolocation::Geolocation(Navigator& navigator)
+    : ActiveDOMObject(navigator.scriptExecutionContext())
+    , m_navigator(makeWeakPtr(navigator))
     , m_resumeTimer(*this, &Geolocation::resumeTimerFired)
 {
 }
 
 Geolocation::~Geolocation()
@@ -286,17 +287,17 @@
 const char* Geolocation::activeDOMObjectName() const
 {
     return "Geolocation";
 }
 
-Geoposition* Geolocation::lastPosition()
+GeolocationPosition* Geolocation::lastPosition()
 {
     Page* page = this->page();
     if (!page)
         return nullptr;
 
-    m_lastPosition = createGeoposition(GeolocationController::from(page)->lastPosition());
+    m_lastPosition = createGeolocationPosition(GeolocationController::from(page)->lastPosition());
 
     return m_lastPosition.get();
 }
 
 void Geolocation::getCurrentPosition(Ref<PositionCallback>&& successCallback, RefPtr<PositionErrorCallback>&& errorCallback, PositionOptions&& options)
@@ -369,19 +370,19 @@
 }
 
 void Geolocation::startRequest(GeoNotifier* notifier)
 {
     if (shouldBlockGeolocationRequests()) {
-        notifier->setFatalError(PositionError::create(PositionError::POSITION_UNAVAILABLE, originCannotRequestGeolocationErrorMessage));
+        notifier->setFatalError(GeolocationPositionError::create(GeolocationPositionError::PERMISSION_DENIED, originCannotRequestGeolocationErrorMessage));
         return;
     }
     document()->setGeolocationAccessed();
 
     // Check whether permissions have already been denied. Note that if this is the case,
     // the permission state can not change again in the lifetime of this page.
     if (isDenied())
-        notifier->setFatalError(PositionError::create(PositionError::PERMISSION_DENIED, permissionDeniedErrorMessage));
+        notifier->setFatalError(GeolocationPositionError::create(GeolocationPositionError::PERMISSION_DENIED, permissionDeniedErrorMessage));
     else if (haveSuitableCachedPosition(notifier->options()))
         notifier->setUseCachedPosition();
     else if (notifier->hasZeroTimeout())
         notifier->startTimerIfNeeded();
     else if (!isAllowed()) {
@@ -389,11 +390,11 @@
         m_pendingForPermissionNotifiers.add(notifier);
         requestPermission();
     } else if (startUpdating(notifier))
         notifier->startTimerIfNeeded();
     else
-        notifier->setFatalError(PositionError::create(PositionError::POSITION_UNAVAILABLE, failedToStartServiceErrorMessage));
+        notifier->setFatalError(GeolocationPositionError::create(GeolocationPositionError::POSITION_UNAVAILABLE, failedToStartServiceErrorMessage));
 }
 
 void Geolocation::fatalErrorOccurred(GeoNotifier* notifier)
 {
     // This request has failed fatally. Remove it from our lists.
@@ -407,11 +408,11 @@
 void Geolocation::requestUsesCachedPosition(GeoNotifier* notifier)
 {
     // This is called asynchronously, so the permissions could have been denied
     // since we last checked in startRequest.
     if (isDenied()) {
-        notifier->setFatalError(PositionError::create(PositionError::PERMISSION_DENIED, permissionDeniedErrorMessage));
+        notifier->setFatalError(GeolocationPositionError::create(GeolocationPositionError::PERMISSION_DENIED, permissionDeniedErrorMessage));
         return;
     }
 
     m_requestsAwaitingCachedPosition.add(notifier);
 
@@ -439,11 +440,11 @@
         // exists, start the service to get updates.
         if (!m_oneShots.remove(notifier.get()) && m_watchers.contains(notifier.get())) {
             if (notifier->hasZeroTimeout() || startUpdating(notifier.get()))
                 notifier->startTimerIfNeeded();
             else
-                notifier->setFatalError(PositionError::create(PositionError::POSITION_UNAVAILABLE, failedToStartServiceErrorMessage));
+                notifier->setFatalError(GeolocationPositionError::create(GeolocationPositionError::POSITION_UNAVAILABLE, failedToStartServiceErrorMessage));
         }
     }
 
     m_requestsAwaitingCachedPosition.clear();
 
@@ -460,11 +461,11 @@
         stopUpdating();
 }
 
 bool Geolocation::haveSuitableCachedPosition(const PositionOptions& options)
 {
-    Geoposition* cachedPosition = lastPosition();
+    auto* cachedPosition = lastPosition();
     if (!cachedPosition)
         return false;
     if (!options.maximumAge)
         return false;
     DOMTimeStamp currentTimeMillis = convertSecondsToDOMTimeStamp(WallTime::now().secondsSinceEpoch());
@@ -502,11 +503,11 @@
         m_pendingForPermissionNotifiers.clear();
         return;
     }
 
     if (!isAllowed()) {
-        auto error = PositionError::create(PositionError::PERMISSION_DENIED, permissionDeniedErrorMessage);
+        auto error = GeolocationPositionError::create(GeolocationPositionError::PERMISSION_DENIED, permissionDeniedErrorMessage);
         error->setIsFatal(true);
         handleError(error);
         m_requestsAwaitingCachedPosition.clear();
         m_hasChangedPosition = false;
         m_errorWaitingForResume = nullptr;
@@ -514,23 +515,23 @@
     }
 
     // If the service has a last position, use it to call back for all requests.
     // If any of the requests are waiting for permission for a cached position,
     // the position from the service will be at least as fresh.
-    if (RefPtr<Geoposition> position = lastPosition())
+    if (RefPtr<GeolocationPosition> position = lastPosition())
         makeSuccessCallbacks(*position);
     else
         makeCachedPositionCallbacks();
 }
 
-void Geolocation::sendError(GeoNotifierVector& notifiers, PositionError& error)
+void Geolocation::sendError(GeoNotifierVector& notifiers, GeolocationPositionError& error)
 {
     for (auto& notifier : notifiers)
         notifier->runErrorCallback(error);
 }
 
-void Geolocation::sendPosition(GeoNotifierVector& notifiers, Geoposition& position)
+void Geolocation::sendPosition(GeoNotifierVector& notifiers, GeolocationPosition& position)
 {
     for (auto& notifier : notifiers)
         notifier->runSuccessCallback(&position);
 }
 
@@ -561,11 +562,11 @@
 }
 
 void Geolocation::cancelRequests(GeoNotifierVector& notifiers)
 {
     for (auto& notifier : notifiers)
-        notifier->setFatalError(PositionError::create(PositionError::POSITION_UNAVAILABLE, framelessDocumentErrorMessage));
+        notifier->setFatalError(GeolocationPositionError::create(GeolocationPositionError::POSITION_UNAVAILABLE, framelessDocumentErrorMessage));
 }
 
 void Geolocation::cancelAllRequests()
 {
     auto copy = copyToVector(m_oneShots);
@@ -591,11 +592,11 @@
 {
     for (auto& notifier : src)
         dest.add(notifier.get());
 }
 
-void Geolocation::handleError(PositionError& error)
+void Geolocation::handleError(GeolocationPositionError& error)
 {
     auto oneShotsCopy = copyToVector(m_oneShots);
 
     GeoNotifierVector watchersCopy;
     m_watchers.getNotifiersVector(watchersCopy);
@@ -639,11 +640,11 @@
 
     // Ask the embedder: it maintains the geolocation challenge policy itself.
     GeolocationController::from(page)->requestPermission(*this);
 }
 
-void Geolocation::makeSuccessCallbacks(Geoposition& position)
+void Geolocation::makeSuccessCallbacks(GeolocationPosition& position)
 {
     ASSERT(lastPosition());
     ASSERT(isAllowed());
 
     auto oneShotsCopy = copyToVector(m_oneShots);
@@ -673,24 +674,24 @@
     if (m_isSuspended) {
         m_hasChangedPosition = true;
         return;
     }
 
-    RefPtr<Geoposition> position = lastPosition();
+    RefPtr<GeolocationPosition> position = lastPosition();
     ASSERT(position);
 
     makeSuccessCallbacks(*position);
 }
 
 void Geolocation::setError(GeolocationError& error)
 {
     if (m_isSuspended) {
-        m_errorWaitingForResume = createPositionError(error);
+        m_errorWaitingForResume = createGeolocationPositionError(error);
         return;
     }
 
-    auto positionError = createPositionError(error);
+    auto positionError = createGeolocationPositionError(error);
     handleError(positionError);
 }
 
 bool Geolocation::startUpdating(GeoNotifier* notifier)
 {
@@ -720,14 +721,24 @@
             // start all pending notification requests as permission granted.
             // The notifier is always ref'ed by m_oneShots or m_watchers.
             if (startUpdating(notifier.get()))
                 notifier->startTimerIfNeeded();
             else
-                notifier->setFatalError(PositionError::create(PositionError::POSITION_UNAVAILABLE, failedToStartServiceErrorMessage));
+                notifier->setFatalError(GeolocationPositionError::create(GeolocationPositionError::POSITION_UNAVAILABLE, failedToStartServiceErrorMessage));
         } else
-            notifier->setFatalError(PositionError::create(PositionError::PERMISSION_DENIED, permissionDeniedErrorMessage));
+            notifier->setFatalError(GeolocationPositionError::create(GeolocationPositionError::PERMISSION_DENIED, permissionDeniedErrorMessage));
     }
 }
 
+Navigator* Geolocation::navigator()
+{
+    return m_navigator.get();
+}
+
+Frame* Geolocation::frame() const
+{
+    return m_navigator ? m_navigator->frame() : nullptr;
+}
+
 } // namespace WebCore
 
 #endif // ENABLE(GEOLOCATION)
