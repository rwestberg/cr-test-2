diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLMetaElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLMetaElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLMetaElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLMetaElement.cpp
@@ -50,11 +50,11 @@
 Ref<HTMLMetaElement> HTMLMetaElement::create(const QualifiedName& tagName, Document& document)
 {
     return adoptRef(*new HTMLMetaElement(tagName, document));
 }
 
-void HTMLMetaElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+void HTMLMetaElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
     if (name == http_equivAttr)
         process();
     else if (name == contentAttr)
         process();
@@ -81,47 +81,47 @@
 {
     // Changing a meta tag while it's not in the tree shouldn't have any effect on the document.
     if (!isConnected())
         return;
 
-    const AtomicString& contentValue = attributeWithoutSynchronization(contentAttr);
+    const AtomString& contentValue = attributeWithoutSynchronization(contentAttr);
     if (contentValue.isNull())
         return;
 
     if (equalLettersIgnoringASCIICase(name(), "viewport"))
         document().processViewport(contentValue, ViewportArguments::ViewportMeta);
     else if (RuntimeEnabledFeatures::sharedFeatures().disabledAdaptationsMetaTagEnabled() && equalLettersIgnoringASCIICase(name(), "disabled-adaptations"))
         document().processDisabledAdaptations(contentValue);
 #if ENABLE(DARK_MODE_CSS)
-    else if (RuntimeEnabledFeatures::sharedFeatures().darkModeCSSEnabled() && equalLettersIgnoringASCIICase(name(), "supported-color-schemes"))
-        document().processSupportedColorSchemes(contentValue);
+    else if (equalLettersIgnoringASCIICase(name(), "color-scheme") || equalLettersIgnoringASCIICase(name(), "supported-color-schemes"))
+        document().processColorScheme(contentValue);
 #endif
 #if PLATFORM(IOS_FAMILY)
     else if (equalLettersIgnoringASCIICase(name(), "format-detection"))
         document().processFormatDetection(contentValue);
     else if (equalLettersIgnoringASCIICase(name(), "apple-mobile-web-app-orientations"))
         document().processWebAppOrientations();
 #endif
     else if (equalLettersIgnoringASCIICase(name(), "referrer"))
         document().processReferrerPolicy(contentValue, ReferrerPolicySource::MetaTag);
 
-    const AtomicString& httpEquivValue = attributeWithoutSynchronization(http_equivAttr);
+    const AtomString& httpEquivValue = attributeWithoutSynchronization(http_equivAttr);
     if (!httpEquivValue.isNull())
         document().processHttpEquiv(httpEquivValue, contentValue, isDescendantOf(document().head()));
 }
 
-const AtomicString& HTMLMetaElement::content() const
+const AtomString& HTMLMetaElement::content() const
 {
     return attributeWithoutSynchronization(contentAttr);
 }
 
-const AtomicString& HTMLMetaElement::httpEquiv() const
+const AtomString& HTMLMetaElement::httpEquiv() const
 {
     return attributeWithoutSynchronization(http_equivAttr);
 }
 
-const AtomicString& HTMLMetaElement::name() const
+const AtomString& HTMLMetaElement::name() const
 {
     return getNameAttribute();
 }
 
 }
