diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Gigacage.cpp b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Gigacage.cpp
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Gigacage.cpp
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Gigacage.cpp
@@ -25,22 +25,51 @@
 
 #include "Gigacage.h"
 
 #include "CryptoRandom.h"
 #include "Environment.h"
-#include "PerProcess.h"
 #include "ProcessCheck.h"
+#include "StaticPerProcess.h"
 #include "VMAllocate.h"
 #include "Vector.h"
 #include "bmalloc.h"
 #include <cstdio>
 #include <mutex>
 
 #if GIGACAGE_ENABLED
 
 namespace Gigacage {
 
+struct Callback {
+    Callback() { }
+
+    Callback(void (*function)(void*), void *argument)
+        : function(function)
+        , argument(argument)
+    {
+    }
+
+    void (*function)(void*) { nullptr };
+    void* argument { nullptr };
+};
+
+}
+
+namespace bmalloc {
+
+struct PrimitiveDisableCallbacks : public StaticPerProcess<PrimitiveDisableCallbacks> {
+    PrimitiveDisableCallbacks(std::lock_guard<Mutex>&) { }
+
+    Vector<Gigacage::Callback> callbacks;
+};
+DECLARE_STATIC_PER_PROCESS_STORAGE(PrimitiveDisableCallbacks);
+DEFINE_STATIC_PER_PROCESS_STORAGE(PrimitiveDisableCallbacks);
+
+} // namespace bmalloc
+
+namespace Gigacage {
+
 // This is exactly 32GB because inside JSC, indexed accesses for arrays, typed arrays, etc,
 // use unsigned 32-bit ints as indices. The items those indices access are 8 bytes or less
 // in size. 2^32 * 8 = 32GB. This means if an access on a caged type happens to go out of
 // bounds, the access is guaranteed to land somewhere else in the cage or inside the runway.
 // If this were less than 32GB, those OOB accesses could reach outside of the cage.
@@ -82,29 +111,10 @@
     {
         protectGigacageBasePtrs();
     }
 };
 
-struct Callback {
-    Callback() { }
-
-    Callback(void (*function)(void*), void *argument)
-        : function(function)
-        , argument(argument)
-    {
-    }
-
-    void (*function)(void*) { nullptr };
-    void* argument { nullptr };
-};
-
-struct PrimitiveDisableCallbacks {
-    PrimitiveDisableCallbacks(std::lock_guard<Mutex>&) { }
-
-    Vector<Callback> callbacks;
-};
-
 size_t runwaySize(Kind kind)
 {
     switch (kind) {
     case Kind::ReservedForFlagsAndNotABasePtr:
         RELEASE_BASSERT_NOT_REACHED();
@@ -197,12 +207,12 @@
         // It was never enabled. That means that we never even saved any callbacks. Or, we had already disabled
         // it before, and already called the callbacks.
         return;
     }
 
-    PrimitiveDisableCallbacks& callbacks = *PerProcess<PrimitiveDisableCallbacks>::get();
-    std::unique_lock<Mutex> lock(PerProcess<PrimitiveDisableCallbacks>::mutex());
+    PrimitiveDisableCallbacks& callbacks = *PrimitiveDisableCallbacks::get();
+    std::unique_lock<Mutex> lock(PrimitiveDisableCallbacks::mutex());
     for (Callback& callback : callbacks.callbacks)
         callback.function(callback.argument);
     callbacks.callbacks.shrink(0);
     UnprotectGigacageBasePtrsScope unprotectScope;
     basePtrs().primitive = nullptr;
@@ -215,19 +225,19 @@
         // It was already disabled or we were never able to enable it.
         function(argument);
         return;
     }
 
-    PrimitiveDisableCallbacks& callbacks = *PerProcess<PrimitiveDisableCallbacks>::get();
-    std::unique_lock<Mutex> lock(PerProcess<PrimitiveDisableCallbacks>::mutex());
+    PrimitiveDisableCallbacks& callbacks = *PrimitiveDisableCallbacks::get();
+    std::unique_lock<Mutex> lock(PrimitiveDisableCallbacks::mutex());
     callbacks.callbacks.push(Callback(function, argument));
 }
 
 void removePrimitiveDisableCallback(void (*function)(void*), void* argument)
 {
-    PrimitiveDisableCallbacks& callbacks = *PerProcess<PrimitiveDisableCallbacks>::get();
-    std::unique_lock<Mutex> lock(PerProcess<PrimitiveDisableCallbacks>::mutex());
+    PrimitiveDisableCallbacks& callbacks = *PrimitiveDisableCallbacks::get();
+    std::unique_lock<Mutex> lock(PrimitiveDisableCallbacks::mutex());
     for (size_t i = 0; i < callbacks.callbacks.size(); ++i) {
         if (callbacks.callbacks[i].function == function
             && callbacks.callbacks[i].argument == argument) {
             callbacks.callbacks[i] = callbacks.callbacks.last();
             callbacks.callbacks.pop();
@@ -265,11 +275,11 @@
     static bool cached = false;
     static std::once_flag onceFlag;
     std::call_once(
         onceFlag,
         [] {
-            bool debugHeapEnabled = PerProcess<Environment>::get()->isDebugHeapEnabled();
+            bool debugHeapEnabled = Environment::get()->isDebugHeapEnabled();
             if (debugHeapEnabled)
                 return;
 
             if (!gigacageEnabledForProcess())
                 return;
