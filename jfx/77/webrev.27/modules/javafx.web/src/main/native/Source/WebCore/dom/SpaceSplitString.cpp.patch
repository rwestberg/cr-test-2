diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/SpaceSplitString.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/SpaceSplitString.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/SpaceSplitString.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/SpaceSplitString.cpp
@@ -22,11 +22,11 @@
 #include "SpaceSplitString.h"
 
 #include "HTMLParserIdioms.h"
 #include <wtf/HashMap.h>
 #include <wtf/NeverDestroyed.h>
-#include <wtf/text/AtomicStringHash.h>
+#include <wtf/text/AtomStringHash.h>
 
 namespace WebCore {
 
 COMPILE_ASSERT(!(sizeof(SpaceSplitStringData) % sizeof(uintptr_t)), SpaceSplitStringDataTailIsAlignedToWordSize);
 
@@ -74,38 +74,38 @@
         ++i;
     } while (i < otherSize);
     return true;
 }
 
-struct SpaceSplitStringTableKeyTraits : public HashTraits<AtomicString>
+struct SpaceSplitStringTableKeyTraits : public HashTraits<AtomString>
 {
     // The number 200 for typicalNumberOfSpaceSplitString was based on the typical number of unique class names
     // on typical websites on August 2013.
     static const unsigned typicalNumberOfSpaceSplitString = 200;
     static const int minimumTableSize = WTF::HashTableCapacityForSize<typicalNumberOfSpaceSplitString>::value;
 };
 
-typedef HashMap<AtomicString, SpaceSplitStringData*, AtomicStringHash, SpaceSplitStringTableKeyTraits> SpaceSplitStringTable;
+typedef HashMap<AtomString, SpaceSplitStringData*, AtomStringHash, SpaceSplitStringTableKeyTraits> SpaceSplitStringTable;
 
 static SpaceSplitStringTable& spaceSplitStringTable()
 {
     static NeverDestroyed<SpaceSplitStringTable> table;
     return table;
 }
 
-void SpaceSplitString::set(const AtomicString& inputString, bool shouldFoldCase)
+void SpaceSplitString::set(const AtomString& inputString, bool shouldFoldCase)
 {
     if (inputString.isNull()) {
         clear();
         return;
     }
     m_data = SpaceSplitStringData::create(shouldFoldCase ? inputString.convertToASCIILowercase() : inputString);
 }
 
 class TokenIsEqualToCStringTokenProcessor {
 public:
-    TokenIsEqualToCStringTokenProcessor(const char* referenceString, unsigned referenceStringLength)
+    explicit TokenIsEqualToCStringTokenProcessor(const char* referenceString, unsigned referenceStringLength)
         : m_referenceString(referenceString)
         , m_referenceStringLength(referenceStringLength)
         , m_referenceStringWasFound(false)
     {
     }
@@ -153,47 +153,47 @@
 
 private:
     unsigned m_tokenCount;
 };
 
-class TokenAtomicStringInitializer {
-    WTF_MAKE_NONCOPYABLE(TokenAtomicStringInitializer);
+class TokenAtomStringInitializer {
+    WTF_MAKE_NONCOPYABLE(TokenAtomStringInitializer);
 public:
-    TokenAtomicStringInitializer(AtomicString* memory) : m_memoryBucket(memory) { }
+    TokenAtomStringInitializer(AtomString* memory) : m_memoryBucket(memory) { }
 
     template<typename CharacterType> bool processToken(const CharacterType* characters, unsigned length)
     {
-        new (NotNull, m_memoryBucket) AtomicString(characters, length);
+        new (NotNull, m_memoryBucket) AtomString(characters, length);
         ++m_memoryBucket;
         return true;
     }
 
-    const AtomicString* nextMemoryBucket() const { return m_memoryBucket; }
+    const AtomString* nextMemoryBucket() const { return m_memoryBucket; }
 
 private:
-    AtomicString* m_memoryBucket;
+    AtomString* m_memoryBucket;
 };
 
-inline Ref<SpaceSplitStringData> SpaceSplitStringData::create(const AtomicString& keyString, unsigned tokenCount)
+inline Ref<SpaceSplitStringData> SpaceSplitStringData::create(const AtomString& keyString, unsigned tokenCount)
 {
     ASSERT(tokenCount);
 
-    RELEASE_ASSERT(tokenCount < (std::numeric_limits<unsigned>::max() - sizeof(SpaceSplitStringData)) / sizeof(AtomicString));
-    unsigned sizeToAllocate = sizeof(SpaceSplitStringData) + tokenCount * sizeof(AtomicString);
+    RELEASE_ASSERT(tokenCount < (std::numeric_limits<unsigned>::max() - sizeof(SpaceSplitStringData)) / sizeof(AtomString));
+    unsigned sizeToAllocate = sizeof(SpaceSplitStringData) + tokenCount * sizeof(AtomString);
     SpaceSplitStringData* spaceSplitStringData = static_cast<SpaceSplitStringData*>(fastMalloc(sizeToAllocate));
 
     new (NotNull, spaceSplitStringData) SpaceSplitStringData(keyString, tokenCount);
-    AtomicString* tokenArrayStart = spaceSplitStringData->tokenArrayStart();
-    TokenAtomicStringInitializer tokenInitializer(tokenArrayStart);
+    AtomString* tokenArrayStart = spaceSplitStringData->tokenArrayStart();
+    TokenAtomStringInitializer tokenInitializer(tokenArrayStart);
     tokenizeSpaceSplitString(tokenInitializer, keyString);
     ASSERT(static_cast<unsigned>(tokenInitializer.nextMemoryBucket() - tokenArrayStart) == tokenCount);
     ASSERT(reinterpret_cast<const char*>(tokenInitializer.nextMemoryBucket()) == reinterpret_cast<const char*>(spaceSplitStringData) + sizeToAllocate);
 
     return adoptRef(*spaceSplitStringData);
 }
 
-RefPtr<SpaceSplitStringData> SpaceSplitStringData::create(const AtomicString& keyString)
+RefPtr<SpaceSplitStringData> SpaceSplitStringData::create(const AtomString& keyString)
 {
     ASSERT(isMainThread());
     ASSERT(!keyString.isNull());
 
     auto addResult = spaceSplitStringTable().add(keyString, nullptr);
@@ -221,13 +221,13 @@
 
     spaceSplitStringTable().remove(spaceSplitString->m_keyString);
 
     unsigned i = 0;
     unsigned size = spaceSplitString->size();
-    const AtomicString* data = spaceSplitString->tokenArrayStart();
+    const AtomString* data = spaceSplitString->tokenArrayStart();
     do {
-        data[i].~AtomicString();
+        data[i].~AtomString();
         ++i;
     } while (i < size);
 
     spaceSplitString->~SpaceSplitStringData();
 
