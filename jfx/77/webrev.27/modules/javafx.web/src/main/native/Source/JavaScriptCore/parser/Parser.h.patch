diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/Parser.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/Parser.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/Parser.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/Parser.h
@@ -1,9 +1,9 @@
 /*
  *  Copyright (C) 1999-2001 Harri Porten (porten@kde.org)
  *  Copyright (C) 2001 Peter Kelly (pmk@post.com)
- *  Copyright (C) 2003, 2006, 2007, 2008, 2009, 2010, 2011, 2013 Apple Inc. All rights reserved.
+ *  Copyright (C) 2003-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Library General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -115,19 +115,19 @@
 struct ScopeLabelInfo {
     UniquedStringImpl* uid;
     bool isLoop;
 };
 
-ALWAYS_INLINE static bool isArguments(const VM* vm, const Identifier* ident)
+ALWAYS_INLINE static bool isArguments(const VM& vm, const Identifier* ident)
 {
-    return vm->propertyNames->arguments == *ident;
+    return vm.propertyNames->arguments == *ident;
 }
-ALWAYS_INLINE static bool isEval(const VM* vm, const Identifier* ident)
+ALWAYS_INLINE static bool isEval(const VM& vm, const Identifier* ident)
 {
-    return vm->propertyNames->eval == *ident;
+    return vm.propertyNames->eval == *ident;
 }
-ALWAYS_INLINE static bool isEvalOrArgumentsIdentifier(const VM* vm, const Identifier* ident)
+ALWAYS_INLINE static bool isEvalOrArgumentsIdentifier(const VM& vm, const Identifier* ident)
 {
     return isEval(vm, ident) || isArguments(vm, ident);
 }
 ALWAYS_INLINE static bool isIdentifierOrKeyword(const JSToken& token)
 {
@@ -148,15 +148,17 @@
 ALWAYS_INLINE static bool isSafeContextualKeyword(const JSToken& token)
 {
     return token.m_type >= FirstSafeContextualKeywordToken && token.m_type <= LastSafeContextualKeywordToken;
 }
 
+JS_EXPORT_PRIVATE extern std::atomic<unsigned> globalParseCount;
+
 struct Scope {
     WTF_MAKE_NONCOPYABLE(Scope);
 
 public:
-    Scope(const VM* vm, bool isFunction, bool isGenerator, bool strictMode, bool isArrowFunction, bool isAsyncFunction)
+    Scope(const VM& vm, bool isFunction, bool isGenerator, bool strictMode, bool isArrowFunction, bool isAsyncFunction)
         : m_vm(vm)
         , m_shadowsArguments(false)
         , m_usesEval(false)
         , m_needsFullActivation(false)
         , m_hasDirectSuper(false)
@@ -200,11 +202,11 @@
     bool continueIsValid() { return m_loopDepth; }
 
     void pushLabel(const Identifier* label, bool isLoop)
     {
         if (!m_labels)
-            m_labels = std::make_unique<LabelStack>();
+            m_labels = makeUnique<LabelStack>();
         m_labels->append(ScopeLabelInfo { label->impl(), isLoop });
     }
 
     void popLabel()
     {
@@ -485,11 +487,11 @@
         ASSERT(m_allowsVarDeclarations);
         DeclarationResultMask result = DeclarationResult::Valid;
         bool isArgumentsIdent = isArguments(m_vm, ident);
         auto addResult = m_declaredVariables.add(ident->impl());
         bool isValidStrictMode = (addResult.isNewEntry || !addResult.iterator->value.isParameter())
-            && m_vm->propertyNames->eval != *ident && !isArgumentsIdent;
+            && m_vm.propertyNames->eval != *ident && !isArgumentsIdent;
         addResult.iterator->value.clearIsVar();
         addResult.iterator->value.setIsParameter();
         m_isValidStrictMode = m_isValidStrictMode && isValidStrictMode;
         m_declaredParameters.add(ident->impl());
         if (!isValidStrictMode)
@@ -569,11 +571,11 @@
         ASSERT(m_isArrowFunction);
 
         if (m_usesEval)
             setInnerArrowFunctionUsesEval();
 
-        if (usedVariablesContains(m_vm->propertyNames->arguments.impl()))
+        if (usedVariablesContains(m_vm.propertyNames->arguments.impl()))
             setInnerArrowFunctionUsesArguments();
     }
 
     void addClosedVariableCandidateUnconditionally(UniquedStringImpl* impl)
     {
@@ -591,11 +593,11 @@
                 for (UniquedStringImpl* impl : usedVariablesSet) {
                     if (nestedScope->m_declaredVariables.contains(impl) || nestedScope->m_lexicalVariables.contains(impl))
                         continue;
 
                     // "arguments" reference should be resolved at function boudary.
-                    if (nestedScope->isFunctionBoundary() && nestedScope->hasArguments() && impl == m_vm->propertyNames->arguments.impl() && !nestedScope->isArrowFunctionBoundary())
+                    if (nestedScope->isFunctionBoundary() && nestedScope->hasArguments() && impl == m_vm.propertyNames->arguments.impl() && !nestedScope->isArrowFunctionBoundary())
                         continue;
 
                     destinationSet.add(impl);
                     // We don't want a declared variable that is used in an inner scope to be thought of as captured if
                     // that inner scope is both a lexical scope and not a function. Only inner functions and "catch"
@@ -791,11 +793,11 @@
         m_hasArguments = false;
         m_isAsyncFunction = true;
         m_isAsyncFunctionBoundary = true;
     }
 
-    const VM* m_vm;
+    const VM& m_vm;
     bool m_shadowsArguments;
     bool m_usesEval;
     bool m_needsFullActivation;
     bool m_hasDirectSuper;
     bool m_needsSuperBinding;
@@ -881,11 +883,11 @@
 class Parser {
     WTF_MAKE_NONCOPYABLE(Parser);
     WTF_MAKE_FAST_ALLOCATED;
 
 public:
-    Parser(VM*, const SourceCode&, JSParserBuiltinMode, JSParserStrictMode, JSParserScriptMode, SourceParseMode, SuperBinding, ConstructorKind defaultConstructorKind = ConstructorKind::None, DerivedContextType = DerivedContextType::None, bool isEvalContext = false, EvalContextType = EvalContextType::None, DebuggerParseData* = nullptr);
+    Parser(VM&, const SourceCode&, JSParserBuiltinMode, JSParserStrictMode, JSParserScriptMode, SourceParseMode, SuperBinding, ConstructorKind defaultConstructorKind = ConstructorKind::None, DerivedContextType = DerivedContextType::None, bool isEvalContext = false, EvalContextType = EvalContextType::None, DebuggerParseData* = nullptr);
     ~Parser();
 
     template <class ParsedNode>
     std::unique_ptr<ParsedNode> parse(ParserError&, const Identifier&, SourceParseMode, ParsingContext, Optional<int> functionConstructorParametersEndPosition = WTF::nullopt);
 
@@ -1663,10 +1665,12 @@
 
     template <class TreeBuilder> ALWAYS_INLINE bool shouldCheckPropertyForUnderscoreProtoDuplicate(TreeBuilder&, const TreeProperty&);
 
     template <class TreeBuilder> NEVER_INLINE const char* metaPropertyName(TreeBuilder&, TreeExpression);
 
+    template <class TreeBuilder> ALWAYS_INLINE bool isSimpleAssignmentTarget(TreeBuilder&, TreeExpression);
+
     ALWAYS_INLINE int isBinaryOperator(JSTokenType);
     bool allowAutomaticSemicolon();
 
     bool autoSemiColon()
     {
@@ -1677,11 +1681,11 @@
         return allowAutomaticSemicolon();
     }
 
     bool canRecurse()
     {
-        return m_vm->isSafeToRecurse();
+        return m_vm.isSafeToRecurse();
     }
 
     const JSTextPosition& lastTokenEndPosition() const
     {
         return m_lastTokenEndPosition;
@@ -1860,11 +1864,11 @@
     {
         internalRestoreState(savePoint);
         m_errorMessage = String();
     }
 
-    VM* m_vm;
+    VM& m_vm;
     const SourceCode* m_source;
     ParserArena m_parserArena;
     std::unique_ptr<LexerType> m_lexer;
     FunctionParameters* m_parameters { nullptr };
 
@@ -1935,11 +1939,11 @@
         JSTokenLocation endLocation;
         endLocation.line = m_lexer->lineNumber();
         endLocation.lineStartOffset = m_lexer->currentLineStartOffset();
         endLocation.startOffset = m_lexer->currentOffset();
         unsigned endColumn = endLocation.startOffset - endLocation.lineStartOffset;
-        result = std::make_unique<ParsedNode>(m_parserArena,
+        result = makeUnique<ParsedNode>(m_parserArena,
                                     startLocation,
                                     endLocation,
                                     startColumn,
                                     endColumn,
                                     m_sourceElements,
@@ -1991,11 +1995,11 @@
     return result;
 }
 
 template <class ParsedNode>
 std::unique_ptr<ParsedNode> parse(
-    VM* vm, const SourceCode& source,
+    VM& vm, const SourceCode& source,
     const Identifier& name, JSParserBuiltinMode builtinMode,
     JSParserStrictMode strictMode, JSParserScriptMode scriptMode, SourceParseMode parseMode, SuperBinding superBinding,
     ParserError& error, JSTextPosition* positionBeforeLastNewline = nullptr,
     ConstructorKind defaultConstructorKind = ConstructorKind::None,
     DerivedContextType derivedContextType = DerivedContextType::None,
@@ -2027,10 +2031,13 @@
         result = parser.parse<ParsedNode>(error, name, parseMode, isEvalNode<ParsedNode>() ? ParsingContext::Eval : ParsingContext::Program);
         if (positionBeforeLastNewline)
             *positionBeforeLastNewline = parser.positionBeforeLastNewline();
     }
 
+    if (UNLIKELY(Options::countParseTimes()))
+        globalParseCount++;
+
     if (UNLIKELY(Options::reportParseTimes())) {
         MonotonicTime after = MonotonicTime::now();
         ParseHash hash(source);
         dataLogLn(result ? "Parsed #" : "Failed to parse #", hash.hashForCall(), "/#", hash.hashForConstruct(), " in ", (after - before).milliseconds(), " ms.");
     }
@@ -2048,21 +2055,24 @@
 
     Identifier name;
     bool isEvalNode = false;
     std::unique_ptr<ProgramNode> result;
     if (source.provider()->source().is8Bit()) {
-        Parser<Lexer<LChar>> parser(&vm, source, JSParserBuiltinMode::NotBuiltin, JSParserStrictMode::NotStrict, JSParserScriptMode::Classic, SourceParseMode::ProgramMode, SuperBinding::NotNeeded, ConstructorKind::None, DerivedContextType::None, isEvalNode, EvalContextType::None, nullptr);
+        Parser<Lexer<LChar>> parser(vm, source, JSParserBuiltinMode::NotBuiltin, JSParserStrictMode::NotStrict, JSParserScriptMode::Classic, SourceParseMode::ProgramMode, SuperBinding::NotNeeded, ConstructorKind::None, DerivedContextType::None, isEvalNode, EvalContextType::None, nullptr);
         result = parser.parse<ProgramNode>(error, name, SourceParseMode::ProgramMode, ParsingContext::FunctionConstructor, functionConstructorParametersEndPosition);
         if (positionBeforeLastNewline)
             *positionBeforeLastNewline = parser.positionBeforeLastNewline();
     } else {
-        Parser<Lexer<UChar>> parser(&vm, source, JSParserBuiltinMode::NotBuiltin, JSParserStrictMode::NotStrict, JSParserScriptMode::Classic, SourceParseMode::ProgramMode, SuperBinding::NotNeeded, ConstructorKind::None, DerivedContextType::None, isEvalNode, EvalContextType::None, nullptr);
+        Parser<Lexer<UChar>> parser(vm, source, JSParserBuiltinMode::NotBuiltin, JSParserStrictMode::NotStrict, JSParserScriptMode::Classic, SourceParseMode::ProgramMode, SuperBinding::NotNeeded, ConstructorKind::None, DerivedContextType::None, isEvalNode, EvalContextType::None, nullptr);
         result = parser.parse<ProgramNode>(error, name, SourceParseMode::ProgramMode, ParsingContext::FunctionConstructor, functionConstructorParametersEndPosition);
         if (positionBeforeLastNewline)
             *positionBeforeLastNewline = parser.positionBeforeLastNewline();
     }
 
+    if (UNLIKELY(Options::countParseTimes()))
+        globalParseCount++;
+
     if (UNLIKELY(Options::reportParseTimes())) {
         MonotonicTime after = MonotonicTime::now();
         ParseHash hash(source);
         dataLogLn(result ? "Parsed #" : "Failed to parse #", hash.hashForCall(), "/#", hash.hashForConstruct(), " in ", (after - before).milliseconds(), " ms.");
     }
