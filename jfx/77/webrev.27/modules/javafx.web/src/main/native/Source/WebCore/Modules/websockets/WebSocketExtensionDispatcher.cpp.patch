diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/websockets/WebSocketExtensionDispatcher.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/websockets/WebSocketExtensionDispatcher.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/websockets/WebSocketExtensionDispatcher.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/websockets/WebSocketExtensionDispatcher.cpp
@@ -62,30 +62,25 @@
     if (!numProcessors)
         return String();
 
     StringBuilder builder;
     builder.append(m_processors[0]->handshakeString());
-    for (size_t i = 1; i < numProcessors; ++i) {
-        builder.appendLiteral(", ");
-        builder.append(m_processors[i]->handshakeString());
-    }
+    for (size_t i = 1; i < numProcessors; ++i)
+        builder.append(", ", m_processors[i]->handshakeString());
     return builder.toString();
 }
 
 void WebSocketExtensionDispatcher::appendAcceptedExtension(const String& extensionToken, HashMap<String, String>& extensionParameters)
 {
     if (!m_acceptedExtensionsBuilder.isEmpty())
         m_acceptedExtensionsBuilder.appendLiteral(", ");
     m_acceptedExtensionsBuilder.append(extensionToken);
     // FIXME: Should use ListHashSet to keep the order of the parameters.
     for (auto& parameter : extensionParameters) {
-        m_acceptedExtensionsBuilder.appendLiteral("; ");
-        m_acceptedExtensionsBuilder.append(parameter.key);
-        if (!parameter.value.isNull()) {
-            m_acceptedExtensionsBuilder.append('=');
-            m_acceptedExtensionsBuilder.append(parameter.value);
-        }
+        m_acceptedExtensionsBuilder.append("; ", parameter.key);
+        if (!parameter.value.isNull())
+            m_acceptedExtensionsBuilder.append('=', parameter.value);
     }
 }
 
 void WebSocketExtensionDispatcher::fail(const String& reason)
 {
