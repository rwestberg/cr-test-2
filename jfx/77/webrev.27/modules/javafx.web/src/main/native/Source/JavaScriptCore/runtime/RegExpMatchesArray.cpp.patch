diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpMatchesArray.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpMatchesArray.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpMatchesArray.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpMatchesArray.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2012-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2012-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -45,22 +45,22 @@
         // when making this change we should check that all clients of this
         // function will correctly handle an exception being thrown from here.
         // https://bugs.webkit.org/show_bug.cgi?id=169786
         RELEASE_ASSERT(array);
 
-        array->initializeIndexWithoutBarrier(scope, 0, jsEmptyString(&vm));
+        array->initializeIndexWithoutBarrier(scope, 0, jsEmptyString(vm));
 
         if (unsigned numSubpatterns = regExp->numSubpatterns()) {
             for (unsigned i = 1; i <= numSubpatterns; ++i)
                 array->initializeIndexWithoutBarrier(scope, i, jsUndefined());
         }
     } else {
         ObjectInitializationScope scope(vm);
         array = tryCreateUninitializedRegExpMatchesArray(scope, &deferralContext, globalObject->regExpMatchesArrayStructure(), regExp->numSubpatterns() + 1);
         RELEASE_ASSERT(array);
 
-        array->initializeIndexWithoutBarrier(scope, 0, jsEmptyString(&vm), ArrayWithContiguous);
+        array->initializeIndexWithoutBarrier(scope, 0, jsEmptyString(vm), ArrayWithContiguous);
 
         if (unsigned numSubpatterns = regExp->numSubpatterns()) {
             for (unsigned i = 1; i <= numSubpatterns; ++i)
                 array->initializeIndexWithoutBarrier(scope, i, jsUndefined(), ArrayWithContiguous);
         }
