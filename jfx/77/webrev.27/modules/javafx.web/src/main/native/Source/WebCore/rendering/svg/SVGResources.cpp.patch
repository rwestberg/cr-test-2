diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/SVGResources.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/SVGResources.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/SVGResources.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/SVGResources.cpp
@@ -41,13 +41,13 @@
 
 SVGResources::SVGResources()
 {
 }
 
-static HashSet<AtomicString>& clipperFilterMaskerTags()
+static HashSet<AtomString>& clipperFilterMaskerTags()
 {
-    static NeverDestroyed<HashSet<AtomicString>> s_tagList;
+    static NeverDestroyed<HashSet<AtomString>> s_tagList;
     if (s_tagList.get().isEmpty()) {
         // "container elements": http://www.w3.org/TR/SVG11/intro.html#TermContainerElement
         // "graphics elements" : http://www.w3.org/TR/SVG11/intro.html#TermGraphicsElement
         s_tagList.get().add(SVGNames::aTag->localName());
         s_tagList.get().add(SVGNames::circleTag->localName());
@@ -90,26 +90,26 @@
     }
 
     return s_tagList;
 }
 
-static HashSet<AtomicString>& markerTags()
+static HashSet<AtomString>& markerTags()
 {
-    static NeverDestroyed<HashSet<AtomicString>> s_tagList;
+    static NeverDestroyed<HashSet<AtomString>> s_tagList;
     if (s_tagList.get().isEmpty()) {
         s_tagList.get().add(SVGNames::lineTag->localName());
         s_tagList.get().add(SVGNames::pathTag->localName());
         s_tagList.get().add(SVGNames::polygonTag->localName());
         s_tagList.get().add(SVGNames::polylineTag->localName());
     }
 
     return s_tagList;
 }
 
-static HashSet<AtomicString>& fillAndStrokeTags()
+static HashSet<AtomString>& fillAndStrokeTags()
 {
-    static NeverDestroyed<HashSet<AtomicString>> s_tagList;
+    static NeverDestroyed<HashSet<AtomString>> s_tagList;
     if (s_tagList.get().isEmpty()) {
         s_tagList.get().add(SVGNames::altGlyphTag->localName());
         s_tagList.get().add(SVGNames::circleTag->localName());
         s_tagList.get().add(SVGNames::ellipseTag->localName());
         s_tagList.get().add(SVGNames::lineTag->localName());
@@ -124,13 +124,13 @@
     }
 
     return s_tagList;
 }
 
-static HashSet<AtomicString>& chainableResourceTags()
+static HashSet<AtomString>& chainableResourceTags()
 {
-    static NeverDestroyed<HashSet<AtomicString>> s_tagList;
+    static NeverDestroyed<HashSet<AtomString>> s_tagList;
     if (s_tagList.get().isEmpty()) {
         s_tagList.get().add(SVGNames::linearGradientTag->localName());
         s_tagList.get().add(SVGNames::filterTag->localName());
         s_tagList.get().add(SVGNames::patternTag->localName());
         s_tagList.get().add(SVGNames::radialGradientTag->localName());
@@ -167,11 +167,11 @@
 
     ASSERT_NOT_REACHED();
     return false;
 }
 
-static inline RenderSVGResourceContainer* paintingResourceFromSVGPaint(Document& document, const SVGPaintType& paintType, const String& paintUri, AtomicString& id, bool& hasPendingResource)
+static inline RenderSVGResourceContainer* paintingResourceFromSVGPaint(Document& document, const SVGPaintType& paintType, const String& paintUri, AtomString& id, bool& hasPendingResource)
 {
     if (paintType != SVGPaintType::URI && paintType != SVGPaintType::URIRGBColor && paintType != SVGPaintType::URICurrentColor)
         return nullptr;
 
     id = SVGURIReference::fragmentIdentifierFromIRIString(paintUri, document);
@@ -186,11 +186,11 @@
         return nullptr;
 
     return container;
 }
 
-static inline void registerPendingResource(SVGDocumentExtensions& extensions, const AtomicString& id, SVGElement& element)
+static inline void registerPendingResource(SVGDocumentExtensions& extensions, const AtomString& id, SVGElement& element)
 {
     extensions.addPendingResource(id, element);
 }
 
 bool SVGResources::buildCachedResources(const RenderElement& renderer, const RenderStyle& style)
@@ -205,29 +205,29 @@
 
     Document& document = element.document();
 
     SVGDocumentExtensions& extensions = document.accessSVGExtensions();
 
-    const AtomicString& tagName = element.localName();
+    const AtomString& tagName = element.localName();
     if (tagName.isNull())
         return false;
 
     const SVGRenderStyle& svgStyle = style.svgStyle();
 
     bool foundResources = false;
     if (clipperFilterMaskerTags().contains(tagName)) {
         if (svgStyle.hasClipper()) {
-            AtomicString id(svgStyle.clipperResource());
+            AtomString id(svgStyle.clipperResource());
             if (setClipper(getRenderSVGResourceById<RenderSVGResourceClipper>(document, id)))
                 foundResources = true;
             else
                 registerPendingResource(extensions, id, element);
         } else if (is<ReferenceClipPathOperation>(style.clipPath())) {
             // FIXME: -webkit-clip-path should support external resources
             // https://bugs.webkit.org/show_bug.cgi?id=127032
             auto& clipPath = downcast<ReferenceClipPathOperation>(*style.clipPath());
-            AtomicString id(clipPath.fragment());
+            AtomString id(clipPath.fragment());
             if (setClipper(getRenderSVGResourceById<RenderSVGResourceClipper>(document, id)))
                 foundResources = true;
             else
                 registerPendingResource(extensions, id, element);
         }
@@ -236,70 +236,70 @@
             const FilterOperations& filterOperations = style.filter();
             if (filterOperations.size() == 1) {
                 const FilterOperation& filterOperation = *filterOperations.at(0);
                 if (filterOperation.type() == FilterOperation::REFERENCE) {
                     const auto& referenceFilterOperation = downcast<ReferenceFilterOperation>(filterOperation);
-                    AtomicString id = SVGURIReference::fragmentIdentifierFromIRIString(referenceFilterOperation.url(), element.document());
+                    AtomString id = SVGURIReference::fragmentIdentifierFromIRIString(referenceFilterOperation.url(), element.document());
                     if (setFilter(getRenderSVGResourceById<RenderSVGResourceFilter>(document, id)))
                         foundResources = true;
                     else
                         registerPendingResource(extensions, id, element);
                 }
             }
         }
 
         if (svgStyle.hasMasker()) {
-            AtomicString id(svgStyle.maskerResource());
+            AtomString id(svgStyle.maskerResource());
             if (setMasker(getRenderSVGResourceById<RenderSVGResourceMasker>(document, id)))
                 foundResources = true;
             else
                 registerPendingResource(extensions, id, element);
         }
     }
 
     if (markerTags().contains(tagName) && svgStyle.hasMarkers()) {
-        AtomicString markerStartId(svgStyle.markerStartResource());
+        AtomString markerStartId(svgStyle.markerStartResource());
         if (setMarkerStart(getRenderSVGResourceById<RenderSVGResourceMarker>(document, markerStartId)))
             foundResources = true;
         else
             registerPendingResource(extensions, markerStartId, element);
 
-        AtomicString markerMidId(svgStyle.markerMidResource());
+        AtomString markerMidId(svgStyle.markerMidResource());
         if (setMarkerMid(getRenderSVGResourceById<RenderSVGResourceMarker>(document, markerMidId)))
             foundResources = true;
         else
             registerPendingResource(extensions, markerMidId, element);
 
-        AtomicString markerEndId(svgStyle.markerEndResource());
+        AtomString markerEndId(svgStyle.markerEndResource());
         if (setMarkerEnd(getRenderSVGResourceById<RenderSVGResourceMarker>(document, markerEndId)))
             foundResources = true;
         else
             registerPendingResource(extensions, markerEndId, element);
     }
 
     if (fillAndStrokeTags().contains(tagName)) {
         if (svgStyle.hasFill()) {
             bool hasPendingResource = false;
-            AtomicString id;
+            AtomString id;
             if (setFill(paintingResourceFromSVGPaint(document, svgStyle.fillPaintType(), svgStyle.fillPaintUri(), id, hasPendingResource)))
                 foundResources = true;
             else if (hasPendingResource)
                 registerPendingResource(extensions, id, element);
         }
 
         if (svgStyle.hasStroke()) {
             bool hasPendingResource = false;
-            AtomicString id;
+            AtomString id;
             if (setStroke(paintingResourceFromSVGPaint(document, svgStyle.strokePaintType(), svgStyle.strokePaintUri(), id, hasPendingResource)))
                 foundResources = true;
             else if (hasPendingResource)
                 registerPendingResource(extensions, id, element);
         }
     }
 
     if (chainableResourceTags().contains(tagName)) {
-        AtomicString id(targetReferenceFromResource(element));
+        AtomString id(targetReferenceFromResource(element));
         auto* linkedResource = getRenderSVGResourceContainerById(document, id);
         if (!linkedResource)
             registerPendingResource(extensions, id, element);
         else if (isChainableResource(element, linkedResource->element())) {
             setLinkedResource(linkedResource);
@@ -506,11 +506,11 @@
         return false;
 
     ASSERT(clipper->resourceType() == ClipperResourceType);
 
     if (!m_clipperFilterMaskerData)
-        m_clipperFilterMaskerData = std::make_unique<ClipperFilterMaskerData>();
+        m_clipperFilterMaskerData = makeUnique<ClipperFilterMaskerData>();
 
     m_clipperFilterMaskerData->clipper = clipper;
     return true;
 }
 
@@ -527,11 +527,11 @@
         return false;
 
     ASSERT(filter->resourceType() == FilterResourceType);
 
     if (!m_clipperFilterMaskerData)
-        m_clipperFilterMaskerData = std::make_unique<ClipperFilterMaskerData>();
+        m_clipperFilterMaskerData = makeUnique<ClipperFilterMaskerData>();
 
     m_clipperFilterMaskerData->filter = filter;
     return true;
 }
 
@@ -548,11 +548,11 @@
         return false;
 
     ASSERT(markerStart->resourceType() == MarkerResourceType);
 
     if (!m_markerData)
-        m_markerData = std::make_unique<MarkerData>();
+        m_markerData = makeUnique<MarkerData>();
 
     m_markerData->markerStart = markerStart;
     return true;
 }
 
@@ -569,11 +569,11 @@
         return false;
 
     ASSERT(markerMid->resourceType() == MarkerResourceType);
 
     if (!m_markerData)
-        m_markerData = std::make_unique<MarkerData>();
+        m_markerData = makeUnique<MarkerData>();
 
     m_markerData->markerMid = markerMid;
     return true;
 }
 
@@ -590,11 +590,11 @@
         return false;
 
     ASSERT(markerEnd->resourceType() == MarkerResourceType);
 
     if (!m_markerData)
-        m_markerData = std::make_unique<MarkerData>();
+        m_markerData = makeUnique<MarkerData>();
 
     m_markerData->markerEnd = markerEnd;
     return true;
 }
 
@@ -611,11 +611,11 @@
         return false;
 
     ASSERT(masker->resourceType() == MaskerResourceType);
 
     if (!m_clipperFilterMaskerData)
-        m_clipperFilterMaskerData = std::make_unique<ClipperFilterMaskerData>();
+        m_clipperFilterMaskerData = makeUnique<ClipperFilterMaskerData>();
 
     m_clipperFilterMaskerData->masker = masker;
     return true;
 }
 
@@ -634,11 +634,11 @@
     ASSERT(fill->resourceType() == PatternResourceType
            || fill->resourceType() == LinearGradientResourceType
            || fill->resourceType() == RadialGradientResourceType);
 
     if (!m_fillStrokeData)
-        m_fillStrokeData = std::make_unique<FillStrokeData>();
+        m_fillStrokeData = makeUnique<FillStrokeData>();
 
     m_fillStrokeData->fill = fill;
     return true;
 }
 
@@ -657,11 +657,11 @@
     ASSERT(stroke->resourceType() == PatternResourceType
            || stroke->resourceType() == LinearGradientResourceType
            || stroke->resourceType() == RadialGradientResourceType);
 
     if (!m_fillStrokeData)
-        m_fillStrokeData = std::make_unique<FillStrokeData>();
+        m_fillStrokeData = makeUnique<FillStrokeData>();
 
     m_fillStrokeData->stroke = stroke;
     return true;
 }
 
