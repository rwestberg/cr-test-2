diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakBlock.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakBlock.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakBlock.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakBlock.cpp
@@ -26,11 +26,11 @@
 #include "config.h"
 #include "WeakBlock.h"
 
 #include "CellContainerInlines.h"
 #include "Heap.h"
-#include "HeapSnapshotBuilder.h"
+#include "HeapAnalyzer.h"
 #include "JSCInlines.h"
 #include "JSObject.h"
 #include "WeakHandleOwner.h"
 
 namespace JSC {
@@ -115,21 +115,21 @@
         if (container.isMarked(markingVersion, jsValue.asCell()))
             continue;
 
         const char* reason = "";
         const char** reasonPtr = nullptr;
-        if (UNLIKELY(visitor.isBuildingHeapSnapshot()))
+        if (UNLIKELY(visitor.isAnalyzingHeap()))
             reasonPtr = &reason;
 
         if (!weakHandleOwner->isReachableFromOpaqueRoots(Handle<Unknown>::wrapSlot(&const_cast<JSValue&>(jsValue)), weakImpl->context(), visitor, reasonPtr))
             continue;
 
         visitor.appendUnbarriered(jsValue);
 
-        if (UNLIKELY(visitor.isBuildingHeapSnapshot())) {
+        if (UNLIKELY(visitor.isAnalyzingHeap())) {
             if (jsValue.isCell())
-                visitor.heapSnapshotBuilder()->setOpaqueRootReachabilityReasonForCell(jsValue.asCell(), *reasonPtr);
+                visitor.heapAnalyzer()->setOpaqueRootReachabilityReasonForCell(jsValue.asCell(), *reasonPtr);
         }
     }
 }
 
 void WeakBlock::visit(SlotVisitor& visitor)
