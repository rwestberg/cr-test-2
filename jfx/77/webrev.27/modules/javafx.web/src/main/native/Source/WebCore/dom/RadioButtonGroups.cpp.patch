diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/RadioButtonGroups.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/RadioButtonGroups.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/RadioButtonGroups.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/RadioButtonGroups.cpp
@@ -184,29 +184,27 @@
     return m_members.contains(&button);
 }
 
 // ----------------------------------------------------------------
 
-// Explicity define empty constructor and destructor in order to prevent the
-// compiler from generating them as inlines. So we don't need to to define
-// RadioButtonGroup in the header.
+// Explicitly define default constructor and destructor here outside the header
+// so we can compile the header without including the definition of RadioButtonGroup.
 RadioButtonGroups::RadioButtonGroups() = default;
-
 RadioButtonGroups::~RadioButtonGroups() = default;
 
 void RadioButtonGroups::addButton(HTMLInputElement& element)
 {
     ASSERT(element.isRadioButton());
     if (element.name().isEmpty())
         return;
 
     if (!m_nameToGroupMap)
-        m_nameToGroupMap = std::make_unique<NameToGroupMap>();
+        m_nameToGroupMap = makeUnique<NameToGroupMap>();
 
     auto& group = m_nameToGroupMap->add(element.name().impl(), nullptr).iterator->value;
     if (!group)
-        group = std::make_unique<RadioButtonGroup>();
+        group = makeUnique<RadioButtonGroup>();
     group->add(element);
 }
 
 Vector<HTMLInputElement*> RadioButtonGroups::groupMembers(const HTMLInputElement& element) const
 {
@@ -249,23 +247,23 @@
     auto* group = m_nameToGroupMap->get(element.name().impl());
     ASSERT(group);
     group->requiredStateChanged(element);
 }
 
-HTMLInputElement* RadioButtonGroups::checkedButtonForGroup(const AtomicString& name) const
+HTMLInputElement* RadioButtonGroups::checkedButtonForGroup(const AtomString& name) const
 {
     if (!m_nameToGroupMap)
-        return 0;
+        return nullptr;
     m_nameToGroupMap->checkConsistency();
     RadioButtonGroup* group = m_nameToGroupMap->get(name.impl());
     return group ? group->checkedButton() : nullptr;
 }
 
 bool RadioButtonGroups::hasCheckedButton(const HTMLInputElement& element) const
 {
     ASSERT(element.isRadioButton());
-    const AtomicString& name = element.name();
+    const AtomString& name = element.name();
     if (name.isEmpty() || !m_nameToGroupMap)
         return element.checked();
     return m_nameToGroupMap->get(name.impl())->checkedButton();
 }
 
@@ -294,11 +292,11 @@
         return;
     it->value->remove(element);
     if (it->value->isEmpty()) {
         // FIXME: We may skip deallocating the empty RadioButtonGroup for
         // performance improvement. If we do so, we need to change the key type
-        // of m_nameToGroupMap from AtomicStringImpl* to RefPtr<AtomicStringImpl>.
+        // of m_nameToGroupMap from AtomStringImpl* to RefPtr<AtomStringImpl>.
         m_nameToGroupMap->remove(it);
         if (m_nameToGroupMap->isEmpty())
             m_nameToGroupMap = nullptr;
     }
 }
