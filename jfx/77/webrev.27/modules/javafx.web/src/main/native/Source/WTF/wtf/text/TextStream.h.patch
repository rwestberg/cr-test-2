diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/TextStream.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/TextStream.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/TextStream.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/TextStream.h
@@ -29,12 +29,14 @@
 #include <wtf/text/StringBuilder.h>
 
 namespace WTF {
 
 class TextStream {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     struct FormatNumberRespectingIntegers {
+        WTF_MAKE_STRUCT_FAST_ALLOCATED;
         FormatNumberRespectingIntegers(double number)
             : value(number) { }
 
         double value;
     };
@@ -68,10 +70,14 @@
     WTF_EXPORT_PRIVATE TextStream& operator<<(const void*);
     WTF_EXPORT_PRIVATE TextStream& operator<<(const String&);
     // Deprecated. Use the NumberRespectingIntegers FormattingFlag instead.
     WTF_EXPORT_PRIVATE TextStream& operator<<(const FormatNumberRespectingIntegers&);
 
+#ifdef __OBJC__
+    WTF_EXPORT_PRIVATE TextStream& operator<<(id<NSObject>);
+#endif
+
     FormattingFlags formattingFlags() const { return m_formattingFlags; }
     void setFormattingFlags(FormattingFlags flags) { m_formattingFlags = flags; }
 
     bool hasFormattingFlag(Formatting flag) const { return m_formattingFlags & flag; }
 
@@ -89,10 +95,11 @@
     WTF_EXPORT_PRIVATE void startGroup();
     WTF_EXPORT_PRIVATE void endGroup();
     WTF_EXPORT_PRIVATE void nextLine(); // Output newline and indent.
 
     int indent() const { return m_indent; }
+    void setIndent(int indent) { m_indent = indent; }
     void increaseIndent(int amount = 1) { m_indent += amount; }
     void decreaseIndent(int amount = 1) { m_indent -= amount; ASSERT(m_indent >= 0); }
 
     WTF_EXPORT_PRIVATE void writeIndent();
 
@@ -100,10 +107,27 @@
     TextStream& operator<<(TextStream& (*func)(TextStream&))
     {
         return (*func)(*this);
     }
 
+    struct Repeat {
+        WTF_MAKE_STRUCT_FAST_ALLOCATED;
+        Repeat(unsigned inWidth, char inCharacter)
+            : width(inWidth), character(inCharacter)
+        { }
+        unsigned width { 0 };
+        char character { ' ' };
+    };
+
+    TextStream& operator<<(const Repeat& repeated)
+    {
+        for (unsigned i = 0; i < repeated.width; ++i)
+            m_text.append(repeated.character);
+
+        return *this;
+    }
+
     class IndentScope {
     public:
         IndentScope(TextStream& ts, int amount = 1)
             : m_stream(ts)
             , m_amount(amount)
@@ -162,10 +186,24 @@
     }
 
     return ts << "]";
 }
 
+template<typename Option>
+TextStream& operator<<(TextStream& ts, const OptionSet<Option>& options)
+{
+    ts << "[";
+    bool needComma = false;
+    for (auto option : options) {
+        if (needComma)
+            ts << ", ";
+        needComma = true;
+        ts << option;
+    }
+    return ts << "]";
+}
+
 // Deprecated. Use TextStream::writeIndent() instead.
 WTF_EXPORT_PRIVATE void writeIndent(TextStream&, int indent);
 
 } // namespace WTF
 
