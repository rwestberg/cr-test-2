diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontSelector.h b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontSelector.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontSelector.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontSelector.h
@@ -56,11 +56,11 @@
     virtual ~CSSFontSelector();
 
     unsigned version() const final { return m_version; }
     unsigned uniqueId() const final { return m_uniqueId; }
 
-    FontRanges fontRangesForFamily(const FontDescription&, const AtomicString&) final;
+    FontRanges fontRangesForFamily(const FontDescription&, const AtomString&) final;
     size_t fallbackFontCount() final;
     RefPtr<Font> fallbackFontAt(const FontDescription&, size_t) final;
 
     void clearDocument();
     void emptyCaches();
@@ -75,25 +75,26 @@
     bool isEmpty() const;
 
     void registerForInvalidationCallbacks(FontSelectorClient&) final;
     void unregisterForInvalidationCallbacks(FontSelectorClient&) final;
 
-    Document* document() const { return m_document; }
+    Document* document() const { return m_document.get(); }
 
     void beginLoadingFontSoon(CachedFont&);
 
+    FontFaceSet* optionalFontFaceSet();
     FontFaceSet& fontFaceSet();
 
     void incrementIsComputingRootStyleFont() { ++m_computingRootStyleFontCount; }
     void decrementIsComputingRootStyleFont() { --m_computingRootStyleFontCount; }
 
 private:
     explicit CSSFontSelector(Document&);
 
     void dispatchInvalidationCallbacks();
 
-    void opportunisticallyStartFontDataURLLoading(const FontCascadeDescription&, const AtomicString& family) final;
+    void opportunisticallyStartFontDataURLLoading(const FontCascadeDescription&, const AtomString& family) final;
 
     void fontModified() final;
 
     void beginLoadTimerFired();
 
@@ -101,11 +102,11 @@
         StyleRuleFontFace& styleRuleFontFace;
         bool isInitiatingElementInUserAgentShadowTree;
     };
     Vector<PendingFontFaceRule> m_stagingArea;
 
-    Document* m_document;
+    WeakPtr<Document> m_document;
     RefPtr<FontFaceSet> m_fontFaceSet;
     Ref<CSSFontFaceSet> m_cssFontFaceSet;
     HashSet<FontSelectorClient*> m_clients;
 
     Vector<CachedResourceHandle<CachedFont>> m_fontsToBeginLoading;
