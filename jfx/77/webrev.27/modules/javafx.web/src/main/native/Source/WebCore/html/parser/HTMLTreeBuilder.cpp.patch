diff a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLTreeBuilder.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLTreeBuilder.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLTreeBuilder.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLTreeBuilder.cpp
@@ -54,11 +54,11 @@
 
 namespace WebCore {
 
 using namespace HTMLNames;
 
-CustomElementConstructionData::CustomElementConstructionData(Ref<JSCustomElementInterface>&& customElementInterface, const AtomicString& name, Vector<Attribute>&& attributes)
+CustomElementConstructionData::CustomElementConstructionData(Ref<JSCustomElementInterface>&& customElementInterface, const AtomString& name, Vector<Attribute>&& attributes)
     : elementInterface(WTFMove(customElementInterface))
     , name(name)
     , attributes(WTFMove(attributes))
 {
 }
@@ -87,36 +87,36 @@
 static inline bool isAllWhitespaceOrReplacementCharacters(const String& string)
 {
     return string.isAllSpecialCharacters<isHTMLSpaceOrReplacementCharacter>();
 }
 
-static bool isNumberedHeaderTag(const AtomicString& tagName)
+static bool isNumberedHeaderTag(const AtomString& tagName)
 {
     return tagName == h1Tag
         || tagName == h2Tag
         || tagName == h3Tag
         || tagName == h4Tag
         || tagName == h5Tag
         || tagName == h6Tag;
 }
 
-static bool isCaptionColOrColgroupTag(const AtomicString& tagName)
+static bool isCaptionColOrColgroupTag(const AtomString& tagName)
 {
     return tagName == captionTag || tagName == colTag || tagName == colgroupTag;
 }
 
-static bool isTableCellContextTag(const AtomicString& tagName)
+static bool isTableCellContextTag(const AtomString& tagName)
 {
     return tagName == thTag || tagName == tdTag;
 }
 
-static bool isTableBodyContextTag(const AtomicString& tagName)
+static bool isTableBodyContextTag(const AtomString& tagName)
 {
     return tagName == tbodyTag || tagName == tfootTag || tagName == theadTag;
 }
 
-static bool isNonAnchorNonNobrFormattingTag(const AtomicString& tagName)
+static bool isNonAnchorNonNobrFormattingTag(const AtomString& tagName)
 {
     return tagName == bTag
         || tagName == bigTag
         || tagName == codeTag
         || tagName == emTag
@@ -128,17 +128,17 @@
         || tagName == strongTag
         || tagName == ttTag
         || tagName == uTag;
 }
 
-static bool isNonAnchorFormattingTag(const AtomicString& tagName)
+static bool isNonAnchorFormattingTag(const AtomString& tagName)
 {
     return tagName == nobrTag || isNonAnchorNonNobrFormattingTag(tagName);
 }
 
 // https://html.spec.whatwg.org/multipage/syntax.html#formatting
-bool HTMLConstructionSite::isFormattingTag(const AtomicString& tagName)
+bool HTMLConstructionSite::isFormattingTag(const AtomString& tagName)
 {
     return tagName == aTag || isNonAnchorFormattingTag(tagName);
 }
 
 class HTMLTreeBuilder::ExternalCharacterTokenBuffer {
@@ -418,11 +418,11 @@
     // FIXME: We'll need a fancier conversion than just "localName" for SVG/MathML tags.
     AtomicHTMLToken fakeToken(HTMLToken::StartTag, tagName.localName(), WTFMove(attributes));
     processStartTag(WTFMove(fakeToken));
 }
 
-void HTMLTreeBuilder::processFakeEndTag(const AtomicString& tagName)
+void HTMLTreeBuilder::processFakeEndTag(const AtomString& tagName)
 {
     AtomicHTMLToken fakeToken(HTMLToken::EndTag, tagName);
     processEndTag(WTFMove(fakeToken));
 }
 
@@ -476,44 +476,44 @@
     }
     processFakePEndTagIfPInButtonScope();
     m_tree.insertHTMLElement(WTFMove(token));
 }
 
-template <typename TableQualifiedName> static HashMap<AtomicString, QualifiedName> createCaseMap(const TableQualifiedName* const names[], unsigned length)
+template <typename TableQualifiedName> static HashMap<AtomString, QualifiedName> createCaseMap(const TableQualifiedName* const names[], unsigned length)
 {
-    HashMap<AtomicString, QualifiedName> map;
+    HashMap<AtomString, QualifiedName> map;
     for (unsigned i = 0; i < length; ++i) {
         const QualifiedName& name = *names[i];
-        const AtomicString& localName = name.localName();
-        AtomicString loweredLocalName = localName.convertToASCIILowercase();
+        const AtomString& localName = name.localName();
+        AtomString loweredLocalName = localName.convertToASCIILowercase();
         if (loweredLocalName != localName)
             map.add(loweredLocalName, name);
     }
     return map;
 }
 
 static void adjustSVGTagNameCase(AtomicHTMLToken& token)
 {
-    static NeverDestroyed<HashMap<AtomicString, QualifiedName>> map = createCaseMap(SVGNames::getSVGTags(), SVGNames::SVGTagsCount);
+    static NeverDestroyed<HashMap<AtomString, QualifiedName>> map = createCaseMap(SVGNames::getSVGTags(), SVGNames::SVGTagsCount);
     const QualifiedName& casedName = map.get().get(token.name());
     if (casedName.localName().isNull())
         return;
     token.setName(casedName.localName());
 }
 
-static inline void adjustAttributes(HashMap<AtomicString, QualifiedName>& map, AtomicHTMLToken& token)
+static inline void adjustAttributes(HashMap<AtomString, QualifiedName>& map, AtomicHTMLToken& token)
 {
     for (auto& attribute : token.attributes()) {
         const QualifiedName& casedName = map.get(attribute.localName());
         if (!casedName.localName().isNull())
             attribute.parserSetName(casedName);
     }
 }
 
 template<const QualifiedName* const* attributesTable(), unsigned attributesTableLength> static void adjustAttributes(AtomicHTMLToken& token)
 {
-    static NeverDestroyed<HashMap<AtomicString, QualifiedName>> map = createCaseMap(attributesTable(), attributesTableLength);
+    static NeverDestroyed<HashMap<AtomString, QualifiedName>> map = createCaseMap(attributesTable(), attributesTableLength);
     adjustAttributes(map, token);
 }
 
 static inline void adjustSVGAttributes(AtomicHTMLToken& token)
 {
@@ -523,24 +523,24 @@
 static inline void adjustMathMLAttributes(AtomicHTMLToken& token)
 {
     adjustAttributes<MathMLNames::getMathMLAttrs, MathMLNames::MathMLAttrsCount>(token);
 }
 
-static void addNamesWithPrefix(HashMap<AtomicString, QualifiedName>& map, const AtomicString& prefix, const QualifiedName* const names[], unsigned length)
+static void addNamesWithPrefix(HashMap<AtomString, QualifiedName>& map, const AtomString& prefix, const QualifiedName* const names[], unsigned length)
 {
     for (unsigned i = 0; i < length; ++i) {
         const QualifiedName& name = *names[i];
-        const AtomicString& localName = name.localName();
+        const AtomString& localName = name.localName();
         map.add(prefix + ':' + localName, QualifiedName(prefix, localName, name.namespaceURI()));
     }
 }
 
-static HashMap<AtomicString, QualifiedName> createForeignAttributesMap()
+static HashMap<AtomString, QualifiedName> createForeignAttributesMap()
 {
-    HashMap<AtomicString, QualifiedName> map;
+    HashMap<AtomString, QualifiedName> map;
 
-    AtomicString xlinkName("xlink", AtomicString::ConstructFromLiteral);
+    AtomString xlinkName("xlink", AtomString::ConstructFromLiteral);
     addNamesWithPrefix(map, xlinkName, XLinkNames::getXLinkAttrs(), XLinkNames::XLinkAttrsCount);
     addNamesWithPrefix(map, xmlAtom(), XMLNames::getXMLAttrs(), XMLNames::XMLAttrsCount);
 
     map.add(WTF::xmlnsAtom(), XMLNSNames::xmlnsAttr);
     map.add("xmlns:xlink", QualifiedName(xmlnsAtom(), xlinkName, XMLNSNames::xmlnsNamespaceURI));
@@ -548,11 +548,11 @@
     return map;
 }
 
 static void adjustForeignAttributes(AtomicHTMLToken& token)
 {
-    static NeverDestroyed<HashMap<AtomicString, QualifiedName>> map = createForeignAttributesMap();
+    static NeverDestroyed<HashMap<AtomString, QualifiedName>> map = createForeignAttributesMap();
     adjustAttributes(map, token);
 }
 
 void HTMLTreeBuilder::processStartTagForInBody(AtomicHTMLToken&& token)
 {
@@ -785,11 +785,11 @@
     if (token.name() == iframeTag) {
         m_framesetOk = false;
         processGenericRawTextStartTag(WTFMove(token));
         return;
     }
-    if (token.name() == noembedTag && m_options.pluginsEnabled) {
+    if (token.name() == noembedTag) {
         processGenericRawTextStartTag(WTFMove(token));
         return;
     }
     if (token.name() == noscriptTag && m_options.scriptEnabled) {
         processGenericRawTextStartTag(WTFMove(token));
@@ -2198,11 +2198,11 @@
 void HTMLTreeBuilder::insertPhoneNumberLink(const String& string)
 {
     Vector<Attribute> attributes;
     attributes.append(Attribute(HTMLNames::hrefAttr, makeString("tel:"_s, string)));
 
-    const AtomicString& aTagLocalName = aTag->localName();
+    const AtomString& aTagLocalName = aTag->localName();
     AtomicHTMLToken aStartToken(HTMLToken::StartTag, aTagLocalName, WTFMove(attributes));
     AtomicHTMLToken aEndToken(HTMLToken::EndTag, aTagLocalName);
 
     processStartTag(WTFMove(aStartToken));
     m_tree.executeQueuedTasks();
@@ -2256,10 +2256,11 @@
 
 // Looks at the ancestors of the element to determine whether we're inside an element which disallows parsing phone numbers.
 static inline bool disallowTelephoneNumberParsing(const ContainerNode& node)
 {
     return node.isLink()
+        || node.hasTagName(aTag)
         || node.hasTagName(scriptTag)
         || is<HTMLFormControlElement>(node)
         || node.hasTagName(styleTag)
         || node.hasTagName(ttTag)
         || node.hasTagName(preTag)
@@ -2771,11 +2772,11 @@
             parseError(token);
             m_tree.openElements().popUntilForeignContentScopeMarker();
             processStartTag(WTFMove(token));
             return;
         }
-        const AtomicString& currentNamespace = adjustedCurrentNode.namespaceURI();
+        const AtomString& currentNamespace = adjustedCurrentNode.namespaceURI();
         if (currentNamespace == MathMLNames::mathmlNamespaceURI)
             adjustMathMLAttributes(token);
         if (currentNamespace == SVGNames::svgNamespaceURI) {
             adjustSVGTagNameCase(token);
             adjustSVGAttributes(token);
