diff a/modules/javafx.web/src/main/native/Source/WebCore/plugins/DOMPluginArray.cpp b/modules/javafx.web/src/main/native/Source/WebCore/plugins/DOMPluginArray.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/plugins/DOMPluginArray.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/plugins/DOMPluginArray.cpp
@@ -22,16 +22,19 @@
 
 #include "DOMPlugin.h"
 #include "Frame.h"
 #include "Page.h"
 #include "PluginData.h"
-#include <wtf/text/AtomicString.h>
+#include <wtf/IsoMallocInlines.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
-DOMPluginArray::DOMPluginArray(DOMWindow* window)
-    : DOMWindowProperty(window)
+WTF_MAKE_ISO_ALLOCATED_IMPL(DOMPluginArray);
+
+DOMPluginArray::DOMPluginArray(Navigator& navigator)
+    : m_navigator(makeWeakPtr(navigator))
 {
 }
 
 DOMPluginArray::~DOMPluginArray() = default;
 
@@ -54,11 +57,11 @@
     if (index >= plugins.size())
         return nullptr;
     return DOMPlugin::create(data, frame(), plugins[index]);
 }
 
-RefPtr<DOMPlugin> DOMPluginArray::namedItem(const AtomicString& propertyName)
+RefPtr<DOMPlugin> DOMPluginArray::namedItem(const AtomString& propertyName)
 {
     PluginData* data = pluginData();
     if (!data)
         return nullptr;
 
@@ -67,19 +70,19 @@
             return DOMPlugin::create(data, frame(), plugin);
     }
     return nullptr;
 }
 
-Vector<AtomicString> DOMPluginArray::supportedPropertyNames()
+Vector<AtomString> DOMPluginArray::supportedPropertyNames()
 {
     PluginData* data = pluginData();
     if (!data)
         return { };
 
     const auto& plugins = data->publiclyVisiblePlugins();
 
-    Vector<AtomicString> result;
+    Vector<AtomString> result;
     result.reserveInitialCapacity(plugins.size());
     for (auto& plugin : plugins)
         result.uncheckedAppend(plugin.name);
 
     return result;
