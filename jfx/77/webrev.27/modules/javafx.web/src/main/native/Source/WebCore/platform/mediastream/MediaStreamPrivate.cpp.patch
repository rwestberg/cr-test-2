diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamPrivate.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamPrivate.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamPrivate.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamPrivate.cpp
@@ -1,10 +1,10 @@
 /*
  * Copyright (C) 2011, 2015 Ericsson AB. All rights reserved.
  * Copyright (C) 2013 Google Inc. All rights reserved.
  * Copyright (C) 2013 Nokia Corporation and/or its subsidiary(-ies).
- * Copyright (C) 2015 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are
  * met:
  *
@@ -36,38 +36,45 @@
 
 #if ENABLE(MEDIA_STREAM)
 
 #include "GraphicsContext.h"
 #include "IntRect.h"
+#include "Logging.h"
 #include <wtf/MainThread.h>
 #include <wtf/RefCounted.h>
 #include <wtf/Vector.h>
 
 namespace WebCore {
 
-Ref<MediaStreamPrivate> MediaStreamPrivate::create(Ref<RealtimeMediaSource>&& source)
+Ref<MediaStreamPrivate> MediaStreamPrivate::create(Ref<const Logger>&& logger, Ref<RealtimeMediaSource>&& source)
 {
-    return MediaStreamPrivate::create(MediaStreamTrackPrivateVector::from(MediaStreamTrackPrivate::create(WTFMove(source))));
+    auto loggerCopy = logger.copyRef();
+    return MediaStreamPrivate::create(WTFMove(logger), MediaStreamTrackPrivateVector::from(MediaStreamTrackPrivate::create(WTFMove(loggerCopy), WTFMove(source))));
 }
 
-Ref<MediaStreamPrivate> MediaStreamPrivate::create(const Vector<Ref<RealtimeMediaSource>>& audioSources, const Vector<Ref<RealtimeMediaSource>>& videoSources)
+Ref<MediaStreamPrivate> MediaStreamPrivate::create(Ref<const Logger>&& logger, const Vector<Ref<RealtimeMediaSource>>& audioSources, const Vector<Ref<RealtimeMediaSource>>& videoSources)
 {
     MediaStreamTrackPrivateVector tracks;
     tracks.reserveInitialCapacity(audioSources.size() + videoSources.size());
 
     for (auto& source : audioSources)
-        tracks.uncheckedAppend(MediaStreamTrackPrivate::create(source.copyRef()));
+        tracks.uncheckedAppend(MediaStreamTrackPrivate::create(logger.copyRef(), source.copyRef()));
 
     for (auto& source : videoSources)
-        tracks.uncheckedAppend(MediaStreamTrackPrivate::create(source.copyRef()));
+        tracks.uncheckedAppend(MediaStreamTrackPrivate::create(logger.copyRef(), source.copyRef()));
 
-    return MediaStreamPrivate::create(tracks);
+    return MediaStreamPrivate::create(WTFMove(logger), tracks);
 }
 
-MediaStreamPrivate::MediaStreamPrivate(const MediaStreamTrackPrivateVector& tracks, String&& id)
+MediaStreamPrivate::MediaStreamPrivate(Ref<const Logger>&& logger, const MediaStreamTrackPrivateVector& tracks, String&& id)
     : m_id(WTFMove(id))
+#if !RELEASE_LOG_DISABLED
+    , m_logger(WTFMove(logger))
+    , m_logIdentifier(uniqueLogIdentifier())
+#endif
 {
+    UNUSED_PARAM(logger);
     ASSERT(!m_id.isEmpty());
 
     for (auto& track : tracks) {
         track->addObserver(*this);
         m_trackSet.add(track->id(), track);
@@ -134,10 +141,12 @@
 void MediaStreamPrivate::addTrack(RefPtr<MediaStreamTrackPrivate>&& track, NotifyClientOption notifyClientOption)
 {
     if (m_trackSet.contains(track->id()))
         return;
 
+    ALWAYS_LOG(LOGIDENTIFIER, track->logIdentifier());
+
     track->addObserver(*this);
     m_trackSet.add(track->id(), track);
 
     if (notifyClientOption == NotifyClientOption::Notify) {
         forEachObserver([&track](auto& observer) {
@@ -152,10 +161,11 @@
 void MediaStreamPrivate::removeTrack(MediaStreamTrackPrivate& track, NotifyClientOption notifyClientOption)
 {
     if (!m_trackSet.remove(track.id()))
         return;
 
+    ALWAYS_LOG(LOGIDENTIFIER, track.logIdentifier());
     track.removeObserver(*this);
 
     if (notifyClientOption == NotifyClientOption::Notify) {
         forEachObserver([&track](auto& observer) {
             observer.didRemoveTrack(track);
@@ -166,16 +176,18 @@
     characteristicsChanged();
 }
 
 void MediaStreamPrivate::startProducingData()
 {
+    ALWAYS_LOG(LOGIDENTIFIER);
     for (auto& track : m_trackSet.values())
         track->startProducingData();
 }
 
 void MediaStreamPrivate::stopProducingData()
 {
+    ALWAYS_LOG(LOGIDENTIFIER);
     for (auto& track : m_trackSet.values())
         track->stopProducingData();
 }
 
 bool MediaStreamPrivate::isProducingData() const
@@ -185,18 +197,10 @@
             return true;
     }
     return false;
 }
 
-void MediaStreamPrivate::setCaptureTracksMuted(bool muted)
-{
-    for (auto& track : m_trackSet.values()) {
-        if (track->isCaptureTrack())
-            track->setMuted(muted);
-    }
-}
-
 bool MediaStreamPrivate::hasVideo() const
 {
     for (auto& track : m_trackSet.values()) {
         if (track->type() == RealtimeMediaSource::Type::Video && track->enabled() && !track->ended())
             return true;
@@ -269,40 +273,60 @@
     forEachObserver([](auto& observer) {
         observer.characteristicsChanged();
     });
 }
 
-void MediaStreamPrivate::trackMutedChanged(MediaStreamTrackPrivate&)
+void MediaStreamPrivate::trackMutedChanged(MediaStreamTrackPrivate& track)
 {
+#if RELEASE_LOG_DISABLED
+    UNUSED_PARAM(track);
+#endif
+
+    ALWAYS_LOG(LOGIDENTIFIER, track.logIdentifier(), " ", track.muted());
     scheduleDeferredTask([this] {
         characteristicsChanged();
     });
 }
 
 void MediaStreamPrivate::trackSettingsChanged(MediaStreamTrackPrivate&)
 {
     characteristicsChanged();
 }
 
-void MediaStreamPrivate::trackEnabledChanged(MediaStreamTrackPrivate&)
+void MediaStreamPrivate::trackEnabledChanged(MediaStreamTrackPrivate& track)
 {
+#if RELEASE_LOG_DISABLED
+    UNUSED_PARAM(track);
+#endif
+
+    ALWAYS_LOG(LOGIDENTIFIER, track.logIdentifier(), " ", track.enabled());
     updateActiveVideoTrack();
 
     scheduleDeferredTask([this] {
         characteristicsChanged();
     });
 }
 
-void MediaStreamPrivate::trackStarted(MediaStreamTrackPrivate&)
+void MediaStreamPrivate::trackStarted(MediaStreamTrackPrivate& track)
 {
+#if RELEASE_LOG_DISABLED
+    UNUSED_PARAM(track);
+#endif
+
+    ALWAYS_LOG(LOGIDENTIFIER, track.logIdentifier());
     scheduleDeferredTask([this] {
         characteristicsChanged();
     });
 }
 
-void MediaStreamPrivate::trackEnded(MediaStreamTrackPrivate&)
+void MediaStreamPrivate::trackEnded(MediaStreamTrackPrivate& track)
 {
+#if RELEASE_LOG_DISABLED
+    UNUSED_PARAM(track);
+#endif
+
+    ALWAYS_LOG(LOGIDENTIFIER, track.logIdentifier());
     scheduleDeferredTask([this] {
         updateActiveState(NotifyClientOption::Notify);
         characteristicsChanged();
     });
 }
@@ -324,8 +348,15 @@
         if (track->source().isCaptureSource() && track->type() == RealtimeMediaSource::Type::Video)
             track->source().monitorOrientation(notifier);
     }
 }
 
+#if !RELEASE_LOG_DISABLED
+WTFLogChannel& MediaStreamPrivate::logChannel() const
+{
+    return LogWebRTC;
+}
+#endif
+
 } // namespace WebCore
 
 #endif // ENABLE(MEDIA_STREAM)
