diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLAddressSpace.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLAddressSpace.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLAddressSpace.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLAddressSpace.h
@@ -26,10 +26,12 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include <cstdint>
+#include <wtf/FastMalloc.h>
+#include <wtf/Variant.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
@@ -40,10 +42,100 @@
     Device,
     Threadgroup,
     Thread
 };
 
+ALWAYS_INLINE StringView toString(AddressSpace addressSpace)
+{
+    switch (addressSpace) {
+    case AddressSpace::Constant:
+        return "constant";
+    case AddressSpace::Device:
+        return "device";
+    case AddressSpace::Threadgroup:
+        return "threadgroup";
+    default:
+        ASSERT(addressSpace == AddressSpace::Thread);
+        return "thread";
+    }
+}
+
+struct LeftValue {
+    AddressSpace addressSpace;
+};
+
+struct AbstractLeftValue {
+};
+
+struct RightValue {
+};
+
+// FIXME: https://bugs.webkit.org/show_bug.cgi?id=198158 This wrapper might not be necessary.
+class TypeAnnotation {
+    WTF_MAKE_FAST_ALLOCATED;
+public:
+    TypeAnnotation()
+#if !ASSERT_DISABLED
+        : m_empty(true)
+#endif
+    {
+    }
+
+    TypeAnnotation(LeftValue v)
+        : m_inner(v)
+    {
+    }
+
+    TypeAnnotation(AbstractLeftValue v)
+        : m_inner(v)
+    {
+    }
+
+    TypeAnnotation(RightValue v)
+        : m_inner(v)
+    {
+    }
+
+    TypeAnnotation(const TypeAnnotation&) = default;
+    TypeAnnotation(TypeAnnotation&& other) = default;
+
+    TypeAnnotation& operator=(const TypeAnnotation&) = default;
+    TypeAnnotation& operator=(TypeAnnotation&& other) = default;
+
+    Optional<AddressSpace> leftAddressSpace() const
+    {
+        ASSERT(!m_empty);
+        if (WTF::holds_alternative<LeftValue>(m_inner))
+            return WTF::get<LeftValue>(m_inner).addressSpace;
+        return WTF::nullopt;
+    }
+
+    bool isRightValue() const
+    {
+        ASSERT(!m_empty);
+        return WTF::holds_alternative<RightValue>(m_inner);
+    }
+
+    template <typename Visitor> auto visit(const Visitor& visitor) -> decltype(WTF::visit(visitor, std::declval<Variant<LeftValue, AbstractLeftValue, RightValue>&>()))
+    {
+        ASSERT(!m_empty);
+        return WTF::visit(visitor, m_inner);
+    }
+
+    bool isAbstractLeftValue() const
+    {
+        ASSERT(!m_empty);
+        return WTF::holds_alternative<AbstractLeftValue>(m_inner);
+    }
+
+private:
+    Variant<LeftValue, AbstractLeftValue, RightValue> m_inner;
+#if !ASSERT_DISABLED
+    bool m_empty { false };
+#endif
+};
+
 }
 
 }
 
 }
