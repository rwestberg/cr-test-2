diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SamplingProfiler.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SamplingProfiler.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SamplingProfiler.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SamplingProfiler.cpp
@@ -46,10 +46,12 @@
 #include "NativeExecutable.h"
 #include "PCToCodeOriginMap.h"
 #include "SlotVisitor.h"
 #include "StrongInlines.h"
 #include "VM.h"
+#include "WasmCallee.h"
+#include "WasmCalleeRegistry.h"
 #include <thread>
 #include <wtf/FilePrintStream.h>
 #include <wtf/HashSet.h>
 #include <wtf/RefPtr.h>
 #include <wtf/StackTrace.h>
@@ -79,16 +81,17 @@
     }
 }
 
 class FrameWalker {
 public:
-    FrameWalker(VM& vm, ExecState* callFrame, const AbstractLocker& codeBlockSetLocker, const AbstractLocker& machineThreadsLocker)
+    FrameWalker(VM& vm, ExecState* callFrame, const AbstractLocker& codeBlockSetLocker, const AbstractLocker& machineThreadsLocker, const AbstractLocker& wasmCalleeLocker)
         : m_vm(vm)
         , m_callFrame(callFrame)
         , m_entryFrame(vm.topEntryFrame)
         , m_codeBlockSetLocker(codeBlockSetLocker)
         , m_machineThreadsLocker(machineThreadsLocker)
+        , m_wasmCalleeLocker(wasmCalleeLocker)
     {
     }
 
     SUPPRESS_ASAN
     size_t walk(Vector<UnprocessedStackFrame>& stackTrace, bool& didRunOutOfSpace)
@@ -96,11 +99,11 @@
         if (sReportStats)
             sNumTotalWalks++;
         resetAtMachineFrame();
         size_t maxStackTraceSize = stackTrace.size();
         while (!isAtTop() && !m_bailingOut && m_depth < maxStackTraceSize) {
-            recordJSFrame(stackTrace);
+            recordJITFrame(stackTrace);
             advanceToParentFrame();
             resetAtMachineFrame();
         }
         didRunOutOfSpace = m_depth >= maxStackTraceSize && !isAtTop();
         reportStats();
@@ -113,20 +116,31 @@
     }
 
 protected:
 
     SUPPRESS_ASAN
-    void recordJSFrame(Vector<UnprocessedStackFrame>& stackTrace)
+    void recordJITFrame(Vector<UnprocessedStackFrame>& stackTrace)
     {
         CallSiteIndex callSiteIndex;
         CalleeBits unsafeCallee = m_callFrame->unsafeCallee();
         CodeBlock* codeBlock = m_callFrame->unsafeCodeBlock();
         if (codeBlock) {
             ASSERT(isValidCodeBlock(codeBlock));
             callSiteIndex = m_callFrame->unsafeCallSiteIndex();
         }
         stackTrace[m_depth] = UnprocessedStackFrame(codeBlock, unsafeCallee, callSiteIndex);
+#if ENABLE(WEBASSEMBLY)
+        if (unsafeCallee.isWasm()) {
+            auto* wasmCallee = unsafeCallee.asWasmCallee();
+            if (Wasm::CalleeRegistry::singleton().isValidCallee(m_wasmCalleeLocker, wasmCallee)) {
+                // At this point, Wasm::Callee would be dying (ref count is 0), but its fields are still live.
+                // And we can safely copy Wasm::IndexOrName even when any lock is held by suspended threads.
+                stackTrace[m_depth].wasmIndexOrName = wasmCallee->indexOrName();
+                stackTrace[m_depth].wasmCompilationMode = wasmCallee->compilationMode();
+            }
+        }
+#endif
         m_depth++;
     }
 
     SUPPRESS_ASAN
     void advanceToParentFrame()
@@ -191,20 +205,21 @@
     VM& m_vm;
     ExecState* m_callFrame;
     EntryFrame* m_entryFrame;
     const AbstractLocker& m_codeBlockSetLocker;
     const AbstractLocker& m_machineThreadsLocker;
+    const AbstractLocker& m_wasmCalleeLocker;
     bool m_bailingOut { false };
     size_t m_depth { 0 };
 };
 
 class CFrameWalker : public FrameWalker {
 public:
     typedef FrameWalker Base;
 
-    CFrameWalker(VM& vm, void* machineFrame, ExecState* callFrame, const AbstractLocker& codeBlockSetLocker, const AbstractLocker& machineThreadsLocker)
-        : Base(vm, callFrame, codeBlockSetLocker, machineThreadsLocker)
+    CFrameWalker(VM& vm, void* machineFrame, ExecState* callFrame, const AbstractLocker& codeBlockSetLocker, const AbstractLocker& machineThreadsLocker, const AbstractLocker& wasmCalleeLocker)
+        : Base(vm, callFrame, codeBlockSetLocker, machineThreadsLocker, wasmCalleeLocker)
         , m_machineFrame(machineFrame)
     {
     }
 
     size_t walk(Vector<UnprocessedStackFrame>& stackTrace, bool& didRunOutOfSpace)
@@ -214,11 +229,11 @@
         resetAtMachineFrame();
         size_t maxStackTraceSize = stackTrace.size();
         // The way the C walker decides if a frame it is about to trace is C or JS is by
         // ensuring m_callFrame points to some frame above the machineFrame.
         if (!isAtTop() && !m_bailingOut && m_machineFrame == m_callFrame) {
-            recordJSFrame(stackTrace);
+            recordJITFrame(stackTrace);
             Base::advanceToParentFrame();
             resetAtMachineFrame();
         }
 
         while (!isAtTop() && !m_bailingOut && m_depth < maxStackTraceSize) {
@@ -231,11 +246,11 @@
             if (isCFrame()) {
                 RELEASE_ASSERT(!LLInt::isLLIntPC(frame()->callerFrame));
                 stackTrace[m_depth] = UnprocessedStackFrame(frame()->returnPC);
                 m_depth++;
             } else
-                recordJSFrame(stackTrace);
+                recordJITFrame(stackTrace);
             advanceToParentFrame();
             resetAtMachineFrame();
         }
         didRunOutOfSpace = m_depth >= maxStackTraceSize && !isAtTop();
         reportStats();
@@ -275,16 +290,16 @@
 
     void* m_machineFrame;
 };
 
 SamplingProfiler::SamplingProfiler(VM& vm, RefPtr<Stopwatch>&& stopwatch)
-    : m_vm(vm)
+    : m_isPaused(false)
+    , m_isShutDown(false)
+    , m_vm(vm)
     , m_weakRandom()
     , m_stopwatch(WTFMove(stopwatch))
     , m_timingInterval(Seconds::fromMicroseconds(Options::sampleInterval()))
-    , m_isPaused(false)
-    , m_isShutDown(false)
 {
     if (sReportStats) {
         sNumTotalWalks = 0;
         sNumFailedWalks = 0;
     }
@@ -339,12 +354,17 @@
     ASSERT(m_lock.isLocked());
     if (m_vm.entryScope) {
         Seconds nowTime = m_stopwatch->elapsedTime();
 
         auto machineThreadsLocker = holdLock(m_vm.heap.machineThreads().getLock());
-        LockHolder codeBlockSetLocker(m_vm.heap.codeBlockSet().getLock());
-        LockHolder executableAllocatorLocker(ExecutableAllocator::singleton().getLock());
+        auto codeBlockSetLocker = holdLock(m_vm.heap.codeBlockSet().getLock());
+        auto executableAllocatorLocker = holdLock(ExecutableAllocator::singleton().getLock());
+#if ENABLE(WEBASSEMBLY)
+        auto wasmCalleesLocker = holdLock(Wasm::CalleeRegistry::singleton().getLock());
+#else
+        LockHolder wasmCalleesLocker(NoLockingNecessary);
+#endif
 
         auto didSuspend = m_jscExecutionThread->suspend();
         if (didSuspend) {
             // While the JSC thread is suspended, we can't do things like malloc because the JSC thread
             // may be holding the malloc lock.
@@ -386,15 +406,15 @@
 
             size_t walkSize;
             bool wasValidWalk;
             bool didRunOutOfVectorSpace;
             if (Options::sampleCCode()) {
-                CFrameWalker walker(m_vm, machineFrame, callFrame, codeBlockSetLocker, machineThreadsLocker);
+                CFrameWalker walker(m_vm, machineFrame, callFrame, codeBlockSetLocker, machineThreadsLocker, wasmCalleesLocker);
                 walkSize = walker.walk(m_currentFrames, didRunOutOfVectorSpace);
                 wasValidWalk = walker.wasValidWalk();
             } else {
-                FrameWalker walker(m_vm, callFrame, codeBlockSetLocker, machineThreadsLocker);
+                FrameWalker walker(m_vm, callFrame, codeBlockSetLocker, machineThreadsLocker, wasmCalleesLocker);
                 walkSize = walker.walk(m_currentFrames, didRunOutOfVectorSpace);
                 wasValidWalk = walker.wasValidWalk();
             }
 
             m_jscExecutionThread->resume();
@@ -432,11 +452,11 @@
     RELEASE_ASSERT(!codeBlock->hasCodeOrigins());
 #endif
 
 #if USE(JSVALUE64)
     unsigned bytecodeIndex = llintPC;
-    if (bytecodeIndex < codeBlock->instructionCount()) {
+    if (bytecodeIndex < codeBlock->instructionsSize()) {
         isValid = true;
         return bytecodeIndex;
     }
     isValid = false;
     return 0;
@@ -463,11 +483,11 @@
         m_stackTraces.append(StackTrace());
         StackTrace& stackTrace = m_stackTraces.last();
         stackTrace.timestamp = unprocessedStackTrace.timestamp;
 
         auto populateCodeLocation = [] (CodeBlock* codeBlock, unsigned bytecodeIndex, StackFrame::CodeLocation& location) {
-            if (bytecodeIndex < codeBlock->instructionCount()) {
+            if (bytecodeIndex < codeBlock->instructionsSize()) {
                 int divot;
                 int startOffset;
                 int endOffset;
                 codeBlock->expressionRangeForBytecodeOffset(bytecodeIndex, divot, startOffset, endOffset,
                     location.lineNumber, location.columnNumber);
@@ -487,18 +507,23 @@
 
         auto appendEmptyFrame = [&] {
             stackTrace.frames.append(StackFrame());
         };
 
-        auto storeCalleeIntoLastFrame = [&] (CalleeBits calleeBits) {
+        auto storeCalleeIntoLastFrame = [&] (UnprocessedStackFrame& unprocessedStackFrame) {
             // Set the callee if it's a valid GC object.
+            CalleeBits calleeBits = unprocessedStackFrame.unverifiedCallee;
             StackFrame& stackFrame = stackTrace.frames.last();
             bool alreadyHasExecutable = !!stackFrame.executable;
+#if ENABLE(WEBASSEMBLY)
             if (calleeBits.isWasm()) {
-                stackFrame.frameType = FrameType::Unknown;
+                stackFrame.frameType = FrameType::Wasm;
+                stackFrame.wasmIndexOrName = unprocessedStackFrame.wasmIndexOrName;
+                stackFrame.wasmCompilationMode = unprocessedStackFrame.wasmCompilationMode;
                 return;
             }
+#endif
 
             JSValue callee = calleeBits.asCell();
             if (!HeapUtil::isValueGCObject(m_vm.heap, filter, callee)) {
                 if (!alreadyHasExecutable)
                     stackFrame.frameType = FrameType::Unknown;
@@ -522,11 +547,11 @@
                 stackFrame.callee = callee;
                 m_liveCellPointers.add(callee);
             };
 
             if (calleeCell->type() != JSFunctionType) {
-                if (JSObject* object = jsDynamicCast<JSObject*>(*calleeCell->vm(), calleeCell))
+                if (JSObject* object = jsDynamicCast<JSObject*>(calleeCell->vm(), calleeCell))
                     addCallee(object);
 
                 if (!alreadyHasExecutable)
                     setFallbackFrameType();
 
@@ -554,16 +579,17 @@
             size_t startIndex = stackTrace.frames.size(); // We want to change stack traces that we're about to append.
 
             CodeOrigin machineOrigin;
             origin.walkUpInlineStack([&] (const CodeOrigin& codeOrigin) {
                 machineOrigin = codeOrigin;
-                appendCodeBlock(codeOrigin.inlineCallFrame ? codeOrigin.inlineCallFrame->baselineCodeBlock.get() : machineCodeBlock, codeOrigin.bytecodeIndex);
+                auto* inlineCallFrame = codeOrigin.inlineCallFrame();
+                appendCodeBlock(inlineCallFrame ? inlineCallFrame->baselineCodeBlock.get() : machineCodeBlock, codeOrigin.bytecodeIndex());
             });
 
             if (Options::collectSamplingProfilerDataForJSCShell()) {
                 RELEASE_ASSERT(machineOrigin.isSet());
-                RELEASE_ASSERT(!machineOrigin.inlineCallFrame);
+                RELEASE_ASSERT(!machineOrigin.inlineCallFrame());
 
                 StackFrame::CodeLocation machineLocation = stackTrace.frames.last().semanticLocation;
 
                 // We want to tell each inlined frame about the machine frame
                 // they were inlined into. Currently, we only use this for dumping
@@ -587,11 +613,11 @@
                 // it's super unlikely. One reason that this can be false is when we throw from a DFG frame,
                 // and we end up having to unwind past an EntryFrame, we will end up executing
                 // inside the LLInt's handleUncaughtException. So we just protect against this
                 // by ignoring it.
                 unsigned bytecodeIndex = 0;
-                if (topCodeBlock->jitType() == JITCode::InterpreterThunk || topCodeBlock->jitType() == JITCode::BaselineJIT) {
+                if (topCodeBlock->jitType() == JITType::InterpreterThunk || topCodeBlock->jitType() == JITType::BaselineJIT) {
                     bool isValidPC;
                     unsigned bits;
 #if USE(JSVALUE64)
                     bits = static_cast<unsigned>(bitwise_cast<uintptr_t>(unprocessedStackTrace.llintPC));
 #else
@@ -600,18 +626,18 @@
                     bytecodeIndex = tryGetBytecodeIndex(bits, topCodeBlock, isValidPC);
 
                     UNUSED_PARAM(isValidPC); // FIXME: do something with this info for the web inspector: https://bugs.webkit.org/show_bug.cgi?id=153455
 
                     appendCodeBlock(topCodeBlock, bytecodeIndex);
-                    storeCalleeIntoLastFrame(unprocessedStackTrace.frames[0].unverifiedCallee);
+                    storeCalleeIntoLastFrame(unprocessedStackTrace.frames[0]);
                     startIndex = 1;
                 }
             } else {
 #if ENABLE(JIT)
                 if (Optional<CodeOrigin> codeOrigin = topCodeBlock->findPC(unprocessedStackTrace.topPC)) {
                     appendCodeOrigin(topCodeBlock, *codeOrigin);
-                    storeCalleeIntoLastFrame(unprocessedStackTrace.frames[0].unverifiedCallee);
+                    storeCalleeIntoLastFrame(unprocessedStackTrace.frames[0]);
                     startIndex = 1;
                 }
 #endif
                 UNUSED_PARAM(appendCodeOrigin);
             }
@@ -646,11 +672,11 @@
                 appendEmptyFrame();
 
             // Note that this is okay to do if we walked the inline stack because
             // the machine frame will be at the top of the processed stack trace.
             if (!unprocessedStackFrame.cCodePC)
-                storeCalleeIntoLastFrame(unprocessedStackFrame.unverifiedCallee);
+                storeCalleeIntoLastFrame(unprocessedStackFrame);
         }
     }
 
     m_unprocessedStackTraces.clear();
 }
@@ -758,34 +784,47 @@
         String name = nameFromCallee(vm);
         if (!name.isEmpty())
             return name;
     }
 
-    if (frameType == FrameType::Unknown || frameType == FrameType::C) {
+    switch (frameType) {
+    case FrameType::Unknown:
+    case FrameType::C:
 #if HAVE(DLADDR)
         if (frameType == FrameType::C) {
             auto demangled = WTF::StackTrace::demangle(const_cast<void*>(cCodePC));
             if (demangled)
                 return String(demangled->demangledName() ? demangled->demangledName() : demangled->mangledName());
             WTF::dataLog("couldn't get a name");
         }
 #endif
         return "(unknown)"_s;
-    }
-    if (frameType == FrameType::Host)
+
+    case FrameType::Host:
         return "(host)"_s;
 
-    if (executable->isHostFunction())
-        return static_cast<NativeExecutable*>(executable)->name();
+    case FrameType::Wasm:
+#if ENABLE(WEBASSEMBLY)
+        if (wasmIndexOrName)
+            return makeString(wasmIndexOrName.value());
+#endif
+        return "(wasm)"_s;
 
-    if (executable->isFunctionExecutable())
-        return static_cast<FunctionExecutable*>(executable)->inferredName().string();
-    if (executable->isProgramExecutable() || executable->isEvalExecutable())
-        return "(program)"_s;
-    if (executable->isModuleProgramExecutable())
-        return "(module)"_s;
+    case FrameType::Executable:
+        if (executable->isHostFunction())
+            return static_cast<NativeExecutable*>(executable)->name();
 
+        if (executable->isFunctionExecutable())
+            return static_cast<FunctionExecutable*>(executable)->ecmaName().string();
+        if (executable->isProgramExecutable() || executable->isEvalExecutable())
+            return "(program)"_s;
+        if (executable->isModuleProgramExecutable())
+            return "(module)"_s;
+
+        RELEASE_ASSERT_NOT_REACHED();
+        return String();
+    }
     RELEASE_ASSERT_NOT_REACHED();
     return String();
 }
 
 String SamplingProfiler::StackFrame::displayNameForJSONTests(VM& vm)
@@ -794,79 +833,125 @@
         String name = nameFromCallee(vm);
         if (!name.isEmpty())
             return name;
     }
 
-    if (frameType == FrameType::Unknown || frameType == FrameType::C)
+    switch (frameType) {
+    case FrameType::Unknown:
+    case FrameType::C:
         return "(unknown)"_s;
-    if (frameType == FrameType::Host)
-        return "(host)"_s;
 
-    if (executable->isHostFunction())
-        return static_cast<NativeExecutable*>(executable)->name();
+    case FrameType::Host:
+        return "(host)"_s;
 
-    if (executable->isFunctionExecutable()) {
-        String result = static_cast<FunctionExecutable*>(executable)->inferredName().string();
-        if (result.isEmpty())
-            return "(anonymous function)"_s;
-        return result;
+    case FrameType::Wasm: {
+#if ENABLE(WEBASSEMBLY)
+        if (wasmIndexOrName)
+            return makeString(wasmIndexOrName.value());
+#endif
+        return "(wasm)"_s;
     }
-    if (executable->isEvalExecutable())
-        return "(eval)"_s;
-    if (executable->isProgramExecutable())
-        return "(program)"_s;
-    if (executable->isModuleProgramExecutable())
-        return "(module)"_s;
 
+    case FrameType::Executable:
+        if (executable->isHostFunction())
+            return static_cast<NativeExecutable*>(executable)->name();
+
+        if (executable->isFunctionExecutable()) {
+            String result = static_cast<FunctionExecutable*>(executable)->ecmaName().string();
+            if (result.isEmpty())
+                return "(anonymous function)"_s;
+            return result;
+        }
+        if (executable->isEvalExecutable())
+            return "(eval)"_s;
+        if (executable->isProgramExecutable())
+            return "(program)"_s;
+        if (executable->isModuleProgramExecutable())
+            return "(module)"_s;
+
+        RELEASE_ASSERT_NOT_REACHED();
+        return String();
+    }
     RELEASE_ASSERT_NOT_REACHED();
     return String();
 }
 
 int SamplingProfiler::StackFrame::functionStartLine()
 {
-    if (frameType == FrameType::Unknown || frameType == FrameType::Host || frameType == FrameType::C)
+    switch (frameType) {
+    case FrameType::Unknown:
+    case FrameType::Host:
+    case FrameType::C:
+    case FrameType::Wasm:
         return -1;
 
-    if (executable->isHostFunction())
-        return -1;
-    return static_cast<ScriptExecutable*>(executable)->firstLine();
+    case FrameType::Executable:
+        if (executable->isHostFunction())
+            return -1;
+        return static_cast<ScriptExecutable*>(executable)->firstLine();
+    }
+    RELEASE_ASSERT_NOT_REACHED();
+    return -1;
 }
 
 unsigned SamplingProfiler::StackFrame::functionStartColumn()
 {
-    if (frameType == FrameType::Unknown || frameType == FrameType::Host || frameType == FrameType::C)
+    switch (frameType) {
+    case FrameType::Unknown:
+    case FrameType::Host:
+    case FrameType::C:
+    case FrameType::Wasm:
         return std::numeric_limits<unsigned>::max();
 
-    if (executable->isHostFunction())
-        return std::numeric_limits<unsigned>::max();
+    case FrameType::Executable:
+        if (executable->isHostFunction())
+            return std::numeric_limits<unsigned>::max();
 
-    return static_cast<ScriptExecutable*>(executable)->startColumn();
+        return static_cast<ScriptExecutable*>(executable)->startColumn();
+    }
+    RELEASE_ASSERT_NOT_REACHED();
+    return std::numeric_limits<unsigned>::max();
 }
 
 intptr_t SamplingProfiler::StackFrame::sourceID()
 {
-    if (frameType == FrameType::Unknown || frameType == FrameType::Host || frameType == FrameType::C)
+    switch (frameType) {
+    case FrameType::Unknown:
+    case FrameType::Host:
+    case FrameType::C:
+    case FrameType::Wasm:
         return -1;
 
-    if (executable->isHostFunction())
-        return -1;
+    case FrameType::Executable:
+        if (executable->isHostFunction())
+            return -1;
 
-    return static_cast<ScriptExecutable*>(executable)->sourceID();
+        return static_cast<ScriptExecutable*>(executable)->sourceID();
+    }
+    RELEASE_ASSERT_NOT_REACHED();
+    return -1;
 }
 
 String SamplingProfiler::StackFrame::url()
 {
-    if (frameType == FrameType::Unknown || frameType == FrameType::Host || frameType == FrameType::C)
-        return emptyString();
-
-    if (executable->isHostFunction())
+    switch (frameType) {
+    case FrameType::Unknown:
+    case FrameType::Host:
+    case FrameType::C:
+    case FrameType::Wasm:
         return emptyString();
-
-    String url = static_cast<ScriptExecutable*>(executable)->sourceURL();
-    if (url.isEmpty())
-        return static_cast<ScriptExecutable*>(executable)->source().provider()->sourceURLDirective(); // Fall back to sourceURL directive.
-    return url;
+    case FrameType::Executable:
+        if (executable->isHostFunction())
+            return emptyString();
+
+        String url = static_cast<ScriptExecutable*>(executable)->sourceURL();
+        if (url.isEmpty())
+            return static_cast<ScriptExecutable*>(executable)->source().provider()->sourceURLDirective(); // Fall back to sourceURL directive.
+        return url;
+    }
+    RELEASE_ASSERT_NOT_REACHED();
+    return String();
 }
 
 Vector<SamplingProfiler::StackTrace> SamplingProfiler::releaseStackTraces(const AbstractLocker& locker)
 {
     ASSERT(m_lock.isLocked());
@@ -1022,13 +1107,14 @@
     HashMap<String, size_t> bytecodeCounts;
     for (StackTrace& stackTrace : m_stackTraces) {
         if (!stackTrace.frames.size())
             continue;
 
-        auto descriptionForLocation = [&] (StackFrame::CodeLocation location) -> String {
+        auto descriptionForLocation = [&] (StackFrame::CodeLocation location, Optional<Wasm::CompilationMode> wasmCompilationMode) -> String {
             String bytecodeIndex;
             String codeBlockHash;
+            String jitType;
             if (location.hasBytecodeIndex())
                 bytecodeIndex = String::number(location.bytecodeIndex);
             else
                 bytecodeIndex = "<nil>";
 
@@ -1037,18 +1123,23 @@
                 location.codeBlockHash.dump(stream);
                 codeBlockHash = stream.toString();
             } else
                 codeBlockHash = "<nil>";
 
-            return makeString("#", codeBlockHash, ":", JITCode::typeName(location.jitType), ":", bytecodeIndex);
+            if (wasmCompilationMode)
+                jitType = Wasm::makeString(wasmCompilationMode.value());
+            else
+                jitType = JITCode::typeName(location.jitType);
+
+            return makeString("#", codeBlockHash, ":", jitType, ":", bytecodeIndex);
         };
 
         StackFrame& frame = stackTrace.frames.first();
-        String frameDescription = makeString(frame.displayName(m_vm), descriptionForLocation(frame.semanticLocation));
+        String frameDescription = makeString(frame.displayName(m_vm), descriptionForLocation(frame.semanticLocation, frame.wasmCompilationMode));
         if (Optional<std::pair<StackFrame::CodeLocation, CodeBlock*>> machineLocation = frame.machineLocation) {
             frameDescription = makeString(frameDescription, " <-- ",
-                machineLocation->second->inferredName().data(), descriptionForLocation(machineLocation->first));
+                machineLocation->second->inferredName().data(), descriptionForLocation(machineLocation->first, WTF::nullopt));
         }
         bytecodeCounts.add(frameDescription, 0).iterator->value++;
     }
 
     auto takeMax = [&] () -> std::pair<String, size_t> {
@@ -1098,10 +1189,13 @@
 {
     switch (frameType) {
     case SamplingProfiler::FrameType::Executable:
         out.print("Executable");
         break;
+    case SamplingProfiler::FrameType::Wasm:
+        out.print("Wasm");
+        break;
     case SamplingProfiler::FrameType::Host:
         out.print("Host");
         break;
     case SamplingProfiler::FrameType::C:
     case SamplingProfiler::FrameType::Unknown:
