diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/DeviceMotionEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/DeviceMotionEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/DeviceMotionEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/DeviceMotionEvent.h
@@ -23,17 +23,18 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include "DeviceOrientationOrMotionEvent.h"
 #include "Event.h"
 
 namespace WebCore {
 
 class DeviceMotionData;
 
-class DeviceMotionEvent final : public Event {
+class DeviceMotionEvent final : public Event, public DeviceOrientationOrMotionEvent {
 public:
     virtual ~DeviceMotionEvent();
 
     // FIXME: Merge this with DeviceMotionData::Acceleration
     struct Acceleration {
@@ -47,11 +48,11 @@
         Optional<double> alpha;
         Optional<double> beta;
         Optional<double> gamma;
     };
 
-    static Ref<DeviceMotionEvent> create(const AtomicString& eventType, DeviceMotionData* deviceMotionData)
+    static Ref<DeviceMotionEvent> create(const AtomString& eventType, DeviceMotionData* deviceMotionData)
     {
         return adoptRef(*new DeviceMotionEvent(eventType, deviceMotionData));
     }
 
     static Ref<DeviceMotionEvent> createForBindings()
@@ -62,15 +63,15 @@
     Optional<Acceleration> acceleration() const;
     Optional<Acceleration> accelerationIncludingGravity() const;
     Optional<RotationRate> rotationRate() const;
     Optional<double> interval() const;
 
-    void initDeviceMotionEvent(const AtomicString& type, bool bubbles, bool cancelable, Optional<Acceleration>&&, Optional<Acceleration>&&, Optional<RotationRate>&&, Optional<double>);
+    void initDeviceMotionEvent(const AtomString& type, bool bubbles, bool cancelable, Optional<Acceleration>&&, Optional<Acceleration>&&, Optional<RotationRate>&&, Optional<double>);
 
 private:
     DeviceMotionEvent();
-    DeviceMotionEvent(const AtomicString& eventType, DeviceMotionData*);
+    DeviceMotionEvent(const AtomString& eventType, DeviceMotionData*);
 
     EventInterface eventInterface() const override;
 
     RefPtr<DeviceMotionData> m_deviceMotionData;
 };
