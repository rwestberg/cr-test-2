diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLCollection.h b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLCollection.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLCollection.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLCollection.h
@@ -32,48 +32,49 @@
 class Element;
 
 class CollectionNamedElementCache {
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    const Vector<Element*>* findElementsWithId(const AtomicString& id) const;
-    const Vector<Element*>* findElementsWithName(const AtomicString& name) const;
-    const Vector<AtomicString>& propertyNames() const { return m_propertyNames; }
+    const Vector<Element*>* findElementsWithId(const AtomString& id) const;
+    const Vector<Element*>* findElementsWithName(const AtomString& name) const;
+    const Vector<AtomString>& propertyNames() const { return m_propertyNames; }
 
-    void appendToIdCache(const AtomicString& id, Element&);
-    void appendToNameCache(const AtomicString& name, Element&);
+    void appendToIdCache(const AtomString& id, Element&);
+    void appendToNameCache(const AtomString& name, Element&);
     void didPopulate();
 
     size_t memoryCost() const;
 
 private:
-    typedef HashMap<AtomicStringImpl*, Vector<Element*>> StringToElementsMap;
+    typedef HashMap<AtomStringImpl*, Vector<Element*>> StringToElementsMap;
 
-    const Vector<Element*>* find(const StringToElementsMap&, const AtomicString& key) const;
-    void append(StringToElementsMap&, const AtomicString& key, Element&);
+    const Vector<Element*>* find(const StringToElementsMap&, const AtomString& key) const;
+    void append(StringToElementsMap&, const AtomString& key, Element&);
 
     StringToElementsMap m_idMap;
     StringToElementsMap m_nameMap;
-    Vector<AtomicString> m_propertyNames;
+    Vector<AtomString> m_propertyNames;
 
 #if !ASSERT_DISABLED
     bool m_didPopulate { false };
 #endif
 };
 
 // HTMLCollection subclasses NodeList to maintain legacy ObjC API compatibility.
 class HTMLCollection : public NodeList {
+    WTF_MAKE_ISO_ALLOCATED(HTMLCollection);
 public:
     virtual ~HTMLCollection();
 
     // DOM API
     Element* item(unsigned index) const override = 0; // Tighten return type from NodeList::item().
-    virtual Element* namedItem(const AtomicString& name) const = 0;
-    const Vector<AtomicString>& supportedPropertyNames();
+    virtual Element* namedItem(const AtomString& name) const = 0;
+    const Vector<AtomString>& supportedPropertyNames();
     bool isSupportedPropertyName(const String& name);
 
     // Non-DOM API
-    Vector<Ref<Element>> namedItems(const AtomicString& name) const;
+    Vector<Ref<Element>> namedItems(const AtomString& name) const;
     size_t memoryCost() const override;
 
     bool isRootedAtDocument() const;
     NodeListInvalidationType invalidationType() const;
     CollectionType type() const;
@@ -91,11 +92,11 @@
 
 protected:
     HTMLCollection(ContainerNode& base, CollectionType);
 
     virtual void updateNamedElementCache() const;
-    WEBCORE_EXPORT Element* namedItemSlow(const AtomicString& name) const;
+    WEBCORE_EXPORT Element* namedItemSlow(const AtomString& name) const;
 
     void setNamedItemCache(std::unique_ptr<CollectionNamedElementCache>) const;
     const CollectionNamedElementCache& namedItemCaches() const;
 
     Document& document() const;
@@ -122,35 +123,35 @@
         return ownerNode().document();
 
     return ownerNode();
 }
 
-inline const Vector<Element*>* CollectionNamedElementCache::findElementsWithId(const AtomicString& id) const
+inline const Vector<Element*>* CollectionNamedElementCache::findElementsWithId(const AtomString& id) const
 {
     return find(m_idMap, id);
 }
 
-inline const Vector<Element*>* CollectionNamedElementCache::findElementsWithName(const AtomicString& name) const
+inline const Vector<Element*>* CollectionNamedElementCache::findElementsWithName(const AtomString& name) const
 {
     return find(m_nameMap, name);
 }
 
-inline void CollectionNamedElementCache::appendToIdCache(const AtomicString& id, Element& element)
+inline void CollectionNamedElementCache::appendToIdCache(const AtomString& id, Element& element)
 {
     append(m_idMap, id, element);
 }
 
-inline void CollectionNamedElementCache::appendToNameCache(const AtomicString& name, Element& element)
+inline void CollectionNamedElementCache::appendToNameCache(const AtomString& name, Element& element)
 {
     append(m_nameMap, name, element);
 }
 
 inline size_t CollectionNamedElementCache::memoryCost() const
 {
     // memoryCost() may be invoked concurrently from a GC thread, and we need to be careful about what data we access here and how.
     // It is safe to access m_idMap.size(), m_nameMap.size(), and m_propertyNames.size() because they don't chase pointers.
-    return (m_idMap.size() + m_nameMap.size()) * sizeof(Element*) + m_propertyNames.size() * sizeof(AtomicString);
+    return (m_idMap.size() + m_nameMap.size()) * sizeof(Element*) + m_propertyNames.size() * sizeof(AtomString);
 }
 
 inline void CollectionNamedElementCache::didPopulate()
 {
 #if !ASSERT_DISABLED
@@ -158,18 +159,18 @@
 #endif
     if (size_t cost = memoryCost())
         reportExtraMemoryAllocatedForCollectionIndexCache(cost);
 }
 
-inline const Vector<Element*>* CollectionNamedElementCache::find(const StringToElementsMap& map, const AtomicString& key) const
+inline const Vector<Element*>* CollectionNamedElementCache::find(const StringToElementsMap& map, const AtomString& key) const
 {
     ASSERT(m_didPopulate);
     auto it = map.find(key.impl());
     return it != map.end() ? &it->value : nullptr;
 }
 
-inline void CollectionNamedElementCache::append(StringToElementsMap& map, const AtomicString& key, Element& element)
+inline void CollectionNamedElementCache::append(StringToElementsMap& map, const AtomString& key, Element& element)
 {
     if (!m_idMap.contains(key.impl()) && !m_nameMap.contains(key.impl()))
         m_propertyNames.append(key);
     map.add(key.impl(), Vector<Element*>()).iterator->value.append(&element);
 }
