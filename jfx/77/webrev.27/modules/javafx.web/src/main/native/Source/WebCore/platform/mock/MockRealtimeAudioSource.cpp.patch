diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MockRealtimeAudioSource.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MockRealtimeAudioSource.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MockRealtimeAudioSource.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MockRealtimeAudioSource.cpp
@@ -60,10 +60,11 @@
 }
 #endif
 
 MockRealtimeAudioSource::MockRealtimeAudioSource(String&& deviceID, String&& name, String&& hashSalt)
     : RealtimeMediaSource(RealtimeMediaSource::Type::Audio, WTFMove(name), WTFMove(deviceID), WTFMove(hashSalt))
+    , m_workQueue(WorkQueue::create("MockRealtimeAudioSource Render Queue"))
     , m_timer(RunLoop::current(), this, &MockRealtimeAudioSource::tick)
 {
     auto device = MockRealtimeMediaSourceCenter::mockDeviceWithPersistentID(persistentID());
     ASSERT(device);
     m_device = *device;
@@ -95,10 +96,19 @@
         m_currentSettings = WTFMove(settings);
     }
     return m_currentSettings.value();
 }
 
+void MockRealtimeAudioSource::setChannelCount(unsigned channelCount)
+{
+    if (channelCount > 2)
+        return;
+
+    m_channelCount = channelCount;
+    settingsDidChange(RealtimeMediaSourceSettings::Flag::SampleRate);
+}
+
 const RealtimeMediaSourceCapabilities& MockRealtimeAudioSource::capabilities()
 {
     if (!m_capabilities) {
         RealtimeMediaSourceCapabilities capabilities(settings().supportedConstraints());
 
@@ -149,11 +159,14 @@
         m_delayUntil = MonotonicTime();
     }
 
     Seconds delta = now - m_lastRenderTime;
     m_lastRenderTime = now;
-    render(delta);
+
+    m_workQueue->dispatch([this, delta, protectedThis = makeRef(*this)] {
+        render(delta);
+    });
 }
 
 void MockRealtimeAudioSource::delaySamples(Seconds delta)
 {
     m_delayUntil = MonotonicTime::now() + delta;
