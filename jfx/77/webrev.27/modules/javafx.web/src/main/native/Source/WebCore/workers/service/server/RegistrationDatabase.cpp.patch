diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/RegistrationDatabase.cpp b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/RegistrationDatabase.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/RegistrationDatabase.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/RegistrationDatabase.cpp
@@ -116,62 +116,64 @@
         m_workQueue->dispatch([database = WTFMove(m_database)] { });
 }
 
 void RegistrationDatabase::postTaskToWorkQueue(Function<void()>&& task)
 {
+    ASSERT(isMainThread());
+
     m_workQueue->dispatch([protectedThis = makeRef(*this), task = WTFMove(task)]() mutable {
         task();
     });
 }
 
 void RegistrationDatabase::openSQLiteDatabase(const String& fullFilename)
 {
     ASSERT(!isMainThread());
     ASSERT(!m_database);
 
-    cleanOldDatabases(m_databaseDirectory);
+    auto databaseDirectory = this->databaseDirectoryIsolatedCopy();
+    cleanOldDatabases(databaseDirectory);
 
     LOG(ServiceWorker, "ServiceWorker RegistrationDatabase opening file %s", fullFilename.utf8().data());
 
-    String errorMessage;
-    auto scopeExit = makeScopeExit([this, protectedThis = makeRef(*this), errorMessage = &errorMessage] {
-        ASSERT_UNUSED(errorMessage, !errorMessage->isNull());
-
-#if RELEASE_LOG_DISABLED
-        LOG_ERROR("Failed to open Service Worker registration database: %s", errorMessage->utf8().data());
-#else
-        RELEASE_LOG_ERROR(ServiceWorker, "Failed to open Service Worker registration database: %{public}s", errorMessage->utf8().data());
-#endif
+    SQLiteFileSystem::ensureDatabaseDirectoryExists(databaseDirectory);
 
+    m_database = makeUnique<SQLiteDatabase>();
+    if (!m_database->open(fullFilename)) {
+        RELEASE_LOG_ERROR(ServiceWorker, "Failed to open Service Worker registration database");
         m_database = nullptr;
-        callOnMainThread([protectedThis = protectedThis.copyRef()] {
-            protectedThis->databaseFailedToOpen();
+        callOnMainThread([this, protectedThis = makeRef(*this)] {
+            databaseFailedToOpen();
         });
-    });
-
-    SQLiteFileSystem::ensureDatabaseDirectoryExists(m_databaseDirectory);
-
-    m_database = std::make_unique<SQLiteDatabase>();
-    if (!m_database->open(fullFilename)) {
-        errorMessage = "Failed to open registration database";
         return;
     }
 
     // Disable threading checks. We always access the database from our serial WorkQueue. Such accesses
     // are safe since work queue tasks are guaranteed to run one after another. However, tasks will not
     // necessary run on the same thread every time (as per GCD documentation).
     m_database->disableThreadingChecks();
 
-    errorMessage = ensureValidRecordsTable();
-    if (!errorMessage.isNull())
+    auto doRecoveryAttempt = [&] {
+        // Delete the database and re-create it.
+        m_database = nullptr;
+        SQLiteFileSystem::deleteDatabaseFile(fullFilename);
+        openSQLiteDatabase(fullFilename);
+    };
+
+    String errorMessage = ensureValidRecordsTable();
+    if (!errorMessage.isNull()) {
+        RELEASE_LOG_ERROR(ServiceWorker, "ensureValidRecordsTable failed, reason: %{public}s", errorMessage.utf8().data());
+        doRecoveryAttempt();
         return;
+    }
 
     errorMessage = importRecords();
-    if (!errorMessage.isNull())
+    if (!errorMessage.isNull()) {
+        RELEASE_LOG_ERROR(ServiceWorker, "importRecords failed, reason: %{public}s", errorMessage.utf8().data());
+        doRecoveryAttempt();
         return;
-
-    scopeExit.release();
+    }
 }
 
 void RegistrationDatabase::importRecordsIfNecessary()
 {
     ASSERT(!isMainThread());
@@ -215,14 +217,11 @@
     ASSERT(!currentSchema.isEmpty());
 
     if (currentSchema == recordsTableSchema() || currentSchema == recordsTableSchemaAlternate())
         return { };
 
-    // This database has a Records table but it is not a schema we expect.
-    // Trying to recover by deleting the data contained within is dangerous so
-    // we should consider this an unrecoverable error.
-    RELEASE_ASSERT_NOT_REACHED();
+    return makeString("Unexpected schema: ", currentSchema);
 }
 
 static String updateViaCacheToString(ServiceWorkerUpdateViaCache update)
 {
     switch (update) {
@@ -269,35 +268,52 @@
         return WorkerType::Module;
 
     return WTF::nullopt;
 }
 
-void RegistrationDatabase::pushChanges(Vector<ServiceWorkerContextData>&& datas, CompletionHandler<void()>&& completionHandler)
+void RegistrationDatabase::pushChanges(const HashMap<ServiceWorkerRegistrationKey, Optional<ServiceWorkerContextData>>& changedRegistrations, CompletionHandler<void()>&& completionHandler)
 {
-    postTaskToWorkQueue([this, datas = crossThreadCopy(datas), completionHandler = WTFMove(completionHandler)]() mutable {
-        doPushChanges(WTFMove(datas));
+    Vector<ServiceWorkerContextData> updatedRegistrations;
+    Vector<ServiceWorkerRegistrationKey> removedRegistrations;
+    for (auto& keyValue : changedRegistrations) {
+        if (keyValue.value)
+            updatedRegistrations.append(keyValue.value->isolatedCopy());
+        else
+            removedRegistrations.append(keyValue.key.isolatedCopy());
+    }
+
+    postTaskToWorkQueue([this, updatedRegistrations = WTFMove(updatedRegistrations), removedRegistrations = WTFMove(removedRegistrations), completionHandler = WTFMove(completionHandler)]() mutable {
+        doPushChanges(updatedRegistrations, removedRegistrations);
 
         if (!completionHandler)
             return;
 
         callOnMainThread(WTFMove(completionHandler));
     });
 }
 
+void RegistrationDatabase::close(CompletionHandler<void()>&& completionHandler)
+{
+    postTaskToWorkQueue([this, completionHandler = WTFMove(completionHandler)]() mutable {
+        m_database = nullptr;
+        callOnMainThread(WTFMove(completionHandler));
+    });
+}
+
 void RegistrationDatabase::clearAll(CompletionHandler<void()>&& completionHandler)
 {
     postTaskToWorkQueue([this, completionHandler = WTFMove(completionHandler)]() mutable {
         m_database = nullptr;
 
         SQLiteFileSystem::deleteDatabaseFile(m_databaseFilePath);
-        SQLiteFileSystem::deleteEmptyDatabaseDirectory(m_databaseDirectory);
+        SQLiteFileSystem::deleteEmptyDatabaseDirectory(databaseDirectoryIsolatedCopy());
 
         callOnMainThread(WTFMove(completionHandler));
     });
 }
 
-void RegistrationDatabase::doPushChanges(Vector<ServiceWorkerContextData>&& datas)
+void RegistrationDatabase::doPushChanges(const Vector<ServiceWorkerContextData>& updatedRegistrations, const Vector<ServiceWorkerRegistrationKey>& removedRegistrations)
 {
     if (!m_database) {
         openSQLiteDatabase(m_databaseFilePath);
         if (!m_database)
             return;
@@ -310,23 +326,21 @@
     if (sql.prepare() != SQLITE_OK) {
         RELEASE_LOG_ERROR(ServiceWorker, "Failed to prepare statement to store registration data into records table (%i) - %s", m_database->lastError(), m_database->lastErrorMsg());
         return;
     }
 
-    for (auto& data : datas) {
-        if (data.registration.identifier == ServiceWorkerRegistrationIdentifier()) {
-            SQLiteStatement sql(*m_database, "DELETE FROM Records WHERE key = ?");
-            if (sql.prepare() != SQLITE_OK
-                || sql.bindText(1, data.registration.key.toDatabaseKey()) != SQLITE_OK
-                || sql.step() != SQLITE_DONE) {
-                RELEASE_LOG_ERROR(ServiceWorker, "Failed to remove registration data from records table (%i) - %s", m_database->lastError(), m_database->lastErrorMsg());
-                return;
-            }
-
-            continue;
+    for (auto& registration : removedRegistrations) {
+        SQLiteStatement sql(*m_database, "DELETE FROM Records WHERE key = ?");
+        if (sql.prepare() != SQLITE_OK
+            || sql.bindText(1, registration.toDatabaseKey()) != SQLITE_OK
+            || sql.step() != SQLITE_DONE) {
+            RELEASE_LOG_ERROR(ServiceWorker, "Failed to remove registration data from records table (%i) - %s", m_database->lastError(), m_database->lastErrorMsg());
+            return;
         }
+    }
 
+    for (auto& data : updatedRegistrations) {
         WTF::Persistence::Encoder cspEncoder;
         data.contentSecurityPolicy.encode(cspEncoder);
 
         WTF::Persistence::Encoder scriptResourceMapEncoder;
         scriptResourceMapEncoder.encode(data.scriptResourceMap);
@@ -349,11 +363,11 @@
         }
     }
 
     transaction.commit();
 
-    LOG(ServiceWorker, "Pushed %zu changes to ServiceWorker registration database", datas.size());
+    LOG(ServiceWorker, "Updated ServiceWorker registration database (%zu added/updated registrations and %zu removed registrations", updatedRegistrations.size(), removedRegistrations.size());
 }
 
 String RegistrationDatabase::importRecords()
 {
     ASSERT(!isMainThread());
