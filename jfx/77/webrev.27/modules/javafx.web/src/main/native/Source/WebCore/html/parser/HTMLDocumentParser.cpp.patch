diff a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLDocumentParser.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLDocumentParser.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLDocumentParser.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLDocumentParser.cpp
@@ -25,10 +25,11 @@
  */
 
 #include "config.h"
 #include "HTMLDocumentParser.h"
 
+#include "CustomHeaderFields.h"
 #include "CustomElementReactionQueue.h"
 #include "DocumentFragment.h"
 #include "DocumentLoader.h"
 #include "Frame.h"
 #include "HTMLDocument.h"
@@ -50,15 +51,15 @@
 
 HTMLDocumentParser::HTMLDocumentParser(HTMLDocument& document)
     : ScriptableDocumentParser(document)
     , m_options(document)
     , m_tokenizer(m_options)
-    , m_scriptRunner(std::make_unique<HTMLScriptRunner>(document, static_cast<HTMLScriptRunnerHost&>(*this)))
-    , m_treeBuilder(std::make_unique<HTMLTreeBuilder>(*this, document, parserContentPolicy(), m_options))
-    , m_parserScheduler(std::make_unique<HTMLParserScheduler>(*this))
+    , m_scriptRunner(makeUnique<HTMLScriptRunner>(document, static_cast<HTMLScriptRunnerHost&>(*this)))
+    , m_treeBuilder(makeUnique<HTMLTreeBuilder>(*this, document, parserContentPolicy(), m_options))
+    , m_parserScheduler(makeUnique<HTMLParserScheduler>(*this))
     , m_xssAuditorDelegate(document)
-    , m_preloader(std::make_unique<HTMLResourcePreloader>(document))
+    , m_preloader(makeUnique<HTMLResourcePreloader>(document))
 {
 }
 
 Ref<HTMLDocumentParser> HTMLDocumentParser::create(HTMLDocument& document)
 {
@@ -67,11 +68,11 @@
 
 inline HTMLDocumentParser::HTMLDocumentParser(DocumentFragment& fragment, Element& contextElement, ParserContentPolicy rawPolicy)
     : ScriptableDocumentParser(fragment.document(), rawPolicy)
     , m_options(fragment.document())
     , m_tokenizer(m_options)
-    , m_treeBuilder(std::make_unique<HTMLTreeBuilder>(*this, fragment, contextElement, parserContentPolicy(), m_options))
+    , m_treeBuilder(makeUnique<HTMLTreeBuilder>(*this, fragment, contextElement, parserContentPolicy(), m_options))
     , m_xssAuditorDelegate(fragment.document())
 {
     // https://html.spec.whatwg.org/multipage/syntax.html#parsing-html-fragments
     if (contextElement.isHTMLElement())
         m_tokenizer.updateStateFor(contextElement.tagQName().localName());
@@ -312,11 +313,11 @@
         m_parserScheduler->scheduleForResume();
 
     if (isWaitingForScripts()) {
         ASSERT(m_tokenizer.isInDataState());
         if (!m_preloadScanner) {
-            m_preloadScanner = std::make_unique<HTMLPreloadScanner>(m_options, document()->url(), document()->deviceScaleFactor());
+            m_preloadScanner = makeUnique<HTMLPreloadScanner>(m_options, document()->url(), document()->deviceScaleFactor());
             m_preloadScanner->appendToEnd(m_input.current());
         }
         m_preloadScanner->scan(*m_preloader, *document());
     }
     // The viewport definition is known here, so we can load link preloads with media attributes.
@@ -371,11 +372,11 @@
 
     if (isWaitingForScripts()) {
         // Check the document.write() output with a separate preload scanner as
         // the main scanner can't deal with insertions.
         if (!m_insertionPreloadScanner)
-            m_insertionPreloadScanner = std::make_unique<HTMLPreloadScanner>(m_options, document()->url(), document()->deviceScaleFactor());
+            m_insertionPreloadScanner = makeUnique<HTMLPreloadScanner>(m_options, document()->url(), document()->deviceScaleFactor());
         m_insertionPreloadScanner->appendToEnd(source);
         m_insertionPreloadScanner->scan(*m_preloader, *document());
     }
 
     endIfDelayed();
