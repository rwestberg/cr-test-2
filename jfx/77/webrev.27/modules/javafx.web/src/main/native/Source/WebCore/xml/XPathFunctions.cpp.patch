diff a/modules/javafx.web/src/main/native/Source/WebCore/xml/XPathFunctions.cpp b/modules/javafx.web/src/main/native/Source/WebCore/xml/XPathFunctions.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/xml/XPathFunctions.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/xml/XPathFunctions.cpp
@@ -43,11 +43,11 @@
 static inline bool isWhitespace(UChar c)
 {
     return c == ' ' || c == '\n' || c == '\r' || c == '\t';
 }
 
-#define DEFINE_FUNCTION_CREATOR(Suffix) static std::unique_ptr<Function> createFunction##Suffix() { return std::make_unique<Fun##Suffix>(); }
+#define DEFINE_FUNCTION_CREATOR(Suffix) static std::unique_ptr<Function> createFunction##Suffix() { return makeUnique<Fun##Suffix>(); }
 
 class Interval {
 public:
     static const int Inf = -1;
 
@@ -302,17 +302,17 @@
 Value FunPosition::evaluate() const
 {
     return Expression::evaluationContext().position;
 }
 
-static AtomicString atomicSubstring(StringBuilder& builder, unsigned start, unsigned length)
+static AtomString atomicSubstring(StringBuilder& builder, unsigned start, unsigned length)
 {
     ASSERT(start <= builder.length());
     ASSERT(length <= builder.length() - start);
     if (builder.is8Bit())
-        return AtomicString(builder.characters8() + start, length);
-    return AtomicString(builder.characters16() + start, length);
+        return AtomString(builder.characters8() + start, length);
+    return AtomString(builder.characters16() + start, length);
 }
 
 Value FunId::evaluate() const
 {
     Value a = argument(0).evaluate();
@@ -365,11 +365,11 @@
     return node->localName().string();
 }
 
 static inline String expandedName(Node* node)
 {
-    const AtomicString& prefix = node->prefix();
+    const AtomString& prefix = node->prefix();
     return prefix.isEmpty() ? expandedNameLocalPart(node) : prefix + ":" + expandedNameLocalPart(node);
 }
 
 Value FunLocalName::evaluate() const
 {
