diff a/modules/javafx.web/src/main/native/Source/WebKitLegacy/Storage/WebDatabaseProvider.cpp b/modules/javafx.web/src/main/native/Source/WebKitLegacy/Storage/WebDatabaseProvider.cpp
--- a/modules/javafx.web/src/main/native/Source/WebKitLegacy/Storage/WebDatabaseProvider.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebKitLegacy/Storage/WebDatabaseProvider.cpp
@@ -43,33 +43,17 @@
 }
 
 #if ENABLE(INDEXED_DATABASE)
 WebCore::IDBClient::IDBConnectionToServer& WebDatabaseProvider::idbConnectionToServerForSession(const PAL::SessionID& sessionID)
 {
-    auto result = m_idbServerMap.add(sessionID.sessionID(), nullptr);
-    if (result.isNewEntry) {
-        if (sessionID.isEphemeral())
-            result.iterator->value = WebCore::InProcessIDBServer::create();
-        else
-            result.iterator->value = WebCore::InProcessIDBServer::create(indexedDatabaseDirectoryPath());
-    }
-
-    result.iterator->value->idbServer().setPerOriginQuota(m_idbPerOriginQuota);
-
-    return result.iterator->value->connectionToServer();
+    return m_idbServerMap.ensure(sessionID, [&sessionID] {
+        return sessionID.isEphemeral() ? WebCore::InProcessIDBServer::create(sessionID) : WebCore::InProcessIDBServer::create(sessionID, indexedDatabaseDirectoryPath());
+    }).iterator->value->connectionToServer();
 }
 
 void WebDatabaseProvider::deleteAllDatabases()
 {
     for (auto& server : m_idbServerMap.values())
         server->idbServer().closeAndDeleteDatabasesModifiedSince(-WallTime::infinity(), [] { });
 }
 
-void WebDatabaseProvider::setIDBPerOriginQuota(uint64_t quota)
-{
-    m_idbPerOriginQuota = quota;
-
-    for (auto& server : m_idbServerMap.values())
-        server->idbServer().setPerOriginQuota(quota);
-}
-
 #endif
