diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/Optional.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/Optional.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/Optional.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/Optional.h
@@ -43,10 +43,11 @@
 # include <cassert>
 # include <string>
 # include <stdexcept>
 # include <wtf/Assertions.h>
 # include <wtf/Compiler.h>
+# include <wtf/FastMalloc.h>
 # include <wtf/StdLibExtras.h>
 
 # define TR2_OPTIONAL_REQUIRES(...) typename std::enable_if<__VA_ARGS__::value, bool>::type = false
 
 # if defined __GNUC__ // NOTE: GNUC is also defined for Clang
@@ -362,10 +363,11 @@
 
 
 template <class T>
 class Optional : private OptionalBase<T>
 {
+  WTF_MAKE_FAST_ALLOCATED;
   static_assert( !std::is_same<typename std::decay<T>::type, nullopt_t>::value, "bad T" );
   static_assert( !std::is_same<typename std::decay<T>::type, std::in_place_t>::value, "bad T" );
 
 
   constexpr bool initialized() const __NOEXCEPT { return OptionalBase<T>::init_; }
@@ -578,10 +580,11 @@
 
 
 template <class T>
 class Optional<T&>
 {
+  WTF_MAKE_FAST_ALLOCATED;
   static_assert( !std::is_same<T, nullopt_t>::value, "bad T" );
   static_assert( !std::is_same<T, std::in_place_t>::value, "bad T" );
   T* ref;
 
 public:
