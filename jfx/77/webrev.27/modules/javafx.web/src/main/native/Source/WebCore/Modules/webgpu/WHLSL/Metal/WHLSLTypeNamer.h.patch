diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLTypeNamer.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLTypeNamer.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLTypeNamer.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLTypeNamer.h
@@ -25,14 +25,14 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
+#include "WHLSLMangledNames.h"
+#include "WHLSLUnnamedTypeHash.h"
 #include "WHLSLVisitor.h"
 #include <wtf/HashMap.h>
-#include <wtf/text/StringConcatenate.h>
-#include <wtf/text/StringConcatenateNumbers.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 namespace WHLSL {
@@ -58,56 +58,46 @@
 class TypeNamer : private Visitor {
 public:
     TypeNamer(Program&);
     virtual ~TypeNamer();
 
-    String metalTypes();
+    void emitMetalTypes(StringBuilder&);
 
-    // Must be called after calling metalTypes().
+    // Must be called after calling emitMetalTypes().
     String mangledNameForType(AST::NativeTypeDeclaration&);
-    String mangledNameForType(AST::UnnamedType&);
-    String mangledNameForType(AST::NamedType&);
-    String mangledNameForEnumerationMember(AST::EnumerationMember&);
-    String mangledNameForStructureElement(AST::StructureElement&);
+    MangledTypeName mangledNameForType(AST::UnnamedType&);
+    MangledOrNativeTypeName mangledNameForType(AST::NamedType&);
+    MangledEnumerationMemberName mangledNameForEnumerationMember(AST::EnumerationMember&);
+    MangledStructureElementName mangledNameForStructureElement(AST::StructureElement&);
 
-    String generateNextTypeName()
-    {
-        return makeString("type", m_typeCount++);
-    }
-
-    String generateNextStructureElementName()
-    {
-        return makeString("structureElement", m_structureElementCount++);
-    }
+    MangledTypeName generateNextTypeName() { return { m_typeCount++ }; }
+    MangledStructureElementName generateNextStructureElementName() { return { m_structureElementCount++ }; }
 
 private:
     void visit(AST::UnnamedType&) override;
     void visit(AST::EnumerationDefinition&) override;
     void visit(AST::NativeTypeDeclaration&) override;
     void visit(AST::StructureDefinition&) override;
     void visit(AST::TypeDefinition&) override;
+    void visit(AST::Expression&) override;
+    void visit(AST::CallExpression&) override;
 
-    String generateNextEnumerationMemberName()
-    {
-        return makeString("enumerationMember", m_enumerationMemberCount++);
-    }
+    MangledEnumerationMemberName generateNextEnumerationMemberName() { return { m_enumerationMemberCount++ }; }
 
-    void emitNamedTypeDefinition(AST::NamedType&, HashSet<AST::NamedType*>& emittedNamedTypes, HashSet<BaseTypeNameNode*>& emittedUnnamedTypes, StringBuilder&);
-    void emitUnnamedTypeDefinition(BaseTypeNameNode&, HashSet<AST::NamedType*>& emittedNamedTypes, HashSet<BaseTypeNameNode*>& emittedUnnamedTypes, StringBuilder&);
-    String metalTypeDeclarations();
-    String metalTypeDefinitions();
+    void emitNamedTypeDefinition(StringBuilder&, AST::NamedType&, Vector<std::reference_wrapper<AST::UnnamedType>>&, HashSet<AST::NamedType*>& emittedNamedTypes, HashSet<UnnamedTypeKey>& emittedUnnamedTypes);
+    void emitUnnamedTypeDefinition(StringBuilder&, AST::UnnamedType&, MangledTypeName, HashSet<AST::NamedType*>& emittedNamedTypes, HashSet<UnnamedTypeKey>& emittedUnnamedTypes);
+    void emitMetalTypeDeclarations(StringBuilder&);
+    void emitMetalTypeDefinitions(StringBuilder&);
 
-    UniqueRef<BaseTypeNameNode> createNameNode(AST::UnnamedType&, BaseTypeNameNode* parent);
-    size_t insert(AST::UnnamedType&, Vector<UniqueRef<BaseTypeNameNode>>&);
+    void generateUniquedTypeName(AST::UnnamedType&);
 
     Program& m_program;
-    Vector<UniqueRef<BaseTypeNameNode>> m_trie;
-    HashMap<AST::UnnamedType*, BaseTypeNameNode*> m_unnamedTypeMapping;
-    HashMap<AST::NamedType*, String> m_namedTypeMapping;
-    HashMap<AST::NamedType*, Vector<std::reference_wrapper<BaseTypeNameNode>>> m_dependencyGraph;
-    HashMap<AST::EnumerationMember*, String> m_enumerationMemberMapping;
-    HashMap<AST::StructureElement*, String> m_structureElementMapping;
+    HashMap<UnnamedTypeKey, MangledTypeName> m_unnamedTypeMapping;
+    HashMap<AST::NamedType*, MangledTypeName> m_namedTypeMapping;
+    HashMap<AST::NamedType*, Vector<std::reference_wrapper<AST::UnnamedType>>> m_dependencyGraph;
+    HashMap<AST::EnumerationMember*, MangledEnumerationMemberName> m_enumerationMemberMapping;
+    HashMap<AST::StructureElement*, MangledStructureElementName> m_structureElementMapping;
     unsigned m_typeCount { 0 };
     unsigned m_enumerationMemberCount { 0 };
     unsigned m_structureElementCount { 0 };
 };
 
