diff a/modules/javafx.web/src/main/native/Source/WebCore/page/linux/ResourceUsageOverlayLinux.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/linux/ResourceUsageOverlayLinux.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/linux/ResourceUsageOverlayLinux.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/linux/ResourceUsageOverlayLinux.cpp
@@ -62,16 +62,17 @@
 
 static String gcTimerString(MonotonicTime timerFireDate, MonotonicTime now)
 {
     if (std::isnan(timerFireDate))
         return "[not scheduled]"_s;
-    return String::number((timerFireDate - now).seconds());
+    return String::numberToStringFixedPrecision((timerFireDate - now).seconds());
 }
 
 static const float gFontSize = 14;
 
 class ResourceUsageOverlayPainter final : public GraphicsLayerClient {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     ResourceUsageOverlayPainter(ResourceUsageOverlay& overlay)
         : m_overlay(overlay)
     {
         FontCascadeDescription fontDescription;
@@ -82,11 +83,11 @@
     }
 
     ~ResourceUsageOverlayPainter() = default;
 
 private:
-    void paintContents(const GraphicsLayer*, GraphicsContext& context, GraphicsLayerPaintingPhase, const FloatRect& clip, GraphicsLayerPaintBehavior) override
+    void paintContents(const GraphicsLayer*, GraphicsContext& context, OptionSet<GraphicsLayerPaintingPhase>, const FloatRect& clip, GraphicsLayerPaintBehavior) override
     {
         GraphicsContextStateSaver stateSaver(context);
         context.fillRect(clip, Color(0.0f, 0.0f, 0.0f, 0.8f));
         context.setFillColor(Color(0.9f, 0.9f, 0.9f, 1.f));
 
@@ -130,11 +131,11 @@
     FontCascade m_textFont;
 };
 
 void ResourceUsageOverlay::platformInitialize()
 {
-    m_overlayPainter = std::make_unique<ResourceUsageOverlayPainter>(*this);
+    m_overlayPainter = makeUnique<ResourceUsageOverlayPainter>(*this);
     m_paintLayer = GraphicsLayer::create(overlay().page()->chrome().client().graphicsLayerFactory(), *m_overlayPainter);
     m_paintLayer->setAnchorPoint(FloatPoint3D());
     m_paintLayer->setSize({ normalWidth, normalHeight });
     m_paintLayer->setBackgroundColor(Color(0.0f, 0.0f, 0.0f, 0.8f));
     m_paintLayer->setDrawsContent(true);
