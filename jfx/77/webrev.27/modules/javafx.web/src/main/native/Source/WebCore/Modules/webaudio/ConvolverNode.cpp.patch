diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/ConvolverNode.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/ConvolverNode.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/ConvolverNode.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/ConvolverNode.cpp
@@ -31,10 +31,11 @@
 
 #include "AudioBuffer.h"
 #include "AudioNodeInput.h"
 #include "AudioNodeOutput.h"
 #include "Reverb.h"
+#include <wtf/IsoMallocInlines.h>
 
 // Note about empirical tuning:
 // The maximum FFT size affects reverb performance and accuracy.
 // If the reverb is single-threaded and processes entirely in the real-time audio thread,
 // it's important not to make this too high.  In this case 8192 is a good value.
@@ -42,23 +43,25 @@
 // Very large FFTs will have worse phase errors. Given these constraints 32768 is a good compromise.
 const size_t MaxFFTSize = 32768;
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(ConvolverNode);
+
 ConvolverNode::ConvolverNode(AudioContext& context, float sampleRate)
     : AudioNode(context, sampleRate)
 {
-    addInput(std::make_unique<AudioNodeInput>(this));
-    addOutput(std::make_unique<AudioNodeOutput>(this, 2));
+    setNodeType(NodeTypeConvolver);
+
+    addInput(makeUnique<AudioNodeInput>(this));
+    addOutput(makeUnique<AudioNodeOutput>(this, 2));
 
     // Node-specific default mixing rules.
     m_channelCount = 2;
     m_channelCountMode = ClampedMax;
     m_channelInterpretation = AudioBus::Speakers;
 
-    setNodeType(NodeTypeConvolver);
-
     initialize();
 }
 
 ConvolverNode::~ConvolverNode()
 {
@@ -141,11 +144,11 @@
 
     bufferBus->setSampleRate(buffer->sampleRate());
 
     // Create the reverb with the given impulse response.
     bool useBackgroundThreads = !context().isOfflineContext();
-    auto reverb = std::make_unique<Reverb>(bufferBus.get(), AudioNode::ProcessingSizeInFrames, MaxFFTSize, 2, useBackgroundThreads, m_normalize);
+    auto reverb = makeUnique<Reverb>(bufferBus.get(), AudioNode::ProcessingSizeInFrames, MaxFFTSize, 2, useBackgroundThreads, m_normalize);
 
     {
         // Synchronize with process().
         std::lock_guard<Lock> lock(m_processMutex);
         m_reverb = WTFMove(reverb);
