diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/win/ThreadingWin.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/win/ThreadingWin.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/win/ThreadingWin.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/win/ThreadingWin.cpp
@@ -285,11 +285,10 @@
     // After FLS is destroyed, this map offers the value until the second thread exit callback is called.
     auto locker = holdLock(threadMapMutex);
     return threadMap().get(currentID());
 }
 
-// FIXME: Remove this workaround code once <rdar://problem/31793213> is fixed.
 RefPtr<Thread> Thread::get(ThreadIdentifier id)
 {
     auto locker = holdLock(threadMapMutex);
     Thread* thread = threadMap().get(id);
     if (thread)
@@ -425,34 +424,10 @@
 void ThreadCondition::broadcast()
 {
     WakeAllConditionVariable(&m_condition);
 }
 
-// Remove this workaround code when <rdar://problem/31793213> is fixed.
-ThreadIdentifier createThread(ThreadFunction function, void* data, const char* threadName)
-{
-    return Thread::create(threadName, [function, data] {
-        function(data);
-    })->id();
-}
-
-int waitForThreadCompletion(ThreadIdentifier threadID)
-{
-    // This function is implemented based on the old Threading implementation.
-    // It remains only due to the support library using old Threading APIs and
-    // it should not be used in new code.
-    ASSERT(threadID);
-
-    RefPtr<Thread> thread = Thread::get(threadID);
-    if (!thread) {
-        LOG_ERROR("ThreadIdentifier %u did not correspond to an active thread when trying to quit", threadID);
-        return WAIT_FAILED;
-    }
-    return thread->waitForCompletion();
-
-}
-
 void Thread::yield()
 {
     SwitchToThread();
 }
 
