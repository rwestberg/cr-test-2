diff a/modules/javafx.web/src/main/native/Source/WebCore/page/PageOverlayController.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/PageOverlayController.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/PageOverlayController.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/PageOverlayController.cpp
@@ -63,10 +63,23 @@
     m_viewOverlayRootLayer = GraphicsLayer::create(m_page.chrome().client().graphicsLayerFactory(), *this);
     m_documentOverlayRootLayer->setName("Document overlay Container");
     m_viewOverlayRootLayer->setName("View overlay container");
 }
 
+void PageOverlayController::installedPageOverlaysChanged()
+{
+    if (hasViewOverlays())
+        attachViewOverlayLayers();
+    else
+        detachViewOverlayLayers();
+
+    if (auto* frameView = m_page.mainFrame().view())
+        frameView->setNeedsCompositingConfigurationUpdate();
+
+    updateForceSynchronousScrollLayerPositionUpdates();
+}
+
 bool PageOverlayController::hasDocumentOverlays() const
 {
     for (const auto& overlay : m_pageOverlays) {
         if (overlay->overlayType() == PageOverlay::OverlayType::Document)
             return true;
@@ -90,11 +103,10 @@
 }
 
 void PageOverlayController::detachViewOverlayLayers()
 {
     m_page.chrome().client().attachViewOverlayGraphicsLayer(nullptr);
-    willDetachRootLayer();
 }
 
 GraphicsLayer* PageOverlayController::documentOverlayRootLayer() const
 {
     return m_documentOverlayRootLayer.get();
@@ -190,23 +202,21 @@
     }
 
     auto& rawLayer = layer.get();
     m_overlayGraphicsLayers.set(&overlay, WTFMove(layer));
 
-    updateForceSynchronousScrollLayerPositionUpdates();
-
     overlay.setPage(&m_page);
 
     if (FrameView* frameView = m_page.mainFrame().view())
         frameView->enterCompositingMode();
 
     updateOverlayGeometry(overlay, rawLayer);
 
     if (fadeMode == PageOverlay::FadeMode::Fade)
         overlay.startFadeInAnimation();
 
-    m_page.installedPageOverlaysChanged();
+    installedPageOverlaysChanged();
 }
 
 void PageOverlayController::uninstallPageOverlay(PageOverlay& overlay, PageOverlay::FadeMode fadeMode)
 {
     if (fadeMode == PageOverlay::FadeMode::Fade) {
@@ -220,12 +230,11 @@
         optionalLayer.value()->removeFromParent();
 
     bool removed = m_pageOverlays.removeFirst(&overlay);
     ASSERT_UNUSED(removed, removed);
 
-    updateForceSynchronousScrollLayerPositionUpdates();
-    m_page.installedPageOverlaysChanged();
+    installedPageOverlaysChanged();
 }
 
 void PageOverlayController::updateForceSynchronousScrollLayerPositionUpdates()
 {
 #if ENABLE(ASYNC_SCROLLING)
@@ -239,11 +248,11 @@
     if (ScrollingCoordinator* scrollingCoordinator = m_page.scrollingCoordinator())
         scrollingCoordinator->setForceSynchronousScrollLayerPositionUpdates(forceSynchronousScrollLayerPositionUpdates);
 #endif
 }
 
-void PageOverlayController::setPageOverlayNeedsDisplay(PageOverlay& overlay, const WebCore::IntRect& dirtyRect)
+void PageOverlayController::setPageOverlayNeedsDisplay(PageOverlay& overlay, const IntRect& dirtyRect)
 {
     ASSERT(m_pageOverlays.contains(&overlay));
     auto* graphicsLayer = m_overlayGraphicsLayers.get(&overlay);
 
     if (!graphicsLayer->drawsContent()) {
@@ -270,18 +279,10 @@
 {
     ASSERT(m_pageOverlays.contains(&overlay));
     return *m_overlayGraphicsLayers.get(&overlay);
 }
 
-void PageOverlayController::willDetachRootLayer()
-{
-    GraphicsLayer::unparentAndClear(m_documentOverlayRootLayer);
-    GraphicsLayer::unparentAndClear(m_viewOverlayRootLayer);
-
-    m_initialized = false;
-}
-
 void PageOverlayController::didChangeViewSize()
 {
     for (auto& overlayAndLayer : m_overlayGraphicsLayers) {
         if (overlayAndLayer.key->overlayType() == PageOverlay::OverlayType::View)
             updateOverlayGeometry(*overlayAndLayer.key, overlayAndLayer.value.get());
@@ -315,11 +316,11 @@
         graphicsLayer->setNeedsDisplay();
 }
 
 void PageOverlayController::didChangeViewExposedRect()
 {
-    m_page.chrome().client().scheduleCompositingLayerFlush();
+    m_page.renderingUpdateScheduler().scheduleTimedRenderingUpdate();
 }
 
 void PageOverlayController::didScrollFrame(Frame& frame)
 {
     for (auto& overlayAndLayer : m_overlayGraphicsLayers) {
@@ -388,11 +389,11 @@
     }
 
     return { };
 }
 
-void PageOverlayController::paintContents(const WebCore::GraphicsLayer* graphicsLayer, WebCore::GraphicsContext& graphicsContext, WebCore::GraphicsLayerPaintingPhase, const WebCore::FloatRect& clipRect, GraphicsLayerPaintBehavior)
+void PageOverlayController::paintContents(const GraphicsLayer* graphicsLayer, GraphicsContext& graphicsContext, OptionSet<GraphicsLayerPaintingPhase>, const FloatRect& clipRect, GraphicsLayerPaintBehavior)
 {
     for (auto& overlayAndGraphicsLayer : m_overlayGraphicsLayers) {
         if (overlayAndGraphicsLayer.value.ptr() != graphicsLayer)
             continue;
 
@@ -407,13 +408,13 @@
 float PageOverlayController::deviceScaleFactor() const
 {
     return m_page.deviceScaleFactor();
 }
 
-void PageOverlayController::notifyFlushRequired(const WebCore::GraphicsLayer*)
+void PageOverlayController::notifyFlushRequired(const GraphicsLayer*)
 {
-    m_page.chrome().client().scheduleCompositingLayerFlush();
+    m_page.renderingUpdateScheduler().scheduleTimedRenderingUpdate();
 }
 
 void PageOverlayController::didChangeOverlayFrame(PageOverlay& overlay)
 {
     ASSERT(m_pageOverlays.contains(&overlay));
