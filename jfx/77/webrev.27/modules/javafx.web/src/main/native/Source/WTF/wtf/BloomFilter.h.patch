diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/BloomFilter.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/BloomFilter.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/BloomFilter.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/BloomFilter.h
@@ -24,11 +24,11 @@
  */
 
 #pragma once
 
 #include <array>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 namespace WTF {
 
 // Bloom filter with k=2. Uses 2^keyBits/8 bytes of memory.
 // False positive rate is approximately (1-e^(-2n/m))^2, where n is the number of unique
@@ -53,13 +53,13 @@
     bool mayContain(unsigned hash) const;
     template <size_t hashSize> bool mayContain(const std::array<uint8_t, hashSize>&) const;
 
     void clear();
 
-    void add(const AtomicString& string) { add(string.impl()->existingHash()); }
+    void add(const AtomString& string) { add(string.impl()->existingHash()); }
     void add(const String& string) { add(string.impl()->hash()); }
-    bool mayContain(const AtomicString& string) const { return mayContain(string.impl()->existingHash()); }
+    bool mayContain(const AtomString& string) const { return mayContain(string.impl()->existingHash()); }
     bool mayContain(const String& string) const { return mayContain(string.impl()->hash()); }
 
 private:
     static const unsigned bitsPerPosition = 8 * sizeof(unsigned);
     static const unsigned keyMask = (1 << keyBits) - 1;
@@ -172,16 +172,16 @@
 
     // The filter must be cleared before reuse even if all keys are removed.
     // Otherwise overflowed keys will stick around.
     void clear();
 
-    void add(const AtomicString& string) { add(string.impl()->existingHash()); }
+    void add(const AtomString& string) { add(string.impl()->existingHash()); }
     void add(const String& string) { add(string.impl()->hash()); }
-    void remove(const AtomicString& string) { remove(string.impl()->existingHash()); }
+    void remove(const AtomString& string) { remove(string.impl()->existingHash()); }
     void remove(const String& string) { remove(string.impl()->hash()); }
 
-    bool mayContain(const AtomicString& string) const { return mayContain(string.impl()->existingHash()); }
+    bool mayContain(const AtomString& string) const { return mayContain(string.impl()->existingHash()); }
     bool mayContain(const String& string) const { return mayContain(string.impl()->hash()); }
 
 #if !ASSERT_DISABLED
     // Slow.
     bool likelyEmpty() const;
