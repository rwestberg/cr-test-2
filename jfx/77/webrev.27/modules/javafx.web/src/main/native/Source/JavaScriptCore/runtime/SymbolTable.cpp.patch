diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolTable.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolTable.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolTable.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolTable.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2012, 2014, 2015 Apple Inc. All rights reserved.
+ * Copyright (C) 2012-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  *
@@ -88,21 +88,19 @@
 SymbolTable::~SymbolTable() { }
 
 void SymbolTable::finishCreation(VM& vm)
 {
     Base::finishCreation(vm);
-    if (VM::canUseJIT())
-        m_singletonScope.set(vm, this, InferredValue::create(vm));
 }
 
 void SymbolTable::visitChildren(JSCell* thisCell, SlotVisitor& visitor)
 {
     SymbolTable* thisSymbolTable = jsCast<SymbolTable*>(thisCell);
+    ASSERT_GC_OBJECT_INHERITS(thisSymbolTable, info());
     Base::visitChildren(thisSymbolTable, visitor);
 
     visitor.append(thisSymbolTable->m_arguments);
-    visitor.append(thisSymbolTable->m_singletonScope);
 
     if (thisSymbolTable->m_rareData)
         visitor.append(thisSymbolTable->m_rareData->m_codeBlock);
 
     // Save some memory. This is O(n) to rebuild and we do so on the fly.
@@ -118,11 +116,11 @@
             VarOffset offset = entry.value.varOffset();
             if (offset.isScope())
                 size = std::max(size, offset.scopeOffset().offset() + 1);
         }
 
-        m_localToEntry = std::make_unique<LocalToEntryVec>(size, nullptr);
+        m_localToEntry = makeUnique<LocalToEntryVec>(size, nullptr);
         for (auto& entry : m_map) {
             VarOffset offset = entry.value.varOffset();
             if (offset.isScope())
                 m_localToEntry->at(offset.scopeOffset().offset()) = &entry.value;
         }
@@ -159,11 +157,11 @@
 
     if (ScopedArgumentsTable* arguments = this->arguments())
         result->m_arguments.set(vm, result, arguments);
 
     if (m_rareData) {
-        result->m_rareData = std::make_unique<SymbolTableRareData>();
+        result->m_rareData = makeUnique<SymbolTableRareData>();
 
         {
             auto iter = m_rareData->m_uniqueIDMap.begin();
             auto end = m_rareData->m_uniqueIDMap.end();
             for (; iter != end; ++iter)
@@ -191,11 +189,11 @@
 void SymbolTable::prepareForTypeProfiling(const ConcurrentJSLocker&)
 {
     if (m_rareData)
         return;
 
-    m_rareData = std::make_unique<SymbolTableRareData>();
+    m_rareData = makeUnique<SymbolTableRareData>();
 
     for (auto iter = m_map.begin(), end = m_map.end(); iter != end; ++iter) {
         m_rareData->m_uniqueIDMap.set(iter->key, TypeProfilerNeedsUniqueIDGeneration);
         m_rareData->m_offsetToVariableMap.set(iter->value.varOffset(), iter->key);
     }
@@ -210,14 +208,14 @@
 }
 
 void SymbolTable::setRareDataCodeBlock(CodeBlock* codeBlock)
 {
     if (!m_rareData)
-        m_rareData = std::make_unique<SymbolTableRareData>();
+        m_rareData = makeUnique<SymbolTableRareData>();
 
     ASSERT(!m_rareData->m_codeBlock);
-    m_rareData->m_codeBlock.set(*codeBlock->vm(), this, codeBlock);
+    m_rareData->m_codeBlock.set(codeBlock->vm(), this, codeBlock);
 }
 
 GlobalVariableID SymbolTable::uniqueIDForVariable(const ConcurrentJSLocker&, UniquedStringImpl* key, VM& vm)
 {
     RELEASE_ASSERT(m_rareData);
