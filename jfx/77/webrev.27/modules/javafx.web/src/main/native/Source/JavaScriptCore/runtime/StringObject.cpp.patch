diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StringObject.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StringObject.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StringObject.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StringObject.cpp
@@ -1,8 +1,8 @@
 /*
  *  Copyright (C) 1999-2001 Harri Porten (porten@kde.org)
- *  Copyright (C) 2004-2008, 2016 Apple Inc. All rights reserved.
+ *  Copyright (C) 2004-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Lesser General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -55,11 +55,12 @@
 bool StringObject::getOwnPropertySlotByIndex(JSObject* object, ExecState* exec, unsigned propertyName, PropertySlot& slot)
 {
     StringObject* thisObject = jsCast<StringObject*>(object);
     if (thisObject->internalValue()->getStringPropertySlot(exec, propertyName, slot))
         return true;
-    return JSObject::getOwnPropertySlot(thisObject, exec, Identifier::from(exec, propertyName), slot);
+    VM& vm = exec->vm();
+    return JSObject::getOwnPropertySlot(thisObject, exec, Identifier::from(vm, propertyName), slot);
 }
 
 bool StringObject::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
 {
     VM& vm = exec->vm();
@@ -144,15 +145,16 @@
     return JSObject::deletePropertyByIndex(thisObject, exec, i);
 }
 
 void StringObject::getOwnPropertyNames(JSObject* object, ExecState* exec, PropertyNameArray& propertyNames, EnumerationMode mode)
 {
+    VM& vm = exec->vm();
     StringObject* thisObject = jsCast<StringObject*>(object);
     if (propertyNames.includeStringProperties()) {
         int size = thisObject->internalValue()->length();
         for (int i = 0; i < size; ++i)
-            propertyNames.add(Identifier::from(exec, i));
+            propertyNames.add(Identifier::from(vm, i));
     }
     return JSObject::getOwnPropertyNames(thisObject, exec, propertyNames, mode);
 }
 
 void StringObject::getOwnNonIndexPropertyNames(JSObject* object, ExecState* exec, PropertyNameArray& propertyNames, EnumerationMode mode)
