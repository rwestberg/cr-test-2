diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLNativeTypeWriter.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLNativeTypeWriter.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLNativeTypeWriter.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLNativeTypeWriter.cpp
@@ -42,63 +42,41 @@
 {
     if (nativeTypeDeclaration.name() == "void")
         return "void"_str;
     if (nativeTypeDeclaration.name() == "bool")
         return "bool"_str;
-    if (nativeTypeDeclaration.name() == "uchar")
-        return "uint8_t"_str;
-    if (nativeTypeDeclaration.name() == "ushort")
-        return "uint16_t"_str;
     if (nativeTypeDeclaration.name() == "uint")
         return "uint32_t"_str;
-    if (nativeTypeDeclaration.name() == "char")
-        return "int8_t"_str;
-    if (nativeTypeDeclaration.name() == "short")
-        return "int16_t"_str;
     if (nativeTypeDeclaration.name() == "int")
         return "int32_t"_str;
-    if (nativeTypeDeclaration.name() == "half")
-        return "half"_str;
     if (nativeTypeDeclaration.name() == "float")
         return "float"_str;
     if (nativeTypeDeclaration.name() == "atomic_int")
         return "atomic_int"_str;
     if (nativeTypeDeclaration.name() == "atomic_uint")
         return "atomic_uint"_str;
     if (nativeTypeDeclaration.name() == "sampler")
         return "sampler"_str;
     if (nativeTypeDeclaration.name() == "vector") {
         ASSERT(nativeTypeDeclaration.typeArguments().size() == 2);
-        ASSERT(WTF::holds_alternative<UniqueRef<AST::TypeReference>>(nativeTypeDeclaration.typeArguments()[0]));
-        auto& typeReference = WTF::get<UniqueRef<AST::TypeReference>>(nativeTypeDeclaration.typeArguments()[0]);
+        ASSERT(WTF::holds_alternative<Ref<AST::TypeReference>>(nativeTypeDeclaration.typeArguments()[0]));
+        auto& typeReference = WTF::get<Ref<AST::TypeReference>>(nativeTypeDeclaration.typeArguments()[0]);
         auto& unifyNode = typeReference->unifyNode();
-        ASSERT(is<AST::NamedType>(unifyNode));
         auto& namedType = downcast<AST::NamedType>(unifyNode);
-        ASSERT(is<AST::NativeTypeDeclaration>(namedType));
         auto& parameterType = downcast<AST::NativeTypeDeclaration>(namedType);
         auto prefix = ([&]() -> String {
             if (parameterType.name() == "bool")
                 return "bool";
-            if (parameterType.name() == "uchar")
-                return "uchar";
-            if (parameterType.name() == "ushort")
-                return "ushort";
             if (parameterType.name() == "uint")
                 return "uint";
-            if (parameterType.name() == "char")
-                return "char";
-            if (parameterType.name() == "short")
-                return "short";
             if (parameterType.name() == "int")
                 return "int";
-            if (parameterType.name() == "half")
-                return "half";
             ASSERT(parameterType.name() == "float");
             return "float";
         })();
         ASSERT(WTF::holds_alternative<AST::ConstantExpression>(nativeTypeDeclaration.typeArguments()[1]));
-        auto& constantExpression = WTF::get<AST::ConstantExpression>(nativeTypeDeclaration.typeArguments()[0]);
+        auto& constantExpression = WTF::get<AST::ConstantExpression>(nativeTypeDeclaration.typeArguments()[1]);
         auto& integerLiteral = constantExpression.integerLiteral();
         auto suffix = ([&]() -> String {
             switch (integerLiteral.value()) {
             case 2:
                 return "2"_str;
@@ -111,56 +89,38 @@
         })();
         return makeString(prefix, suffix);
     }
     if (nativeTypeDeclaration.name() == "matrix") {
         ASSERT(nativeTypeDeclaration.typeArguments().size() == 3);
-        ASSERT(WTF::holds_alternative<UniqueRef<AST::TypeReference>>(nativeTypeDeclaration.typeArguments()[0]));
-        auto& typeReference = WTF::get<UniqueRef<AST::TypeReference>>(nativeTypeDeclaration.typeArguments()[0]);
+        ASSERT(WTF::holds_alternative<Ref<AST::TypeReference>>(nativeTypeDeclaration.typeArguments()[0]));
+        auto& typeReference = WTF::get<Ref<AST::TypeReference>>(nativeTypeDeclaration.typeArguments()[0]);
         auto& unifyNode = typeReference->unifyNode();
-        ASSERT(is<AST::NamedType>(unifyNode));
         auto& namedType = downcast<AST::NamedType>(unifyNode);
-        ASSERT(is<AST::NativeTypeDeclaration>(namedType));
         auto& parameterType = downcast<AST::NativeTypeDeclaration>(namedType);
         auto prefix = ([&]() -> String {
-            if (parameterType.name() == "half")
-                return "half";
+            if (parameterType.name() == "bool")
+                return "bool";
             ASSERT(parameterType.name() == "float");
             return "float";
         })();
+
         ASSERT(WTF::holds_alternative<AST::ConstantExpression>(nativeTypeDeclaration.typeArguments()[1]));
-        auto& constantExpression1 = WTF::get<AST::ConstantExpression>(nativeTypeDeclaration.typeArguments()[0]);
+        auto& constantExpression1 = WTF::get<AST::ConstantExpression>(nativeTypeDeclaration.typeArguments()[1]);
         auto& integerLiteral1 = constantExpression1.integerLiteral();
-        auto middle = ([&]() -> String {
-            switch (integerLiteral1.value()) {
-            case 2:
-                return "2"_str;
-            case 3:
-                return "3"_str;
-            default:
-                ASSERT(integerLiteral1.value() == 4);
-                return "4"_str;
-            }
-        })();
+        unsigned rows = integerLiteral1.value();
+        ASSERT(rows == 2 || rows == 3 || rows == 4);
+
         ASSERT(WTF::holds_alternative<AST::ConstantExpression>(nativeTypeDeclaration.typeArguments()[2]));
-        auto& constantExpression2 = WTF::get<AST::ConstantExpression>(nativeTypeDeclaration.typeArguments()[0]);
+        auto& constantExpression2 = WTF::get<AST::ConstantExpression>(nativeTypeDeclaration.typeArguments()[2]);
         auto& integerLiteral2 = constantExpression2.integerLiteral();
-        auto suffix = ([&]() -> String {
-            switch (integerLiteral2.value()) {
-            case 2:
-                return "2"_str;
-            case 3:
-                return "3"_str;
-            default:
-                ASSERT(integerLiteral2.value() == 4);
-                return "4"_str;
-            }
-        })();
-        return makeString(prefix, middle, 'x', suffix);
+        unsigned columns = integerLiteral2.value();
+        ASSERT(columns == 2 || columns == 3 || columns == 4);
+        return makeString("array<", prefix, ", ", columns * rows, ">");
     }
     ASSERT(nativeTypeDeclaration.typeArguments().size() == 1);
-    ASSERT(WTF::holds_alternative<UniqueRef<AST::TypeReference>>(nativeTypeDeclaration.typeArguments()[0]));
-    auto& typeReference = WTF::get<UniqueRef<AST::TypeReference>>(nativeTypeDeclaration.typeArguments()[0]);
+    ASSERT(WTF::holds_alternative<Ref<AST::TypeReference>>(nativeTypeDeclaration.typeArguments()[0]));
+    auto& typeReference = WTF::get<Ref<AST::TypeReference>>(nativeTypeDeclaration.typeArguments()[0]);
     auto prefix = ([&]() -> String {
         if (nativeTypeDeclaration.name() == "Texture1D")
             return "texture1d"_str;
         if (nativeTypeDeclaration.name() == "RWTexture1D")
             return "texture1d"_str;
@@ -182,71 +142,47 @@
             return "texture3d"_str;
         if (nativeTypeDeclaration.name() == "TextureCube")
             return "texturecube"_str;
         if (nativeTypeDeclaration.name() == "TextureDepth2D")
             return "depth2d"_str;
-        if (nativeTypeDeclaration.name() == "RWTextureDepth2D")
-            return "depth2d"_str;
         if (nativeTypeDeclaration.name() == "TextureDepth2DArray")
             return "depth2d_array"_str;
-        if (nativeTypeDeclaration.name() == "RWTextureDepth2DArray")
-            return "depth2d_array"_str;
         ASSERT(nativeTypeDeclaration.name() == "TextureDepthCube");
         return "depthcube"_str;
     })();
     auto innerType = ([&]() -> String {
-        if (typeReference->name() == "ushort")
-            return "ushort"_str;
-        if (typeReference->name() == "ushort2")
-            return "ushort"_str;
-        if (typeReference->name() == "ushort3")
-            return "ushort"_str;
-        if (typeReference->name() == "ushort4")
-            return "ushort"_str;
         if (typeReference->name() == "uint")
             return "uint"_str;
         if (typeReference->name() == "uint2")
             return "uint"_str;
         if (typeReference->name() == "uint3")
             return "uint"_str;
         if (typeReference->name() == "uint4")
             return "uint"_str;
-        if (typeReference->name() == "short")
-            return "short"_str;
-        if (typeReference->name() == "short2")
-            return "short"_str;
-        if (typeReference->name() == "short3")
-            return "short"_str;
-        if (typeReference->name() == "short4")
-            return "short"_str;
         if (typeReference->name() == "int")
             return "int"_str;
         if (typeReference->name() == "int2")
             return "int"_str;
         if (typeReference->name() == "int3")
             return "int"_str;
         if (typeReference->name() == "int4")
             return "int"_str;
-        if (typeReference->name() == "half")
-            return "half"_str;
-        if (typeReference->name() == "half2")
-            return "half"_str;
-        if (typeReference->name() == "half3")
-            return "half"_str;
-        if (typeReference->name() == "half4")
-            return "half"_str;
         if (typeReference->name() == "float")
             return "float"_str;
         if (typeReference->name() == "float2")
             return "float"_str;
         if (typeReference->name() == "float3")
             return "float"_str;
         ASSERT(typeReference->name() == "float4");
         return "float"_str;
     })();
-    // FIXME: Specify the second template argument to Metal texture types.
-    return makeString(prefix, '<', innerType, '>');
+    auto isReadWrite = nativeTypeDeclaration.name() == "RWTexture1D"
+        || nativeTypeDeclaration.name() == "RWTexture1DArray"
+        || nativeTypeDeclaration.name() == "RWTexture2D"
+        || nativeTypeDeclaration.name() == "RWTexture2DArray"
+        || nativeTypeDeclaration.name() == "RWTexture3D";
+    return makeString(prefix, '<', innerType, ", ", isReadWrite ? "access::read_write" : "access::sample", '>');
 }
 
 } // namespace Metal
 
 } // namespace WHLSL
