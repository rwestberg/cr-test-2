diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatingState.cpp b/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatingState.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatingState.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatingState.cpp
@@ -117,13 +117,16 @@
     // 1. Convert vertical position if this floating context is inherited.
     // 2. Find the inner left/right floats at verticalPosition.
     // 3. Convert left/right positions back to formattingContextRoot's cooridnate system.
     auto coordinateMappingIsRequired = &root() != &formattingContextRoot;
     auto adjustedPosition = Point { 0, verticalPosition };
+    LayoutSize adjustingDelta;
 
-    if (coordinateMappingIsRequired)
-        adjustedPosition = FormattingContext::mapCoordinateToAncestor(m_layoutState, adjustedPosition, downcast<Container>(formattingContextRoot), downcast<Container>(root()));
+    if (coordinateMappingIsRequired) {
+        adjustedPosition = FormattingContext::mapPointToAncestor(m_layoutState, adjustedPosition, downcast<Container>(formattingContextRoot), downcast<Container>(root()));
+        adjustingDelta = { adjustedPosition.x, adjustedPosition.y - verticalPosition };
+    }
 
     Constraints constraints;
     for (int index = m_floats.size() - 1; index >= 0; --index) {
         auto& floatItem = m_floats[index];
 
@@ -136,26 +139,25 @@
         auto rect = floatItem.rectWithMargin();
         if (!(rect.top() <= adjustedPosition.y && adjustedPosition.y < rect.bottom()))
             continue;
 
         if (floatItem.isLeftPositioned())
-            constraints.left = PositionInContextRoot { rect.right() };
+            constraints.left = PointInContextRoot { rect.right(), rect.bottom() };
         else
-            constraints.right = PositionInContextRoot { rect.left() };
+            constraints.right = PointInContextRoot { rect.left(), rect.bottom() };
 
         if (constraints.left && constraints.right)
             break;
     }
 
     if (coordinateMappingIsRequired) {
         if (constraints.left)
-            constraints.left = PositionInContextRoot { *constraints.left - adjustedPosition.x };
+            constraints.left->move(-adjustingDelta);
 
         if (constraints.right)
-            constraints.right = PositionInContextRoot { *constraints.right - adjustedPosition.x };
+            constraints.right->move(-adjustingDelta);
     }
-
     return constraints;
 }
 
 Optional<PositionInContextRoot> FloatingState::bottom(const Box& formattingContextRoot, Clear type) const
 {
