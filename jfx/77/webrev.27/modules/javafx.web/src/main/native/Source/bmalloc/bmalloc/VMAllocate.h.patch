diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/VMAllocate.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/VMAllocate.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/VMAllocate.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/VMAllocate.h
@@ -128,13 +128,13 @@
     if (result == MAP_FAILED)
         return nullptr;
     return result;
 }
 
-inline void* vmAllocate(size_t vmSize)
+inline void* vmAllocate(size_t vmSize, VMTag usage = VMTag::Malloc)
 {
-    void* result = tryVMAllocate(vmSize);
+    void* result = tryVMAllocate(vmSize, usage);
     RELEASE_BASSERT(result);
     return result;
 }
 
 inline void vmDeallocate(void* p, size_t vmSize)
@@ -187,22 +187,24 @@
         vmDeallocate(alignedEnd, rightExtra);
 
     return aligned;
 }
 
-inline void* vmAllocate(size_t vmAlignment, size_t vmSize)
+inline void* vmAllocate(size_t vmAlignment, size_t vmSize, VMTag usage = VMTag::Malloc)
 {
-    void* result = tryVMAllocate(vmAlignment, vmSize);
+    void* result = tryVMAllocate(vmAlignment, vmSize, usage);
     RELEASE_BASSERT(result);
     return result;
 }
 
 inline void vmDeallocatePhysicalPages(void* p, size_t vmSize)
 {
     vmValidatePhysical(p, vmSize);
 #if BOS(DARWIN)
     SYSCALL(madvise(p, vmSize, MADV_FREE_REUSABLE));
+#elif BOS(FREEBSD)
+    SYSCALL(madvise(p, vmSize, MADV_FREE));
 #else
     SYSCALL(madvise(p, vmSize, MADV_DONTNEED));
 #if BOS(LINUX)
     SYSCALL(madvise(p, vmSize, MADV_DONTDUMP));
 #endif
