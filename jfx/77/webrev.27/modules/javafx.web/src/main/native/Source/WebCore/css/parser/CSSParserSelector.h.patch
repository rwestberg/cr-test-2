diff a/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParserSelector.h b/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParserSelector.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParserSelector.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParserSelector.h
@@ -19,45 +19,39 @@
  */
 
 #pragma once
 
 #include "CSSSelector.h"
-#include "CSSValueKeywords.h"
-#include <wtf/text/AtomicString.h>
-#include <wtf/text/AtomicStringHash.h>
-#include <wtf/text/WTFString.h>
+#include <wtf/text/AtomStringHash.h>
 
 namespace WebCore {
 
-class CSSValue;
-class QualifiedName;
-
 enum class CSSParserSelectorCombinator {
     Child,
     DescendantSpace,
     DirectAdjacent,
     IndirectAdjacent
 };
 
 class CSSParserSelector {
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    static CSSParserSelector* parsePseudoClassSelectorFromStringView(StringView&);
-    static CSSParserSelector* parsePseudoElementSelectorFromStringView(StringView&);
-    static CSSParserSelector* parsePagePseudoSelector(const AtomicString&);
+    static std::unique_ptr<CSSParserSelector> parsePseudoClassSelector(StringView);
+    static std::unique_ptr<CSSParserSelector> parsePseudoElementSelector(StringView);
+    static std::unique_ptr<CSSParserSelector> parsePagePseudoSelector(StringView);
 
     CSSParserSelector();
     explicit CSSParserSelector(const QualifiedName&);
     ~CSSParserSelector();
 
     std::unique_ptr<CSSSelector> releaseSelector() { return WTFMove(m_selector); }
 
-    void setValue(const AtomicString& value, bool matchLowerCase = false) { m_selector->setValue(value, matchLowerCase); }
+    void setValue(const AtomString& value, bool matchLowerCase = false) { m_selector->setValue(value, matchLowerCase); }
 
     void setAttribute(const QualifiedName& value, bool convertToLowercase, CSSSelector::AttributeMatchType type) { m_selector->setAttribute(value, convertToLowercase, type); }
 
-    void setArgument(const AtomicString& value) { m_selector->setArgument(value); }
+    void setArgument(const AtomString& value) { m_selector->setArgument(value); }
     void setNth(int a, int b) { m_selector->setNth(a, b); }
     void setMatch(CSSSelector::Match value) { m_selector->setMatch(value); }
     void setRelation(CSSSelector::RelationType value) { m_selector->setRelation(value); }
     void setForPage() { m_selector->setForPage(); }
 
@@ -66,24 +60,17 @@
     const CSSSelectorList* selectorList() const { return m_selector->selectorList(); }
 
     void setPseudoElementType(CSSSelector::PseudoElementType type) { m_selector->setPseudoElementType(type); }
 
     void adoptSelectorVector(Vector<std::unique_ptr<CSSParserSelector>>&&);
-    void setLangArgumentList(std::unique_ptr<Vector<AtomicString>>);
+    void setLangArgumentList(std::unique_ptr<Vector<AtomString>>);
     void setSelectorList(std::unique_ptr<CSSSelectorList>);
 
     CSSSelector::PseudoClassType pseudoClassType() const { return m_selector->pseudoClassType(); }
     bool isCustomPseudoElement() const { return m_selector->isCustomPseudoElement(); }
 
-    bool isPseudoElementCueFunction() const
-    {
-#if ENABLE(VIDEO_TRACK)
-        return m_selector->match() == CSSSelector::PseudoElement && m_selector->pseudoElementType() == CSSSelector::PseudoElementCue;
-#else
-        return false;
-#endif
-    }
+    bool isPseudoElementCueFunction() const;
 
     bool hasShadowDescendant() const;
     bool matchesPseudoElement() const;
 
     bool isHostPseudoSelector() const;
@@ -121,6 +108,15 @@
             || pseudoElementType() == CSSSelector::PseudoElementCue
 #endif
             || pseudoElementType() == CSSSelector::PseudoElementWebKitCustomLegacyPrefixed);
 }
 
+inline bool CSSParserSelector::isPseudoElementCueFunction() const
+{
+#if ENABLE(VIDEO_TRACK)
+    return m_selector->match() == CSSSelector::PseudoElement && m_selector->pseudoElementType() == CSSSelector::PseudoElementCue;
+#else
+    return false;
+#endif
+}
+
 }
