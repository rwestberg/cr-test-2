diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/assembler/LinkBuffer.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/assembler/LinkBuffer.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/assembler/LinkBuffer.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/assembler/LinkBuffer.cpp
@@ -226,17 +226,16 @@
     }
 #endif
 
     recordLinkOffsets(m_assemblerStorage, readPtr, initialSize, readPtr - writePtr);
 
-    for (unsigned i = 0; i < jumpCount; ++i) {
 #if CPU(ARM64E) && ENABLE(FAST_JIT_PERMISSIONS)
-        auto memcpyFunction = memcpy;
+    auto memcpyFunction = tagCFunctionPtr<CopyFunctionPtrTag>(memcpy);
 #else
-        auto memcpyFunction = performJITMemcpy;
+    auto memcpyFunction = tagCFunctionPtr<CopyFunctionPtrTag>(performJITMemcpy);
 #endif
-
+    for (unsigned i = 0; i < jumpCount; ++i) {
         uint8_t* location = codeOutData + jumpsToLink[i].from();
         uint8_t* target = codeOutData + jumpsToLink[i].to() - executableOffsetFor(jumpsToLink[i].to());
         MacroAssembler::link(jumpsToLink[i], outData + jumpsToLink[i].from(), location, target, memcpyFunction);
     }
 
@@ -258,10 +257,12 @@
 #if !CPU(ARM64E) || !ENABLE(FAST_JIT_PERMISSIONS)
     ASSERT(codeOutData != outData);
     performJITMemcpy(codeOutData, outData, m_size);
 #else
     ASSERT(codeOutData == outData);
+    if (UNLIKELY(Options::dumpJITMemoryPath()))
+        dumpJITMemory(outData, outData, m_size);
 #endif
 
     jumpsToLink.clear();
 
 #if DUMP_LINK_STATISTICS
