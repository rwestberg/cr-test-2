diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CallVariant.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CallVariant.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CallVariant.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CallVariant.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2014-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2014-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -59,10 +59,11 @@
 // This class serves as a kind of union over these four things. It does so by just holding a
 // JSCell*. We determine which of the modes its in by doing type checks on the cell. Note that we
 // cannot use WriteBarrier<> here because this gets used inside the compiler.
 
 class CallVariant {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     explicit CallVariant(JSCell* callee = nullptr)
         : m_callee(callee)
     {
     }
@@ -84,25 +85,25 @@
 
     JSCell* rawCalleeCell() const { return m_callee; }
 
     InternalFunction* internalFunction() const
     {
-        return jsDynamicCast<InternalFunction*>(*m_callee->vm(), m_callee);
+        return jsDynamicCast<InternalFunction*>(m_callee->vm(), m_callee);
     }
 
     JSFunction* function() const
     {
-        return jsDynamicCast<JSFunction*>(*m_callee->vm(), m_callee);
+        return jsDynamicCast<JSFunction*>(m_callee->vm(), m_callee);
     }
 
-    bool isClosureCall() const { return !!jsDynamicCast<ExecutableBase*>(*m_callee->vm(), m_callee); }
+    bool isClosureCall() const { return !!jsDynamicCast<ExecutableBase*>(m_callee->vm(), m_callee); }
 
     ExecutableBase* executable() const
     {
         if (JSFunction* function = this->function())
             return function->executable();
-        return jsDynamicCast<ExecutableBase*>(*m_callee->vm(), m_callee);
+        return jsDynamicCast<ExecutableBase*>(m_callee->vm(), m_callee);
     }
 
     JSCell* nonExecutableCallee() const
     {
         RELEASE_ASSERT(!isClosureCall());
@@ -117,29 +118,29 @@
     }
 
     FunctionExecutable* functionExecutable() const
     {
         if (ExecutableBase* executable = this->executable())
-            return jsDynamicCast<FunctionExecutable*>(*m_callee->vm(), executable);
+            return jsDynamicCast<FunctionExecutable*>(m_callee->vm(), executable);
         return nullptr;
     }
 
     NativeExecutable* nativeExecutable() const
     {
         if (ExecutableBase* executable = this->executable())
-            return jsDynamicCast<NativeExecutable*>(*m_callee->vm(), executable);
+            return jsDynamicCast<NativeExecutable*>(m_callee->vm(), executable);
         return nullptr;
     }
 
     const DOMJIT::Signature* signatureFor(CodeSpecializationKind kind) const
     {
         if (NativeExecutable* nativeExecutable = this->nativeExecutable())
             return nativeExecutable->signatureFor(kind);
         return nullptr;
     }
 
-    bool finalize();
+    bool finalize(VM&);
 
     bool merge(const CallVariant&);
 
     void filter(VM&, JSValue);
 
