diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageDebuggerAgent.h b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageDebuggerAgent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageDebuggerAgent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageDebuggerAgent.h
@@ -36,63 +36,57 @@
 namespace WebCore {
 
 class Document;
 class EventListener;
 class EventTarget;
-class InspectorOverlay;
-class InspectorPageAgent;
 class Page;
 class RegisteredEventListener;
 class TimerBase;
 
 class PageDebuggerAgent final : public WebDebuggerAgent {
     WTF_MAKE_NONCOPYABLE(PageDebuggerAgent);
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    PageDebuggerAgent(PageAgentContext&, InspectorPageAgent*, InspectorOverlay*);
-    virtual ~PageDebuggerAgent() = default;
+    PageDebuggerAgent(PageAgentContext&);
+    virtual ~PageDebuggerAgent();
 
-    void didClearMainFrameWindowObject();
+    // DebuggerBackendDispatcherHandler
+    void evaluateOnCallFrame(ErrorString&, const String& callFrameId, const String& expression, const String* objectGroup, const bool* includeCommandLineAPI, const bool* doNotPauseOnExceptionsAndMuteConsole, const bool* returnByValue, const bool* generatePreview, const bool* saveResult, const bool* emulateUserGesture, RefPtr<Inspector::Protocol::Runtime::RemoteObject>& result, Optional<bool>& wasThrown, Optional<int>& savedResultIndex);
+
+    // ScriptDebugListener
+    void breakpointActionLog(JSC::ExecState&, const String&);
 
+    // InspectorInstrumentation
+    void didClearMainFrameWindowObject();
     void mainFrameStartedLoading();
     void mainFrameStoppedLoading();
     void mainFrameNavigated();
-
     void didRequestAnimationFrame(int callbackId, Document&);
     void willFireAnimationFrame(int callbackId);
     void didCancelAnimationFrame(int callbackId);
-
-    void didAddEventListener(EventTarget&, const AtomicString& eventType, EventListener&, bool capture);
-    void willRemoveEventListener(EventTarget&, const AtomicString& eventType, EventListener&, bool capture);
+    void didAddEventListener(EventTarget&, const AtomString& eventType, EventListener&, bool capture);
+    void willRemoveEventListener(EventTarget&, const AtomString& eventType, EventListener&, bool capture);
     void willHandleEvent(const RegisteredEventListener&);
-
     void didPostMessage(const TimerBase&, JSC::ExecState&);
     void didFailPostMessage(const TimerBase&);
     void willDispatchPostMessage(const TimerBase&);
     void didDispatchPostMessage(const TimerBase&);
 
-protected:
-    void enable() override;
-    void disable(bool isBeingDestroyed) override;
-
-    String sourceMapURLForScript(const Script&) override;
-
-    void didClearAsyncStackTraceData() override;
-
 private:
-    void muteConsole() override;
-    void unmuteConsole() override;
+    void enable();
+    void disable(bool isBeingDestroyed);
+
+    String sourceMapURLForScript(const Script&);
 
-    void breakpointActionLog(JSC::ExecState&, const String&) override;
+    void didClearAsyncStackTraceData();
 
-    Inspector::InjectedScript injectedScriptForEval(ErrorString&, const int* executionContextId) override;
-    void setOverlayMessage(ErrorString&, const String*) final;
+    void muteConsole();
+    void unmuteConsole();
 
-    Page& m_page;
+    Inspector::InjectedScript injectedScriptForEval(ErrorString&, const int* executionContextId);
 
-    InspectorPageAgent* m_pageAgent;
-    InspectorOverlay* m_overlay { nullptr };
+    Page& m_inspectedPage;
 
     HashMap<const RegisteredEventListener*, int> m_registeredEventListeners;
     HashMap<const TimerBase*, int> m_postMessageTimers;
     int m_nextEventListenerIdentifier { 1 };
     int m_nextPostMessageIdentifier { 1 };
