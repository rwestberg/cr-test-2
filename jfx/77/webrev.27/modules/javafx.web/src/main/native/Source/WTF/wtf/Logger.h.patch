diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/Logger.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/Logger.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/Logger.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/Logger.h
@@ -23,10 +23,12 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include <wtf/Lock.h>
+#include <wtf/ThreadSafeRefCounted.h>
 #include <wtf/text/StringBuilder.h>
 
 namespace WTF {
 
 template<typename T>
@@ -34,13 +36,16 @@
     template<typename U = T> static typename std::enable_if<std::is_same<U, bool>::value, String>::type toString(bool argument) { return argument ? "true"_s : "false"_s; }
     template<typename U = T> static typename std::enable_if<std::is_same<U, int>::value, String>::type toString(int argument) { return String::number(argument); }
     template<typename U = T> static typename std::enable_if<std::is_same<U, unsigned>::value, String>::type toString(unsigned argument) { return String::number(argument); }
     template<typename U = T> static typename std::enable_if<std::is_same<U, unsigned long>::value, String>::type toString(unsigned long argument) { return String::number(argument); }
     template<typename U = T> static typename std::enable_if<std::is_same<U, long>::value, String>::type toString(long argument) { return String::number(argument); }
-    template<typename U = T> static typename std::enable_if<std::is_same<U, float>::value, String>::type toString(float argument) { return String::number(argument); }
-    template<typename U = T> static typename std::enable_if<std::is_same<U, double>::value, String>::type toString(double argument) { return String::number(argument); }
-    template<typename U = T> static typename std::enable_if<std::is_same<typename std::remove_reference<U>::type, AtomicString>::value, String>::type toString(const AtomicString& argument) { return argument.string(); }
+    template<typename U = T> static typename std::enable_if<std::is_same<U, unsigned long long>::value, String>::type toString(unsigned long long argument) { return String::number(argument); }
+    template<typename U = T> static typename std::enable_if<std::is_same<U, long long>::value, String>::type toString(long long argument) { return String::number(argument); }
+    template<typename U = T> static typename std::enable_if<std::is_enum<U>::value, String>::type toString(U argument) { return String::number(static_cast<typename std::underlying_type<U>::type>(argument)); }
+    template<typename U = T> static typename std::enable_if<std::is_same<U, float>::value, String>::type toString(float argument) { return String::numberToStringFixedPrecision(argument); }
+    template<typename U = T> static typename std::enable_if<std::is_same<U, double>::value, String>::type toString(double argument) { return String::numberToStringFixedPrecision(argument); }
+    template<typename U = T> static typename std::enable_if<std::is_same<typename std::remove_reference<U>::type, AtomString>::value, String>::type toString(const AtomString& argument) { return argument.string(); }
     template<typename U = T> static typename std::enable_if<std::is_same<typename std::remove_reference<U>::type, String>::value, String>::type toString(String argument) { return argument; }
     template<typename U = T> static typename std::enable_if<std::is_same<typename std::remove_reference<U>::type, StringBuilder*>::value, String>::type toString(StringBuilder* argument) { return argument->toString(); }
     template<typename U = T> static typename std::enable_if<std::is_same<U, const char*>::value, String>::type toString(const char* argument) { return String(argument); }
     template<size_t length> static String toString(const char (&argument)[length]) { return String(argument); }
 };
@@ -100,17 +105,18 @@
     {
         return JSONLogValue { JSONLogValue::Type::String, LogArgument<T>::toString(value) };
     }
 };
 
-class Logger : public RefCounted<Logger> {
+class Logger : public ThreadSafeRefCounted<Logger> {
     WTF_MAKE_NONCOPYABLE(Logger);
 public:
 
     class Observer {
     public:
         virtual ~Observer() = default;
+        // Can be called on any thread.
         virtual void didLogMessage(const WTFLogChannel&, WTFLogLevel, Vector<JSONLogValue>&&) = 0;
     };
 
     static Ref<Logger> create(const void* owner)
     {
@@ -123,62 +129,62 @@
 #if RELEASE_LOG_DISABLED
         // "Standard" WebCore logging goes to stderr, which is captured in layout test output and can generally be a problem
         //  on some systems, so don't allow it.
         UNUSED_PARAM(channel);
 #else
-        if (!willLog(channel, WTFLogLevelAlways))
+        if (!willLog(channel, WTFLogLevel::Always))
             return;
 
-        log(channel, WTFLogLevelAlways, arguments...);
+        log(channel, WTFLogLevel::Always, arguments...);
 #endif
     }
 
     template<typename... Arguments>
     inline void error(WTFLogChannel& channel, const Arguments&... arguments) const
     {
-        if (!willLog(channel, WTFLogLevelError))
+        if (!willLog(channel, WTFLogLevel::Error))
             return;
 
-        log(channel, WTFLogLevelError, arguments...);
+        log(channel, WTFLogLevel::Error, arguments...);
     }
 
     template<typename... Arguments>
     inline void warning(WTFLogChannel& channel, const Arguments&... arguments) const
     {
-        if (!willLog(channel, WTFLogLevelWarning))
+        if (!willLog(channel, WTFLogLevel::Warning))
             return;
 
-        log(channel, WTFLogLevelWarning, arguments...);
+        log(channel, WTFLogLevel::Warning, arguments...);
     }
 
     template<typename... Arguments>
     inline void info(WTFLogChannel& channel, const Arguments&... arguments) const
     {
-        if (!willLog(channel, WTFLogLevelInfo))
+        if (!willLog(channel, WTFLogLevel::Info))
             return;
 
-        log(channel, WTFLogLevelInfo, arguments...);
+        log(channel, WTFLogLevel::Info, arguments...);
     }
 
     template<typename... Arguments>
     inline void debug(WTFLogChannel& channel, const Arguments&... arguments) const
     {
-        if (!willLog(channel, WTFLogLevelDebug))
+        if (!willLog(channel, WTFLogLevel::Debug))
             return;
 
-        log(channel, WTFLogLevelDebug, arguments...);
+        log(channel, WTFLogLevel::Debug, arguments...);
     }
 
     inline bool willLog(const WTFLogChannel& channel, WTFLogLevel level) const
     {
         if (!m_enabled)
             return false;
 
-        if (level <= WTFLogLevelError)
+        if (level <= WTFLogLevel::Error)
             return true;
 
-        if (channel.state == WTFLogChannelOff || level > channel.level)
+        if (channel.state == WTFLogChannelState::Off || level > channel.level)
             return false;
 
         return m_enabled;
     }
 
@@ -211,20 +217,24 @@
         const uintptr_t objectPtr { 0 };
     };
 
     static inline void addObserver(Observer& observer)
     {
+        auto lock = holdLock(observerLock());
         observers().append(observer);
     }
     static inline void removeObserver(Observer& observer)
     {
+        auto lock = holdLock(observerLock());
         observers().removeFirstMatching([&observer](auto anObserver) {
             return &anObserver.get() == &observer;
         });
     }
 
 private:
+    friend class AggregateLogger;
+
     Logger(const void* owner)
         : m_owner { owner }
     {
     }
 
@@ -237,11 +247,15 @@
         WTFLog(&channel, "%s", logMessage.utf8().data());
 #else
         os_log(channel.osLogChannel, "%{public}s", logMessage.utf8().data());
 #endif
 
-        if (channel.state == WTFLogChannelOff || level > channel.level)
+        if (channel.state == WTFLogChannelState::Off || level > channel.level)
+            return;
+
+        auto lock = tryHoldLock(observerLock());
+        if (!lock)
             return;
 
         for (Observer& observer : observers())
             observer.didLogMessage(channel, level, { ConsoleLogValue<Argument>::toValue(arguments)... });
     }
@@ -250,17 +264,27 @@
     {
         static NeverDestroyed<Vector<std::reference_wrapper<Observer>>> observers;
         return observers;
     }
 
-    const void* m_owner;
+    static Lock& observerLock()
+    {
+        static NeverDestroyed<Lock> observerLock;
+        return observerLock;
+    }
+
+
     bool m_enabled { true };
+    const void* m_owner;
 };
 
 template<> struct LogArgument<Logger::LogSiteIdentifier> {
     static String toString(const Logger::LogSiteIdentifier& value) { return value.toString(); }
 };
+template<> struct LogArgument<const void*> {
+    WTF_EXPORT static String toString(const void*);
+};
 
 } // namespace WTF
 
 using WTF::Logger;
 using WTF::JSONLogValue;
