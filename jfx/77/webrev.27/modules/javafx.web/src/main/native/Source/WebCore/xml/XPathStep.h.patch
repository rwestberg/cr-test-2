diff a/modules/javafx.web/src/main/native/Source/WebCore/xml/XPathStep.h b/modules/javafx.web/src/main/native/Source/WebCore/xml/XPathStep.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/xml/XPathStep.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/xml/XPathStep.h
@@ -25,11 +25,11 @@
  */
 
 #pragma once
 
 #include <wtf/Vector.h>
-#include <wtf/text/AtomicString.h>
+#include <wtf/text/AtomString.h>
 
 namespace WebCore {
 
 class Node;
 
@@ -53,22 +53,22 @@
         WTF_MAKE_FAST_ALLOCATED;
     public:
         enum Kind { TextNodeTest, CommentNodeTest, ProcessingInstructionNodeTest, AnyNodeTest, NameTest };
 
         explicit NodeTest(Kind kind) : m_kind(kind) { }
-        NodeTest(Kind kind, const AtomicString& data) : m_kind(kind), m_data(data) { }
-        NodeTest(Kind kind, const AtomicString& data, const AtomicString& namespaceURI) : m_kind(kind), m_data(data), m_namespaceURI(namespaceURI) { }
+        NodeTest(Kind kind, const AtomString& data) : m_kind(kind), m_data(data) { }
+        NodeTest(Kind kind, const AtomString& data, const AtomString& namespaceURI) : m_kind(kind), m_data(data), m_namespaceURI(namespaceURI) { }
 
     private:
         friend class Step;
         friend void optimizeStepPair(Step&, Step&, bool&);
         friend bool nodeMatchesBasicTest(Node&, Axis, const NodeTest&);
         friend bool nodeMatches(Node&, Axis, const NodeTest&);
 
         Kind m_kind;
-        AtomicString m_data;
-        AtomicString m_namespaceURI;
+        AtomString m_data;
+        AtomString m_namespaceURI;
         Vector<std::unique_ptr<Expression>> m_mergedPredicates;
     };
 
     Step(Axis, NodeTest);
     Step(Axis, NodeTest, Vector<std::unique_ptr<Expression>>);
