diff a/modules/javafx.web/src/main/native/Source/WebCore/html/track/DataCue.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/track/DataCue.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/track/DataCue.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/track/DataCue.cpp
@@ -31,15 +31,18 @@
 
 #include "Logging.h"
 #include "TextTrack.h"
 #include "TextTrackCueList.h"
 #include <JavaScriptCore/JSCInlines.h>
-#include <JavaScriptCore/Protect.h>
+#include <JavaScriptCore/StrongInlines.h>
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 using namespace JSC;
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(DataCue);
+
 DataCue::DataCue(ScriptExecutionContext& context, const MediaTime& start, const MediaTime& end, ArrayBuffer& data, const String& type)
     : TextTrackCue(context, start, end)
     , m_type(type)
 {
     setData(data);
@@ -59,20 +62,16 @@
 }
 
 DataCue::DataCue(ScriptExecutionContext& context, const MediaTime& start, const MediaTime& end, JSC::JSValue value, const String& type)
     : TextTrackCue(context, start, end)
     , m_type(type)
-    , m_value(value)
+    , m_value(context.vm(), value)
 {
-    if (m_value)
-        JSC::gcProtect(m_value);
 }
 
 DataCue::~DataCue()
 {
-    if (m_value)
-        JSC::gcUnprotect(m_value);
 }
 
 RefPtr<ArrayBuffer> DataCue::data() const
 {
     if (m_platformValue)
@@ -85,14 +84,11 @@
 }
 
 void DataCue::setData(ArrayBuffer& data)
 {
     m_platformValue = nullptr;
-    if (m_value)
-        JSC::gcUnprotect(m_value);
-    m_value = JSC::JSValue();
-
+    m_value.clear();
     m_data = ArrayBuffer::create(data);
 }
 
 DataCue* toDataCue(TextTrackCue* cue)
 {
@@ -159,32 +155,27 @@
 {
     if (m_platformValue)
         return m_platformValue->deserialize(&state);
 
     if (m_value)
-        return m_value;
+        return m_value.get();
 
     return JSC::jsNull();
 }
 
-void DataCue::setValue(JSC::ExecState&, JSC::JSValue value)
+void DataCue::setValue(JSC::ExecState& state, JSC::JSValue value)
 {
     // FIXME: this should use a SerializedScriptValue.
-    if (m_value)
-        JSC::gcUnprotect(m_value);
-    m_value = value;
-    if (m_value)
-        JSC::gcProtect(m_value);
-
+    m_value.set(state.vm(), value);
     m_platformValue = nullptr;
     m_data = nullptr;
 }
 
 JSValue DataCue::valueOrNull() const
 {
     if (m_value)
-        return m_value;
+        return m_value.get();
 
     return jsNull();
 }
 
 String DataCue::toJSONString() const
