diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGPreciseLocalClobberize.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGPreciseLocalClobberize.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGPreciseLocalClobberize.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGPreciseLocalClobberize.h
@@ -128,11 +128,11 @@
             ASSERT(spread->child1()->op() == PhantomCreateRest || spread->child1()->op() == PhantomNewArrayBuffer);
             if (spread->child1()->op() == PhantomNewArrayBuffer) {
                 // This reads from a constant buffer.
                 return;
             }
-            InlineCallFrame* inlineCallFrame = spread->child1()->origin.semantic.inlineCallFrame;
+            InlineCallFrame* inlineCallFrame = spread->child1()->origin.semantic.inlineCallFrame();
             unsigned numberOfArgumentsToSkip = spread->child1()->numberOfArgumentsToSkip();
             readFrame(inlineCallFrame, numberOfArgumentsToSkip);
         };
 
         auto readNewArrayWithSpreadNode = [&] (Node* arrayWithSpread) {
@@ -190,13 +190,13 @@
                 else
                     readSpread(m_node->argumentsChild().node());
             } else {
                 InlineCallFrame* inlineCallFrame;
                 if (m_node->hasArgumentsChild() && m_node->argumentsChild())
-                    inlineCallFrame = m_node->argumentsChild()->origin.semantic.inlineCallFrame;
+                    inlineCallFrame = m_node->argumentsChild()->origin.semantic.inlineCallFrame();
                 else
-                    inlineCallFrame = m_node->origin.semantic.inlineCallFrame;
+                    inlineCallFrame = m_node->origin.semantic.inlineCallFrame();
 
                 unsigned numberOfArgumentsToSkip = 0;
                 if (m_node->op() == GetMyArgumentByVal || m_node->op() == GetMyArgumentByValOutOfBounds) {
                     // The value of numberOfArgumentsToSkip guarantees that GetMyArgumentByVal* will never
                     // read any arguments below the number of arguments to skip. For example, if numberOfArgumentsToSkip is 2,
@@ -218,11 +218,11 @@
             readNewArrayWithSpreadNode(m_node);
             break;
         }
 
         case GetArgument: {
-            InlineCallFrame* inlineCallFrame = m_node->origin.semantic.inlineCallFrame;
+            InlineCallFrame* inlineCallFrame = m_node->origin.semantic.inlineCallFrame();
             unsigned indexIncludingThis = m_node->argumentIndex();
             if (!inlineCallFrame) {
                 if (indexIncludingThis < static_cast<unsigned>(m_graph.m_codeBlock->numParameters()))
                     m_read(virtualRegisterForArgument(indexIncludingThis));
                 m_read(VirtualRegister(CallFrameSlot::argumentCount));
@@ -246,11 +246,11 @@
             // The stack header is read.
             for (unsigned i = 0; i < CallFrameSlot::thisArgument; ++i)
                 m_read(VirtualRegister(i));
 
             // Read all of the inline arguments and call frame headers that we didn't already capture.
-            for (InlineCallFrame* inlineCallFrame = m_node->origin.semantic.inlineCallFrame; inlineCallFrame; inlineCallFrame = inlineCallFrame->getCallerInlineFrameSkippingTailCalls()) {
+            for (InlineCallFrame* inlineCallFrame = m_node->origin.semantic.inlineCallFrame(); inlineCallFrame; inlineCallFrame = inlineCallFrame->getCallerInlineFrameSkippingTailCalls()) {
                 if (!inlineCallFrame->isStrictMode()) {
                     for (unsigned i = inlineCallFrame->argumentsWithFixup.size(); i--;)
                         m_read(VirtualRegister(inlineCallFrame->stackOffset + virtualRegisterForArgument(i).offset()));
                 }
                 if (inlineCallFrame->isClosureCall)
