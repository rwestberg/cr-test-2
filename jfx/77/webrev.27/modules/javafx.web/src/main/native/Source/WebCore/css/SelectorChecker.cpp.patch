diff a/modules/javafx.web/src/main/native/Source/WebCore/css/SelectorChecker.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/SelectorChecker.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/SelectorChecker.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/SelectorChecker.cpp
@@ -449,13 +449,13 @@
 
     ASSERT_NOT_REACHED();
     return MatchResult::fails(Match::SelectorFailsCompletely);
 }
 
-static bool attributeValueMatches(const Attribute& attribute, CSSSelector::Match match, const AtomicString& selectorValue, bool caseSensitive)
+static bool attributeValueMatches(const Attribute& attribute, CSSSelector::Match match, const AtomString& selectorValue, bool caseSensitive)
 {
-    const AtomicString& value = attribute.value();
+    const AtomString& value = attribute.value();
     ASSERT(!value.isNull());
 
     switch (match) {
     case CSSSelector::Set:
         break;
@@ -557,11 +557,11 @@
     }
 
     return false;
 }
 
-bool SelectorChecker::attributeSelectorMatches(const Element& element, const QualifiedName& attributeName, const AtomicString& attributeValue, const CSSSelector& selector)
+bool SelectorChecker::attributeSelectorMatches(const Element& element, const QualifiedName& attributeName, const AtomString& attributeValue, const CSSSelector& selector)
 {
     ASSERT(selector.isAttributeSelector());
     auto& selectorAttribute = selector.attribute();
     auto& selectorName = element.isHTMLElement() ? selector.attributeCanonicalLocalName() : selectorAttribute.localName();
     if (!Attribute::nameMatchesFilter(attributeName, selectorAttribute.prefix(), selectorName, selectorAttribute.namespaceURI()))
@@ -634,15 +634,15 @@
     const QualifiedName& tagQName = simpleSelector.tagQName();
 
     if (tagQName == anyQName())
         return true;
 
-    const AtomicString& localName = (element.isHTMLElement() && element.document().isHTMLDocument()) ? simpleSelector.tagLowercaseLocalName() : tagQName.localName();
+    const AtomString& localName = (element.isHTMLElement() && element.document().isHTMLDocument()) ? simpleSelector.tagLowercaseLocalName() : tagQName.localName();
 
     if (localName != starAtom() && localName != element.localName())
         return false;
-    const AtomicString& namespaceURI = tagQName.namespaceURI();
+    const AtomString& namespaceURI = tagQName.namespaceURI();
     return namespaceURI == starAtom() || namespaceURI == element.namespaceURI();
 }
 
 bool SelectorChecker::checkOne(CheckingContext& checkingContext, const LocalContext& context, PseudoIdSet& dynamicPseudoIdSet, MatchType& matchType, unsigned& specificity) const
 {
@@ -969,10 +969,12 @@
             break;
         case CSSSelector::PseudoClassAutofill:
             return isAutofilled(element);
         case CSSSelector::PseudoClassAutofillStrongPassword:
             return isAutofilledStrongPassword(element);
+        case CSSSelector::PseudoClassAutofillStrongPasswordViewable:
+            return isAutofilledStrongPasswordViewable(element);
         case CSSSelector::PseudoClassAnyLink:
         case CSSSelector::PseudoClassAnyLinkDeprecated:
         case CSSSelector::PseudoClassLink:
             // :visited and :link matches are separated later when applying the style. Here both classes match all links...
             return element.isLink();
