diff a/modules/javafx.web/src/main/native/Source/WebCore/html/Autocapitalize.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/Autocapitalize.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/Autocapitalize.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/Autocapitalize.cpp
@@ -28,11 +28,11 @@
 
 #include <wtf/NeverDestroyed.h>
 
 namespace WebCore {
 
-AutocapitalizeType autocapitalizeTypeForAttributeValue(const AtomicString& attributeValue)
+AutocapitalizeType autocapitalizeTypeForAttributeValue(const AtomString& attributeValue)
 {
     // Omitted / missing values are the Default state.
     if (attributeValue.isEmpty())
         return AutocapitalizeTypeDefault;
 
@@ -47,29 +47,29 @@
 
     // Unrecognized values fall back to "on".
     return AutocapitalizeTypeSentences;
 }
 
-const AtomicString& stringForAutocapitalizeType(AutocapitalizeType type)
+const AtomString& stringForAutocapitalizeType(AutocapitalizeType type)
 {
     switch (type) {
     case AutocapitalizeTypeDefault:
         return nullAtom();
     case AutocapitalizeTypeNone: {
-        static NeverDestroyed<const AtomicString> valueNone("none", AtomicString::ConstructFromLiteral);
+        static NeverDestroyed<const AtomString> valueNone("none", AtomString::ConstructFromLiteral);
         return valueNone;
     }
     case AutocapitalizeTypeSentences: {
-        static NeverDestroyed<const AtomicString> valueSentences("sentences", AtomicString::ConstructFromLiteral);
+        static NeverDestroyed<const AtomString> valueSentences("sentences", AtomString::ConstructFromLiteral);
         return valueSentences;
     }
     case AutocapitalizeTypeWords: {
-        static NeverDestroyed<const AtomicString> valueWords("words", AtomicString::ConstructFromLiteral);
+        static NeverDestroyed<const AtomString> valueWords("words", AtomString::ConstructFromLiteral);
         return valueWords;
     }
     case AutocapitalizeTypeAllCharacters: {
-        static NeverDestroyed<const AtomicString> valueAllCharacters("characters", AtomicString::ConstructFromLiteral);
+        static NeverDestroyed<const AtomString> valueAllCharacters("characters", AtomString::ConstructFromLiteral);
         return valueAllCharacters;
     }
     }
 
     ASSERT_NOT_REACHED();
