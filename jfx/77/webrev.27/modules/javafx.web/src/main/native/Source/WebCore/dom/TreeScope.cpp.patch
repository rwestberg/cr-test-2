diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/TreeScope.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/TreeScope.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/TreeScope.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/TreeScope.cpp
@@ -62,20 +62,20 @@
 
 TreeScope::TreeScope(ShadowRoot& shadowRoot, Document& document)
     : m_rootNode(shadowRoot)
     , m_documentScope(document)
     , m_parentTreeScope(&document)
-    , m_idTargetObserverRegistry(std::make_unique<IdTargetObserverRegistry>())
+    , m_idTargetObserverRegistry(makeUnique<IdTargetObserverRegistry>())
 {
     shadowRoot.setTreeScope(*this);
 }
 
 TreeScope::TreeScope(Document& document)
     : m_rootNode(document)
     , m_documentScope(document)
     , m_parentTreeScope(nullptr)
-    , m_idTargetObserverRegistry(std::make_unique<IdTargetObserverRegistry>())
+    , m_idTargetObserverRegistry(makeUnique<IdTargetObserverRegistry>())
 {
     document.setTreeScope(*this);
 }
 
 TreeScope::~TreeScope() = default;
@@ -96,11 +96,11 @@
 
     m_parentTreeScope = &newParentScope;
     setDocumentScope(newParentScope.documentScope());
 }
 
-Element* TreeScope::getElementById(const AtomicString& elementId) const
+Element* TreeScope::getElementById(const AtomString& elementId) const
 {
     if (elementId.isNull())
         return nullptr;
     if (!m_elementsById)
         return nullptr;
@@ -110,71 +110,71 @@
 Element* TreeScope::getElementById(const String& elementId) const
 {
     if (!m_elementsById)
         return nullptr;
 
-    if (RefPtr<AtomicStringImpl> atomicElementId = AtomicStringImpl::lookUp(elementId.impl()))
+    if (RefPtr<AtomStringImpl> atomicElementId = AtomStringImpl::lookUp(elementId.impl()))
         return m_elementsById->getElementById(*atomicElementId, *this);
 
     return nullptr;
 }
 
 Element* TreeScope::getElementById(StringView elementId) const
 {
     if (!m_elementsById)
         return nullptr;
 
-    if (auto atomicElementId = elementId.toExistingAtomicString())
+    if (auto atomicElementId = elementId.toExistingAtomString())
         return m_elementsById->getElementById(*atomicElementId, *this);
 
     return nullptr;
 }
 
-const Vector<Element*>* TreeScope::getAllElementsById(const AtomicString& elementId) const
+const Vector<Element*>* TreeScope::getAllElementsById(const AtomString& elementId) const
 {
     if (elementId.isEmpty())
         return nullptr;
     if (!m_elementsById)
         return nullptr;
     return m_elementsById->getAllElementsById(*elementId.impl(), *this);
 }
 
-void TreeScope::addElementById(const AtomicStringImpl& elementId, Element& element, bool notifyObservers)
+void TreeScope::addElementById(const AtomStringImpl& elementId, Element& element, bool notifyObservers)
 {
     if (!m_elementsById)
-        m_elementsById = std::make_unique<TreeScopeOrderedMap>();
+        m_elementsById = makeUnique<TreeScopeOrderedMap>();
     m_elementsById->add(elementId, element, *this);
     if (notifyObservers)
         m_idTargetObserverRegistry->notifyObservers(elementId);
 }
 
-void TreeScope::removeElementById(const AtomicStringImpl& elementId, Element& element, bool notifyObservers)
+void TreeScope::removeElementById(const AtomStringImpl& elementId, Element& element, bool notifyObservers)
 {
     if (!m_elementsById)
         return;
     m_elementsById->remove(elementId, element);
     if (notifyObservers)
         m_idTargetObserverRegistry->notifyObservers(elementId);
 }
 
-Element* TreeScope::getElementByName(const AtomicString& name) const
+Element* TreeScope::getElementByName(const AtomString& name) const
 {
     if (name.isEmpty())
         return nullptr;
     if (!m_elementsByName)
         return nullptr;
     return m_elementsByName->getElementByName(*name.impl(), *this);
 }
 
-void TreeScope::addElementByName(const AtomicStringImpl& name, Element& element)
+void TreeScope::addElementByName(const AtomStringImpl& name, Element& element)
 {
     if (!m_elementsByName)
-        m_elementsByName = std::make_unique<TreeScopeOrderedMap>();
+        m_elementsByName = makeUnique<TreeScopeOrderedMap>();
     m_elementsByName->add(name, element, *this);
 }
 
-void TreeScope::removeElementByName(const AtomicStringImpl& name, Element& element)
+void TreeScope::removeElementByName(const AtomStringImpl& name, Element& element)
 {
     if (!m_elementsByName)
         return;
     m_elementsByName->remove(name, element);
 }
@@ -233,79 +233,79 @@
     return nullptr;
 }
 
 void TreeScope::addImageMap(HTMLMapElement& imageMap)
 {
-    AtomicStringImpl* name = imageMap.getName().impl();
+    AtomStringImpl* name = imageMap.getName().impl();
     if (!name)
         return;
     if (!m_imageMapsByName)
-        m_imageMapsByName = std::make_unique<TreeScopeOrderedMap>();
+        m_imageMapsByName = makeUnique<TreeScopeOrderedMap>();
     m_imageMapsByName->add(*name, imageMap, *this);
 }
 
 void TreeScope::removeImageMap(HTMLMapElement& imageMap)
 {
     if (!m_imageMapsByName)
         return;
-    AtomicStringImpl* name = imageMap.getName().impl();
+    AtomStringImpl* name = imageMap.getName().impl();
     if (!name)
         return;
     m_imageMapsByName->remove(*name, imageMap);
 }
 
-HTMLMapElement* TreeScope::getImageMap(const AtomicString& name) const
+HTMLMapElement* TreeScope::getImageMap(const AtomString& name) const
 {
     if (!m_imageMapsByName || !name.impl())
         return nullptr;
     return m_imageMapsByName->getElementByMapName(*name.impl(), *this);
 }
 
-void TreeScope::addImageElementByUsemap(const AtomicStringImpl& name, HTMLImageElement& element)
+void TreeScope::addImageElementByUsemap(const AtomStringImpl& name, HTMLImageElement& element)
 {
     if (!m_imagesByUsemap)
-        m_imagesByUsemap = std::make_unique<TreeScopeOrderedMap>();
+        m_imagesByUsemap = makeUnique<TreeScopeOrderedMap>();
     return m_imagesByUsemap->add(name, element, *this);
 }
 
-void TreeScope::removeImageElementByUsemap(const AtomicStringImpl& name, HTMLImageElement& element)
+void TreeScope::removeImageElementByUsemap(const AtomStringImpl& name, HTMLImageElement& element)
 {
     if (!m_imagesByUsemap)
         return;
     m_imagesByUsemap->remove(name, element);
 }
 
-HTMLImageElement* TreeScope::imageElementByUsemap(const AtomicStringImpl& name) const
+HTMLImageElement* TreeScope::imageElementByUsemap(const AtomStringImpl& name) const
 {
     if (!m_imagesByUsemap)
         return nullptr;
     return m_imagesByUsemap->getElementByUsemap(name, *this);
 }
 
-void TreeScope::addLabel(const AtomicStringImpl& forAttributeValue, HTMLLabelElement& element)
+void TreeScope::addLabel(const AtomStringImpl& forAttributeValue, HTMLLabelElement& element)
 {
     ASSERT(m_labelsByForAttribute);
     m_labelsByForAttribute->add(forAttributeValue, element, *this);
 }
 
-void TreeScope::removeLabel(const AtomicStringImpl& forAttributeValue, HTMLLabelElement& element)
+void TreeScope::removeLabel(const AtomStringImpl& forAttributeValue, HTMLLabelElement& element)
 {
     ASSERT(m_labelsByForAttribute);
     m_labelsByForAttribute->remove(forAttributeValue, element);
 }
 
-HTMLLabelElement* TreeScope::labelElementForId(const AtomicString& forAttributeValue)
+HTMLLabelElement* TreeScope::labelElementForId(const AtomString& forAttributeValue)
 {
     if (forAttributeValue.isEmpty())
         return nullptr;
 
     if (!m_labelsByForAttribute) {
         // Populate the map on first access.
-        m_labelsByForAttribute = std::make_unique<TreeScopeOrderedMap>();
+        m_labelsByForAttribute = makeUnique<TreeScopeOrderedMap>();
 
         for (auto& label : descendantsOfType<HTMLLabelElement>(m_rootNode)) {
-            const AtomicString& forValue = label.attributeWithoutSynchronization(forAttr);
+            const AtomString& forValue = label.attributeWithoutSynchronization(forAttr);
             if (!forValue.isEmpty())
                 addLabel(*forValue.impl(), label);
         }
     }
 
@@ -437,10 +437,15 @@
     }
 
     return elements;
 }
 
+Vector<RefPtr<Element>> TreeScope::elementsFromPoint(const FloatPoint& p)
+{
+    return elementsFromPoint(p.x(), p.y());
+}
+
 Element* TreeScope::findAnchor(const String& name)
 {
     if (name.isEmpty())
         return nullptr;
     if (Element* element = getElementById(name))
