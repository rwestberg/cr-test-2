diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLReadModifyWriteExpression.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLReadModifyWriteExpression.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLReadModifyWriteExpression.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLReadModifyWriteExpression.h
@@ -26,39 +26,44 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "WHLSLExpression.h"
-#include "WHLSLLexer.h"
 #include "WHLSLVariableDeclaration.h"
 #include "WHLSLVariableReference.h"
 #include <memory>
+#include <wtf/FastMalloc.h>
 #include <wtf/UniqueRef.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
 /*
- *  1. Evaluate m_lValue
+ *  1. Evaluate m_leftValue
  *  2. Assign the result to m_oldValue
  *  3. Evaluate m_newValueExpression
  *  4. Assign the result to m_newValue
- *  5. Assign the result to m_lValue
+ *  5. Assign the result to m_leftValue
  *  6. Evaluate m_resultExpression
  *  7. Return the result
  */
-class ReadModifyWriteExpression : public Expression {
+class ReadModifyWriteExpression final : public Expression {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    static UniqueRef<ReadModifyWriteExpression> create(Lexer::Token&& origin, UniqueRef<Expression> lValue)
+    ReadModifyWriteExpression(CodeLocation location, UniqueRef<Expression> leftValue)
+        : Expression(location, Kind::ReadModifyWrite)
+        , m_leftValue(WTFMove(leftValue))
+        , m_oldValue(makeUniqueRef<VariableDeclaration>(location, Qualifiers(), nullptr, String(), nullptr, nullptr))
+        , m_newValue(makeUniqueRef<VariableDeclaration>(location, Qualifiers(), nullptr, String(), nullptr, nullptr))
     {
-        return makeUniqueRef<ReadModifyWriteExpression>(WTFMove(origin), WTFMove(lValue));
     }
 
-    virtual ~ReadModifyWriteExpression() = default;
+
+    ~ReadModifyWriteExpression() = default;
 
     ReadModifyWriteExpression(const ReadModifyWriteExpression&) = delete;
     ReadModifyWriteExpression(ReadModifyWriteExpression&&) = default;
 
     void setNewValueExpression(UniqueRef<Expression>&& newValueExpression)
@@ -71,50 +76,61 @@
         m_resultExpression = WTFMove(resultExpression);
     }
 
     UniqueRef<VariableReference> oldVariableReference()
     {
-        // The only reason we don't get use-after-frees is the fact that every instance of ReadModifyWriteExpression is allocated on the heap.
         return makeUniqueRef<VariableReference>(VariableReference::wrap(m_oldValue));
     }
 
     UniqueRef<VariableReference> newVariableReference()
     {
-        // The only reason we don't get use-after-frees is the fact that every instance of ReadModifyWriteExpression is allocated on the heap.
         return makeUniqueRef<VariableReference>(VariableReference::wrap(m_newValue));
     }
 
-    bool isReadModifyWriteExpression() const override { return true; }
-
-    Expression& lValue() { return m_lValue; }
+    Expression& leftValue() { return m_leftValue; }
     VariableDeclaration& oldValue() { return m_oldValue; }
     VariableDeclaration& newValue() { return m_newValue; }
-    Expression* newValueExpression() { return m_newValueExpression ? &*m_newValueExpression : nullptr; }
-    Expression* resultExpression() { return m_resultExpression ? &*m_resultExpression : nullptr; }
-
-private:
-    template<class U, class... Args> friend UniqueRef<U> WTF::makeUniqueRef(Args&&...);
-
-    ReadModifyWriteExpression(Lexer::Token&& origin, UniqueRef<Expression> lValue)
-        : Expression(Lexer::Token(origin))
-        , m_lValue(WTFMove(lValue))
-        , m_oldValue(Lexer::Token(origin), Qualifiers(), WTF::nullopt, String(), WTF::nullopt, WTF::nullopt)
-        , m_newValue(WTFMove(origin), Qualifiers(), WTF::nullopt, String(), WTF::nullopt, WTF::nullopt)
+    Expression& newValueExpression()
+    {
+        ASSERT(m_newValueExpression);
+        return *m_newValueExpression;
+    }
+    Expression& resultExpression()
     {
+        ASSERT(m_resultExpression);
+        return *m_resultExpression;
+    }
+    UniqueRef<Expression> takeLeftValue() { return WTFMove(m_leftValue); }
+    UniqueRef<VariableDeclaration> takeOldValue() { return WTFMove(m_oldValue); }
+    UniqueRef<VariableDeclaration> takeNewValue() { return WTFMove(m_newValue); }
+    UniqueRef<Expression> takeNewValueExpression()
+    {
+        auto result = WTFMove(m_newValueExpression.value());
+        m_newValueExpression.reset();
+        return result;
+    }
+    UniqueRef<Expression> takeResultExpression()
+    {
+        auto result = WTFMove(m_resultExpression.value());
+        m_resultExpression.reset();
+        return result;
     }
 
-    UniqueRef<Expression> m_lValue;
-    VariableDeclaration m_oldValue;
-    VariableDeclaration m_newValue;
+private:
+    UniqueRef<Expression> m_leftValue;
+    UniqueRef<VariableDeclaration> m_oldValue;
+    UniqueRef<VariableDeclaration> m_newValue;
     Optional<UniqueRef<Expression>> m_newValueExpression;
     Optional<UniqueRef<Expression>> m_resultExpression;
 };
 
 } // namespace AST
 
 }
 
 }
 
+DEFINE_DEFAULT_DELETE(ReadModifyWriteExpression)
+
 SPECIALIZE_TYPE_TRAITS_WHLSL_EXPRESSION(ReadModifyWriteExpression, isReadModifyWriteExpression())
 
 #endif
