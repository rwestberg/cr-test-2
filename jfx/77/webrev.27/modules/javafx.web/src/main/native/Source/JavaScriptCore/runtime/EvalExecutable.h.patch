diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/EvalExecutable.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/EvalExecutable.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/EvalExecutable.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/EvalExecutable.h
@@ -24,19 +24,19 @@
  */
 
 #pragma once
 
 #include "ExecutableToCodeBlockEdge.h"
-#include "ScriptExecutable.h"
+#include "GlobalExecutable.h"
 #include "UnlinkedEvalCodeBlock.h"
 
 namespace JSC {
 
-class EvalExecutable : public ScriptExecutable {
+class EvalExecutable : public GlobalExecutable {
     friend class LLIntOffsetsExtractor;
 public:
-    typedef ScriptExecutable Base;
+    using Base = GlobalExecutable;
     static const unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
 
     static void destroy(JSCell*);
 
     EvalCodeBlock* codeBlock()
@@ -67,10 +67,12 @@
     unsigned numVariables() { return m_unlinkedEvalCodeBlock->numVariables(); }
     unsigned numFunctionHoistingCandidates() { return m_unlinkedEvalCodeBlock->numFunctionHoistingCandidates(); }
     unsigned numTopLevelFunctionDecls() { return m_unlinkedEvalCodeBlock->numberOfFunctionDecls(); }
     bool allowDirectEvalCache() const { return m_unlinkedEvalCodeBlock->allowDirectEvalCache(); }
 
+    TemplateObjectMap& ensureTemplateObjectMap(VM&);
+
 protected:
     friend class ExecutableBase;
     friend class ScriptExecutable;
 
     using Base::finishCreation;
@@ -78,8 +80,9 @@
 
     static void visitChildren(JSCell*, SlotVisitor&);
 
     WriteBarrier<ExecutableToCodeBlockEdge> m_evalCodeBlock;
     WriteBarrier<UnlinkedEvalCodeBlock> m_unlinkedEvalCodeBlock;
+    std::unique_ptr<TemplateObjectMap> m_templateObjectMap;
 };
 
 } // namespace JSC
