diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ThrowScope.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ThrowScope.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ThrowScope.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ThrowScope.h
@@ -45,13 +45,13 @@
     JS_EXPORT_PRIVATE ~ThrowScope();
 
     ThrowScope(const ThrowScope&) = delete;
     ThrowScope(ThrowScope&&) = default;
 
-    JS_EXPORT_PRIVATE void throwException(ExecState*, Exception*);
-    JS_EXPORT_PRIVATE JSValue throwException(ExecState*, JSValue);
-    JS_EXPORT_PRIVATE JSObject* throwException(ExecState*, JSObject*);
+    JS_EXPORT_PRIVATE Exception* throwException(ExecState*, Exception*);
+    JS_EXPORT_PRIVATE Exception* throwException(ExecState*, JSValue);
+    JS_EXPORT_PRIVATE Exception* throwException(ExecState*, JSObject*);
 
     void release() { m_isReleased = true; }
 
     JS_EXPORT_PRIVATE void printIfNeedCheck(const char* functionName, const char* file, unsigned line);
 
@@ -60,11 +60,11 @@
 
     bool m_isReleased { false };
 };
 
 #define DECLARE_THROW_SCOPE(vm__) \
-    JSC::ThrowScope((vm__), JSC::ExceptionEventLocation(EXCEPTION_SCOPE_POSITION_FOR_ASAN, __FUNCTION__, __FILE__, __LINE__))
+    JSC::ThrowScope((vm__), JSC::ExceptionEventLocation(EXCEPTION_SCOPE_POSITION_FOR_ASAN(vm__), __FUNCTION__, __FILE__, __LINE__))
 
 #define throwScopePrintIfNeedCheck(scope__) \
     scope__.printIfNeedCheck(__FUNCTION__, __FILE__, __LINE__)
 
 #else // not ENABLE(EXCEPTION_SCOPE_VERIFICATION)
@@ -75,33 +75,33 @@
         : ExceptionScope(vm)
     { }
     ThrowScope(const ThrowScope&) = delete;
     ThrowScope(ThrowScope&&) = default;
 
-    ALWAYS_INLINE void throwException(ExecState* exec, Exception* exception) { m_vm.throwException(exec, exception); }
-    ALWAYS_INLINE JSValue throwException(ExecState* exec, JSValue value) { return m_vm.throwException(exec, value); }
-    ALWAYS_INLINE JSObject* throwException(ExecState* exec, JSObject* obj) { return m_vm.throwException(exec, obj); }
+    ALWAYS_INLINE Exception* throwException(ExecState* exec, Exception* exception) { return m_vm.throwException(exec, exception); }
+    ALWAYS_INLINE Exception* throwException(ExecState* exec, JSValue value) { return m_vm.throwException(exec, value); }
+    ALWAYS_INLINE Exception* throwException(ExecState* exec, JSObject* obj) { return m_vm.throwException(exec, obj); }
 
     ALWAYS_INLINE void release() { }
 };
 
 #define DECLARE_THROW_SCOPE(vm__) \
     JSC::ThrowScope((vm__))
 
 #endif // ENABLE(EXCEPTION_SCOPE_VERIFICATION)
 
-ALWAYS_INLINE void throwException(ExecState* exec, ThrowScope& scope, Exception* exception)
+ALWAYS_INLINE Exception* throwException(ExecState* exec, ThrowScope& scope, Exception* exception)
 {
-    scope.throwException(exec, exception);
+    return scope.throwException(exec, exception);
 }
 
-ALWAYS_INLINE JSValue throwException(ExecState* exec, ThrowScope& scope, JSValue value)
+ALWAYS_INLINE Exception* throwException(ExecState* exec, ThrowScope& scope, JSValue value)
 {
     return scope.throwException(exec, value);
 }
 
-ALWAYS_INLINE JSObject* throwException(ExecState* exec, ThrowScope& scope, JSObject* obj)
+ALWAYS_INLINE Exception* throwException(ExecState* exec, ThrowScope& scope, JSObject* obj)
 {
     return scope.throwException(exec, obj);
 }
 
 } // namespace JSC
