diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ScriptModuleLoader.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ScriptModuleLoader.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ScriptModuleLoader.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ScriptModuleLoader.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2015-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -121,11 +121,11 @@
     if (!result) {
         JSC::throwTypeError(exec, scope, result.error());
         return { };
     }
 
-    return JSC::Identifier::fromString(&vm, result->string());
+    return JSC::Identifier::fromString(vm, result->string());
 }
 
 static void rejectToPropagateNetworkError(DeferredPromise& deferred, ModuleFetchFailureKind failureKind, ASCIILiteral message)
 {
     deferred.rejectWithCallback([&] (JSC::ExecState& state, JSDOMGlobalObject&) {
@@ -256,11 +256,11 @@
     auto specifier = moduleName->value(exec);
     auto result = resolveModuleSpecifier(m_document, specifier, baseURL);
     if (!result)
         return rejectPromise(state, globalObject, TypeError, result.error());
 
-    return JSC::importModule(exec, JSC::Identifier::fromString(&vm, result->string()), parameters, JSC::JSScriptFetcher::create(vm, WTFMove(scriptFetcher) ));
+    return JSC::importModule(exec, JSC::Identifier::fromString(vm, result->string()), parameters, JSC::JSScriptFetcher::create(vm, WTFMove(scriptFetcher) ));
 }
 
 JSC::JSObject* ScriptModuleLoader::createImportMetaProperties(JSC::JSGlobalObject* globalObject, JSC::ExecState* exec, JSC::JSModuleLoader*, JSC::JSValue moduleKeyValue, JSC::JSModuleRecord*, JSC::JSValue)
 {
     auto& vm = exec->vm();
@@ -270,11 +270,11 @@
     ASSERT(sourceURL.isValid());
 
     auto* metaProperties = JSC::constructEmptyObject(exec, globalObject->nullPrototypeObjectStructure());
     RETURN_IF_EXCEPTION(scope, nullptr);
 
-    metaProperties->putDirect(vm, JSC::Identifier::fromString(&vm, "url"), JSC::jsString(&vm, sourceURL.string()));
+    metaProperties->putDirect(vm, JSC::Identifier::fromString(vm, "url"), JSC::jsString(vm, sourceURL.string()));
     RETURN_IF_EXCEPTION(scope, nullptr);
 
     return metaProperties;
 }
 
