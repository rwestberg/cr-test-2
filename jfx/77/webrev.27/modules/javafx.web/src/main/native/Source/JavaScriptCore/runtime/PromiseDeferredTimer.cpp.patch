diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PromiseDeferredTimer.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PromiseDeferredTimer.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PromiseDeferredTimer.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PromiseDeferredTimer.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -37,11 +37,11 @@
 namespace PromiseDeferredTimerInternal {
 static const bool verbose = false;
 }
 
 PromiseDeferredTimer::PromiseDeferredTimer(VM& vm)
-    : Base(&vm)
+    : Base(vm)
 {
 }
 
 void PromiseDeferredTimer::doWork(VM& vm)
 {
@@ -52,13 +52,11 @@
         m_taskLock.unlock();
         return;
     }
 
     while (!m_tasks.isEmpty()) {
-        JSPromiseDeferred* ticket;
-        Task task;
-        std::tie(ticket, task) = m_tasks.takeLast();
+        auto [ticket, task] = m_tasks.takeLast();
         dataLogLnIf(PromiseDeferredTimerInternal::verbose, "Doing work on promise: ", RawPointer(ticket));
 
         // We may have already canceled these promises.
         if (m_pendingPromises.contains(ticket)) {
             // Allow tasks we run now to schedule work.
@@ -121,26 +119,26 @@
 #endif
 }
 
 bool PromiseDeferredTimer::hasPendingPromise(JSPromiseDeferred* ticket)
 {
-    ASSERT(ticket->vm()->currentThreadIsHoldingAPILock());
+    ASSERT(ticket->vm().currentThreadIsHoldingAPILock());
     return m_pendingPromises.contains(ticket);
 }
 
 bool PromiseDeferredTimer::hasDependancyInPendingPromise(JSPromiseDeferred* ticket, JSCell* dependency)
 {
-    ASSERT(ticket->vm()->currentThreadIsHoldingAPILock());
+    ASSERT(ticket->vm().currentThreadIsHoldingAPILock());
     ASSERT(m_pendingPromises.contains(ticket));
 
     auto result = m_pendingPromises.get(ticket);
     return result.contains(dependency);
 }
 
 bool PromiseDeferredTimer::cancelPendingPromise(JSPromiseDeferred* ticket)
 {
-    ASSERT(ticket->vm()->currentThreadIsHoldingAPILock());
+    ASSERT(ticket->vm().currentThreadIsHoldingAPILock());
     bool result = m_pendingPromises.remove(ticket);
 
     if (result)
         dataLogLnIf(PromiseDeferredTimerInternal::verbose, "Canceling promise: ", RawPointer(ticket));
 
