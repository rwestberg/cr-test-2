diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCache.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCache.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCache.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCache.cpp
@@ -37,21 +37,17 @@
 #include "WebKitFontFamilyNames.h"
 #include <wtf/HashMap.h>
 #include <wtf/MemoryPressureHandler.h>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/StdLibExtras.h>
-#include <wtf/text/AtomicStringHash.h>
+#include <wtf/text/AtomStringHash.h>
 #include <wtf/text/StringHash.h>
 
 #if ENABLE(OPENTYPE_VERTICAL)
 #include "OpenTypeVerticalData.h"
 #endif
 
-#if USE(DIRECT2D)
-#include <dwrite.h>
-#endif
-
 #if PLATFORM(IOS_FAMILY)
 #include <wtf/Lock.h>
 #include <wtf/RecursiveLockAdapter.h>
 
 static RecursiveLock fontLock;
@@ -75,11 +71,11 @@
 
 struct FontPlatformDataCacheKey {
     WTF_MAKE_FAST_ALLOCATED;
 public:
     FontPlatformDataCacheKey() { }
-    FontPlatformDataCacheKey(const AtomicString& family, const FontDescription& description, const FontFeatureSettings* fontFaceFeatures, const FontVariantSettings* fontFaceVariantSettings, FontSelectionSpecifiedCapabilities fontFaceCapabilities)
+    FontPlatformDataCacheKey(const AtomString& family, const FontDescription& description, const FontFeatureSettings* fontFaceFeatures, const FontVariantSettings* fontFaceVariantSettings, FontSelectionSpecifiedCapabilities fontFaceCapabilities)
         : m_fontDescriptionKey(description)
         , m_family(family)
         , m_fontFaceFeatures(fontFaceFeatures ? *fontFaceFeatures : FontFeatureSettings())
         , m_fontFaceVariantSettings(fontFaceVariantSettings ? *fontFaceVariantSettings : FontVariantSettings())
         , m_fontFaceCapabilities(fontFaceCapabilities)
@@ -104,11 +100,11 @@
             return false;
         return FontCascadeDescription::familyNamesAreEqual(m_family, other.m_family);
     }
 
     FontDescriptionKey m_fontDescriptionKey;
-    AtomicString m_family;
+    AtomString m_family;
     FontFeatureSettings m_fontFaceFeatures;
     FontVariantSettings m_fontFaceVariantSettings;
     FontSelectionSpecifiedCapabilities m_fontFaceCapabilities;
 };
 
@@ -153,20 +149,20 @@
 {
     static NeverDestroyed<FontPlatformDataCache> cache;
     return cache;
 }
 
-const AtomicString& FontCache::alternateFamilyName(const AtomicString& familyName)
+const AtomString& FontCache::alternateFamilyName(const AtomString& familyName)
 {
-    static NeverDestroyed<AtomicString> arial("Arial", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<AtomicString> courier("Courier", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<AtomicString> courierNew("Courier New", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<AtomicString> helvetica("Helvetica", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<AtomicString> times("Times", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<AtomicString> timesNewRoman("Times New Roman", AtomicString::ConstructFromLiteral);
-
-    const AtomicString& platformSpecificAlternate = platformAlternateFamilyName(familyName);
+    static NeverDestroyed<AtomString> arial("Arial", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> courier("Courier", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> courierNew("Courier New", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> helvetica("Helvetica", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> times("Times", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<AtomString> timesNewRoman("Times New Roman", AtomString::ConstructFromLiteral);
+
+    const AtomString& platformSpecificAlternate = platformAlternateFamilyName(familyName);
     if (!platformSpecificAlternate.isNull())
         return platformSpecificAlternate;
 
     switch (familyName.length()) {
     case 5:
@@ -201,25 +197,25 @@
     }
 
     return nullAtom();
 }
 
-FontPlatformData* FontCache::getCachedFontPlatformData(const FontDescription& fontDescription, const AtomicString& passedFamilyName,
+FontPlatformData* FontCache::getCachedFontPlatformData(const FontDescription& fontDescription, const AtomString& passedFamilyName,
     const FontFeatureSettings* fontFaceFeatures, const FontVariantSettings* fontFaceVariantSettings, FontSelectionSpecifiedCapabilities fontFaceCapabilities, bool checkingAlternateName)
 {
 #if PLATFORM(IOS_FAMILY)
     auto locker = holdLock(fontLock);
 #endif
 
 #if OS(WINDOWS) && ENABLE(OPENTYPE_VERTICAL)
     // Leading "@" in the font name enables Windows vertical flow flag for the font.
     // Because we do vertical flow by ourselves, we don't want to use the Windows feature.
     // IE disregards "@" regardless of the orientatoin, so we follow the behavior.
-    const AtomicString& familyName = (passedFamilyName.isEmpty() || passedFamilyName[0] != '@') ?
-        passedFamilyName : AtomicString(passedFamilyName.impl()->substring(1));
+    const AtomString& familyName = (passedFamilyName.isEmpty() || passedFamilyName[0] != '@') ?
+        passedFamilyName : AtomString(passedFamilyName.impl()->substring(1));
 #else
-    const AtomicString& familyName = passedFamilyName;
+    const AtomString& familyName = passedFamilyName;
 #endif
 
     static bool initialized;
     if (!initialized) {
         platformInit();
@@ -234,19 +230,19 @@
         it->value = createFontPlatformData(fontDescription, familyName, fontFaceFeatures, fontFaceVariantSettings, fontFaceCapabilities);
 
         if (!it->value && !checkingAlternateName) {
             // We were unable to find a font.  We have a small set of fonts that we alias to other names,
             // e.g., Arial/Helvetica, Courier/Courier New, etc.  Try looking up the font under the aliased name.
-            const AtomicString& alternateName = alternateFamilyName(familyName);
+            const AtomString& alternateName = alternateFamilyName(familyName);
             if (!alternateName.isNull()) {
                 FontPlatformData* fontPlatformDataForAlternateName = getCachedFontPlatformData(fontDescription, alternateName, fontFaceFeatures, fontFaceVariantSettings, fontFaceCapabilities, true);
                 // Lookup the key in the hash table again as the previous iterator may have
                 // been invalidated by the recursive call to getCachedFontPlatformData().
                 it = fontPlatformDataCache().find(key);
                 ASSERT(it != fontPlatformDataCache().end());
                 if (fontPlatformDataForAlternateName)
-                    it->value = std::make_unique<FontPlatformData>(*fontPlatformDataForAlternateName);
+                    it->value = makeUnique<FontPlatformData>(*fontPlatformDataForAlternateName);
             }
         }
     }
 
     return it->value.get();
@@ -318,11 +314,11 @@
 #endif
 
 const unsigned cMaxUnderMemoryPressureInactiveFontData = 50;
 const unsigned cTargetUnderMemoryPressureInactiveFontData = 30;
 
-RefPtr<Font> FontCache::fontForFamily(const FontDescription& fontDescription, const AtomicString& family, const FontFeatureSettings* fontFaceFeatures, const FontVariantSettings* fontFaceVariantSettings, FontSelectionSpecifiedCapabilities fontFaceCapabilities, bool checkingAlternateName)
+RefPtr<Font> FontCache::fontForFamily(const FontDescription& fontDescription, const AtomString& family, const FontFeatureSettings* fontFaceFeatures, const FontVariantSettings* fontFaceVariantSettings, FontSelectionSpecifiedCapabilities fontFaceCapabilities, bool checkingAlternateName)
 {
     if (!m_purgeTimer.isActive())
         m_purgeTimer.startOneShot(0_s);
 
     if (auto* platformData = getCachedFontPlatformData(fontDescription, family, fontFaceFeatures, fontFaceVariantSettings, fontFaceCapabilities, checkingAlternateName))
@@ -486,15 +482,19 @@
 FontCache::PrewarmInformation FontCache::collectPrewarmInformation() const
 {
     return { };
 }
 
+void FontCache::prewarmGlobally()
+{
+}
+
 void FontCache::prewarm(const PrewarmInformation&)
 {
 }
 
-RefPtr<Font> FontCache::similarFont(const FontDescription&, const AtomicString&)
+RefPtr<Font> FontCache::similarFont(const FontDescription&, const AtomString&)
 {
     return nullptr;
 }
 #endif
 
