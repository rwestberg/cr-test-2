diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorMemoryAgent.h b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorMemoryAgent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorMemoryAgent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorMemoryAgent.h
@@ -40,30 +40,30 @@
 class InspectorMemoryAgent final : public InspectorAgentBase, public Inspector::MemoryBackendDispatcherHandler {
     WTF_MAKE_NONCOPYABLE(InspectorMemoryAgent);
     WTF_MAKE_FAST_ALLOCATED;
 public:
     InspectorMemoryAgent(PageAgentContext&);
-    virtual ~InspectorMemoryAgent() = default;
+    virtual ~InspectorMemoryAgent();
 
-    void didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*) override;
-    void willDestroyFrontendAndBackend(Inspector::DisconnectReason) override;
+    // InspectorAgentBase
+    void didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*);
+    void willDestroyFrontendAndBackend(Inspector::DisconnectReason);
 
     // MemoryBackendDispatcherHandler
-    void enable(ErrorString&) override;
-    void disable(ErrorString&) override;
-    void startTracking(ErrorString&) override;
-    void stopTracking(ErrorString&) override;
+    void enable(ErrorString&);
+    void disable(ErrorString&);
+    void startTracking(ErrorString&);
+    void stopTracking(ErrorString&);
 
     // InspectorInstrumentation
     void didHandleMemoryPressure(Critical);
 
 private:
     void collectSample(const ResourceUsageData&);
 
     std::unique_ptr<Inspector::MemoryFrontendDispatcher> m_frontendDispatcher;
     RefPtr<Inspector::MemoryBackendDispatcher> m_backendDispatcher;
-    bool m_enabled { false };
     bool m_tracking { false };
 };
 
 } // namespace WebCore
 
