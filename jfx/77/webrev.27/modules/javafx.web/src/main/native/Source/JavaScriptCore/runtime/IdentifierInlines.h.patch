diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IdentifierInlines.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IdentifierInlines.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IdentifierInlines.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IdentifierInlines.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2014 Apple Inc. All rights reserved.
+ * Copyright (C) 2014-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -29,62 +29,49 @@
 #include "Identifier.h"
 #include "Symbol.h"
 
 namespace JSC  {
 
-inline Identifier::Identifier(ExecState* exec, AtomicStringImpl* string)
+inline Identifier::Identifier(VM& vm, AtomStringImpl* string)
     : m_string(string)
 {
 #ifndef NDEBUG
-    checkCurrentAtomicStringTable(exec);
+    checkCurrentAtomStringTable(vm);
     if (string)
-        ASSERT_WITH_MESSAGE(!string->length() || string->isSymbol() || AtomicStringImpl::isInAtomicStringTable(string), "The atomic string comes from an other thread!");
+        ASSERT_WITH_MESSAGE(!string->length() || string->isSymbol() || AtomStringImpl::isInAtomStringTable(string), "The atomic string comes from an other thread!");
 #else
-    UNUSED_PARAM(exec);
+    UNUSED_PARAM(vm);
 #endif
 }
 
-inline Identifier::Identifier(ExecState* exec, const AtomicString& string)
+inline Identifier::Identifier(VM& vm, const AtomString& string)
     : m_string(string.string())
 {
 #ifndef NDEBUG
-    checkCurrentAtomicStringTable(exec);
+    checkCurrentAtomStringTable(vm);
     if (!string.isNull())
-        ASSERT_WITH_MESSAGE(!string.length() || string.impl()->isSymbol() || AtomicStringImpl::isInAtomicStringTable(string.impl()), "The atomic string comes from an other thread!");
+        ASSERT_WITH_MESSAGE(!string.length() || string.impl()->isSymbol() || AtomStringImpl::isInAtomStringTable(string.impl()), "The atomic string comes from an other thread!");
 #else
-    UNUSED_PARAM(exec);
+    UNUSED_PARAM(vm);
 #endif
 }
 
-inline Ref<StringImpl> Identifier::add(ExecState* exec, StringImpl* r)
+inline Ref<StringImpl> Identifier::add(VM& vm, StringImpl* r)
 {
 #ifndef NDEBUG
-    checkCurrentAtomicStringTable(exec);
+    checkCurrentAtomStringTable(vm);
 #endif
-    VM& vm = exec->vm();
-    return *AtomicStringImpl::addWithStringTableProvider(vm, r);
-}
-inline Ref<StringImpl> Identifier::add(VM* vm, StringImpl* r)
-{
-#ifndef NDEBUG
-    checkCurrentAtomicStringTable(vm);
-#endif
-    return *AtomicStringImpl::addWithStringTableProvider(*vm, r);
+    return *AtomStringImpl::addWithStringTableProvider(vm, r);
 }
 
-inline Identifier Identifier::fromUid(VM* vm, UniquedStringImpl* uid)
+inline Identifier Identifier::fromUid(VM& vm, UniquedStringImpl* uid)
 {
     if (!uid || !uid->isSymbol())
         return Identifier(vm, uid);
     return static_cast<SymbolImpl&>(*uid);
 }
 
-inline Identifier Identifier::fromUid(ExecState* exec, UniquedStringImpl* uid)
-{
-    return fromUid(&exec->vm(), uid);
-}
-
 inline Identifier Identifier::fromUid(const PrivateName& name)
 {
     return name.uid();
 }
 
@@ -92,66 +79,65 @@
 {
     return symbol;
 }
 
 template<unsigned charactersCount>
-inline Identifier Identifier::fromString(VM* vm, const char (&characters)[charactersCount])
+inline Identifier Identifier::fromString(VM& vm, const char (&characters)[charactersCount])
 {
-    return Identifier(vm, characters);
+    return Identifier(&vm, characters);
 }
 
-template<unsigned charactersCount>
-inline Identifier Identifier::fromString(ExecState* exec, const char (&characters)[charactersCount])
+inline Identifier Identifier::fromString(VM& vm, ASCIILiteral s)
 {
-    return Identifier(&exec->vm(), characters);
+    return Identifier(vm, String(s));
 }
 
-inline Identifier Identifier::fromString(VM* vm, const LChar* s, int length)
+inline Identifier Identifier::fromString(VM& vm, const LChar* s, int length)
 {
     return Identifier(vm, s, length);
 }
 
-inline Identifier Identifier::fromString(VM* vm, const UChar* s, int length)
+inline Identifier Identifier::fromString(VM& vm, const UChar* s, int length)
 {
     return Identifier(vm, s, length);
 }
 
-inline Identifier Identifier::fromString(VM* vm, const String& string)
+inline Identifier Identifier::fromString(VM& vm, const String& string)
 {
     return Identifier(vm, string.impl());
 }
 
-inline Identifier Identifier::fromString(ExecState* exec, const String& string)
+inline Identifier Identifier::fromString(VM& vm, AtomStringImpl* atomStringImpl)
 {
-    return Identifier(&exec->vm(), string.impl());
+    return Identifier(vm, atomStringImpl);
 }
 
-inline Identifier Identifier::fromString(ExecState* exec, AtomicStringImpl* atomicString)
+inline Identifier Identifier::fromString(VM& vm, const AtomString& atomString)
 {
-    return Identifier(exec, atomicString);
+    return Identifier(vm, atomString);
 }
 
-inline Identifier Identifier::fromString(ExecState* exec, const AtomicString& atomicString)
+inline Identifier Identifier::fromString(VM& vm, SymbolImpl* symbolImpl)
 {
-    return Identifier(exec, atomicString);
+    return Identifier(vm, symbolImpl);
 }
 
-inline Identifier Identifier::fromString(ExecState* exec, const char* s)
+inline Identifier Identifier::fromString(VM& vm, const char* s)
 {
-    return Identifier(exec, AtomicString(s));
+    return Identifier(vm, AtomString(s));
 }
 
 inline JSValue identifierToJSValue(VM& vm, const Identifier& identifier)
 {
     if (identifier.isSymbol())
         return Symbol::create(vm, static_cast<SymbolImpl&>(*identifier.impl()));
-    return jsString(&vm, identifier.impl());
+    return jsString(vm, identifier.impl());
 }
 
 inline JSValue identifierToSafePublicJSValue(VM& vm, const Identifier& identifier)
 {
     if (identifier.isSymbol() && !identifier.isPrivateName())
         return Symbol::create(vm, static_cast<SymbolImpl&>(*identifier.impl()));
-    return jsString(&vm, identifier.impl());
+    return jsString(vm, identifier.impl());
 }
 
 } // namespace JSC
