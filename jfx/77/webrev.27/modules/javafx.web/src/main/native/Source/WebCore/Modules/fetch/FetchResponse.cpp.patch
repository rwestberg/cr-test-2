diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchResponse.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchResponse.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchResponse.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchResponse.cpp
@@ -101,11 +101,14 @@
 
         // 8.2 Let Content-Type be null.
         String contentType;
 
         // 8.3 Set r’s response’s body and Content-Type to the result of extracting body.
-        extractedBody = FetchBody::extract(context, WTFMove(*body), contentType);
+        auto result = FetchBody::extract(WTFMove(*body), contentType);
+        if (result.hasException())
+            return result.releaseException();
+        extractedBody = result.releaseReturnValue();
 
         // 8.4 If Content-Type is non-null and r’s response’s header list does not contain `Content-Type`, then append
         //     `Content-Type`/Content-Type to r’s response’s header list.
         if (!contentType.isNull() && !headers->fastHas(HTTPHeaderName::ContentType))
             headers->fastSet(HTTPHeaderName::ContentType, contentType);
@@ -129,11 +132,11 @@
     r->m_internalResponse.setTextEncodingName(extractCharsetFromMediaType(contentType));
 
     r->m_internalResponse.setHTTPStatusCode(status);
     r->m_internalResponse.setHTTPStatusText(statusText);
 
-    return WTFMove(r);
+    return r;
 }
 
 Ref<FetchResponse> FetchResponse::error(ScriptExecutionContext& context)
 {
     auto response = adoptRef(*new FetchResponse(context, { }, FetchHeaders::create(FetchHeaders::Guard::Immutable), { }));
@@ -153,11 +156,11 @@
         return Exception { RangeError, makeString("Status code ", status, "is not a redirection status code") };
     auto redirectResponse = adoptRef(*new FetchResponse(context, { }, FetchHeaders::create(FetchHeaders::Guard::Immutable), { }));
     redirectResponse->m_internalResponse.setHTTPStatusCode(status);
     redirectResponse->m_internalResponse.setHTTPHeaderField(HTTPHeaderName::Location, requestURL.string());
     redirectResponse->m_headers->fastSet(HTTPHeaderName::Location, requestURL.string());
-    return WTFMove(redirectResponse);
+    return redirectResponse;
 }
 
 FetchResponse::FetchResponse(ScriptExecutionContext& context, Optional<FetchBody>&& body, Ref<FetchHeaders>&& headers, ResourceResponse&& response)
     : FetchBodyOwner(context, WTFMove(body), WTFMove(headers))
     , m_internalResponse(WTFMove(response))
@@ -181,11 +184,11 @@
 
     auto clone = FetchResponse::create(context, WTF::nullopt, headers().guard(), ResourceResponse { m_internalResponse });
     clone->cloneBody(*this);
     clone->m_opaqueLoadIdentifier = m_opaqueLoadIdentifier;
     clone->m_bodySizeWithPadding = m_bodySizeWithPadding;
-    return WTFMove(clone);
+    return clone;
 }
 
 void FetchResponse::addAbortSteps(Ref<AbortSignal>&& signal)
 {
     m_abortSignal = WTFMove(signal);
@@ -199,24 +202,25 @@
         setLoadingError(Exception { AbortError, "Fetch is aborted"_s });
 
         if (m_bodyLoader) {
             if (auto callback = m_bodyLoader->takeNotificationCallback())
                 callback(Exception { AbortError, "Fetch is aborted"_s });
+
+            if (auto callback = m_bodyLoader->takeConsumeDataCallback())
+                callback(Exception { AbortError, "Fetch is aborted"_s });
         }
 
         if (m_readableStreamSource) {
             if (!m_readableStreamSource->isCancelling())
                 m_readableStreamSource->error(*loadingException());
             m_readableStreamSource = nullptr;
         }
         if (m_body)
             m_body->loadingFailed(*loadingException());
 
-        if (m_bodyLoader) {
-            m_bodyLoader->stop();
-            m_bodyLoader = WTF::nullopt;
-        }
+        if (auto bodyLoader = WTFMove(m_bodyLoader))
+            bodyLoader->stop();
     });
 }
 
 void FetchResponse::fetch(ScriptExecutionContext& context, FetchRequest& request, NotificationCallback&& responseCallback)
 {
@@ -237,13 +241,13 @@
 
     response->body().consumer().setAsLoading();
 
     response->addAbortSteps(request.signal());
 
-    response->m_bodyLoader.emplace(response.get(), WTFMove(responseCallback));
+    response->m_bodyLoader = makeUnique<BodyLoader>(response.get(), WTFMove(responseCallback));
     if (!response->m_bodyLoader->start(context, request))
-        response->m_bodyLoader = WTF::nullopt;
+        response->m_bodyLoader = nullptr;
 }
 
 const String& FetchResponse::url() const
 {
     if (m_responseURL.isNull()) {
@@ -277,11 +281,11 @@
     if (auto consumeDataCallback = WTFMove(m_consumeDataCallback))
         consumeDataCallback(nullptr);
 
     if (m_loader->isStarted()) {
         Ref<FetchResponse> protector(m_response);
-        m_response.m_bodyLoader = WTF::nullopt;
+        m_response.m_bodyLoader = nullptr;
     }
 }
 
 void FetchResponse::BodyLoader::didFail(const ResourceError& error)
 {
@@ -302,26 +306,25 @@
         m_response.m_readableStreamSource = nullptr;
     }
 #endif
 
     // Check whether didFail is called as part of FetchLoader::start.
-    if (m_loader->isStarted()) {
+    if (m_loader && m_loader->isStarted()) {
         Ref<FetchResponse> protector(m_response);
-        m_response.m_bodyLoader = WTF::nullopt;
+        m_response.m_bodyLoader = nullptr;
     }
 }
 
 FetchResponse::BodyLoader::BodyLoader(FetchResponse& response, NotificationCallback&& responseCallback)
     : m_response(response)
     , m_responseCallback(WTFMove(responseCallback))
+    , m_pendingActivity(m_response.makePendingActivity(m_response))
 {
-    m_response.setPendingActivity(m_response);
 }
 
 FetchResponse::BodyLoader::~BodyLoader()
 {
-    m_response.unsetPendingActivity(m_response);
 }
 
 static uint64_t nextOpaqueLoadIdentifier { 0 };
 void FetchResponse::BodyLoader::didReceiveResponse(const ResourceResponse& resourceResponse)
 {
@@ -377,11 +380,11 @@
 #endif
 }
 
 bool FetchResponse::BodyLoader::start(ScriptExecutionContext& context, const FetchRequest& request)
 {
-    m_loader = std::make_unique<FetchLoader>(*this, &m_response.m_body->consumer());
+    m_loader = makeUnique<FetchLoader>(*this, &m_response.m_body->consumer());
     m_loader->start(context, request);
     return m_loader->isStarted();
 }
 
 void FetchResponse::BodyLoader::stop()
@@ -519,14 +522,12 @@
 
 void FetchResponse::stop()
 {
     RefPtr<FetchResponse> protectedThis(this);
     FetchBodyOwner::stop();
-    if (m_bodyLoader) {
-        m_bodyLoader->stop();
-        m_bodyLoader = WTF::nullopt;
-    }
+    if (auto bodyLoader = WTFMove(m_bodyLoader))
+        bodyLoader->stop();
 }
 
 const char* FetchResponse::activeDOMObjectName() const
 {
     return "Response";
