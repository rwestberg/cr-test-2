diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/PaymentRequest.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/PaymentRequest.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/PaymentRequest.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/PaymentRequest.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -32,11 +32,13 @@
 #include "Document.h"
 #include "EventNames.h"
 #include "JSDOMPromise.h"
 #include "JSPaymentDetailsUpdate.h"
 #include "JSPaymentResponse.h"
+#include "Page.h"
 #include "PaymentAddress.h"
+#include "PaymentCoordinator.h"
 #include "PaymentCurrencyAmount.h"
 #include "PaymentDetailsInit.h"
 #include "PaymentHandler.h"
 #include "PaymentMethodChangeEvent.h"
 #include "PaymentMethodData.h"
@@ -45,16 +47,19 @@
 #include "PaymentValidationErrors.h"
 #include "ScriptController.h"
 #include <JavaScriptCore/JSONObject.h>
 #include <JavaScriptCore/ThrowScope.h>
 #include <wtf/ASCIICType.h>
+#include <wtf/IsoMallocInlines.h>
 #include <wtf/RunLoop.h>
 #include <wtf/Scope.h>
 #include <wtf/UUID.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(PaymentRequest);
+
 // Implements the IsWellFormedCurrencyCode abstract operation from ECMA 402
 // https://tc39.github.io/ecma402/#sec-iswellformedcurrencycode
 static bool isWellFormedCurrencyCode(const String& currency)
 {
     if (currency.length() == 3)
@@ -346,10 +351,15 @@
 
     auto shippingOptionAndModifierData = detailsResult.releaseReturnValue();
     return adoptRef(*new PaymentRequest(document, WTFMove(options), WTFMove(details), WTFMove(std::get<1>(shippingOptionAndModifierData)), WTFMove(serializedMethodData), WTFMove(std::get<0>(shippingOptionAndModifierData))));
 }
 
+bool PaymentRequest::enabledForContext(ScriptExecutionContext& context)
+{
+    return PaymentHandler::enabledForContext(context);
+}
+
 PaymentRequest::PaymentRequest(Document& document, PaymentOptions&& options, PaymentDetailsInit&& details, Vector<String>&& serializedModifierData, Vector<Method>&& serializedMethodData, String&& selectedShippingOption)
     : ActiveDOMObject { document }
     , m_options { WTFMove(options) }
     , m_details { WTFMove(details) }
     , m_serializedModifierData { WTFMove(serializedModifierData) }
@@ -392,10 +402,11 @@
         return;
     }
 
     if (PaymentHandler::hasActiveSession(document)) {
         promise.reject(Exception { AbortError });
+        m_state = State::Closed;
         return;
     }
 
     m_state = State::Interactive;
     ASSERT(!m_showPromise);
@@ -426,11 +437,11 @@
     if (!selectedPaymentHandler) {
         settleShowPromise(Exception { NotSupportedError });
         return;
     }
 
-    auto exception = selectedPaymentHandler->show();
+    auto exception = selectedPaymentHandler->show(document);
     if (exception.hasException()) {
         settleShowPromise(exception.releaseException());
         return;
     }
 
@@ -504,11 +515,11 @@
     for (auto& paymentMethod : m_serializedMethodData) {
         auto handler = PaymentHandler::create(document, *this, paymentMethod.identifier);
         if (!handler)
             continue;
 
-        handler->canMakePayment([promise = WTFMove(promise)](bool canMakePayment) mutable {
+        handler->canMakePayment(document, [promise = WTFMove(promise)](bool canMakePayment) mutable {
             promise.resolve(canMakePayment);
         });
         return;
     }
 
