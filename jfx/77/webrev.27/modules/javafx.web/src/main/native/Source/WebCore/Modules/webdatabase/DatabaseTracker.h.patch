diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseTracker.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseTracker.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseTracker.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseTracker.h
@@ -57,10 +57,11 @@
     WEBCORE_EXPORT static std::unique_ptr<DatabaseTracker> trackerWithDatabasePath(const String& databasePath);
 
     static void initializeTracker(const String& databasePath);
 
     WEBCORE_EXPORT static DatabaseTracker& singleton();
+    WEBCORE_EXPORT static bool isInitialized();
     // This singleton will potentially be used from multiple worker threads and the page's context thread simultaneously.  To keep this safe, it's
     // currently using 4 locks.  In order to avoid deadlock when taking multiple locks, you must take them in the correct order:
     // m_databaseGuard before quotaManager if both locks are needed.
     // m_openDatabaseMapGuard before quotaManager if both locks are needed.
     // m_databaseGuard and m_openDatabaseMapGuard currently don't overlap.
@@ -70,10 +71,11 @@
     ExceptionOr<void> retryCanEstablishDatabase(DatabaseContext&, const String& name, unsigned long long estimatedSize);
 
     void setDatabaseDetails(const SecurityOriginData&, const String& name, const String& displayName, unsigned long long estimatedSize);
     WEBCORE_EXPORT String fullPathForDatabase(const SecurityOriginData&, const String& name, bool createIfDoesNotExist);
 
+    Vector<Ref<Database>> openDatabases();
     void addOpenDatabase(Database&);
     void removeOpenDatabase(Database&);
 
     unsigned long long maximumSize(Database&);
 
