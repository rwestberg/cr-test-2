diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/TypeProfiler.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/TypeProfiler.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/TypeProfiler.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/TypeProfiler.cpp
@@ -91,13 +91,11 @@
         json.append(location->m_globalTypeSet->toJSONString());
     else
         json.appendLiteral("null");
     json.append(',');
 
-    json.appendLiteral("\"instructionTypeSet\":");
-    json.append(location->m_instructionTypeSet->toJSONString());
-    json.append(',');
+    json.append("\"instructionTypeSet\":", location->m_instructionTypeSet->toJSONString(), ',');
 
     json.appendLiteral("\"isOverflown\":");
     if (location->m_instructionTypeSet->isOverflown() || (location->m_globalTypeSet && location->m_globalTypeSet->isOverflown()))
         json.appendLiteral("true");
     else
@@ -146,17 +144,17 @@
 TypeLocation* TypeProfiler::nextTypeLocation()
 {
     return m_typeLocationInfo.add();
 }
 
-void TypeProfiler::invalidateTypeSetCache()
+void TypeProfiler::invalidateTypeSetCache(VM& vm)
 {
     for (Bag<TypeLocation>::iterator iter = m_typeLocationInfo.begin(); !!iter; ++iter) {
         TypeLocation* location = *iter;
-        location->m_instructionTypeSet->invalidateCache();
+        location->m_instructionTypeSet->invalidateCache(vm);
         if (location->m_globalTypeSet)
-            location->m_globalTypeSet->invalidateCache();
+            location->m_globalTypeSet->invalidateCache(vm);
     }
 }
 
 void TypeProfiler::dumpTypeProfilerData(VM& vm)
 {
