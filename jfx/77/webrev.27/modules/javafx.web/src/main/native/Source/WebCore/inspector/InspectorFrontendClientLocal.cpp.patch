diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendClientLocal.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendClientLocal.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendClientLocal.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendClientLocal.cpp
@@ -43,15 +43,17 @@
 #include "InspectorController.h"
 #include "InspectorFrontendHost.h"
 #include "InspectorPageAgent.h"
 #include "Page.h"
 #include "ScriptController.h"
+#include "ScriptSourceCode.h"
 #include "ScriptState.h"
 #include "Settings.h"
 #include "Timer.h"
 #include "UserGestureIndicator.h"
 #include "WindowFeatures.h"
+#include <JavaScriptCore/FrameTracers.h>
 #include <JavaScriptCore/InspectorBackendDispatchers.h>
 #include <wtf/Deque.h>
 #include <wtf/text/CString.h>
 
 
@@ -125,10 +127,14 @@
 
 void InspectorFrontendClientLocal::Settings::setProperty(const String&, const String&)
 {
 }
 
+void InspectorFrontendClientLocal::Settings::deleteProperty(const String&)
+{
+}
+
 InspectorFrontendClientLocal::InspectorFrontendClientLocal(InspectorController* inspectedPageController, Page* frontendPage, std::unique_ptr<Settings> settings)
     : m_inspectedPageController(inspectedPageController)
     , m_frontendPage(frontendPage)
     , m_settings(WTFMove(settings))
     , m_dockSide(DockSide::Undocked)
@@ -144,10 +150,15 @@
     m_frontendPage = nullptr;
     m_inspectedPageController = nullptr;
     m_dispatchTask->reset();
 }
 
+void InspectorFrontendClientLocal::resetState()
+{
+    m_settings->deleteProperty(inspectorAttachedHeightSetting);
+}
+
 void InspectorFrontendClientLocal::windowObjectCleared()
 {
     if (m_frontendHost)
         m_frontendHost->disconnectClient();
 
@@ -203,11 +214,11 @@
     return minimumAttachedHeight <= maximumAttachedHeight && minimumAttachedWidth <= inspectedPageWidth;
 }
 
 void InspectorFrontendClientLocal::setDockingUnavailable(bool unavailable)
 {
-    evaluateOnLoad(makeString("[\"setDockingUnavailable\", ", unavailable ? "true" : "false", ']'));
+    dispatch(makeString("[\"setDockingUnavailable\", ", unavailable ? "true" : "false", ']'));
 }
 
 void InspectorFrontendClientLocal::changeAttachedWindowHeight(unsigned height)
 {
     unsigned totalHeight = m_frontendPage->mainFrame().view()->visibleHeight() + m_inspectedPageController->inspectedPage().mainFrame().view()->visibleHeight();
@@ -221,10 +232,15 @@
     unsigned totalWidth = m_frontendPage->mainFrame().view()->visibleWidth() + m_inspectedPageController->inspectedPage().mainFrame().view()->visibleWidth();
     unsigned attachedWidth = constrainedAttachedWindowWidth(width, totalWidth);
     setAttachedWindowWidth(attachedWidth);
 }
 
+void InspectorFrontendClientLocal::changeSheetRect(const FloatRect& rect)
+{
+    setSheetRect(rect);
+}
+
 void InspectorFrontendClientLocal::openInNewTab(const String& url)
 {
     UserGestureIndicator indicator { ProcessingUserGesture };
     Frame& mainFrame = m_inspectedPageController->inspectedPage().mainFrame();
     FrameLoadRequest frameLoadRequest { *mainFrame.document(), mainFrame.document()->securityOrigin(), { }, "_blank"_s, LockHistory::No, LockBackForwardList::No, MaybeSendReferrer, AllowNavigationToInvalidURL::Yes, NewFrameOpenerPolicy::Allow, ShouldOpenExternalURLsPolicy::ShouldNotAllow, InitiatedByMainFrame::Unknown };
@@ -268,11 +284,11 @@
         break;
     }
 
     m_dockSide = dockSide;
 
-    evaluateOnLoad(makeString("[\"setDockSide\", \"", side, "\"]"));
+    dispatch(makeString("[\"setDockSide\", \"", side, "\"]"));
 }
 
 void InspectorFrontendClientLocal::restoreAttachedWindowHeight()
 {
     unsigned inspectedPageHeight = m_inspectedPageController->inspectedPage().mainFrame().view()->visibleHeight();
@@ -292,11 +308,11 @@
     return false;
 }
 
 void InspectorFrontendClientLocal::setDebuggingEnabled(bool enabled)
 {
-    evaluateOnLoad(makeString("[\"setDebuggingEnabled\", ", enabled ? "true" : "false", ']'));
+    dispatch(makeString("[\"setDebuggingEnabled\", ", enabled ? "true" : "false", ']'));
 }
 
 bool InspectorFrontendClientLocal::isTimelineProfilingEnabled()
 {
     if (m_frontendLoaded)
@@ -304,11 +320,11 @@
     return false;
 }
 
 void InspectorFrontendClientLocal::setTimelineProfilingEnabled(bool enabled)
 {
-    evaluateOnLoad(makeString("[\"setTimelineProfilingEnabled\", ", enabled ? "true" : "false", ']'));
+    dispatch(makeString("[\"setTimelineProfilingEnabled\", ", enabled ? "true" : "false", ']'));
 }
 
 bool InspectorFrontendClientLocal::isProfilingJavaScript()
 {
     if (m_frontendLoaded)
@@ -316,32 +332,32 @@
     return false;
 }
 
 void InspectorFrontendClientLocal::startProfilingJavaScript()
 {
-    evaluateOnLoad("[\"startProfilingJavaScript\"]");
+    dispatch("[\"startProfilingJavaScript\"]");
 }
 
 void InspectorFrontendClientLocal::stopProfilingJavaScript()
 {
-    evaluateOnLoad("[\"stopProfilingJavaScript\"]");
+    dispatch("[\"stopProfilingJavaScript\"]");
 }
 
 void InspectorFrontendClientLocal::showConsole()
 {
-    evaluateOnLoad("[\"showConsole\"]");
+    dispatch("[\"showConsole\"]");
 }
 
 void InspectorFrontendClientLocal::showResources()
 {
-    evaluateOnLoad("[\"showResources\"]");
+    dispatch("[\"showResources\"]");
 }
 
 void InspectorFrontendClientLocal::showMainResourceForFrame(Frame* frame)
 {
-    String frameId = m_inspectedPageController->pageAgent()->frameId(frame);
-    evaluateOnLoad(makeString("[\"showMainResourceForFrame\", \"", frameId, "\"]"));
+    String frameId = m_inspectedPageController->ensurePageAgent().frameId(frame);
+    dispatch(makeString("[\"showMainResourceForFrame\", \"", frameId, "\"]"));
 }
 
 unsigned InspectorFrontendClientLocal::constrainedAttachedWindowHeight(unsigned preferredHeight, unsigned totalWindowHeight)
 {
     return roundf(std::max(minimumAttachedHeight, std::min<float>(preferredHeight, totalWindowHeight * maximumAttachedHeightRatio)));
@@ -365,22 +381,48 @@
 unsigned InspectorFrontendClientLocal::inspectionLevel() const
 {
     return m_inspectedPageController->inspectionLevel() + 1;
 }
 
+void InspectorFrontendClientLocal::dispatch(const String& signature)
+{
+    ASSERT(!signature.isEmpty());
+    ASSERT(signature.startsWith('['));
+    ASSERT(signature.endsWith(']'));
+
+    evaluateOnLoad("InspectorFrontendAPI.dispatch(" + signature + ")");
+}
+
+void InspectorFrontendClientLocal::dispatchMessage(const String& messageObject)
+{
+    ASSERT(!messageObject.isEmpty());
+
+    evaluateOnLoad("InspectorFrontendAPI.dispatchMessage(" + messageObject + ")");
+}
+
+void InspectorFrontendClientLocal::dispatchMessageAsync(const String& messageObject)
+{
+    ASSERT(!messageObject.isEmpty());
+
+    evaluateOnLoad("InspectorFrontendAPI.dispatchMessageAsync(" + messageObject + ")");
+}
+
 bool InspectorFrontendClientLocal::evaluateAsBoolean(const String& expression)
 {
     auto& state = *mainWorldExecState(&m_frontendPage->mainFrame());
     return m_frontendPage->mainFrame().script().executeScript(expression).toWTFString(&state) == "true";
 }
 
 void InspectorFrontendClientLocal::evaluateOnLoad(const String& expression)
 {
-    if (m_frontendLoaded)
-        m_frontendPage->mainFrame().script().executeScript("if (InspectorFrontendAPI) InspectorFrontendAPI.dispatch(" + expression + ")");
-    else
+    if (!m_frontendLoaded) {
         m_evaluateOnLoad.append(expression);
+        return;
+    }
+
+    JSC::SuspendExceptionScope scope(&m_frontendPage->inspectorController().vm());
+    m_frontendPage->mainFrame().script().evaluate(ScriptSourceCode(expression));
 }
 
 Page* InspectorFrontendClientLocal::inspectedPage() const
 {
     if (!m_inspectedPageController)
