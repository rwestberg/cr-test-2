diff a/modules/javafx.web/src/main/native/Source/WebCore/html/SearchInputType.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/SearchInputType.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/SearchInputType.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/SearchInputType.cpp
@@ -63,15 +63,15 @@
 }
 
 static void updateResultButtonPseudoType(SearchFieldResultsButtonElement& resultButton, int maxResults)
 {
     if (!maxResults)
-        resultButton.setPseudo(AtomicString("-webkit-search-results-decoration", AtomicString::ConstructFromLiteral));
+        resultButton.setPseudo(AtomString("-webkit-search-results-decoration", AtomString::ConstructFromLiteral));
     else if (maxResults < 0)
-        resultButton.setPseudo(AtomicString("-webkit-search-decoration", AtomicString::ConstructFromLiteral));
+        resultButton.setPseudo(AtomString("-webkit-search-decoration", AtomString::ConstructFromLiteral));
     else
-        resultButton.setPseudo(AtomicString("-webkit-search-results-button", AtomicString::ConstructFromLiteral));
+        resultButton.setPseudo(AtomString("-webkit-search-results-button", AtomString::ConstructFromLiteral));
 }
 
 void SearchInputType::attributeChanged(const QualifiedName& name)
 {
     if (name == resultsAttr) {
@@ -87,11 +87,11 @@
 {
     ASSERT(element());
     return createRenderer<RenderSearchField>(*element(), WTFMove(style));
 }
 
-const AtomicString& SearchInputType::formControlType() const
+const AtomString& SearchInputType::formControlType() const
 {
     return InputTypeNames::search();
 }
 
 bool SearchInputType::isSearchField() const
@@ -132,27 +132,25 @@
 HTMLElement* SearchInputType::cancelButtonElement() const
 {
     return m_cancelButton.get();
 }
 
-void SearchInputType::handleKeydownEvent(KeyboardEvent& event)
+auto SearchInputType::handleKeydownEvent(KeyboardEvent& event) -> ShouldCallBaseEventHandler
 {
     ASSERT(element());
-    if (element()->isDisabledOrReadOnly()) {
-        TextFieldInputType::handleKeydownEvent(event);
-        return;
-    }
+    if (element()->isDisabledOrReadOnly())
+        return TextFieldInputType::handleKeydownEvent(event);
 
     const String& key = event.keyIdentifier();
     if (key == "U+001B") {
         Ref<HTMLInputElement> protectedInputElement(*element());
         protectedInputElement->setValueForUser(emptyString());
         protectedInputElement->onSearch();
         event.setDefaultHandled();
-        return;
+        return ShouldCallBaseEventHandler::Yes;
     }
-    TextFieldInputType::handleKeydownEvent(event);
+    return TextFieldInputType::handleKeydownEvent(event);
 }
 
 void SearchInputType::destroyShadowSubtree()
 {
     TextFieldInputType::destroyShadowSubtree();
