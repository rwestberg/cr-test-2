diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/worker/WorkerAuditAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/worker/WorkerAuditAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/worker/WorkerAuditAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/worker/WorkerAuditAgent.cpp
@@ -24,10 +24,11 @@
  */
 
 #include "config.h"
 #include "WorkerAuditAgent.h"
 
+#include "ScriptState.h"
 #include "WorkerGlobalScope.h"
 #include <JavaScriptCore/InjectedScript.h>
 #include <JavaScriptCore/InjectedScriptManager.h>
 #include <JavaScriptCore/JSCInlines.h>
 #include <wtf/Ref.h>
@@ -43,14 +44,16 @@
     , m_workerGlobalScope(context.workerGlobalScope)
 {
     ASSERT(context.workerGlobalScope.isContextThread());
 }
 
+WorkerAuditAgent::~WorkerAuditAgent() = default;
+
 InjectedScript WorkerAuditAgent::injectedScriptForEval(ErrorString& errorString, const int* executionContextId)
 {
     if (executionContextId) {
-        errorString = "Execution context id is not supported for workers as there is only one execution context."_s;
+        errorString = "executionContextId is not supported for workers as there is only one execution context"_s;
         return InjectedScript();
     }
 
     JSC::ExecState* scriptState = execStateFromWorkerGlobalScope(m_workerGlobalScope);
     return injectedScriptManager().injectedScriptFor(scriptState);
