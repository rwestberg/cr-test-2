diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediacapabilities/MediaCapabilities.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediacapabilities/MediaCapabilities.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediacapabilities/MediaCapabilities.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediacapabilities/MediaCapabilities.cpp
@@ -25,14 +25,19 @@
 
 #include "config.h"
 #include "MediaCapabilities.h"
 
 #include "ContentType.h"
-#include "JSMediaCapabilitiesInfo.h"
+#include "Document.h"
+#include "JSMediaCapabilitiesDecodingInfo.h"
+#include "JSMediaCapabilitiesEncodingInfo.h"
+#include "MediaCapabilitiesDecodingInfo.h"
+#include "MediaCapabilitiesEncodingInfo.h"
 #include "MediaDecodingConfiguration.h"
 #include "MediaEncodingConfiguration.h"
 #include "MediaEngineConfigurationFactory.h"
+#include "Settings.h"
 #include <wtf/HashSet.h>
 
 namespace WebCore {
 
 static const HashSet<String>& bucketMIMETypes()
@@ -154,11 +159,11 @@
         return false;
 
     return true;
 }
 
-void MediaCapabilities::decodingInfo(MediaDecodingConfiguration&& configuration, Ref<DeferredPromise>&& promise)
+void MediaCapabilities::decodingInfo(Document& document, MediaDecodingConfiguration&& configuration, Ref<DeferredPromise>&& promise)
 {
     // 2.4 Media Capabilities Interface
     // https://wicg.github.io/media-capabilities/#media-capabilities-interface
 
     // 1. If configuration is not a valid MediaConfiguration, return a Promise rejected with a TypeError.
@@ -167,10 +172,13 @@
     if (!isValidMediaConfiguration(configuration)) {
         promise->reject(TypeError);
         return;
     }
 
+    if (!document.settings().mediaCapabilitiesExtensionsEnabled() && configuration.video)
+        configuration.video.value().alphaChannel.reset();
+
     // 4. Let p be a new promise.
     // 5. In parallel, run the create a MediaCapabilitiesInfo algorithm with configuration and resolve p with its result.
     // 6. Return p.
     m_taskQueue.enqueueTask([configuration = WTFMove(configuration), promise = WTFMove(promise)] () mutable {
 
@@ -185,11 +193,11 @@
             // configuration in a power efficient manner, set powerEfficient to
             // true. Otherwise set it to false. The user agent SHOULD NOT take into
             // consideration the current power source in order to determine the
             // decoding power efficiency unless the device’s power source has side
             // effects such as enabling different decoding modules.
-            promise->resolve<IDLDictionary<MediaCapabilitiesInfo>>(WTFMove(info));
+            promise->resolve<IDLDictionary<MediaCapabilitiesDecodingInfo>>(WTFMove(info));
         };
 
         MediaEngineConfigurationFactory::createDecodingConfiguration(WTFMove(configuration), WTFMove(callback));
     });
 }
@@ -226,11 +234,11 @@
             // powerEfficient to true. Otherwise set it to false. The user agent
             // SHOULD NOT take into consideration the current power source in
             // order to determine the encoding power efficiency unless the
             // device’s power source has side effects such as enabling different
             // encoding modules.
-            promise->resolve<IDLDictionary<MediaCapabilitiesInfo>>(WTFMove(info));
+            promise->resolve<IDLDictionary<MediaCapabilitiesEncodingInfo>>(WTFMove(info));
         };
 
         MediaEngineConfigurationFactory::createEncodingConfiguration(WTFMove(configuration), WTFMove(callback));
 
     });
