diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/ReferrerPolicy.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/ReferrerPolicy.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/ReferrerPolicy.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/ReferrerPolicy.cpp
@@ -24,10 +24,11 @@
 
 #include "config.h"
 #include "ReferrerPolicy.h"
 
 #include "HTTPParsers.h"
+#include <wtf/Optional.h>
 
 namespace WebCore {
 
 enum class ShouldParseLegacyKeywords { No, Yes };
 
@@ -79,11 +80,39 @@
         }
         return result;
     }
     case ReferrerPolicySource::MetaTag:
         return parseReferrerPolicyToken(policyString, ShouldParseLegacyKeywords::Yes);
+    case ReferrerPolicySource::ReferrerPolicyAttribute:
+        return parseReferrerPolicyToken(policyString, ShouldParseLegacyKeywords::No);
     }
     ASSERT_NOT_REACHED();
     return WTF::nullopt;
 }
 
+String referrerPolicyToString(const ReferrerPolicy& referrerPolicy)
+{
+    switch (referrerPolicy) {
+    case ReferrerPolicy::NoReferrer:
+        return "no-referrer"_s;
+    case ReferrerPolicy::UnsafeUrl:
+        return "unsafe-url"_s;
+    case ReferrerPolicy::Origin:
+        return "origin"_s;
+    case ReferrerPolicy::OriginWhenCrossOrigin:
+        return "origin-when-cross-origin"_s;
+    case ReferrerPolicy::SameOrigin:
+        return "same-origin"_s;
+    case ReferrerPolicy::StrictOrigin:
+        return "strict-origin"_s;
+    case ReferrerPolicy::StrictOriginWhenCrossOrigin:
+        return "strict-origin-when-cross-origin"_s;
+    case ReferrerPolicy::NoReferrerWhenDowngrade:
+        return "no-referrer-when-downgrade"_s;
+    case ReferrerPolicy::EmptyString:
+        return { };
+    }
+    ASSERT_NOT_REACHED();
+    return { };
+}
+
 } // namespace WebCore
