diff a/modules/javafx.web/src/main/native/Tools/TestRunnerShared/UIScriptContext/UIScriptController.h b/modules/javafx.web/src/main/native/Tools/TestRunnerShared/UIScriptContext/UIScriptController.h
--- a/modules/javafx.web/src/main/native/Tools/TestRunnerShared/UIScriptContext/UIScriptController.h
+++ b/modules/javafx.web/src/main/native/Tools/TestRunnerShared/UIScriptContext/UIScriptController.h
@@ -30,10 +30,12 @@
 #include <JavaScriptCore/JSRetainPtr.h>
 #include <wtf/Optional.h>
 #include <wtf/Ref.h>
 
 OBJC_CLASS NSUndoManager;
+OBJC_CLASS NSView;
+OBJC_CLASS UIView;
 
 namespace WebCore {
 class FloatRect;
 }
 
@@ -50,194 +52,268 @@
 
 DeviceOrientation* toDeviceOrientation(JSContextRef, JSValueRef);
 
 class UIScriptController : public JSWrappable {
 public:
-    static Ref<UIScriptController> create(UIScriptContext& context)
-    {
-        return adoptRef(*new UIScriptController(context));
-    }
+    static Ref<UIScriptController> create(UIScriptContext&);
+
+    void uiScriptComplete(JSStringRef result);
+
+    void notImplemented() const { RELEASE_ASSERT_NOT_REACHED(); }
 
     void contextDestroyed();
-    void checkForOutstandingCallbacks();
+    virtual void checkForOutstandingCallbacks() { /* notImplemented(); */ }
 
     void makeWindowObject(JSContextRef, JSObjectRef windowObject, JSValueRef* exception);
 
-    void doAsyncTask(JSValueRef callback);
-    void doAfterPresentationUpdate(JSValueRef callback);
-    void doAfterNextStablePresentationUpdate(JSValueRef callback);
-    void doAfterVisibleContentRectUpdate(JSValueRef callback);
+    // Transaction helpers
 
-    void zoomToScale(double scale, JSValueRef callback);
-    void setViewScale(double);
-    void setMinimumEffectiveWidth(double);
+    virtual void doAsyncTask(JSValueRef callback) { notImplemented(); }
+    virtual void doAfterPresentationUpdate(JSValueRef callback) { doAsyncTask(callback); }
+    virtual void doAfterNextStablePresentationUpdate(JSValueRef callback) { doAsyncTask(callback); }
+    virtual void ensurePositionInformationIsUpToDateAt(long x, long y, JSValueRef callback) { doAsyncTask(callback); }
+    virtual void doAfterVisibleContentRectUpdate(JSValueRef callback) { doAsyncTask(callback); }
 
-    void resignFirstResponder();
+    virtual void doAfterDoubleTapDelay(JSValueRef callback) { doAsyncTask(callback); }
 
-    void simulateAccessibilitySettingsChangeNotification(JSValueRef callback);
+    // Preferences
 
-    void touchDownAtPoint(long x, long y, long touchCount, JSValueRef callback);
-    void liftUpAtPoint(long x, long y, long touchCount, JSValueRef callback);
-    void singleTapAtPoint(long x, long y, JSValueRef callback);
-    void singleTapAtPointWithModifiers(long x, long y, JSValueRef modifierArray, JSValueRef callback);
-    void doubleTapAtPoint(long x, long y, JSValueRef callback);
-    void dragFromPointToPoint(long startX, long startY, long endX, long endY, double durationSeconds, JSValueRef callback);
+    virtual void overridePreference(JSStringRef preference, JSStringRef value) { notImplemented(); }
 
-    void stylusDownAtPoint(long x, long y, float azimuthAngle, float altitudeAngle, float pressure, JSValueRef callback);
-    void stylusMoveToPoint(long x, long y, float azimuthAngle, float altitudeAngle, float pressure, JSValueRef callback);
-    void stylusUpAtPoint(long x, long y, JSValueRef callback);
-    void stylusTapAtPoint(long x, long y, float azimuthAngle, float altitudeAngle, float pressure, JSValueRef callback);
-    void stylusTapAtPointWithModifiers(long x, long y, float azimuthAngle, float altitudeAngle, float pressure, JSValueRef modifierArray, JSValueRef callback);
+    // Zooming
 
-    void longPressAtPoint(long x, long y, JSValueRef callback);
+    virtual void zoomToScale(double scale, JSValueRef callback) { notImplemented(); }
+    virtual void immediateZoomToScale(double scale) { notImplemented(); }
+    virtual void setViewScale(double) { notImplemented(); }
+    virtual double zoomScale() const { notImplemented(); return 1; }
+    virtual double minimumZoomScale() const { notImplemented(); return 1; }
+    virtual double maximumZoomScale() const { notImplemented(); return 1; }
 
-    void sendEventStream(JSStringRef eventsJSON, JSValueRef callback);
+    // Viewports
 
-    void enterText(JSStringRef);
-    void typeCharacterUsingHardwareKeyboard(JSStringRef character, JSValueRef callback);
+    virtual void setMinimumEffectiveWidth(double) { notImplemented(); }
+    virtual void setAllowsViewportShrinkToFit(bool) { notImplemented(); }
 
-    void keyDown(JSStringRef character, JSValueRef modifierArray);
-    void toggleCapsLock(JSValueRef callback);
+    virtual Optional<bool> stableStateOverride() const { notImplemented(); return WTF::nullopt; }
+    virtual void setStableStateOverride(Optional<bool>) { notImplemented(); }
 
-    void keyboardAccessoryBarNext();
-    void keyboardAccessoryBarPrevious();
+    virtual JSObjectRef contentVisibleRect() const { notImplemented(); return nullptr; }
 
-    void applyAutocorrection(JSStringRef newString, JSStringRef oldString, JSValueRef callback);
+    virtual void setSafeAreaInsets(double top, double right, double bottom, double left) { notImplemented(); }
 
-    void dismissFormAccessoryView();
-    void selectFormAccessoryPickerRow(long);
-    JSRetainPtr<JSStringRef> textContentType() const;
-    JSRetainPtr<JSStringRef> selectFormPopoverTitle() const;
-    JSRetainPtr<JSStringRef> formInputLabel() const;
-    void setTimePickerValue(long hour, long minute);
+    // View Parenting and Visibility
 
-    void setShareSheetCompletesImmediatelyWithResolution(bool resolved);
+    virtual void becomeFirstResponder() { notImplemented(); }
+    virtual void resignFirstResponder() { notImplemented(); }
 
-    bool isShowingDataListSuggestions() const;
+    virtual void firstResponderSuppressionForWebView(bool) { notImplemented(); }
+    virtual void makeWindowContentViewFirstResponder() { notImplemented(); }
+    virtual bool isWindowContentViewFirstResponder() const { notImplemented(); return false; }
 
-    JSObjectRef contentsOfUserInterfaceItem(JSStringRef) const;
-    void overridePreference(JSStringRef preference, JSStringRef value);
+    virtual void removeViewFromWindow(JSValueRef) { notImplemented(); }
+    virtual void addViewToWindow(JSValueRef) { notImplemented(); }
 
-    bool isPresentingModally() const;
+    // Compositing
 
-    double contentOffsetX() const;
-    double contentOffsetY() const;
+    virtual JSObjectRef propertiesOfLayerWithID(uint64_t layerID) const { notImplemented(); return nullptr; }
 
-    void scrollToOffset(long x, long y);
+    // Scrolling
 
-    void immediateScrollToOffset(long x, long y);
-    void immediateZoomToScale(double scale);
+    virtual bool scrollUpdatesDisabled() const { notImplemented(); return false; }
+    virtual void setScrollUpdatesDisabled(bool) { notImplemented(); }
 
-    void beginBackSwipe(JSValueRef callback);
-    void completeBackSwipe(JSValueRef callback);
+    virtual void scrollToOffset(long x, long y) { notImplemented(); }
 
-    void setDidStartFormControlInteractionCallback(JSValueRef);
-    JSValueRef didStartFormControlInteractionCallback() const;
+    virtual void immediateScrollToOffset(long x, long y) { notImplemented(); }
+    virtual void immediateScrollElementAtContentPointToOffset(long x, long y, long xScrollOffset, long yScrollOffset) { notImplemented(); }
 
-    void setDidEndFormControlInteractionCallback(JSValueRef);
-    JSValueRef didEndFormControlInteractionCallback() const;
+    virtual double contentOffsetX() const { notImplemented(); return 0; }
+    virtual double contentOffsetY() const { notImplemented(); return 0; }
 
-    void setDidShowForcePressPreviewCallback(JSValueRef);
-    JSValueRef didShowForcePressPreviewCallback() const;
+    virtual JSRetainPtr<JSStringRef> scrollingTreeAsText() const { notImplemented(); return nullptr; }
 
-    void setDidDismissForcePressPreviewCallback(JSValueRef);
-    JSValueRef didDismissForcePressPreviewCallback() const;
+    // Touches
 
-    void setWillBeginZoomingCallback(JSValueRef);
-    JSValueRef willBeginZoomingCallback() const;
+    virtual void touchDownAtPoint(long x, long y, long touchCount, JSValueRef callback) { notImplemented(); }
+    virtual void liftUpAtPoint(long x, long y, long touchCount, JSValueRef callback) { notImplemented(); }
+    virtual void singleTapAtPoint(long x, long y, JSValueRef callback) { notImplemented(); }
+    virtual void singleTapAtPointWithModifiers(long x, long y, JSValueRef modifierArray, JSValueRef callback) { notImplemented(); }
+    virtual void doubleTapAtPoint(long x, long y, float delay, JSValueRef callback) { notImplemented(); }
+    virtual void dragFromPointToPoint(long startX, long startY, long endX, long endY, double durationSeconds, JSValueRef callback) { notImplemented(); }
+    virtual void longPressAtPoint(long x, long y, JSValueRef callback) { notImplemented(); }
 
-    void setDidEndZoomingCallback(JSValueRef);
-    JSValueRef didEndZoomingCallback() const;
+    // Keyboard
 
-    void setDidShowKeyboardCallback(JSValueRef);
-    JSValueRef didShowKeyboardCallback() const;
+    virtual void enterText(JSStringRef) { notImplemented(); }
+    virtual void typeCharacterUsingHardwareKeyboard(JSStringRef character, JSValueRef callback) { notImplemented(); }
 
-    void setDidHideKeyboardCallback(JSValueRef);
-    JSValueRef didHideKeyboardCallback() const;
+    virtual void keyDown(JSStringRef character, JSValueRef modifierArray) { notImplemented(); }
+    virtual void toggleCapsLock(JSValueRef callback) { notImplemented(); }
 
-    bool isShowingKeyboard() const;
+    virtual void rawKeyDown(JSStringRef) { notImplemented(); }
+    virtual void rawKeyUp(JSStringRef) { notImplemented(); }
 
-    void setDidEndScrollingCallback(JSValueRef);
-    JSValueRef didEndScrollingCallback() const;
+    virtual void keyboardAccessoryBarNext() { notImplemented(); }
+    virtual void keyboardAccessoryBarPrevious() { notImplemented(); }
 
-    void playBackEventStream(JSStringRef stream, JSValueRef callback);
+    virtual void applyAutocorrection(JSStringRef newString, JSStringRef oldString, JSValueRef callback) { notImplemented(); }
 
-    double zoomScale() const;
-    double minimumZoomScale() const;
-    double maximumZoomScale() const;
+    virtual bool isShowingKeyboard() const { notImplemented(); return false; }
+    virtual bool hasInputSession() const { notImplemented(); return false; }
 
-    Optional<bool> stableStateOverride() const;
-    void setStableStateOverride(Optional<bool>);
+    virtual void setHardwareKeyboardAttached(bool) { }
 
-    JSObjectRef contentVisibleRect() const;
+    virtual void setKeyboardInputModeIdentifier(JSStringRef) { notImplemented(); }
 
-    JSObjectRef textSelectionRangeRects() const;
-    JSObjectRef textSelectionCaretRect() const;
-    JSObjectRef selectionStartGrabberViewRect() const;
-    JSObjectRef selectionEndGrabberViewRect() const;
-    JSObjectRef selectionCaretViewRect() const;
-    JSObjectRef selectionRangeViewRects() const;
-    JSObjectRef calendarType() const;
-    void setDefaultCalendarType(JSStringRef calendarIdentifier);
-    JSObjectRef inputViewBounds() const;
+    virtual void replaceTextAtRange(JSStringRef, int location, int length) { notImplemented(); }
+    virtual void removeAllDynamicDictionaries() { notImplemented(); }
 
-    void setKeyboardInputModeIdentifier(JSStringRef);
+    // Stylus
 
-    void replaceTextAtRange(JSStringRef, int location, int length);
-    void removeAllDynamicDictionaries();
+    virtual void stylusDownAtPoint(long x, long y, float azimuthAngle, float altitudeAngle, float pressure, JSValueRef callback) { notImplemented(); }
+    virtual void stylusMoveToPoint(long x, long y, float azimuthAngle, float altitudeAngle, float pressure, JSValueRef callback) { notImplemented(); }
+    virtual void stylusUpAtPoint(long x, long y, JSValueRef callback) { notImplemented(); }
+    virtual void stylusTapAtPoint(long x, long y, float azimuthAngle, float altitudeAngle, float pressure, JSValueRef callback) { notImplemented(); }
+    virtual void stylusTapAtPointWithModifiers(long x, long y, float azimuthAngle, float altitudeAngle, float pressure, JSValueRef modifierArray, JSValueRef callback) { notImplemented(); }
 
-    JSRetainPtr<JSStringRef> scrollingTreeAsText() const;
+    // Event Stream
 
-    JSObjectRef propertiesOfLayerWithID(uint64_t layerID) const;
+    virtual void sendEventStream(JSStringRef eventsJSON, JSValueRef callback) { notImplemented(); }
+    virtual void playBackEventStream(JSStringRef stream, JSValueRef callback) { notImplemented(); }
 
-    void uiScriptComplete(JSStringRef result);
+    // Form Controls
+
+    virtual void dismissFilePicker(JSValueRef callback) { notImplemented(); }
+    virtual void dismissFormAccessoryView() { notImplemented(); }
+    virtual void selectFormAccessoryPickerRow(long) { notImplemented(); }
+    virtual JSRetainPtr<JSStringRef> textContentType() const { notImplemented(); return nullptr; }
+    virtual JSRetainPtr<JSStringRef> selectFormPopoverTitle() const { notImplemented(); return nullptr; }
+    virtual JSRetainPtr<JSStringRef> formInputLabel() const { notImplemented(); return nullptr; }
+    virtual void setTimePickerValue(long hour, long minute) { notImplemented(); }
+    virtual bool isShowingDataListSuggestions() const { notImplemented(); return false; }
+    virtual JSObjectRef calendarType() const { notImplemented(); return nullptr; }
+    virtual void setDefaultCalendarType(JSStringRef calendarIdentifier) { notImplemented(); }
+    virtual JSObjectRef inputViewBounds() const { notImplemented(); return nullptr; }
+
+    // Share Sheet
+
+    virtual void setShareSheetCompletesImmediatelyWithResolution(bool resolved) { notImplemented(); }
+
+    // Find in Page
+
+    virtual void findString(JSStringRef, unsigned long options, unsigned long maxCount) { notImplemented(); }
+
+    // Accessibility
+
+    virtual void simulateAccessibilitySettingsChangeNotification(JSValueRef callback) { notImplemented(); }
+    virtual void retrieveSpeakSelectionContent(JSValueRef) { notImplemented(); }
+    virtual JSRetainPtr<JSStringRef> accessibilitySpeakSelectionContent() const { notImplemented(); return nullptr; }
+    virtual JSObjectRef contentsOfUserInterfaceItem(JSStringRef) const { notImplemented(); return nullptr; }
+
+    // Swipe
+
+    virtual void beginBackSwipe(JSValueRef callback) { notImplemented(); }
+    virtual void completeBackSwipe(JSValueRef callback) { notImplemented(); }
+
+    // Child View Controllers
+
+    virtual bool isShowingPopover() const { notImplemented(); return false; }
+    virtual bool isPresentingModally() const { notImplemented(); return false; }
+
+    // Context Menus
+
+    virtual bool isDismissingMenu() const { notImplemented(); return false; }
+    virtual bool isShowingMenu() const { notImplemented(); return false; }
+    virtual JSObjectRef rectForMenuAction(JSStringRef action) const { notImplemented(); return nullptr; }
+    virtual JSObjectRef menuRect() const { notImplemented(); return nullptr; }
 
-    void retrieveSpeakSelectionContent(JSValueRef);
-    JSRetainPtr<JSStringRef> accessibilitySpeakSelectionContent() const;
+    // Selection
 
-    void simulateRotation(DeviceOrientation*, JSValueRef);
-    void simulateRotationLikeSafari(DeviceOrientation*, JSValueRef);
+    virtual JSObjectRef textSelectionRangeRects() const { notImplemented(); return nullptr; }
+    virtual JSObjectRef textSelectionCaretRect() const { notImplemented(); return nullptr; }
+    virtual JSObjectRef selectionStartGrabberViewRect() const { notImplemented(); return nullptr; }
+    virtual JSObjectRef selectionEndGrabberViewRect() const { notImplemented(); return nullptr; }
+    virtual JSObjectRef selectionCaretViewRect() const { notImplemented(); return nullptr; }
+    virtual JSObjectRef selectionRangeViewRects() const { notImplemented(); return nullptr; }
 
-    void findString(JSStringRef, unsigned long options, unsigned long maxCount);
+    // Rotation
 
-    // These use a callback to allow the client to know when view visibility state updates get to the web process.
-    void removeViewFromWindow(JSValueRef);
-    void addViewToWindow(JSValueRef);
+    virtual void simulateRotation(DeviceOrientation*, JSValueRef) { notImplemented(); }
+    virtual void simulateRotationLikeSafari(DeviceOrientation*, JSValueRef) { notImplemented(); }
 
-    void setSafeAreaInsets(double top, double right, double bottom, double left);
+    // Editable Images
 
-    void firstResponderSuppressionForWebView(bool);
-    void makeWindowContentViewFirstResponder();
-    bool isWindowContentViewFirstResponder() const;
+    virtual void drawSquareInEditableImage() { notImplemented(); }
+    virtual long numberOfStrokesInEditableImage() { notImplemented(); return 0; }
 
-    void drawSquareInEditableImage();
-    long numberOfStrokesInEditableImage();
+    // Undo/Redo
 
-    JSRetainPtr<JSStringRef> lastUndoLabel() const;
-    JSRetainPtr<JSStringRef> firstRedoLabel() const;
+    virtual JSRetainPtr<JSStringRef> lastUndoLabel() const { notImplemented(); return nullptr; }
+    virtual JSRetainPtr<JSStringRef> firstRedoLabel() const { notImplemented(); return nullptr; }
 
-    JSObjectRef attachmentInfo(JSStringRef attachmentIdentifier);
+    // Attachment Elements
 
-private:
-    UIScriptController(UIScriptContext&);
+    virtual JSObjectRef attachmentInfo(JSStringRef attachmentIdentifier) { notImplemented(); return nullptr; }
+
+    // Callbacks
+
+    virtual void setDidStartFormControlInteractionCallback(JSValueRef);
+    JSValueRef didStartFormControlInteractionCallback() const;
+
+    virtual void setDidEndFormControlInteractionCallback(JSValueRef);
+    JSValueRef didEndFormControlInteractionCallback() const;
+
+    virtual void setDidShowForcePressPreviewCallback(JSValueRef);
+    JSValueRef didShowForcePressPreviewCallback() const;
+
+    virtual void setDidDismissForcePressPreviewCallback(JSValueRef);
+    JSValueRef didDismissForcePressPreviewCallback() const;
+
+    virtual void setWillBeginZoomingCallback(JSValueRef);
+    JSValueRef willBeginZoomingCallback() const;
+
+    virtual void setDidEndZoomingCallback(JSValueRef);
+    JSValueRef didEndZoomingCallback() const;
+
+    virtual void setWillCreateNewPageCallback(JSValueRef);
+    JSValueRef willCreateNewPageCallback() const;
+
+    virtual void setDidShowKeyboardCallback(JSValueRef);
+    JSValueRef didShowKeyboardCallback() const;
+
+    virtual void setDidHideKeyboardCallback(JSValueRef);
+    JSValueRef didHideKeyboardCallback() const;
+
+    virtual void setDidHideMenuCallback(JSValueRef);
+    JSValueRef didHideMenuCallback() const;
+    virtual void setDidShowMenuCallback(JSValueRef);
+    JSValueRef didShowMenuCallback() const;
+
+    virtual void setDidDismissPopoverCallback(JSValueRef);
+    JSValueRef didDismissPopoverCallback() const;
+    virtual void setWillPresentPopoverCallback(JSValueRef);
+    JSValueRef willPresentPopoverCallback() const;
+
+    virtual void setDidEndScrollingCallback(JSValueRef);
+    JSValueRef didEndScrollingCallback() const;
+
+protected:
+    explicit UIScriptController(UIScriptContext&);
 
     UIScriptContext* context() { return m_context; }
 
-    void platformSetDidStartFormControlInteractionCallback();
-    void platformSetDidEndFormControlInteractionCallback();
-    void platformSetDidShowForcePressPreviewCallback();
-    void platformSetDidDismissForcePressPreviewCallback();
-    void platformSetWillBeginZoomingCallback();
-    void platformSetDidEndZoomingCallback();
-    void platformSetDidShowKeyboardCallback();
-    void platformSetDidHideKeyboardCallback();
-    void platformSetDidEndScrollingCallback();
-    void platformClearAllCallbacks();
-    void platformPlayBackEventStream(JSStringRef, JSValueRef);
+    virtual void clearAllCallbacks() { /* notImplemented(); */ }
 
 #if PLATFORM(COCOA)
-    NSUndoManager *platformUndoManager() const;
+    virtual NSUndoManager *platformUndoManager() const { notImplemented(); return nullptr; }
+#endif
+
+#if PLATFORM(IOS_FAMILY)
+    virtual UIView *platformContentView() const { notImplemented(); return nullptr; }
+#endif
+#if PLATFORM(MAC)
+    virtual NSView *platformContentView() const { notImplemented(); return nullptr; }
 #endif
 
     JSClassRef wrapperClass() final;
 
     JSObjectRef objectFromRect(const WebCore::FloatRect&) const;
