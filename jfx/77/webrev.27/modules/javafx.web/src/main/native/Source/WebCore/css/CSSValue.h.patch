diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSValue.h b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSValue.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSValue.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSValue.h
@@ -109,10 +109,11 @@
 #if ENABLE(CSS_PAINTING_API)
     bool isPaintImageValue() const { return m_classType == PaintImageClass; }
 #endif
     bool isContentDistributionValue() const { return m_classType == CSSContentDistributionClass; }
     bool isGridAutoRepeatValue() const { return m_classType == GridAutoRepeatClass; }
+    bool isGridIntegerRepeatValue() const { return m_classType == GridIntegerRepeatClass; }
     bool isGridTemplateAreasValue() const { return m_classType == GridTemplateAreasClass; }
     bool isGridLineNamesValue() const { return m_classType == GridLineNamesClass; }
     bool isUnicodeRangeValue() const { return m_classType == UnicodeRangeClass; }
 
     bool isCustomIdentValue() const { return m_classType == CustomIdentClass; }
@@ -198,10 +199,11 @@
         // as a list.
         ValueListClass,
         ImageSetClass,
         GridLineNamesClass,
         GridAutoRepeatClass,
+        GridIntegerRepeatClass,
         // Do not append non-list class types here.
     };
 
 public:
     static const size_t ValueListSeparatorBits = 2;
@@ -275,11 +277,11 @@
 inline bool compareCSSValue(const Ref<CSSValueType>& first, const Ref<CSSValueType>& second)
 {
     return first.get().equals(second);
 }
 
-typedef HashMap<AtomicString, RefPtr<CSSCustomPropertyValue>> CustomPropertyValueMap;
+typedef HashMap<AtomString, RefPtr<CSSCustomPropertyValue>> CustomPropertyValueMap;
 
 } // namespace WebCore
 
 #define SPECIALIZE_TYPE_TRAITS_CSS_VALUE(ToValueTypeName, predicate) \
 SPECIALIZE_TYPE_TRAITS_BEGIN(WebCore::ToValueTypeName) \
