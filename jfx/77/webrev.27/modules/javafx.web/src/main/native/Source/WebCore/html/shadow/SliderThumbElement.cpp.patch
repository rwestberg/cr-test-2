diff a/modules/javafx.web/src/main/native/Source/WebCore/html/shadow/SliderThumbElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/shadow/SliderThumbElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/shadow/SliderThumbElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/shadow/SliderThumbElement.cpp
@@ -189,11 +189,11 @@
         return;
 
     double percentageOffset = sliderPosition(input).toDouble();
     LayoutUnit availableExtent = isVertical ? track->contentHeight() : track->contentWidth();
     availableExtent -= isVertical ? thumb->height() : thumb->width();
-    LayoutUnit offset = percentageOffset * availableExtent;
+    LayoutUnit offset { percentageOffset * availableExtent };
     LayoutPoint thumbLocation = thumb->location();
     if (isVertical)
         thumbLocation.setY(thumbLocation.y() + track->contentHeight() - thumb->height() - offset);
     else if (style().isLeftToRightDirection())
         thumbLocation.setX(thumbLocation.x() + offset);
@@ -299,11 +299,11 @@
     const LayoutUnit snappingThreshold = renderer()->theme().sliderTickSnappingThreshold();
     if (snappingThreshold > 0) {
         if (Optional<Decimal> closest = input->findClosestTickMarkValue(value)) {
             double closestFraction = stepRange.proportionFromValue(*closest).toDouble();
             double closestRatio = isVertical || !isLeftToRightDirection ? 1.0 - closestFraction : closestFraction;
-            LayoutUnit closestPosition = trackLength * closestRatio;
+            LayoutUnit closestPosition { trackLength * closestRatio };
             if ((closestPosition - position).abs() <= snappingThreshold)
                 value = *closest;
         }
     }
 #endif
@@ -354,11 +354,11 @@
         return;
     }
 
     MouseEvent& mouseEvent = downcast<MouseEvent>(event);
     bool isLeftButton = mouseEvent.button() == LeftButton;
-    const AtomicString& eventType = mouseEvent.type();
+    const AtomString& eventType = mouseEvent.type();
 
     // We intentionally do not call event->setDefaultHandled() here because
     // MediaControlTimelineElement::defaultEventHandler() wants to handle these
     // mouse events.
     if (eventType == eventNames().mousedownEvent && isLeftButton) {
@@ -521,11 +521,11 @@
         touchEvent.setDefaultHandled();
         HTMLDivElement::defaultEventHandler(touchEvent);
         return;
     }
 
-    const AtomicString& eventType = touchEvent.type();
+    const AtomString& eventType = touchEvent.type();
     if (eventType == eventNames().touchstartEvent) {
         handleTouchStart(touchEvent);
         return;
     }
     if (eventType == eventNames().touchendEvent || eventType == eventNames().touchcancelEvent) {
@@ -592,12 +592,12 @@
 
 Optional<ElementStyle> SliderThumbElement::resolveCustomStyle(const RenderStyle&, const RenderStyle* hostStyle)
 {
     // This doesn't actually compute style. This is just a hack to pick shadow pseudo id when host style is known.
 
-    static NeverDestroyed<const AtomicString> sliderThumbShadowPseudoId("-webkit-slider-thumb", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<const AtomicString> mediaSliderThumbShadowPseudoId("-webkit-media-slider-thumb", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> sliderThumbShadowPseudoId("-webkit-slider-thumb", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> mediaSliderThumbShadowPseudoId("-webkit-media-slider-thumb", AtomString::ConstructFromLiteral);
 
     if (!hostStyle)
         return WTF::nullopt;
 
     switch (hostStyle->appearance()) {
@@ -614,11 +614,11 @@
     }
 
     return WTF::nullopt;
 }
 
-const AtomicString& SliderThumbElement::shadowPseudoId() const
+const AtomString& SliderThumbElement::shadowPseudoId() const
 {
     return m_shadowPseudoId;
 }
 
 Ref<Element> SliderThumbElement::cloneElementWithoutAttributesAndChildren(Document& targetDocument)
@@ -646,12 +646,12 @@
 
 Optional<ElementStyle> SliderContainerElement::resolveCustomStyle(const RenderStyle&, const RenderStyle* hostStyle)
 {
     // This doesn't actually compute style. This is just a hack to pick shadow pseudo id when host style is known.
 
-    static NeverDestroyed<const AtomicString> mediaSliderContainer("-webkit-media-slider-container", AtomicString::ConstructFromLiteral);
-    static NeverDestroyed<const AtomicString> sliderContainer("-webkit-slider-container", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> mediaSliderContainer("-webkit-media-slider-container", AtomString::ConstructFromLiteral);
+    static NeverDestroyed<const AtomString> sliderContainer("-webkit-slider-container", AtomString::ConstructFromLiteral);
 
     if (!hostStyle)
         return WTF::nullopt;
 
     switch (hostStyle->appearance()) {
@@ -668,11 +668,11 @@
     }
 
     return WTF::nullopt;
 }
 
-const AtomicString& SliderContainerElement::shadowPseudoId() const
+const AtomString& SliderContainerElement::shadowPseudoId() const
 {
     return m_shadowPseudoId;
 }
 
 }
