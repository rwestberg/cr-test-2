diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/Threading.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/Threading.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/Threading.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/Threading.cpp
@@ -34,11 +34,11 @@
 #include <wtf/PrintStream.h>
 #include <wtf/RandomNumberSeed.h>
 #include <wtf/ThreadGroup.h>
 #include <wtf/ThreadMessage.h>
 #include <wtf/ThreadingPrimitives.h>
-#include <wtf/text/AtomicStringTable.h>
+#include <wtf/text/AtomStringTable.h>
 #include <wtf/text/StringView.h>
 
 #if HAVE(QOS_CLASSES)
 #include <bmalloc/bmalloc.h>
 #endif
@@ -56,22 +56,34 @@
         , entryPoint(WTFMove(entryPoint))
         , thread(WTFMove(thread))
     {
     }
 
+    enum class Stage { Start, EstablishedHandle, Initialized };
+    Stage stage { Stage::Start };
     const char* name;
     Function<void()> entryPoint;
     Ref<Thread> thread;
     Mutex mutex;
-    enum class Stage { Start, EstablishedHandle, Initialized };
-    Stage stage { Stage::Start };
 
 #if !HAVE(STACK_BOUNDS_FOR_NEW_THREAD)
     ThreadCondition condition;
 #endif
 };
 
+HashSet<Thread*>& Thread::allThreads(const LockHolder&)
+{
+    static NeverDestroyed<HashSet<Thread*>> allThreads;
+    return allThreads;
+}
+
+Lock& Thread::allThreadsMutex()
+{
+    static Lock mutex;
+    return mutex;
+}
+
 const char* Thread::normalizeThreadName(const char* threadName)
 {
 #if HAVE(PTHREAD_SETNAME_NP)
     return threadName;
 #else
@@ -101,16 +113,16 @@
 {
     if (m_stack.isEmpty())
         m_stack = StackBounds::currentThreadStackBounds();
     m_savedLastStackTop = stack().origin();
 
-    m_currentAtomicStringTable = &m_defaultAtomicStringTable;
+    m_currentAtomStringTable = &m_defaultAtomStringTable;
 #if USE(WEB_THREAD)
-    // On iOS, one AtomicStringTable is shared between the main UI thread and the WebThread.
+    // On iOS, one AtomStringTable is shared between the main UI thread and the WebThread.
     if (isWebThread() || isUIThread()) {
-        static NeverDestroyed<AtomicStringTable> sharedStringTable;
-        m_currentAtomicStringTable = &sharedStringTable.get();
+        static NeverDestroyed<AtomStringTable> sharedStringTable;
+        m_currentAtomStringTable = &sharedStringTable.get();
     }
 #endif
 }
 
 void Thread::entryPoint(NewThreadContext* newThreadContext)
@@ -166,10 +178,15 @@
         while (context->stage != NewThreadContext::Stage::Initialized)
             context->condition.wait(context->mutex);
 #endif
     }
 
+    {
+        LockHolder lock(allThreadsMutex());
+        allThreads(lock).add(&thread.get());
+    }
+
     ASSERT(!thread->stack().isEmpty());
     return thread;
 }
 
 static bool shouldRemoveThreadFromThreadGroup()
@@ -186,19 +203,24 @@
     return true;
 }
 
 void Thread::didExit()
 {
+    {
+        LockHolder lock(allThreadsMutex());
+        allThreads(lock).remove(this);
+    }
+
     if (shouldRemoveThreadFromThreadGroup()) {
         {
             Vector<std::shared_ptr<ThreadGroup>> threadGroups;
             {
                 auto locker = holdLock(m_mutex);
-                for (auto& threadGroup : m_threadGroups) {
+                for (auto& threadGroupPointerPair : m_threadGroupMap) {
                     // If ThreadGroup is just being destroyed,
                     // we do not need to perform unregistering.
-                    if (auto retained = threadGroup.lock())
+                    if (auto retained = threadGroupPointerPair.value.lock())
                         threadGroups.append(WTFMove(retained));
                 }
                 m_isShuttingDown = true;
             }
             for (auto& threadGroup : threadGroups) {
@@ -220,11 +242,11 @@
     UNUSED_PARAM(threadGroupLocker);
     auto locker = holdLock(m_mutex);
     if (m_isShuttingDown)
         return ThreadGroupAddResult::NotAdded;
     if (threadGroup.m_threads.add(*this).isNewEntry) {
-        m_threadGroups.append(threadGroup.weakFromThis());
+        m_threadGroupMap.add(&threadGroup, threadGroup.weakFromThis());
         return ThreadGroupAddResult::NewlyAdded;
     }
     return ThreadGroupAddResult::AlreadyAdded;
 }
 
@@ -232,15 +254,35 @@
 {
     UNUSED_PARAM(threadGroupLocker);
     auto locker = holdLock(m_mutex);
     if (m_isShuttingDown)
         return;
-    m_threadGroups.removeFirstMatching([&] (auto weakPtr) {
-        if (auto sharedPtr = weakPtr.lock())
-            return sharedPtr.get() == &threadGroup;
-        return false;
-    });
+    m_threadGroupMap.remove(&threadGroup);
+}
+
+unsigned Thread::numberOfThreadGroups()
+{
+    auto locker = holdLock(m_mutex);
+    return m_threadGroupMap.size();
+}
+
+bool Thread::exchangeIsCompilationThread(bool newValue)
+{
+    auto& thread = Thread::current();
+    bool oldValue = thread.m_isCompilationThread;
+    thread.m_isCompilationThread = newValue;
+    return oldValue;
+}
+
+void Thread::registerGCThread(GCThreadType gcThreadType)
+{
+    Thread::current().m_gcThreadType = static_cast<unsigned>(gcThreadType);
+}
+
+bool Thread::mayBeGCThread()
+{
+    return Thread::current().gcThreadType() != GCThreadType::None;
 }
 
 void Thread::setCurrentThreadIsUserInteractive(int relativePriority)
 {
 #if HAVE(QOS_CLASSES)
