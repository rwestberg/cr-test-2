diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCustomElementInterface.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCustomElementInterface.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCustomElementInterface.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCustomElementInterface.h
@@ -32,11 +32,11 @@
 #include <JavaScriptCore/Weak.h>
 #include <JavaScriptCore/WeakInlines.h>
 #include <wtf/Forward.h>
 #include <wtf/Function.h>
 #include <wtf/RefCounted.h>
-#include <wtf/text/AtomicStringHash.h>
+#include <wtf/text/AtomStringHash.h>
 
 namespace JSC {
 class JSObject;
 class PrivateName;
 }
@@ -55,11 +55,11 @@
     static Ref<JSCustomElementInterface> create(const QualifiedName& name, JSC::JSObject* callback, JSDOMGlobalObject* globalObject)
     {
         return adoptRef(*new JSCustomElementInterface(name, callback, globalObject));
     }
 
-    Ref<Element> constructElementWithFallback(Document&, const AtomicString&);
+    Ref<Element> constructElementWithFallback(Document&, const AtomString&);
     Ref<Element> constructElementWithFallback(Document&, const QualifiedName&);
 
     void upgradeElement(Element&);
 
     void setConnectedCallback(JSC::JSObject*);
@@ -73,12 +73,12 @@
     void setAdoptedCallback(JSC::JSObject*);
     bool hasAdoptedCallback() const { return !!m_adoptedCallback; }
     void invokeAdoptedCallback(Element&, Document& oldDocument, Document& newDocument);
 
     void setAttributeChangedCallback(JSC::JSObject* callback, const Vector<String>& observedAttributes);
-    bool observesAttribute(const AtomicString& name) const { return m_observedAttributes.contains(name); }
-    void invokeAttributeChangedCallback(Element&, const QualifiedName&, const AtomicString& oldValue, const AtomicString& newValue);
+    bool observesAttribute(const AtomString& name) const { return m_observedAttributes.contains(name); }
+    void invokeAttributeChangedCallback(Element&, const QualifiedName&, const AtomString& oldValue, const AtomString& newValue);
 
     ScriptExecutionContext* scriptExecutionContext() const { return ContextDestructionObserver::scriptExecutionContext(); }
     JSC::JSObject* constructor() { return m_constructor.get(); }
 
     const QualifiedName& name() const { return m_name; }
@@ -90,11 +90,11 @@
     virtual ~JSCustomElementInterface();
 
 private:
     JSCustomElementInterface(const QualifiedName&, JSC::JSObject* callback, JSDOMGlobalObject*);
 
-    RefPtr<Element> tryToConstructCustomElement(Document&, const AtomicString&);
+    RefPtr<Element> tryToConstructCustomElement(Document&, const AtomString&);
 
     void invokeCallback(Element&, JSC::JSObject* callback, const WTF::Function<void(JSC::ExecState*, JSDOMGlobalObject*, JSC::MarkedArgumentBuffer&)>& addArguments = [](JSC::ExecState*, JSDOMGlobalObject*, JSC::MarkedArgumentBuffer&) { });
 
     QualifiedName m_name;
     JSC::Weak<JSC::JSObject> m_constructor;
@@ -102,9 +102,9 @@
     JSC::Weak<JSC::JSObject> m_disconnectedCallback;
     JSC::Weak<JSC::JSObject> m_adoptedCallback;
     JSC::Weak<JSC::JSObject> m_attributeChangedCallback;
     Ref<DOMWrapperWorld> m_isolatedWorld;
     Vector<RefPtr<Element>, 1> m_constructionStack;
-    HashSet<AtomicString> m_observedAttributes;
+    HashSet<AtomString> m_observedAttributes;
 };
 
 } // namespace WebCore
