diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSONObject.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSONObject.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSONObject.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSONObject.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2009-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2009-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -62,11 +62,11 @@
 void JSONObject::finishCreation(VM& vm)
 {
     Base::finishCreation(vm);
     ASSERT(inherits(vm, info()));
 
-    putDirectWithoutTransition(vm, vm.propertyNames->toStringTagSymbol, jsString(&vm, "JSON"), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
+    putDirectWithoutTransition(vm, vm.propertyNames->toStringTagSymbol, jsString(vm, "JSON"), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
 }
 
 // PropertyNameForFunctionCall objects must be on the stack, since the JSValue that they create is not marked.
 class PropertyNameForFunctionCall {
 public:
@@ -203,28 +203,28 @@
 }
 
 JSValue PropertyNameForFunctionCall::value(ExecState* exec) const
 {
     if (!m_value) {
+        VM& vm = exec->vm();
         if (m_identifier)
-            m_value = jsString(exec, m_identifier->string());
+            m_value = jsString(vm, m_identifier->string());
         else {
-            VM& vm = exec->vm();
             if (m_number <= 9)
                 return vm.smallStrings.singleCharacterString(m_number + '0');
-            m_value = jsNontrivialString(&vm, vm.numericStrings.add(m_number));
+            m_value = jsNontrivialString(vm, vm.numericStrings.add(m_number));
         }
     }
     return m_value;
 }
 
 // ------------------------------ Stringifier --------------------------------
 
 Stringifier::Stringifier(ExecState* exec, JSValue replacer, JSValue space)
     : m_exec(exec)
     , m_replacer(replacer)
-    , m_arrayReplacerPropertyNames(&exec->vm(), PropertyNameMode::Strings, PrivateSymbolMode::Exclude)
+    , m_arrayReplacerPropertyNames(exec->vm(), PropertyNameMode::Strings, PrivateSymbolMode::Exclude)
 {
     VM& vm = exec->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     if (m_replacer.isObject()) {
@@ -245,12 +245,15 @@
                         auto* nameObject = jsCast<JSObject*>(name);
                         if (!nameObject->inherits<NumberObject>(vm) && !nameObject->inherits<StringObject>(vm))
                             continue;
                     } else if (!name.isNumber() && !name.isString())
                         continue;
-                    m_arrayReplacerPropertyNames.add(name.toString(exec)->toIdentifier(exec));
+                    JSString* propertyNameString = name.toString(exec);
                     RETURN_IF_EXCEPTION(scope, );
+                    auto propertyName = propertyNameString->toIdentifier(exec);
+                    RETURN_IF_EXCEPTION(scope, );
+                    m_arrayReplacerPropertyNames.add(WTFMove(propertyName));
                 }
             }
         }
     }
 
@@ -282,11 +285,11 @@
         throwOutOfMemoryError(m_exec, scope);
         return jsUndefined();
     }
     if (UNLIKELY(stringifyResult != StringifySucceeded))
         return jsUndefined();
-    RELEASE_AND_RETURN(scope, jsString(m_exec, result.toString()));
+    RELEASE_AND_RETURN(scope, jsString(vm, result.toString()));
 }
 
 ALWAYS_INLINE JSValue Stringifier::toJSON(JSValue baseValue, const PropertyNameForFunctionCall& propertyName)
 {
     VM& vm = m_exec->vm();
@@ -372,11 +375,11 @@
         else {
             double number = value.asNumber();
             if (!std::isfinite(number))
                 builder.appendLiteral("null");
             else
-                builder.appendECMAScriptNumber(number);
+                builder.appendNumber(number);
         }
         return StringifySucceeded;
     }
 
     if (value.isBigInt()) {
@@ -491,11 +494,11 @@
             builder.append('[');
         } else {
             if (stringifier.m_usingArrayReplacer)
                 m_propertyNames = stringifier.m_arrayReplacerPropertyNames.data();
             else {
-                PropertyNameArray objectPropertyNames(&vm, PropertyNameMode::Strings, PrivateSymbolMode::Exclude);
+                PropertyNameArray objectPropertyNames(vm, PropertyNameMode::Strings, PrivateSymbolMode::Exclude);
                 m_object->methodTable(vm)->getOwnPropertyNames(m_object, exec, objectPropertyNames, EnumerationMode());
                 RETURN_IF_EXCEPTION(scope, false);
                 m_propertyNames = objectPropertyNames.releaseData();
             }
             m_size = m_propertyNames->propertyNameVector().size();
@@ -700,11 +703,11 @@
                     outValue = inValue;
                 FALLTHROUGH;
             }
             case ArrayEndVisitMember: {
                 JSArray* array = jsCast<JSArray*>(markedStack.last());
-                JSValue filteredValue = callReviver(array, jsString(m_exec, String::number(indexStack.last())), outValue);
+                JSValue filteredValue = callReviver(array, jsString(vm, String::number(indexStack.last())), outValue);
                 RETURN_IF_EXCEPTION(scope, { });
                 if (filteredValue.isUndefined())
                     array->methodTable(vm)->deletePropertyByIndex(array, m_exec, indexStack.last());
                 else
                     array->putDirectIndex(m_exec, indexStack.last(), filteredValue, 0, PutDirectIndexShouldNotThrow);
@@ -720,11 +723,11 @@
                     return throwStackOverflowError(m_exec, scope);
 
                 JSObject* object = asObject(inValue);
                 markedStack.appendWithCrashOnOverflow(object);
                 indexStack.append(0);
-                propertyStack.append(PropertyNameArray(&vm, PropertyNameMode::Strings, PrivateSymbolMode::Exclude));
+                propertyStack.append(PropertyNameArray(vm, PropertyNameMode::Strings, PrivateSymbolMode::Exclude));
                 object->methodTable(vm)->getOwnPropertyNames(object, m_exec, propertyStack.last(), EnumerationMode());
                 RETURN_IF_EXCEPTION(scope, { });
             }
             objectStartVisitMember:
             FALLTHROUGH;
@@ -757,11 +760,11 @@
             }
             case ObjectEndVisitMember: {
                 JSObject* object = jsCast<JSObject*>(markedStack.last());
                 Identifier prop = propertyStack.last()[indexStack.last()];
                 PutPropertySlot slot(object);
-                JSValue filteredValue = callReviver(object, jsString(m_exec, prop.string()), outValue);
+                JSValue filteredValue = callReviver(object, jsString(vm, prop.string()), outValue);
                 RETURN_IF_EXCEPTION(scope, { });
                 if (filteredValue.isUndefined())
                     object->methodTable(vm)->deleteProperty(object, m_exec, prop);
                 else
                     object->methodTable(vm)->put(object, m_exec, prop, filteredValue, slot);
@@ -788,22 +791,19 @@
     }
     JSObject* finalHolder = constructEmptyObject(m_exec);
     PutPropertySlot slot(finalHolder);
     finalHolder->methodTable(vm)->put(finalHolder, m_exec, vm.propertyNames->emptyIdentifier, outValue, slot);
     RETURN_IF_EXCEPTION(scope, { });
-    RELEASE_AND_RETURN(scope, callReviver(finalHolder, jsEmptyString(m_exec), outValue));
+    RELEASE_AND_RETURN(scope, callReviver(finalHolder, jsEmptyString(vm), outValue));
 }
 
 // ECMA-262 v5 15.12.2
 EncodedJSValue JSC_HOST_CALL JSONProtoFuncParse(ExecState* exec)
 {
     VM& vm = exec->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
-
-    if (!exec->argumentCount())
-        return throwVMError(exec, scope, createError(exec, "JSON.parse requires at least one parameter"_s));
-    auto viewWithString = exec->uncheckedArgument(0).toString(exec)->viewWithUnderlyingString(exec);
+    auto viewWithString = exec->argument(0).toString(exec)->viewWithUnderlyingString(exec);
     RETURN_IF_EXCEPTION(scope, { });
     StringView view = viewWithString.view;
 
     JSValue unfiltered;
     if (view.is8Bit()) {
