diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeOutgoingAudioSource.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeOutgoingAudioSource.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeOutgoingAudioSource.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeOutgoingAudioSource.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017 Apple Inc.
+ * Copyright (C) 2017-2019 Apple Inc.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted, provided that the following conditions
  * are required to be met:
  *
@@ -38,13 +38,10 @@
 
 namespace WebCore {
 
 RealtimeOutgoingAudioSource::RealtimeOutgoingAudioSource(Ref<MediaStreamTrackPrivate>&& source)
     : m_audioSource(WTFMove(source))
-#if !RELEASE_LOG_DISABLED
-    , m_logIdentifier(reinterpret_cast<const void*>(cryptographicallyRandomNumber()))
-#endif
 {
 }
 
 RealtimeOutgoingAudioSource::~RealtimeOutgoingAudioSource()
 {
@@ -63,19 +60,22 @@
     m_audioSource->removeObserver(*this);
 }
 
 bool RealtimeOutgoingAudioSource::setSource(Ref<MediaStreamTrackPrivate>&& newSource)
 {
+    ALWAYS_LOG("Changing source to ", newSource->logIdentifier());
     auto locker = holdLock(m_sinksLock);
     bool hasSinks = !m_sinks.isEmpty();
 
     if (hasSinks)
         unobserveSource();
     m_audioSource = WTFMove(newSource);
     if (hasSinks)
         observeSource();
 
+    sourceUpdated();
+
     return true;
 }
 
 void RealtimeOutgoingAudioSource::initializeConverter()
 {
@@ -132,18 +132,10 @@
 #if !RELEASE_LOG_DISABLED
 WTFLogChannel& RealtimeOutgoingAudioSource::logChannel() const
 {
     return LogWebRTC;
 }
-
-const Logger& RealtimeOutgoingAudioSource::logger() const
-{
-    if (!m_logger)
-        m_logger = Logger::create(this);
-    return *m_logger;
-}
-
 #endif
 
 } // namespace WebCore
 
 #endif // USE(LIBWEBRTC)
