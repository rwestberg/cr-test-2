diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CodeOrigin.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CodeOrigin.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CodeOrigin.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CodeOrigin.cpp
@@ -31,23 +31,18 @@
 #include "InlineCallFrame.h"
 #include "JSCInlines.h"
 
 namespace JSC {
 
-unsigned CodeOrigin::inlineDepthForCallFrame(InlineCallFrame* inlineCallFrame)
+unsigned CodeOrigin::inlineDepth() const
 {
     unsigned result = 1;
-    for (InlineCallFrame* current = inlineCallFrame; current; current = current->directCaller.inlineCallFrame)
+    for (InlineCallFrame* current = inlineCallFrame(); current; current = current->directCaller.inlineCallFrame())
         result++;
     return result;
 }
 
-unsigned CodeOrigin::inlineDepth() const
-{
-    return inlineDepthForCallFrame(inlineCallFrame);
-}
-
 bool CodeOrigin::isApproximatelyEqualTo(const CodeOrigin& other, InlineCallFrame* terminal) const
 {
     CodeOrigin a = *this;
     CodeOrigin b = other;
 
@@ -63,26 +58,28 @@
 
     for (;;) {
         ASSERT(a.isSet());
         ASSERT(b.isSet());
 
-        if (a.bytecodeIndex != b.bytecodeIndex)
+        if (a.bytecodeIndex() != b.bytecodeIndex())
             return false;
 
-        bool aHasInlineCallFrame = !!a.inlineCallFrame && a.inlineCallFrame != terminal;
-        bool bHasInlineCallFrame = !!b.inlineCallFrame;
+        auto* aInlineCallFrame = a.inlineCallFrame();
+        auto* bInlineCallFrame = b.inlineCallFrame();
+        bool aHasInlineCallFrame = !!aInlineCallFrame && aInlineCallFrame != terminal;
+        bool bHasInlineCallFrame = !!bInlineCallFrame;
         if (aHasInlineCallFrame != bHasInlineCallFrame)
             return false;
 
         if (!aHasInlineCallFrame)
             return true;
 
-        if (a.inlineCallFrame->baselineCodeBlock.get() != b.inlineCallFrame->baselineCodeBlock.get())
+        if (aInlineCallFrame->baselineCodeBlock.get() != bInlineCallFrame->baselineCodeBlock.get())
             return false;
 
-        a = a.inlineCallFrame->directCaller;
-        b = b.inlineCallFrame->directCaller;
+        a = aInlineCallFrame->directCaller;
+        b = bInlineCallFrame->directCaller;
     }
 }
 
 unsigned CodeOrigin::approximateHash(InlineCallFrame* terminal) const
 {
@@ -92,47 +89,50 @@
         return 1;
 
     unsigned result = 2;
     CodeOrigin codeOrigin = *this;
     for (;;) {
-        result += codeOrigin.bytecodeIndex;
+        result += codeOrigin.bytecodeIndex();
+
+        auto* inlineCallFrame = codeOrigin.inlineCallFrame();
 
-        if (!codeOrigin.inlineCallFrame)
+        if (!inlineCallFrame)
             return result;
 
-        if (codeOrigin.inlineCallFrame == terminal)
+        if (inlineCallFrame == terminal)
             return result;
 
-        result += WTF::PtrHash<JSCell*>::hash(codeOrigin.inlineCallFrame->baselineCodeBlock.get());
+        result += WTF::PtrHash<JSCell*>::hash(inlineCallFrame->baselineCodeBlock.get());
 
-        codeOrigin = codeOrigin.inlineCallFrame->directCaller;
+        codeOrigin = inlineCallFrame->directCaller;
     }
 }
 
 Vector<CodeOrigin> CodeOrigin::inlineStack() const
 {
     Vector<CodeOrigin> result(inlineDepth());
     result.last() = *this;
     unsigned index = result.size() - 2;
-    for (InlineCallFrame* current = inlineCallFrame; current; current = current->directCaller.inlineCallFrame)
+    for (InlineCallFrame* current = inlineCallFrame(); current; current = current->directCaller.inlineCallFrame())
         result[index--] = current->directCaller;
-    RELEASE_ASSERT(!result[0].inlineCallFrame);
+    RELEASE_ASSERT(!result[0].inlineCallFrame());
     return result;
 }
 
 CodeBlock* CodeOrigin::codeOriginOwner() const
 {
+    auto* inlineCallFrame = this->inlineCallFrame();
     if (!inlineCallFrame)
-        return 0;
+        return nullptr;
     return inlineCallFrame->baselineCodeBlock.get();
 }
 
 int CodeOrigin::stackOffset() const
 {
+    auto* inlineCallFrame = this->inlineCallFrame();
     if (!inlineCallFrame)
         return 0;
-
     return inlineCallFrame->stackOffset;
 }
 
 void CodeOrigin::dump(PrintStream& out) const
 {
@@ -144,17 +144,17 @@
     Vector<CodeOrigin> stack = inlineStack();
     for (unsigned i = 0; i < stack.size(); ++i) {
         if (i)
             out.print(" --> ");
 
-        if (InlineCallFrame* frame = stack[i].inlineCallFrame) {
+        if (InlineCallFrame* frame = stack[i].inlineCallFrame()) {
             out.print(frame->briefFunctionInformation(), ":<", RawPointer(frame->baselineCodeBlock.get()), "> ");
             if (frame->isClosureCall)
                 out.print("(closure) ");
         }
 
-        out.print("bc#", stack[i].bytecodeIndex);
+        out.print("bc#", stack[i].bytecodeIndex());
     }
 }
 
 void CodeOrigin::dumpInContext(PrintStream& out, DumpContext*) const
 {
