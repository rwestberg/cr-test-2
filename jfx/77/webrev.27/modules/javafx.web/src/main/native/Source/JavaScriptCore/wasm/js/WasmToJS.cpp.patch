diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/js/WasmToJS.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/js/WasmToJS.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/js/WasmToJS.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/js/WasmToJS.cpp
@@ -30,10 +30,11 @@
 
 #include "CCallHelpers.h"
 #include "FrameTracers.h"
 #include "JITExceptions.h"
 #include "JSCInlines.h"
+#include "JSWebAssemblyHelpers.h"
 #include "JSWebAssemblyInstance.h"
 #include "JSWebAssemblyRuntimeError.h"
 #include "LinkBuffer.h"
 #include "NativeErrorConstructor.h"
 #include "ThunkGenerators.h"
@@ -63,11 +64,10 @@
     for (unsigned argNum = 0; argNum < argCount && !hasBadI64Use; ++argNum) {
         Type argType = signature.argument(argNum);
         switch (argType) {
         case Void:
         case Func:
-        case Anyfunc:
             RELEASE_ASSERT_NOT_REACHED();
 
         case I64: {
             hasBadI64Use = true;
             break;
@@ -90,22 +90,22 @@
 
         auto call = jit.call(OperationPtrTag);
         jit.jumpToExceptionHandler(*vm);
 
         void (*throwBadI64)(ExecState*, JSWebAssemblyInstance*) = [] (ExecState* exec, JSWebAssemblyInstance* instance) -> void {
-            VM* vm = &exec->vm();
+            VM& vm = exec->vm();
             NativeCallFrameTracer tracer(vm, exec);
 
             {
-                auto throwScope = DECLARE_THROW_SCOPE(*vm);
-                JSGlobalObject* globalObject = instance->globalObject(*vm);
-                auto* error = ErrorInstance::create(exec, *vm, globalObject->errorStructure(ErrorType::TypeError), "i64 not allowed as return type or argument to an imported function"_s);
+                auto throwScope = DECLARE_THROW_SCOPE(vm);
+                JSGlobalObject* globalObject = instance->globalObject(vm);
+                auto* error = ErrorInstance::create(exec, vm, globalObject->errorStructure(ErrorType::TypeError), "i64 not allowed as return type or argument to an imported function"_s);
                 throwException(exec, throwScope, error);
             }
 
             genericUnwind(vm, exec);
-            ASSERT(!!vm->callFrameForCatch);
+            ASSERT(!!vm.callFrameForCatch);
         };
 
         LinkBuffer linkBuffer(jit, GLOBAL_THUNK_ID, JITCompilationCanFail);
         if (UNLIKELY(linkBuffer.didFailToAllocate()))
             return makeUnexpected(BindingFailure::OutOfMemory);
@@ -160,24 +160,26 @@
         for (unsigned argNum = 0; argNum < argCount; ++argNum) {
             Type argType = signature.argument(argNum);
             switch (argType) {
             case Void:
             case Func:
-            case Anyfunc:
             case I64:
                 RELEASE_ASSERT_NOT_REACHED();
+            case Anyref:
+            case Funcref:
             case I32: {
                 GPRReg gprReg;
                 if (marshalledGPRs < wasmCC.m_gprArgs.size())
                     gprReg = wasmCC.m_gprArgs[marshalledGPRs].gpr();
                 else {
                     // We've already spilled all arguments, these registers are available as scratch.
                     gprReg = GPRInfo::argumentGPR0;
                     jit.load64(JIT::Address(GPRInfo::callFrameRegister, frOffset), gprReg);
                     frOffset += sizeof(Register);
                 }
-                jit.zeroExtend32ToPtr(gprReg, gprReg);
+                if (argType == I32)
+                    jit.zeroExtend32ToPtr(gprReg, gprReg);
                 jit.store64(gprReg, buffer + bufferOffset);
                 ++marshalledGPRs;
                 break;
             }
             case F32: {
@@ -222,27 +224,34 @@
             jit.storePtr(CCallHelpers::TrustedImmPtr(nullptr), GPRInfo::argumentGPR0);
         }
 
         uint64_t (*callFunc)(ExecState*, JSObject*, SignatureIndex, uint64_t*) =
             [] (ExecState* exec, JSObject* callee, SignatureIndex signatureIndex, uint64_t* buffer) -> uint64_t {
-                VM* vm = &exec->vm();
+                VM& vm = exec->vm();
                 NativeCallFrameTracer tracer(vm, exec);
-                auto throwScope = DECLARE_THROW_SCOPE(*vm);
+                auto throwScope = DECLARE_THROW_SCOPE(vm);
                 const Signature& signature = SignatureInformation::get(signatureIndex);
                 MarkedArgumentBuffer args;
                 for (unsigned argNum = 0; argNum < signature.argumentCount(); ++argNum) {
                     Type argType = signature.argument(argNum);
                     JSValue arg;
                     switch (argType) {
                     case Void:
                     case Func:
-                    case Anyfunc:
                     case I64:
                         RELEASE_ASSERT_NOT_REACHED();
                     case I32:
                         arg = jsNumber(static_cast<int32_t>(buffer[argNum]));
                         break;
+                    case Funcref: {
+                        arg = JSValue::decode(buffer[argNum]);
+                        ASSERT(isWebAssemblyHostFunction(vm, arg) || arg.isNull());
+                        break;
+                    }
+                    case Anyref:
+                        arg = JSValue::decode(buffer[argNum]);
+                        break;
                     case F32:
                     case F64:
                         arg = jsNumber(purifyNaN(bitwise_cast<double>(buffer[argNum])));
                         break;
                     }
@@ -252,28 +261,36 @@
                     throwOutOfMemoryError(exec, throwScope);
                     return 0;
                 }
 
                 CallData callData;
-                CallType callType = callee->methodTable(*vm)->getCallData(callee, callData);
+                CallType callType = callee->methodTable(vm)->getCallData(callee, callData);
                 RELEASE_ASSERT(callType != CallType::None);
                 JSValue result = call(exec, callee, callType, callData, jsUndefined(), args);
                 RETURN_IF_EXCEPTION(throwScope, 0);
 
                 uint64_t realResult;
                 switch (signature.returnType()) {
                 case Func:
-                case Anyfunc:
                 case I64:
                     RELEASE_ASSERT_NOT_REACHED();
                     break;
                 case Void:
                     break;
                 case I32: {
                     realResult = static_cast<uint64_t>(static_cast<uint32_t>(result.toInt32(exec)));
                     break;
                 }
+                case Funcref: {
+                    realResult = JSValue::encode(result);
+                    ASSERT(result.isFunction(vm) || result.isNull());
+                    break;
+                }
+                case Anyref: {
+                    realResult = JSValue::encode(result);
+                    break;
+                }
                 case F64:
                 case F32: {
                     realResult = bitwise_cast<uint64_t>(result.toNumber(exec));
                     break;
                 }
@@ -298,14 +315,14 @@
 
         // Exception here.
         jit.copyCalleeSavesToEntryFrameCalleeSavesBuffer(vm->topEntryFrame);
         jit.move(GPRInfo::callFrameRegister, GPRInfo::argumentGPR0);
         void (*doUnwinding)(ExecState*) = [] (ExecState* exec) -> void {
-            VM* vm = &exec->vm();
+            VM& vm = exec->vm();
             NativeCallFrameTracer tracer(vm, exec);
             genericUnwind(vm, exec);
-            ASSERT(!!vm->callFrameForCatch);
+            ASSERT(!!vm.callFrameForCatch);
         };
         auto exceptionCall = jit.call(OperationPtrTag);
         jit.jumpToExceptionHandler(*vm);
 
         noException.link(&jit);
@@ -359,13 +376,14 @@
         for (unsigned argNum = 0; argNum < argCount; ++argNum) {
             Type argType = signature.argument(argNum);
             switch (argType) {
             case Void:
             case Func:
-            case Anyfunc:
             case I64:
                 RELEASE_ASSERT_NOT_REACHED(); // Handled above.
+            case Anyref:
+            case Funcref:
             case I32: {
                 GPRReg gprReg;
                 if (marshalledGPRs < wasmCC.m_gprArgs.size())
                     gprReg = wasmCC.m_gprArgs[marshalledGPRs].gpr();
                 else {
@@ -373,12 +391,14 @@
                     gprReg = GPRInfo::argumentGPR0;
                     jit.load64(JIT::Address(GPRInfo::callFrameRegister, frOffset), gprReg);
                     frOffset += sizeof(Register);
                 }
                 ++marshalledGPRs;
-                jit.zeroExtend32ToPtr(gprReg, gprReg); // Clear non-int32 and non-tag bits.
-                jit.boxInt32(gprReg, JSValueRegs(gprReg), DoNotHaveTagRegisters);
+                if (argType == I32) {
+                    jit.zeroExtend32ToPtr(gprReg, gprReg); // Clear non-int32 and non-tag bits.
+                    jit.boxInt32(gprReg, JSValueRegs(gprReg), DoNotHaveTagRegisters);
+                }
                 jit.store64(gprReg, calleeFrame.withOffset(calleeFrameOffset));
                 calleeFrameOffset += sizeof(Register);
                 break;
             }
             case F32:
@@ -425,13 +445,14 @@
         for (unsigned argNum = 0; argNum < argCount; ++argNum) {
             Type argType = signature.argument(argNum);
             switch (argType) {
             case Void:
             case Func:
-            case Anyfunc:
             case I64:
                 RELEASE_ASSERT_NOT_REACHED(); // Handled above.
+            case Anyref:
+            case Funcref:
             case I32:
                 // Skipped: handled above.
                 if (marshalledGPRs >= wasmCC.m_gprArgs.size())
                     frOffset += sizeof(Register);
                 ++marshalledGPRs;
@@ -502,11 +523,10 @@
     switch (signature.returnType()) {
     case Void:
         // Discard.
         break;
     case Func:
-    case Anyfunc:
         // For the JavaScript embedding, imports with these types in their signature return are a WebAssembly.Module validation error.
         RELEASE_ASSERT_NOT_REACHED();
         break;
     case I64: {
         RELEASE_ASSERT_NOT_REACHED(); // Handled above.
@@ -514,11 +534,11 @@
     case I32: {
         CCallHelpers::JumpList done;
         CCallHelpers::JumpList slowPath;
 
         int32_t (*convertToI32)(ExecState*, JSValue) = [] (ExecState* exec, JSValue v) -> int32_t {
-            VM* vm = &exec->vm();
+            VM& vm = exec->vm();
             NativeCallFrameTracer tracer(vm, exec);
             return v.toInt32(exec);
         };
 
         slowPath.append(jit.branchIfNotNumber(GPRInfo::returnValueGPR, DoNotHaveTagRegisters));
@@ -536,15 +556,18 @@
         });
 
         done.link(&jit);
         break;
     }
+    case Funcref:
+    case Anyref:
+        break;
     case F32: {
         CCallHelpers::JumpList done;
 
         float (*convertToF32)(ExecState*, JSValue) = [] (ExecState* exec, JSValue v) -> float {
-            VM* vm = &exec->vm();
+            VM& vm = exec->vm();
             NativeCallFrameTracer tracer(vm, exec);
             return static_cast<float>(v.toNumber(exec));
         };
 
         auto notANumber = jit.branchIfNotNumber(GPRInfo::returnValueGPR, DoNotHaveTagRegisters);
@@ -575,11 +598,11 @@
     }
     case F64: {
         CCallHelpers::JumpList done;
 
         double (*convertToF64)(ExecState*, JSValue) = [] (ExecState* exec, JSValue v) -> double {
-            VM* vm = &exec->vm();
+            VM& vm = exec->vm();
             NativeCallFrameTracer tracer(vm, exec);
             return v.toNumber(exec);
         };
 
         auto notANumber = jit.branchIfNotNumber(GPRInfo::returnValueGPR, DoNotHaveTagRegisters);
@@ -618,14 +641,14 @@
         jit.move(GPRInfo::callFrameRegister, GPRInfo::argumentGPR0);
         auto call = jit.call(OperationPtrTag);
         jit.jumpToExceptionHandler(*vm);
 
         void (*doUnwinding)(ExecState*) = [] (ExecState* exec) -> void {
-            VM* vm = &exec->vm();
+            VM& vm = exec->vm();
             NativeCallFrameTracer tracer(vm, exec);
             genericUnwind(vm, exec);
-            ASSERT(!!vm->callFrameForCatch);
+            ASSERT(!!vm.callFrameForCatch);
         };
 
         jit.addLinkTask([=] (LinkBuffer& linkBuffer) {
             linkBuffer.link(call, FunctionPtr<OperationPtrTag>(doUnwinding));
         });
@@ -658,15 +681,15 @@
 
         JSObject* error;
         if (type == ExceptionType::StackOverflow)
             error = createStackOverflowError(exec, globalObject);
         else
-            error = JSWebAssemblyRuntimeError::create(exec, vm, globalObject->WebAssemblyRuntimeErrorStructure(), Wasm::errorMessageForExceptionType(type));
+            error = JSWebAssemblyRuntimeError::create(exec, vm, globalObject->webAssemblyRuntimeErrorStructure(), Wasm::errorMessageForExceptionType(type));
         throwException(exec, throwScope, error);
     }
 
-    genericUnwind(&vm, exec);
+    genericUnwind(vm, exec);
     ASSERT(!!vm.callFrameForCatch);
     ASSERT(!!vm.targetMachinePCForThrow);
     // FIXME: We could make this better:
     // This is a total hack, but the llint (both op_catch and handleUncaughtException)
     // require a cell in the callee field to load the VM. (The baseline JIT does not require
@@ -676,8 +699,27 @@
     // https://bugs.webkit.org/show_bug.cgi?id=170440
     bitwise_cast<uint64_t*>(exec)[CallFrameSlot::callee] = bitwise_cast<uint64_t>(instance->webAssemblyToJSCallee());
     return vm.targetMachinePCForThrow;
 }
 
+void emitThrowWasmToJSException(CCallHelpers& jit, GPRReg wasmInstance, Wasm::ExceptionType type)
+{
+    ASSERT(wasmInstance != GPRInfo::argumentGPR0);
+    jit.loadPtr(CCallHelpers::Address(wasmInstance, Wasm::Instance::offsetOfPointerToTopEntryFrame()), GPRInfo::argumentGPR0);
+    jit.loadPtr(CCallHelpers::Address(GPRInfo::argumentGPR0), GPRInfo::argumentGPR0);
+    jit.copyCalleeSavesToEntryFrameCalleeSavesBuffer(GPRInfo::argumentGPR0);
+    jit.move(GPRInfo::callFrameRegister, GPRInfo::argumentGPR0);
+    jit.move(CCallHelpers::TrustedImm32(static_cast<int32_t>(type)), GPRInfo::argumentGPR1);
+
+    CCallHelpers::Call call = jit.call(OperationPtrTag);
+
+    jit.farJump(GPRInfo::returnValueGPR, ExceptionHandlerPtrTag);
+    jit.breakpoint(); // We should not reach this.
+
+    jit.addLinkTask([=] (LinkBuffer& linkBuffer) {
+        linkBuffer.link(call, FunctionPtr<OperationPtrTag>(Wasm::wasmToJSException));
+    });
+}
+
 } } // namespace JSC::Wasm
 
 #endif // ENABLE(WEBASSEMBLY)
