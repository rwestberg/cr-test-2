diff a/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSTokenizer.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSTokenizer.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSTokenizer.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSTokenizer.cpp
@@ -615,11 +615,11 @@
             if (m_input.nextInputChar() == kEndOfFileMarker)
                 continue;
             if (isNewLine(m_input.peekWithoutReplacement(0)))
                 consumeSingleWhitespaceIfNext(); // This handles \r\n for us
             else
-                output.append(consumeEscape());
+                output.appendCharacter(consumeEscape());
         } else
             output.append(cc);
     }
 }
 
@@ -693,11 +693,11 @@
         if (cc == '"' || cc == '\'' || cc == '(' || isNonPrintableCodePoint(cc))
             break;
 
         if (cc == '\\') {
             if (twoCharsAreValidEscape(cc, m_input.peekWithoutReplacement(0))) {
-                result.append(consumeEscape());
+                result.appendCharacter(consumeEscape());
                 continue;
             }
             break;
         }
 
@@ -785,11 +785,11 @@
         if (isNameCodePoint(cc)) {
             result.append(cc);
             continue;
         }
         if (twoCharsAreValidEscape(cc, m_input.peekWithoutReplacement(0))) {
-            result.append(consumeEscape());
+            result.appendCharacter(consumeEscape());
             continue;
         }
         reconsume(cc);
         return registerString(result.toString());
     }
