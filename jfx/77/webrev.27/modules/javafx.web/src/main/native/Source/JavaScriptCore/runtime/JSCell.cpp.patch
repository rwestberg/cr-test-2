diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCell.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCell.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCell.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCell.cpp
@@ -1,9 +1,9 @@
 /*
  *  Copyright (C) 1999-2001 Harri Porten (porten@kde.org)
  *  Copyright (C) 2001 Peter Kelly (pmk@post.com)
- *  Copyright (C) 2003-2018 Apple Inc. All rights reserved.
+ *  Copyright (C) 2003-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Library General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -44,16 +44,16 @@
     cell->JSCell::~JSCell();
 }
 
 void JSCell::dump(PrintStream& out) const
 {
-    methodTable(*vm())->dumpToStream(this, out);
+    methodTable(vm())->dumpToStream(this, out);
 }
 
 void JSCell::dumpToStream(const JSCell* cell, PrintStream& out)
 {
-    out.printf("<%p, %s>", cell, cell->className(*cell->vm()));
+    out.printf("<%p, %s>", cell, cell->className(cell->vm()));
 }
 
 size_t JSCell::estimatedSizeInBytes(VM& vm) const
 {
     return methodTable(vm)->estimatedSize(const_cast<JSCell*>(this), vm);
@@ -62,11 +62,11 @@
 size_t JSCell::estimatedSize(JSCell* cell, VM&)
 {
     return cell->cellSize();
 }
 
-void JSCell::heapSnapshot(JSCell*, HeapSnapshotBuilder&)
+void JSCell::analyzeHeap(JSCell*, HeapAnalyzer&)
 {
 }
 
 bool JSCell::getString(ExecState* exec, String& stringValue) const
 {
@@ -116,16 +116,17 @@
     return thisObject->methodTable(exec->vm())->put(thisObject, exec, identifier, value, slot);
 }
 
 bool JSCell::putByIndex(JSCell* cell, ExecState* exec, unsigned identifier, JSValue value, bool shouldThrow)
 {
+    VM& vm = exec->vm();
     if (cell->isString() || cell->isSymbol() || cell->isBigInt()) {
         PutPropertySlot slot(cell, shouldThrow);
-        return JSValue(cell).putToPrimitive(exec, Identifier::from(exec, identifier), value, slot);
+        return JSValue(cell).putToPrimitive(exec, Identifier::from(vm, identifier), value, slot);
     }
     JSObject* thisObject = cell->toObject(exec, exec->lexicalGlobalObject());
-    return thisObject->methodTable(exec->vm())->putByIndex(thisObject, exec, identifier, value, shouldThrow);
+    return thisObject->methodTable(vm)->putByIndex(thisObject, exec, identifier, value, shouldThrow);
 }
 
 bool JSCell::deleteProperty(JSCell* cell, ExecState* exec, PropertyName identifier)
 {
     JSObject* thisObject = cell->toObject(exec, exec->lexicalGlobalObject());
@@ -210,10 +211,15 @@
 {
     RELEASE_ASSERT_NOT_REACHED();
     return false;
 }
 
+void JSCell::doPutPropertySecurityCheck(JSObject*, ExecState*, PropertyName, PutPropertySlot&)
+{
+    RELEASE_ASSERT_NOT_REACHED();
+}
+
 void JSCell::getOwnPropertyNames(JSObject*, ExecState*, PropertyNameArray&, EnumerationMode)
 {
     RELEASE_ASSERT_NOT_REACHED();
 }
 
