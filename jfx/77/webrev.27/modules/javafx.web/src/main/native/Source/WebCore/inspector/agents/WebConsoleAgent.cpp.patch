diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/WebConsoleAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/WebConsoleAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/WebConsoleAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/WebConsoleAgent.cpp
@@ -27,10 +27,11 @@
 #include "config.h"
 #include "WebConsoleAgent.h"
 
 #include "CommandLineAPIHost.h"
 #include "DOMWindow.h"
+#include "InspectorWebAgentBase.h"
 #include "Logging.h"
 #include "ResourceError.h"
 #include "ResourceResponse.h"
 #include "ScriptState.h"
 #include "WebInjectedScriptManager.h"
@@ -41,97 +42,22 @@
 
 namespace WebCore {
 
 using namespace Inspector;
 
-WebConsoleAgent::WebConsoleAgent(AgentContext& context, InspectorHeapAgent* heapAgent)
-    : InspectorConsoleAgent(context, heapAgent)
+WebConsoleAgent::WebConsoleAgent(WebAgentContext& context)
+    : InspectorConsoleAgent(context)
 {
 }
 
-void WebConsoleAgent::getLoggingChannels(ErrorString&, RefPtr<JSON::ArrayOf<Inspector::Protocol::Console::Channel>>& channels)
-{
-    static const struct ChannelTable {
-        NeverDestroyed<String> name;
-        Inspector::Protocol::Console::ChannelSource source;
-    } channelTable[] = {
-        { MAKE_STATIC_STRING_IMPL("WebRTC"), Inspector::Protocol::Console::ChannelSource::WebRTC },
-        { MAKE_STATIC_STRING_IMPL("Media"), Inspector::Protocol::Console::ChannelSource::Media },
-    };
-
-    channels = JSON::ArrayOf<Inspector::Protocol::Console::Channel>::create();
-
-    size_t length = WTF_ARRAY_LENGTH(channelTable);
-    for (size_t i = 0; i < length; ++i) {
-        auto* logChannel = getLogChannel(channelTable[i].name);
-        if (!logChannel)
-            return;
-
-        auto level = Inspector::Protocol::Console::ChannelLevel::Off;
-        if (logChannel->state != WTFLogChannelOff) {
-            switch (logChannel->level) {
-            case WTFLogLevelAlways:
-            case WTFLogLevelError:
-            case WTFLogLevelWarning:
-                level = Inspector::Protocol::Console::ChannelLevel::Basic;
-                break;
-            case WTFLogLevelInfo:
-            case WTFLogLevelDebug:
-                level = Inspector::Protocol::Console::ChannelLevel::Verbose;
-                break;
-            }
-        }
-
-        auto channel = Inspector::Protocol::Console::Channel::create()
-            .setSource(channelTable[i].source)
-            .setLevel(level)
-            .release();
-        channels->addItem(WTFMove(channel));
-    }
-}
+WebConsoleAgent::~WebConsoleAgent() = default;
 
-static Optional<std::pair<WTFLogChannelState, WTFLogLevel>> channelConfigurationForString(const String& levelString)
-{
-    WTFLogChannelState state;
-    WTFLogLevel level;
-
-    if (equalIgnoringASCIICase(levelString, "off")) {
-        state = WTFLogChannelOff;
-        level = WTFLogLevelError;
-    } else {
-        state = WTFLogChannelOn;
-        if (equalIgnoringASCIICase(levelString, "basic"))
-            level = WTFLogLevelWarning;
-        else if (equalIgnoringASCIICase(levelString, "verbose"))
-            level = WTFLogLevelDebug;
-        else
-            return WTF::nullopt;
-    }
-
-    return { { state, level } };
-}
-
-void WebConsoleAgent::setLoggingChannelLevel(ErrorString& errorString, const String& channelName, const String& channelLevel)
+void WebConsoleAgent::frameWindowDiscarded(DOMWindow* window)
 {
-    auto* channel = getLogChannel(channelName.utf8().data());
-    if (!channel) {
-        errorString = "Logging channel not found"_s;
-        return;
-    }
-
-    auto configuration = channelConfigurationForString(channelLevel);
-    if (!configuration) {
-        errorString = "Invalid logging level"_s;
+    if (!m_injectedScriptManager.inspectorEnvironment().developerExtrasEnabled())
         return;
-    }
 
-    channel->state = configuration.value().first;
-    channel->level = configuration.value().second;
-}
-
-void WebConsoleAgent::frameWindowDiscarded(DOMWindow* window)
-{
     for (auto& message : m_consoleMessages) {
         JSC::ExecState* exec = message->scriptState();
         if (!exec)
             continue;
         if (domWindowFromExecState(exec) != window)
@@ -147,11 +73,11 @@
     if (!m_injectedScriptManager.inspectorEnvironment().developerExtrasEnabled())
         return;
 
     if (response.httpStatusCode() >= 400) {
         String message = makeString("Failed to load resource: the server responded with a status of ", response.httpStatusCode(), " (", response.httpStatusText(), ')');
-        addMessageToConsole(std::make_unique<ConsoleMessage>(MessageSource::Network, MessageType::Log, MessageLevel::Error, message, response.url().string(), 0, 0, nullptr, requestIdentifier));
+        addMessageToConsole(makeUnique<ConsoleMessage>(MessageSource::Network, MessageType::Log, MessageLevel::Error, message, response.url().string(), 0, 0, nullptr, requestIdentifier));
     }
 }
 
 void WebConsoleAgent::didFailLoading(unsigned long requestIdentifier, const ResourceError& error)
 {
@@ -167,9 +93,9 @@
     if (!error.localizedDescription().isEmpty()) {
         message.appendLiteral(": ");
         message.append(error.localizedDescription());
     }
 
-    addMessageToConsole(std::make_unique<ConsoleMessage>(MessageSource::Network, MessageType::Log, MessageLevel::Error, message.toString(), error.failingURL(), 0, 0, nullptr, requestIdentifier));
+    addMessageToConsole(makeUnique<ConsoleMessage>(MessageSource::Network, MessageType::Log, MessageLevel::Error, message.toString(), error.failingURL(), 0, 0, nullptr, requestIdentifier));
 }
 
 } // namespace WebCore
