diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/displaylists/DisplayListItems.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/displaylists/DisplayListItems.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/displaylists/DisplayListItems.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/displaylists/DisplayListItems.h
@@ -68,11 +68,11 @@
     ClipPath,
     DrawGlyphs,
     DrawImage,
     DrawTiledImage,
     DrawTiledScaledImage,
-#if USE(CG) || USE(CAIRO)
+#if USE(CG) || USE(CAIRO) || USE(DIRECT2D)
     DrawNativeImage,
 #endif
     DrawPattern,
     DrawRect,
     DrawLine,
@@ -160,11 +160,11 @@
     ItemType m_type;
 };
 
 class DrawingItem : public Item {
 public:
-    DrawingItem(ItemType type)
+    explicit DrawingItem(ItemType type)
         : Item(type)
     {
     }
 
     void setExtent(const FloatRect& r) { m_extent = r; }
@@ -636,23 +636,23 @@
     Image::TileRule m_hRule;
     Image::TileRule m_vRule;
     ImagePaintingOptions m_imagePaintingOptions;
 };
 
-#if USE(CG) || USE(CAIRO)
+#if USE(CG) || USE(CAIRO) || USE(DIRECT2D)
 class DrawNativeImage : public DrawingItem {
 public:
-    static Ref<DrawNativeImage> create(const NativeImagePtr& image, const FloatSize& imageSize, const FloatRect& destRect, const FloatRect& srcRect, CompositeOperator op, BlendMode blendMode, ImageOrientation orientation)
+    static Ref<DrawNativeImage> create(const NativeImagePtr& image, const FloatSize& imageSize, const FloatRect& destRect, const FloatRect& srcRect, const ImagePaintingOptions& options)
     {
-        return adoptRef(*new DrawNativeImage(image, imageSize, destRect, srcRect, op, blendMode, orientation));
+        return adoptRef(*new DrawNativeImage(image, imageSize, destRect, srcRect, options));
     }
 
     FloatRect source() const { return m_srcRect; }
     FloatRect destination() const { return m_destination; }
 
 private:
-    DrawNativeImage(const NativeImagePtr&, const FloatSize& selfSize, const FloatRect& destRect, const FloatRect& srcRect, CompositeOperator, BlendMode, ImageOrientation);
+    DrawNativeImage(const NativeImagePtr&, const FloatSize& selfSize, const FloatRect& destRect, const FloatRect& srcRect, const ImagePaintingOptions&);
 
     void apply(GraphicsContext&) const override;
 
     Optional<FloatRect> localBounds(const GraphicsContext&) const override { return m_destination; }
 
@@ -660,34 +660,30 @@
     RetainPtr<CGImageRef> m_image;
 #endif
     FloatSize m_imageSize;
     FloatRect m_destination;
     FloatRect m_srcRect;
-#if USE(CG)
-    CompositeOperator m_op;
-    BlendMode m_blendMode;
-#endif
-    ImageOrientation m_orientation;
+    ImagePaintingOptions m_options;
 };
 #endif
 
 class DrawPattern : public DrawingItem {
 public:
-    static Ref<DrawPattern> create(Image& image, const FloatRect& destRect, const FloatRect& tileRect, const AffineTransform& patternTransform, const FloatPoint& phase, const FloatSize& spacing, CompositeOperator op, BlendMode blendMode)
+    static Ref<DrawPattern> create(Image& image, const FloatRect& destRect, const FloatRect& tileRect, const AffineTransform& patternTransform, const FloatPoint& phase, const FloatSize& spacing, const ImagePaintingOptions& options)
     {
-        return adoptRef(*new DrawPattern(image, destRect, tileRect, patternTransform, phase, spacing, op, blendMode));
+        return adoptRef(*new DrawPattern(image, destRect, tileRect, patternTransform, phase, spacing, options));
     }
 
     const Image& image() const { return m_image.get(); }
     const AffineTransform& patternTransform() const { return m_patternTransform; }
     FloatRect tileRect() const { return m_tileRect; }
     FloatRect destRect() const { return m_destination; }
     FloatPoint phase() const { return m_phase; }
     FloatSize spacing() const { return m_spacing; }
 
 private:
-    DrawPattern(Image&, const FloatRect& destRect, const FloatRect& srcRect, const AffineTransform&, const FloatPoint& phase, const FloatSize& spacing, CompositeOperator, BlendMode = BlendMode::Normal);
+    DrawPattern(Image&, const FloatRect& destRect, const FloatRect& srcRect, const AffineTransform&, const FloatPoint& phase, const FloatSize& spacing, const ImagePaintingOptions& = { });
 
     void apply(GraphicsContext&) const override;
 
     Optional<FloatRect> localBounds(const GraphicsContext&) const override { return m_destination; }
 
@@ -695,12 +691,11 @@
     AffineTransform m_patternTransform;
     FloatRect m_tileRect;
     FloatRect m_destination;
     FloatPoint m_phase;
     FloatSize m_spacing;
-    CompositeOperator m_op;
-    BlendMode m_blendMode;
+    ImagePaintingOptions m_options;
 };
 
 // Is DrawingItem because the size of the transparency layer is implicitly the clip bounds.
 class BeginTransparencyLayer : public DrawingItem {
 public:
