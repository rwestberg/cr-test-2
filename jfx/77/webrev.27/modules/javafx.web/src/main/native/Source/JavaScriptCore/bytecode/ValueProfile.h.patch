diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ValueProfile.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ValueProfile.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ValueProfile.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ValueProfile.h
@@ -42,18 +42,10 @@
     static const unsigned numberOfSpecFailBuckets = 1;
     static const unsigned bucketIndexMask = numberOfBuckets - 1;
     static const unsigned totalNumberOfBuckets = numberOfBuckets + numberOfSpecFailBuckets;
 
     ValueProfileBase()
-        : m_bytecodeOffset(-1)
-    {
-        for (unsigned i = 0; i < totalNumberOfBuckets; ++i)
-            m_buckets[i] = JSValue::encode(JSValue());
-    }
-
-    ValueProfileBase(int bytecodeOffset)
-        : m_bytecodeOffset(bytecodeOffset)
     {
         for (unsigned i = 0; i < totalNumberOfBuckets; ++i)
             m_buckets[i] = JSValue::encode(JSValue());
     }
 
@@ -84,13 +76,15 @@
         return result;
     }
 
     unsigned totalNumberOfSamples() const
     {
-        return numberOfSamples() + m_numberOfSamplesInPrediction;
+        return numberOfSamples() + isSampledBefore();
     }
 
+    bool isSampledBefore() const { return m_prediction != SpecNone; }
+
     bool isLive() const
     {
         for (unsigned i = 0; i < totalNumberOfBuckets; ++i) {
             if (!!JSValue::decode(m_buckets[i]))
                 return true;
@@ -107,11 +101,11 @@
         return out.toCString();
     }
 
     void dump(PrintStream& out)
     {
-        out.print("samples = ", totalNumberOfSamples(), " prediction = ", SpeculationDump(m_prediction));
+        out.print("sampled before = ", isSampledBefore(), " live samples = ", numberOfSamples(), " prediction = ", SpeculationDump(m_prediction));
         bool first = true;
         for (unsigned i = 0; i < totalNumberOfBuckets; ++i) {
             JSValue value = JSValue::decode(m_buckets[i]);
             if (!!value) {
                 if (first) {
@@ -131,57 +125,41 @@
         for (unsigned i = 0; i < totalNumberOfBuckets; ++i) {
             JSValue value = JSValue::decode(m_buckets[i]);
             if (!value)
                 continue;
 
-            m_numberOfSamplesInPrediction++;
             mergeSpeculation(m_prediction, speculationFromValue(value));
 
             m_buckets[i] = JSValue::encode(JSValue());
         }
 
         return m_prediction;
     }
 
-    int m_bytecodeOffset; // -1 for prologue
-    unsigned m_numberOfSamplesInPrediction { 0 };
+    EncodedJSValue m_buckets[totalNumberOfBuckets];
 
     SpeculatedType m_prediction { SpecNone };
-
-    EncodedJSValue m_buckets[totalNumberOfBuckets];
 };
 
 struct MinimalValueProfile : public ValueProfileBase<0> {
     MinimalValueProfile(): ValueProfileBase<0>() { }
-    MinimalValueProfile(int bytecodeOffset): ValueProfileBase<0>(bytecodeOffset) { }
 };
 
 template<unsigned logNumberOfBucketsArgument>
 struct ValueProfileWithLogNumberOfBuckets : public ValueProfileBase<1 << logNumberOfBucketsArgument> {
     static const unsigned logNumberOfBuckets = logNumberOfBucketsArgument;
 
     ValueProfileWithLogNumberOfBuckets()
         : ValueProfileBase<1 << logNumberOfBucketsArgument>()
     {
     }
-    ValueProfileWithLogNumberOfBuckets(int bytecodeOffset)
-        : ValueProfileBase<1 << logNumberOfBucketsArgument>(bytecodeOffset)
-    {
-    }
 };
 
 struct ValueProfile : public ValueProfileWithLogNumberOfBuckets<0> {
     ValueProfile() : ValueProfileWithLogNumberOfBuckets<0>() { }
-    ValueProfile(int bytecodeOffset) : ValueProfileWithLogNumberOfBuckets<0>(bytecodeOffset) { }
 };
 
-template<typename T>
-inline int getValueProfileBytecodeOffset(T* valueProfile)
-{
-    return valueProfile->m_bytecodeOffset;
-}
-
 // This is a mini value profile to catch pathologies. It is a counter that gets
 // incremented when we take the slow path on any instruction.
 struct RareCaseProfile {
     RareCaseProfile(int bytecodeOffset)
         : m_bytecodeOffset(bytecodeOffset)
@@ -196,16 +174,17 @@
 inline int getRareCaseProfileBytecodeOffset(RareCaseProfile* rareCaseProfile)
 {
     return rareCaseProfile->m_bytecodeOffset;
 }
 
-struct ValueProfileAndOperand {
-    ValueProfile m_profile;
+struct ValueProfileAndOperand : public ValueProfile {
     int m_operand;
 };
 
 struct ValueProfileAndOperandBuffer {
+    WTF_MAKE_STRUCT_FAST_ALLOCATED;
+
     ValueProfileAndOperandBuffer(unsigned size)
         : m_size(size)
     {
         // FIXME: ValueProfile has more stuff than we need. We could optimize these value profiles
         // to be more space efficient.
