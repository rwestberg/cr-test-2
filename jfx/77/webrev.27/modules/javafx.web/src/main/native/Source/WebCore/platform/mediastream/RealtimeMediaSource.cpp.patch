diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeMediaSource.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeMediaSource.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeMediaSource.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeMediaSource.cpp
@@ -1,8 +1,8 @@
 /*
  * Copyright (C) 2012 Google Inc. All rights reserved.
- * Copyright (C) 2013-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  * Copyright (C) 2013 Nokia Corporation and/or its subsidiary(-ies).
  * Copyright (C) 2015 Ericsson AB. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
@@ -54,12 +54,12 @@
     , m_type(type)
     , m_name(WTFMove(name))
 {
     if (m_persistentID.isEmpty())
         m_persistentID = createCanonicalUUIDString();
-    else
-        m_hashedID = RealtimeMediaSourceCenter::singleton().hashStringWithSalt(m_persistentID, m_idHashSalt);
+
+    m_hashedID = RealtimeMediaSourceCenter::singleton().hashStringWithSalt(m_persistentID, m_idHashSalt);
 }
 
 void RealtimeMediaSource::addObserver(RealtimeMediaSource::Observer& observer)
 {
     auto locker = holdLock(m_observersLock);
@@ -67,30 +67,33 @@
 }
 
 void RealtimeMediaSource::removeObserver(RealtimeMediaSource::Observer& observer)
 {
     auto locker = holdLock(m_observersLock);
-
     m_observers.remove(&observer);
     if (m_observers.isEmpty())
-        stop();
+        stopBeingObserved();
 }
 
 void RealtimeMediaSource::setInterrupted(bool interrupted, bool pageMuted)
 {
     if (interrupted == m_interrupted)
         return;
 
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER, interrupted, ", page muted : ", pageMuted);
+
     m_interrupted = interrupted;
     if (!interrupted && pageMuted)
         return;
 
     setMuted(interrupted);
 }
 
 void RealtimeMediaSource::setMuted(bool muted)
 {
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER, muted);
+
     if (muted)
         stop();
     else {
         if (interrupted())
             return;
@@ -104,10 +107,11 @@
 void RealtimeMediaSource::notifyMutedChange(bool muted)
 {
     if (m_muted == muted)
         return;
 
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER, muted);
     m_muted = muted;
 
     notifyMutedObservers();
 }
 
@@ -147,20 +151,36 @@
 
     if (m_pendingSettingsDidChangeNotification)
         return;
     m_pendingSettingsDidChangeNotification = true;
 
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER, flags);
+
     scheduleDeferredTask([this] {
         m_pendingSettingsDidChangeNotification = false;
         forEachObserver([](auto& observer) {
             observer.sourceSettingsChanged();
         });
     });
 }
 
 void RealtimeMediaSource::videoSampleAvailable(MediaSample& mediaSample)
 {
+#if !RELEASE_LOG_DISABLED
+    ++m_frameCount;
+
+    auto timestamp = MonotonicTime::now();
+    auto delta = timestamp - m_lastFrameLogTime;
+    if (!m_lastFrameLogTime || delta >= 1_s) {
+        if (m_lastFrameLogTime) {
+            INFO_LOG_IF(loggerPtr(), LOGIDENTIFIER, m_frameCount, " frames sent in ", delta.value(), " seconds");
+            m_frameCount = 0;
+        }
+        m_lastFrameLogTime = timestamp;
+    }
+#endif
+
     forEachObserver([&](auto& observer) {
         observer.videoSampleAvailable(mediaSample);
     });
 }
 
@@ -174,10 +194,12 @@
 void RealtimeMediaSource::start()
 {
     if (m_isProducingData || m_isEnded)
         return;
 
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER);
+
     m_isProducingData = true;
     startProducingData();
 
     if (!m_isProducingData)
         return;
@@ -190,10 +212,12 @@
 void RealtimeMediaSource::stop()
 {
     if (!m_isProducingData)
         return;
 
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER);
+
     m_isProducingData = false;
     stopProducingData();
 }
 
 void RealtimeMediaSource::requestToEnd(Observer& callingObserver)
@@ -221,11 +245,11 @@
     });
 }
 
 void RealtimeMediaSource::captureFailed()
 {
-    RELEASE_LOG_ERROR(MediaStream, "RealtimeMediaSource::captureFailed");
+    ERROR_LOG_IF(m_logger, LOGIDENTIFIER);
 
     m_isProducingData = false;
     m_captureDidFailed = true;
 
     forEachObserver([](auto& observer) {
@@ -411,11 +435,12 @@
         return downcast<BooleanConstraint>(constraint).fitnessDistance(echoCancellationReadWrite);
         break;
     }
 
     case MediaConstraintType::DeviceId:
-        ASSERT_NOT_REACHED();
+        ASSERT(!m_hashedID.isEmpty());
+        return downcast<StringConstraint>(constraint).fitnessDistance(m_hashedID);
         break;
 
     case MediaConstraintType::GroupId: {
         ASSERT(constraint.isString());
         if (!capabilities.supportsDeviceId())
@@ -464,10 +489,12 @@
         setFrameRate(frameRate.value());
 }
 
 void RealtimeMediaSource::applyConstraint(const MediaConstraint& constraint)
 {
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER, constraint.name());
+
     auto& capabilities = this->capabilities();
     switch (constraint.constraintType()) {
     case MediaConstraintType::Width:
         ASSERT_NOT_REACHED();
         break;
@@ -567,13 +594,13 @@
     case MediaConstraintType::Unknown:
         break;
     }
 }
 
-bool RealtimeMediaSource::selectSettings(const MediaConstraints& constraints, FlattenedConstraint& candidates, String& failedConstraint, SelectType type)
+bool RealtimeMediaSource::selectSettings(const MediaConstraints& constraints, FlattenedConstraint& candidates, String& failedConstraint)
 {
-    m_fitnessScore = std::numeric_limits<double>::infinity();
+    double minimumDistance = std::numeric_limits<double>::infinity();
 
     // https://w3c.github.io/mediacapture-main/#dfn-selectsettings
     //
     // 1. Each constraint specifies one or more values (or a range of values) for its property.
     //    A property may appear more than once in the list of 'advanced' ConstraintSets. If an
@@ -594,11 +621,11 @@
 
     failedConstraint = emptyString();
 
     // Check width, height and frame rate jointly, because while they may be supported individually the combination may not be supported.
     double distance = std::numeric_limits<double>::infinity();
-    if (!supportsSizeAndFrameRate(constraints.mandatoryConstraints.width(), constraints.mandatoryConstraints.height(), constraints.mandatoryConstraints.frameRate(), failedConstraint, m_fitnessScore))
+    if (!supportsSizeAndFrameRate(constraints.mandatoryConstraints.width(), constraints.mandatoryConstraints.height(), constraints.mandatoryConstraints.frameRate(), failedConstraint, minimumDistance))
         return false;
 
     constraints.mandatoryConstraints.filter([&](const MediaConstraint& constraint) {
         if (!supportsConstraint(constraint))
             return false;
@@ -606,29 +633,10 @@
         if (constraint.constraintType() == MediaConstraintType::Width || constraint.constraintType() == MediaConstraintType::Height || constraint.constraintType() == MediaConstraintType::FrameRate) {
             candidates.set(constraint);
             return false;
         }
 
-        // The deviceId can't be changed, and the constraint value is the hashed device ID, so verify that the
-        // device's unique ID hashes to the constraint value but don't include the constraint in the flattened
-        // constraint set.
-        if (constraint.constraintType() == MediaConstraintType::DeviceId) {
-            if (type == SelectType::ForApplyConstraints)
-                return false;
-
-            ASSERT(constraint.isString());
-            ASSERT(!m_hashedID.isEmpty());
-
-            double constraintDistance = downcast<StringConstraint>(constraint).fitnessDistance(m_hashedID);
-            if (std::isinf(constraintDistance)) {
-                failedConstraint = constraint.name();
-                return true;
-            }
-
-            return false;
-        }
-
         double constraintDistance = fitnessDistance(constraint);
         if (std::isinf(constraintDistance)) {
             failedConstraint = constraint.name();
             return true;
         }
@@ -639,11 +647,11 @@
     });
 
     if (!failedConstraint.isEmpty())
         return false;
 
-    m_fitnessScore = distance;
+    minimumDistance = distance;
 
     // 4. If candidates is empty, return undefined as the result of the SelectSettings() algorithm.
     if (candidates.isEmpty())
         return true;
 
@@ -675,11 +683,11 @@
             constraintDistance += distance;
             if (!std::isinf(distance))
                 supported = true;
         });
 
-        m_fitnessScore = std::min(m_fitnessScore, constraintDistance);
+        minimumDistance = std::min(minimumDistance, constraintDistance);
 
         // 5.2 If the fitness distance is finite for one or more settings dictionaries in candidates, keep those
         //     settings dictionaries in candidates, discarding others.
         //     If the fitness distance is infinite for all settings dictionaries in candidates, ignore this ConstraintSet.
         if (supported)
@@ -688,20 +696,20 @@
 
     // 6. Select one settings dictionary from candidates, and return it as the result of the SelectSettings() algorithm.
     //    The UA should use the one with the smallest fitness distance, as calculated in step 3.
     if (!supportedConstraints.isEmpty()) {
         supportedConstraints.removeAllMatching([&](const std::pair<double, MediaTrackConstraintSetMap>& pair) -> bool {
-            return std::isinf(pair.first) || pair.first > m_fitnessScore;
+            return std::isinf(pair.first) || pair.first > minimumDistance;
         });
 
         if (!supportedConstraints.isEmpty()) {
             auto& advancedConstraint = supportedConstraints[0].second;
             advancedConstraint.forEach([&](const MediaConstraint& constraint) {
                 candidates.merge(constraint);
             });
 
-            m_fitnessScore = std::min(m_fitnessScore, supportedConstraints[0].first);
+            minimumDistance = std::min(minimumDistance, supportedConstraints[0].first);
         }
     }
 
     return true;
 }
@@ -785,14 +793,44 @@
 
 bool RealtimeMediaSource::supportsConstraints(const MediaConstraints& constraints, String& invalidConstraint)
 {
     ASSERT(constraints.isValid);
 
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER);
+
     FlattenedConstraint candidates;
-    if (!selectSettings(constraints, candidates, invalidConstraint, SelectType::ForSupportsConstraints))
+    if (!selectSettings(constraints, candidates, invalidConstraint))
         return false;
 
+    m_fitnessScore = 0;
+    for (auto& variant : candidates) {
+        double distance = fitnessDistance(variant);
+        switch (variant.constraintType()) {
+        case MediaConstraintType::DeviceId:
+        case MediaConstraintType::FacingMode:
+            m_fitnessScore += distance ? 1 : 32;
+            break;
+
+        case MediaConstraintType::Width:
+        case MediaConstraintType::Height:
+        case MediaConstraintType::FrameRate:
+        case MediaConstraintType::AspectRatio:
+        case MediaConstraintType::Volume:
+        case MediaConstraintType::SampleRate:
+        case MediaConstraintType::SampleSize:
+        case MediaConstraintType::EchoCancellation:
+        case MediaConstraintType::GroupId:
+        case MediaConstraintType::DisplaySurface:
+        case MediaConstraintType::LogicalSurface:
+        case MediaConstraintType::Unknown:
+            m_fitnessScore += distance ? 1 : 2;
+            break;
+        }
+    }
+
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER, "fitness distance : ", m_fitnessScore);
+
     return true;
 }
 
 void RealtimeMediaSource::applyConstraints(const FlattenedConstraint& constraints)
 {
@@ -845,13 +883,15 @@
 
 Optional<RealtimeMediaSource::ApplyConstraintsError> RealtimeMediaSource::applyConstraints(const MediaConstraints& constraints)
 {
     ASSERT(constraints.isValid);
 
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER);
+
     FlattenedConstraint candidates;
     String failedConstraint;
-    if (!selectSettings(constraints, candidates, failedConstraint, SelectType::ForApplyConstraints))
+    if (!selectSettings(constraints, candidates, failedConstraint))
         return ApplyConstraintsError { failedConstraint, "Constraint not supported"_s };
 
     applyConstraints(candidates);
     return { };
 }
@@ -864,10 +904,12 @@
 void RealtimeMediaSource::setSize(const IntSize& size)
 {
     if (size == m_size)
         return;
 
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER, size);
+
     m_size = size;
     notifySettingsDidChangeObservers({ RealtimeMediaSourceSettings::Flag::Width, RealtimeMediaSourceSettings::Flag::Height });
 }
 
 const IntSize RealtimeMediaSource::size() const
@@ -889,10 +931,12 @@
 void RealtimeMediaSource::setIntrinsicSize(const IntSize& size)
 {
     if (m_intrinsicSize == size)
         return;
 
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER, size);
+
     auto currentSize = this->size();
     m_intrinsicSize = size;
 
     if (currentSize != this->size())
         notifySettingsDidChangeObservers({ RealtimeMediaSourceSettings::Flag::Width, RealtimeMediaSourceSettings::Flag::Height });
@@ -906,47 +950,57 @@
 void RealtimeMediaSource::setFrameRate(double rate)
 {
     if (m_frameRate == rate)
         return;
 
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER, rate);
+
     m_frameRate = rate;
     notifySettingsDidChangeObservers(RealtimeMediaSourceSettings::Flag::FrameRate);
 }
 
 void RealtimeMediaSource::setAspectRatio(double ratio)
 {
     if (m_aspectRatio == ratio)
         return;
 
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER, ratio);
+
     m_aspectRatio = ratio;
     m_size.setHeight(m_size.width() / ratio);
     notifySettingsDidChangeObservers({ RealtimeMediaSourceSettings::Flag::AspectRatio, RealtimeMediaSourceSettings::Flag::Height });
 }
 
 void RealtimeMediaSource::setFacingMode(RealtimeMediaSourceSettings::VideoFacingMode mode)
 {
     if (m_facingMode == mode)
         return;
 
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER, mode);
+
     m_facingMode = mode;
     notifySettingsDidChangeObservers(RealtimeMediaSourceSettings::Flag::FacingMode);
 }
 
 void RealtimeMediaSource::setVolume(double volume)
 {
     if (m_volume == volume)
         return;
 
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER, volume);
+
     m_volume = volume;
     notifySettingsDidChangeObservers(RealtimeMediaSourceSettings::Flag::Volume);
 }
 
 void RealtimeMediaSource::setSampleRate(int rate)
 {
     if (m_sampleRate == rate)
         return;
 
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER, rate);
+
     m_sampleRate = rate;
     notifySettingsDidChangeObservers(RealtimeMediaSourceSettings::Flag::SampleRate);
 }
 
 Optional<Vector<int>> RealtimeMediaSource::discreteSampleRates() const
@@ -957,10 +1011,12 @@
 void RealtimeMediaSource::setSampleSize(int size)
 {
     if (m_sampleSize == size)
         return;
 
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER, size);
+
     m_sampleSize = size;
     notifySettingsDidChangeObservers(RealtimeMediaSourceSettings::Flag::SampleSize);
 }
 
 Optional<Vector<int>> RealtimeMediaSource::discreteSampleSizes() const
@@ -971,21 +1027,19 @@
 void RealtimeMediaSource::setEchoCancellation(bool echoCancellation)
 {
     if (m_echoCancellation == echoCancellation)
         return;
 
+    ALWAYS_LOG_IF(m_logger, LOGIDENTIFIER, echoCancellation);
     m_echoCancellation = echoCancellation;
     notifySettingsDidChangeObservers(RealtimeMediaSourceSettings::Flag::EchoCancellation);
 }
 
-void RealtimeMediaSource::scheduleDeferredTask(WTF::Function<void()>&& function)
+void RealtimeMediaSource::scheduleDeferredTask(Function<void()>&& function)
 {
     ASSERT(function);
-    callOnMainThread([weakThis = makeWeakPtr(*this), function = WTFMove(function)] {
-        if (!weakThis)
-            return;
-
+    callOnMainThread([protectedThis = makeRef(*this), function = WTFMove(function)] {
         function();
     });
 }
 
 const String& RealtimeMediaSource::hashedId() const
@@ -1001,8 +1055,36 @@
 
 RealtimeMediaSource::Observer::~Observer()
 {
 }
 
+#if !RELEASE_LOG_DISABLED
+void RealtimeMediaSource::setLogger(const Logger& newLogger, const void* newLogIdentifier)
+{
+    m_logger = &newLogger;
+    m_logIdentifier = newLogIdentifier;
+    ALWAYS_LOG(LOGIDENTIFIER, m_type, ", ", m_name, ", ", m_hashedID);
+}
+
+WTFLogChannel& RealtimeMediaSource::logChannel() const
+{
+    return LogWebRTC;
+}
+#endif
+
+String convertEnumerationToString(RealtimeMediaSource::Type enumerationValue)
+{
+    static const NeverDestroyed<String> values[] = {
+        MAKE_STATIC_STRING_IMPL("None"),
+        MAKE_STATIC_STRING_IMPL("Audio"),
+        MAKE_STATIC_STRING_IMPL("Video"),
+    };
+    static_assert(static_cast<size_t>(RealtimeMediaSource::Type::None) == 0, "RealtimeMediaSource::Type::None is not 0 as expected");
+    static_assert(static_cast<size_t>(RealtimeMediaSource::Type::Audio) == 1, "RealtimeMediaSource::Type::Audio is not 1 as expected");
+    static_assert(static_cast<size_t>(RealtimeMediaSource::Type::Video) == 2, "RealtimeMediaSource::Type::Video is not 2 as expected");
+    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
+    return values[static_cast<size_t>(enumerationValue)];
+}
+
 } // namespace WebCore
 
 #endif // ENABLE(MEDIA_STREAM)
