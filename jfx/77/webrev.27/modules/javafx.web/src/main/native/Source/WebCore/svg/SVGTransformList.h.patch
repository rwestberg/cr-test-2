diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTransformList.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTransformList.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTransformList.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTransformList.h
@@ -1,8 +1,9 @@
 /*
  * Copyright (C) 2004, 2005, 2008 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005 Rob Buis <buis@kde.org>
+ * Copyright (C) 2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -18,60 +19,119 @@
  * Boston, MA 02110-1301, USA.
  */
 
 #pragma once
 
-#include "SVGAnimatedListPropertyTearOff.h"
-#include "SVGListPropertyTearOff.h"
-#include "SVGTransformListValues.h"
+#include "SVGTransform.h"
+#include "SVGTransformable.h"
+#include "SVGValuePropertyList.h"
 
 namespace WebCore {
 
-class SVGTransformList final : public SVGListPropertyTearOff<SVGTransformListValues> {
+class SVGTransformList final : public SVGValuePropertyList<SVGTransform> {
+    friend class SVGViewSpec;
+    using Base = SVGValuePropertyList<SVGTransform>;
+    using Base::Base;
+
 public:
-    using AnimatedListPropertyTearOff = SVGAnimatedListPropertyTearOff<SVGTransformListValues>;
-    using ListWrapperCache = AnimatedListPropertyTearOff::ListWrapperCache;
+    static Ref<SVGTransformList> create()
+    {
+        return adoptRef(*new SVGTransformList());
+    }
 
-    static Ref<SVGTransformList> create(AnimatedListPropertyTearOff& animatedProperty, SVGPropertyRole role, SVGTransformListValues& values, ListWrapperCache& wrappers)
+    static Ref<SVGTransformList> create(SVGPropertyOwner* owner, SVGPropertyAccess access)
     {
-        return adoptRef(*new SVGTransformList(animatedProperty, role, values, wrappers));
+        return adoptRef(*new SVGTransformList(owner, access));
     }
 
-    ExceptionOr<Ref<SVGTransform>> createSVGTransformFromMatrix(SVGMatrix& matrix)
+    static Ref<SVGTransformList> create(const SVGTransformList& other, SVGPropertyAccess access)
     {
-        ASSERT(m_values);
-        return m_values->createSVGTransformFromMatrix(matrix);
+        return adoptRef(*new SVGTransformList(other, access));
     }
 
-    ExceptionOr<RefPtr<SVGTransform>> consolidate()
+    ExceptionOr<Ref<SVGTransform>> createSVGTransformFromMatrix(const Ref<SVGMatrix>& matrix)
     {
-        ASSERT(m_values);
-        ASSERT(m_wrappers);
+        return SVGTransform::create(matrix->value());
+    }
 
+    ExceptionOr<RefPtr<SVGTransform>> consolidate()
+    {
         auto result = canAlterList();
         if (result.hasException())
             return result.releaseException();
         ASSERT(result.releaseReturnValue());
 
-        ASSERT(m_values->size() == m_wrappers->size());
-
         // Spec: If the list was empty, then a value of null is returned.
-        if (m_values->isEmpty())
+        if (m_items.isEmpty())
             return nullptr;
 
-        detachListWrappers(0);
+        if (m_items.size() == 1)
+            return makeRefPtr(at(0).get());
+
+        auto newItem = SVGTransform::create(concatenate());
+        clearItems();
 
-        RefPtr<SVGTransform> wrapper = m_values->consolidate();
-        m_wrappers->append(makeWeakPtr(*wrapper));
+        auto item = append(WTFMove(newItem));
+        commitChange();
+        return makeRefPtr(item.get());
+    }
+
+    void parse(const String& value)
+    {
+        clearItems();
 
-        ASSERT(m_values->size() == m_wrappers->size());
-        return WTFMove(wrapper);
+        auto upconvertedCharacters = StringView(value).upconvertedCharacters();
+        const UChar* start = upconvertedCharacters;
+        if (!parse(start, start + value.length()))
+            clearItems();
+    }
+
+    AffineTransform concatenate() const
+    {
+        AffineTransform result;
+        for (const auto& transform : m_items)
+            result *= transform->matrix()->value();
+        return result;
+    }
+
+    String valueAsString() const override
+    {
+        StringBuilder builder;
+        for (const auto& transfrom : m_items) {
+            if (builder.length())
+                builder.append(' ');
+
+            builder.append(transfrom->value().valueAsString());
+        }
+        return builder.toString();
     }
 
 private:
-    SVGTransformList(AnimatedListPropertyTearOff& animatedProperty, SVGPropertyRole role, SVGTransformListValues& values, ListWrapperCache& wrappers)
-        : SVGListPropertyTearOff<SVGTransformListValues>(animatedProperty, role, values, wrappers)
+    bool parse(const UChar*& start, const UChar* end)
     {
+        bool delimParsed = false;
+        while (start < end) {
+            delimParsed = false;
+            SVGTransformValue::SVGTransformType type = SVGTransformValue::SVG_TRANSFORM_UNKNOWN;
+            skipOptionalSVGSpaces(start, end);
+
+            if (!SVGTransformable::parseAndSkipType(start, end, type))
+                return false;
+
+            Ref<SVGTransform> transform = SVGTransform::create(type);
+            if (!SVGTransformable::parseTransformValue(type, start, end, transform->value()))
+                return false;
+
+            append(WTFMove(transform));
+            skipOptionalSVGSpaces(start, end);
+            if (start < end && *start == ',') {
+                delimParsed = true;
+                ++start;
+            }
+
+            skipOptionalSVGSpaces(start, end);
+        }
+        return !delimParsed;
     }
 };
 
 } // namespace WebCore
