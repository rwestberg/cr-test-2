diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/mathml/RenderMathMLBlock.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/mathml/RenderMathMLBlock.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/mathml/RenderMathMLBlock.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/mathml/RenderMathMLBlock.cpp
@@ -73,15 +73,15 @@
 static LayoutUnit axisHeight(const RenderStyle& style)
 {
     // If we have a MATH table we just return the AxisHeight constant.
     const auto& primaryFont = style.fontCascade().primaryFont();
     if (auto* mathData = primaryFont.mathData())
-        return mathData->getMathConstant(primaryFont, OpenTypeMathData::AxisHeight);
+        return LayoutUnit(mathData->getMathConstant(primaryFont, OpenTypeMathData::AxisHeight));
 
     // Otherwise, the idea is to try and use the middle of operators as the math axis which we thus approximate by "half of the x-height".
     // Note that Gecko has a slower but more accurate version that measures half of the height of U+2212 MINUS SIGN.
-    return style.fontMetrics().xHeight() / 2;
+    return LayoutUnit(style.fontMetrics().xHeight() / 2);
 }
 
 LayoutUnit RenderMathMLBlock::mathAxisHeight() const
 {
     return axisHeight(style());
@@ -143,33 +143,33 @@
 LayoutUnit toUserUnits(const MathMLElement::Length& length, const RenderStyle& style, const LayoutUnit& referenceValue)
 {
     switch (length.type) {
     // Zoom for physical units needs to be accounted for.
     case MathMLElement::LengthType::Cm:
-        return style.effectiveZoom() * length.value * cssPixelsPerInch / 2.54f;
+        return LayoutUnit(style.effectiveZoom() * length.value * cssPixelsPerInch / 2.54f);
     case MathMLElement::LengthType::In:
-        return style.effectiveZoom() * length.value * cssPixelsPerInch;
+        return LayoutUnit(style.effectiveZoom() * length.value * cssPixelsPerInch);
     case MathMLElement::LengthType::Mm:
-        return style.effectiveZoom() * length.value * cssPixelsPerInch / 25.4f;
+        return LayoutUnit(style.effectiveZoom() * length.value * cssPixelsPerInch / 25.4f);
     case MathMLElement::LengthType::Pc:
-        return style.effectiveZoom() * length.value * cssPixelsPerInch / 6;
+        return LayoutUnit(style.effectiveZoom() * length.value * cssPixelsPerInch / 6);
     case MathMLElement::LengthType::Pt:
-        return style.effectiveZoom() * length.value * cssPixelsPerInch / 72;
+        return LayoutUnit(style.effectiveZoom() * length.value * cssPixelsPerInch / 72);
     case MathMLElement::LengthType::Px:
-        return style.effectiveZoom() * length.value;
+        return LayoutUnit(style.effectiveZoom() * length.value);
 
     // Zoom for logical units is accounted for either in the font info or referenceValue.
     case MathMLElement::LengthType::Em:
-        return length.value * style.fontCascade().size();
+        return LayoutUnit(length.value * style.fontCascade().size());
     case MathMLElement::LengthType::Ex:
-        return length.value * style.fontMetrics().xHeight();
+        return LayoutUnit(length.value * style.fontMetrics().xHeight());
     case MathMLElement::LengthType::MathUnit:
-        return length.value * style.fontCascade().size() / 18;
+        return LayoutUnit(length.value * style.fontCascade().size() / 18);
     case MathMLElement::LengthType::Percentage:
-        return referenceValue * length.value / 100;
+        return LayoutUnit(referenceValue * length.value / 100);
     case MathMLElement::LengthType::UnitLess:
-        return referenceValue * length.value;
+        return LayoutUnit(referenceValue * length.value);
     case MathMLElement::LengthType::ParsingFailed:
         return referenceValue;
     case MathMLElement::LengthType::Infinity:
         return intMaxForLayoutUnit;
     default:
@@ -250,10 +250,12 @@
 
     layoutPositionedObjects(relayoutChildren);
 
     repainter.repaintAfterLayout();
 
+    updateScrollInfoAfterLayout();
+
     clearNeedsLayout();
 }
 
 void RenderMathMLBlock::layoutInvalidMarkup(bool relayoutChildren)
 {
@@ -263,10 +265,11 @@
     for (auto child = firstChildBox(); child; child = child->nextSiblingBox())
         child->layoutIfNeeded();
     setLogicalWidth(0);
     setLogicalHeight(0);
     layoutPositionedObjects(relayoutChildren);
+    updateScrollInfoAfterLayout();
     clearNeedsLayout();
 }
 
 }
 
