diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/fido/U2fCommandConstructor.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/fido/U2fCommandConstructor.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/fido/U2fCommandConstructor.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/fido/U2fCommandConstructor.cpp
@@ -37,10 +37,11 @@
 #include "PublicKeyCredentialCreationOptions.h"
 #include "PublicKeyCredentialRequestOptions.h"
 #include "UserVerificationRequirement.h"
 #include "WebAuthenticationConstants.h"
 #include "WebAuthenticationUtils.h"
+#include <wtf/Optional.h>
 
 namespace fido {
 using namespace WebCore;
 
 namespace {
@@ -111,16 +112,19 @@
         return WTF::nullopt;
 
     return constructU2fSignCommand(produceRpIdHash(request.rp.id), clientDataHash, keyHandle.idVector, true /* checkOnly */);
 }
 
-Optional<Vector<uint8_t>> convertToU2fSignCommand(const Vector<uint8_t>& clientDataHash, const PublicKeyCredentialRequestOptions& request, const Vector<uint8_t>& keyHandle, bool checkOnly)
+Optional<Vector<uint8_t>> convertToU2fSignCommand(const Vector<uint8_t>& clientDataHash, const PublicKeyCredentialRequestOptions& request, const Vector<uint8_t>& keyHandle, bool isAppId)
 {
     if (!isConvertibleToU2fSignCommand(request))
         return WTF::nullopt;
 
-    return constructU2fSignCommand(produceRpIdHash(request.rpId), clientDataHash, keyHandle, checkOnly);
+    if (!isAppId)
+        return constructU2fSignCommand(produceRpIdHash(request.rpId), clientDataHash, keyHandle, false);
+    ASSERT(request.extensions && !request.extensions->appid.isNull());
+    return constructU2fSignCommand(produceRpIdHash(request.extensions->appid), clientDataHash, keyHandle, false);
 }
 
 Vector<uint8_t> constructBogusU2fRegistrationCommand()
 {
     return constructU2fRegisterCommand(convertBytesToVector(kBogusAppParam, sizeof(kBogusAppParam)), convertBytesToVector(kBogusChallenge, sizeof(kBogusChallenge)));
