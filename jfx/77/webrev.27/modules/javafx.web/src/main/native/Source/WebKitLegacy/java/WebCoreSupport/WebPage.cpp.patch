diff a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/WebPage.cpp b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/WebPage.cpp
--- a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/WebPage.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/WebPage.cpp
@@ -44,11 +44,10 @@
 #include "VisitedLinkStoreJava.h"
 #include "WebKitLegacy/Storage/StorageNamespaceImpl.h"
 #include "WebKitLegacy/Storage/WebDatabaseProvider.h"
 #include "WebKitVersion.h" //generated
 #include "WebPageConfig.h"
-#include "WebKitLogging.h"
 #include <WebCore/WebCoreTestSupport.h>
 #include <JavaScriptCore/APICast.h>
 #include <JavaScriptCore/InitializeThreading.h>
 #include <JavaScriptCore/JSContextRef.h>
 #include <JavaScriptCore/JSContextRefPrivate.h>
@@ -453,14 +452,14 @@
 {
     markForSync();
 }
 
 void WebPage::paintContents(const GraphicsLayer*,
-                            GraphicsContext& context,
-                            GraphicsLayerPaintingPhase,
-                            const FloatRect& inClip,
-                            GraphicsLayerPaintBehavior)
+                   GraphicsContext& context,
+                   OptionSet<GraphicsLayerPaintingPhase>,
+                   const FloatRect& inClip,
+                   GraphicsLayerPaintBehavior)
 {
     context.save();
     context.clip(inClip);
     m_page->mainFrame().view()->paint(context, enclosingIntRect(inClip));
     if (m_page->settings().showDebugBorders()) {
@@ -801,30 +800,25 @@
         m_localStorageDatabasePath = path;
     }
 private:
     String m_localStorageDatabasePath;
 
-    Ref<StorageNamespace> createSessionStorageNamespace(Page&, unsigned quota) override
+    Ref<StorageNamespace> createSessionStorageNamespace(Page& page, unsigned quota) override
     {
-        return WebKit::StorageNamespaceImpl::createSessionStorageNamespace(quota);
+        return WebKit::StorageNamespaceImpl::createSessionStorageNamespace(quota, page.sessionID());
     }
 
-    Ref<StorageNamespace> createLocalStorageNamespace(unsigned quota) override
+    Ref<StorageNamespace> createLocalStorageNamespace(unsigned quota, PAL::SessionID sessionID) override
     {
-        return WebKit::StorageNamespaceImpl::getOrCreateLocalStorageNamespace(m_localStorageDatabasePath, quota);
+        return WebKit::StorageNamespaceImpl::getOrCreateLocalStorageNamespace(m_localStorageDatabasePath, quota, sessionID);
     }
 
-    Ref<StorageNamespace> createTransientLocalStorageNamespace(SecurityOrigin&, unsigned quota) override
+    Ref<StorageNamespace> createTransientLocalStorageNamespace(SecurityOrigin&, unsigned quota, PAL::SessionID sessionID) override
     {
         // FIXME: A smarter implementation would create a special namespace type instead of just piggy-backing off
         // SessionStorageNamespace here.
-        return WebKit::StorageNamespaceImpl::createSessionStorageNamespace(quota);
-    }
-
-    Ref<StorageNamespace> createEphemeralLocalStorageNamespace(Page&, unsigned quota) override
-    {
-        return WebKit::StorageNamespaceImpl::createEphemeralLocalStorageNamespace(quota);
+        return WebKit::StorageNamespaceImpl::createSessionStorageNamespace(quota, sessionID);
     }
 };
 
 namespace {
 
@@ -1317,10 +1311,14 @@
         settings.setUsesPageCache(nativePropertyValue.toInt() != 0);
     } else if (nativePropertyName == "WebKitJavaScriptCanAccessClipboardPreferenceKey") {
         settings.setJavaScriptCanAccessClipboard(nativePropertyValue.toInt() != 0);
     } else if (nativePropertyName == "enableColorFilter") {
         settings.setColorFilterEnabled(nativePropertyValue == "true");
+    } else if (nativePropertyName == "enableKeygenElement") {
+        // removed from Chrome, Firefox, and the HTML specification in 2017.
+        // https://trac.webkit.org/changeset/248960/webkit
+        RuntimeEnabledFeatures::sharedFeatures().setKeygenElementEnabled(nativePropertyValue == "true");
     } else if (nativePropertyName == "experimental:WebAnimationsCSSIntegrationEnabled") {
         RuntimeEnabledFeatures::sharedFeatures().setWebAnimationsCSSIntegrationEnabled(nativePropertyValue == "true");
     } else if (nativePropertyName == "enableIntersectionObserver") {
 #if ENABLE(INTERSECTION_OBSERVER)
         RuntimeEnabledFeatures::sharedFeatures().setIntersectionObserverEnabled(nativePropertyValue == "true");
