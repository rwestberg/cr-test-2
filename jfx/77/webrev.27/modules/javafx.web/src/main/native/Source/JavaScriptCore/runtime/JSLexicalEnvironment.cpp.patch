diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLexicalEnvironment.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLexicalEnvironment.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLexicalEnvironment.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLexicalEnvironment.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2008, 2009, 2014, 2015 Apple Inc. All rights reserved.
+ * Copyright (C) 2008-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  *
@@ -27,11 +27,11 @@
  */
 
 #include "config.h"
 #include "JSLexicalEnvironment.h"
 
-#include "HeapSnapshotBuilder.h"
+#include "HeapAnalyzer.h"
 #include "Interpreter.h"
 #include "JSFunction.h"
 #include "JSCInlines.h"
 
 namespace JSC {
@@ -44,14 +44,14 @@
     ASSERT_GC_OBJECT_INHERITS(thisObject, info());
     Base::visitChildren(thisObject, visitor);
     visitor.appendValuesHidden(thisObject->variables(), thisObject->symbolTable()->scopeSize());
 }
 
-void JSLexicalEnvironment::heapSnapshot(JSCell* cell, HeapSnapshotBuilder& builder)
+void JSLexicalEnvironment::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
 {
     auto* thisObject = jsCast<JSLexicalEnvironment*>(cell);
-    Base::heapSnapshot(cell, builder);
+    Base::analyzeHeap(cell, analyzer);
 
     ConcurrentJSLocker locker(thisObject->symbolTable()->m_lock);
     SymbolTable::Map::iterator end = thisObject->symbolTable()->end(locker);
     for (SymbolTable::Map::iterator it = thisObject->symbolTable()->begin(locker); it != end; ++it) {
         SymbolTableEntry::Fast entry = it->value;
@@ -60,29 +60,30 @@
         if (!thisObject->isValidScopeOffset(offset))
             continue;
 
         JSValue toValue = thisObject->variableAt(offset).get();
         if (toValue && toValue.isCell())
-            builder.appendVariableNameEdge(thisObject, toValue.asCell(), it->key.get());
+            analyzer.analyzeVariableNameEdge(thisObject, toValue.asCell(), it->key.get());
     }
 }
 
 void JSLexicalEnvironment::getOwnNonIndexPropertyNames(JSObject* object, ExecState* exec, PropertyNameArray& propertyNames, EnumerationMode mode)
 {
     JSLexicalEnvironment* thisObject = jsCast<JSLexicalEnvironment*>(object);
 
     {
         ConcurrentJSLocker locker(thisObject->symbolTable()->m_lock);
         SymbolTable::Map::iterator end = thisObject->symbolTable()->end(locker);
+        VM& vm = exec->vm();
         for (SymbolTable::Map::iterator it = thisObject->symbolTable()->begin(locker); it != end; ++it) {
             if (it->value.getAttributes() & PropertyAttribute::DontEnum && !mode.includeDontEnumProperties())
                 continue;
             if (!thisObject->isValidScopeOffset(it->value.scopeOffset()))
                 continue;
             if (it->key->isSymbol() && !propertyNames.includeSymbolProperties())
                 continue;
-            propertyNames.add(Identifier::fromUid(exec, it->key.get()));
+            propertyNames.add(Identifier::fromUid(vm, it->key.get()));
         }
     }
     // Skip the JSSymbolTableObject's implementation of getOwnNonIndexPropertyNames
     JSObject::getOwnNonIndexPropertyNames(thisObject, exec, propertyNames, mode);
 }
