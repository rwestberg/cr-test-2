diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/Widget.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/Widget.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/Widget.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/Widget.h
@@ -45,21 +45,17 @@
 
 #if PLATFORM(COCOA)
 OBJC_CLASS NSView;
 OBJC_CLASS NSWindow;
 typedef NSView *PlatformWidget;
-#elif PLATFORM(WIN)
-typedef struct HWND__* HWND;
-typedef HWND PlatformWidget;
-#elif PLATFORM(GTK)
-typedef struct _GtkWidget GtkWidget;
-typedef struct _GtkContainer GtkContainer;
-typedef GtkWidget* PlatformWidget;
 #elif PLATFORM(JAVA)
 #include <jni.h>
 #include <wtf/java/JavaRef.h>
 typedef JGObject PlatformWidget;
+#elif PLATFORM(WIN)
+typedef struct HWND__* HWND;
+typedef HWND PlatformWidget;
 #else
 typedef void* PlatformWidget;
 #endif
 
 typedef PlatformWidget PlatformPageClient;
@@ -143,25 +139,29 @@
     virtual bool isScrollbar() const { return false; }
     virtual bool isScrollView() const { return false; }
 
     WEBCORE_EXPORT void removeFromParent();
     WEBCORE_EXPORT virtual void setParent(ScrollView* view);
-    ScrollView* parent() const { return m_parent.get(); }
+    WEBCORE_EXPORT ScrollView* parent() const;
     FrameView* root() const;
 
     virtual void handleEvent(Event&) { }
 
     virtual void notifyWidget(WidgetNotification) { }
 
     WEBCORE_EXPORT IntRect convertToRootView(const IntRect&) const;
     IntRect convertFromRootView(const IntRect&) const;
 
+    FloatRect convertToRootView(const FloatRect&) const;
     FloatRect convertFromRootView(const FloatRect&) const;
 
     IntPoint convertToRootView(const IntPoint&) const;
     IntPoint convertFromRootView(const IntPoint&) const;
 
+    FloatPoint convertToRootView(const FloatPoint&) const;
+    FloatPoint convertFromRootView(const FloatPoint&) const;
+
     // It is important for cross-platform code to realize that Mac has flipped coordinates.  Therefore any code
     // that tries to convert the location of a rect using the point-based convertFromContainingWindow will end
     // up with an inaccurate rect.  Always make sure to use the rect-based convertFromContainingWindow method
     // when converting window rects.
     WEBCORE_EXPORT IntRect convertToContainingWindow(const IntRect&) const;
@@ -189,20 +189,20 @@
 #endif
 
     // Virtual methods to convert points to/from the containing ScrollView
     WEBCORE_EXPORT virtual IntRect convertToContainingView(const IntRect&) const;
     WEBCORE_EXPORT virtual IntRect convertFromContainingView(const IntRect&) const;
+    WEBCORE_EXPORT virtual FloatRect convertToContainingView(const FloatRect&) const;
     WEBCORE_EXPORT virtual FloatRect convertFromContainingView(const FloatRect&) const;
     WEBCORE_EXPORT virtual IntPoint convertToContainingView(const IntPoint&) const;
     WEBCORE_EXPORT virtual IntPoint convertFromContainingView(const IntPoint&) const;
+    WEBCORE_EXPORT virtual FloatPoint convertToContainingView(const FloatPoint&) const;
+    WEBCORE_EXPORT virtual FloatPoint convertFromContainingView(const FloatPoint&) const;
 
 private:
     void init(PlatformWidget); // Must be called by all Widget constructors to initialize cross-platform data.
 
-    void releasePlatformWidget();
-    void retainPlatformWidget();
-
     // These methods are used to convert from the root widget to the containing window,
     // which has behavior that may differ between platforms (e.g. Mac uses flipped window coordinates).
     static IntRect convertFromRootToContainingWindow(const Widget* rootWidget, const IntRect&);
     static IntRect convertFromContainingWindowToRoot(const Widget* rootWidget, const IntRect&);
 
@@ -233,27 +233,11 @@
     return m_widget;
 }
 
 inline void Widget::setPlatformWidget(PlatformWidget widget)
 {
-    if (widget != m_widget) {
-        releasePlatformWidget();
-        m_widget = widget;
-        retainPlatformWidget();
-    }
-}
-
-#endif
-
-#if !PLATFORM(GTK) && !PLATFORM(JAVA)
-
-inline void Widget::releasePlatformWidget()
-{
-}
-
-inline void Widget::retainPlatformWidget()
-{
+    m_widget = widget;
 }
 
 #endif
 
 } // namespace WebCore
