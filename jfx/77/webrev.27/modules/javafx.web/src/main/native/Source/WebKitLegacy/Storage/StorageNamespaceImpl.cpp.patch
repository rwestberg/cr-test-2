diff a/modules/javafx.web/src/main/native/Source/WebKitLegacy/Storage/StorageNamespaceImpl.cpp b/modules/javafx.web/src/main/native/Source/WebKitLegacy/Storage/StorageNamespaceImpl.cpp
--- a/modules/javafx.web/src/main/native/Source/WebKitLegacy/Storage/StorageNamespaceImpl.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebKitLegacy/Storage/StorageNamespaceImpl.cpp
@@ -43,40 +43,36 @@
     static NeverDestroyed<HashMap<String, StorageNamespaceImpl*>> localStorageNamespaceMap;
 
     return localStorageNamespaceMap;
 }
 
-Ref<StorageNamespaceImpl> StorageNamespaceImpl::createSessionStorageNamespace(unsigned quota)
+Ref<StorageNamespaceImpl> StorageNamespaceImpl::createSessionStorageNamespace(unsigned quota, PAL::SessionID sessionID)
 {
-    return adoptRef(*new StorageNamespaceImpl(StorageType::Session, String(), quota));
+    return adoptRef(*new StorageNamespaceImpl(StorageType::Session, String(), quota, sessionID));
 }
 
-Ref<StorageNamespaceImpl> StorageNamespaceImpl::createEphemeralLocalStorageNamespace(unsigned quota)
-{
-    return adoptRef(*new StorageNamespaceImpl(StorageType::EphemeralLocal, String(), quota));
-}
-
-Ref<StorageNamespaceImpl> StorageNamespaceImpl::getOrCreateLocalStorageNamespace(const String& databasePath, unsigned quota)
+Ref<StorageNamespaceImpl> StorageNamespaceImpl::getOrCreateLocalStorageNamespace(const String& databasePath, unsigned quota, PAL::SessionID sessionID)
 {
     ASSERT(!databasePath.isNull());
 
     auto& slot = localStorageNamespaceMap().add(databasePath, nullptr).iterator->value;
     if (slot)
         return *slot;
 
-    Ref<StorageNamespaceImpl> storageNamespace = adoptRef(*new StorageNamespaceImpl(StorageType::Local, databasePath, quota));
+    Ref<StorageNamespaceImpl> storageNamespace = adoptRef(*new StorageNamespaceImpl(StorageType::Local, databasePath, quota, sessionID));
     slot = storageNamespace.ptr();
 
     return storageNamespace;
 }
 
-StorageNamespaceImpl::StorageNamespaceImpl(StorageType storageType, const String& path, unsigned quota)
+StorageNamespaceImpl::StorageNamespaceImpl(StorageType storageType, const String& path, unsigned quota, PAL::SessionID sessionID)
     : m_storageType(storageType)
     , m_path(path.isolatedCopy())
     , m_syncManager(0)
     , m_quota(quota)
     , m_isShutdown(false)
+    , m_sessionID(sessionID)
 {
     if (isPersistentLocalStorage(m_storageType) && !m_path.isEmpty())
         m_syncManager = StorageSyncManager::create(m_path);
 }
 
@@ -95,13 +91,13 @@
 
 Ref<StorageNamespace> StorageNamespaceImpl::copy(Page*)
 {
     ASSERT(isMainThread());
     ASSERT(!m_isShutdown);
-    ASSERT(m_storageType == StorageType::Session || m_storageType == StorageType::EphemeralLocal);
+    ASSERT(m_storageType == StorageType::Session);
 
-    auto newNamespace = adoptRef(*new StorageNamespaceImpl(m_storageType, m_path, m_quota));
+    auto newNamespace = adoptRef(*new StorageNamespaceImpl(m_storageType, m_path, m_quota, m_sessionID));
     for (auto& iter : m_storageAreaMap)
         newNamespace->m_storageAreaMap.set(iter.key, iter.value->copy());
 
     return WTFMove(newNamespace);
 }
@@ -125,11 +121,11 @@
 
     if (m_isShutdown)
         return;
 
     // If we're not a persistent storage, we shouldn't need to do any work here.
-    if (m_storageType == StorageType::Session || m_storageType == StorageType::EphemeralLocal) {
+    if (m_storageType == StorageType::Session) {
         ASSERT(!m_syncManager);
         return;
     }
 
     StorageAreaMap::iterator end = m_storageAreaMap.end();
@@ -174,6 +170,13 @@
     StorageAreaMap::iterator end = m_storageAreaMap.end();
     for (StorageAreaMap::iterator it = m_storageAreaMap.begin(); it != end; ++it)
         it->value->closeDatabaseIfIdle();
 }
 
+void StorageNamespaceImpl::setSessionIDForTesting(PAL::SessionID sessionID)
+{
+    m_sessionID = sessionID;
+    for (auto storageAreaMap : m_storageAreaMap.values())
+        storageAreaMap->sessionChanged(!sessionID.isEphemeral());
+}
+
 } // namespace WebCore
