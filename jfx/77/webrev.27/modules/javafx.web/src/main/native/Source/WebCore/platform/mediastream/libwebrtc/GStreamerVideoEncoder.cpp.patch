diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/libwebrtc/GStreamerVideoEncoder.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/libwebrtc/GStreamerVideoEncoder.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/libwebrtc/GStreamerVideoEncoder.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/libwebrtc/GStreamerVideoEncoder.cpp
@@ -41,29 +41,30 @@
     GST_PAD_ALWAYS,
     GST_STATIC_CAPS ("video/x-h264;video/x-vp8"));
 
 typedef void (*SetBitrateFunc) (GObject * encoder, const gchar * propname,
     gint bitrate);
-typedef void (*SetupEncoder) (GObject * encoder);
+typedef void (*SetupFunc) (GstWebrtcVideoEncoder * self);
 typedef struct
 {
   gboolean avalaible;
   GstCaps *caps;
   const gchar *name;
   const gchar *parser_name;
   GstCaps *encoded_format;
   SetBitrateFunc setBitrate;
-  SetupEncoder setupEncoder;
+  SetupFunc setupEncoder;
   const gchar *bitrate_propname;
   const gchar *keyframe_interval_propname;
 } EncoderDefinition;
 
 typedef enum
 {
   ENCODER_NONE = 0,
   ENCODER_X264,
   ENCODER_OPENH264,
+  ENCODER_OMXH264,
   ENCODER_VP8,
   ENCODER_LAST,
 } EncoderId;
 
 EncoderDefinition encoders[ENCODER_LAST] = {
@@ -165,15 +166,15 @@
     if (encoders[i].avalaible
         && gst_caps_can_intersect (encoders[i].caps, caps)) {
       GstPad *tmppad;
       priv->encoderId = (EncoderId) i;
       priv->encoder = gst_element_factory_make (encoders[i].name, NULL);
-      encoders[priv->encoderId].setupEncoder (G_OBJECT (priv->encoder));
 
       if (encoders[i].parser_name)
         priv->parser = gst_element_factory_make (encoders[i].parser_name, NULL);
 
+      encoders[priv->encoderId].setupEncoder (self);
       if (encoders[i].encoded_format) {
         priv->capsfilter = gst_element_factory_make ("capsfilter", NULL);
         g_object_set (priv->capsfilter, "caps", encoders[i].encoded_format,
             NULL);
       }
@@ -242,11 +243,11 @@
 }
 
 static void
 register_known_encoder (EncoderId encId, const gchar * name,
     const gchar * parser_name, const gchar * caps, const gchar * encoded_format,
-    SetupEncoder setupEncoder, const gchar * bitrate_propname,
+    SetupFunc setupEncoder, const gchar * bitrate_propname,
     SetBitrateFunc setBitrate, const gchar * keyframe_interval_propname)
 {
   GstPluginFeature *feature =
       gst_registry_lookup_feature (gst_registry_get (), name);
   if (!feature) {
@@ -270,27 +271,46 @@
   encoders[encId].setBitrate = setBitrate;
   encoders[encId].keyframe_interval_propname = keyframe_interval_propname;
 }
 
 static void
-setup_x264enc (GObject * encoder)
+setup_x264enc (GstWebrtcVideoEncoder * self)
 {
-  gst_util_set_object_arg (encoder, "tune", "zerolatency");
+  gst_util_set_object_arg (G_OBJECT (PRIV (self)->encoder), "tune",
+      "zerolatency");
+  g_object_set (PRIV (self)->parser, "config-interval", 1, NULL);
 }
 
 static void
-setup_openh264enc (GObject *)
+setup_openh264enc (GstWebrtcVideoEncoder * self)
 {
+  g_object_set (PRIV (self)->parser, "config-interval", 1, NULL);
 }
 
+static void
+setup_omxh264enc (GstWebrtcVideoEncoder * self)
+{
+  gst_util_set_object_arg (G_OBJECT (PRIV (self)->encoder), "control-rate",
+      "variable");
+  g_object_set (PRIV (self)->parser, "config-interval", 1, NULL);
+}
+
+
 static void
 set_bitrate_kbit_per_sec (GObject * encoder, const gchar * prop_name,
     gint bitrate)
 {
   g_object_set (encoder, prop_name, bitrate, NULL);
 }
 
+static void
+set_bitrate_bit_per_sec (GObject * encoder, const gchar * prop_name,
+    gint bitrate)
+{
+  g_object_set (encoder, prop_name, bitrate * KBIT_TO_BIT, NULL);
+}
+
 static void
 gst_webrtc_video_encoder_class_init (GstWebrtcVideoEncoderClass * klass)
 {
   GObjectClass *object_class = G_OBJECT_CLASS (klass);
 
@@ -322,17 +342,21 @@
       g_param_spec_uint ("keyframe-interval", "Keyframe interval",
           "The interval between keyframes", 0, G_MAXINT, 0,
           (GParamFlags) (G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
               G_PARAM_CONSTRUCT)));
 
+  register_known_encoder (ENCODER_OMXH264, "omxh264enc", "h264parse",
+      "video/x-h264",
+      "video/x-h264,alignment=au,stream-format=byte-stream,profile=baseline",
+      setup_omxh264enc, "target-bitrate", set_bitrate_bit_per_sec, "interval-intraframes");
   register_known_encoder (ENCODER_X264, "x264enc", "h264parse", "video/x-h264",
       "video/x-h264,alignment=au,stream-format=byte-stream,profile=baseline",
       setup_x264enc, "bitrate", set_bitrate_kbit_per_sec, "key-int-max");
   register_known_encoder (ENCODER_OPENH264, "openh264enc", "h264parse",
       "video/x-h264",
       "video/x-h264,alignment=au,stream-format=byte-stream,profile=baseline",
-      setup_openh264enc, "bitrate", set_bitrate_kbit_per_sec, "gop-size");
+      setup_openh264enc, "bitrate", set_bitrate_bit_per_sec, "gop-size");
 }
 
 static void
 gst_webrtc_video_encoder_init (GstWebrtcVideoEncoder * self)
 {
