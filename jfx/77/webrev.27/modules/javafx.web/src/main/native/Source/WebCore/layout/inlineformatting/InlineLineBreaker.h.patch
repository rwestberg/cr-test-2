diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/inlineformatting/InlineLineBreaker.h b/modules/javafx.web/src/main/native/Source/WebCore/layout/inlineformatting/InlineLineBreaker.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/inlineformatting/InlineLineBreaker.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/inlineformatting/InlineLineBreaker.h
@@ -25,45 +25,39 @@
 
 #pragma once
 
 #if ENABLE(LAYOUT_FORMATTING_CONTEXT)
 
-#include "InlineRunProvider.h"
-#include <wtf/IsoMalloc.h>
+#include "LayoutUnit.h"
 
 namespace WebCore {
 namespace Layout {
 
-class InlineLineBreaker {
-    WTF_MAKE_ISO_ALLOCATED(InlineLineBreaker);
-public:
-    InlineLineBreaker(const LayoutState&, const InlineContent&, const Vector<InlineRunProvider::Run>&);
+class InlineItem;
+class InlineTextItem;
 
-    struct Run {
-        enum class Position { Undetermined, LineBegin, LineEnd };
-        Position position;
-        LayoutUnit width;
-        InlineRunProvider::Run content;
+class LineBreaker {
+public:
+    enum class BreakingBehavior { Keep, Split, Wrap };
+    struct BreakingContext {
+        BreakingBehavior breakingBehavior;
+        bool isAtBreakingOpportunity { false };
+    };
+    struct LineContext {
+        LayoutUnit availableWidth;
+        LayoutUnit logicalLeft;
+        LayoutUnit trimmableWidth;
+        bool isEmpty { false };
     };
-    Optional<Run> nextRun(LayoutUnit contentLogicalLeft, LayoutUnit availableWidth, bool lineIsEmpty);
+    BreakingContext breakingContext(const InlineItem&, LayoutUnit logicalWidth, const LineContext&);
 
 private:
-    enum class LineBreakingBehavior { Keep, Break, WrapToNextLine };
-    LineBreakingBehavior lineBreakingBehavior(const InlineRunProvider::Run&, bool lineIsEmpty);
-    bool isAtContentEnd() const;
-    Run splitRun(const InlineRunProvider::Run&, LayoutUnit contentLogicalLeft, LayoutUnit availableWidth, bool lineIsEmpty);
-    LayoutUnit runWidth(const InlineRunProvider::Run&, LayoutUnit contentLogicalLeft) const;
-    LayoutUnit textWidth(const InlineRunProvider::Run&, LayoutUnit contentLogicalLeft) const;
-    Optional<ItemPosition> adjustSplitPositionWithHyphenation(const InlineRunProvider::Run&, ItemPosition splitPosition, LayoutUnit contentLogicalLeft, LayoutUnit availableWidth, bool isLineEmpty) const;
 
-    const LayoutState& m_layoutState;
-    const InlineContent& m_inlineContent;
-    const Vector<InlineRunProvider::Run>& m_inlineRuns;
+    BreakingBehavior wordBreakingBehavior(const InlineTextItem&, bool lineIsEmpty) const;
+    bool isAtBreakingOpportunity(const InlineItem&);
 
-    unsigned m_currentRunIndex { 0 };
-    Optional<ItemPosition> m_splitPosition;
-    bool m_hyphenationIsDisabled { false };
+    bool m_hyphenationIsDisabled { true };
 };
 
 }
 }
 #endif
