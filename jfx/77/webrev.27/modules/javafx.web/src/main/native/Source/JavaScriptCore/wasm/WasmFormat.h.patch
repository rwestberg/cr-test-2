diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmFormat.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmFormat.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmFormat.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmFormat.h
@@ -52,24 +52,39 @@
 namespace Wasm {
 
 struct CompilationContext;
 struct ModuleInformation;
 
+enum class TableElementType : uint8_t {
+    Anyref,
+    Funcref
+};
+
 inline bool isValueType(Type type)
 {
     switch (type) {
     case I32:
     case I64:
     case F32:
     case F64:
         return true;
+    case Anyref:
+    case Funcref:
+        return Options::useWebAssemblyReferences();
     default:
         break;
     }
     return false;
 }
 
+inline bool isSubtype(Type sub, Type parent)
+{
+    if (sub == parent)
+        return true;
+    return sub == Funcref && parent == Anyref;
+}
+
 enum class ExternalKind : uint8_t {
     // FIXME auto-generate this. https://bugs.webkit.org/show_bug.cgi?id=165231
     Function = 0,
     Table = 1,
     Memory = 2,
@@ -105,50 +120,56 @@
     RELEASE_ASSERT_NOT_REACHED();
     return "?";
 }
 
 struct Import {
+    WTF_MAKE_STRUCT_FAST_ALLOCATED;
     const Name module;
     const Name field;
     ExternalKind kind;
     unsigned kindIndex; // Index in the vector of the corresponding kind.
 };
 
 struct Export {
+    WTF_MAKE_STRUCT_FAST_ALLOCATED;
     const Name field;
     ExternalKind kind;
     unsigned kindIndex; // Index in the vector of the corresponding kind.
 };
 
 String makeString(const Name& characters);
 
 struct Global {
+    WTF_MAKE_STRUCT_FAST_ALLOCATED;
     enum Mutability : uint8_t {
         // FIXME auto-generate this. https://bugs.webkit.org/show_bug.cgi?id=165231
         Mutable = 1,
         Immutable = 0
     };
 
     enum InitializationType {
         IsImport,
         FromGlobalImport,
+        FromRefFunc,
         FromExpression
     };
 
     Mutability mutability;
     Type type;
     InitializationType initializationType { IsImport };
     uint64_t initialBitsOrImportNumber { 0 };
 };
 
 struct FunctionData {
+    WTF_MAKE_STRUCT_FAST_ALLOCATED;
     size_t start;
     size_t end;
     Vector<uint8_t> data;
 };
 
 class I32InitExpr {
+    WTF_MAKE_FAST_ALLOCATED;
     enum Type : uint8_t {
         Global,
         Const
     };
 
@@ -180,10 +201,11 @@
     uint32_t m_bits;
     Type m_type;
 };
 
 struct Segment {
+    WTF_MAKE_STRUCT_FAST_ALLOCATED;
     uint32_t sizeInBytes;
     I32InitExpr offset;
     // Bytes are allocated at the end.
     uint8_t& byte(uint32_t pos)
     {
@@ -195,47 +217,56 @@
     typedef std::unique_ptr<Segment, decltype(&Segment::destroy)> Ptr;
     static Ptr adoptPtr(Segment*);
 };
 
 struct Element {
-    Element(I32InitExpr offset)
-        : offset(offset)
+    WTF_MAKE_STRUCT_FAST_ALLOCATED;
+    Element(uint32_t tableIndex, I32InitExpr offset)
+        : tableIndex(tableIndex)
+        , offset(offset)
     { }
 
+    uint32_t tableIndex;
     I32InitExpr offset;
     Vector<uint32_t> functionIndices;
 };
 
 class TableInformation {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
     TableInformation()
     {
         ASSERT(!*this);
     }
 
-    TableInformation(uint32_t initial, Optional<uint32_t> maximum, bool isImport)
+    TableInformation(uint32_t initial, Optional<uint32_t> maximum, bool isImport, TableElementType type)
         : m_initial(initial)
         , m_maximum(maximum)
         , m_isImport(isImport)
         , m_isValid(true)
+        , m_type(type)
     {
         ASSERT(*this);
     }
 
     explicit operator bool() const { return m_isValid; }
     bool isImport() const { return m_isImport; }
     uint32_t initial() const { return m_initial; }
     Optional<uint32_t> maximum() const { return m_maximum; }
+    TableElementType type() const { return m_type; }
+    Wasm::Type wasmType() const { return m_type == TableElementType::Funcref ? Type::Funcref : Type::Anyref; }
 
 private:
     uint32_t m_initial;
     Optional<uint32_t> m_maximum;
     bool m_isImport { false };
     bool m_isValid { false };
+    TableElementType m_type;
 };
 
 struct CustomSection {
+    WTF_MAKE_STRUCT_FAST_ALLOCATED;
     Name name;
     Vector<uint8_t> payload;
 };
 
 enum class NameType : uint8_t {
@@ -255,28 +286,32 @@
     }
     return false;
 }
 
 struct UnlinkedWasmToWasmCall {
+    WTF_MAKE_STRUCT_FAST_ALLOCATED;
     CodeLocationNearCall<WasmEntryPtrTag> callLocation;
     size_t functionIndexSpace;
 };
 
 struct Entrypoint {
+    WTF_MAKE_STRUCT_FAST_ALLOCATED;
     std::unique_ptr<B3::Compilation> compilation;
     RegisterAtOffsetList calleeSaveRegisters;
 };
 
 struct InternalFunction {
+    WTF_MAKE_STRUCT_FAST_ALLOCATED;
     CodeLocationDataLabelPtr<WasmEntryPtrTag> calleeMoveLocation;
     Entrypoint entrypoint;
 };
 
 // WebAssembly direct calls and call_indirect use indices into "function index space". This space starts
 // with all imports, and then all internal functions. WasmToWasmImportableFunction and FunctionIndexSpace are only
 // meant as fast lookup tables for these opcodes and do not own code.
 struct WasmToWasmImportableFunction {
+    WTF_MAKE_STRUCT_FAST_ALLOCATED;
     using LoadLocation = MacroAssemblerCodePtr<WasmEntryPtrTag>*;
     static ptrdiff_t offsetOfSignatureIndex() { return OBJECT_OFFSETOF(WasmToWasmImportableFunction, signatureIndex); }
     static ptrdiff_t offsetOfEntrypointLoadLocation() { return OBJECT_OFFSETOF(WasmToWasmImportableFunction, entrypointLoadLocation); }
 
     // FIXME: Pack signature index and code pointer into one 64-bit value. See <https://bugs.webkit.org/show_bug.cgi?id=165511>.
