diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/Microtasks.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/Microtasks.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/Microtasks.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/Microtasks.cpp
@@ -20,10 +20,12 @@
  */
 
 #include "config.h"
 #include "Microtasks.h"
 
+#include "CommonVM.h"
+#include "WorkerGlobalScope.h"
 #include <wtf/MainThread.h>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/SetForScope.h>
 
 namespace WebCore {
@@ -31,21 +33,22 @@
 void Microtask::removeSelfFromQueue(MicrotaskQueue& queue)
 {
     queue.remove(*this);
 }
 
-MicrotaskQueue::MicrotaskQueue()
-    : m_timer(*this, &MicrotaskQueue::timerFired)
+MicrotaskQueue::MicrotaskQueue(JSC::VM& vm)
+    : m_vm(makeRef(vm))
+    , m_timer(*this, &MicrotaskQueue::timerFired)
 {
 }
 
 MicrotaskQueue::~MicrotaskQueue() = default;
 
 MicrotaskQueue& MicrotaskQueue::mainThreadQueue()
 {
     ASSERT(isMainThread());
-    static NeverDestroyed<MicrotaskQueue> queue;
+    static NeverDestroyed<MicrotaskQueue> queue(commonVM());
     return queue;
 }
 
 MicrotaskQueue& MicrotaskQueue::contextQueue(ScriptExecutionContext& context)
 {
@@ -84,10 +87,11 @@
 {
     if (m_performingMicrotaskCheckpoint)
         return;
 
     SetForScope<bool> change(m_performingMicrotaskCheckpoint, true);
+    JSC::JSLockHolder locker(vm());
 
     Vector<std::unique_ptr<Microtask>> toKeep;
     while (!m_microtaskQueue.isEmpty()) {
         Vector<std::unique_ptr<Microtask>> queue = WTFMove(m_microtaskQueue);
         for (auto& task : queue) {
@@ -100,9 +104,10 @@
                 break;
             }
         }
     }
 
+    vm().finalizeSynchronousJSExecution();
     m_microtaskQueue = WTFMove(toKeep);
 }
 
 } // namespace WebCore
