diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ArrayPrototype.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ArrayPrototype.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ArrayPrototype.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ArrayPrototype.h
@@ -22,12 +22,10 @@
 
 #include "JSArray.h"
 
 namespace JSC {
 
-class ArrayPrototypeAdaptiveInferredPropertyWatchpoint;
-
 class ArrayPrototype final : public JSArray {
 private:
     ArrayPrototype(VM&, Structure*);
 
 public:
@@ -46,26 +44,15 @@
     static Structure* createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
     {
         return Structure::create(vm, globalObject, prototype, TypeInfo(DerivedArrayType, StructureFlags), info(), ArrayClass);
     }
 
-    void tryInitializeSpeciesWatchpoint(ExecState*);
-
-    static const bool needsDestruction = false;
-    // We don't need destruction since we use a finalizer.
-    static void destroy(JSC::JSCell*);
-
 protected:
     void finishCreation(VM&, JSGlobalObject*);
-
-private:
-    // This bit is set if any user modifies the constructor property Array.prototype. This is used to optimize species creation for JSArrays.
-    friend ArrayPrototypeAdaptiveInferredPropertyWatchpoint;
-    std::unique_ptr<ArrayPrototypeAdaptiveInferredPropertyWatchpoint> m_constructorWatchpoint;
-    std::unique_ptr<ArrayPrototypeAdaptiveInferredPropertyWatchpoint> m_constructorSpeciesWatchpoint;
 };
 
+EncodedJSValue JSC_HOST_CALL arrayProtoFuncSpeciesCreate(ExecState*);
 EncodedJSValue JSC_HOST_CALL arrayProtoFuncToString(ExecState*);
 EncodedJSValue JSC_HOST_CALL arrayProtoFuncValues(ExecState*);
 EncodedJSValue JSC_HOST_CALL arrayProtoPrivateFuncConcatMemcpy(ExecState*);
 EncodedJSValue JSC_HOST_CALL arrayProtoPrivateFuncAppendMemcpy(ExecState*);
 
