diff a/modules/javafx.web/src/main/native/Source/WebCore/html/PublicURLManager.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/PublicURLManager.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/PublicURLManager.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/PublicURLManager.cpp
@@ -24,44 +24,45 @@
  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #include "config.h"
 #include "PublicURLManager.h"
-#include <wtf/URL.h>
+
 #include "URLRegistry.h"
+#include <wtf/URL.h>
 #include <wtf/text/StringHash.h>
 
 namespace WebCore {
 
 std::unique_ptr<PublicURLManager> PublicURLManager::create(ScriptExecutionContext* context)
 {
-    auto publicURLManager = std::make_unique<PublicURLManager>(context);
+    auto publicURLManager = makeUnique<PublicURLManager>(context);
     publicURLManager->suspendIfNeeded();
     return publicURLManager;
 }
 
 PublicURLManager::PublicURLManager(ScriptExecutionContext* context)
     : ActiveDOMObject(context)
     , m_isStopped(false)
 {
 }
 
-void PublicURLManager::registerURL(SecurityOrigin* origin, const URL& url, URLRegistrable& registrable)
+void PublicURLManager::registerURL(const URL& url, URLRegistrable& registrable)
 {
     if (m_isStopped)
         return;
 
     RegistryURLMap::iterator found = m_registryToURL.add(&registrable.registry(), URLSet()).iterator;
-    found->key->registerURL(origin, url, registrable);
+    found->key->registerURL(*scriptExecutionContext(), url, registrable);
     found->value.add(url.string());
 }
 
 void PublicURLManager::revoke(const URL& url)
 {
     for (auto& registry : m_registryToURL) {
         if (registry.value.contains(url.string())) {
-            registry.key->unregisterURL(url);
+            registry.key->unregisterURL(*scriptExecutionContext(), url);
             registry.value.remove(url.string());
             break;
         }
     }
 }
@@ -72,11 +73,11 @@
         return;
 
     m_isStopped = true;
     for (auto& registry : m_registryToURL) {
         for (auto& url : registry.value)
-            registry.key->unregisterURL(URL({ }, url));
+            registry.key->unregisterURL(*scriptExecutionContext(), URL({ }, url));
     }
 
     m_registryToURL.clear();
 }
 
