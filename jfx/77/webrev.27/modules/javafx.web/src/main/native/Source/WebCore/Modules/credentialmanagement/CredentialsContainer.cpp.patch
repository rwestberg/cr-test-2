diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/credentialmanagement/CredentialsContainer.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/credentialmanagement/CredentialsContainer.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/credentialmanagement/CredentialsContainer.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/credentialmanagement/CredentialsContainer.cpp
@@ -52,11 +52,11 @@
     if (!m_document)
         return false;
 
     auto& origin = m_document->securityOrigin();
     for (auto* document = m_document->parentDocument(); document; document = document->parentDocument()) {
-        if (!originsMatch(document->securityOrigin(), origin))
+        if (!origin.isSameOriginAs(document->securityOrigin()))
             return false;
     }
     return true;
 }
 
@@ -81,10 +81,16 @@
     if (!options.publicKey) {
         promise.reject(Exception { NotSupportedError, "Only PublicKeyCredential is supported."_s });
         return;
     }
 
+    // Extra.
+    if (!m_document->hasFocus()) {
+        promise.reject(Exception { NotAllowedError, "The document is not focused."_s });
+        return;
+    }
+
     m_document->page()->authenticatorCoordinator().discoverFromExternalSource(m_document->securityOrigin(), options.publicKey.value(), doesHaveSameOriginAsItsAncestors(), WTFMove(options.signal), WTFMove(promise));
 }
 
 void CredentialsContainer::store(const BasicCredential&, CredentialPromise&& promise)
 {
@@ -110,10 +116,16 @@
     if (!options.publicKey) {
         promise.reject(Exception { NotSupportedError, "Only PublicKeyCredential is supported."_s });
         return;
     }
 
+    // Extra.
+    if (!m_document->hasFocus()) {
+        promise.reject(Exception { NotAllowedError, "The document is not focused."_s });
+        return;
+    }
+
     m_document->page()->authenticatorCoordinator().create(m_document->securityOrigin(), options.publicKey.value(), doesHaveSameOriginAsItsAncestors(), WTFMove(options.signal), WTFMove(promise));
 }
 
 void CredentialsContainer::preventSilentAccess(DOMPromiseDeferred<void>&& promise) const
 {
