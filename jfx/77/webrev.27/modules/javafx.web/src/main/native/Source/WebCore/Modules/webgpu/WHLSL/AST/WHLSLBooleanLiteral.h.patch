diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLBooleanLiteral.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLBooleanLiteral.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLBooleanLiteral.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLBooleanLiteral.h
@@ -26,41 +26,42 @@
 #pragma once
 
 #if ENABLE(WEBGPU)
 
 #include "WHLSLExpression.h"
-#include "WHLSLLexer.h"
+#include <wtf/FastMalloc.h>
 
 namespace WebCore {
 
 namespace WHLSL {
 
 namespace AST {
 
-class BooleanLiteral : public Expression {
+class BooleanLiteral final : public Expression {
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    BooleanLiteral(Lexer::Token&& origin, bool value)
-        : Expression(WTFMove(origin))
+    BooleanLiteral(CodeLocation location, bool value)
+        : Expression(location, Kind::BooleanLiteral)
         , m_value(value)
     {
     }
 
-    virtual ~BooleanLiteral() = default;
+    ~BooleanLiteral() = default;
 
     BooleanLiteral(const BooleanLiteral&) = delete;
     BooleanLiteral(BooleanLiteral&&) = default;
 
     BooleanLiteral& operator=(const BooleanLiteral&) = delete;
     BooleanLiteral& operator=(BooleanLiteral&&) = default;
 
     bool value() const { return m_value; }
 
-    bool isBooleanLiteral() const override { return true; }
-
     BooleanLiteral clone() const
     {
-        return BooleanLiteral(Lexer::Token(origin()), m_value);
+        BooleanLiteral result(codeLocation(), m_value);
+        copyTypeTo(result);
+        return result;
     }
 
 private:
     bool m_value;
 };
@@ -69,8 +70,10 @@
 
 }
 
 }
 
+DEFINE_DEFAULT_DELETE(BooleanLiteral)
+
 SPECIALIZE_TYPE_TRAITS_WHLSL_EXPRESSION(BooleanLiteral, isBooleanLiteral())
 
 #endif
