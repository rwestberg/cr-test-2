diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/Lexer.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/Lexer.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/Lexer.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/Lexer.h
@@ -1,8 +1,8 @@
 /*
  *  Copyright (C) 1999-2000 Harri Porten (porten@kde.org)
- *  Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2011, 2012, 2013 Apple Inc. All rights reserved.
+ *  Copyright (C) 2002-2019 Apple Inc. All rights reserved.
  *  Copyright (C) 2010 Zoltan Herczeg (zherczeg@inf.u-szeged.hu)
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Library General Public
  *  License as published by the Free Software Foundation; either
@@ -48,11 +48,11 @@
 class Lexer {
     WTF_MAKE_NONCOPYABLE(Lexer);
     WTF_MAKE_FAST_ALLOCATED;
 
 public:
-    Lexer(VM*, JSParserBuiltinMode, JSParserScriptMode);
+    Lexer(VM&, JSParserBuiltinMode, JSParserScriptMode);
     ~Lexer();
 
     // Character manipulation functions.
     static bool isWhiteSpace(T character);
     static bool isLineTerminator(T character);
@@ -177,15 +177,15 @@
 
     template <bool shouldBuildStrings, LexerEscapeParseMode escapeParseMode> ALWAYS_INLINE StringParseResult parseComplexEscape(bool strictMode, T stringQuoteCharacter);
     ALWAYS_INLINE StringParseResult parseTemplateLiteral(JSTokenData*, RawStringsBuildMode);
 
     using NumberParseResult = Variant<double, const Identifier*>;
-    ALWAYS_INLINE NumberParseResult parseHex();
+    ALWAYS_INLINE Optional<NumberParseResult> parseHex();
     ALWAYS_INLINE Optional<NumberParseResult> parseBinary();
     ALWAYS_INLINE Optional<NumberParseResult> parseOctal();
     ALWAYS_INLINE Optional<NumberParseResult> parseDecimal();
-    ALWAYS_INLINE void parseNumberAfterDecimalPoint();
+    ALWAYS_INLINE bool parseNumberAfterDecimalPoint();
     ALWAYS_INLINE bool parseNumberAfterExponentIndicator();
     ALWAYS_INLINE bool parseMultilineComment();
 
     ALWAYS_INLINE void parseCommentDirective();
     ALWAYS_INLINE String parseCommentDirectiveValue();
@@ -225,11 +225,11 @@
 
     T m_current;
 
     IdentifierArena* m_arena;
 
-    VM* m_vm;
+    VM& m_vm;
     bool m_parsingBuiltinFunction;
     JSParserScriptMode m_scriptMode;
 };
 
 template <>
@@ -239,11 +239,11 @@
 }
 
 template <>
 ALWAYS_INLINE bool Lexer<UChar>::isWhiteSpace(UChar ch)
 {
-    return (ch < 256) ? Lexer<LChar>::isWhiteSpace(static_cast<LChar>(ch)) : (u_charType(ch) == U_SPACE_SEPARATOR || ch == 0xFEFF);
+    return isLatin1(ch) ? Lexer<LChar>::isWhiteSpace(static_cast<LChar>(ch)) : (u_charType(ch) == U_SPACE_SEPARATOR || ch == 0xFEFF);
 }
 
 template <>
 ALWAYS_INLINE bool Lexer<LChar>::isLineTerminator(LChar ch)
 {
@@ -390,11 +390,11 @@
     ASSERT(tokenLocation->startOffset >= tokenLocation->lineStartOffset);
     tokenRecord->m_startPosition = startPosition;
     tokenRecord->m_endPosition = currentPosition();
 #if !ASSERT_DISABLED
     if (m_parsingBuiltinFunction) {
-        if (!isSafeBuiltinIdentifier(*m_vm, tokenData->ident))
+        if (!isSafeBuiltinIdentifier(m_vm, tokenData->ident))
             return ERRORTOK;
     }
 #endif
 
     m_lastToken = IDENT;
