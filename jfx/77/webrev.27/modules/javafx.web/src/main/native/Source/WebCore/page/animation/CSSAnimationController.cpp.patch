diff a/modules/javafx.web/src/main/native/Source/WebCore/page/animation/CSSAnimationController.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/animation/CSSAnimationController.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/animation/CSSAnimationController.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/animation/CSSAnimationController.cpp
@@ -76,11 +76,16 @@
     , m_waitingForAsyncStartNotification(false)
     , m_allowsNewAnimationsWhileSuspended(false)
 {
 }
 
-CSSAnimationControllerPrivate::~CSSAnimationControllerPrivate() = default;
+CSSAnimationControllerPrivate::~CSSAnimationControllerPrivate()
+{
+    // We need to explicitly clear the composite animations here because the
+    // destructor of CompositeAnimation will call members of this class back.
+    m_compositeAnimations.clear();
+}
 
 CompositeAnimation& CSSAnimationControllerPrivate::ensureCompositeAnimation(Element& element)
 {
     element.setHasCSSAnimation();
 
@@ -238,11 +243,11 @@
 {
     if (!m_updateStyleIfNeededDispatcher.isActive())
         m_updateStyleIfNeededDispatcher.startOneShot(0_s);
 }
 
-void CSSAnimationControllerPrivate::addEventToDispatch(Element& element, const AtomicString& eventType, const String& name, double elapsedTime)
+void CSSAnimationControllerPrivate::addEventToDispatch(Element& element, const AtomString& eventType, const String& name, double elapsedTime)
 {
     m_eventsToDispatch.append({ element, eventType, name, elapsedTime });
     startUpdateStyleIfNeededDispatcher();
 }
 
@@ -407,11 +412,11 @@
 void CSSAnimationControllerPrivate::setAllowsNewAnimationsWhileSuspended(bool allowed)
 {
     m_allowsNewAnimationsWhileSuspended = allowed;
 }
 
-bool CSSAnimationControllerPrivate::pauseAnimationAtTime(Element& element, const AtomicString& name, double t)
+bool CSSAnimationControllerPrivate::pauseAnimationAtTime(Element& element, const AtomString& name, double t)
 {
     CompositeAnimation& compositeAnimation = ensureCompositeAnimation(element);
     if (compositeAnimation.pauseAnimationAtTime(name, t)) {
         element.invalidateStyle();
         startUpdateStyleIfNeededDispatcher();
@@ -589,11 +594,11 @@
     if (!anyAnimationsWaitingForAsyncStart)
         m_waitingForAsyncStartNotification = false;
 }
 
 CSSAnimationController::CSSAnimationController(Frame& frame)
-    : m_data(std::make_unique<CSSAnimationControllerPrivate>(frame))
+    : m_data(makeUnique<CSSAnimationControllerPrivate>(frame))
 {
 }
 
 CSSAnimationController::~CSSAnimationController() = default;
 
@@ -671,11 +676,11 @@
 
     AnimationUpdateBlock animationUpdateBlock(this);
     m_data->receivedStartTimeResponse(startTime);
 }
 
-bool CSSAnimationController::pauseAnimationAtTime(Element& element, const AtomicString& name, double t)
+bool CSSAnimationController::pauseAnimationAtTime(Element& element, const AtomString& name, double t)
 {
     AnimationUpdateBlock animationUpdateBlock(this);
     return m_data->pauseAnimationAtTime(element, name, t);
 }
 
