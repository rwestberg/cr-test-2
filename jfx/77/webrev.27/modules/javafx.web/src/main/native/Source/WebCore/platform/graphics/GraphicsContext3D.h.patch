diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsContext3D.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsContext3D.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsContext3D.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsContext3D.h
@@ -23,10 +23,12 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#if ENABLE(WEBGL)
+
 #include "ANGLEWebKitBridge.h"
 #include "GraphicsContext3DAttributes.h"
 #include "GraphicsTypes3D.h"
 #include "Image.h"
 #include "IntRect.h"
@@ -62,14 +64,21 @@
 #else
 typedef void* PlatformGraphicsContext3D;
 #endif // __OBJC__
 #endif // USE(OPENGL_ES)
 
-#if !USE(OPENGL_ES)
+#if USE(OPENGL)
 typedef struct _CGLContextObject *CGLContextObj;
 typedef CGLContextObj PlatformGraphicsContext3D;
-#endif
+#endif // USE(OPENGL)
+
+#if USE(ANGLE)
+typedef void* PlatformGraphicsContext3D;
+typedef void* PlatformGraphicsContext3DDisplay;
+typedef void* PlatformGraphicsContext3DSurface;
+typedef void* PlatformGraphicsContext3DConfig;
+#endif // USE(ANGLE)
 
 OBJC_CLASS CALayer;
 OBJC_CLASS WebGLLayer;
 typedef struct __IOSurface* IOSurfaceRef;
 #endif // PLATFORM(COCOA)
@@ -92,12 +101,14 @@
 
 namespace WebCore {
 class Extensions3D;
 #if !PLATFORM(COCOA) && USE(OPENGL_ES)
 class Extensions3DOpenGLES;
-#else
+#elif USE(OPENGL) || (PLATFORM(COCOA) && USE(OPENGL_ES))
 class Extensions3DOpenGL;
+#elif USE(ANGLE)
+class Extensions3DANGLE;
 #endif
 class HostWindow;
 class Image;
 class ImageBuffer;
 class ImageData;
@@ -118,10 +129,19 @@
 
 class GraphicsContext3DPrivate;
 
 class GraphicsContext3D : public RefCounted<GraphicsContext3D> {
 public:
+    class Client {
+    public:
+        virtual ~Client() { }
+        virtual void didComposite() = 0;
+        virtual void forceContextLost() = 0;
+        virtual void recycleContext() = 0;
+        virtual void dispatchContextChangedNotification() = 0;
+    };
+
     enum {
         // WebGL 1 constants
         DEPTH_BUFFER_BIT = 0x00000100,
         STENCIL_BUFFER_BIT = 0x00000400,
         COLOR_BUFFER_BIT = 0x00004000,
@@ -762,11 +782,13 @@
     Platform3DObject platformTexture() const;
     PlatformLayer* platformLayer() const;
 #endif
 
     bool makeContextCurrent();
-    void setWebGLContext(WebGLRenderingContextBase* base) { m_webglContext = base; }
+
+    void addClient(Client& client) { m_clients.add(&client); }
+    void removeClient(Client& client) { m_clients.remove(&client); }
 
     // With multisampling on, blit from multisampleFBO to regular FBO.
     void prepareTexture();
 
     // Equivalent to ::glTexImage2D(). Allows pixels==0 with no allocation.
@@ -1035,18 +1057,22 @@
     void getFloatv(GC3Denum pname, GC3Dfloat* value);
     void getFramebufferAttachmentParameteriv(GC3Denum target, GC3Denum attachment, GC3Denum pname, GC3Dint* value);
     void getIntegerv(GC3Denum pname, GC3Dint* value);
     void getInteger64v(GC3Denum pname, GC3Dint64* value);
     void getProgramiv(Platform3DObject program, GC3Denum pname, GC3Dint* value);
+#if !USE(ANGLE)
     void getNonBuiltInActiveSymbolCount(Platform3DObject program, GC3Denum pname, GC3Dint* value);
+#endif // !USE(ANGLE)
     String getProgramInfoLog(Platform3DObject);
     String getUnmangledInfoLog(Platform3DObject[2], GC3Dsizei, const String&);
     void getRenderbufferParameteriv(GC3Denum target, GC3Denum pname, GC3Dint* value);
     void getShaderiv(Platform3DObject, GC3Denum pname, GC3Dint* value);
     String getShaderInfoLog(Platform3DObject);
     void getShaderPrecisionFormat(GC3Denum shaderType, GC3Denum precisionType, GC3Dint* range, GC3Dint* precision);
+#if !USE(ANGLE)
     String getShaderSource(Platform3DObject);
+#endif // !USE(ANGLE)
     String getString(GC3Denum name);
     void getTexParameterfv(GC3Denum target, GC3Denum pname, GC3Dfloat* value);
     void getTexParameteriv(GC3Denum target, GC3Denum pname, GC3Dint* value);
     void getUniformfv(Platform3DObject program, GC3Dint location, GC3Dfloat* value);
     void getUniformiv(Platform3DObject program, GC3Dint location, GC3Dint* value);
@@ -1108,12 +1134,14 @@
     void uniformMatrix3fv(GC3Dint location, GC3Dsizei, GC3Dboolean transpose, const GC3Dfloat* value);
     void uniformMatrix4fv(GC3Dint location, GC3Dsizei, GC3Dboolean transpose, const GC3Dfloat* value);
 
     void useProgram(Platform3DObject);
     void validateProgram(Platform3DObject);
+#if !USE(ANGLE)
     bool checkVaryingsPacking(Platform3DObject vertexShader, Platform3DObject fragmentShader) const;
     bool precisionsMatch(Platform3DObject vertexShader, Platform3DObject fragmentShader) const;
+#endif
 
     void vertexAttrib1f(GC3Duint index, GC3Dfloat x);
     void vertexAttrib1fv(GC3Duint index, const GC3Dfloat* values);
     void vertexAttrib2f(GC3Duint index, GC3Dfloat x, GC3Dfloat y);
     void vertexAttrib2fv(GC3Duint index, const GC3Dfloat* values);
@@ -1167,10 +1195,15 @@
 #if USE(OPENGL)
     void allocateIOSurfaceBackingStore(IntSize);
     void updateFramebufferTextureBackingStoreFromLayer();
     void updateCGLContext();
 #endif
+
+#if USE(ANGLE) && PLATFORM(MAC)
+    void allocateIOSurfaceBackingStore(IntSize);
+    void updateFramebufferTextureBackingStoreFromLayer();
+#endif
 #endif // PLATFORM(COCOA)
 
     void setContextVisibility(bool);
 
     GraphicsContext3DPowerPreference powerPreferenceUsedForCreation() const { return m_powerPreferenceUsedForCreation; }
@@ -1343,11 +1376,14 @@
     int m_currentHeight { 0 };
 
 #if PLATFORM(COCOA)
     RetainPtr<WebGLLayer> m_webGLLayer;
     PlatformGraphicsContext3D m_contextObj { nullptr };
-#endif
+#if USE(ANGLE)
+    PlatformGraphicsContext3DDisplay m_displayObj { nullptr };
+#endif // USE(ANGLE)
+#endif // PLATFORM(COCOA)
 
 #if PLATFORM(WIN) && USE(CA)
     RefPtr<PlatformCALayer> m_webGLLayer;
 #endif
 
@@ -1377,10 +1413,11 @@
                 return varyingMap;
             return uniformMap;
         }
     };
 
+#if !USE(ANGLE)
     // FIXME: Shaders are never removed from this map, even if they and their program are deleted.
     // This is bad, and it also relies on the fact we never reuse Platform3DObject numbers.
     typedef HashMap<Platform3DObject, ShaderSourceEntry> ShaderSourceMap;
     ShaderSourceMap m_shaderSourceMap;
 
@@ -1415,26 +1452,33 @@
     String originalSymbolName(Platform3DObject program, ANGLEShaderSymbolType, const String& name);
     Optional<String> mappedSymbolInShaderSourceMap(Platform3DObject shader, ANGLEShaderSymbolType, const String& name);
     Optional<String> originalSymbolInShaderSourceMap(Platform3DObject shader, ANGLEShaderSymbolType, const String& name);
 
     std::unique_ptr<ShaderNameHash> nameHashMapForShaders;
+#endif // !USE(ANGLE)
 
 #if !PLATFORM(COCOA) && USE(OPENGL_ES)
     friend class Extensions3DOpenGLES;
+    friend class Extensions3DOpenGLCommon;
     std::unique_ptr<Extensions3DOpenGLES> m_extensions;
-#else
+#elif USE(OPENGL) || (PLATFORM(COCOA) && USE(OPENGL_ES))
     friend class Extensions3DOpenGL;
+    friend class Extensions3DOpenGLCommon;
     std::unique_ptr<Extensions3DOpenGL> m_extensions;
+#elif USE(ANGLE)
+    friend class Extensions3DANGLE;
+    std::unique_ptr<Extensions3DANGLE> m_extensions;
 #endif
-    friend class Extensions3DOpenGLCommon;
 
     GraphicsContext3DAttributes m_attrs;
     GraphicsContext3DPowerPreference m_powerPreferenceUsedForCreation { GraphicsContext3DPowerPreference::Default };
     RenderStyle m_renderStyle;
     Vector<Vector<float>> m_vertexArray;
 
+#if !USE(ANGLE)
     ANGLEWebKitBridge m_compiler;
+#endif
 
     GC3Duint m_texture { 0 };
     GC3Duint m_fbo { 0 };
 #if USE(COORDINATED_GRAPHICS)
     GC3Duint m_compositorTexture { 0 };
@@ -1446,10 +1490,14 @@
     GC3Duint m_depthStencilBuffer { 0 };
 
     bool m_layerComposited { false };
     GC3Duint m_internalColorFormat { 0 };
 
+#if USE(ANGLE)
+    PlatformGraphicsContext3DSurface m_pbuffer;
+#endif
+
     struct GraphicsContext3DState {
         GC3Duint boundFBO { 0 };
         GC3Denum activeTextureUnit { GraphicsContext3D::TEXTURE0 };
 
         using BoundTextureMap = HashMap<GC3Denum,
@@ -1505,12 +1553,11 @@
 #else
     friend class GraphicsContext3DPrivate;
     std::unique_ptr<GraphicsContext3DPrivate> m_private;
 #endif
 
-    // FIXME: Layering violation.
-    WebGLRenderingContextBase* m_webglContext { nullptr };
+    HashSet<Client*> m_clients;
 
     bool m_isForWebGL2 { false };
     bool m_usingCoreProfile { false };
 
     unsigned m_statusCheckCount { 0 };
@@ -1524,5 +1571,7 @@
     bool m_hasSwitchedToHighPerformanceGPU { false };
 #endif
 };
 
 } // namespace WebCore
+
+#endif
