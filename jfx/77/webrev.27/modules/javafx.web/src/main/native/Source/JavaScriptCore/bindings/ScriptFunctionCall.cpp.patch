diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bindings/ScriptFunctionCall.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bindings/ScriptFunctionCall.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bindings/ScriptFunctionCall.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bindings/ScriptFunctionCall.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  * Copyright (C) 2009 Google Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are
  * met:
@@ -40,18 +40,20 @@
 
 namespace Deprecated {
 
 void ScriptCallArgumentHandler::appendArgument(const String& argument)
 {
-    JSLockHolder lock(m_exec);
-    m_arguments.append(jsString(m_exec, argument));
+    VM& vm = m_exec->vm();
+    JSLockHolder lock(vm);
+    m_arguments.append(jsString(vm, argument));
 }
 
 void ScriptCallArgumentHandler::appendArgument(const char* argument)
 {
-    JSLockHolder lock(m_exec);
-    m_arguments.append(jsString(m_exec, String(argument)));
+    VM& vm = m_exec->vm();
+    JSLockHolder lock(vm);
+    m_arguments.append(jsString(vm, String(argument)));
 }
 
 void ScriptCallArgumentHandler::appendArgument(JSValue argument)
 {
     m_arguments.append(argument);
@@ -106,11 +108,11 @@
 
     VM& vm = m_exec->vm();
     JSLockHolder lock(vm);
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    JSValue function = thisObject->get(m_exec, Identifier::fromString(m_exec, m_name));
+    JSValue function = thisObject->get(m_exec, Identifier::fromString(vm, m_name));
     if (UNLIKELY(scope.exception())) {
         hadException = true;
         return { };
     }
 
