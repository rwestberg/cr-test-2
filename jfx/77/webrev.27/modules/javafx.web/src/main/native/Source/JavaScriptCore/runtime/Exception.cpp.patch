diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Exception.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Exception.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Exception.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Exception.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2015-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -29,11 +29,11 @@
 #include "Interpreter.h"
 #include "JSCInlines.h"
 
 namespace JSC {
 
-const ClassInfo Exception::s_info = { "Exception", &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(Exception) };
+const ClassInfo Exception::s_info = { "Exception", nullptr, nullptr, nullptr, CREATE_METHOD_TABLE(Exception) };
 
 Exception* Exception::create(VM& vm, JSValue thrownValue, StackCaptureAction action)
 {
     Exception* result = new (NotNull, allocateCell<Exception>(vm.heap)) Exception(vm);
     result->finishCreation(vm, thrownValue, action);
@@ -46,11 +46,11 @@
     exception->~Exception();
 }
 
 Structure* Exception::createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
 {
-    return Structure::create(vm, globalObject, prototype, TypeInfo(ObjectType, StructureFlags), info());
+    return Structure::create(vm, globalObject, prototype, TypeInfo(CellType, StructureFlags), info());
 }
 
 void Exception::visitChildren(JSCell* cell, SlotVisitor& visitor)
 {
     Exception* thisObject = jsCast<Exception*>(cell);
