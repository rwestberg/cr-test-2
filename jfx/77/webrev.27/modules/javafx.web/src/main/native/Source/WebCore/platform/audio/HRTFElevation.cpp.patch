diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/HRTFElevation.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/HRTFElevation.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/HRTFElevation.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/HRTFElevation.cpp
@@ -242,12 +242,12 @@
     bool isElevationGood = elevation >= -45 && elevation <= 90 && (elevation / 15) * 15 == elevation;
     ASSERT(isElevationGood);
     if (!isElevationGood)
         return nullptr;
 
-    auto kernelListL = std::make_unique<HRTFKernelList>(NumberOfTotalAzimuths);
-    auto kernelListR = std::make_unique<HRTFKernelList>(NumberOfTotalAzimuths);
+    auto kernelListL = makeUnique<HRTFKernelList>(NumberOfTotalAzimuths);
+    auto kernelListR = makeUnique<HRTFKernelList>(NumberOfTotalAzimuths);
 
     // Load convolution kernels from HRTF files.
     int interpolatedIndex = 0;
     for (unsigned rawIndex = 0; rawIndex < NumberOfRawAzimuths; ++rawIndex) {
         // Don't let elevation exceed maximum for this azimuth.
@@ -272,23 +272,23 @@
             (*kernelListL)[i + jj] = HRTFKernel::createInterpolatedKernel(kernelListL->at(i).get(), kernelListL->at(j).get(), x);
             (*kernelListR)[i + jj] = HRTFKernel::createInterpolatedKernel(kernelListR->at(i).get(), kernelListR->at(j).get(), x);
         }
     }
 
-    return std::make_unique<HRTFElevation>(WTFMove(kernelListL), WTFMove(kernelListR), elevation, sampleRate);
+    return makeUnique<HRTFElevation>(WTFMove(kernelListL), WTFMove(kernelListR), elevation, sampleRate);
 }
 
 std::unique_ptr<HRTFElevation> HRTFElevation::createByInterpolatingSlices(HRTFElevation* hrtfElevation1, HRTFElevation* hrtfElevation2, float x, float sampleRate)
 {
     ASSERT(hrtfElevation1 && hrtfElevation2);
     if (!hrtfElevation1 || !hrtfElevation2)
         return nullptr;
 
     ASSERT(x >= 0.0 && x < 1.0);
 
-    auto kernelListL = std::make_unique<HRTFKernelList>(NumberOfTotalAzimuths);
-    auto kernelListR = std::make_unique<HRTFKernelList>(NumberOfTotalAzimuths);
+    auto kernelListL = makeUnique<HRTFKernelList>(NumberOfTotalAzimuths);
+    auto kernelListR = makeUnique<HRTFKernelList>(NumberOfTotalAzimuths);
 
     HRTFKernelList* kernelListL1 = hrtfElevation1->kernelListL();
     HRTFKernelList* kernelListR1 = hrtfElevation1->kernelListR();
     HRTFKernelList* kernelListL2 = hrtfElevation2->kernelListL();
     HRTFKernelList* kernelListR2 = hrtfElevation2->kernelListR();
@@ -300,11 +300,11 @@
     }
 
     // Interpolate elevation angle.
     double angle = (1.0 - x) * hrtfElevation1->elevationAngle() + x * hrtfElevation2->elevationAngle();
 
-    return std::make_unique<HRTFElevation>(WTFMove(kernelListL), WTFMove(kernelListR), static_cast<int>(angle), sampleRate);
+    return makeUnique<HRTFElevation>(WTFMove(kernelListL), WTFMove(kernelListR), static_cast<int>(angle), sampleRate);
 }
 
 void HRTFElevation::getKernelsFromAzimuth(double azimuthBlend, unsigned azimuthIndex, HRTFKernel* &kernelL, HRTFKernel* &kernelR, double& frameDelayL, double& frameDelayR)
 {
     bool checkAzimuthBlend = azimuthBlend >= 0.0 && azimuthBlend < 1.0;
