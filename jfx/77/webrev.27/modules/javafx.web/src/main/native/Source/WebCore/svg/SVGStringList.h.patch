diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGStringList.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGStringList.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGStringList.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGStringList.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -23,36 +23,67 @@
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
-#include "SVGAnimatedListPropertyTearOff.h"
-#include "SVGListPropertyTearOff.h"
-#include "SVGStringListValues.h"
+#include "SVGParserUtilities.h"
+#include "SVGPrimitiveList.h"
+#include <wtf/text/StringBuilder.h>
 
 namespace WebCore {
 
-class SVGStringList final : public SVGStaticListPropertyTearOff<SVGStringListValues> {
+class SVGStringList final : public SVGPrimitiveList<String> {
+    using Base = SVGPrimitiveList<String>;
+    using Base::Base;
+    using Base::m_items;
+
 public:
-    using AnimatedListPropertyTearOff = SVGAnimatedListPropertyTearOff<SVGStringListValues>;
-    using ListWrapperCache = AnimatedListPropertyTearOff::ListWrapperCache;
+    static Ref<SVGStringList> create(SVGPropertyOwner* owner)
+    {
+        return adoptRef(*new SVGStringList(owner));
+    }
 
-    static Ref<SVGStringList> create(SVGElement& contextElement, SVGStringListValues& values)
+    void reset(const String& string)
     {
-        return adoptRef(*new SVGStringList(&contextElement, values));
+        parse(string, ' ');
+
+        // Add empty string, if list is empty.
+        if (m_items.isEmpty())
+            m_items.append(emptyString());
     }
 
-    static Ref<SVGStringList> create(AnimatedListPropertyTearOff&, SVGPropertyRole, SVGStringListValues& values, ListWrapperCache&)
+    bool parse(const String& data, UChar delimiter)
     {
-        // FIXME: Find a way to remove this. It's only needed to keep Windows compiling.
-        ASSERT_NOT_REACHED();
-        return adoptRef(*new SVGStringList(nullptr, values));
+        clearItems();
+
+        auto upconvertedCharacters = StringView(data).upconvertedCharacters();
+        const UChar* ptr = upconvertedCharacters;
+        const UChar* end = ptr + data.length();
+        while (ptr < end) {
+            const UChar* start = ptr;
+            while (ptr < end && *ptr != delimiter && !isSVGSpace(*ptr))
+                ptr++;
+            if (ptr == start)
+                break;
+            m_items.append(String(start, ptr - start));
+            skipOptionalSVGSpacesOrDelimiter(ptr, end, delimiter);
+        }
+
+        return ptr == end;
     }
 
-private:
-    SVGStringList(SVGElement* contextElement, SVGStringListValues& values)
-        : SVGStaticListPropertyTearOff<SVGStringListValues>(contextElement, values)
+    String valueAsString() const override
     {
+        StringBuilder builder;
+
+        for (auto string : m_items) {
+            if (builder.length())
+                builder.append(' ');
+
+            builder.append(string);
+        }
+
+        return builder.toString();
     }
 };
 
 } // namespace WebCore
