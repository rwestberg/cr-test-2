diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/WeakPtr.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/WeakPtr.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/WeakPtr.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/WeakPtr.h
@@ -24,160 +24,234 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include <wtf/MainThread.h>
 #include <wtf/Noncopyable.h>
 #include <wtf/Ref.h>
 #include <wtf/ThreadSafeRefCounted.h>
 #include <wtf/Threading.h>
 
 namespace WTF {
 
-template<typename T> class WeakPtr;
-template<typename T> class WeakPtrFactory;
+// Testing interface for TestWebKitAPI
+#ifndef DID_CREATE_WEAK_PTR_IMPL
+#define DID_CREATE_WEAK_PTR_IMPL(p)
+#endif
+#ifndef WILL_DESTROY_WEAK_PTR_IMPL
+#define WILL_DESTROY_WEAK_PTR_IMPL(p)
+#endif
 
-// Note: WeakReference is an implementation detail, and should not be used directly.
-template<typename T>
-class WeakReference : public ThreadSafeRefCounted<WeakReference<T>> {
-    WTF_MAKE_NONCOPYABLE(WeakReference<T>);
+template<typename> class WeakHashSet;
+template<typename> class WeakPtr;
+template<typename> class WeakPtrFactory;
+
+class WeakPtrImpl : public ThreadSafeRefCounted<WeakPtrImpl> {
+    WTF_MAKE_NONCOPYABLE(WeakPtrImpl);
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    T* get() const { return m_ptr; }
+    template<typename T> static Ref<WeakPtrImpl> create(T* ptr)
+    {
+        return adoptRef(*new WeakPtrImpl(ptr));
+    }
 
-    void clear() { m_ptr = nullptr; }
+    ~WeakPtrImpl()
+    {
+        WILL_DESTROY_WEAK_PTR_IMPL(m_ptr);
+    }
 
-private:
-    friend class WeakPtr<T>;
-    friend class WeakPtrFactory<T>;
+    template<typename T> typename T::WeakValueType* get()
+    {
+        return static_cast<typename T::WeakValueType*>(m_ptr);
+    }
 
-    static Ref<WeakReference<T>> create(T* ptr) { return adoptRef(*new WeakReference(ptr)); }
+    explicit operator bool() const { return m_ptr; }
+    void clear() { m_ptr = nullptr; }
+
+#if !ASSERT_DISABLED
+    bool wasConstructedOnMainThread() const { return m_wasConstructedOnMainThread; }
+#endif
 
-    explicit WeakReference(T* ptr)
-        : m_ptr(ptr)
+private:
+    template<typename T> explicit WeakPtrImpl(T* ptr)
+        : m_ptr(static_cast<typename T::WeakValueType*>(ptr))
+#if !ASSERT_DISABLED
+        , m_wasConstructedOnMainThread(isMainThread())
+#endif
     {
+        DID_CREATE_WEAK_PTR_IMPL(ptr);
     }
 
-    T* m_ptr;
+    void* m_ptr;
+#if !ASSERT_DISABLED
+    bool m_wasConstructedOnMainThread;
+#endif
 };
 
 template<typename T>
 class WeakPtr {
     WTF_MAKE_FAST_ALLOCATED;
 public:
     WeakPtr() { }
     WeakPtr(std::nullptr_t) { }
-    WeakPtr(Ref<WeakReference<T>>&& ref) : m_ref(std::forward<Ref<WeakReference<T>>>(ref)) { }
     template<typename U> WeakPtr(const WeakPtr<U>&);
     template<typename U> WeakPtr(WeakPtr<U>&&);
 
-    T* get() const { return m_ref ? m_ref->get() : nullptr; }
-    explicit operator bool() const { return m_ref && m_ref->get(); }
+    T* get() const
+    {
+        // FIXME: Our GC threads currently need to get opaque pointers from WeakPtrs and have to be special-cased.
+        ASSERT(!m_impl || Thread::mayBeGCThread() || m_impl->wasConstructedOnMainThread() == isMainThread());
+        return m_impl ? static_cast<T*>(m_impl->get<T>()) : nullptr;
+    }
+
+    explicit operator bool() const { return m_impl && *m_impl; }
 
-    WeakPtr& operator=(std::nullptr_t) { m_ref = nullptr; return *this; }
+    WeakPtr& operator=(std::nullptr_t) { m_impl = nullptr; return *this; }
     template<typename U> WeakPtr& operator=(const WeakPtr<U>&);
     template<typename U> WeakPtr& operator=(WeakPtr<U>&&);
 
-    T* operator->() const { return m_ref->get(); }
-    T& operator*() const { return *m_ref->get(); }
+    T* operator->() const
+    {
+        ASSERT(!m_impl || m_impl->wasConstructedOnMainThread() == isMainThread());
+        return get();
+    }
+
+    T& operator*() const
+    {
+        ASSERT(!m_impl || m_impl->wasConstructedOnMainThread() == isMainThread());
+        return *get();
+    }
 
-    void clear() { m_ref = nullptr; }
+    void clear() { m_impl = nullptr; }
 
 private:
-    template<typename U> friend class WeakPtr;
+    explicit WeakPtr(Ref<WeakPtrImpl>&& ref) : m_impl(WTFMove(ref)) { }
+    template<typename> friend class WeakHashSet;
+    template<typename> friend class WeakPtr;
+    template<typename> friend class WeakPtrFactory;
     template<typename U> friend WeakPtr<U> makeWeakPtr(U&);
 
-    RefPtr<WeakReference<T>> m_ref;
+    RefPtr<WeakPtrImpl> m_impl;
 };
 
 // Note: you probably want to inherit from CanMakeWeakPtr rather than use this directly.
 template<typename T>
 class WeakPtrFactory {
     WTF_MAKE_NONCOPYABLE(WeakPtrFactory<T>);
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    WeakPtrFactory() = default;
+    WeakPtrFactory()
+#if !ASSERT_DISABLED
+        : m_wasConstructedOnMainThread(isMainThread())
+#endif
+    {
+    }
+
     ~WeakPtrFactory()
     {
-        if (!m_ref)
+        if (!m_impl)
+            return;
+        m_impl->clear();
+    }
+
+    void initializeIfNeeded(const T& object) const
+    {
+        if (m_impl)
             return;
-        m_ref->clear();
+
+        ASSERT(m_wasConstructedOnMainThread == isMainThread());
+        m_impl = WeakPtrImpl::create(const_cast<T*>(&object));
     }
 
-    WeakPtr<T> createWeakPtr(T& ptr) const
+    WeakPtr<T> createWeakPtr(T& object) const
     {
-        if (!m_ref)
-            m_ref = WeakReference<T>::create(&ptr);
-        return { makeRef(*m_ref) };
+        initializeIfNeeded(object);
+
+        ASSERT(&object == m_impl->get<T>());
+        return WeakPtr<T>(makeRef(*m_impl));
     }
 
-    WeakPtr<const T> createWeakPtr(const T& ptr) const
+    WeakPtr<const T> createWeakPtr(const T& object) const
     {
-        if (!m_ref)
-            m_ref = WeakReference<T>::create(const_cast<T*>(&ptr));
-        return { makeRef(reinterpret_cast<WeakReference<const T>&>(*m_ref)) };
+        initializeIfNeeded(object);
+
+        ASSERT(&object == m_impl->get<T>());
+        return WeakPtr<T>(makeRef(*m_impl));
     }
 
     void revokeAll()
     {
-        if (!m_ref)
+        if (!m_impl)
             return;
 
-        m_ref->clear();
-        m_ref = nullptr;
+        m_impl->clear();
+        m_impl = nullptr;
     }
 
 private:
-    mutable RefPtr<WeakReference<T>> m_ref;
+    template<typename> friend class WeakHashSet;
+
+    mutable RefPtr<WeakPtrImpl> m_impl;
+#if !ASSERT_DISABLED
+    bool m_wasConstructedOnMainThread;
+#endif
 };
 
-template<typename T> class CanMakeWeakPtr {
+// We use lazy initialization of the WeakPtrFactory by default to avoid unnecessary initialization. Eager
+// initialization is however useful if you plan to call makeWeakPtr() from other threads.
+enum class WeakPtrFactoryInitialization { Lazy, Eager };
+
+template<typename T, WeakPtrFactoryInitialization initializationMode = WeakPtrFactoryInitialization::Lazy> class CanMakeWeakPtr {
 public:
-    const WeakPtrFactory<T>& weakPtrFactory() const { return m_weakFactory; }
-    WeakPtrFactory<T>& weakPtrFactory() { return m_weakFactory; }
+    using WeakValueType = T;
+
+    const WeakPtrFactory<T>& weakPtrFactory() const { return m_weakPtrFactory; }
+    WeakPtrFactory<T>& weakPtrFactory() { return m_weakPtrFactory; }
+
+protected:
+    CanMakeWeakPtr()
+    {
+        if (initializationMode == WeakPtrFactoryInitialization::Eager)
+            m_weakPtrFactory.initializeIfNeeded(static_cast<T&>(*this));
+    }
 
 private:
-    WeakPtrFactory<T> m_weakFactory;
+    WeakPtrFactory<T> m_weakPtrFactory;
 };
 
-template<typename T, typename U> inline WeakReference<T>* weak_reference_upcast(WeakReference<U>* weakReference)
-{
-    static_assert(std::is_convertible<U*, T*>::value, "U* must be convertible to T*");
-    return reinterpret_cast<WeakReference<T>*>(weakReference);
-}
-
-template<typename T, typename U> inline WeakReference<T>* weak_reference_downcast(WeakReference<U>* weakReference)
+template<typename T, typename U> inline WeakPtrImpl* weak_ptr_impl_cast(WeakPtrImpl* impl)
 {
-    static_assert(std::is_convertible<T*, U*>::value, "T* must be convertible to U*");
-    return reinterpret_cast<WeakReference<T>*>(weakReference);
+    static_assert(std::is_same<typename T::WeakValueType, typename U::WeakValueType>::value, "Invalid weak pointer cast");
+    return impl;
 }
 
 template<typename T> template<typename U> inline WeakPtr<T>::WeakPtr(const WeakPtr<U>& o)
-    : m_ref(weak_reference_upcast<T>(o.m_ref.get()))
+    : m_impl(weak_ptr_impl_cast<T, U>(o.m_impl.get()))
 {
 }
 
 template<typename T> template<typename U> inline WeakPtr<T>::WeakPtr(WeakPtr<U>&& o)
-    : m_ref(adoptRef(weak_reference_upcast<T>(o.m_ref.leakRef())))
+    : m_impl(adoptRef(weak_ptr_impl_cast<T, U>(o.m_impl.leakRef())))
 {
 }
 
 template<typename T> template<typename U> inline WeakPtr<T>& WeakPtr<T>::operator=(const WeakPtr<U>& o)
 {
-    m_ref = weak_reference_upcast<T>(o.m_ref.get());
+    m_impl = weak_ptr_impl_cast<T, U>(o.m_impl.get());
     return *this;
 }
 
 template<typename T> template<typename U> inline WeakPtr<T>& WeakPtr<T>::operator=(WeakPtr<U>&& o)
 {
-    m_ref = adoptRef(weak_reference_upcast<T>(o.m_ref.leakRef()));
+    m_impl = adoptRef(weak_ptr_impl_cast<T, U>(o.m_impl.leakRef()));
     return *this;
 }
 
-template<typename T> inline WeakPtr<T> makeWeakPtr(T& ref)
+template<typename T> inline WeakPtr<T> makeWeakPtr(T& object)
 {
-    return { adoptRef(*weak_reference_downcast<T>(ref.weakPtrFactory().createWeakPtr(ref).m_ref.leakRef())) };
+    return { object.weakPtrFactory().createWeakPtr(object) };
 }
 
 template<typename T> inline WeakPtr<T> makeWeakPtr(T* ptr)
 {
     if (!ptr)
@@ -218,7 +292,7 @@
 } // namespace WTF
 
 using WTF::CanMakeWeakPtr;
 using WTF::WeakPtr;
 using WTF::WeakPtrFactory;
-using WTF::WeakReference;
+using WTF::WeakPtrFactoryInitialization;
 using WTF::makeWeakPtr;
