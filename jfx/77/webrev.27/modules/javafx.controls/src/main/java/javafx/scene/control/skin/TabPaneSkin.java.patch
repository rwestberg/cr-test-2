diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TabPaneSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TabPaneSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TabPaneSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TabPaneSkin.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -1926,10 +1926,11 @@
     }
     private EventHandler<MouseEvent> headerDraggedHandler = this::handleHeaderDragged;
     private EventHandler<MouseEvent> headerMousePressedHandler = this::handleHeaderMousePressed;
     private EventHandler<MouseEvent> headerMouseReleasedHandler = this::handleHeaderMouseReleased;
 
+    private int dragTabHeaderStartIndex;
     private int dragTabHeaderIndex;
     private TabHeaderSkin dragTabHeader;
     private TabHeaderSkin dropTabHeader;
     private StackPane headersRegion;
     private DragState dragState;
@@ -1941,11 +1942,10 @@
     private final double DRAG_DIST_THRESHOLD = 0.75;
 
     // Reordering Animation
     private final double ANIM_DURATION = 120;
     private TabHeaderSkin dropAnimHeader;
-    private Tab swapTab;
     private double dropHeaderSourceX;
     private double dropHeaderTransitionX;
     private final Animation dropHeaderAnim = new Transition() {
         {
             setInterpolator(Interpolator.EASE_BOTH);
@@ -1956,19 +1956,19 @@
         }
         protected void interpolate(double frac) {
             dropAnimHeader.setLayoutX(dropHeaderSourceX + dropHeaderTransitionX * frac);
         }
     };
-    private double dragHeaderStartX;
     private double dragHeaderDestX;
     private double dragHeaderSourceX;
     private double dragHeaderTransitionX;
     private final Animation dragHeaderAnim = new Transition() {
         {
             setInterpolator(Interpolator.EASE_OUT);
             setCycleDuration(Duration.millis(ANIM_DURATION));
             setOnFinished(event -> {
+                reorderTabs();
                 resetDrag();
             });
         }
         protected void interpolate(double frac) {
             dragTabHeader.setLayoutX(dragHeaderSourceX + dragHeaderTransitionX * frac);
@@ -2187,16 +2187,16 @@
         stopAnim(dragHeaderAnim);
 
         dragTabHeader = (TabHeaderSkin) event.getSource();
         if (dragTabHeader != null) {
             dragState = DragState.START;
-            swapTab = null;
             xLayoutDirection = deriveTabHeaderLayoutXDirection();
             dragEventPrevLoc = getHeaderRegionLocalX(event);
             dragTabHeaderIndex = headersRegion.getChildren().indexOf(dragTabHeader);
+            dragTabHeaderStartIndex = dragTabHeaderIndex;
             dragTabHeader.setViewOrder(0);
-            dragHeaderStartX = dragHeaderDestX = dragTabHeader.getLayoutX();
+            dragHeaderDestX = dragTabHeader.getLayoutX();
         }
     }
 
     private double getHeaderRegionLocalX(MouseEvent ev) {
         // The event is converted to tab header's parent i.e. headersRegion's local space.
@@ -2208,21 +2208,23 @@
 
     private void stopDrag() {
         if (dragState == DragState.START) {
             // No drag action was performed.
             resetDrag();
-            return;
+        } else if (dragState == DragState.REORDER) {
+            // Animate tab header being dragged to its final position.
+            dragHeaderSourceX = dragTabHeader.getLayoutX();
+            dragHeaderTransitionX = dragHeaderDestX - dragHeaderSourceX;
+            dragHeaderAnim.playFromStart();
         }
-        // Animate tab header being dragged to its final position.
-        dragHeaderSourceX = dragTabHeader.getLayoutX();
-        dragHeaderTransitionX = dragHeaderDestX - dragHeaderSourceX;
-        dragHeaderAnim.playFromStart();
+    }
 
-        // Reorder the tab list.
-        if (dragHeaderStartX != dragHeaderDestX) {
-            ((TabObservableList<Tab>) getSkinnable().getTabs()).reorder(dragTabHeader.tab, swapTab);
-            swapTab = null;
+    private void reorderTabs() {
+        if (dragTabHeaderIndex != dragTabHeaderStartIndex) {
+            ((TabObservableList<Tab>) getSkinnable().getTabs()).reorder(
+                    getSkinnable().getTabs().get(dragTabHeaderStartIndex),
+                    getSkinnable().getTabs().get(dragTabHeaderIndex));
         }
     }
 
     private void resetDrag() {
         dragState = DragState.NONE;
@@ -2233,11 +2235,10 @@
     }
 
     // Animate tab header being dropped-on to its new position.
     private void startHeaderReorderingAnim() {
         dropAnimHeader = dropTabHeader;
-        swapTab = dropAnimHeader.tab;
         dropHeaderSourceX = dropAnimHeader.getLayoutX();
         dropHeaderAnim.playFromStart();
     }
 
     // Remove dropAnimHeader and add at the index position of dragTabHeader.
