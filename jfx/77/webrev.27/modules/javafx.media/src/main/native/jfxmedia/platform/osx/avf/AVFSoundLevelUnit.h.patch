diff a/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFSoundLevelUnit.h b/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFSoundLevelUnit.h
--- a/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFSoundLevelUnit.h
+++ b/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFSoundLevelUnit.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -29,76 +29,40 @@
 #include <AudioUnit/AudioUnit.h>
 #include <Accelerate/Accelerate.h>
 
 #include <memory>
 
-#include "AVFKernelProcessor.h"
-#include "AUEffectBase.h"
-
 #define kDefaultSoundLevelParam_Volume 1.0f
 #define kDefaultSoundLevelParam_Balance 0.0f
 
 /*
  * This unit applies the volume/balance controls.
  */
-class AVFSoundLevelUnit : public AVFKernelProcessor {
+class AVFSoundLevelUnit {
 public:
-    AVFSoundLevelUnit() :
-        AVFKernelProcessor(),
-        mVolume(kDefaultSoundLevelParam_Volume),
-        mBalance(kDefaultSoundLevelParam_Balance)
-    {}
-
-    virtual ~AVFSoundLevelUnit() {}
-
-    virtual AUKernelBase *NewKernel();
-
-    Float32 volume() {
-        return mVolume;
-    }
-    void setVolume(Float32 volume) {
-        if (volume < 0.0) {
-            volume = 0.0;
-        } else if (volume > 1.0) {
-            volume = 1.0;
-        }
-        mVolume = volume;
-    }
-
-    Float32 balance() {
-        return mBalance;
-    }
-    void setBalance(Float32 balance) {
-        if (balance < -1.0) {
-            balance = -1.0;
-        } else if (balance > 1.0) {
-            balance = 1.0;
-        }
-        mBalance = balance;
-    }
+    AVFSoundLevelUnit();
 
-    // For stereo (2 channel), channel 0 is left, channel 1 is right
-    Float32 CalculateChannelLevel(int channelNum, int channelCount) {
-        Float32 volume = mVolume;
-        Float32 balance = mBalance;
-        Float32 level = volume;
+    ~AVFSoundLevelUnit();
 
-        if (channelCount == 2) {
-            // balance is only done on stereo audio
-            if (((balance < 0.0) && channelNum == 1) ||
-                ((balance > 0.0) && channelNum == 0)) {
-                // attenuate according to balance
-                balance = 1.0 - fabsf(balance);
-                level *= balance; // invert so it ramps the right direction
-            }
-        }
-        return level;
-    }
+    Float32 volume();
+    void setVolume(Float32 volume);
+    Float32 balance();
+    void setBalance(Float32 balance);
+    void SetChannels(UInt32 count);
+    Float32 CalculateChannelLevel(int channelNum, int channelCount);
+    bool ProcessBufferLists(const AudioBufferList & buffer,
+                                UInt32 inFramesToProcess);
+    void Process(const Float32 *inSourceP,
+                 Float32 *inDestP,
+                 UInt32 inFramesToProcess,
+                 UInt32 channelNum,
+                 UInt32 inNumChannels);
 
 private:
     Float32 mVolume;
     Float32 mBalance;
+    UInt32 mChannels;
 };
 
 typedef std::shared_ptr<AVFSoundLevelUnit> AVFSoundLevelUnitPtr;
 
 #endif /* defined(__JFXMedia__AVFSoundLevelUnit__) */
