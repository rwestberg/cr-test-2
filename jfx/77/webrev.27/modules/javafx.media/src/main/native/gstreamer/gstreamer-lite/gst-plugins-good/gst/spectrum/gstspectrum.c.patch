diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-good/gst/spectrum/gstspectrum.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-good/gst/spectrum/gstspectrum.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-good/gst/spectrum/gstspectrum.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-good/gst/spectrum/gstspectrum.c
@@ -156,10 +156,25 @@
 static GstFlowReturn gst_spectrum_transform_ip (GstBaseTransform * trans,
     GstBuffer * in);
 static gboolean gst_spectrum_setup (GstAudioFilter * base,
     const GstAudioInfo * info);
 
+#if defined (GSTREAMER_LITE) && defined (OSX)
+gboolean gst_spectrum_setup_api (GstAudioFilter * base, const GstAudioInfo * info,
+                                 guint bps_user, guint bpf_user) {
+    GstSpectrum *spectrum = GST_SPECTRUM (base);
+    spectrum->bps_user = bps_user;
+    spectrum->bpf_user = bpf_user;
+    return gst_spectrum_setup(base, info);
+}
+
+GstFlowReturn
+gst_spectrum_transform_ip_api (GstBaseTransform * trans, GstBuffer * buffer) {
+    return gst_spectrum_transform_ip(trans, buffer);
+}
+#endif // GSTREAMER_LITE and OSX
+
 static void
 gst_spectrum_class_init (GstSpectrumClass * klass)
 {
   GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
   GstElementClass *element_class = GST_ELEMENT_CLASS (klass);
@@ -249,10 +264,16 @@
   spectrum->message_phase = DEFAULT_MESSAGE_PHASE;
   spectrum->interval = DEFAULT_INTERVAL;
   spectrum->bands = DEFAULT_BANDS;
   spectrum->threshold = DEFAULT_THRESHOLD;
 
+#if defined (GSTREAMER_LITE) && defined (OSX)
+  spectrum->bps_user = 0;
+  spectrum->bpf_user = 0;
+  spectrum->user_data = NULL;
+#endif // GSTREAMER_LITE and OSX
+
   g_mutex_init (&spectrum->lock);
 }
 
 static void
 gst_spectrum_alloc_channel_data (GstSpectrum * spectrum)
@@ -712,14 +733,28 @@
   GValue *mcv = NULL, *pcv = NULL;
   GstClockTime endtime, running_time, stream_time;
 
   GST_DEBUG_OBJECT (spectrum, "preparing message, bands =%d ", spectrum->bands);
 
+#if defined (GSTREAMER_LITE) && defined (OSX)
+  // When running spectrum directly we cannot figure out time stamps, since we do not
+  // have full pipeline. Caller will be responsible to handle time stamps.
+  if (spectrum->user_data != NULL) {
+    running_time = 0;
+    stream_time = 0;
+  } else {
+    running_time = gst_segment_to_running_time (&trans->segment, GST_FORMAT_TIME,
+      timestamp);
+    stream_time = gst_segment_to_stream_time (&trans->segment, GST_FORMAT_TIME,
+      timestamp);
+  }
+#else // GSTREAMER_LITE and OSX
   running_time = gst_segment_to_running_time (&trans->segment, GST_FORMAT_TIME,
       timestamp);
   stream_time = gst_segment_to_stream_time (&trans->segment, GST_FORMAT_TIME,
       timestamp);
+#endif // GSTREAMER_LITE and OSX
   /* endtime is for backwards compatibility */
   endtime = stream_time + duration;
 
   s = gst_structure_new ("spectrum",
       "endtime", GST_TYPE_CLOCK_TIME, endtime,
@@ -875,10 +910,16 @@
 
   rate = GST_AUDIO_FILTER_RATE (spectrum);
   channels = GST_AUDIO_FILTER_CHANNELS (spectrum);
   bps = GST_AUDIO_FILTER_BPS (spectrum);
   bpf = GST_AUDIO_FILTER_BPF (spectrum);
+#ifdef OSX
+  if (spectrum->bps_user != 0 && spectrum->bpf_user != 0) {
+    bps = spectrum->bps_user;
+    bpf = spectrum->bpf_user;
+  }
+#endif // OSX
   output_channels = spectrum->multi_channel ? channels : 1;
   max_value = (1UL << ((bps << 3) - 1)) - 1;
   bands = spectrum->bands;
   nfft = 2 * bands - 2;
 #else // GSTREAMER_LITE
