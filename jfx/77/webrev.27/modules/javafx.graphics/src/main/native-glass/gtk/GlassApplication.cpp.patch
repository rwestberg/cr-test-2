diff a/modules/javafx.graphics/src/main/native-glass/gtk/GlassApplication.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/GlassApplication.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/GlassApplication.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/GlassApplication.cpp
@@ -410,11 +410,11 @@
         case GDK_FOCUS_CHANGE:
             return TRUE;
             break;
     }//switch
 
-    if (ctx != NULL ) {
+    if (ctx != NULL) {
         return ctx->isEnabled();
     }
     return TRUE;
 }
 
@@ -433,92 +433,21 @@
         return;
     }
 
     glass_evloop_call_hooks(event);
 
-    if (ctx != NULL && dynamic_cast<WindowContextPlug*>(ctx) && ctx->get_gtk_window()) {
-        WindowContextPlug* ctx_plug = dynamic_cast<WindowContextPlug*>(ctx);
-        if (!ctx_plug->embedded_children.empty()) {
-            // forward to child
-            ctx = (WindowContext*) ctx_plug->embedded_children.back();
-            window = ctx->get_gdk_window();
-        }
-    }
-
     if (ctx != NULL) {
         EventsCounterHelper helper(ctx);
-        try {
-            switch (event->type) {
-                case GDK_PROPERTY_NOTIFY:
-                    ctx->process_property_notify(&event->property);
-                    gtk_main_do_event(event);
-                    break;
-                case GDK_CONFIGURE:
-                    ctx->process_configure(&event->configure);
-                    gtk_main_do_event(event);
-                    break;
-                case GDK_FOCUS_CHANGE:
-                    ctx->process_focus(&event->focus_change);
-                    gtk_main_do_event(event);
-                    break;
-                case GDK_DESTROY:
-                    destroy_and_delete_ctx(ctx);
-                    gtk_main_do_event(event);
-                    break;
-                case GDK_DELETE:
-                    ctx->process_delete();
-                    break;
-                case GDK_EXPOSE:
-                case GDK_DAMAGE:
-                    ctx->process_expose(&event->expose);
-                    break;
-                case GDK_WINDOW_STATE:
-                    ctx->process_state(&event->window_state);
-                    gtk_main_do_event(event);
-                    break;
-                case GDK_BUTTON_PRESS:
-                case GDK_BUTTON_RELEASE:
-                    ctx->process_mouse_button(&event->button);
-                    break;
-                case GDK_MOTION_NOTIFY:
-                    ctx->process_mouse_motion(&event->motion);
-                    gdk_event_request_motions(&event->motion);
-                    break;
-                case GDK_SCROLL:
-                    ctx->process_mouse_scroll(&event->scroll);
-                    break;
-                case GDK_ENTER_NOTIFY:
-                case GDK_LEAVE_NOTIFY:
-                    ctx->process_mouse_cross(&event->crossing);
-                    break;
-                case GDK_KEY_PRESS:
-                case GDK_KEY_RELEASE:
-                    ctx->process_key(&event->key);
-                    break;
-                case GDK_DROP_START:
-                case GDK_DRAG_ENTER:
-                case GDK_DRAG_LEAVE:
-                case GDK_DRAG_MOTION:
-                    process_dnd_target(ctx, &event->dnd);
-                    break;
-                case GDK_MAP:
-                    ctx->process_map();
-                    // fall-through
-                case GDK_UNMAP:
-                case GDK_CLIENT_EVENT:
-                case GDK_VISIBILITY_NOTIFY:
-                case GDK_SETTING:
-                case GDK_OWNER_CHANGE:
-                    gtk_main_do_event(event);
-                    break;
-                default:
-                    break;
-            }
-        } catch (jni_exception&) {
+
+        if (event->type == GDK_EXPOSE) {
+            ctx->process_expose(&event->expose);
+        } else if (event->type == GDK_DRAG_LEAVE) {
+            dnd_drag_leave_callback(ctx);
+        } else {
+            gtk_main_do_event(event);
         }
     } else {
-
         if (window == gdk_screen_get_root_window(gdk_screen_get_default())) {
             if (event->any.type == GDK_PROPERTY_NOTIFY) {
                 if (event->property.atom == gdk_atom_intern_static_string("_NET_WORKAREA")
                         || event->property.atom == gdk_atom_intern_static_string("_NET_CURRENT_DESKTOP")) {
                     screen_settings_changed(gdk_screen_get_default(), NULL);
