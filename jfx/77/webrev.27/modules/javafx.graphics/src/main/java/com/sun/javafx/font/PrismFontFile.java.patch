diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/font/PrismFontFile.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/font/PrismFontFile.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/font/PrismFontFile.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/font/PrismFontFile.java
@@ -401,10 +401,19 @@
 
     public void setPeer(Object peer) {
         this.peer = peer;
     }
 
+    int getTableLength(int tag) {
+        int len = 0;
+        DirectoryEntry tagDE = getDirectoryEntry(tag);
+        if (tagDE != null) {
+            len = tagDE.length;
+        }
+        return len;
+    }
+
     synchronized Buffer readTable(int tag) {
         Buffer buffer = null;
         boolean openedFile = false;
         try {
             openedFile = filereader.openFile();
@@ -567,10 +576,19 @@
                 linegap = (float)hhea.getShort(8);
                 // advanceWidthMax is max horizontal advance of all glyphs in
                 // font. For some fonts advanceWidthMax is much larger then "M"
                 // advanceWidthMax = (float)hhea.getChar(10);
                 numHMetrics = hhea.getChar(34) & 0xffff;
+                /* the hmtx table may have a trailing LSB array which we don't
+                 * use. But it means we must not assume these two values match.
+                 * We are only concerned here with not reading more data than
+                 * there is in the table.
+                 */
+                int hmtxEntries = getTableLength(hmtxTag) >> 2;
+                if (numHMetrics > hmtxEntries) {
+                    numHMetrics = hmtxEntries;
+                }
             }
 
             // maxp table is before the OS/2 table. Read it now
             // while file is open - will be very cheap as its just
             // 32 bytes and we already have it in a byte[].
