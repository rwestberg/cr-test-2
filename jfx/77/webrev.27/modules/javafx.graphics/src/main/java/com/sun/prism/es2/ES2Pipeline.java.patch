diff a/modules/javafx.graphics/src/main/java/com/sun/prism/es2/ES2Pipeline.java b/modules/javafx.graphics/src/main/java/com/sun/prism/es2/ES2Pipeline.java
--- a/modules/javafx.graphics/src/main/java/com/sun/prism/es2/ES2Pipeline.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/prism/es2/ES2Pipeline.java
@@ -41,10 +41,11 @@
     public static final GLFactory glFactory;
     public static final GLPixelFormat.Attributes
             pixelFormatAttributes = new GLPixelFormat.Attributes();
     static final boolean msaa;
     static final boolean npotSupported;
+    private static final boolean supports3D;
     private static boolean es2Enabled;
     private static boolean isEglfb = false;
 
     static {
         AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
@@ -87,14 +88,18 @@
         if (es2Enabled) {
             theInstance = new ES2Pipeline();
             factories = new ES2ResourceFactory[glFactory.getAdapterCount()];
             msaa = glFactory.isGLExtensionSupported("GL_ARB_multisample");
             npotSupported = glFactory.isNPOTSupported();
+            // 3D requires platform that has non-power of two (NPOT) support, but
+            // also works on iOS with OpenGL ES 2.0 or greater
+            supports3D = npotSupported || PlatformUtil.isIOS();
         } else {
             theInstance = null;
             msaa = false;
             npotSupported = false;
+            supports3D = false;
         }
 
     }
     private static Thread creator;
     private static final ES2Pipeline theInstance;
@@ -199,12 +204,11 @@
         super.dispose();
     }
 
     @Override
     public boolean is3DSupported() {
-        // 3D requires platform that has non-power of two (NPOT) support.
-        return npotSupported;
+        return supports3D;
     }
 
     @Override
     public final boolean isMSAASupported() {
         return msaa;
