diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window_ime.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window_ime.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window_ime.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window_ime.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -28,11 +28,11 @@
 #include "glass_general.h"
 
 #include <cstring>
 #include <cstdlib>
 
-bool WindowContextBase::hasIME() {
+bool WindowContext::hasIME() {
     return xim.enabled;
 }
 
 static XKeyPressedEvent convert_event(GdkEventKey *event) {
     XKeyPressedEvent result;
@@ -49,11 +49,11 @@
     result.same_screen = True;
 
     return result;
 }
 
-bool WindowContextBase::im_filter_keypress(GdkEventKey* event) {
+bool WindowContext::im_filter_keypress(GdkEventKey* event) {
     static size_t buf_len = 12;
     static char *buffer = NULL;
 
     if (buffer == NULL) {
         buffer = (char*)malloc(buf_len * sizeof (char));
@@ -105,11 +105,11 @@
     }
 
     return TRUE;
 }
 
-bool WindowContextBase::filterIME(GdkEvent * event) {
+bool WindowContext::filterIME(GdkEvent * event) {
     if (!hasIME()) {
         return false;
     }
 
     switch (event->type) {
@@ -218,11 +218,11 @@
     XFree(styles);
 
     return result;
 }
 
-void WindowContextBase::enableOrResetIME() {
+void WindowContext::enableOrResetIME() {
     Display *display = gdk_x11_display_get_xdisplay(gdk_window_get_display(gdk_window));
     if (xim.im == NULL || xim.ic == NULL) {
         xim.im = XOpenIM(display, NULL, NULL, NULL);
         if (xim.im == NULL) {
             return;
@@ -266,10 +266,10 @@
     XSetICFocus(xim.ic);
 
     xim.enabled = TRUE;
 }
 
-void WindowContextBase::disableIME() {
+void WindowContext::disableIME() {
     if (xim.ic != NULL) {
         XUnsetICFocus(xim.ic);
     }
 }
