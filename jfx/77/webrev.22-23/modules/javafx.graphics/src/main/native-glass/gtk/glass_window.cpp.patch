diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
@@ -514,11 +514,11 @@
     // Upper layers expects from us Windows behavior:
     // all mouse events should be delivered to window where drag begins
     // and no exit/enter event should be reported during this drag.
     // We can grab mouse pointer for these needs.
     if (press) {
-        grab_mouse_drag_focus(NULL, true);
+        grab_mouse_drag_focus(gdk_window, NULL, true);
     } else {
         if ((event->state & MOUSE_BUTTONS_MASK)
             && !(state & MOUSE_BUTTONS_MASK)) { // all buttons released
             ungrab_mouse_drag_focus();
         } else if (event->button == 8 || event->button == 9) {
@@ -906,13 +906,13 @@
 }
 
 void WindowContext::set_cursor(GdkCursor *cursor) {
     if (!is_in_drag()) {
         if (WindowContext::sm_mouse_drag_window) {
-            grab_mouse_drag_focus(cursor, false);
+            grab_mouse_drag_focus(WindowContext::sm_mouse_drag_window->get_gdk_window(), cursor, false);
         } else if (WindowContext::sm_grab_window) {
-            grab_mouse_drag_focus(cursor, true);
+            grab_mouse_drag_focus(WindowContext::sm_grab_window->get_gdk_window(), cursor, true);
         }
     }
 
     gdk_window_set_cursor(gdk_window, cursor);
 }
@@ -1122,11 +1122,11 @@
     return can_be_deleted;
 }
 
 bool WindowContext::grab_focus() {
     if (WindowContext::sm_mouse_drag_window
-            || grab_mouse_drag_focus(NULL, true)) {
+            || grab_mouse_drag_focus(gdk_window, NULL, true)) {
         WindowContext::sm_grab_window = this;
         return true;
     } else {
         return false;
     }
@@ -1417,28 +1417,45 @@
 #endif
 
     return device;
 }
 
-bool WindowContext::grab_mouse_drag_focus(GdkCursor *cursor, bool owner_events) {
+bool WindowContext::grab_mouse_drag_focus(GdkWindow * gdk_w, GdkCursor * cursor, bool owner_events) {
     if (is_grab_disabled()) {
-        return false;
+        return true;
     }
 
     ungrab_mouse_drag_focus();
 
     pointer_device = get_pointer_device();
 #ifdef GLASS_GTK3
 #if GTK_CHECK_VERSION(3, 20, 0)
-    GdkGrabStatus status = gdk_seat_grab(gdk_device_get_seat(pointer_device), gdk_window,
+    GdkGrabStatus status = gdk_seat_grab(gdk_device_get_seat(pointer_device), gdk_w,
                                           GDK_SEAT_CAPABILITY_ALL_POINTING, owner_events, cursor, NULL, NULL, NULL);
 #else
-    GdkGrabStatus status = gdk_device_grab(pointer_device, gdk_window, GDK_OWNERSHIP_WINDOW, owner_events,
-                                            GDK_ALL_EVENTS_MASK, cursor, GDK_CURRENT_TIME);
+    GdkGrabStatus status = gdk_device_grab(pointer_device, gdk_w, GDK_OWNERSHIP_WINDOW, owner_events,
+                                                (GdkEventMask)
+                                                      (GDK_POINTER_MOTION_MASK
+                                                          | GDK_POINTER_MOTION_HINT_MASK
+                                                          | GDK_BUTTON_MOTION_MASK
+                                                          | GDK_BUTTON1_MOTION_MASK
+                                                          | GDK_BUTTON2_MOTION_MASK
+                                                          | GDK_BUTTON3_MOTION_MASK
+                                                          | GDK_BUTTON_PRESS_MASK
+                                                          | GDK_BUTTON_RELEASE_MASK), cursor, GDK_CURRENT_TIME);
 #endif
 #else
-    GdkGrabStatus status = gdk_pointer_grab(gdk_window, owner_events, GDK_ALL_EVENTS_MASK, NULL, cursor, GDK_CURRENT_TIME);
+    GdkGrabStatus status = gdk_pointer_grab(gdk_w, owner_events,
+                                                (GdkEventMask)
+                                                      (GDK_POINTER_MOTION_MASK
+                                                          | GDK_POINTER_MOTION_HINT_MASK
+                                                          | GDK_BUTTON_MOTION_MASK
+                                                          | GDK_BUTTON1_MOTION_MASK
+                                                          | GDK_BUTTON2_MOTION_MASK
+                                                          | GDK_BUTTON3_MOTION_MASK
+                                                          | GDK_BUTTON_PRESS_MASK
+                                                          | GDK_BUTTON_RELEASE_MASK), NULL, cursor, GDK_CURRENT_TIME);
 #endif
     WindowContext::sm_mouse_drag_window = this;
 
     return (status == GDK_GRAB_SUCCESS) ? true : false;
 }
@@ -1446,21 +1463,20 @@
 void WindowContext::ungrab_mouse_drag_focus() {
     if (!pointer_device) {
         return;
     }
 
-//#ifdef GLASS_GTK3
-//#if GTK_CHECK_VERSION(3, 20, 0)
-//    gdk_seat_ungrab(gdk_device_get_seat(pointer_device));
-//#else
-//    gdk_device_ungrab(pointer_device, GDK_CURRENT_TIME);
-//#endif
-//#else
+#ifdef GLASS_GTK3
+#if GTK_CHECK_VERSION(3, 20, 0)
+    gdk_seat_ungrab(gdk_device_get_seat(pointer_device));
+#else
+    gdk_device_ungrab(pointer_device, GDK_CURRENT_TIME);
+#endif
+#else
     gdk_pointer_ungrab(GDK_CURRENT_TIME);
-//#endif
+#endif
     pointer_device = NULL;
-
     WindowContext::sm_mouse_drag_window = NULL;
 
     if (WindowContext::sm_grab_window) {
         WindowContext::sm_grab_window->grab_focus();
     }
