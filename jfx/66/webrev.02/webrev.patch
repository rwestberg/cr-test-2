diff a/modules/javafx.graphics/src/main/java/com/sun/pisces/AbstractSurface.java b/modules/javafx.graphics/src/main/java/com/sun/pisces/AbstractSurface.java
--- a/modules/javafx.graphics/src/main/java/com/sun/pisces/AbstractSurface.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/pisces/AbstractSurface.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,10 +23,12 @@
  * questions.
  */
 
 package com.sun.pisces;
 
+import com.sun.prism.impl.Disposer;
+
 public abstract class AbstractSurface implements Surface {
 
     private long nativePtr = 0L;
     private int width;
     private int height;
@@ -44,10 +46,14 @@
         }
         this.width = width;
         this.height = height;
     }
 
+    protected void addDisposerRecord() {
+        Disposer.addRecord(this, new AbstractSurfaceDisposerRecord(nativePtr));
+    }
+
     public final void getRGB(int[] argb, int offset, int scanLength, int x, int y, int width, int height) {
         this.rgbCheck(argb.length, offset, scanLength, x, y, width, height);
         this.getRGBImpl(argb, offset, scanLength, x, y, width, height);
     }
 
@@ -95,19 +101,31 @@
         if ((offset + scanLength*(height-1) + width) > arr_length) {
             throw new IllegalArgumentException("STRIDE * HEIGHT exceeds length of data");
         }
     }
 
-    protected void finalize() {
-        this.nativeFinalize();
+    private static native void disposeNative(long nativeHandle);
+
+    private static class AbstractSurfaceDisposerRecord implements Disposer.Record {
+        private long nativeHandle;
+
+        AbstractSurfaceDisposerRecord(long nh) {
+            nativeHandle = nh;
+        }
+
+        @Override
+        public void dispose() {
+            if (nativeHandle != 0L) {
+                disposeNative(nativeHandle);
+                nativeHandle = 0L;
+            }
+        }
     }
 
     public final int getWidth() {
         return width;
     }
 
     public final int getHeight() {
         return height;
     }
-
-    private native void nativeFinalize();
 }
diff a/modules/javafx.graphics/src/main/java/com/sun/pisces/JavaSurface.java b/modules/javafx.graphics/src/main/java/com/sun/pisces/JavaSurface.java
--- a/modules/javafx.graphics/src/main/java/com/sun/pisces/JavaSurface.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/pisces/JavaSurface.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -41,10 +41,16 @@
         }
         this.dataInt = dataInt;
         this.dataBuffer = IntBuffer.wrap(this.dataInt);
 
         initialize(dataType, width, height);
+        // The native method initialize() creates the native object of
+        // struct JavaSurface and saves it's reference in the super class
+        // member AbstractSurface.nativePtr. This reference is needed for
+        // creating disposer record hence the below call to addDisposerRecord()
+        // is needed here and cannot be made in super class constructor.
+        addDisposerRecord();
     }
 
     public IntBuffer getDataIntBuffer() {
         return this.dataBuffer;
     }
diff a/modules/javafx.graphics/src/main/java/com/sun/pisces/PiscesRenderer.java b/modules/javafx.graphics/src/main/java/com/sun/pisces/PiscesRenderer.java
--- a/modules/javafx.graphics/src/main/java/com/sun/pisces/PiscesRenderer.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/pisces/PiscesRenderer.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,10 +23,12 @@
  * questions.
  */
 
 package com.sun.pisces;
 
+import com.sun.prism.impl.Disposer;
+
 /**
  * PiscesRenderer class is basic public API accessing Pisces library capabilities.
  *
  * Pisces renderer is intended to draw directly into underlying data buffer of AbstractSurface.
  * Basic implementation of AbstractSurface is e.g. GraphicsSurface.
@@ -84,10 +86,11 @@
      * @param surface destination surface
      */
     public PiscesRenderer(AbstractSurface surface) {
         this.surface = surface;
         initialize();
+        Disposer.addRecord(this, new PiscesRendererDisposerRecord(nativePtr));
     }
 
     private native void initialize();
 
     /**
@@ -434,14 +437,23 @@
         if ((offset + stride*(height-1) + width) > data_length) {
             throw new IllegalArgumentException("STRIDE * HEIGHT exceeds length of data");
         }
     }
 
-    protected void finalize() {
-        this.nativeFinalize();
-    }
+    private static native void disposeNative(long nativeHandle);
 
-    /**
-     * Native finalizer. Releases native memory used by PiscesRenderer at lifetime.
-     */
-    private native void nativeFinalize();
+    private static class PiscesRendererDisposerRecord implements Disposer.Record {
+        private long nativeHandle;
+
+        PiscesRendererDisposerRecord(long nh) {
+            nativeHandle = nh;
+        }
+
+        @Override
+        public void dispose() {
+            if (nativeHandle != 0L) {
+                disposeNative(nativeHandle);
+                nativeHandle = 0L;
+            }
+        }
+    }
 }
diff a/modules/javafx.graphics/src/main/native-prism-sw/JAbstractSurface.c b/modules/javafx.graphics/src/main/native-prism-sw/JAbstractSurface.c
--- a/modules/javafx.graphics/src/main/native-prism-sw/JAbstractSurface.c
+++ b/modules/javafx.graphics/src/main/native-prism-sw/JAbstractSurface.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -35,11 +35,10 @@
 
 static jfieldID fieldIds[SURFACE_LAST + 1];
 static jboolean fieldIdsInitialized = JNI_FALSE;
 
 static jboolean initializeSurfaceFieldIds(JNIEnv* env, jobject objectHandle);
-static void disposeNativeImpl(JNIEnv* env, jobject objectHandle);
 
 AbstractSurface*
 surface_get(JNIEnv* env, jobject surfaceHandle) {
     return (AbstractSurface*)JLongToPointer(
                (*env)->GetLongField(env, surfaceHandle,
@@ -50,13 +49,18 @@
 surface_initialize(JNIEnv* env, jobject surfaceHandle) {
     return initializeSurfaceFieldIds(env, surfaceHandle);
 }
 
 JNIEXPORT void JNICALL
-Java_com_sun_pisces_AbstractSurface_nativeFinalize(JNIEnv* env,
-        jobject objectHandle) {
-    disposeNativeImpl(env, objectHandle);
+Java_com_sun_pisces_AbstractSurface_disposeNative(JNIEnv *env, jclass cls, jlong nativePtr)
+{
+    AbstractSurface* surface = (AbstractSurface*) JLongToPointer(nativePtr);
+
+    if (surface != NULL) {
+        surface->cleanup(surface);
+        surface_dispose(&surface->super);
+    }
 }
 
 JNIEXPORT void JNICALL
 Java_com_sun_pisces_AbstractSurface_getRGBImpl(JNIEnv* env, jobject objectHandle,
         jintArray arrayHandle, jint offset, jint scanLength,
@@ -182,31 +186,5 @@
         fieldIdsInitialized = JNI_TRUE;
     }
 
     return retVal;
 }
-
-static void
-disposeNativeImpl(JNIEnv* env, jobject objectHandle) {
-    AbstractSurface* surface;
-
-    if (!fieldIdsInitialized) {
-        return;
-    }
-
-    surface = (AbstractSurface*)JLongToPointer(
-                  (*env)->GetLongField(env, objectHandle,
-                                       fieldIds[SURFACE_NATIVE_PTR]));
-
-    if (surface != NULL) {
-        surface->cleanup(surface);
-        surface_dispose(&surface->super);
-        (*env)->SetLongField(env, objectHandle, fieldIds[SURFACE_NATIVE_PTR],
-                             (jlong)0);
-
-        if (JNI_TRUE == readAndClearMemErrorFlag()) {
-            JNI_ThrowNew(env, "java/lang/OutOfMemoryError",
-                         "Allocation of internal renderer buffer failed.");
-        }
-    }
-}
-
diff a/modules/javafx.graphics/src/main/native-prism-sw/JPiscesRenderer.c b/modules/javafx.graphics/src/main/native-prism-sw/JPiscesRenderer.c
--- a/modules/javafx.graphics/src/main/native-prism-sw/JPiscesRenderer.c
+++ b/modules/javafx.graphics/src/main/native-prism-sw/JPiscesRenderer.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -47,11 +47,10 @@
 static jfieldID fieldIds[RENDERER_LAST + 1];
 static jboolean fieldIdsInitialized = JNI_FALSE;
 static jboolean initializeRendererFieldIds(JNIEnv *env, jobject objectHandle);
 
 static int toPiscesCoords(unsigned int ff);
-static void renderer_finalize(JNIEnv *env, jobject objectHandle);
 static void fillAlphaMask(Renderer* rdr, jint minX, jint minY, jint maxX, jint maxY,
     JNIEnv *env, jobject this, jint maskType, jbyteArray jmask, jint x, jint y,
     jint maskWidth, jint maskHeight, jint offset, jint stride);
 
 JNIEXPORT void JNICALL
@@ -80,18 +79,15 @@
         JNI_ThrowNew(env, "java/lang/IllegalStateException", "");
     }
 }
 
 JNIEXPORT void JNICALL
-Java_com_sun_pisces_PiscesRenderer_nativeFinalize(JNIEnv* env,
-                                                  jobject objectHandle)
+Java_com_sun_pisces_PiscesRenderer_disposeNative(JNIEnv *env, jclass cls, jlong nativePtr)
 {
-    renderer_finalize(env, objectHandle);
-
-    if (JNI_TRUE == readAndClearMemErrorFlag()) {
-        JNI_ThrowNew(env, "java/lang/OutOfMemoryError",
-                     "Allocation of internal renderer buffer failed.");
+    Renderer* rdr = (Renderer*) JLongToPointer(nativePtr);
+    if (rdr != NULL) {
+        renderer_dispose(rdr);
     }
 }
 
 JNIEXPORT void JNICALL
 Java_com_sun_pisces_PiscesRenderer_setClipImpl(JNIEnv* env, jobject objectHandle,
@@ -291,28 +287,10 @@
     return (Renderer*)JLongToPointer(
                 (*env)->GetLongField(env, objectHandle,
                                      fieldIds[RENDERER_NATIVE_PTR]));
 }
 
-static void
-renderer_finalize(JNIEnv *env, jobject objectHandle) {
-    Renderer* rdr;
-
-    if (!fieldIdsInitialized) {
-        return;
-    }
-
-    rdr = (Renderer*)JLongToPointer((*env)->GetLongField(env, objectHandle,
-                                    fieldIds[RENDERER_NATIVE_PTR]));
-
-    if (rdr != (Renderer*)0) {
-        renderer_dispose(rdr);
-        (*env)->SetLongField(env, objectHandle, fieldIds[RENDERER_NATIVE_PTR],
-                         (jlong)0);
-    }
-}
-
 static jboolean
 initializeObjectFieldIds(JNIEnv *env,
     jobject objectHandle,
     const char * className,
     FieldDesc * fieldDesc,
