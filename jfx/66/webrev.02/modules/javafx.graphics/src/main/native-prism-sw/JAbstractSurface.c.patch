diff a/modules/javafx.graphics/src/main/native-prism-sw/JAbstractSurface.c b/modules/javafx.graphics/src/main/native-prism-sw/JAbstractSurface.c
--- a/modules/javafx.graphics/src/main/native-prism-sw/JAbstractSurface.c
+++ b/modules/javafx.graphics/src/main/native-prism-sw/JAbstractSurface.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -35,11 +35,10 @@
 
 static jfieldID fieldIds[SURFACE_LAST + 1];
 static jboolean fieldIdsInitialized = JNI_FALSE;
 
 static jboolean initializeSurfaceFieldIds(JNIEnv* env, jobject objectHandle);
-static void disposeNativeImpl(JNIEnv* env, jobject objectHandle);
 
 AbstractSurface*
 surface_get(JNIEnv* env, jobject surfaceHandle) {
     return (AbstractSurface*)JLongToPointer(
                (*env)->GetLongField(env, surfaceHandle,
@@ -50,13 +49,18 @@
 surface_initialize(JNIEnv* env, jobject surfaceHandle) {
     return initializeSurfaceFieldIds(env, surfaceHandle);
 }
 
 JNIEXPORT void JNICALL
-Java_com_sun_pisces_AbstractSurface_nativeFinalize(JNIEnv* env,
-        jobject objectHandle) {
-    disposeNativeImpl(env, objectHandle);
+Java_com_sun_pisces_AbstractSurface_disposeNative(JNIEnv *env, jclass cls, jlong nativePtr)
+{
+    AbstractSurface* surface = (AbstractSurface*) JLongToPointer(nativePtr);
+
+    if (surface != NULL) {
+        surface->cleanup(surface);
+        surface_dispose(&surface->super);
+    }
 }
 
 JNIEXPORT void JNICALL
 Java_com_sun_pisces_AbstractSurface_getRGBImpl(JNIEnv* env, jobject objectHandle,
         jintArray arrayHandle, jint offset, jint scanLength,
@@ -182,31 +186,5 @@
         fieldIdsInitialized = JNI_TRUE;
     }
 
     return retVal;
 }
-
-static void
-disposeNativeImpl(JNIEnv* env, jobject objectHandle) {
-    AbstractSurface* surface;
-
-    if (!fieldIdsInitialized) {
-        return;
-    }
-
-    surface = (AbstractSurface*)JLongToPointer(
-                  (*env)->GetLongField(env, objectHandle,
-                                       fieldIds[SURFACE_NATIVE_PTR]));
-
-    if (surface != NULL) {
-        surface->cleanup(surface);
-        surface_dispose(&surface->super);
-        (*env)->SetLongField(env, objectHandle, fieldIds[SURFACE_NATIVE_PTR],
-                             (jlong)0);
-
-        if (JNI_TRUE == readAndClearMemErrorFlag()) {
-            JNI_ThrowNew(env, "java/lang/OutOfMemoryError",
-                         "Allocation of internal renderer buffer failed.");
-        }
-    }
-}
-
