diff a/modules/javafx.graphics/src/main/java/com/sun/pisces/PiscesRenderer.java b/modules/javafx.graphics/src/main/java/com/sun/pisces/PiscesRenderer.java
--- a/modules/javafx.graphics/src/main/java/com/sun/pisces/PiscesRenderer.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/pisces/PiscesRenderer.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,10 +23,12 @@
  * questions.
  */
 
 package com.sun.pisces;
 
+import com.sun.prism.impl.Disposer;
+
 /**
  * PiscesRenderer class is basic public API accessing Pisces library capabilities.
  *
  * Pisces renderer is intended to draw directly into underlying data buffer of AbstractSurface.
  * Basic implementation of AbstractSurface is e.g. GraphicsSurface.
@@ -84,10 +86,11 @@
      * @param surface destination surface
      */
     public PiscesRenderer(AbstractSurface surface) {
         this.surface = surface;
         initialize();
+        Disposer.addRecord(this, new PiscesRendererDisposerRecord(nativePtr));
     }
 
     private native void initialize();
 
     /**
@@ -434,14 +437,23 @@
         if ((offset + stride*(height-1) + width) > data_length) {
             throw new IllegalArgumentException("STRIDE * HEIGHT exceeds length of data");
         }
     }
 
-    protected void finalize() {
-        this.nativeFinalize();
-    }
+    private static native void disposeNative(long nativeHandle);
 
-    /**
-     * Native finalizer. Releases native memory used by PiscesRenderer at lifetime.
-     */
-    private native void nativeFinalize();
+    private static class PiscesRendererDisposerRecord implements Disposer.Record {
+        private long nativeHandle;
+
+        PiscesRendererDisposerRecord(long nh) {
+            nativeHandle = nh;
+        }
+
+        @Override
+        public void dispose() {
+            if (nativeHandle != 0L) {
+                disposeNative(nativeHandle);
+                nativeHandle = 0L;
+            }
+        }
+    }
 }
