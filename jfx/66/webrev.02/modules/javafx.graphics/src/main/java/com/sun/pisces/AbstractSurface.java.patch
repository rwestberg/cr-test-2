diff a/modules/javafx.graphics/src/main/java/com/sun/pisces/AbstractSurface.java b/modules/javafx.graphics/src/main/java/com/sun/pisces/AbstractSurface.java
--- a/modules/javafx.graphics/src/main/java/com/sun/pisces/AbstractSurface.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/pisces/AbstractSurface.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,10 +23,12 @@
  * questions.
  */
 
 package com.sun.pisces;
 
+import com.sun.prism.impl.Disposer;
+
 public abstract class AbstractSurface implements Surface {
 
     private long nativePtr = 0L;
     private int width;
     private int height;
@@ -44,10 +46,14 @@
         }
         this.width = width;
         this.height = height;
     }
 
+    protected void addDisposerRecord() {
+        Disposer.addRecord(this, new AbstractSurfaceDisposerRecord(nativePtr));
+    }
+
     public final void getRGB(int[] argb, int offset, int scanLength, int x, int y, int width, int height) {
         this.rgbCheck(argb.length, offset, scanLength, x, y, width, height);
         this.getRGBImpl(argb, offset, scanLength, x, y, width, height);
     }
 
@@ -95,19 +101,31 @@
         if ((offset + scanLength*(height-1) + width) > arr_length) {
             throw new IllegalArgumentException("STRIDE * HEIGHT exceeds length of data");
         }
     }
 
-    protected void finalize() {
-        this.nativeFinalize();
+    private static native void disposeNative(long nativeHandle);
+
+    private static class AbstractSurfaceDisposerRecord implements Disposer.Record {
+        private long nativeHandle;
+
+        AbstractSurfaceDisposerRecord(long nh) {
+            nativeHandle = nh;
+        }
+
+        @Override
+        public void dispose() {
+            if (nativeHandle != 0L) {
+                disposeNative(nativeHandle);
+                nativeHandle = 0L;
+            }
+        }
     }
 
     public final int getWidth() {
         return width;
     }
 
     public final int getHeight() {
         return height;
     }
-
-    private native void nativeFinalize();
 }
