diff a/modules/javafx.base/src/test/java/test/com/sun/javafx/binding/ExpressionHelperUtility.java b/modules/javafx.base/src/test/java/test/com/sun/javafx/binding/ExpressionHelperUtility.java
--- a/modules/javafx.base/src/test/java/test/com/sun/javafx/binding/ExpressionHelperUtility.java
+++ b/modules/javafx.base/src/test/java/test/com/sun/javafx/binding/ExpressionHelperUtility.java
@@ -24,13 +24,17 @@
  */
 
 package test.com.sun.javafx.binding;
 
 import java.lang.reflect.Field;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 import javafx.beans.InvalidationListener;
 import javafx.beans.Observable;
 import javafx.beans.value.ChangeListener;
 import javafx.beans.value.ObservableValue;
 import javafx.collections.ListChangeListener;
@@ -107,25 +111,25 @@
         } catch (ClassNotFoundException ex) { }
 
         try {
             final Class clazz = Class.forName(LIST_EXPRESSION_HELPER_GENERIC);
             if (clazz.isAssignableFrom(helperClass)) {
-                return getInvalidationListenerFromGenericClass(clazz, helper);
+                return getCollectionsInvalidationListenerFromGenericClass(clazz, helper);
             }
         } catch (ClassNotFoundException ex) { }
 
         try {
             final Class clazz = Class.forName(MAP_EXPRESSION_HELPER_GENERIC);
             if (clazz.isAssignableFrom(helperClass)) {
-                return getInvalidationListenerFromGenericClass(clazz, helper);
+                return getCollectionsInvalidationListenerFromGenericClass(clazz, helper);
             }
         } catch (ClassNotFoundException ex) { }
 
         try {
             final Class clazz = Class.forName(SET_EXPRESSION_HELPER_GENERIC);
             if (clazz.isAssignableFrom(helperClass)) {
-                return getInvalidationListenerFromGenericClass(clazz, helper);
+                return getCollectionsInvalidationListenerFromGenericClass(clazz, helper);
             }
         } catch (ClassNotFoundException ex) { }
 
         return Collections.emptyList();
     }
@@ -175,25 +179,25 @@
         } catch (ClassNotFoundException ex) { }
 
         try {
             final Class clazz = Class.forName(LIST_EXPRESSION_HELPER_GENERIC);
             if (clazz.isAssignableFrom(helperClass)) {
-                return getChangeListenerFromGenericClass(clazz, helper);
+                return getCollectionsChangeListenerFromGenericClass(clazz, helper);
             }
         } catch (ClassNotFoundException ex) { }
 
         try {
             final Class clazz = Class.forName(MAP_EXPRESSION_HELPER_GENERIC);
             if (clazz.isAssignableFrom(helperClass)) {
-                return getChangeListenerFromGenericClass(clazz, helper);
+                return getCollectionsChangeListenerFromGenericClass(clazz, helper);
             }
         } catch (ClassNotFoundException ex) { }
 
         try {
             final Class clazz = Class.forName(SET_EXPRESSION_HELPER_GENERIC);
             if (clazz.isAssignableFrom(helperClass)) {
-                return getChangeListenerFromGenericClass(clazz, helper);
+                return getCollectionsChangeListenerFromGenericClass(clazz, helper);
             }
         } catch (ClassNotFoundException ex) { }
 
         return Collections.emptyList();
     }
@@ -336,11 +340,11 @@
             return Arrays.asList(listener);
         } catch (Exception ex) { }
         return Collections.emptyList();
     }
 
-    private static List<InvalidationListener> getInvalidationListenerFromGenericClass(Class clazz, Object helper) {
+    private static List<InvalidationListener> getCollectionsInvalidationListenerFromGenericClass(Class clazz, Object helper) {
         try {
             final Field field = clazz.getDeclaredField("invalidationListeners");
             field.setAccessible(true);
             final InvalidationListener[] listeners = (InvalidationListener[])field.get(helper);
             if (listeners != null) {
@@ -361,11 +365,11 @@
             return Arrays.<ChangeListener<? super T>>asList(listener);
         } catch (Exception ex) { }
         return Collections.emptyList();
     }
 
-    private static <T> List<ChangeListener<? super T>> getChangeListenerFromGenericClass(Class clazz, Object helper) {
+    private static <T> List<ChangeListener<? super T>> getCollectionsChangeListenerFromGenericClass(Class clazz, Object helper) {
         try {
             final Field field = clazz.getDeclaredField("changeListeners");
             field.setAccessible(true);
             final ChangeListener<? super T>[] listeners = (ChangeListener[])field.get(helper);
             if (listeners != null) {
@@ -375,6 +379,34 @@
                 return Arrays.asList(Arrays.copyOf(listeners, size));
             }
         } catch (Exception ex) { }
         return Collections.emptyList();
     }
+
+    private static <T> List<ChangeListener<? super T>> getChangeListenerFromGenericClass(Class clazz, Object helper) {
+        try {
+            final Field field = clazz.getDeclaredField("changeListeners");
+            field.setAccessible(true);
+            final Map<ChangeListener<? super T>, Integer> listeners = (Map<ChangeListener<? super T>, Integer>)field.get(helper);
+            if (listeners != null) {
+                final ArrayList<ChangeListener<? super T>> list = new ArrayList<>();
+                list.addAll(listeners.keySet());
+                return list;
+            }
+        } catch (Exception ex) { }
+        return Collections.emptyList();
+    }
+
+    private static List<InvalidationListener> getInvalidationListenerFromGenericClass(Class clazz, Object helper) {
+        try {
+            final Field field = clazz.getDeclaredField("invalidationListeners");
+            field.setAccessible(true);
+            final Map<InvalidationListener, Integer> listeners = (Map<InvalidationListener, Integer>)field.get(helper);
+            if (listeners != null) {
+                final ArrayList<InvalidationListener> list = new ArrayList<>();
+                list.addAll(listeners.keySet());
+                return list;
+            }
+        } catch (Exception ex) { }
+        return Collections.emptyList();
+    }
 }
