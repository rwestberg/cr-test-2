diff a/modules/javafx.base/src/main/java/javafx/beans/property/BooleanProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/BooleanProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/BooleanProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/BooleanProperty.java
@@ -29,14 +29,10 @@
 import javafx.beans.binding.Bindings;
 import javafx.beans.value.ObservableValue;
 import javafx.beans.value.WritableBooleanValue;
 import com.sun.javafx.binding.Logging;
 
-import java.security.AccessControlContext;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
-
 /**
  * This class provides a full implementation of a {@link Property} wrapping a
  * {@code boolean} value.
  * <p>
  * The value of a {@code BooleanProperty} can be get and set with {@link #get()},
@@ -139,11 +135,10 @@
     public static BooleanProperty booleanProperty(final Property<Boolean> property) {
         if (property == null) {
             throw new NullPointerException("Property cannot be null");
         }
         return property instanceof BooleanProperty ? (BooleanProperty)property : new BooleanPropertyBase() {
-            private final AccessControlContext acc = AccessController.getContext();
             {
                 BidirectionalBinding.bind(this, property);
             }
 
             @Override
@@ -153,22 +148,10 @@
 
             @Override
             public String getName() {
                 return property.getName();
             }
-
-            @Override
-            protected void finalize() throws Throwable {
-                try {
-                    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
-                        BidirectionalBinding.unbind(property, this);
-                        return null;
-                    }, acc);
-                } finally {
-                    super.finalize();
-                }
-            }
         };
     }
 
     /**
      * Creates an {@link javafx.beans.property.ObjectProperty} that holds the value
@@ -180,11 +163,10 @@
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Boolean> asObject() {
         return new ObjectPropertyBase<Boolean> () {
-            private final AccessControlContext acc = AccessController.getContext();
             {
                 BidirectionalBinding.bind(this, BooleanProperty.this);
             }
 
             @Override
@@ -194,21 +176,8 @@
 
             @Override
             public String getName() {
                 return BooleanProperty.this.getName();
             }
-
-            @Override
-            protected void finalize() throws Throwable {
-                try {
-                    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
-                        BidirectionalBinding.unbind(this, BooleanProperty.this);
-                        return null;
-                    }, acc);
-                } finally {
-                    super.finalize();
-                }
-            }
-
         };
     }
 }
diff a/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java
@@ -35,14 +35,10 @@
 import javafx.beans.Observable;
 import javafx.beans.WeakInvalidationListener;
 import javafx.beans.value.ChangeListener;
 import javafx.beans.value.ObservableDoubleValue;
 
-import java.security.AccessControlContext;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
-
 /**
  * This class defines a {@link Property} wrapping a {@code double} value.
  * <p>
  * The value of a {@code DoubleProperty} can be get and set with {@link #get()},
  * {@link #getValue()}, {@link #set(double)}, and {@link #setValue(Number)}.
@@ -154,11 +150,10 @@
     public static DoubleProperty doubleProperty(final Property<Double> property) {
         if (property == null) {
             throw new NullPointerException("Property cannot be null");
         }
         return new DoublePropertyBase() {
-            private final AccessControlContext acc = AccessController.getContext();
             {
                 BidirectionalBinding.bindNumber(this, property);
             }
 
             @Override
@@ -168,22 +163,10 @@
 
             @Override
             public String getName() {
                 return property.getName();
             }
-
-            @Override
-            protected void finalize() throws Throwable {
-                try {
-                    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
-                        BidirectionalBinding.unbindNumber(property, this);
-                        return null;
-                    }, acc);
-                } finally {
-                    super.finalize();
-                }
-            }
         };
     }
 
     /**
      * Creates an {@link javafx.beans.property.ObjectProperty}
@@ -205,11 +188,10 @@
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Double> asObject() {
         return new ObjectPropertyBase<Double> () {
-            private final AccessControlContext acc = AccessController.getContext();
             {
                 BidirectionalBinding.bindNumber(this, DoubleProperty.this);
             }
 
             @Override
@@ -219,23 +201,10 @@
 
             @Override
             public String getName() {
                 return DoubleProperty.this.getName();
             }
-
-            @Override
-            protected void finalize() throws Throwable {
-                try {
-                    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
-                        BidirectionalBinding.unbindNumber(this, DoubleProperty.this);
-                        return null;
-                    }, acc);
-                } finally {
-                    super.finalize();
-                }
-            }
-
         };
     }
 
 
 }
diff a/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java
@@ -29,14 +29,10 @@
 import javafx.beans.binding.Bindings;
 import javafx.beans.value.ObservableValue;
 import javafx.beans.value.WritableFloatValue;
 import com.sun.javafx.binding.Logging;
 
-import java.security.AccessControlContext;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
-
 /**
  * This class defines a {@link Property} wrapping a {@code float} value.
  * <p>
  * The value of a {@code FloatProperty} can be get and set with {@link #get()},
  * {@link #getValue()}, {@link #set(float)}, and {@link #setValue(Number)}.
@@ -149,11 +145,10 @@
      public static FloatProperty floatProperty(final Property<Float> property) {
         if (property == null) {
             throw new NullPointerException("Property cannot be null");
         }
         return new FloatPropertyBase() {
-            private final AccessControlContext acc = AccessController.getContext();
             {
                 BidirectionalBinding.bindNumber(this, property);
             }
 
             @Override
@@ -163,22 +158,10 @@
 
             @Override
             public String getName() {
                 return property.getName();
             }
-
-            @Override
-            protected void finalize() throws Throwable {
-                try {
-                    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
-                        BidirectionalBinding.unbindNumber(property, this);
-                        return null;
-                    }, acc);
-                } finally {
-                    super.finalize();
-                }
-            }
         };
     }
 
     /**
      * Creates an {@link javafx.beans.property.ObjectProperty} that
@@ -200,11 +183,10 @@
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Float> asObject() {
         return new ObjectPropertyBase<Float> () {
-            private final AccessControlContext acc = AccessController.getContext();
             {
                 BidirectionalBinding.bindNumber(this, FloatProperty.this);
             }
 
             @Override
@@ -214,22 +196,9 @@
 
             @Override
             public String getName() {
                 return FloatProperty.this.getName();
             }
-
-            @Override
-            protected void finalize() throws Throwable {
-                try {
-                    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
-                        BidirectionalBinding.unbindNumber(this, FloatProperty.this);
-                        return null;
-                    }, acc);
-                } finally {
-                    super.finalize();
-                }
-            }
-
         };
     }
 
 }
diff a/modules/javafx.base/src/main/java/javafx/beans/property/IntegerProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/IntegerProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/IntegerProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/IntegerProperty.java
@@ -29,14 +29,10 @@
 import javafx.beans.binding.Bindings;
 import javafx.beans.value.ObservableValue;
 import javafx.beans.value.WritableIntegerValue;
 import com.sun.javafx.binding.Logging;
 
-import java.security.AccessControlContext;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
-
 /**
  * This class defines a {@link Property} wrapping an {@code int} value.
  * <p>
  * The value of an {@code IntegerProperty} can be get and set with {@link #get()},
  * {@link #getValue()}, {@link #set(int)}, and {@link #setValue(Number)}.
@@ -149,11 +145,10 @@
      public static IntegerProperty integerProperty(final Property<Integer> property) {
         if (property == null) {
             throw new NullPointerException("Property cannot be null");
         }
         return new IntegerPropertyBase() {
-            private final AccessControlContext acc = AccessController.getContext();
             {
                 BidirectionalBinding.bindNumber(this, property);
             }
 
             @Override
@@ -163,22 +158,10 @@
 
             @Override
             public String getName() {
                 return property.getName();
             }
-
-            @Override
-            protected void finalize() throws Throwable {
-                try {
-                    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
-                        BidirectionalBinding.unbindNumber(property, this);
-                        return null;
-                    }, acc);
-                } finally {
-                    super.finalize();
-                }
-            }
         };
     }
 
      /**
      * Creates an {@link javafx.beans.property.ObjectProperty}
@@ -200,11 +183,10 @@
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Integer> asObject() {
         return new ObjectPropertyBase<Integer> () {
-            private final AccessControlContext acc = AccessController.getContext();
             {
                 BidirectionalBinding.bindNumber(this, IntegerProperty.this);
             }
 
             @Override
@@ -214,21 +196,8 @@
 
             @Override
             public String getName() {
                 return IntegerProperty.this.getName();
             }
-
-            @Override
-            protected void finalize() throws Throwable {
-                try {
-                    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
-                        BidirectionalBinding.unbindNumber(this, IntegerProperty.this);
-                        return null;
-                    }, acc);
-                } finally {
-                    super.finalize();
-                }
-            }
-
         };
     }
 }
diff a/modules/javafx.base/src/main/java/javafx/beans/property/LongProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/LongProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/LongProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/LongProperty.java
@@ -29,14 +29,10 @@
 import javafx.beans.binding.Bindings;
 import javafx.beans.value.ObservableValue;
 import javafx.beans.value.WritableLongValue;
 import com.sun.javafx.binding.Logging;
 
-import java.security.AccessControlContext;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
-
 /**
  * This class defines a {@link Property} wrapping a {@code long} value.
  * <p>
  * The value of a {@code LongProperty} can be get and set with {@link #get()},
  * {@link #getValue()}, {@link #set(long)}, and {@link #setValue(Number)}.
@@ -147,11 +143,10 @@
      public static LongProperty longProperty(final Property<Long> property) {
         if (property == null) {
             throw new NullPointerException("Property cannot be null");
         }
         return new LongPropertyBase() {
-            private final AccessControlContext acc = AccessController.getContext();
             {
                 BidirectionalBinding.bindNumber(this, property);
             }
 
             @Override
@@ -161,22 +156,10 @@
 
             @Override
             public String getName() {
                 return property.getName();
             }
-
-            @Override
-            protected void finalize() throws Throwable {
-                try {
-                    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
-                        BidirectionalBinding.unbindNumber(property, this);
-                        return null;
-                    }, acc);
-                } finally {
-                    super.finalize();
-                }
-            }
         };
     }
 
      /**
      * Creates an {@link javafx.beans.property.ObjectProperty}
@@ -198,11 +181,10 @@
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Long> asObject() {
         return new ObjectPropertyBase<Long> () {
-            private final AccessControlContext acc = AccessController.getContext();
             {
                 BidirectionalBinding.bindNumber(this, LongProperty.this);
             }
 
             @Override
@@ -212,21 +194,8 @@
 
             @Override
             public String getName() {
                 return LongProperty.this.getName();
             }
-
-            @Override
-            protected void finalize() throws Throwable {
-                try {
-                    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
-                        BidirectionalBinding.unbindNumber(this, LongProperty.this);
-                        return null;
-                    }, acc);
-                } finally {
-                    super.finalize();
-                }
-            }
-
         };
     }
 }
diff a/modules/javafx.base/src/test/java/test/javafx/beans/property/ObjectPropertyLeakTest.java b/modules/javafx.base/src/test/java/test/javafx/beans/property/ObjectPropertyLeakTest.java
--- /dev/null
+++ b/modules/javafx.base/src/test/java/test/javafx/beans/property/ObjectPropertyLeakTest.java
@@ -0,0 +1,278 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package test.javafx.beans.property;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import javafx.beans.property.BooleanProperty;
+import javafx.beans.property.DoubleProperty;
+import javafx.beans.property.FloatProperty;
+import javafx.beans.property.IntegerProperty;
+import javafx.beans.property.LongProperty;
+import javafx.beans.property.ObjectProperty;
+import javafx.beans.property.Property;
+import javafx.beans.property.SimpleBooleanProperty;
+import javafx.beans.property.SimpleDoubleProperty;
+import javafx.beans.property.SimpleFloatProperty;
+import javafx.beans.property.SimpleIntegerProperty;
+import javafx.beans.property.SimpleLongProperty;
+import javafx.beans.property.SimpleObjectProperty;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+
+public class ObjectPropertyLeakTest {
+
+    private static final int OBJ_COUNT = 10;
+
+    private final ArrayList<Property<?>> origList = new ArrayList<>();
+    private final ArrayList<Property<?>> wrappedList = new ArrayList<>();
+
+    private final ArrayList<WeakReference<Property<?>>> origRefs = new ArrayList<>();
+    private final ArrayList<WeakReference<Property<?>>> wrappedRefs = new ArrayList<>();
+
+    private void commonLeakTest(int origExpected, int wrappedExpected)
+            throws Exception {
+
+        for (int i = 0; i < 5; i++) {
+            System.gc();
+            System.runFinalization();
+            Thread.sleep(50);
+        }
+
+        int origCount = 0;
+        for (var ref : origRefs) {
+            if (ref.get() != null) origCount++;
+        }
+        final String origMsg = origExpected > 0
+                ? "Original properties should NOT be GCed"
+                : "Original properties should be GCed";
+        assertEquals(origMsg, origExpected, origCount);
+
+        int wrappedCount = 0;
+        for (var ref : wrappedRefs) {
+            if (ref.get() != null) wrappedCount++;
+        }
+        final String wrappedMsg = wrappedExpected > 0
+                ? "Wrapped properties should NOT be GCed"
+                : "Wrapped properties should be GCed";
+        assertEquals(wrappedMsg, wrappedExpected, wrappedCount);
+    }
+
+    private void commonLeakTest() throws Exception {
+        // Verify that we hold references to both original and wrapped objects
+        commonLeakTest(OBJ_COUNT, OBJ_COUNT);
+
+        // Clear references to wrapped property objects and recheck
+        wrappedList.clear();
+        commonLeakTest(OBJ_COUNT, 0);
+
+        // Clear references to original property objects and recheck
+        origList.clear();
+        commonLeakTest(0, 0);
+    }
+
+    @Test
+    public void testBooleanPropertyAsObjectLeak() throws Exception {
+        for (int i = 0; i < OBJ_COUNT; i++) {
+            // Create original and wrapped property objects
+            final BooleanProperty origProp = new SimpleBooleanProperty(true);
+            final ObjectProperty<Boolean> wrappedProp = origProp.asObject();
+
+            // Save reference to original and wrapped objects
+            origList.add(origProp);
+            wrappedList.add(wrappedProp);
+
+            // Save weak references for GC detection
+            origRefs.add(new WeakReference<>(origProp));
+            wrappedRefs.add(new WeakReference<>(wrappedProp));
+        }
+        commonLeakTest();
+    }
+
+    @Test
+    public void testObjectToBooleanLeak() throws Exception {
+        for (int i = 0; i < OBJ_COUNT; i++) {
+            // Create original and wrapped property objects
+            final ObjectProperty<Boolean> origProp = new SimpleObjectProperty<>(true);
+            final BooleanProperty wrappedProp = BooleanProperty.booleanProperty(origProp);
+
+            // Save reference to original and wrapped objects
+            origList.add(origProp);
+            wrappedList.add(wrappedProp);
+
+            // Save weak references for GC detection
+            origRefs.add(new WeakReference<>(origProp));
+            wrappedRefs.add(new WeakReference<>(wrappedProp));
+        }
+        commonLeakTest();
+    }
+
+    @Test
+    public void testDoublePropertyAsObjectLeak() throws Exception {
+        for (int i = 0; i < OBJ_COUNT; i++) {
+            // Create original and wrapped property objects
+            final DoubleProperty origProp = new SimpleDoubleProperty(1.0);
+            final ObjectProperty<Double> wrappedProp = origProp.asObject();
+
+            // Save reference to original and wrapped objects
+            origList.add(origProp);
+            wrappedList.add(wrappedProp);
+
+            // Save weak references for GC detection
+            origRefs.add(new WeakReference<>(origProp));
+            wrappedRefs.add(new WeakReference<>(wrappedProp));
+        }
+        commonLeakTest();
+    }
+
+    @Test
+    public void testObjectToDoubleLeak() throws Exception {
+        for (int i = 0; i < OBJ_COUNT; i++) {
+            // Create original and wrapped property objects
+            final ObjectProperty<Double> origProp = new SimpleObjectProperty<>(1.0);
+            final DoubleProperty wrappedProp = DoubleProperty.doubleProperty(origProp);
+
+            // Save reference to original and wrapped objects
+            origList.add(origProp);
+            wrappedList.add(wrappedProp);
+
+            // Save weak references for GC detection
+            origRefs.add(new WeakReference<>(origProp));
+            wrappedRefs.add(new WeakReference<>(wrappedProp));
+        }
+        commonLeakTest();
+    }
+
+    @Test
+    public void testFloatPropertyAsObjectLeak() throws Exception {
+        for (int i = 0; i < OBJ_COUNT; i++) {
+            // Create original and wrapped property objects
+            final FloatProperty origProp = new SimpleFloatProperty(1.0f);
+            final ObjectProperty<Float> wrappedProp = origProp.asObject();
+
+            // Save reference to original and wrapped objects
+            origList.add(origProp);
+            wrappedList.add(wrappedProp);
+
+            // Save weak references for GC detection
+            origRefs.add(new WeakReference<>(origProp));
+            wrappedRefs.add(new WeakReference<>(wrappedProp));
+        }
+        commonLeakTest();
+    }
+
+    @Test
+    public void testObjectToFloatLeak() throws Exception {
+        for (int i = 0; i < OBJ_COUNT; i++) {
+            // Create original and wrapped property objects
+            final ObjectProperty<Float> origProp = new SimpleObjectProperty<>(1.0f);
+            final FloatProperty wrappedProp = FloatProperty.floatProperty(origProp);
+
+            // Save reference to original and wrapped objects
+            origList.add(origProp);
+            wrappedList.add(wrappedProp);
+
+            // Save weak references for GC detection
+            origRefs.add(new WeakReference<>(origProp));
+            wrappedRefs.add(new WeakReference<>(wrappedProp));
+        }
+        commonLeakTest();
+    }
+
+    @Test
+    public void testIntegerPropertyAsObjectLeak() throws Exception {
+        for (int i = 0; i < OBJ_COUNT; i++) {
+            // Create original and wrapped property objects
+            final IntegerProperty origProp = new SimpleIntegerProperty(1);
+            final ObjectProperty<Integer> wrappedProp = origProp.asObject();
+
+            // Save reference to original and wrapped objects
+            origList.add(origProp);
+            wrappedList.add(wrappedProp);
+
+            // Save weak references for GC detection
+            origRefs.add(new WeakReference<>(origProp));
+            wrappedRefs.add(new WeakReference<>(wrappedProp));
+        }
+        commonLeakTest();
+    }
+
+    @Test
+    public void testObjectToIntegerLeak() throws Exception {
+        for (int i = 0; i < OBJ_COUNT; i++) {
+            // Create original and wrapped property objects
+            final ObjectProperty<Integer> origProp = new SimpleObjectProperty<>(1);
+            final IntegerProperty wrappedProp = IntegerProperty.integerProperty(origProp);
+
+            // Save reference to original and wrapped objects
+            origList.add(origProp);
+            wrappedList.add(wrappedProp);
+
+            // Save weak references for GC detection
+            origRefs.add(new WeakReference<>(origProp));
+            wrappedRefs.add(new WeakReference<>(wrappedProp));
+        }
+        commonLeakTest();
+    }
+
+    @Test
+    public void testLongPropertyAsObjectLeak() throws Exception {
+        for (int i = 0; i < OBJ_COUNT; i++) {
+            // Create original and wrapped property objects
+            final LongProperty origProp = new SimpleLongProperty(1L);
+            final ObjectProperty<Long> wrappedProp = origProp.asObject();
+
+            // Save reference to original and wrapped objects
+            origList.add(origProp);
+            wrappedList.add(wrappedProp);
+
+            // Save weak references for GC detection
+            origRefs.add(new WeakReference<>(origProp));
+            wrappedRefs.add(new WeakReference<>(wrappedProp));
+        }
+        commonLeakTest();
+    }
+
+    @Test
+    public void testObjectToLongLeak() throws Exception {
+        for (int i = 0; i < OBJ_COUNT; i++) {
+            // Create original and wrapped property objects
+            final ObjectProperty<Long> origProp = new SimpleObjectProperty<>(1L);
+            final LongProperty wrappedProp = LongProperty.longProperty(origProp);
+
+            // Save reference to original and wrapped objects
+            origList.add(origProp);
+            wrappedList.add(wrappedProp);
+
+            // Save weak references for GC detection
+            origRefs.add(new WeakReference<>(origProp));
+            wrappedRefs.add(new WeakReference<>(wrappedProp));
+        }
+        commonLeakTest();
+    }
+
+}
