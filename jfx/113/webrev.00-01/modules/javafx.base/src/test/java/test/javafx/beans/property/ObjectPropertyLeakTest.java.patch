diff a/modules/javafx.base/src/test/java/test/javafx/beans/property/ObjectPropertyLeakTest.java b/modules/javafx.base/src/test/java/test/javafx/beans/property/ObjectPropertyLeakTest.java
--- a/modules/javafx.base/src/test/java/test/javafx/beans/property/ObjectPropertyLeakTest.java
+++ b/modules/javafx.base/src/test/java/test/javafx/beans/property/ObjectPropertyLeakTest.java
@@ -116,11 +116,11 @@
     @Test
     public void testObjectToBooleanLeak() throws Exception {
         for (int i = 0; i < OBJ_COUNT; i++) {
             // Create original and wrapped property objects
             final ObjectProperty<Boolean> origProp = new SimpleObjectProperty<>(true);
-            BooleanProperty wrappedProp = BooleanProperty.booleanProperty(origProp);
+            final BooleanProperty wrappedProp = BooleanProperty.booleanProperty(origProp);
 
             // Save reference to original and wrapped objects
             origList.add(origProp);
             wrappedList.add(wrappedProp);
 
@@ -152,11 +152,11 @@
     @Test
     public void testObjectToDoubleLeak() throws Exception {
         for (int i = 0; i < OBJ_COUNT; i++) {
             // Create original and wrapped property objects
             final ObjectProperty<Double> origProp = new SimpleObjectProperty<>(1.0);
-            DoubleProperty wrappedProp = DoubleProperty.doubleProperty(origProp);
+            final DoubleProperty wrappedProp = DoubleProperty.doubleProperty(origProp);
 
             // Save reference to original and wrapped objects
             origList.add(origProp);
             wrappedList.add(wrappedProp);
 
@@ -188,11 +188,11 @@
     @Test
     public void testObjectToFloatLeak() throws Exception {
         for (int i = 0; i < OBJ_COUNT; i++) {
             // Create original and wrapped property objects
             final ObjectProperty<Float> origProp = new SimpleObjectProperty<>(1.0f);
-            FloatProperty wrappedProp = FloatProperty.floatProperty(origProp);
+            final FloatProperty wrappedProp = FloatProperty.floatProperty(origProp);
 
             // Save reference to original and wrapped objects
             origList.add(origProp);
             wrappedList.add(wrappedProp);
 
@@ -224,11 +224,11 @@
     @Test
     public void testObjectToIntegerLeak() throws Exception {
         for (int i = 0; i < OBJ_COUNT; i++) {
             // Create original and wrapped property objects
             final ObjectProperty<Integer> origProp = new SimpleObjectProperty<>(1);
-            IntegerProperty wrappedProp = IntegerProperty.integerProperty(origProp);
+            final IntegerProperty wrappedProp = IntegerProperty.integerProperty(origProp);
 
             // Save reference to original and wrapped objects
             origList.add(origProp);
             wrappedList.add(wrappedProp);
 
@@ -260,11 +260,11 @@
     @Test
     public void testObjectToLongLeak() throws Exception {
         for (int i = 0; i < OBJ_COUNT; i++) {
             // Create original and wrapped property objects
             final ObjectProperty<Long> origProp = new SimpleObjectProperty<>(1L);
-            LongProperty wrappedProp = LongProperty.longProperty(origProp);
+            final LongProperty wrappedProp = LongProperty.longProperty(origProp);
 
             // Save reference to original and wrapped objects
             origList.add(origProp);
             wrappedList.add(wrappedProp);
 
