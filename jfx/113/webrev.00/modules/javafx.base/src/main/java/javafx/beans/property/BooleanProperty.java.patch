diff a/modules/javafx.base/src/main/java/javafx/beans/property/BooleanProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/BooleanProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/BooleanProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/BooleanProperty.java
@@ -29,14 +29,10 @@
 import javafx.beans.binding.Bindings;
 import javafx.beans.value.ObservableValue;
 import javafx.beans.value.WritableBooleanValue;
 import com.sun.javafx.binding.Logging;
 
-import java.security.AccessControlContext;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
-
 /**
  * This class provides a full implementation of a {@link Property} wrapping a
  * {@code boolean} value.
  * <p>
  * The value of a {@code BooleanProperty} can be get and set with {@link #get()},
@@ -139,11 +135,10 @@
     public static BooleanProperty booleanProperty(final Property<Boolean> property) {
         if (property == null) {
             throw new NullPointerException("Property cannot be null");
         }
         return property instanceof BooleanProperty ? (BooleanProperty)property : new BooleanPropertyBase() {
-            private final AccessControlContext acc = AccessController.getContext();
             {
                 BidirectionalBinding.bind(this, property);
             }
 
             @Override
@@ -153,22 +148,10 @@
 
             @Override
             public String getName() {
                 return property.getName();
             }
-
-            @Override
-            protected void finalize() throws Throwable {
-                try {
-                    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
-                        BidirectionalBinding.unbind(property, this);
-                        return null;
-                    }, acc);
-                } finally {
-                    super.finalize();
-                }
-            }
         };
     }
 
     /**
      * Creates an {@link javafx.beans.property.ObjectProperty} that holds the value
@@ -180,11 +163,10 @@
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Boolean> asObject() {
         return new ObjectPropertyBase<Boolean> () {
-            private final AccessControlContext acc = AccessController.getContext();
             {
                 BidirectionalBinding.bind(this, BooleanProperty.this);
             }
 
             @Override
@@ -194,21 +176,8 @@
 
             @Override
             public String getName() {
                 return BooleanProperty.this.getName();
             }
-
-            @Override
-            protected void finalize() throws Throwable {
-                try {
-                    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
-                        BidirectionalBinding.unbind(this, BooleanProperty.this);
-                        return null;
-                    }, acc);
-                } finally {
-                    super.finalize();
-                }
-            }
-
         };
     }
 }
