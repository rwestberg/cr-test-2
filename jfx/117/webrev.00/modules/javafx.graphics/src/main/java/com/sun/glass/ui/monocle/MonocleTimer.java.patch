diff a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/MonocleTimer.java b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/MonocleTimer.java
--- a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/MonocleTimer.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/MonocleTimer.java
@@ -24,17 +24,20 @@
  */
 
 package com.sun.glass.ui.monocle;
 
 import com.sun.glass.ui.Timer;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.ScheduledThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
 
 /**
  * Monocle implementation class for Timer.
  */
 final class MonocleTimer extends Timer {
-    private static java.util.Timer timer;
-    private java.util.TimerTask task;
+    private static ScheduledThreadPoolExecutor scheduler;
+    private ScheduledFuture<?> task;
 
     MonocleTimer(final Runnable runnable) {
         super(runnable);
     }
 
@@ -45,33 +48,25 @@
     static int getMaxPeriod_impl() {
         return 1000000;
     }
 
     @Override protected long _start(final Runnable runnable, int period) {
-        if (timer == null) {
-            timer = new java.util.Timer(true);
+        if (scheduler == null) {
+            scheduler = new ScheduledThreadPoolExecutor(1);
         }
 
-        task = new java.util.TimerTask() {
-
-            @Override
-            public void run() {
-                runnable.run();
-            }
-        };
-
-        timer.schedule(task, 0, (long)period);
+        task = scheduler.scheduleAtFixedRate(runnable, 0, period, TimeUnit.MILLISECONDS);
         return 1; // need something non-zero to denote success.
     }
 
     @Override protected long _start(Runnable runnable) {
         throw new RuntimeException("vsync timer not supported");
     }
 
     @Override protected void _stop(long timer) {
         if (task != null) {
-            task.cancel();
+            task.cancel(false);
             task = null;
         }
     }
 
     @Override protected void _pause(long timer) {}
