diff a/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java b/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
--- a/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
+++ b/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
@@ -574,11 +574,11 @@
         }
         return modified;
     }
 
     /**
-     * Reverse the order in the list
+     * Reverses the order in the list.
      * Fires only <b>one</b> change notification on the list.
      * @param list the list to be reversed
      * @see Collections#reverse(java.util.List)
      */
     @SuppressWarnings("unchecked")
diff a/modules/javafx.graphics/src/main/java/javafx/animation/Animation.java b/modules/javafx.graphics/src/main/java/javafx/animation/Animation.java
--- a/modules/javafx.graphics/src/main/java/javafx/animation/Animation.java
+++ b/modules/javafx.graphics/src/main/java/javafx/animation/Animation.java
@@ -415,11 +415,11 @@
         return cycleDuration;
     }
 
     /**
      * Read-only variable to indicate the total duration of this
-     * {@code Animation}, including repeats. A {@code Animation} with a {@code cycleCount}
+     * {@code Animation}, including repeats. An {@code Animation} with a {@code cycleCount}
      * of {@code Animation.INDEFINITE} will have a {@code totalDuration} of
      * {@code Duration.INDEFINITE}.
      *
      * <p>
      * This is set to cycleDuration * cycleCount.
@@ -959,11 +959,11 @@
         play();
     }
 
     /**
      * Stops the animation and resets the play head to its initial position. If
-     * the animation is not currently running, this method has no effect.
+     * the animation is already stopped, this method has no effect.
      * <p>
      * Note: <ul>
      * <li>{@code stop()} is an asynchronous call, the {@code Animation} may not stop
      * immediately. </ul>
      * @throws IllegalStateException
diff a/modules/javafx.graphics/src/main/java/javafx/application/Platform.java b/modules/javafx.graphics/src/main/java/javafx/application/Platform.java
--- a/modules/javafx.graphics/src/main/java/javafx/application/Platform.java
+++ b/modules/javafx.graphics/src/main/java/javafx/application/Platform.java
@@ -173,11 +173,11 @@
         Toolkit.getToolkit().requestNextPulse();
     }
 
     /**
      * Returns true if the calling thread is the JavaFX Application Thread.
-     * Use this call the ensure that a given task is being executed
+     * Use this call to ensure that a given task is being executed
      * (or not being executed) on the JavaFX Application Thread.
      *
      * @return true if running on the JavaFX Application Thread
      */
     public static boolean isFxApplicationThread() {
diff a/modules/javafx.graphics/src/main/java/javafx/scene/Node.java b/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
@@ -1564,11 +1564,11 @@
         return (miscProperties == null) ? DEFAULT_CLIP
                                         : miscProperties.getClip();
     }
 
     /**
-     * Specifies a {@code Node} to use to define the the clipping shape for this
+     * Specifies a {@code Node} to use to define the clipping shape for this
      * Node. This clipping Node is not a child of this {@code Node} in the scene
      * graph sense. Rather, it is used to define the clip for this {@code Node}.
      * <p>
      * For example, you can use an {@link javafx.scene.image.ImageView} Node as
      * a mask to represent the Clip. Or you could use one of the geometric shape
diff a/modules/javafx.graphics/src/main/native-glass/win/OleUtils.h b/modules/javafx.graphics/src/main/native-glass/win/OleUtils.h
--- a/modules/javafx.graphics/src/main/native-glass/win/OleUtils.h
+++ b/modules/javafx.graphics/src/main/native-glass/win/OleUtils.h
@@ -225,11 +225,11 @@
             JLString jsMessage(env, (jstring)env->CallObjectMethod(
                 ex,
                 s_jcidThrowable_getMessage
             ));
             if(jsMessage){
-                STRACE1(_T("Java Messsge:%s"), (LPCWSTR)JString(env, jsMessage) );
+                STRACE1(_T("Java Message:%s"), (LPCWSTR)JString(env, jsMessage) );
             }
             env->ExceptionDescribe();
         }
         env->ExceptionClear();
     }
