diff a/src/java.base/share/classes/java/lang/Scoped.java b/src/java.base/share/classes/java/lang/Scoped.java
--- a/src/java.base/share/classes/java/lang/Scoped.java
+++ b/src/java.base/share/classes/java/lang/Scoped.java
@@ -146,10 +146,21 @@
             map.remove(hashCode(), this);
         }
         Cache.remove(this);
     }
 
+    private Object searchParents(Thread thread) {
+        for (Thread t = thread; t != null; t = t.getParent()) {
+            var value = t.scopedMap().get(hashCode(), this);
+            if (value != ScopedMap.NULL_PLACEHOLDER) {
+                return value;
+            }
+        }
+
+        return ScopedMap.NULL_PLACEHOLDER;
+    }
+
     /**
      * TBD
      *
      * @return TBD
      */
@@ -165,30 +176,26 @@
             if (objects[n] == this) {
                 return true;
             }
         }
 
-        var value = Thread.currentThread().scopedMap().get(hashCode(), this);
-
-        if (value == ScopedMap.NULL_PLACEHOLDER)
-            return false;
-
-        return true;
+        var value = searchParents(Thread.currentThread());
+        return value != ScopedMap.NULL_PLACEHOLDER;
     }
 
     @SuppressWarnings("unchecked")  // one map has entries for all types <T>
     private T slowGet(Thread thread) {
-        var value = Thread.currentThread().scopedMap().get(hashCode(), this);
+        var value = searchParents(thread);
 
-        if (value == ScopedMap.NULL_PLACEHOLDER)
+        if (value == ScopedMap.NULL_PLACEHOLDER) {
             throw new UnboundScopedException("Scoped<" + getType().getName() + "> is not bound");
-
-        if (USE_CACHE) {
-            Cache.put(thread, this, value);
+        } else {
+            if (USE_CACHE) {
+                Cache.put(this, value);
+            }
+            return (T) value;
         }
-
-        return (T) value;
     }
 
     // A Marsaglia xor-shift generator used to generate hashes.
     private static synchronized int generateKey() {
         int x = nextKey;
@@ -307,15 +314,15 @@
 
         static final int TABLE_SIZE = 1 << INDEX_BITS;
 
         static final int TABLE_MASK = TABLE_SIZE - 1;
 
-        static void put(Thread t, Scoped<?> key, Object value) {
+        static void put(Scoped<?> key, Object value) {
             if (Thread.scopedCache() == null) {
                 Thread.setScopedCache(new Object[TABLE_SIZE * 2]);
             }
-            setKeyAndObjectAt(chooseVictim(t, key.hashCode()), key, value);
+            setKeyAndObjectAt(chooseVictim(Thread.currentCarrierThread(), key.hashCode()), key, value);
         }
 
         private static final void update(Object key, Object value) {
             Object[] objects;
             if (USE_CACHE && (objects = Thread.scopedCache()) != null) {
diff a/src/java.base/share/classes/java/lang/System.java b/src/java.base/share/classes/java/lang/System.java
--- a/src/java.base/share/classes/java/lang/System.java
+++ b/src/java.base/share/classes/java/lang/System.java
@@ -2317,8 +2317,12 @@
             }
 
             public boolean isVirtualThreadParking(Thread thread) {
                 return ((VirtualThread) thread).isParking();
             }
+
+            public Thread getParent(Thread thread) { return thread.getParent(); }
+
+            public void setParent(Thread thread, Thread parent) { thread.setParent(parent); }
         });
     }
 }
diff a/src/java.base/share/classes/java/lang/Thread.java b/src/java.base/share/classes/java/lang/Thread.java
--- a/src/java.base/share/classes/java/lang/Thread.java
+++ b/src/java.base/share/classes/java/lang/Thread.java
@@ -149,10 +149,27 @@
     private ClassLoader contextClassLoader;
 
     // inherited AccessControlContext, TBD: move this to FieldHolder
     private AccessControlContext inheritedAccessControlContext;
 
+    private Thread parent;
+
+    /**
+     * @return The parent thread;
+     */
+    Thread getParent() {
+        return parent;
+    }
+
+    /**
+     * @param t
+     * Set the parent thread;
+     */
+    void setParent(Thread t) {
+        parent = t;
+    }
+
     /* For autonumbering anonymous threads. */
     private static int threadInitNumber;
     private static synchronized int nextThreadNum() {
         return threadInitNumber++;
     }
@@ -302,11 +319,11 @@
     /**
      * TBD
      * @return TBD
      */
     @HotSpotIntrinsicCandidate
-    static native Thread currentThread0();
+    private static native Thread currentThread0();
 
     /**
      * A hint to the scheduler that the current thread is willing to yield
      * its current use of a processor. The scheduler is free to ignore this
      * hint.
@@ -2998,15 +3015,10 @@
     int threadLocalRandomProbe;
 
     /** Secondary seed isolated from public ThreadLocalRandom sequence */
     int threadLocalRandomSecondarySeed;
 
-    /**
-     * TBD
-     */
-    public Object userObject;
-
     /* Some private helper methods */
     private native void setPriority0(int newPriority);
     private native void stop0(Object o);
     private native void suspend0();
     private native void resume0();
diff a/src/java.base/share/classes/java/util/concurrent/UnboundedExecutor.java b/src/java.base/share/classes/java/util/concurrent/UnboundedExecutor.java
--- a/src/java.base/share/classes/java/util/concurrent/UnboundedExecutor.java
+++ b/src/java.base/share/classes/java/util/concurrent/UnboundedExecutor.java
@@ -22,10 +22,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package java.util.concurrent;
 
+import jdk.internal.access.JavaLangAccess;
+import jdk.internal.access.SharedSecrets;
+
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.VarHandle;
 import java.util.List;
 import java.util.Objects;
 import java.util.Set;
@@ -50,10 +53,12 @@
             throw new InternalError(e);
         }
     }
     private volatile int state;
 
+    private static final JavaLangAccess jla = SharedSecrets.getJavaLangAccess();
+
     // states: RUNNING -> SHUTDOWN -> TERMINATED
     private static final int RUNNING    = 0;
     private static final int SHUTDOWN   = 1;
     private static final int TERMINATED = 2;
 
@@ -162,10 +167,11 @@
             } finally {
                 onTerminate(Thread.currentThread());
             }
         };
         Thread thread = factory.newThread(wrapper);
+        jla.setParent(thread, Thread.currentThread());
         threads.add(thread);
         boolean started = false;
         try {
             if (state == RUNNING) {
                 thread.start();
diff a/src/java.base/share/classes/jdk/internal/access/JavaLangAccess.java b/src/java.base/share/classes/jdk/internal/access/JavaLangAccess.java
--- a/src/java.base/share/classes/jdk/internal/access/JavaLangAccess.java
+++ b/src/java.base/share/classes/jdk/internal/access/JavaLangAccess.java
@@ -360,6 +360,17 @@
 
     /**
      * Returns true if the given virtual thread is parking.
      */
     boolean isVirtualThreadParking(Thread thread);
+
+    /**
+     * @return The parent thread;
+     */
+    Thread getParent(Thread t);
+
+    /**
+     * @param t
+     * Set the parent thread;
+     */
+    void setParent(Thread t, Thread parent);
 }
