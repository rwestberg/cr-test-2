diff a/src/java.base/share/classes/java/lang/Thread.java b/src/java.base/share/classes/java/lang/Thread.java
--- a/src/java.base/share/classes/java/lang/Thread.java
+++ b/src/java.base/share/classes/java/lang/Thread.java
@@ -268,12 +268,45 @@
      */
     static Thread currentCarrierThread() {
         return currentThread0();
     }
 
+    // Scoped support:
+
+    /**
+     * TBD
+     * @return TBD
+     */
+    @HotSpotIntrinsicCandidate
+    static native Object[] scopedCache();
+
     @HotSpotIntrinsicCandidate
-    private static native Thread currentThread0();
+    static native void setScopedCache(Object[] cache);
+
+    // A simple (not very) random string of bits to use when evicting
+    // cache entries.
+    int victims
+        = 0b1100_1001_0000_1111_1101_1010_1010_0010;
+
+    private ScopedMap scopedMap;
+
+    final ScopedMap scopedMap() {
+        var map = scopedMap;
+        if (map == null) {
+            map = scopedMap = new ScopedMap();
+        }
+        return map;
+    }
+
+    // end Scoped support
+
+    /**
+     * TBD
+     * @return TBD
+     */
+    @HotSpotIntrinsicCandidate
+    static native Thread currentThread0();
 
     /**
      * A hint to the scheduler that the current thread is willing to yield
      * its current use of a processor. The scheduler is free to ignore this
      * hint.
@@ -2984,10 +3017,15 @@
     int threadLocalRandomProbe;
 
     /** Secondary seed isolated from public ThreadLocalRandom sequence */
     int threadLocalRandomSecondarySeed;
 
+    /**
+     * TBD
+     */
+    public Object userObject;
+
     /* Some private helper methods */
     private native void setPriority0(int newPriority);
     private native void stop0(Object o);
     private native void suspend0();
     private native void resume0();
