diff a/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java b/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java
--- a/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java
@@ -97,11 +97,11 @@
             log.info("Using seed folder " + seed + " when cloning into " + path);
             return Repository.clone(hostedRepository.url(), path, false, seed);
         }
 
         private NewClone fetchRef(Repository repository) throws IOException {
-            var fetchHead = repository.fetch(hostedRepository.url(), "+" + ref + ":" + ref);
+            var fetchHead = repository.fetch(hostedRepository.url(), "+" + ref + ":hostedrepositorypool");
             return new NewClone(repository, fetchHead);
         }
 
         private NewClone materializeClone(Path path) throws IOException {
             var localRepo = Repository.get(path);
@@ -110,20 +110,20 @@
             } else {
                 var localRepoInstance = localRepo.get();
                 if (!localRepoInstance.isHealthy()) {
                     var preserveUnhealthy = seed.resolveSibling(seed.getFileName().toString() + "-unhealthy-" + UUID.randomUUID());
                     log.severe("Unhealthy local repository detected - preserved in: " + preserveUnhealthy);
-                    Files.move(localRepoInstance.root(), preserveUnhealthy);
+                    Files.move(path, preserveUnhealthy);
                     return fetchRef(cloneSeeded(path));
                 } else {
                     try {
                         localRepoInstance.clean();
                         return fetchRef(localRepoInstance);
                     } catch (IOException e) {
                         var preserveUnclean = seed.resolveSibling(seed.getFileName().toString() + "-unclean-" + UUID.randomUUID());
                         log.severe("Uncleanable local repository detected - preserved in: " + preserveUnclean);
-                        Files.move(localRepoInstance.root(), preserveUnclean);
+                        Files.move(path, preserveUnclean);
                         return fetchRef(cloneSeeded(path));
                     }
                 }
             }
         }
@@ -156,8 +156,8 @@
         }
         return localRepo;
     }
 
     public Repository checkout(PullRequest pr, Path path) throws IOException {
-        return checkout(pr.repository(), pr.sourceRef(), path);
+        return checkout(pr.repository(), pr.headHash().hex(), path);
     }
 }
