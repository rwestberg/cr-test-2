diff a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
--- a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
+++ b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
@@ -35,10 +35,11 @@
 import java.time.DayOfWeek;
 import java.time.Month;
 import java.time.temporal.WeekFields;
 import java.time.ZonedDateTime;
 import java.util.*;
+import java.util.stream.Collectors;
 import java.util.logging.Logger;
 
 class MergeBot implements Bot, WorkItem {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
     private final Path storage;
@@ -389,60 +390,93 @@
                     repo.merge(fetchHead);
                 } catch (IOException e) {
                     error = e;
                 }
 
+                var targetName = Path.of(target.name()).getFileName();
+                var fromName = Path.of(fromRepo.name()).getFileName();
+                var fromDesc = targetName.equals(fromName) ? fromBranch : fromName + ":" + fromBranch;
                 if (error == null) {
                     log.info("Pushing successful merge");
                     if (!isAncestor) {
-                        var targetName = Path.of(target.name()).getFileName();
-                        var fromName = Path.of(fromRepo.name()).getFileName();
-                        var fromDesc = targetName.equals(fromName) ? fromBranch : fromName + ":" + fromBranch;
                         repo.commit("Automatic merge of " + fromDesc + " into " + toBranch,
                                 "duke", "duke@openjdk.org");
                     }
                     repo.push(toBranch, target.url().toString(), false);
                 } else {
                     log.info("Got error: " + error.getMessage());
                     log.info("Aborting unsuccesful merge");
+                    var status = repo.status();
                     repo.abortMerge();
 
                     var fromRepoName = Path.of(fromRepo.webUrl().getPath()).getFileName();
                     var branchDesc = fromRepoName + "/" + fromBranch.name() + "->" + toBranch.name();
                     repo.push(fetchHead, fork.url(), branchDesc, true);
 
                     log.info("Creating pull request to alert");
                     var mergeBase = repo.mergeBase(fetchHead, head);
-                    var commits = repo.commits(mergeBase.hex() + ".." + fetchHead.hex(), true).asList();
 
                     var message = new ArrayList<String>();
                     message.add(marker);
                     message.add("<!-- " + fetchHead.hex() + " -->");
-                    message.add("The following commits from `" + fromRepo.name() + ":" + fromBranch.name() +
-                                "` could *not* be automatically merged into `" + toBranch.name() + "`:");
-                    message.add("");
-                    for (var commit : commits) {
-                        message.add("- " + commit.hash().abbreviate() + ": " + commit.message().get(0));
+
+                    var commits = repo.commits(mergeBase.hex() + ".." + fetchHead.hex(), true).asList();
+                    if (commits.size() <= 10) {
+                        message.add("The following commits from " + fromDesc + " could *not* be " +
+                                    "automatically merged into " + toBranch.name() + ":");
+                        message.add("");
+                        for (var commit : commits) {
+                            message.add("- " + commit.hash().abbreviate() + ": " + commit.message().get(0));
+                        }
+                        message.add("");
+                    } else {
+                        message.add("Could *not* automatically merge " + commits.size() + " commits from " +
+                                    fromDesc + " into " + toBranch.name() + ".");
+                    }
+
+                    var unmerged = status.stream().filter(s -> s.status().isUnmerged()).collect(Collectors.toList());
+                    if (unmerged.size() <= 10) {
+                        message.add("The following files contains merge conflicts:");
+                        message.add("");
+                        for (var fileStatus : unmerged) {
+                            message.add("- " + fileStatus.source().path().orElseThrow());
+                        }
+                    } else {
+                        message.add("Over " + unmerged.size() + " files contains merge conflicts.");
                     }
                     message.add("");
+
                     message.add("To manually resolve these merge conflicts, please create a personal fork of " +
                                 target.webUrl() + " and execute the following commands:");
                     message.add("");
                     message.add("```bash");
                     message.add("$ git checkout " + toBranch.name());
+                    message.add("$ git pull " + target.webUrl() + " " + toBranch.name());
+                    message.add("$ git checkout --branch merge-" + fromBranch.name() + "-into-" + toBranch.name());
                     message.add("$ git pull " + fromRepo.webUrl() + " " + fromBranch.name());
                     message.add("```");
                     message.add("");
                     message.add("When you have resolved the conflicts resulting from the above commands, run:");
                     message.add("");
                     message.add("```bash");
                     message.add("$ git add paths/to/files/with/conflicts");
-                    message.add("$ git commit -m 'Merge'");
+                    message.add("$ git commit -m 'Merge " + fromDesc + "'");
+                    message.add("```");
+                    message.add("");
+                    message.add("Push the merge commit to your personal fork:");
+                    message.add("");
+                    message.add("```bash");
+                    message.add("$ git push -u origin merge-" + fromBranch.name() + "-into-" + toBranch.name());
                     message.add("```");
                     message.add("");
-                    message.add("Push the resolved merge conflict to your personal fork and " +
-                                "create a pull request towards this repository.");
+                    message.add("Now processed to create a pull request towards this repository.");
+                    message.add("If you are using the [Skara](https://wiki.openjdk.java.net/display/skara#Skara-Skara)" +
+                                "CLI tooling then you can run the following command to create the pull request:");
+                    message.add("");
+                    message.add("```bash");
+                    message.add("$ git pr create");
+                    message.add("```");
                     message.add("");
                     message.add("This pull request will be closed automatically by a bot once " +
                                 "the merge conflicts have been resolved.");
                     fork.createPullRequest(prTarget,
                                            toBranch.name(),
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
@@ -231,10 +231,14 @@
 
     public List<StatusEntry> status(Hash from, Hash to) throws IOException {
         return Collections.emptyList();
     }
 
+    public List<StatusEntry> status() throws IOException {
+        return Collections.emptyList();
+    }
+
     public boolean contains(Branch b, Hash h) throws IOException {
         return false;
     }
 
     public List<Reference> remoteBranches(String remote) throws IOException {
diff a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
@@ -76,10 +76,11 @@
         return files(h, Arrays.asList(paths));
     }
 
     void dump(FileEntry entry, Path to) throws IOException;
     List<StatusEntry> status(Hash from, Hash to) throws IOException;
+    List<StatusEntry> status() throws IOException;
     Diff diff(Hash base, Hash head) throws IOException;
     Diff diff(Hash base, Hash head, List<Path> files) throws IOException;
     Diff diff(Hash head) throws IOException;
     Diff diff(Hash head, List<Path> files) throws IOException;
     List<String> config(String key) throws IOException;
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Status.java b/vcs/src/main/java/org/openjdk/skara/vcs/Status.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Status.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Status.java
@@ -28,11 +28,12 @@
     private enum Operation {
         ADDED,
         DELETED,
         RENAMED,
         COPIED,
-        MODIFIED
+        MODIFIED,
+        UNMERGED
     }
 
     private Operation op;
     private int score;
 
@@ -59,10 +60,14 @@
 
     public boolean isModified() {
         return op == Operation.MODIFIED;
     }
 
+    public boolean isUnmerged() {
+        return op == Operation.UNMERGED;
+    }
+
     public int score() {
         return score;
     }
 
     public static Status from(char c) {
@@ -76,10 +81,14 @@
 
         if (c == 'D') {
             return new Status(Operation.DELETED, -1);
         }
 
+        if (c == 'U') {
+            return new Status(Operation.UNMERGED, -1);
+        }
+
         if (c == 'R') {
             return new Status(Operation.RENAMED, -1);
         }
 
         if (c == 'C') {
@@ -102,10 +111,13 @@
             return new Status(Operation.MODIFIED, -1);
         }
         if (c == 'D') {
             return new Status(Operation.DELETED, -1);
         }
+        if (c == 'U') {
+            return new Status(Operation.UNMERGED, -1);
+        }
 
         var score = 0;
         try {
             score = Integer.parseInt(s.substring(1));
         } catch (NumberFormatException e) {
@@ -133,10 +145,12 @@
                 return "A";
             case DELETED:
                 return "D";
             case MODIFIED:
                 return "M";
+            case UNMERGED:
+                return "U";
             case RENAMED:
                 return "R" + score;
             case COPIED:
                 return "C" + score;
             default:
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -825,20 +825,38 @@
         }
     }
 
     @Override
     public List<StatusEntry> status(Hash from, Hash to) throws IOException {
-        try (var p = capture("git", "diff", "--raw", "--find-renames=99%", "--find-copies=99%", "--find-copies-harder", "--no-abbrev", "--no-color", from.hex(), to.hex())) {
+        var cmd = new ArrayList<String>();
+        cmd.addAll(List.of("git", "diff", "--raw",
+                                          "--find-renames=99%",
+                                          "--find-copies=99%",
+                                          "--find-copies-harder",
+                                          "--no-abbrev",
+                                          "--no-color"));
+        if (from != null) {
+            cmd.add(from.hex());
+        }
+        if (to != null) {
+            cmd.add(to.hex());
+        }
+        try (var p = capture(cmd)) {
             var res = await(p);
             var entries = new ArrayList<StatusEntry>();
             for (var line : res.stdout()) {
                 entries.add(StatusEntry.fromRawLine(line));
             }
             return entries;
         }
     }
 
+    @Override
+    public List<StatusEntry> status() throws IOException {
+        return status(null, null);
+    }
+
     @Override
     public Diff diff(Hash from) throws IOException {
         return diff(from, List.of());
     }
 
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -747,10 +747,16 @@
             }
             return entries;
         }
     }
 
+    @Override
+    public List<StatusEntry> status() throws IOException {
+        // TODO: can use merge.mergestate.read(repo) to implement diff-git-raw-workspace
+        throw new RuntimeException("Not implemented yet");
+    }
+
     @Override
     public void dump(FileEntry entry, Path to) throws IOException {
         var output = to.toAbsolutePath();
         try (var p = capture("hg", "cat", "--output=" + output.toString(),
                                           "--rev=" + entry.commit(),
diff a/vcs/src/main/java/org/openjdk/skara/vcs/tools/PatchHeader.java b/vcs/src/main/java/org/openjdk/skara/vcs/tools/PatchHeader.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/tools/PatchHeader.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/tools/PatchHeader.java
@@ -99,10 +99,12 @@
             targetPath = sourcePath;
         } else if (status.isAdded()) {
             targetPath = Path.of(parts[1]);
         } else if (status.isDeleted()) {
             sourcePath = Path.of(parts[1]);
+        } else if (status.isUnmerged()) {
+            sourcePath = Path.of(parts[1]);
         } else {
             // either copied or renamed
             sourcePath = Path.of(parts[1]);
             targetPath = Path.of(parts[2]);
         }
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -2074,6 +2074,43 @@
             upstreamBranches = upstream.branches();
             assertEquals(1, upstreamBranches.size());
             assertEquals(List.of(upstream.defaultBranch()), upstreamBranches);
         }
     }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testUnmergedStatus(VCS vcs) throws IOException {
+        assumeTrue(vcs == VCS.GIT);
+        try (var dir = new TemporaryDirectory(false)) {
+            var r = Repository.init(dir.path(), vcs);
+
+            var readme = dir.path().resolve("README");
+            Files.write(readme, List.of("Hello, world!"));
+            r.add(readme);
+            var first = r.commit("Added README", "duke", "duke@openjdk.java.net");
+
+            Files.write(readme, List.of("One more line"), WRITE, APPEND);
+            r.add(readme);
+            var second = r.commit("Modified README", "duke", "duke@openjdk.java.net");
+
+            r.checkout(first, false);
+
+            Files.write(readme, List.of("Another line"), WRITE, APPEND);
+            r.add(readme);
+            var third = r.commit("Modified README again", "duke", "duke@openjdk.java.net");
+
+            assertThrows(IOException.class, () -> { r.merge(second); });
+
+            var status = r.status();
+            for (var s : status) {
+                System.out.println(s.status() + " " + s.source().path().get());
+            }
+            assertEquals(2, status.size());
+            var statusEntry = status.get(0);
+            assertTrue(statusEntry.status().isUnmerged());
+            assertEquals(Path.of("README"), statusEntry.source().path().get());
+            assertEquals(Optional.empty(), statusEntry.source().type());
+            assertEquals("0".repeat(40), statusEntry.source().hash().hex());
+        }
+    }
 }
