diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -25,10 +25,11 @@
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.Issue;
+import org.openjdk.skara.email.EmailAddress;
 
 import java.io.*;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.*;
@@ -273,10 +274,27 @@
         } else {
             return Optional.empty();
         }
     }
 
+    private String formatContributor(EmailAddress contributor) {
+        var name = contributor.fullName().orElseThrow();
+        return name + " `<" + contributor.address() + ">`";
+    }
+
+    private Optional<String> getContributorsList(List<Comment> comments) {
+        var contributors = Contributors.contributors(pr.repository().forge().currentUser(), comments)
+                                       .stream()
+                                       .map(c -> " * " + formatContributor(c))
+                                       .collect(Collectors.joining("\n"));
+        if (contributors.length() > 0) {
+            return Optional.of(contributors);
+        } else {
+            return Optional.empty();
+        }
+    }
+
     private String getStatusMessage(List<Comment> comments, List<Review> reviews, PullRequestCheckIssueVisitor visitor) {
         var progressBody = new StringBuilder();
         progressBody.append("## Progress\n");
         progressBody.append(getChecksList(visitor));
 
@@ -312,10 +330,15 @@
         getReviewersList(reviews).ifPresent(reviewers -> {
             progressBody.append("\n\n## Approvers\n");
             progressBody.append(reviewers);
         });
 
+        getContributorsList(comments).ifPresent(contributors -> {
+            progressBody.append("\n\n## Contributors\n");
+            progressBody.append(contributors);
+        });
+
         return progressBody.toString();
     }
 
     private String updateStatusMessage(String message) {
         var description = pr.body();
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
@@ -116,10 +116,11 @@
                     continue;
                 }
 
                 ret.add(new CheckWorkItem(this, pr, e -> updateCache.invalidate(pr)));
                 ret.add(new CommandWorkItem(this, pr, e -> updateCache.invalidate(pr)));
+                ret.add(new CheckWorkItem(this, pr, e -> updateCache.invalidate(pr)));
                 ret.add(new LabelerWorkItem(this, pr, e -> updateCache.invalidate(pr)));
             }
         }
 
         return ret;
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
@@ -27,10 +27,11 @@
 import org.openjdk.skara.vcs.Repository;
 
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
+import java.util.ArrayList;
 
 import static org.junit.jupiter.api.Assertions.*;
 import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertLastCommentContains;
 
 class ContributorTests {
@@ -294,6 +295,65 @@
             pr.addComment("/contributor remove Foo Bar <foo.bar@host.com>");
             TestBotRunner.runPeriodicItems(prBot);
             assertLastCommentContains(pr, "successfully removed.");
         }
     }
+
+    @Test
+    void prBodyUpdates(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var integrator = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addReviewer(integrator.forge().currentUser().id())
+                                           .addCommitter(author.forge().currentUser().id());
+            var prBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();
+
+            // Populate the projects repository
+            var localRepoFolder = tempFolder.path().resolve("localrepo");
+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));
+            localRepo.push(masterHash, author.url(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.url(), "edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
+
+            // Add a contributor
+            pr.addComment("/contributor add Foo Bar <foo.bar@host.com>");
+            TestBotRunner.runPeriodicItems(prBot);
+            assertLastCommentContains(pr, "successfully added.");
+
+            // Verify that body is updated
+            var body = pr.body().split("\n");
+            var contributorsHeaderIndex = -1;
+            for (var i = 0; i < body.length; i++) {
+                var line = body[i];
+                if (line.equals("## Contributors")) {
+                    contributorsHeaderIndex = i;
+                    break;
+                }
+            }
+            assertNotEquals(contributorsHeaderIndex, -1);
+            var contributors = new ArrayList<String>();
+            for (var i = contributorsHeaderIndex + 1; i < body.length && body[i].startsWith(" * "); i++) {
+                contributors.add(body[i].substring(3));
+            }
+            assertEquals(1, contributors.size());
+            assertEquals("Foo Bar `<foo.bar@host.com>`", contributors.get(0));
+
+            // Remove contributor
+            pr.addComment("/contributor remove Foo Bar <foo.bar@host.com>");
+            TestBotRunner.runPeriodicItems(prBot);
+            assertLastCommentContains(pr, "successfully removed.");
+
+            // Verify that body does not contain "Contributors" section
+            for (var line : pr.body().split("\n")) {
+                assertNotEquals("## Contributors", line);
+            }
+        }
+    }
 }
