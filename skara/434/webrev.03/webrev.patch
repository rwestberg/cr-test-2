diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -300,26 +300,28 @@
         }
     }
 
     private String getStatusMessage(List<Comment> comments, List<Review> reviews, PullRequestCheckIssueVisitor visitor) {
         var progressBody = new StringBuilder();
-        progressBody.append("## Progress\n");
+        progressBody.append("---------");
+        progressBody.append("### Progress\n");
         progressBody.append(getChecksList(visitor));
 
         var issue = Issue.fromString(pr.title());
         var issueProject = workItem.bot.issueProject();
         if (issueProject != null && issue.isPresent()) {
             var allIssues = new ArrayList<Issue>();
             allIssues.add(issue.get());
             allIssues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), comments));
-            progressBody.append("\n\n## Issue");
+            progressBody.append("\n\n### Issue");
             if (allIssues.size() > 1) {
                 progressBody.append("s");
             }
             progressBody.append("\n");
             for (var currentIssue : allIssues) {
                 var iss = issueProject.issue(currentIssue.id());
+                progressBody.append(" * ");
                 if (iss.isPresent()) {
                     progressBody.append("[");
                     progressBody.append(iss.get().id());
                     progressBody.append("](");
                     progressBody.append(iss.get().webUrl());
@@ -333,22 +335,32 @@
                 }
             }
         }
 
         getReviewersList(reviews).ifPresent(reviewers -> {
-            progressBody.append("\n\n## Reviewers\n");
+            progressBody.append("\n\n### Reviewers\n");
             progressBody.append(reviewers);
         });
 
         getContributorsList(comments).ifPresent(contributors -> {
-            progressBody.append("\n\n## Contributors\n");
+            progressBody.append("\n\n### Contributors\n");
             progressBody.append(contributors);
         });
 
+        progressBody.append("\n\n### Download\n");
+        progressBody.append(checkoutCommands());
+
         return progressBody.toString();
     }
 
+    private String checkoutCommands() {
+        var repoUrl = pr.repository().webUrl();
+        return
+           "`$ git fetch " + repoUrl + " " + pr.fetchRef() + ":pull/" + pr.id() + "`\n" +
+           "`$ git checkout pull/" + pr.id() + "`\n";
+    }
+
     private String updateStatusMessage(String message) {
         var description = pr.body();
         var markerIndex = description.lastIndexOf(progressMarker);
 
         if (markerIndex >= 0 && description.substring(markerIndex).equals(message)) {
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
@@ -330,11 +330,11 @@
             // Verify that body is updated
             var body = pr.body().split("\n");
             var contributorsHeaderIndex = -1;
             for (var i = 0; i < body.length; i++) {
                 var line = body[i];
-                if (line.equals("## Contributors")) {
+                if (line.equals("### Contributors")) {
                     contributorsHeaderIndex = i;
                     break;
                 }
             }
             assertNotEquals(contributorsHeaderIndex, -1);
@@ -350,10 +350,10 @@
             TestBotRunner.runPeriodicItems(prBot);
             assertLastCommentContains(pr, "successfully removed.");
 
             // Verify that body does not contain "Contributors" section
             for (var line : pr.body().split("\n")) {
-                assertNotEquals("## Contributors", line);
+                assertNotEquals("### Contributors", line);
             }
         }
     }
 }
