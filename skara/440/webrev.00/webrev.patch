diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -200,11 +200,11 @@
     private String subjectPrefix() {
         var ret = new StringBuilder();
         var branchName = pr.targetRef();
         var repoName = Path.of(pr.repository().name()).getFileName().toString();
         var useBranchInSubject = bot.branchInSubject().matcher(branchName).matches();
-        var useRepoInSubject = bot.repoInSubject().matcher(repoName).matches();
+        var useRepoInSubject = bot.repoInSubject();
 
         if (useBranchInSubject || useRepoInSubject) {
             ret.append("[");
             if (useRepoInSubject) {
                 ret.append(repoName);
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
@@ -51,11 +51,11 @@
     private final Map<String, String> headers;
     private final URI issueTracker;
     private final PullRequestUpdateCache updateCache;
     private final Duration sendInterval;
     private final Duration cooldown;
-    private final Pattern repoInSubject;
+    private final boolean repoInSubject;
     private final Pattern branchInSubject;
     private final Path seedStorage;
     private final CooldownQuarantine cooldownQuarantine;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.mlbridge");
@@ -67,11 +67,11 @@
                          HostedRepository censusRepo, String censusRef, EmailAddress list,
                          Set<String> ignoredUsers, Set<Pattern> ignoredComments, URI listArchive, String smtpServer,
                          HostedRepository webrevStorageRepository, String webrevStorageRef,
                          Path webrevStorageBase, URI webrevStorageBaseUri, Set<String> readyLabels,
                          Map<String, Pattern> readyComments, URI issueTracker, Map<String, String> headers,
-                         Duration sendInterval, Duration cooldown, Pattern repoInSubject, Pattern branchInSubject,
+                         Duration sendInterval, Duration cooldown, boolean repoInSubject, Pattern branchInSubject,
                          Path seedStorage) {
         emailAddress = from;
         codeRepo = repo;
         archiveRepo = archive;
         this.archiveRef = archiveRef;
@@ -172,11 +172,11 @@
 
     URI issueTracker() {
         return issueTracker;
     }
 
-    Pattern repoInSubject() {
+    boolean repoInSubject() {
         return repoInSubject;
     }
 
     Pattern branchInSubject() {
         return branchInSubject;
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotBuilder.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotBuilder.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotBuilder.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotBuilder.java
@@ -51,12 +51,12 @@
     private Map<String, Pattern> readyComments = Map.of();
     private URI issueTracker;
     private Map<String, String> headers = Map.of();
     private Duration sendInterval = Duration.ZERO;
     private Duration cooldown = Duration.ZERO;
-    private Pattern repoInSubject = Pattern.compile("a^"); // Does not match anything
-    private Pattern branchInSubject = Pattern.compile("a^");
+    private boolean repoInSubject = false;
+    private Pattern branchInSubject = Pattern.compile("a^"); // Does not match anything
     private Path seedStorage = null;
 
     MailingListBridgeBotBuilder() {
     }
 
@@ -163,11 +163,11 @@
     public MailingListBridgeBotBuilder cooldown(Duration cooldown) {
         this.cooldown = cooldown;
         return this;
     }
 
-    public MailingListBridgeBotBuilder repoInSubject(Pattern repoInSubject) {
+    public MailingListBridgeBotBuilder repoInSubject(boolean repoInSubject) {
         this.repoInSubject = repoInSubject;
         return this;
     }
 
     public MailingListBridgeBotBuilder branchInSubject(Pattern branchInSubject) {
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
@@ -112,11 +112,11 @@
                                                  .sendInterval(interval)
                                                  .cooldown(cooldown)
                                                  .seedStorage(configuration.storageFolder().resolve("seeds"));
 
             if (repoConfig.contains("reponame")) {
-                botBuilder.repoInSubject(Pattern.compile(repoConfig.get("reponame").asString()));
+                botBuilder.repoInSubject(repoConfig.get("reponame").asBoolean());
             }
             if (repoConfig.contains("branchname")) {
                 botBuilder.branchInSubject(Pattern.compile(repoConfig.get("branchname").asString()));
             }
             ret.add(botBuilder.build());
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -1765,11 +1765,11 @@
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
                                             .webrevStorageBaseUri(webrevServer.uri())
                                             .issueTracker(URIBuilder.base("http://issues.test/browse/").build())
-                                            .repoInSubject(Pattern.compile(".*"))
+                                            .repoInSubject(true)
                                             .build();
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -1822,11 +1822,11 @@
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
                                             .webrevStorageBaseUri(webrevServer.uri())
                                             .issueTracker(URIBuilder.base("http://issues.test/browse/").build())
-                                            .repoInSubject(Pattern.compile(".*"))
+                                            .repoInSubject(true)
                                             .branchInSubject(Pattern.compile(".*"))
                                             .build();
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
@@ -60,10 +60,14 @@
         this.setFixVersion = setFixVersion;
         this.fixVersions = fixVersions;
         this.prOnly = prOnly;
     }
 
+    static IssueUpdaterBuilder newBuilder() {
+        return new IssueUpdaterBuilder();
+    }
+
     private final static Set<String> primaryTypes = Set.of("Bug", "New Feature", "Enhancement", "Task", "Sub-task");
 
     private boolean isPrimaryIssue(Issue issue) {
         var properties = issue.properties();
         if (!properties.containsKey("issuetype")) {
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdaterBuilder.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdaterBuilder.java
--- /dev/null
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdaterBuilder.java
@@ -0,0 +1,89 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.notify;
+
+import org.openjdk.skara.issuetracker.IssueProject;
+
+import java.net.URI;
+import java.util.Map;
+
+public class IssueUpdaterBuilder {
+    private IssueProject issueProject;
+    private boolean reviewLink = true;
+    private URI reviewIcon = null;
+    private boolean commitLink = true;
+    private URI commitIcon = null;
+    private boolean setFixVersion = false;
+    private Map<String, String> fixVersions = null;
+    private boolean prOnly = false;
+
+    public IssueUpdaterBuilder issueProject(IssueProject issueProject) {
+        this.issueProject = issueProject;
+        return this;
+    }
+
+    public IssueUpdaterBuilder reviewLink(boolean reviewLink) {
+        this.reviewLink = reviewLink;
+        return this;
+    }
+
+    public IssueUpdaterBuilder reviewIcon(URI reviewIcon) {
+        this.reviewIcon = reviewIcon;
+        return this;
+    }
+
+    public IssueUpdaterBuilder commitLink(boolean commitLink) {
+        this.commitLink = commitLink;
+        return this;
+    }
+
+    public IssueUpdaterBuilder commitIcon(URI commitIcon) {
+        this.commitIcon = commitIcon;
+        return this;
+    }
+
+    public IssueUpdaterBuilder setFixVersion(boolean setFixVersion) {
+        if (setFixVersion && prOnly) {
+            throw new IllegalArgumentException("Cannot combine setFixVersion with prOnly");
+        }
+        this.setFixVersion = setFixVersion;
+        return this;
+    }
+
+    public IssueUpdaterBuilder fixVersions(Map<String, String> fixVersions) {
+        this.fixVersions = fixVersions;
+        return this;
+    }
+
+    public IssueUpdaterBuilder prOnly(boolean prOnly) {
+        if (prOnly && setFixVersion) {
+            throw new IllegalArgumentException("Cannot combine prOnly with setFixVersion");
+        }
+        this.prOnly = prOnly;
+        return this;
+    }
+
+    public IssueUpdater build() {
+        return new IssueUpdater(issueProject, reviewLink, reviewIcon, commitLink, commitIcon, setFixVersion, fixVersions, prOnly);
+    }
+}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -70,10 +70,14 @@
         this.mode = mode;
         this.headers = headers;
         this.allowedAuthorDomains = allowedAuthorDomains;
     }
 
+    static MailingListUpdaterBuilder newBuilder() {
+        return new MailingListUpdaterBuilder();
+    }
+
     private String tagAnnotationToText(HostedRepository repository, Tag.Annotated annotation) {
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
         printer.println("Tagged by: " + annotation.author().name() + " <" + annotation.author().email() + ">");
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdaterBuilder.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdaterBuilder.java
--- /dev/null
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdaterBuilder.java
@@ -0,0 +1,103 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.notify;
+
+import org.openjdk.skara.email.EmailAddress;
+import org.openjdk.skara.mailinglist.MailingList;
+
+import java.util.Map;
+import java.util.regex.Pattern;
+
+public class MailingListUpdaterBuilder {
+    private MailingList list;
+    private EmailAddress recipient;
+    private EmailAddress sender;
+    private EmailAddress author = null;
+    private boolean includeBranch = false;
+    private boolean reportNewTags = true;
+    private boolean reportNewBranches = true;
+    private boolean reportNewBuilds = true;
+    private MailingListUpdater.Mode mode = MailingListUpdater.Mode.ALL;
+    private Map<String, String> headers = Map.of();
+    private Pattern allowedAuthorDomains = Pattern.compile(".*");
+
+    public MailingListUpdaterBuilder list(MailingList list) {
+        this.list = list;
+        return this;
+    }
+
+    public MailingListUpdaterBuilder recipient(EmailAddress recipient) {
+        this.recipient = recipient;
+        return this;
+    }
+
+    public MailingListUpdaterBuilder sender(EmailAddress sender) {
+        this.sender = sender;
+        return this;
+    }
+
+    public MailingListUpdaterBuilder author(EmailAddress author) {
+        this.author = author;
+        return this;
+    }
+
+    public MailingListUpdaterBuilder includeBranch(boolean includeBranch) {
+        this.includeBranch = includeBranch;
+        return this;
+    }
+
+    public MailingListUpdaterBuilder reportNewTags(boolean reportNewTags) {
+        this.reportNewTags = reportNewTags;
+        return this;
+    }
+
+    public MailingListUpdaterBuilder reportNewBranches(boolean reportNewBranches) {
+        this.reportNewBranches = reportNewBranches;
+        return this;
+    }
+
+    public MailingListUpdaterBuilder reportNewBuilds(boolean reportNewBuilds) {
+        this.reportNewBuilds = reportNewBuilds;
+        return this;
+    }
+
+    public MailingListUpdaterBuilder mode(MailingListUpdater.Mode mode) {
+        this.mode = mode;
+        return this;
+    }
+
+    public MailingListUpdaterBuilder headers(Map<String, String> headers) {
+        this.headers = headers;
+        return this;
+    }
+
+    public MailingListUpdaterBuilder allowedAuthorDomains(Pattern allowedAuthorDomains) {
+        this.allowedAuthorDomains = allowedAuthorDomains;
+        return this;
+    }
+
+    public MailingListUpdater build() {
+        return new MailingListUpdater(list, recipient, sender, author, includeBranch, reportNewTags, reportNewBranches,
+                                      reportNewBuilds, mode, headers, allowedAuthorDomains);
+    }
+}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
@@ -61,10 +61,14 @@
         this.updateCache = new PullRequestUpdateCache();
         this.readyLabels = readyLabels;
         this.readyComments = readyComments;
     }
 
+    static NotifyBotBuilder newBuilder() {
+        return new NotifyBotBuilder();
+    }
+
     private boolean isReady(PullRequest pr) {
         var labels = new HashSet<>(pr.labels());
         for (var readyLabel : readyLabels) {
             if (!labels.contains(readyLabel)) {
                 log.fine("PR is not yet ready - missing label '" + readyLabel + "'");
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java
--- /dev/null
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java
@@ -0,0 +1,98 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.notify;
+
+import org.openjdk.skara.forge.HostedRepository;
+import org.openjdk.skara.storage.StorageBuilder;
+import org.openjdk.skara.vcs.Tag;
+
+import java.nio.file.Path;
+import java.util.*;
+import java.util.regex.Pattern;
+
+public class NotifyBotBuilder {
+    private HostedRepository repository;
+    private Path storagePath;
+    private Pattern branches;
+    private StorageBuilder<Tag> tagStorageBuilder;
+    private StorageBuilder<ResolvedBranch> branchStorageBuilder;
+    private StorageBuilder<PullRequestIssues> prIssuesStorageBuilder;
+    private List<RepositoryUpdateConsumer> updaters = List.of();
+    private List<PullRequestUpdateConsumer> prUpdaters = List.of();
+    private Set<String> readyLabels = Set.of();
+    private Map<String, Pattern> readyComments = Map.of();
+
+    public NotifyBotBuilder repository(HostedRepository repository) {
+        this.repository = repository;
+        return this;
+    }
+
+    public NotifyBotBuilder storagePath(Path storagePath) {
+        this.storagePath = storagePath;
+        return this;
+    }
+
+    public NotifyBotBuilder branches(Pattern branches) {
+        this.branches = branches;
+        return this;
+    }
+
+    public NotifyBotBuilder tagStorageBuilder(StorageBuilder<Tag> tagStorageBuilder) {
+        this.tagStorageBuilder = tagStorageBuilder;
+        return this;
+    }
+
+    public NotifyBotBuilder branchStorageBuilder(StorageBuilder<ResolvedBranch> branchStorageBuilder) {
+        this.branchStorageBuilder = branchStorageBuilder;
+        return this;
+    }
+
+    public NotifyBotBuilder prIssuesStorageBuilder(StorageBuilder<PullRequestIssues> prIssuesStorageBuilder) {
+        this.prIssuesStorageBuilder = prIssuesStorageBuilder;
+        return this;
+    }
+
+    public NotifyBotBuilder updaters(List<RepositoryUpdateConsumer> updaters) {
+        this.updaters = updaters;
+        return this;
+    }
+
+    public NotifyBotBuilder prUpdaters(List<PullRequestUpdateConsumer> prUpdaters) {
+        this.prUpdaters = prUpdaters;
+        return this;
+    }
+
+    public NotifyBotBuilder readyLabels(Set<String> readyLabels) {
+        this.readyLabels = readyLabels;
+        return this;
+    }
+
+    public NotifyBotBuilder readyComments(Map<String, Pattern> readyComments) {
+        this.readyComments = readyComments;
+        return this;
+    }
+
+    public NotifyBot build() {
+        return new NotifyBot(repository, storagePath, branches, tagStorageBuilder, branchStorageBuilder, prIssuesStorageBuilder, updaters, prUpdaters, readyLabels, readyComments);
+    }
+}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
@@ -102,81 +102,77 @@
 
                 for (var mailinglist : repo.value().get("mailinglists").asArray()) {
                     var recipient = mailinglist.get("recipient").asString();
                     var recipientAddress = EmailAddress.parse(recipient);
 
-                    var mode = MailingListUpdater.Mode.ALL;
+                    var author = mailinglist.contains("author") ? EmailAddress.parse(mailinglist.get("author").asString()) : null;
+                    var allowedDomains = author == null ? Pattern.compile(mailinglist.get("domains").asString()) : null;
+
+                    var mailingListUpdaterBuilder = MailingListUpdater.newBuilder()
+                                                                      .list(listServer.getList(recipient))
+                                                                      .recipient(recipientAddress)
+                                                                      .sender(sender)
+                                                                      .author(author)
+                                                                      .allowedAuthorDomains(allowedDomains);
+
                     if (mailinglist.contains("mode")) {
+                        var mode = MailingListUpdater.Mode.ALL;
                         switch (mailinglist.get("mode").asString()) {
                             case "pr":
                                 mode = MailingListUpdater.Mode.PR;
                                 break;
                             case "pr-only":
                                 mode = MailingListUpdater.Mode.PR_ONLY;
                                 break;
                             default:
                                 throw new RuntimeException("Unknown mode");
                         }
+                        mailingListUpdaterBuilder.mode(mode);
+                    }
+                    if (mailinglist.contains("headers")) {
+                        mailingListUpdaterBuilder.headers(mailinglist.get("headers").fields().stream()
+                                                                     .collect(Collectors.toMap(JSONObject.Field::name,
+                                                                                               field -> field.value().asString())));
                     }
-
-                    Map<String, String> headers = mailinglist.contains("headers") ?
-                            mailinglist.get("headers").fields().stream()
-                                       .collect(Collectors.toMap(JSONObject.Field::name, field -> field.value().asString())) :
-                            Map.of();
-                    var author = mailinglist.contains("author") ? EmailAddress.parse(mailinglist.get("author").asString()) : null;
-                    var allowedDomains = author == null ? Pattern.compile(mailinglist.get("domains").asString()) : null;
-
-                    var includeBranchNames = false;
                     if (mailinglist.contains("branchnames")) {
-                        includeBranchNames = mailinglist.get("branchnames").asBoolean();
+                        mailingListUpdaterBuilder.includeBranch(mailinglist.get("branchnames").asBoolean());
                     }
-                    var reportNewTags = true;
                     if (mailinglist.contains("tags")) {
-                        reportNewTags = mailinglist.get("tags").asBoolean();
+                        mailingListUpdaterBuilder.reportNewTags(mailinglist.get("tags").asBoolean());
                     }
-                    var reportNewBranches = true;
                     if (mailinglist.contains("branches")) {
-                        reportNewBranches = mailinglist.get("branches").asBoolean();
+                        mailingListUpdaterBuilder.reportNewBranches(mailinglist.get("branches").asBoolean());
                     }
-                    var reportNewBuilds = true;
                     if (mailinglist.contains("builds")) {
-                        reportNewBuilds = mailinglist.get("builds").asBoolean();
+                        mailingListUpdaterBuilder.reportNewBuilds(mailinglist.get("builds").asBoolean());
                     }
-                    updaters.add(new MailingListUpdater(listServer.getList(recipient), recipientAddress, sender, author,
-                                                        includeBranchNames, reportNewTags, reportNewBranches, reportNewBuilds,
-                                                        mode, headers, allowedDomains));
+                    updaters.add(mailingListUpdaterBuilder.build());
                 }
             }
             if (repo.value().contains("issues")) {
                 var issuesConf = repo.value().get("issues");
                 var issueProject = configuration.issueProject(issuesConf.get("project").asString());
-                var reviewLink = true;
+                var issueUpdaterBuilder = IssueUpdater.newBuilder()
+                                                      .issueProject(issueProject);
+
                 if (issuesConf.contains("reviewlink")) {
-                    reviewLink = issuesConf.get("reviewlink").asBoolean();
+                    issueUpdaterBuilder.reviewLink(issuesConf.get("reviewlink").asBoolean());
                 }
-                var commitLink = true;
                 if (issuesConf.contains("commitlink")) {
-                    commitLink = issuesConf.get("commitlink").asBoolean();
+                    issueUpdaterBuilder.commitLink(issuesConf.get("commitlink").asBoolean());
                 }
-                var setFixVersion = false;
-                Map<String, String> fixVersions = null;
                 if (issuesConf.contains("fixversions")) {
-                    setFixVersion = true;
-                    fixVersions = issuesConf.get("fixversions").fields().stream()
-                                            .collect(Collectors.toMap(JSONObject.Field::name, f -> f.value().asString()));
+                    issueUpdaterBuilder.setFixVersion(true);
+                    issueUpdaterBuilder.fixVersions(issuesConf.get("fixversions").fields().stream()
+                                                              .collect(Collectors.toMap(JSONObject.Field::name,
+                                                                                        f -> f.value().asString())));
                 }
-                var prOnly = false;
                 if (issuesConf.contains("pronly")) {
-                    prOnly = issuesConf.get("pronly").asBoolean();
-                    if (setFixVersion) {
-                        throw new RuntimeException("cannot combine pronly with fixversions");
-                    }
+                    issueUpdaterBuilder.prOnly(issuesConf.get("pronly").asBoolean());
                 }
-                var updater = new IssueUpdater(issueProject, reviewLink, reviewIcon, commitLink, commitIcon,
-                                               setFixVersion, fixVersions, prOnly);
-                updaters.add(updater);
-                prUpdaters.add(updater);
+                updaters.add(issueUpdaterBuilder.build());
+                prUpdaters.add(issueUpdaterBuilder.build());
             }
 
             if (updaters.isEmpty()) {
                 log.warning("No consumers configured for notify bot repository: " + repoName);
                 continue;
@@ -188,12 +184,22 @@
                     .remoteRepository(databaseRepo, databaseRef, databaseName, databaseEmail, "Added tag for " + repoName);
             var branchStorageBuilder = new StorageBuilder<ResolvedBranch>(baseName + ".branches.txt")
                     .remoteRepository(databaseRepo, databaseRef, databaseName, databaseEmail, "Added branch hash for " + repoName);
             var issueStorageBuilder = new StorageBuilder<PullRequestIssues>(baseName + ".prissues.txt")
                     .remoteRepository(databaseRepo, databaseRef, databaseName, databaseEmail, "Added pull request issue info for " + repoName);
-            var bot = new NotifyBot(configuration.repository(repoName), configuration.storageFolder(), branchPattern,
-                                    tagStorageBuilder, branchStorageBuilder, issueStorageBuilder, updaters, prUpdaters, readyLabels, readyComments);
+            var bot = NotifyBot.newBuilder()
+                               .repository(configuration.repository(repoName))
+                               .storagePath(configuration.storageFolder())
+                               .branches(branchPattern)
+                               .tagStorageBuilder(tagStorageBuilder)
+                               .branchStorageBuilder(branchStorageBuilder)
+                               .prIssuesStorageBuilder(issueStorageBuilder)
+                               .updaters(updaters)
+                               .prUpdaters(prUpdaters)
+                               .readyLabels(readyLabels)
+                               .readyComments(readyComments)
+                               .build();
             ret.add(bot);
         }
 
         return ret;
     }
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -93,12 +93,19 @@
             var jsonFolder = tempFolder.path().resolve("json");
             Files.createDirectory(jsonFolder);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var updater = new JsonUpdater(jsonFolder, "12", "team");
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             TestBotRunner.runPeriodicItems(notifyBot);
             assertEquals(List.of(), findJsonFiles(jsonFolder, ""));
 
             var editHash = CheckableRepository.appendAndCommit(localRepo, "One more line", "12345678: Fixes");
@@ -134,12 +141,19 @@
             var jsonFolder = tempFolder.path().resolve("json");
             Files.createDirectory(jsonFolder);
             var storageFolder =tempFolder.path().resolve("storage");
 
             var updater = new JsonUpdater(jsonFolder, "12", "team");
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             TestBotRunner.runPeriodicItems(notifyBot);
             assertEquals(List.of(), findJsonFiles(jsonFolder, ""));
 
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
@@ -205,15 +219,29 @@
             var branchStorage = createBranchStorage(repo);
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
-            var updater = new MailingListUpdater(mailmanList, listAddress, sender, null, false, false, false, false,
-                                                 MailingListUpdater.Mode.ALL,
-                                                 Map.of("extra1", "value1", "extra2", "value2"), Pattern.compile("none"));
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var updater = MailingListUpdater.newBuilder()
+                                            .list(mailmanList)
+                                            .recipient(listAddress)
+                                            .sender(sender)
+                                            .reportNewTags(false)
+                                            .reportNewBranches(false)
+                                            .reportNewBuilds(false)
+                                            .headers(Map.of("extra1", "value1", "extra2", "value2"))
+                                            .allowedAuthorDomains(Pattern.compile("none"))
+                                            .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -259,15 +287,27 @@
             var branchStorage = createBranchStorage(repo);
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
-            var updater = new MailingListUpdater(mailmanList, listAddress, sender, null,
-                                                 false, false, false, false,
-                                                 MailingListUpdater.Mode.ALL, Map.of(), Pattern.compile(".*"));
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var updater = MailingListUpdater.newBuilder()
+                                            .list(mailmanList)
+                                            .recipient(listAddress)
+                                            .sender(sender)
+                                            .reportNewTags(false)
+                                            .reportNewBranches(false)
+                                            .reportNewBuilds(false)
+                                            .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -315,15 +355,27 @@
             var branchStorage = createBranchStorage(repo);
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
-            var updater = new MailingListUpdater(mailmanList, listAddress, sender, null,
-                                                 false, false, false, false,
-                                                 MailingListUpdater.Mode.ALL, Map.of(), Pattern.compile(".*"));
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var updater = MailingListUpdater.newBuilder()
+                                            .list(mailmanList)
+                                            .recipient(listAddress)
+                                            .sender(sender)
+                                            .reportNewTags(false)
+                                            .reportNewBranches(false)
+                                            .reportNewBuilds(false)
+                                            .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -368,15 +420,29 @@
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var author = EmailAddress.from("author", "author@duke.duke");
-            var updater = new MailingListUpdater(mailmanList, listAddress, sender, author,
-                                                 true, false, false, false,
-                                                 MailingListUpdater.Mode.ALL, Map.of(), Pattern.compile(".*"));
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master|another"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var updater = MailingListUpdater.newBuilder()
+                                            .list(mailmanList)
+                                            .recipient(listAddress)
+                                            .sender(sender)
+                                            .author(author)
+                                            .includeBranch(true)
+                                            .reportNewTags(false)
+                                            .reportNewBranches(false)
+                                            .reportNewBuilds(false)
+                                            .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master|another"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -444,16 +510,30 @@
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var author = EmailAddress.from("author", "author@duke.duke");
-            var updater = new MailingListUpdater(mailmanList, listAddress, sender, author,
-                                                 false, false, false, false,
-                                                 MailingListUpdater.Mode.PR_ONLY, Map.of("extra1", "value1"),
-                                                 Pattern.compile(".*"));
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var updater = MailingListUpdater.newBuilder()
+                                            .list(mailmanList)
+                                            .recipient(listAddress)
+                                            .sender(sender)
+                                            .author(author)
+                                            .reportNewTags(false)
+                                            .reportNewBranches(false)
+                                            .reportNewBuilds(false)
+                                            .mode(MailingListUpdater.Mode.PR_ONLY)
+                                            .headers(Map.of("extra1", "value1"))
+                                            .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -525,15 +605,28 @@
             var branchStorage = createBranchStorage(repo);
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
-            var updater = new MailingListUpdater(mailmanList, listAddress, sender, null,
-                                                 false, false, false, false,
-                                                 MailingListUpdater.Mode.PR, Map.of(), Pattern.compile(".*"));
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var updater = MailingListUpdater.newBuilder()
+                                            .list(mailmanList)
+                                            .recipient(listAddress)
+                                            .sender(sender)
+                                            .reportNewTags(false)
+                                            .reportNewBranches(false)
+                                            .reportNewBuilds(false)
+                                            .mode(MailingListUpdater.Mode.PR)
+                                            .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -615,15 +708,29 @@
             var branchStorage = createBranchStorage(repo);
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
-            var updater = new MailingListUpdater(mailmanList, listAddress, sender, null,
-                                                 false, false, false, false,
-                                                 MailingListUpdater.Mode.PR, Map.of(), Pattern.compile(".*"));
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master|other"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var updater = MailingListUpdater.newBuilder()
+                                            .list(mailmanList)
+                                            .recipient(listAddress)
+                                            .sender(sender)
+                                            .author(null)
+                                            .reportNewTags(false)
+                                            .reportNewBranches(false)
+                                            .reportNewBuilds(false)
+                                            .mode(MailingListUpdater.Mode.PR)
+                                            .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master|other"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -705,20 +812,35 @@
             var branchStorage = createBranchStorage(repo);
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
-            var updater = new MailingListUpdater(mailmanList, listAddress, sender, null,
-                                                 false, true, false, true,
-                                                 MailingListUpdater.Mode.ALL,
-                                                 Map.of("extra1", "value1", "extra2", "value2"),
-                                                 Pattern.compile(".*"));
-            var prOnlyUpdater = new MailingListUpdater(mailmanList, listAddress, sender, null,
-                                                       false, false, false, false,
-                                                       MailingListUpdater.Mode.PR_ONLY, Map.of(), Pattern.compile(".*"));
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater, prOnlyUpdater), List.of(), Set.of(), Map.of());
+            var updater = MailingListUpdater.newBuilder()
+                                            .list(mailmanList)
+                                            .recipient(listAddress)
+                                            .sender(sender)
+                                            .reportNewBranches(false)
+                                            .headers(Map.of("extra1", "value1", "extra2", "value2"))
+                                            .build();
+            var prOnlyUpdater = MailingListUpdater.newBuilder()
+                                                  .list(mailmanList)
+                                                  .recipient(listAddress)
+                                                  .sender(sender)
+                                                  .reportNewTags(false)
+                                                  .reportNewBranches(false)
+                                                  .reportNewBuilds(false)
+                                                  .mode(MailingListUpdater.Mode.PR_ONLY)
+                                                  .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater, prOnlyUpdater))
+                                     .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -808,20 +930,36 @@
             var branchStorage = createBranchStorage(repo);
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
-            var updater = new MailingListUpdater(mailmanList, listAddress, sender, null,
-                                                 false, true, false, false,
-                                                 MailingListUpdater.Mode.ALL,
-                                                 Map.of("extra1", "value1", "extra2", "value2"),
-                                                 Pattern.compile(".*"));
-            var prOnlyUpdater = new MailingListUpdater(mailmanList, listAddress, sender, null,
-                                                       false, false, false, false,
-                                                       MailingListUpdater.Mode.PR_ONLY, Map.of(), Pattern.compile(".*"));
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater, prOnlyUpdater), List.of(), Set.of(), Map.of());
+            var updater = MailingListUpdater.newBuilder()
+                                            .list(mailmanList)
+                                            .recipient(listAddress)
+                                            .sender(sender)
+                                            .reportNewBranches(false)
+                                            .reportNewBuilds(false)
+                                            .headers(Map.of("extra1", "value1", "extra2", "value2"))
+                                            .build();
+            var prOnlyUpdater = MailingListUpdater.newBuilder()
+                                                  .list(mailmanList)
+                                                  .recipient(listAddress)
+                                                  .sender(sender)
+                                                  .reportNewTags(false)
+                                                  .reportNewBranches(false)
+                                                  .reportNewBuilds(false)
+                                                  .mode(MailingListUpdater.Mode.PR_ONLY)
+                                                  .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater, prOnlyUpdater))
+                                     .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -886,17 +1024,27 @@
             var branchStorage = createBranchStorage(repo);
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
-            var updater = new MailingListUpdater(mailmanList, listAddress, sender, null,
-                                                 false, false, true, false,
-                                                 MailingListUpdater.Mode.ALL,
-                                                 Map.of("extra1", "value1", "extra2", "value2"),
-                                                 Pattern.compile(".*"));
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master|newbranch."), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var updater = MailingListUpdater.newBuilder()
+                                            .list(mailmanList)
+                                            .recipient(listAddress)
+                                            .sender(sender)
+                                            .reportNewTags(false)
+                                            .reportNewBuilds(false)
+                                            .headers(Map.of("extra1", "value1", "extra2", "value2"))
+                                            .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master|newbranch."))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -956,16 +1104,29 @@
             var branchStorage = createBranchStorage(repo);
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
-            var updater = new MailingListUpdater(mailmanList, listAddress, sender, null,
-                                                 false, false, false, false,
-                                                 MailingListUpdater.Mode.ALL,
-                                                 Map.of("extra1", "value1", "extra2", "value2"), Pattern.compile("none"));
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var updater = MailingListUpdater.newBuilder()
+                                            .list(mailmanList)
+                                            .recipient(listAddress)
+                                            .sender(sender)
+                                            .reportNewTags(false)
+                                            .reportNewBranches(false)
+                                            .reportNewBuilds(false)
+                                            .headers(Map.of("extra1", "value1", "extra2", "value2"))
+                                            .allowedAuthorDomains(Pattern.compile("none"))
+                                            .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -1006,13 +1167,25 @@
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var commitIcon = URI.create("http://www.example.com/commit.png");
-            var updater = new IssueUpdater(issueProject, false, null, true, commitIcon, true, null, false);
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var updater = IssueUpdater.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewLink(false)
+                                      .commitIcon(commitIcon)
+                                      .setFixVersion(true)
+                                      .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
@@ -1062,13 +1235,25 @@
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var commitIcon = URI.create("http://www.example.com/commit.png");
-            var updater = new IssueUpdater(issueProject, false, null, true, commitIcon, true, null, false);
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var updater = IssueUpdater.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewLink(false)
+                                      .commitIcon(commitIcon)
+                                      .setFixVersion(true)
+                                      .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
@@ -1103,13 +1288,27 @@
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var commitIcon = URI.create("http://www.example.com/commit.png");
-            var updater = new IssueUpdater(issueProject, false, null, false, commitIcon, true, Map.of("master", "2.0"), false);
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var updater = IssueUpdater.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewLink(false)
+                                      .commitLink(false)
+                                      .commitIcon(commitIcon)
+                                      .setFixVersion(true)
+                                      .fixVersions(Map.of("master", "2.0"))
+                                      .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
@@ -1148,13 +1347,25 @@
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var commitIcon = URI.create("http://www.example.com/commit.png");
-            var updater = new IssueUpdater(issueProject, false, null, true, commitIcon, true, null, false);
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var updater = IssueUpdater.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewLink(false)
+                                      .commitIcon(commitIcon)
+                                      .setFixVersion(true)
+                                      .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Save the state
@@ -1211,13 +1422,26 @@
             var branchStorage = createBranchStorage(repo);
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
-            var updater = new IssueUpdater(issueProject, false, null, false, null, true, Map.of("master", "12u14"), false);
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var updater = IssueUpdater.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewLink(false)
+                                      .commitLink(false)
+                                      .setFixVersion(true)
+                                      .fixVersions(Map.of("master", "12u14"))
+                                      .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
@@ -1247,13 +1471,26 @@
             var branchStorage = createBranchStorage(repo);
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
-            var updater = new IssueUpdater(issueProject, false, null, false, null, true, Map.of("master", "12u14"), false);
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var updater = IssueUpdater.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewLink(false)
+                                      .commitLink(false)
+                                      .setFixVersion(true)
+                                      .fixVersions(Map.of("master", "12u14"))
+                                      .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
@@ -1283,13 +1520,26 @@
             var branchStorage = createBranchStorage(repo);
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
-            var updater = new IssueUpdater(issueProject, false, null, false, null, true, Map.of("master", "12.0.2"), false);
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+            var updater = IssueUpdater.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewLink(false)
+                                      .commitLink(false)
+                                      .setFixVersion(true)
+                                      .fixVersions(Map.of("master", "12.0.2"))
+                                      .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
@@ -1355,14 +1605,26 @@
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var reviewIcon = URI.create("http://www.example.com/review.png");
-            var updater = new IssueUpdater(issueProject, true, reviewIcon, false, null, false, null, false);
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(), List.of(updater), Set.of("rfr"),
-                                          Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")));
+            var updater = IssueUpdater.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewIcon(reviewIcon)
+                                      .commitLink(false)
+                                      .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prUpdaters(List.of(updater))
+                                     .readyLabels(Set.of("rfr"))
+                                     .readyComments(Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")))
+                                     .build();
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and a pull request to fix it
@@ -1444,14 +1706,26 @@
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var reviewIcon = URI.create("http://www.example.com/review.png");
-            var updater = new IssueUpdater(issueProject, false, reviewIcon, false, null, false,null, false);
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(), List.of(updater), Set.of("rfr"),
-                                          Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")));
+            var updater = IssueUpdater.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewLink(false)
+                                      .reviewIcon(reviewIcon)
+                                      .commitLink(false)
+                                      .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prUpdaters(List.of(updater)).readyLabels(Set.of("rfr"))
+                                     .readyComments(Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")))
+                                     .build();
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and a pull request to fix it
             var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
@@ -1491,13 +1765,26 @@
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var reviewIcon = URI.create("http://www.example.com/review.png");
-            var updater = new IssueUpdater(issueProject, true, reviewIcon, false, null, false, null, true);
-            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile(".*"), tagStorage, branchStorage,
-                                          prIssuesStorage, List.of(updater), List.of(updater), Set.of(), Map.of());
+            var updater = IssueUpdater.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewIcon(reviewIcon)
+                                      .commitLink(false)
+                                      .prOnly(true)
+                                      .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile(".*"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .updaters(List.of(updater))
+                                     .prUpdaters(List.of(updater))
+                                     .build();
 
             // Initialize history
             localRepo.push(localRepo.resolve("master").orElseThrow(), repo.url(), "other");
             TestBotRunner.runPeriodicItems(notifyBot);
 
