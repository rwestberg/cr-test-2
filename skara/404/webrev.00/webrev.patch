diff a/email/src/main/java/org/openjdk/skara/email/EmailAddress.java b/email/src/main/java/org/openjdk/skara/email/EmailAddress.java
--- a/email/src/main/java/org/openjdk/skara/email/EmailAddress.java
+++ b/email/src/main/java/org/openjdk/skara/email/EmailAddress.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -53,22 +53,26 @@
         this.fullName = fullName;
         this.localPart = localPart;
         this.domain = domain;
     }
 
-    private static Pattern decoratedAddressPattern = Pattern.compile("(?<name>.*?)(?:\\s*)<(?<local>.*)@(?<domain>.*?)>");
+    private final static Pattern decoratedAddressPattern = Pattern.compile("(?<name>.*?)(?:\\s*)<(?<local>.*)@(?<domain>.*?)>");
     private final static Pattern obfuscatedPattern = Pattern.compile("(?<local>.*) at (?<domain>.*) \\((?<name>.*)\\)");
-    private static Pattern plainAddressPattern = Pattern.compile("(?<name>)(?<local>.*)@(?<domain>.*?)");
+    private final static Pattern plainAddressPattern = Pattern.compile("(?<name>)(?<local>.*)@(?<domain>.*?)");
+    private final static Pattern unqualifiedDecoratedAddressPattern = Pattern.compile("(?<name>.*?)(?:\\s*)<(?<local>.*)(?<domain>)>");
 
     public static EmailAddress parse(String address) {
         var matcher = decoratedAddressPattern.matcher(address);
         if (!matcher.matches()) {
             matcher = obfuscatedPattern.matcher(address);
             if (!matcher.matches()) {
                 matcher = plainAddressPattern.matcher(address);
                 if (!matcher.matches()) {
-                    throw new IllegalArgumentException("Cannot parse email address: " + address);
+                    matcher = unqualifiedDecoratedAddressPattern.matcher(address);
+                    if (!matcher.matches()) {
+                        throw new IllegalArgumentException("Cannot parse email address: " + address);
+                    }
                 }
             }
         }
         return new EmailAddress(matcher.group("name"), matcher.group("local"), matcher.group("domain"));
     }
diff a/email/src/test/java/org/openjdk/skara/email/EmailAddressTests.java b/email/src/test/java/org/openjdk/skara/email/EmailAddressTests.java
--- a/email/src/test/java/org/openjdk/skara/email/EmailAddressTests.java
+++ b/email/src/test/java/org/openjdk/skara/email/EmailAddressTests.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -25,11 +25,10 @@
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.*;
 
 class EmailAddressTests {
-
     @Test
     void simple() {
         var address = EmailAddress.parse("Full Name <full@name.com>");
         assertEquals("Full Name", address.fullName().orElseThrow());
         assertEquals("full@name.com", address.address());
@@ -53,6 +52,14 @@
         assertEquals("no@brackets.com", address.address());
         assertEquals("brackets.com", address.domain());
         assertEquals("no", address.localPart());
     }
 
+    @Test
+    void noDomain() {
+        var address = EmailAddress.parse("<noone.ever.>");
+        assertFalse(address.fullName().isPresent());
+        assertEquals("noone.ever.@", address.address());
+        assertEquals("", address.domain());
+        assertEquals("noone.ever.", address.localPart());
+    }
 }
