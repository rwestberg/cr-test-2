diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -22,15 +22,16 @@
  */
 package org.openjdk.skara.bots.notify;
 
 import org.openjdk.skara.email.*;
 import org.openjdk.skara.forge.HostedRepository;
-import org.openjdk.skara.mailinglist.*;
+import org.openjdk.skara.mailinglist.MailingList;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.OpenJDKTag;
 
 import java.io.*;
+import java.nio.file.Path;
 import java.time.Duration;
 import java.time.format.DateTimeFormatter;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
@@ -46,21 +47,24 @@
     private final boolean reportNewBranches;
     private final boolean reportNewBuilds;
     private final Mode mode;
     private final Map<String, String> headers;
     private final Pattern allowedAuthorDomains;
+    private final boolean repoInSubject;
+    private final Pattern branchInSubject;
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.notify");
 
     enum Mode {
         ALL,
         PR,
         PR_ONLY
     }
 
     MailingListUpdater(MailingList list, EmailAddress recipient, EmailAddress sender, EmailAddress author,
                        boolean includeBranch, boolean reportNewTags, boolean reportNewBranches, boolean reportNewBuilds,
-                       Mode mode, Map<String, String> headers, Pattern allowedAuthorDomains) {
+                       Mode mode, Map<String, String> headers, Pattern allowedAuthorDomains, boolean repoInSubject,
+                       Pattern branchInSubject) {
         this.list = list;
         this.recipient = recipient;
         this.sender = sender;
         this.author = author;
         this.includeBranch = includeBranch;
@@ -68,10 +72,12 @@
         this.reportNewBranches = reportNewBranches;
         this.reportNewBuilds = reportNewBuilds;
         this.mode = mode;
         this.headers = headers;
         this.allowedAuthorDomains = allowedAuthorDomains;
+        this.repoInSubject = repoInSubject;
+        this.branchInSubject = branchInSubject;
     }
 
     static MailingListUpdaterBuilder newBuilder() {
         return new MailingListUpdaterBuilder();
     }
@@ -135,11 +141,33 @@
                 tag +
                 " for changeset " +
                 hash.abbreviate();
     }
 
-    private List<Commit> filterAndSendPrCommits(HostedRepository repository, List<Commit> commits) {
+    private String subjectPrefix(HostedRepository repository, Branch branch) {
+        var ret = new StringBuilder();
+        var branchName = branch.name();
+        var repoName = Path.of(repository.name()).getFileName().toString();
+        var useBranchInSubject = branchInSubject.matcher(branchName).matches();
+
+        if (useBranchInSubject || repoInSubject) {
+            ret.append("[");
+            if (repoInSubject) {
+                ret.append(repoName);
+                if (useBranchInSubject) {
+                    ret.append(":");
+                }
+            }
+            if (useBranchInSubject) {
+                ret.append(branchName);
+            }
+            ret.append("] ");
+        }
+        return ret.toString();
+    }
+
+    private List<Commit> filterAndSendPrCommits(HostedRepository repository, List<Commit> commits, Branch branch) {
         var ret = new ArrayList<Commit>();
 
         var rfrsConvos = list.conversations(Duration.ofDays(365)).stream()
                        .filter(conv -> conv.first().subject().startsWith("RFR: "))
                        .collect(Collectors.toList());
@@ -173,11 +201,12 @@
                 ret.add(commit);
                 continue;
             }
 
             var body = CommitFormatters.toText(repository, commit);
-            var email = Email.reply(rfrConv.first(), "Re: [Integrated] " + rfrConv.first().subject(), body)
+            var email = Email.reply(rfrConv.first(), "Re: " + subjectPrefix(repository, branch) +
+                    "[Integrated] " + rfrConv.first().subject(), body)
                              .sender(sender)
                              .author(commitToAuthor(commit))
                              .recipient(recipient)
                              .headers(headers)
                              .build();
@@ -214,14 +243,14 @@
 
     @Override
     public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) {
         switch (mode) {
             case PR_ONLY:
-                filterAndSendPrCommits(repository, commits);
+                filterAndSendPrCommits(repository, commits, branch);
                 break;
             case PR:
-                commits = filterAndSendPrCommits(repository, commits);
+                commits = filterAndSendPrCommits(repository, commits, branch);
                 // fall-through
             case ALL:
                 sendCombinedCommits(repository, commits, branch);
                 break;
         }
