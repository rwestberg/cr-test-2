diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
@@ -135,10 +135,50 @@
 
     public Optional<Commit> lookup(Tag t) throws IOException {
         return Optional.empty();
     }
 
+    public List<CommitMetadata> commitMetadata(Hash from, Hash to) throws IOException {
+        return List.of();
+    }
+
+    public List<CommitMetadata> commitMetadata(String range, boolean reverse) throws IOException {
+        return List.of();
+    }
+
+    public List<CommitMetadata> commitMetadata(Hash from, Hash to, boolean reverse) throws IOException {
+        return List.of();
+    }
+
+    public List<CommitMetadata> commitMetadata(List<Path> paths) throws IOException {
+        return List.of();
+    }
+
+    public List<CommitMetadata> commitMetadata(List<Path> paths, boolean reverse) throws IOException {
+        return List.of();
+    }
+
+    public List<CommitMetadata> commitMetadata(String range, List<Path> paths) throws IOException {
+        return List.of();
+    }
+
+    public List<CommitMetadata> commitMetadata(Hash from, Hash to, List<Path> paths) throws IOException {
+        return List.of();
+    }
+
+    public List<CommitMetadata> commitMetadata(String range, List<Path> paths, boolean reverse) throws IOException {
+        return List.of();
+    }
+
+    public List<CommitMetadata> commitMetadata(Hash from, Hash to, List<Path> paths, boolean reverse) throws IOException {
+        return List.of();
+    }
+
+    public List<CommitMetadata> commitMetadata(boolean reverse) throws IOException {
+        return List.of();
+    }
+
     public List<CommitMetadata> commitMetadata(String range) throws IOException {
         return List.of();
     }
 
     public List<CommitMetadata> commitMetadata() throws IOException {
diff a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
@@ -47,11 +47,21 @@
     Commits commits(String range, int n, boolean reverse) throws IOException;
     Optional<Commit> lookup(Hash h) throws IOException;
     Optional<Commit> lookup(Branch b) throws IOException;
     Optional<Commit> lookup(Tag t) throws IOException;
     List<CommitMetadata> commitMetadata() throws IOException;
+    List<CommitMetadata> commitMetadata(boolean reverse) throws IOException;
     List<CommitMetadata> commitMetadata(String range) throws IOException;
+    List<CommitMetadata> commitMetadata(Hash from, Hash to) throws IOException;
+    List<CommitMetadata> commitMetadata(String range, boolean reverse) throws IOException;
+    List<CommitMetadata> commitMetadata(Hash from, Hash to, boolean reverse) throws IOException;
+    List<CommitMetadata> commitMetadata(List<Path> paths) throws IOException;
+    List<CommitMetadata> commitMetadata(List<Path> paths, boolean reverse) throws IOException;
+    List<CommitMetadata> commitMetadata(String range, List<Path> paths) throws IOException;
+    List<CommitMetadata> commitMetadata(Hash from, Hash to, List<Path> paths) throws IOException;
+    List<CommitMetadata> commitMetadata(String range, List<Path> paths, boolean reverse) throws IOException;
+    List<CommitMetadata> commitMetadata(Hash from, Hash to, List<Path> paths, boolean reverse) throws IOException;
     Path root() throws IOException;
     boolean exists() throws IOException;
     boolean isHealthy() throws IOException;
     boolean isEmpty() throws IOException;
     boolean isClean() throws IOException;
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -198,12 +198,27 @@
         var hash = resolve(t.name()).orElseThrow(() -> new IOException("Tag " + t.name() + " not found"));
         return lookup(hash);
     }
 
     @Override
-    public List<CommitMetadata> commitMetadata(String range) throws IOException {
-        var p = start("git", "rev-list", "--format=" + GitCommitMetadata.FORMAT, "--no-abbrev", "--reverse", "--no-color", range);
+    public List<CommitMetadata> commitMetadata(String range, List<Path> paths, boolean reverse) throws IOException {
+        var args = new ArrayList<String>();
+        args.addAll(List.of("git", "rev-list",
+                                   "--format=" + GitCommitMetadata.FORMAT,
+                                   "--no-abbrev",
+                                   "--no-color",
+                                   range));
+        if (reverse) {
+            args.add("--reverse");
+        }
+        if (paths != null && !paths.isEmpty()) {
+            args.add("--");
+            for (var path : paths) {
+                args.add(path.toString());
+            }
+        }
+        var p = start(args);
         var reader = new UnixStreamReader(p.getInputStream());
         var result = new ArrayList<CommitMetadata>();
 
         var line = reader.readLine();
         while (line != null) {
@@ -217,10 +232,60 @@
 
         await(p);
         return result;
     }
 
+    @Override
+    public List<CommitMetadata> commitMetadata(Hash from, Hash to, List<Path> paths, boolean reverse) throws IOException {
+        return commitMetadata(from.hex() + ".." + to.hex(), paths, reverse);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata(String range, List<Path> paths) throws IOException {
+        return commitMetadata(range, paths, false);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata(Hash from, Hash to, List<Path> paths) throws IOException {
+        return commitMetadata(from.hex() + ".." + to.hex(), paths, false);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata(boolean reverse) throws IOException {
+        return commitMetadata("--all", List.of(), reverse);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata(String range) throws IOException {
+        return commitMetadata(range, List.of(), false);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata(Hash from, Hash to) throws IOException {
+        return commitMetadata(from.hex() + ".." + to.hex(), List.of(), false);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata(String range, boolean reverse) throws IOException {
+        return commitMetadata(range, List.of(), reverse);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata(Hash from, Hash to, boolean reverse) throws IOException {
+        return commitMetadata(from.hex() + ".." + to.hex(), List.of(), reverse);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata(List<Path> paths) throws IOException {
+        return commitMetadata("--all", paths, false);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata(List<Path> paths, boolean reverse) throws IOException {
+        return commitMetadata("--all", paths, reverse);
+    }
+
     @Override
     public List<CommitMetadata> commitMetadata() throws IOException {
         return commitMetadata("--all");
     }
 
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -255,20 +255,38 @@
         var hash = resolve(t.name()).orElseThrow(() -> new IOException("Tag " + t.name() + " not found"));
         return lookup(hash);
     }
 
     @Override
-    public List<CommitMetadata> commitMetadata(String range) throws IOException {
-        throw new RuntimeException("not implemented yet");
+    public List<CommitMetadata> commitMetadata(String range, List<Path> paths) throws IOException {
+        return commitMetadata(range, paths, false);
     }
 
     @Override
-    public List<CommitMetadata> commitMetadata() throws IOException {
+    public List<CommitMetadata> commitMetadata(Hash from, Hash to, List<Path> paths) throws IOException {
+        return commitMetadata(from.hex() + ":" + to.hex() + "-" + from.hex(), paths, false);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata(Hash from, Hash to, List<Path> paths, boolean reverse) throws IOException {
+        return commitMetadata(from.hex() + ":" + to.hex() + "-" + from.hex(), paths, reverse);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata(String range, List<Path> paths, boolean reverse) throws IOException {
         var ext = Files.createTempFile("ext", ".py");
         copyResource(EXT_PY, ext);
 
-        var p = start("hg", "--config", "extensions.dump=" + ext.toAbsolutePath().toString(), "metadata");
+        var args = new ArrayList<String>();
+        args.addAll(List.of("hg", "--config", "extensions.dump=" + ext.toAbsolutePath().toString(), "metadata"));
+        range = range == null ? "tip:0" : range;
+        var revset = reverse ? "reverse(" + range + ")" : range;
+        args.add(revset);
+        if (paths != null && !paths.isEmpty()) {
+            args.add(paths.stream().map(Path::toString).collect(Collectors.joining("\t")));
+        }
+        var p = start(args);
         var reader = new UnixStreamReader(p.getInputStream());
         var result = new ArrayList<CommitMetadata>();
 
         var line = reader.readLine();
         while (line != null) {
@@ -278,10 +296,50 @@
 
         await(p);
         return result;
     }
 
+    @Override
+    public List<CommitMetadata> commitMetadata(String range) throws IOException {
+        return commitMetadata(range, List.of(), false);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata(boolean reverse) throws IOException {
+        return commitMetadata(null, List.of(), reverse);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata(Hash from, Hash to) throws IOException {
+        return commitMetadata(from.hex() + ":" + to.hex() + "-" + from.hex(), List.of(), false);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata(String range, boolean reverse) throws IOException {
+        return commitMetadata(range, List.of(), reverse);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata(Hash from, Hash to, boolean reverse) throws IOException {
+        return commitMetadata(from.hex() + ":" + to.hex() + "-" + from.hex(), reverse);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata(List<Path> paths) throws IOException {
+        return commitMetadata(null, paths, false);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata(List<Path> paths, boolean reverse) throws IOException {
+        return commitMetadata(null, paths, reverse);
+    }
+
+    @Override
+    public List<CommitMetadata> commitMetadata() throws IOException {
+        return commitMetadata(null, List.of(), false);
+    }
+
     @Override
     public boolean isEmpty() throws IOException {
         var numBranches = branches().size();
         var numTags = tags().size();
 
diff a/vcs/src/main/resources/ext.py b/vcs/src/main/resources/ext.py
--- a/vcs/src/main/resources/ext.py
+++ b/vcs/src/main/resources/ext.py
@@ -296,17 +296,22 @@
 @command(b'dump', [], b'hg dump')
 def dump(ui, repo, **opts):
     __dump(repo, 0, len(repo))
 
 @command(b'metadata', [], b'hg metadata')
-def dump(ui, repo, revs=None, **opts):
-    if revs == None:
-        revs = b"0:tip"
+def metadata(ui, repo, revs, filenames=None, **opts):
+    if filenames != None:
+        fnames = filenames.split(b"\t")
 
     for r in revrange(repo, [revs]):
         ctx = repo[r]
-        __dump_metadata(ctx)
+        if filenames == None:
+            __dump_metadata(ctx)
+        else:
+            modified, added, removed = ctx.status(ctx.p1(), _match_exact(repo.root, repo.getcwd(), fnames))[:3]
+            if modified or added or removed:
+                __dump_metadata(ctx)
 
 @command(b'ls-tree', [], b'hg ls-tree')
 def ls_tree(ui, repo, rev, **opts):
     nullHash = b'0' * 40
     ctx = revsingle(repo, rev)
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -1195,15 +1195,79 @@
             var second = r.commit("Modified README", "duke", "duke@openjdk.java.net");
 
             var metadata = r.commitMetadata();
             assertEquals(2, metadata.size());
 
+            assertEquals(second, metadata.get(0).hash());
+            assertEquals(List.of("Modified README"), metadata.get(0).message());
+
+            assertEquals(first, metadata.get(1).hash());
+            assertEquals(List.of("Added README"), metadata.get(1).message());
+        }
+    }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testCommitMetadataWithFiles(VCS vcs) throws IOException {
+        try (var dir = new TemporaryDirectory()) {
+            var r = Repository.init(dir.path(), vcs);
+
+            var readme1 = dir.path().resolve("README_1");
+            Files.write(readme1, List.of("1"));
+            r.add(readme1);
+            var first = r.commit("Added README_1", "duke", "duke@openjdk.java.net");
+
+            var readme2 = dir.path().resolve("README_2");
+            Files.write(readme2, List.of("2"));
+            r.add(readme2);
+            var second = r.commit("Added README_2", "duke", "duke@openjdk.java.net");
+
+            Files.write(readme2, List.of("3"), WRITE, APPEND);
+            r.add(readme2);
+            var third = r.commit("Modified README_2", "duke", "duke@openjdk.java.net");
+
+            var metadata = r.commitMetadata(List.of(Path.of("README_1")));
+            assertEquals(1, metadata.size());
             assertEquals(first, metadata.get(0).hash());
-            assertEquals(List.of("Added README"), metadata.get(0).message());
 
+            metadata = r.commitMetadata(List.of(Path.of("README_2")));
+            assertEquals(2, metadata.size());
+            assertEquals(third, metadata.get(0).hash());
+            assertEquals(second, metadata.get(1).hash());
+
+            metadata = r.commitMetadata(List.of(Path.of("README_1"), Path.of("README_2")));
+            assertEquals(3, metadata.size());
+            assertEquals(third, metadata.get(0).hash());
+            assertEquals(second, metadata.get(1).hash());
+            assertEquals(first, metadata.get(2).hash());
+        }
+    }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testCommitMetadataWithReverse(VCS vcs) throws IOException {
+        try (var dir = new TemporaryDirectory()) {
+            var r = Repository.init(dir.path(), vcs);
+
+            var readme = dir.path().resolve("README");
+            Files.write(readme, List.of("Hello, world!"));
+            r.add(readme);
+            var first = r.commit("Added README", "duke", "duke@openjdk.java.net");
+
+            Files.write(readme, List.of("One more line"), WRITE, APPEND);
+            r.add(readme);
+            var second = r.commit("Modified README", "duke", "duke@openjdk.java.net");
+
+            var metadata = r.commitMetadata();
+            assertEquals(2, metadata.size());
+            assertEquals(second, metadata.get(0).hash());
+            assertEquals(first, metadata.get(1).hash());
+
+            metadata = r.commitMetadata(true);
+            assertEquals(2, metadata.size());
+            assertEquals(first, metadata.get(0).hash());
             assertEquals(second, metadata.get(1).hash());
-            assertEquals(List.of("Modified README"), metadata.get(1).message());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
diff a/webrev/src/main/java/org/openjdk/skara/webrev/AddedFileView.java b/webrev/src/main/java/org/openjdk/skara/webrev/AddedFileView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/AddedFileView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/AddedFileView.java
@@ -25,21 +25,26 @@
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
 import java.nio.file.*;
 import java.util.List;
+import java.util.stream.Collectors;
 
 class AddedFileView implements FileView {
     private final Patch patch;
     private final Path out;
+    private final List<CommitMetadata> commits;
+    private final MetadataFormatter formatter;
     private final List<String> newContent;
     private final byte[] binaryContent;
     private final WebrevStats stats;
 
-    public AddedFileView(ReadOnlyRepository repo, Hash head, Patch patch, Path out) throws IOException {
+    public AddedFileView(ReadOnlyRepository repo, Hash base, Hash head, List<CommitMetadata> commits, MetadataFormatter formatter, Patch patch, Path out) throws IOException {
         this.patch = patch;
         this.out = out;
+        this.commits = commits;
+        this.formatter = formatter;
         if (patch.isTextual()) {
             binaryContent = null;
             if (head == null) {
                 newContent = Files.readAllLines(repo.root().resolve(patch.target().path().get()));
             } else {
@@ -102,10 +107,15 @@
 
         w.write("<p>\n");
 
         if (patch.isTextual()) {
             w.write("<blockquote>\n");
+            w.write("  <pre>\n");
+            w.write(commits.stream()
+                           .map(formatter::format)
+                           .collect(Collectors.joining("\n")));
+            w.write("  </pre>\n");
             w.write("  <span class=\"stat\">\n");
             w.write(stats.toString());
             w.write("  </span>");
             w.write("</blockquote>\n");
         }
diff a/webrev/src/main/java/org/openjdk/skara/webrev/MetadataFormatter.java b/webrev/src/main/java/org/openjdk/skara/webrev/MetadataFormatter.java
--- /dev/null
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/MetadataFormatter.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.webrev;
+
+import org.openjdk.skara.vcs.*;
+
+class MetadataFormatter {
+    String format(CommitMetadata metadata) {
+        return "<u>" + metadata.hash().abbreviate() +"</u>: " + metadata.message().get(0);
+    }
+}
diff a/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java b/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java
@@ -25,24 +25,29 @@
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
 import java.nio.file.*;
 import java.util.List;
+import java.util.stream.Collectors;
 
 class ModifiedFileView implements FileView {
     private final Patch patch;
     private final Path out;
     private final Navigation navigation;
+    private final List<CommitMetadata> commits;
+    private final MetadataFormatter formatter;
     private final List<String> oldContent;
     private final List<String> newContent;
     private final byte[] binaryContent;
     private final WebrevStats stats;
 
-    public ModifiedFileView(ReadOnlyRepository repo, Hash base, Hash head, Patch patch, Path out, Navigation navigation) throws IOException {
+    public ModifiedFileView(ReadOnlyRepository repo, Hash base, Hash head, List<CommitMetadata> commits, MetadataFormatter formatter, Patch patch, Path out, Navigation navigation) throws IOException {
         this.patch = patch;
         this.out = out;
         this.navigation = navigation;
+        this.commits = commits;
+        this.formatter = formatter;
         if (patch.isTextual()) {
             binaryContent = null;
             oldContent = repo.lines(patch.source().path().get(), base).orElseThrow(() -> {
                 throw new IllegalArgumentException("Could not get content for file " +
                                                    patch.source().path().get() +
@@ -166,10 +171,15 @@
 
         w.write("<p>\n");
 
         if (patch.isTextual()) {
             w.write("<blockquote>\n");
+            w.write("  <pre>\n");
+            w.write(commits.stream()
+                           .map(formatter::format)
+                           .collect(Collectors.joining("\n")));
+            w.write("  </pre>\n");
             w.write("  <span class=\"stat\">\n");
             w.write(stats.toString());
             w.write("  </span>");
             w.write("</blockquote>\n");
         }
diff a/webrev/src/main/java/org/openjdk/skara/webrev/RemovedFileView.java b/webrev/src/main/java/org/openjdk/skara/webrev/RemovedFileView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/RemovedFileView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/RemovedFileView.java
@@ -25,21 +25,26 @@
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
 import java.nio.file.Path;
 import java.util.List;
+import java.util.stream.Collectors;
 
 class RemovedFileView implements FileView {
     private final Patch patch;
     private final Path out;
+    private final List<CommitMetadata> commits;
+    private final MetadataFormatter formatter;
     private final List<String> oldContent;
     private final byte[] binaryContent;
     private final WebrevStats stats;
 
-    public RemovedFileView(ReadOnlyRepository repo, Hash base, Patch patch, Path out) throws IOException {
+    public RemovedFileView(ReadOnlyRepository repo, Hash base, Hash head, List<CommitMetadata> commits, MetadataFormatter formatter, Patch patch, Path out) throws IOException {
         this.patch = patch;
         this.out = out;
+        this.commits = commits;
+        this.formatter = formatter;
         if (patch.isTextual()) {
             binaryContent = null;
             oldContent = repo.lines(patch.source().path().get(), base).orElseThrow(IllegalArgumentException::new);
             stats = new WebrevStats(patch.asTextualPatch().stats(), oldContent.size());
         } else {
@@ -95,10 +100,15 @@
 
         w.write("<p>\n");
 
         if (patch.isTextual()) {
             w.write("<blockquote>\n");
+            w.write("  <pre>\n");
+            w.write(commits.stream()
+                           .map(formatter::format)
+                           .collect(Collectors.joining("\n")));
+            w.write("  </pre>\n");
             w.write("  <span class=\"stat\">\n");
             w.write(stats.toString());
             w.write("  </span>");
             w.write("</blockquote>\n");
         }
diff a/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java b/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
@@ -170,20 +170,26 @@
                     next = patches.get(modified.get(i + 1)).target().path().get();
                 }
                 navigations.addLast(new Navigation(prev, next));
             }
 
+            var headHash = head == null ? repository.head() : head;
             var fileViews = new ArrayList<FileView>();
+            var formatter = new MetadataFormatter();
             for (var patch : patches) {
                 var status = patch.status();
+                var path = status.isDeleted() ?
+                    patch.source().path().get() :
+                    patch.target().path().get();
+                var commits = repository.commitMetadata(tailEnd, headHash, List.of(path));
                 if (status.isModified() || status.isRenamed() || status.isCopied()) {
                     var nav = navigations.removeFirst();
-                    fileViews.add(new ModifiedFileView(repository, tailEnd, head, patch, output, nav));
+                    fileViews.add(new ModifiedFileView(repository, tailEnd, head, commits, formatter, patch, output, nav));
                 } else if (status.isAdded()) {
-                    fileViews.add(new AddedFileView(repository, head, patch, output));
+                    fileViews.add(new AddedFileView(repository, tailEnd, head, commits, formatter, patch, output));
                 } else if (status.isDeleted()) {
-                    fileViews.add(new RemovedFileView(repository, tailEnd, patch, output));
+                    fileViews.add(new RemovedFileView(repository, tailEnd, head, commits, formatter, patch, output));
                 }
             }
 
             var total = fileViews.stream().map(FileView::stats).mapToInt(WebrevStats::total).sum();
             var stats = new WebrevStats(diff.added(), diff.removed(), diff.modified(), total);
