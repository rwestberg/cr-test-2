diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
@@ -194,11 +194,12 @@
 
         var name = details.get("name").asString();
         if (name == null) {
             name = login;
         }
-        return new HostUser(id, login, name);
+        var email = details.get("email").asString();
+        return new HostUser(id, login, name, email);
     }
 
     @Override
     public HostUser currentUser() {
         if (currentUser == null) {
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
@@ -112,11 +112,12 @@
 
     private HostUser parseUserDetails(JSONObject details) {
         var id = details.get("id").asInt();
         var username = details.get("username").asString();
         var name = details.get("name").asString();
-        return new HostUser(id, username, name);
+        var email = details.get("email").asString();
+        return new HostUser(id, username, name, email);
     }
 
     @Override
     public HostUser user(String username) {
         var details = request.get("users").param("username", username).execute().asArray();
diff a/host/src/main/java/org/openjdk/skara/host/HostUser.java b/host/src/main/java/org/openjdk/skara/host/HostUser.java
--- a/host/src/main/java/org/openjdk/skara/host/HostUser.java
+++ b/host/src/main/java/org/openjdk/skara/host/HostUser.java
@@ -21,36 +21,55 @@
  * questions.
  */
 package org.openjdk.skara.host;
 
 import java.util.Objects;
+import java.util.Optional;
 import java.util.function.Supplier;
 
 public class HostUser {
     private final String id;
     private final String username;
     private final Supplier<String> nameSupplier;
     private String name;
+    private String email;
 
-    public HostUser(String id, String username, Supplier<String> nameSupplier) {
+    public HostUser(String id, String username, Supplier<String> nameSupplier, String email) {
         this.id = id;
         this.username = username;
         this.nameSupplier = nameSupplier;
+        this.email = email;
+    }
+
+    public HostUser(String id, String username, Supplier<String> nameSupplier) {
+        this(id, username, nameSupplier, null);
     }
 
     public HostUser(String id, String username, String name) {
         this(id, username, () -> name);
     }
 
+    public HostUser(String id, String username, String name, String email) {
+        this(id, username, () -> name, email);
+    }
+
     public HostUser(int id, String username, String name) {
         this(String.valueOf(id), username, name);
     }
 
+    public HostUser(int id, String username, String name, String email) {
+        this(String.valueOf(id), username, name, email);
+    }
+
     public HostUser(int id, String username, Supplier<String> nameSupplier) {
         this(String.valueOf(id), username, nameSupplier);
     }
 
+    public HostUser(int id, String username, Supplier<String> nameSupplier, String email) {
+        this(String.valueOf(id), username, nameSupplier, email);
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
             return true;
         }
@@ -80,10 +99,14 @@
             name = nameSupplier.get();
         }
         return name;
     }
 
+    public Optional<String> email() {
+        return Optional.ofNullable(email);
+    }
+
     @Override
     public String toString() {
         return "HostUserDetails{" +
                 "id=" + id +
                 ", username='" + username + '\'' +
