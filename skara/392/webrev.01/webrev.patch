diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -1291,11 +1291,23 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"),
+                                                 Map.of("issuetype", JSON.of("Enhancement"),
+                                                        "customfield_10008", JSON.object()
+                                                                                 .put("id", 244)
+                                                                                 .put("name", "java.io"),
+                                                        "customfield_10005", JSON.array()
+                                                                                 .add(JSON.object()
+                                                                                          .put("id", "17010")
+                                                                                          .put("value", "generic"))
+                                                                                 .add(JSON.object()
+                                                                                          .put("id", "17019")
+                                                                                          .put("value", "other"))
+                                                 ));
             issue.setProperty("fixVersions", JSON.array().add("13.0.1"));
             issue.setProperty("priority", JSON.of("1"));
 
             var authorEmailAddress = issueProject.issueTracker().currentUser().userName() + "@openjdk.org";
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue", "Duke", authorEmailAddress);
@@ -1319,10 +1331,13 @@
             assertEquals(RESOLVED, backport.state());
             assertEquals(List.of(issueProject.issueTracker().currentUser()), backport.assignees());
 
             // Custom properties should also propagate
             assertEquals("1", backport.properties().get("priority").asString());
+            assertEquals(244, backport.properties().get("customfield_10008").get("id").asInt());
+            assertEquals("java.io", backport.properties().get("customfield_10008").get("name").asString());
+            assertEquals(2, backport.properties().get("customfield_10005").asArray().size());
         }
     }
 
     @Test
     void testPullRequest(TestInfo testInfo) throws IOException {
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
@@ -194,10 +194,26 @@
             return true;
         }
         return false;
     }
 
+    // Custom fields are set a bit differently depending on their type
+    private JSONValue filterCustomFieldValue(String name, JSONValue unfiltered) {
+        if (!name.startsWith("customfield_")) {
+            return unfiltered;
+        }
+        if (unfiltered.isObject()) {
+            if (unfiltered.asObject().contains("id")) {
+                return unfiltered.get("id");
+            } else {
+                return unfiltered;
+            }
+        } else {
+            return unfiltered;
+        }
+    }
+
     @Override
     public Issue createIssue(String title, List<String> body, Map<String, JSONValue> properties) {
         var query = JSON.object();
 
         var finalProperties = new HashMap<String, JSONValue>(properties);
@@ -237,11 +253,12 @@
 
         // Apply fields that have to be set later (if any)
         var editFields = JSON.object();
         finalProperties.entrySet().stream()
                        .filter(entry -> !isInitialField(entry.getKey(), entry.getValue()))
-                       .forEach(entry -> editFields.put(entry.getKey(), entry.getValue()));
+                       .forEach(entry -> editFields.put(entry.getKey(), filterCustomFieldValue(entry.getKey(),
+                                                                                               entry.getValue())));
 
         if (editFields.fields().size() > 0) {
             var id = data.get("key").asString();
             if (id.indexOf('-') < 0) {
                 id = projectName.toUpperCase() + "-" + id;
