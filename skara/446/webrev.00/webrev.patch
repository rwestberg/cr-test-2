diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
@@ -21,18 +21,17 @@
  * questions.
  */
 package org.openjdk.skara.bots.notify;
 
 import org.openjdk.skara.bot.WorkItem;
-import org.openjdk.skara.forge.HostedRepository;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.storage.StorageBuilder;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.OpenJDKTag;
 
 import java.io.*;
-import java.net.*;
-import java.nio.charset.StandardCharsets;
+import java.net.URI;
 import java.nio.file.*;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
@@ -261,23 +260,24 @@
         return false;
     }
 
     @Override
     public void run(Path scratchPath) {
-        var sanitizedUrl = URLEncoder.encode(repository.webUrl().toString() + "v2", StandardCharsets.UTF_8);
-        var path = storagePath.resolve(sanitizedUrl);
         var historyPath = scratchPath.resolve("notify").resolve("history");
+        var repositoryPool = new HostedRepositoryPool(storagePath.resolve("seeds"));
 
         try {
-            var localRepo = fetchAll(path, repository.url());
-            var history = UpdateHistory.create(tagStorageBuilder, historyPath.resolve("tags"), branchStorageBuilder, historyPath.resolve("branches"));
-            handleTags(localRepo, history);
-
-            var knownRefs = localRepo.remoteBranches("origin")
+            var localRepo = repositoryPool.materialize(repository, scratchPath.resolve("notify").resolve("repowi"));
+            var knownRefs = localRepo.remoteBranches(repository.url().toString())
                                      .stream()
                                      .filter(ref -> branches.matcher(ref.name()).matches())
                                      .collect(Collectors.toList());
+            localRepo.fetchAll();
+
+            var history = UpdateHistory.create(tagStorageBuilder, historyPath.resolve("tags"), branchStorageBuilder, historyPath.resolve("branches"));
+            handleTags(localRepo, history);
+
             boolean hasBranchHistory = knownRefs.stream()
                                                 .map(ref -> history.branchHash(new Branch(ref.name())))
                                                 .anyMatch(Optional::isPresent);
             for (var ref : knownRefs) {
                 if (!hasBranchHistory) {
diff a/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java b/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java
--- a/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java
@@ -38,34 +38,14 @@
     }
 
     private class HostedRepositoryInstance {
         private final HostedRepository hostedRepository;
         private final Path seed;
-        private final String ref;
 
-        private HostedRepositoryInstance(HostedRepository hostedRepository, String ref) {
+        private HostedRepositoryInstance(HostedRepository hostedRepository) {
             this.hostedRepository = hostedRepository;
             this.seed = seedStorage.resolve(hostedRepository.name());
-            this.ref = ref;
-        }
-
-        private class NewClone {
-            private final Repository repository;
-            private final Hash fetchHead;
-
-            NewClone(Repository repository, Hash fetchHead) {
-                this.repository = repository;
-                this.fetchHead = fetchHead;
-            }
-
-            Repository repository() {
-                return repository;
-            }
-
-            Hash fetchHead() {
-                return fetchHead;
-            }
         }
 
         private void clearDirectory(Path directory) {
             try {
                 Files.walk(directory)
@@ -96,15 +76,10 @@
             initializeSeed();
             log.info("Using seed folder " + seed + " when cloning into " + path);
             return Repository.clone(hostedRepository.url(), path, false, seed);
         }
 
-        private NewClone fetchRef(Repository repository) throws IOException {
-            var fetchHead = repository.fetch(hostedRepository.url(), "+" + ref + ":hostedrepositorypool");
-            return new NewClone(repository, fetchHead);
-        }
-
         private void removeOldClone(Path path, String reason) {
             if (!Files.exists(seed)) {
                 try {
                     Files.createDirectories(seed.getParent());
                 } catch (IOException e) {
@@ -126,55 +101,73 @@
                     }
                 }
             }
         }
 
-        private NewClone materializeClone(Path path) throws IOException {
+        private Repository materializeClone(Path path) throws IOException {
             var localRepo = Repository.get(path);
             if (localRepo.isEmpty()) {
                 removeOldClone(path, "norepo");
-                return fetchRef(cloneSeeded(path));
+                return cloneSeeded(path);
             } else {
                 var localRepoInstance = localRepo.get();
                 if (!localRepoInstance.isHealthy()) {
                     removeOldClone(path, "unhealthy");
-                    return fetchRef(cloneSeeded(path));
+                    return cloneSeeded(path);
                 } else {
                     try {
                         localRepoInstance.clean();
-                        return fetchRef(localRepoInstance);
+                        return localRepoInstance;
                     } catch (IOException e) {
                         removeOldClone(path, "uncleanable");
-                        return fetchRef(cloneSeeded(path));
+                        return cloneSeeded(path);
                     }
                 }
             }
         }
     }
 
-    public Repository materialize(HostedRepository hostedRepository, String ref, Path path) throws IOException {
-        var hostedRepositoryInstance = new HostedRepositoryInstance(hostedRepository, ref);
-        var clone = hostedRepositoryInstance.materializeClone(path);
-        return clone.repository();
+    public Repository materialize(HostedRepository hostedRepository, Path path) throws IOException {
+        var hostedRepositoryInstance = new HostedRepositoryInstance(hostedRepository);
+        return hostedRepositoryInstance.materializeClone(path);
+    }
+
+    private static class NewClone {
+        private final Repository repository;
+        private final Hash fetchHead;
+
+        NewClone(Repository repository, Hash fetchHead) {
+            this.repository = repository;
+            this.fetchHead = fetchHead;
+        }
+
+        Repository repository() {
+            return repository;
+        }
+
+        Hash fetchHead() {
+            return fetchHead;
+        }
     }
 
-    public Repository materialize(PullRequest pr, Path path) throws IOException {
-        return materialize(pr.repository(), pr.sourceRef(), path);
+    private NewClone fetchRef(HostedRepository hostedRepository, Repository repository, String ref) throws IOException {
+        var fetchHead = repository.fetch(hostedRepository.url(), "+" + ref + ":hostedrepositorypool");
+        return new NewClone(repository, fetchHead);
     }
 
     public Repository checkout(HostedRepository hostedRepository, String ref, Path path) throws IOException {
-        var hostedRepositoryInstance = new HostedRepositoryInstance(hostedRepository, ref);
-        var clone = hostedRepositoryInstance.materializeClone(path);
+        var hostedRepositoryInstance = new HostedRepositoryInstance(hostedRepository);
+        var clone = fetchRef(hostedRepository, hostedRepositoryInstance.materializeClone(path), ref);
         var localRepo = clone.repository();
         try {
             localRepo.checkout(clone.fetchHead(), true);
         } catch (IOException e) {
             var preserveUnchecked = hostedRepositoryInstance.seed.resolveSibling(
                     hostedRepositoryInstance.seed.getFileName().toString() + "-unchecked-" + UUID.randomUUID());
             log.severe("Uncheckoutable local repository detected - preserved in: " + preserveUnchecked);
             Files.move(localRepo.root(), preserveUnchecked);
-            clone = hostedRepositoryInstance.fetchRef(hostedRepositoryInstance.cloneSeeded(path));
+            clone = fetchRef(hostedRepository, hostedRepositoryInstance.cloneSeeded(path), ref);
             localRepo = clone.repository();
             localRepo.checkout(clone.fetchHead(), true);
         }
         return localRepo;
     }
