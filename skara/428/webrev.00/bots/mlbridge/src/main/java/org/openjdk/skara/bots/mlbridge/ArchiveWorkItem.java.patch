diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -245,14 +245,20 @@
             jbs = census.configuration().general().project();
         }
 
         // Materialize the PR's target ref
         try {
+            // Materialize the PR's source and target ref
+            var seedPath = bot.seedStorage().orElse(scratchPath.resolve("seeds"));
+            var hostedRepositoryPool = new HostedRepositoryPool(seedPath);
             var repository = pr.repository();
-            var localRepo = Repository.materialize(scratchPath.resolve("mlbridge-mergebase"), repository.url(), pr.targetRef());
-            var targetHash = localRepo.fetch(repository.url(), pr.targetRef());
-            var headHash = localRepo.fetch(repository.url(), pr.headHash().hex());
+            var localRepoPath = scratchPath.resolve("mlbridge-mergebase");
+            var localRepo = hostedRepositoryPool.checkout(pr, localRepoPath.resolve(repository.name()));
+            localRepo.fetch(repository.url(), "+" + pr.targetRef() + ":mlbridge_prinstance");
+
+            var targetHash = pr.targetHash();
+            var headHash = pr.headHash();
             var baseHash = localRepo.mergeBase(targetHash, headHash);
 
             var webrevPath = scratchPath.resolve("mlbridge-webrevs");
             var listServer = MailingListServerFactory.createMailmanServer(bot.listArchive(), bot.smtpServer(), bot.sendInterval());
             var list = listServer.getList(bot.listAddress().address());
