diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -245,14 +245,20 @@
             jbs = census.configuration().general().project();
         }
 
         // Materialize the PR's target ref
         try {
+            // Materialize the PR's source and target ref
+            var seedPath = bot.seedStorage().orElse(scratchPath.resolve("seeds"));
+            var hostedRepositoryPool = new HostedRepositoryPool(seedPath);
             var repository = pr.repository();
-            var localRepo = Repository.materialize(scratchPath.resolve("mlbridge-mergebase"), repository.url(), pr.targetRef());
-            var targetHash = localRepo.fetch(repository.url(), pr.targetRef());
-            var headHash = localRepo.fetch(repository.url(), pr.headHash().hex());
+            var localRepoPath = scratchPath.resolve("mlbridge-mergebase");
+            var localRepo = hostedRepositoryPool.checkout(pr, localRepoPath.resolve(repository.name()));
+            localRepo.fetch(repository.url(), "+" + pr.targetRef() + ":mlbridge_prinstance");
+
+            var targetHash = pr.targetHash();
+            var headHash = pr.headHash();
             var baseHash = localRepo.mergeBase(targetHash, headHash);
 
             var webrevPath = scratchPath.resolve("mlbridge-webrevs");
             var listServer = MailingListServerFactory.createMailmanServer(bot.listArchive(), bot.smtpServer(), bot.sendInterval());
             var list = listServer.getList(bot.listAddress().address());
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
@@ -50,19 +50,20 @@
     private final Map<String, String> headers;
     private final URI issueTracker;
     private final PullRequestUpdateCache updateCache;
     private final Duration sendInterval;
     private final Duration cooldown;
+    private final Path seedStorage;
     private final CooldownQuarantine cooldownQuarantine;
 
     MailingListBridgeBot(EmailAddress from, HostedRepository repo, HostedRepository archive, String archiveRef,
                          HostedRepository censusRepo, String censusRef, EmailAddress list,
                          Set<String> ignoredUsers, Set<Pattern> ignoredComments, URI listArchive, String smtpServer,
                          HostedRepository webrevStorageRepository, String webrevStorageRef,
                          Path webrevStorageBase, URI webrevStorageBaseUri, Set<String> readyLabels,
                          Map<String, Pattern> readyComments, URI issueTracker, Map<String, String> headers,
-                         Duration sendInterval, Duration cooldown) {
+                         Duration sendInterval, Duration cooldown, Path seedStorage) {
         emailAddress = from;
         codeRepo = repo;
         archiveRepo = archive;
         this.archiveRef = archiveRef;
         this.censusRepo = censusRepo;
@@ -76,10 +77,11 @@
         this.readyComments = readyComments;
         this.headers = headers;
         this.issueTracker = issueTracker;
         this.sendInterval = sendInterval;
         this.cooldown = cooldown;
+        this.seedStorage = seedStorage;
 
         webrevStorage = new WebrevStorage(webrevStorageRepository, webrevStorageRef, webrevStorageBase,
                                           webrevStorageBaseUri, from);
         updateCache = new PullRequestUpdateCache();
         cooldownQuarantine = new CooldownQuarantine();
@@ -159,10 +161,14 @@
 
     URI issueTracker() {
         return issueTracker;
     }
 
+    Optional<Path> seedStorage() {
+        return Optional.ofNullable(seedStorage);
+    }
+
     @Override
     public List<WorkItem> getPeriodicItems() {
         List<WorkItem> ret = new LinkedList<>();
 
         for (var pr : codeRepo.pullRequests()) {
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotBuilder.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotBuilder.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotBuilder.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotBuilder.java
@@ -51,10 +51,11 @@
     private Map<String, Pattern> readyComments = Map.of();
     private URI issueTracker;
     private Map<String, String> headers = Map.of();
     private Duration sendInterval = Duration.ZERO;
     private Duration cooldown = Duration.ZERO;
+    private Path seedStorage = null;
 
     MailingListBridgeBotBuilder() {
     }
 
     public MailingListBridgeBotBuilder from(EmailAddress from) {
@@ -160,12 +161,18 @@
     public MailingListBridgeBotBuilder cooldown(Duration cooldown) {
         this.cooldown = cooldown;
         return this;
     }
 
+    public MailingListBridgeBotBuilder seedStorage(Path seedStorage) {
+        this.seedStorage = seedStorage;
+        return this;
+    }
+
     public MailingListBridgeBot build() {
         return new MailingListBridgeBot(from, repo, archive, archiveRef, censusRepo, censusRef, list,
                                         ignoredUsers, ignoredComments, listArchive, smtpServer,
                                         webrevStorageRepository, webrevStorageRef, webrevStorageBase, webrevStorageBaseUri,
-                                        readyLabels, readyComments, issueTracker, headers, sendInterval, cooldown);
+                                        readyLabels, readyComments, issueTracker, headers, sendInterval, cooldown,
+                                        seedStorage);
     }
 }
