diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ContributorCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ContributorCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ContributorCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ContributorCommand.java
@@ -53,15 +53,15 @@
         var contributor = EmailAddress.parse(matcher.group(2));
         switch (matcher.group(1)) {
             case "add": {
                 var fullName = contributor.fullName().orElseThrow(IllegalStateException::new);
                 if (!fullNamePattern.matcher(fullName).matches()) {
-                    reply.println("The full name is *not* of the format " + CommitMessageSyntax.REAL_NAME_REGEX);
+                    reply.println("The full name is *not* of the format `" + CommitMessageSyntax.REAL_NAME_REGEX + "`");
                     break;
                 }
                 if (!emailPattern.matcher(contributor.address()).matches()) {
-                    reply.println("The email is *not* of the format " + CommitMessageSyntax.EMAIL_ADDR_REGEX);
+                    reply.println("The email is *not* of the format `" + CommitMessageSyntax.EMAIL_ADDR_REGEX + "`");
                     break;
                 }
                 reply.println(Contributors.addContributorMarker(contributor));
                 reply.println("Contributor `" + contributor.toString() + "` successfully added.");
                 break;
@@ -70,11 +70,19 @@
                 var existing = new HashSet<>(Contributors.contributors(pr.repository().forge().currentUser(), allComments));
                 if (existing.contains(contributor)) {
                     reply.println(Contributors.removeContributorMarker(contributor));
                     reply.println("Contributor `" + contributor.toString() + "` successfully removed.");
                 } else {
-                    reply.println("Contributor `" + contributor.toString() + "` was not found.");
+                    if (existing.isEmpty()) {
+                        reply.println("There are no additional contributors associated with this pull request.");
+                    } else {
+                        reply.println("Contributor `" + contributor.toString() + "` was not found.");
+                        reply.println("Current additional contributors are:");
+                        for (var e : existing) {
+                            reply.println("- `" + e.toString() + "`");
+                        }
+                    }
                     break;
                 }
                 break;
             }
         }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
@@ -82,11 +82,11 @@
             // Remove something that isn't there
             pr.addComment("/contributor remove Test Person <test@test.test>");
             TestBotRunner.runPeriodicItems(prBot);
 
             // The bot should reply with an error message
-            assertLastCommentContains(pr,"was not found");
+            assertLastCommentContains(pr,"There are no additional contributors associated with this pull request");
 
             // Now add someone back again
             pr.addComment("/contributor add Test Person <test@test.test>");
             TestBotRunner.runPeriodicItems(prBot);
 
@@ -246,6 +246,54 @@
 
             // The bot should reply with an error message
             assertLastCommentContains(pr, "The email is *not* of the format");
         }
     }
+
+    @Test
+    void removeContributor(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var integrator = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addReviewer(integrator.forge().currentUser().id())
+                                           .addCommitter(author.forge().currentUser().id());
+            var prBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();
+
+            // Populate the projects repository
+            var localRepoFolder = tempFolder.path().resolve("localrepo");
+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));
+            localRepo.push(masterHash, author.url(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.url(), "edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
+
+            // Remove a contributor that hasn't been added
+            pr.addComment("/contributor remove Foo Bar <foo.bar@host.com>");
+            TestBotRunner.runPeriodicItems(prBot);
+            assertLastCommentContains(pr, "There are no additional contributors associated with this pull request.");
+
+            // Add a contributor
+            pr.addComment("/contributor add Foo Bar <foo.bar@host.com>");
+            TestBotRunner.runPeriodicItems(prBot);
+            assertLastCommentContains(pr, "successfully added.");
+
+            // Remove another (not added) contributor
+            pr.addComment("/contributor remove Baz Bar <baz.bar@host.com>");
+            TestBotRunner.runPeriodicItems(prBot);
+            assertLastCommentContains(pr, "Contributor `Baz Bar <baz.bar@host.com>` was not found.");
+            assertLastCommentContains(pr, "Current additional contributors are:");
+            assertLastCommentContains(pr, "- `Foo Bar <foo.bar@host.com>`");
+
+            // Remove an existing contributor
+            pr.addComment("/contributor remove Foo Bar <foo.bar@host.com>");
+            TestBotRunner.runPeriodicItems(prBot);
+            assertLastCommentContains(pr, "successfully removed.");
+        }
+    }
 }
