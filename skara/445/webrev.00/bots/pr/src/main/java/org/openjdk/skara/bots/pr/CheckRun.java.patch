diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -126,10 +126,15 @@
 
     // Additional bot-specific checks that are not handled by JCheck
     private List<String> botSpecificChecks() throws IOException {
         var ret = new ArrayList<String>();
 
+        if (bodyWithoutStatus().isBlank()) {
+            var error = "The PR body must not be empty - the content will be used for a notification email.";
+            ret.add(error);
+        }
+
         if (!isTargetBranchAllowed()) {
             var error = "The branch `" + pr.targetRef() + "` is not allowed as target branch. The allowed target branches are:\n" +
                     allowedTargetBranches().stream()
                     .map(name -> "   - " + name)
                     .collect(Collectors.joining("\n"));
@@ -345,21 +350,27 @@
         });
 
         return progressBody.toString();
     }
 
+    private String bodyWithoutStatus() {
+        var description = pr.body();
+        var markerIndex = description.lastIndexOf(progressMarker);
+        return (markerIndex < 0 ?
+                description :
+                description.substring(0, markerIndex)).trim();
+    }
+
     private String updateStatusMessage(String message) {
         var description = pr.body();
         var markerIndex = description.lastIndexOf(progressMarker);
 
         if (markerIndex >= 0 && description.substring(markerIndex).equals(message)) {
             log.info("Progress already up to date");
             return description;
         }
-        var newBody = (markerIndex < 0 ?
-                description :
-                description.substring(0, markerIndex)).trim() + "\n" + progressMarker + "\n" + message;
+        var newBody = bodyWithoutStatus() + "\n" + progressMarker + "\n" + message;
 
         // TODO? Retrieve the body again here to lower the chance of concurrent updates
         pr.setBody(newBody);
         return newBody;
     }
