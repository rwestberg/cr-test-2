diff a/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java b/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
--- a/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
+++ b/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
@@ -107,11 +107,11 @@
             assertTrue(hashes.contains(toHashC));
 
             var known = Set.of(toHashA, fromHashB, toHashC);
             var merge = toCommits.stream().filter(c -> !known.contains(c.hash())).findAny().get();
             assertTrue(merge.isMerge());
-            assertEquals(List.of("Automatic merge of master into master"), merge.message());
+            assertEquals(List.of("Automatic merge of test:master into master"), merge.message());
             assertEquals("duke", merge.author().name());
             assertEquals("duke@openjdk.org", merge.author().email());
 
             assertEquals(0, toHostedRepo.pullRequests().size());
         }
@@ -536,11 +536,11 @@
             assertTrue(hashes.contains(toHashC));
 
             var known = Set.of(toHashA, fromHashB, toHashC);
             var merge = toCommits.stream().filter(c -> !known.contains(c.hash())).findAny().get();
             assertTrue(merge.isMerge());
-            assertEquals(List.of("Automatic merge of master into master"), merge.message());
+            assertEquals(List.of("Automatic merge of test:master into master"), merge.message());
             assertEquals("duke", merge.author().name());
             assertEquals("duke@openjdk.org", merge.author().email());
 
             assertEquals(0, toHostedRepo.pullRequests().size());
 
@@ -581,11 +581,11 @@
             var toDir = temp.path().resolve("to.git");
             var toLocalRepo = Repository.init(toDir, VCS.GIT);
             var toGitConfig = toDir.resolve(".git").resolve("config");
             Files.write(toGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
                         StandardOpenOption.APPEND);
-            var toHostedRepo = new TestHostedRepository(host, "test-mirror", toLocalRepo);
+            var toHostedRepo = new TestHostedRepository(host, "test", toLocalRepo);
 
             var forkDir = temp.path().resolve("fork.git");
             var forkLocalRepo = Repository.init(forkDir, VCS.GIT);
             var forkGitConfig = forkDir.resolve(".git").resolve("config");
             Files.write(forkGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
@@ -772,11 +772,11 @@
             assertTrue(hashes.contains(toHashC));
 
             var known = Set.of(toHashA, fromHashB, toHashC);
             var merge = toCommits.stream().filter(c -> !known.contains(c.hash())).findAny().get();
             assertTrue(merge.isMerge());
-            assertEquals(List.of("Automatic merge of master into master"), merge.message());
+            assertEquals(List.of("Automatic merge of test:master into master"), merge.message());
             assertEquals("duke", merge.author().name());
             assertEquals("duke@openjdk.org", merge.author().email());
 
             assertEquals(0, toHostedRepo.pullRequests().size());
 
@@ -823,11 +823,11 @@
             var toDir = temp.path().resolve("to.git");
             var toLocalRepo = Repository.init(toDir, VCS.GIT);
             var toGitConfig = toDir.resolve(".git").resolve("config");
             Files.write(toGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
                         StandardOpenOption.APPEND);
-            var toHostedRepo = new TestHostedRepository(host, "test-mirror", toLocalRepo);
+            var toHostedRepo = new TestHostedRepository(host, "test", toLocalRepo);
 
             var forkDir = temp.path().resolve("fork.git");
             var forkLocalRepo = Repository.init(forkDir, VCS.GIT);
             var forkGitConfig = forkDir.resolve(".git").resolve("config");
             Files.write(forkGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
@@ -944,11 +944,11 @@
             var toDir = temp.path().resolve("to.git");
             var toLocalRepo = Repository.init(toDir, VCS.GIT);
             var toGitConfig = toDir.resolve(".git").resolve("config");
             Files.write(toGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
                         StandardOpenOption.APPEND);
-            var toHostedRepo = new TestHostedRepository(host, "test-mirror", toLocalRepo);
+            var toHostedRepo = new TestHostedRepository(host, "test", toLocalRepo);
 
             var forkDir = temp.path().resolve("fork.git");
             var forkLocalRepo = Repository.init(forkDir, VCS.GIT);
             var forkGitConfig = forkDir.resolve(".git").resolve("config");
             Files.write(forkGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
