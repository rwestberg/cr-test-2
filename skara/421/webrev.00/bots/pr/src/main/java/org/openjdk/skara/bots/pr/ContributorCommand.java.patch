diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ContributorCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ContributorCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ContributorCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ContributorCommand.java
@@ -23,18 +23,21 @@
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.email.EmailAddress;
 import org.openjdk.skara.forge.PullRequest;
 import org.openjdk.skara.issuetracker.Comment;
+import org.openjdk.skara.vcs.openjdk.CommitMessageSyntax;
 
 import java.io.PrintWriter;
 import java.nio.file.Path;
 import java.util.*;
 import java.util.regex.Pattern;
 
 public class ContributorCommand implements CommandHandler {
     private static final Pattern commandPattern = Pattern.compile("^(add|remove)\\s+(.*?\\s+<\\S+>)$");
+    private static final Pattern fullNamePattern = Pattern.compile(CommitMessageSyntax.REAL_NAME_REGEX);
+    private static final Pattern emailPattern = Pattern.compile(CommitMessageSyntax.EMAIL_ADDR_REGEX);
 
     @Override
     public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, String args, Comment comment, List<Comment> allComments, PrintWriter reply) {
         if (!comment.author().equals(pr.author())) {
             reply.println("Only the author (@" + pr.author().userName() + ") is allowed to issue the `contributor` command.");
@@ -47,24 +50,35 @@
             return;
         }
 
         var contributor = EmailAddress.parse(matcher.group(2));
         switch (matcher.group(1)) {
-            case "add":
+            case "add": {
+                var fullName = contributor.fullName().orElseThrow(IllegalStateException::new);
+                if (!fullNamePattern.matcher(fullName).matches()) {
+                    reply.println("The full name is *not* of the format " + CommitMessageSyntax.REAL_NAME_REGEX);
+                    break;
+                }
+                if (!emailPattern.matcher(contributor.address()).matches()) {
+                    reply.println("The email is *not* of the format " + CommitMessageSyntax.EMAIL_ADDR_REGEX);
+                    break;
+                }
                 reply.println(Contributors.addContributorMarker(contributor));
                 reply.println("Contributor `" + contributor.toString() + "` successfully added.");
                 break;
-            case "remove":
+            }
+            case "remove": {
                 var existing = new HashSet<>(Contributors.contributors(pr.repository().forge().currentUser(), allComments));
                 if (existing.contains(contributor)) {
                     reply.println(Contributors.removeContributorMarker(contributor));
                     reply.println("Contributor `" + contributor.toString() + "` successfully removed.");
                 } else {
                     reply.println("Contributor `" + contributor.toString() + "` was not found.");
                     break;
                 }
                 break;
+            }
         }
     }
 
     @Override
     public String description() {
