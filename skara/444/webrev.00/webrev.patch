diff a/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java b/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
@@ -81,10 +81,14 @@
             die(message);
             return null; // impossible
         }
     }
 
+    private static boolean isDigit(char c) {
+        return Character.isDigit(c);
+    }
+
     private static void generate(String[] args) throws IOException {
         var flags = List.of(
             Option.shortcut("r")
                   .fullname("rev")
                   .describe("REV")
@@ -186,10 +190,11 @@
                         upstream = pullPath.toString();
                     }
                 }
             }
         }
+        var upstreamURL = upstream;
 
         var noOutgoing = arguments.contains("no-outgoing");
         if (!noOutgoing) {
             var config = repo.config("webrev.no-outgoing");
             if (config.size() == 1) {
@@ -203,16 +208,17 @@
             noOutgoing ?
                 resolve(repo, isMercurial ? "tip" : "HEAD") :
                 resolve(repo, isMercurial ? "min(outgoing())^" : "origin" + "/" + "master");
 
         var issue = arguments.contains("cr") ? arguments.get("cr").asString() : null;
-        if (issue != null && !issue.startsWith("http")) {
-            var digits = Set.of('0', '1', '2', '3', '4', '5', '6', '7', '8', '9');
-            if (digits.contains(issue.charAt(0))) {
+        if (issue != null) {
+            if (issue.startsWith("http")) {
+                var uri = URI.create(issue);
+                issue = Path.of(uri.getPath()).getFileName().toString();
+            } else if (isDigit(issue.charAt(0))) {
                 issue = "JDK-" + issue;
             }
-            issue = "https://bugs.openjdk.java.net/browse/" + issue;
         }
         if (issue == null) {
             var pattern = Pattern.compile("(?:(JDK|CODETOOLS|JMC|SKARA)-)?([0-9]+).*");
             var currentBranch = repo.currentBranch();
             if (currentBranch.isPresent()) {
@@ -222,11 +228,11 @@
                     var project = m.group(1);
                     if (project == null) {
                         project = "JDK";
                     }
                     var id = m.group(2);
-                    issue = "https://bugs.openjdk.java.net/browse/" + project + "-" + id;
+                    issue = project + "-" + id;
                 }
             }
         }
 
         var out = arg("output", arguments, repo);
@@ -257,10 +263,11 @@
 
         var username = arg("username", arguments, repo);
         if (username == null) {
             username = repo.username().orElse(System.getProperty("user.name"));
         }
+        var author = Author.fromString(username);
 
         if (Files.exists(output)) {
             clearDirectory(output);
         }
 
@@ -273,15 +280,18 @@
             } else {
                 files = Files.readAllLines(path).stream().map(Path::of).collect(Collectors.toList());
             }
         }
 
+        var jbs = "https://bugs.openjdk.java.net/browse/";
         Webrev.repository(repo)
               .output(output)
               .title(title)
               .upstream(upstream)
-              .username(username)
+              .username(author.name())
+              .commitLinker(hash -> upstreamURL == null ? null : upstreamURL + "/commit/" + hash)
+              .issueLinker(id -> jbs + (isDigit(id.charAt(0)) ? "JDK-" : "") + id)
               .issue(issue)
               .version(version)
               .files(files)
               .generate(rev);
     }
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -1961,11 +1961,11 @@
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
     void testAnnotateTag(VCS vcs) throws IOException {
-        try (var dir = new TemporaryDirectory()) {
+        try (var dir = new TemporaryDirectory(false)) {
             var repo = Repository.init(dir.path(), vcs);
             var readme = repo.root().resolve("README");
             var now = ZonedDateTime.now();
             Files.writeString(readme, "Hello\n");
             repo.add(readme);
diff a/webrev/src/main/java/org/openjdk/skara/webrev/IndexView.java b/webrev/src/main/java/org/openjdk/skara/webrev/IndexView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/IndexView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/IndexView.java
@@ -55,11 +55,11 @@
         "        </tr>"
     });
 
     private static final Template UPSTREAM_TEMPLATE = new Template(new String[]{
         "        <tr>",
-        "          <th>Repository:</th>",
+        "          <th>Compare against:</th>",
         "          <td><a href=\"${UPSTREAM}\">${UPSTREAM}</a></td>",
         "        </tr>"
     });
 
     private static final Template BRANCH_TEMPLATE = new Template(new String[]{
@@ -81,19 +81,32 @@
         "          <th>Bug id:</th>",
         "          <td><a href=\"${ISSUE_HREF}\">${ISSUE}</a></td>",
         "        </tr>"
     });
 
-    private static final Template HEADER_MIDDLE_TEMPLATE = new Template(new String[]{
+    private static final Template REVISION_TEMPLATE = new Template(new String[]{
         "        <tr>",
-        "          <th>Compare against revision:</th>",
+        "          <th>Compare against version:</th>",
         "          <td>${REVISION}</td>",
-        "        </tr>",
+        "        </tr>"
+    });
+
+    private static final Template REVISION_WITH_LINK_TEMPLATE = new Template(new String[]{
+        "        <tr>",
+        "          <th>Compare against version:</th>",
+        "          <td><a href=\"${REVISION_HREF}\">${REVISION}</a></td>",
+        "        </tr>"
+    });
+
+    private static final Template SUMMARY_TEMPLATE = new Template(new String[]{
         "        <tr>",
         "          <th>Summary of changes:</th>",
         "          <td>${STATS}</td>",
-        "        </tr>",
+        "        </tr>"
+    });
+
+    private static final Template PATCH_TEMPLATE = new Template(new String[]{
         "        <tr>",
         "          <th>Patch of changes:</th>",
         "          <td><a href=\"${PATCH_URL}\">${PATCH}</a></td>",
         "        </tr>"
     });
@@ -137,10 +150,11 @@
                      String branch,
                      String pullRequest,
                      String issue,
                      String version,
                      Hash revision,
+                     String revisionURL,
                      Path patchFile,
                      WebrevStats stats) {
         this.files = files;
         map = new HashMap<String, String>(); 
 
@@ -156,11 +170,18 @@
             map.put("${BRANCH}", branch);
         }
 
         if (pullRequest != null) {
             map.put("${PR_HREF}", pullRequest);
-            map.put("${PR}", pullRequest);
+
+            try {
+                var uri = URI.create(pullRequest);
+                var id = Path.of(uri.getPath()).getFileName().toString();
+                map.put("${PR}", id);
+            } catch (IllegalArgumentException e) {
+                map.put("${PR}", pullRequest);
+            }
         }
 
 
         if (version == null) {
             map.put("${VERSION}", "'unknown'");
@@ -185,10 +206,13 @@
         var formatter = DateTimeFormatter.ofPattern("E LLL dd HH:mm:ss z yyyy");
         map.put("${DATE}", now.format(formatter));
 
         map.put("${TITLE}", title);
         map.put("${REVISION}", revision.abbreviate());
+        if (revisionURL != null) {
+            map.put("${REVISION_HREF}", revisionURL);
+        }
         map.put("${PATCH}", patchFile.toString());
         map.put("${PATCH_URL}", patchFile.toString());
         map.put("${STATS}", stats.toString());
     }
 
@@ -201,21 +225,28 @@
 
         if (map.containsKey("${UPSTREAM}")) {
             UPSTREAM_TEMPLATE.render(w, map);
         }
 
+        if (map.containsKey("${REVISION_HREF}")) {
+            REVISION_WITH_LINK_TEMPLATE.render(w, map);
+        } else {
+            REVISION_TEMPLATE.render(w, map);
+        }
+
         if (map.containsKey("${BRANCH}")) {
             BRANCH_TEMPLATE.render(w, map);
         }
 
-        HEADER_MIDDLE_TEMPLATE.render(w, map);
+        SUMMARY_TEMPLATE.render(w, map);
+        PATCH_TEMPLATE.render(w, map);
 
         if (map.containsKey("${AUTHOR_COMMENT}")) {
             AUTHOR_COMMENT_TEMPLATE.render(w, map);
         }
 
-        if (map.containsKey("${PR}")) {
+        if (map.containsKey("${PR}") && map.containsKey("${PR_HREF}")) {
             PR_TEMPLATE.render(w, map);
         }
 
         if (map.containsKey("${ISSUE}")) {
             ISSUE_TEMPLATE.render(w, map);
diff a/webrev/src/main/java/org/openjdk/skara/webrev/MetadataFormatter.java b/webrev/src/main/java/org/openjdk/skara/webrev/MetadataFormatter.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/MetadataFormatter.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/MetadataFormatter.java
@@ -21,11 +21,29 @@
  * questions.
  */
 package org.openjdk.skara.webrev;
 
 import org.openjdk.skara.vcs.*;
+import org.openjdk.skara.vcs.openjdk.Issue;
+
+import java.util.function.Function;
 
 class MetadataFormatter {
+    private final Function<String, String> issueLinker;
+
+    MetadataFormatter(Function<String, String> issueLinker) {
+        this.issueLinker = issueLinker;
+    }
+
     String format(CommitMetadata metadata) {
-        return "<u>" + metadata.hash().abbreviate() +"</u>: " + metadata.message().get(0);
+        var prefix = metadata.hash().abbreviate() + ": ";
+        var subject = metadata.message().get(0);
+        var issue = Issue.fromString(subject);
+        if (issueLinker != null && issue.isPresent()) {
+            var id = issue.get().id();
+            var desc = issue.get().description();
+            var url = issueLinker.apply(id);
+            return prefix + "<a href=\"" + url + "\">" + id + "</a>: " + desc;
+        }
+        return prefix + subject;
     }
 }
diff a/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java b/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
@@ -27,10 +27,11 @@
 import java.io.*;
 import java.net.URISyntaxException;
 import java.nio.channels.FileChannel;
 import java.nio.file.*;
 import java.util.*;
+import java.util.function.Function;
 
 import static java.nio.file.StandardOpenOption.*;
 
 public class Webrev {
     private static final String ANCNAV_HTML = "navigation.html";
@@ -58,10 +59,12 @@
         private String username;
         private String upstream;
         private String pullRequest;
         private String branch;
         private String issue;
+        private Function<String, String> issueLinker;
+        private Function<String, String> commitLinker;
         private String version;
         private List<Path> files = List.of();
 
         Builder(ReadOnlyRepository repository, Path output) {
             this.repository = repository;
@@ -96,10 +99,20 @@
         public Builder issue(String issue) {
             this.issue = issue;
             return this;
         }
 
+        public Builder issueLinker(Function<String, String> issueLinker) {
+            this.issueLinker = issueLinker;
+            return this;
+        }
+
+        public Builder commitLinker(Function<String, String> commitLinker) {
+            this.commitLinker = commitLinker;
+            return this;
+        }
+
         public Builder version(String version) {
             this.version = version;
             return this;
         }
 
@@ -172,11 +185,11 @@
                 navigations.addLast(new Navigation(prev, next));
             }
 
             var headHash = head == null ? repository.head() : head;
             var fileViews = new ArrayList<FileView>();
-            var formatter = new MetadataFormatter();
+            var formatter = new MetadataFormatter(issueLinker);
             for (var patch : patches) {
                 var status = patch.status();
                 var path = status.isDeleted() ?
                     patch.source().path().get() :
                     patch.target().path().get();
@@ -192,20 +205,23 @@
             }
 
             var total = fileViews.stream().map(FileView::stats).mapToInt(WebrevStats::total).sum();
             var stats = new WebrevStats(diff.added(), diff.removed(), diff.modified(), total);
 
+            var issueForWebrev = issue == null ? null : issueLinker.apply(issue);
+            var tailEndURL = commitLinker == null ? null : commitLinker.apply(tailEnd.hex());
             try (var w = Files.newBufferedWriter(output.resolve("index.html"))) {
                 var index = new IndexView(fileViews,
                                           title,
                                           username,
                                           upstream,
                                           branch,
                                           pullRequest,
-                                          issue,
+                                          issueForWebrev,
                                           version,
                                           tailEnd,
+                                          tailEndURL,
                                           output.relativize(patchFile),
                                           stats);
                 index.render(w);
 
             }
