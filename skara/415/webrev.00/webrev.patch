diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -231,13 +231,13 @@
         }
 
         return issues;
     }
 
-    private static String jbsProjectFromJcheckConf(Repository repo) throws IOException {
-        var conf = JCheckConfiguration.from(repo, repo.resolve("master").orElseThrow(() ->
-            new IOException("Could not resolve 'master' branch")
+    private static String jbsProjectFromJcheckConf(Repository repo, String targetBranch) throws IOException {
+        var conf = JCheckConfiguration.from(repo, repo.resolve(targetBranch).orElseThrow(() ->
+            new IOException("Could not resolve '" + targetBranch + "' branch")
         ));
 
         return conf.general().jbs();
     }
 
@@ -896,13 +896,61 @@
                     System.err.println("");
                     System.exit(1);
                 }
             }
 
+            var remoteRepo = host.repository(projectName(uri)).orElseThrow(() ->
+                    new IOException("Could not find repository at " + uri.toString())
+            );
+            if (token == null) {
+                GitCredentials.approve(credentials);
+            }
+            var parentRepo = remoteRepo.parent().orElseThrow(() ->
+                    new IOException("error: remote repository " + remotePullPath + " is not a fork of any repository")
+            );
+
             var targetBranch = getOption("branch", "create", arguments);
             if (targetBranch == null) {
-                targetBranch = "master";
+                var upstreamBranchNames = repo.remoteBranches(parentRepo.webUrl().toString())
+                                              .stream()
+                                              .map(r -> r.name())
+                                              .collect(Collectors.toSet());
+                var remoteBranches = repo.branches(remote);
+                var candidates = new ArrayList<Branch>();
+                for (var b : remoteBranches) {
+                    var withoutRemotePrefix = b.name().substring(remote.length() + 1);
+                    if (upstreamBranchNames.contains(withoutRemotePrefix)) {
+                        candidates.add(b);
+                    }
+                }
+
+                var localBranches = repo.branches();
+                Branch closest = null;
+                var shortestDistance = Integer.MAX_VALUE;
+                for (var b : candidates) {
+                    var from = b.name();
+                    for (var localBranch : localBranches) {
+                        var trackingBranch = repo.upstreamFor(localBranch);
+                        if (trackingBranch.isPresent() &&
+                            trackingBranch.get().equals(b.name())) {
+                            from = localBranch.name();
+                        }
+                    }
+                    var distance = repo.commitMetadata(from + "..." + currentBranch.name()).size();
+                    if (distance < shortestDistance) {
+                        closest = b;
+                        shortestDistance = distance;
+                    }
+                }
+
+                if (closest != null) {
+                    targetBranch = closest.name().substring(remote.length() + 1);
+                } else {
+                    System.err.println("error: cannot automatically infer target branch");
+                    System.err.println("       use --branch to specify target branch");
+                    System.exit(1);
+                }
             }
             var commits = repo.commits(targetBranch + ".." + upstream.get()).asList();
             if (commits.isEmpty()) {
                 System.err.println("error: no difference between branches " + targetBranch + " and " + currentBranch.name());
                 System.err.println("       Cannot create an empty pull request, have you committed?");
@@ -916,20 +964,11 @@
                 if (err != 0) {
                     System.exit(err);
                 }
             }
 
-            var remoteRepo = host.repository(projectName(uri)).orElseThrow(() ->
-                    new IOException("Could not find repository at " + uri.toString())
-            );
-            if (token == null) {
-                GitCredentials.approve(credentials);
-            }
-            var parentRepo = remoteRepo.parent().orElseThrow(() ->
-                    new IOException("error: remote repository " + remotePullPath + " is not a fork of any repository"));
-
-            var project = jbsProjectFromJcheckConf(repo);
+            var project = jbsProjectFromJcheckConf(repo, targetBranch);
             var issue = getIssue(currentBranch, project);
             var file = Files.createTempFile("PULL_REQUEST_", ".md");
             if (issue.isPresent()) {
                 Files.writeString(file, format(issue.get()) + "\n\n");
             } else if (commits.size() == 1) {
diff a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
@@ -32,10 +32,11 @@
     Hash head() throws IOException;
     Optional<Branch> currentBranch() throws IOException;
     Optional<Bookmark> currentBookmark() throws IOException;
     Branch defaultBranch() throws IOException;
     List<Branch> branches() throws IOException;
+    List<Branch> branches(String remote) throws IOException;
     Optional<Tag> defaultTag() throws IOException;
     List<Tag> tags() throws IOException;
     Commits commits() throws IOException;
     Commits commits(int n) throws IOException;
     Commits commits(boolean reverse) throws IOException;
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -118,10 +118,19 @@
                            .map(Branch::new)
                            .collect(Collectors.toList());
         }
     }
 
+    public List<Branch> branches(String remote) throws IOException {
+        try (var p = capture("git", "for-each-ref", "--format=%(refname:short)", "refs/remotes/" + remote + "/")) {
+            return await(p).stdout()
+                           .stream()
+                           .map(Branch::new)
+                           .collect(Collectors.toList());
+        }
+    }
+
     public List<Tag> tags() throws IOException {
         try (var p = capture("git", "for-each-ref", "--format=%(refname:short)", "refs/tags")) {
             return await(p).stdout()
                            .stream()
                            .map(Tag::new)
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -130,10 +130,16 @@
                            .map(Branch::new)
                            .collect(Collectors.toList());
         }
     }
 
+    @Override
+    public List<Branch> branches(String remote) throws IOException {
+        // Mercurial does not have namespacing of branch names
+        return branches();
+    }
+
     @Override
     public List<Tag> tags() throws IOException {
         try (var p = capture("hg", "tags")) {
             return await(p).stdout()
                            .stream()
