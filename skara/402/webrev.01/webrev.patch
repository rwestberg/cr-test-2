diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
@@ -105,11 +105,11 @@
 
     static String composeRevision(PullRequest pr, Repository localRepository, Hash base, Hash head, Hash lastBase, Hash lastHead) {
         try {
             if (base.equals(lastBase)) {
                 if (localRepository.isAncestor(lastHead, head)) {
-                    var updateCount = localRepository.commits(lastHead.hex() + ".." + head.hex()).stream().count();
+                    var updateCount = localRepository.commitMetadata(lastHead.hex() + ".." + head.hex()).size();
                     return "The pull request has been updated with " + updateCount + " additional commit" + (updateCount != 1 ? "s" : "") + ".";
                 } else {
                     return "Previous commits in this pull request have been removed, probably due to a force push. " +
                             "The incremental views will show differences compared to the previous content of the PR.";
                 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
@@ -65,28 +65,33 @@
         }
 
         var bestParent = candidates.stream()
                                    .map(c -> {
                                        try {
-                                           return new AbstractMap.SimpleEntry<>(c, localRepo.commits(c.hash().hex() + ".." + ref.hash(), true).asList());
+                                           return new AbstractMap.SimpleEntry<>(c, localRepo.commitMetadata(c.hash().hex() + ".." + ref.hash()));
                                        } catch (IOException e) {
                                            throw new UncheckedIOException(e);
                                        }
                                    })
                                    .min(Comparator.comparingInt(entry -> entry.getValue().size()))
                                    .orElseThrow();
         if (bestParent.getValue().size() > 1000) {
             throw new RuntimeException("Excessive amount of unique commits on new branch " + ref.name() +
                                                " detected (" + bestParent.getValue().size() + ") - skipping notifications");
         }
-        for (var updater : updaters) {
-            if (updater.isIdempotent() != runOnlyIdempotent) {
-                continue;
+        try {
+            var bestParentCommits = localRepo.commits(bestParent.getKey().hash().hex() + ".." + ref.hash(), true);
+            for (var updater : updaters) {
+                if (updater.isIdempotent() != runOnlyIdempotent) {
+                    continue;
+                }
+                var branch = new Branch(ref.name());
+                var parent = new Branch(bestParent.getKey().name());
+                updater.handleNewBranch(repository, localRepo, bestParentCommits.asList(), parent, branch);
             }
-            var branch = new Branch(ref.name());
-            var parent = new Branch(bestParent.getKey().name());
-            updater.handleNewBranch(repository, localRepo, bestParent.getValue(), parent, branch);
+        } catch (IOException e) {
+            e.printStackTrace();
         }
     }
 
     private void handleUpdatedRef(Repository localRepo, Reference ref, List<Commit> commits, boolean runOnlyIdempotent) {
         for (var updater : updaters) {
@@ -105,21 +110,21 @@
             log.warning("No previous history found for branch '" + branch + "' - resetting mark");
             handleNewRef(localRepo, ref, allRefs, true);
             history.setBranchHash(branch, ref.hash());
             handleNewRef(localRepo, ref, allRefs, false);
         } else {
-            var commits = localRepo.commits(lastHash.get() + ".." + ref.hash()).asList();
-            if (commits.size() == 0) {
+            var commitMetadata = localRepo.commitMetadata(lastHash.get() + ".." + ref.hash());
+            if (commitMetadata.size() == 0) {
                 return;
             }
-            if (commits.size() > 1000) {
+            if (commitMetadata.size() > 1000) {
                 history.setBranchHash(branch, ref.hash());
                 throw new RuntimeException("Excessive amount of new commits on branch " + branch.name() +
-                                                   " detected (" + commits.size() + ") - skipping notifications");
+                                                   " detected (" + commitMetadata.size() + ") - skipping notifications");
             }
 
-            Collections.reverse(commits);
+            var commits = localRepo.commits(lastHash.get() + ".." + ref.hash(), true).asList();
             handleUpdatedRef(localRepo, ref, commits, true);
             history.setBranchHash(branch, ref.hash());
             handleUpdatedRef(localRepo, ref, commits, false);
         }
     }
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
@@ -130,10 +130,14 @@
 
     public Optional<Commit> lookup(Tag t) throws IOException {
         return Optional.empty();
     }
 
+    public List<CommitMetadata> commitMetadata(String range) throws IOException {
+        return List.of();
+    }
+
     public List<CommitMetadata> commitMetadata() throws IOException {
         return List.of();
     }
 
     public Path root() throws IOException {
diff a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
@@ -46,10 +46,11 @@
     Commits commits(String range, int n, boolean reverse) throws IOException;
     Optional<Commit> lookup(Hash h) throws IOException;
     Optional<Commit> lookup(Branch b) throws IOException;
     Optional<Commit> lookup(Tag t) throws IOException;
     List<CommitMetadata> commitMetadata() throws IOException;
+    List<CommitMetadata> commitMetadata(String range) throws IOException;
     Path root() throws IOException;
     boolean exists() throws IOException;
     boolean isHealthy() throws IOException;
     boolean isEmpty() throws IOException;
     boolean isClean() throws IOException;
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -188,13 +188,13 @@
     public Optional<Commit> lookup(Tag t) throws IOException {
         var hash = resolve(t.name()).orElseThrow(() -> new IOException("Tag " + t.name() + " not found"));
         return lookup(hash);
     }
 
-    public List<CommitMetadata> commitMetadata() throws IOException {
-        var revisions = "--all";
-        var p = start("git", "rev-list", "--format=" + GitCommitMetadata.FORMAT, "--no-abbrev", "--reverse", "--no-color", revisions);
+    @Override
+    public List<CommitMetadata> commitMetadata(String range) throws IOException {
+        var p = start("git", "rev-list", "--format=" + GitCommitMetadata.FORMAT, "--no-abbrev", "--reverse", "--no-color", range);
         var reader = new UnixStreamReader(p.getInputStream());
         var result = new ArrayList<CommitMetadata>();
 
         var line = reader.readLine();
         while (line != null) {
@@ -208,10 +208,15 @@
 
         await(p);
         return result;
     }
 
+    @Override
+    public List<CommitMetadata> commitMetadata() throws IOException {
+        return commitMetadata("--all");
+    }
+
     private List<Hash> refs() throws IOException {
         try (var p = capture("git", "show-ref", "--hash", "--abbrev")) {
             var res = p.await();
             if (res.status() == -1) {
                 if (res.stdout().size() != 0) {
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -248,10 +248,15 @@
     public Optional<Commit> lookup(Tag t) throws IOException {
         var hash = resolve(t.name()).orElseThrow(() -> new IOException("Tag " + t.name() + " not found"));
         return lookup(hash);
     }
 
+    @Override
+    public List<CommitMetadata> commitMetadata(String range) throws IOException {
+        throw new RuntimeException("not implemented yet");
+    }
+
     @Override
     public List<CommitMetadata> commitMetadata() throws IOException {
         var ext = Files.createTempFile("ext", ".py");
         copyResource(EXT_PY, ext);
 
