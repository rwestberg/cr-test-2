diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
@@ -286,11 +286,13 @@
                     issue.setState(Issue.State.RESOLVED);
                     if (issue.assignees().isEmpty()) {
                         var username = findIssueUsername(commit);
                         if (username.isPresent()) {
                             var assignee = issueProject.issueTracker().user(username.get());
-                            issue.setAssignees(List.of(assignee));
+                            if (assignee.isPresent()) {
+                                issue.setAssignees(List.of(assignee.get()));
+                            }
                         }
                     }
                 }
 
                 if (commitLink) {
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryContinuousIntegration.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryContinuousIntegration.java
--- a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryContinuousIntegration.java
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryContinuousIntegration.java
@@ -57,12 +57,12 @@
     public boolean isValid() {
         return isValid;
     }
 
     @Override
-    public HostUser user(String username) {
-        return users.get(username);
+    public Optional<HostUser> user(String username) {
+        return Optional.ofNullable(users.get(username));
     }
 
     @Override
     public HostUser currentUser() {
         return currentUser;
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHost.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHost.java
--- a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHost.java
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHost.java
@@ -40,12 +40,12 @@
     public Optional<HostedRepository> repository(String name) {
         return Optional.empty();
     }
 
     @Override
-    public HostUser user(String username) {
-        return null;
+    public Optional<HostUser> user(String username) {
+        return Optional.empty();
     }
 
     @Override
     public HostUser currentUser() {
         return currentUserDetails;
diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -799,10 +799,12 @@
                 var pr = remoteRepo.createPullRequest(parentRepo, targetBranch, bookmark.name(), title, body);
                 if (arguments.contains("assignees")) {
                     var usernames = Arrays.asList(arguments.get("assignees").asString().split(","));
                     var assignees = usernames.stream()
                                              .map(u -> host.user(u))
+                                             .filter(Optional::isPresent)
+                                             .map(Optional::get)
                                              .collect(Collectors.toList());
                     pr.setAssignees(assignees);
                 }
                 System.out.println(pr.webUrl().toString());
                 Files.deleteIfExists(file);
@@ -1056,10 +1058,12 @@
             var assigneesOption = getOption("assignees", "create", arguments);
             if (assigneesOption != null) {
                 var usernames = Arrays.asList(assigneesOption.split(","));
                 var assignees = usernames.stream()
                                          .map(u -> host.user(u))
+                                         .filter(Optional::isPresent)
+                                         .map(Optional::get)
                                          .collect(Collectors.toList());
                 pr.setAssignees(assignees);
             }
             System.out.println(pr.webUrl().toString());
             Files.deleteIfExists(file);
@@ -1369,10 +1373,12 @@
             var assigneesOption = getOption("assignees", "update", arguments);
             if (assigneesOption != null) {
                 var usernames = Arrays.asList(assigneesOption.split(","));
                 var assignees = usernames.stream()
                     .map(u -> host.user(u))
+                    .filter(Optional::isPresent)
+                    .map(Optional::get)
                     .collect(Collectors.toList());
                 pr.setAssignees(assignees);
             }
         } else if (action.equals("status")) {
             String id = pullRequestIdArgument(arguments, repo);
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
@@ -126,11 +126,11 @@
         return Optional.empty();
     }
 
     private String getFullName(String userName) {
         var details = user(userName);
-        return details.fullName();
+        return details.get().fullName();
     }
 
     // Most GitHub API's return user information in this format
     HostUser parseUserField(JSONValue json) {
         return parseUserObject(json.get("user"));
@@ -180,13 +180,19 @@
             return Optional.empty();
         }
     }
 
     @Override
-    public HostUser user(String username) {
-        var details = request.get("users/" + URLEncoder.encode(username, StandardCharsets.UTF_8)).execute().asObject();
-        return asHostUser(details);
+    public Optional<HostUser> user(String username) {
+        var details = request.get("users/" + URLEncoder.encode(username, StandardCharsets.UTF_8))
+                             .onError(r -> JSON.of())
+                             .execute();
+        if (details.isNull()) {
+            return Optional.empty();
+        }
+
+        return Optional.of(asHostUser(details.asObject()));
     }
 
     private static HostUser asHostUser(JSONObject details) {
         // Always present
         var login = details.get("login").asString();
@@ -203,11 +209,11 @@
     public HostUser currentUser() {
         if (currentUser == null) {
             if (application != null) {
                 var appDetails = application.getAppDetails();
                 var appName = appDetails.get("name").asString() + "[bot]";
-                currentUser = user(appName);
+                currentUser = user(appName).get();
             } else if (pat != null) {
                 // Cannot always trust username in PAT, e.g. Git Credential Manager
                 // on Windows always return "PersonalAccessToken" as username.
                 // Query GitHub for the username instead.
                 var details = request.get("user").execute().asObject();
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
@@ -116,17 +116,26 @@
         var name = details.get("name").asString();
         return new HostUser(id, username, name);
     }
 
     @Override
-    public HostUser user(String username) {
-        var details = request.get("users").param("username", username).execute().asArray();
-        if (details.size() != 1) {
-            throw new RuntimeException("Couldn't find user: " + username);
+    public Optional<HostUser> user(String username) {
+        var details = request.get("users")
+                             .param("username", username)
+                             .onError(r -> JSON.of())
+                             .execute();
+
+        if (details.isNull()) {
+            return Optional.empty();
+        }
+
+        var users = details.asArray();
+        if (users.size() != 1) {
+            return Optional.empty();
         }
 
-        return parseUserDetails(details.get(0).asObject());
+        return Optional.of(parseUserDetails(users.get(0).asObject()));
     }
 
     @Override
     public HostUser currentUser() {
         var details = request.get("user").execute().asObject();
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
@@ -64,11 +64,11 @@
         return json.get("iid").toString();
     }
 
     @Override
     public HostUser author() {
-        return repository.forge().user(json.get("author").get("username").asString());
+        return repository.forge().user(json.get("author").get("username").asString()).get();
     }
 
     @Override
     public List<Review> reviews() {
 
@@ -120,11 +120,11 @@
                               if (createdAt.isAfter(cd.date)) {
                                   hash = cd.hash;
                               }
                           }
                           var id = obj.get("id").asInt();
-                          return new Review(createdAt, reviewer, verdict, hash, id, null);
+                          return new Review(createdAt, reviewer.get(), verdict, hash, id, null);
                       })
                       .collect(Collectors.toList());
     }
 
     @Override
@@ -622,11 +622,11 @@
     @Override
     public List<HostUser> assignees() {
         var assignee = json.get("assignee").asObject();
         if (assignee != null) {
             var user = repository.forge().user(assignee.get("username").asString());
-            return List.of(user);
+            return List.of(user.get());
         }
         return Collections.emptyList();
     }
 
     @Override
diff a/host/src/main/java/org/openjdk/skara/host/Host.java b/host/src/main/java/org/openjdk/skara/host/Host.java
--- a/host/src/main/java/org/openjdk/skara/host/Host.java
+++ b/host/src/main/java/org/openjdk/skara/host/Host.java
@@ -20,11 +20,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.host;
 
+import java.util.Optional;
+
 public interface Host {
     boolean isValid();
-    HostUser user(String username);
+    Optional<HostUser> user(String username);
     HostUser currentUser();
     boolean isMemberOf(String groupId, HostUser user);
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
@@ -91,18 +91,23 @@
     public IssueProject project(String name) {
         return new JiraProject(this, request, name);
     }
 
     @Override
-    public HostUser user(String username) {
+    public Optional<HostUser> user(String username) {
         var data = request.get("user")
                           .param("username", username)
+                          .onError(r -> JSON.of())
                           .execute();
+        if (data.isNull()) {
+            return Optional.empty();
+        }
+
         var user = new HostUser(data.get("name").asString(),
                                 data.get("name").asString(),
                                 data.get("displayName").asString());
-        return user;
+        return Optional.of(user);
     }
 
     @Override
     public HostUser currentUser() {
         var data = request.get("myself").execute();
diff a/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java b/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
--- a/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
+++ b/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
@@ -48,11 +48,11 @@
         try (var credentials = new HostCredentials(info)) {
             var project = credentials.getIssueProject();
 
             var userName = project.issueTracker().currentUser().userName();
             var user = project.issueTracker().user(userName);
-            assertEquals(userName, user.userName());
+            assertEquals(userName, user.get().userName());
 
             var issue = credentials.createIssue(project, "Test issue");
             issue.setTitle("Updated title");
             issue.setBody("This is now the body");
             var comment = issue.addComment("This is a comment");
@@ -82,11 +82,11 @@
         try (var credentials = new HostCredentials(info)) {
             var project = credentials.getIssueProject();
 
             var userName = project.issueTracker().currentUser().userName();
             var user = project.issueTracker().user(userName);
-            assertEquals(userName, user.userName());
+            assertEquals(userName, user.get().userName());
 
             var issue = credentials.createIssue(project, "Test issue");
             issue.setBody("This is now the body");
             var link = Link.create(URI.create("http://www.example.com/abc"), "openjdk/skara/13")
                            .relationship("reviewed in")
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -113,15 +113,17 @@
             return issueProject;
         }
     }
 
     @Override
-    public HostUser user(String username) {
-        return data.users.stream()
-                    .filter(user -> user.userName().equals(username))
-                    .findAny()
-                    .orElseThrow();
+    public Optional<HostUser> user(String username) {
+        return data.users
+                   .stream()
+                   .filter(user -> user.userName().equals(username))
+                   .map(user -> Optional.of(user))
+                   .findAny()
+                   .orElseThrow();
     }
 
     @Override
     public HostUser currentUser() {
         return data.users.get(currentUser);
