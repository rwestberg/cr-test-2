diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -42,34 +42,37 @@
     private final List<Comment> comments;
     private final List<Review> allReviews;
     private final List<Review> activeReviews;
     private final Set<String> labels;
     private final CensusInstance censusInstance;
+    private final boolean ignoreStaleReviews;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
     private final String progressMarker = "<!-- Anything below this marker will be automatically updated, please do not edit manually! -->";
     private final String mergeReadyMarker = "<!-- PullRequestBot merge is ready comment -->";
     private final Pattern mergeSourcePattern = Pattern.compile("^Merge ([-/\\w]+):([-\\w]+$)");
     private final Set<String> newLabels;
 
     private CheckRun(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments,
                      List<Review> allReviews, List<Review> activeReviews, Set<String> labels,
-                     CensusInstance censusInstance) {
+                     CensusInstance censusInstance, boolean ignoreStaleReviews) {
         this.workItem = workItem;
         this.pr = pr;
         this.prInstance = prInstance;
         this.comments = comments;
         this.allReviews = allReviews;
         this.activeReviews = activeReviews;
         this.labels = new HashSet<>(labels);
         this.newLabels = new HashSet<>(labels);
         this.censusInstance = censusInstance;
+        this.ignoreStaleReviews = ignoreStaleReviews;
     }
 
     static void execute(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments,
-                        List<Review> allReviews, List<Review> activeReviews, Set<String> labels, CensusInstance censusInstance) {
-        var run = new CheckRun(workItem, pr, prInstance, comments, allReviews, activeReviews, labels, censusInstance);
+                        List<Review> allReviews, List<Review> activeReviews, Set<String> labels, CensusInstance censusInstance,
+                        boolean ignoreStaleReviews) {
+        var run = new CheckRun(workItem, pr, prInstance, comments, allReviews, activeReviews, labels, censusInstance, ignoreStaleReviews);
         run.checkStatus();
     }
 
     private boolean isTargetBranchAllowed() {
         var matcher = workItem.bot.allowedTargetBranches().matcher(pr.targetRef());
@@ -262,11 +265,15 @@
         var reviewers = reviews.stream()
                                .filter(review -> review.verdict() == Review.Verdict.APPROVED)
                                .map(review -> {
                                    var entry = " * " + formatReviewer(review.reviewer());
                                    if (!review.hash().equals(pr.headHash())) {
-                                       entry += " **Note!** Review applies to " + review.hash();
+                                       if (ignoreStaleReviews) {
+                                           entry += " 🔄 Re-review required (review applies to " + review.hash() + ")";
+                                       } else {
+                                           entry += " ⚠️ Review applies to " + review.hash();
+                                       }
                                    }
                                    return entry;
                                })
                                .collect(Collectors.joining("\n"));
         if (reviewers.length() > 0) {
@@ -326,11 +333,11 @@
                 }
             }
         }
 
         getReviewersList(reviews).ifPresent(reviewers -> {
-            progressBody.append("\n\n## Approvers\n");
+            progressBody.append("\n\n## Reviewers\n");
             progressBody.append(reviewers);
         });
 
         getContributorsList(comments).ifPresent(contributors -> {
             progressBody.append("\n\n## Contributors\n");
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
@@ -151,11 +151,11 @@
                 var seedPath = bot.seedStorage().orElse(scratchPath.resolve("seeds"));
                 var prInstance = new PullRequestInstance(scratchPath.resolve("pr").resolve("check"),
                                                          new HostedRepositoryPool(seedPath),
                                                          pr,
                                                          bot.ignoreStaleReviews());
-                CheckRun.execute(this, pr, prInstance, comments, allReviews, activeReviews, labels, census);
+                CheckRun.execute(this, pr, prInstance, comments, allReviews, activeReviews, labels, census, bot.ignoreStaleReviews());
             } catch (IOException e) {
                 throw new UncheckedIOException(e);
             }
         }
     }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -189,20 +189,20 @@
             localRepo.push(editHash, author.url(), "refs/heads/edit", true);
             var authorPr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Let the status bot inspect the PR
             TestBotRunner.runPeriodicItems(checkBot);
-            assertFalse(authorPr.body().contains("Approvers"));
+            assertFalse(authorPr.body().contains("Reviewers"));
 
             // Approve it
             var reviewerPr = reviewer.pullRequest(authorPr.id());
-            reviewerPr.addReview(Review.Verdict.APPROVED, "Approved");
+            reviewerPr.addReview(Review.Verdict.APPROVED, "Reviewers");
             TestBotRunner.runPeriodicItems(checkBot);
 
             // Refresh the PR and check that it has been approved
             authorPr = author.pullRequest(authorPr.id());
-            assertTrue(authorPr.body().contains("Approvers"));
+            assertTrue(authorPr.body().contains("Reviewers"));
 
             // Update the file after approval
             editHash = CheckableRepository.appendAndCommit(localRepo, "Now I've gone and changed it");
             localRepo.push(editHash, author.url(), "edit", true);
 
@@ -217,19 +217,19 @@
             } while (authorPr.headHash().equals(lastHeadHash));
 
             // Check that the review is flagged as stale
             TestBotRunner.runPeriodicItems(checkBot);
             authorPr = author.pullRequest(authorPr.id());
-            assertTrue(authorPr.body().contains("Note"));
+            assertTrue(authorPr.body().contains("Review applies to"));
 
             // Now we can approve it again
             reviewerPr.addReview(Review.Verdict.APPROVED, "Approved");
             TestBotRunner.runPeriodicItems(checkBot);
 
             // Refresh the PR and check that it has been approved (once) and is no longer stale
             authorPr = author.pullRequest(authorPr.id());
-            assertTrue(authorPr.body().contains("Approvers"));
+            assertTrue(authorPr.body().contains("Reviewers"));
             assertEquals(1, authorPr.body().split("Generated Reviewer", -1).length - 1);
             assertTrue(authorPr.reviews().size() >= 1);
             assertFalse(authorPr.body().contains("Note"));
 
             // Add a review with disapproval
@@ -237,11 +237,11 @@
             commenterPr.addReview(Review.Verdict.DISAPPROVED, "Disapproved");
             TestBotRunner.runPeriodicItems(checkBot);
 
             // Refresh the PR and check that it still only approved once (but two reviews) and is no longer stale
             authorPr = author.pullRequest(authorPr.id());
-            assertTrue(authorPr.body().contains("Approvers"));
+            assertTrue(authorPr.body().contains("Reviewers"));
             assertEquals(1, authorPr.body().split("Generated Reviewer", -1).length - 1);
             assertTrue(authorPr.reviews().size() >= 2);
             assertFalse(authorPr.body().contains("Note"));
         }
     }
@@ -268,19 +268,19 @@
             localRepo.push(editHash, author.url(), "edit", true);
             var authorPr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Let the status bot inspect the PR
             TestBotRunner.runPeriodicItems(checkBot);
-            assertFalse(authorPr.body().contains("Approvers"));
+            assertFalse(authorPr.body().contains("Reviewers"));
 
             // Approve it
             authorPr.addReview(Review.Verdict.APPROVED, "Approved");
             TestBotRunner.runPeriodicItems(checkBot);
 
             // Refresh the PR and check that it has been approved
             authorPr = author.pullRequest(authorPr.id());
-            assertTrue(authorPr.body().contains("Approvers"));
+            assertTrue(authorPr.body().contains("Reviewers"));
 
             // Verify that the check failed
             var checks = authorPr.checks(editHash);
             assertEquals(1, checks.size());
             var check = checks.get("jcheck");
@@ -1159,10 +1159,11 @@
             // Check the status
             TestBotRunner.runPeriodicItems(checkBot);
 
             // The PR should be flagged as ready
             assertTrue(pr.labels().contains("ready"));
+            assertFalse(pr.body().contains("Re-review required"));
 
             // Add another commit
             editHash = CheckableRepository.replaceAndCommit(localRepo, "Another line");
             localRepo.push(editHash, author.url(), "edit", true);
 
@@ -1180,10 +1181,11 @@
             TestBotRunner.runPeriodicItems(checkBot);
 
             // The PR should no longer be ready, as the review is stale
             assertFalse(pr.labels().contains("ready"));
             assertTrue(pr.labels().contains("rfr"));
+            assertTrue(pr.body().contains("Re-review required"));
         }
     }
 
     @Test
     void targetBranchPattern(TestInfo testInfo) throws IOException {
