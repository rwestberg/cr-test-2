diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -189,20 +189,20 @@
             localRepo.push(editHash, author.url(), "refs/heads/edit", true);
             var authorPr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Let the status bot inspect the PR
             TestBotRunner.runPeriodicItems(checkBot);
-            assertFalse(authorPr.body().contains("Approvers"));
+            assertFalse(authorPr.body().contains("Reviewers"));
 
             // Approve it
             var reviewerPr = reviewer.pullRequest(authorPr.id());
-            reviewerPr.addReview(Review.Verdict.APPROVED, "Approved");
+            reviewerPr.addReview(Review.Verdict.APPROVED, "Reviewers");
             TestBotRunner.runPeriodicItems(checkBot);
 
             // Refresh the PR and check that it has been approved
             authorPr = author.pullRequest(authorPr.id());
-            assertTrue(authorPr.body().contains("Approvers"));
+            assertTrue(authorPr.body().contains("Reviewers"));
 
             // Update the file after approval
             editHash = CheckableRepository.appendAndCommit(localRepo, "Now I've gone and changed it");
             localRepo.push(editHash, author.url(), "edit", true);
 
@@ -217,19 +217,19 @@
             } while (authorPr.headHash().equals(lastHeadHash));
 
             // Check that the review is flagged as stale
             TestBotRunner.runPeriodicItems(checkBot);
             authorPr = author.pullRequest(authorPr.id());
-            assertTrue(authorPr.body().contains("Note"));
+            assertTrue(authorPr.body().contains("Review applies to"));
 
             // Now we can approve it again
             reviewerPr.addReview(Review.Verdict.APPROVED, "Approved");
             TestBotRunner.runPeriodicItems(checkBot);
 
             // Refresh the PR and check that it has been approved (once) and is no longer stale
             authorPr = author.pullRequest(authorPr.id());
-            assertTrue(authorPr.body().contains("Approvers"));
+            assertTrue(authorPr.body().contains("Reviewers"));
             assertEquals(1, authorPr.body().split("Generated Reviewer", -1).length - 1);
             assertTrue(authorPr.reviews().size() >= 1);
             assertFalse(authorPr.body().contains("Note"));
 
             // Add a review with disapproval
@@ -237,11 +237,11 @@
             commenterPr.addReview(Review.Verdict.DISAPPROVED, "Disapproved");
             TestBotRunner.runPeriodicItems(checkBot);
 
             // Refresh the PR and check that it still only approved once (but two reviews) and is no longer stale
             authorPr = author.pullRequest(authorPr.id());
-            assertTrue(authorPr.body().contains("Approvers"));
+            assertTrue(authorPr.body().contains("Reviewers"));
             assertEquals(1, authorPr.body().split("Generated Reviewer", -1).length - 1);
             assertTrue(authorPr.reviews().size() >= 2);
             assertFalse(authorPr.body().contains("Note"));
         }
     }
@@ -268,19 +268,19 @@
             localRepo.push(editHash, author.url(), "edit", true);
             var authorPr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Let the status bot inspect the PR
             TestBotRunner.runPeriodicItems(checkBot);
-            assertFalse(authorPr.body().contains("Approvers"));
+            assertFalse(authorPr.body().contains("Reviewers"));
 
             // Approve it
             authorPr.addReview(Review.Verdict.APPROVED, "Approved");
             TestBotRunner.runPeriodicItems(checkBot);
 
             // Refresh the PR and check that it has been approved
             authorPr = author.pullRequest(authorPr.id());
-            assertTrue(authorPr.body().contains("Approvers"));
+            assertTrue(authorPr.body().contains("Reviewers"));
 
             // Verify that the check failed
             var checks = authorPr.checks(editHash);
             assertEquals(1, checks.size());
             var check = checks.get("jcheck");
@@ -1159,10 +1159,11 @@
             // Check the status
             TestBotRunner.runPeriodicItems(checkBot);
 
             // The PR should be flagged as ready
             assertTrue(pr.labels().contains("ready"));
+            assertFalse(pr.body().contains("Re-review required"));
 
             // Add another commit
             editHash = CheckableRepository.replaceAndCommit(localRepo, "Another line");
             localRepo.push(editHash, author.url(), "edit", true);
 
@@ -1180,10 +1181,11 @@
             TestBotRunner.runPeriodicItems(checkBot);
 
             // The PR should no longer be ready, as the review is stale
             assertFalse(pr.labels().contains("ready"));
             assertTrue(pr.labels().contains("rfr"));
+            assertTrue(pr.body().contains("Re-review required"));
         }
     }
 
     @Test
     void targetBranchPattern(TestInfo testInfo) throws IOException {
