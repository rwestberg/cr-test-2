diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -47,11 +47,12 @@
     private final boolean ignoreStaleReviews;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
     private final String progressMarker = "<!-- Anything below this marker will be automatically updated, please do not edit manually! -->";
     private final String mergeReadyMarker = "<!-- PullRequestBot merge is ready comment -->";
-    private final Pattern mergeSourcePattern = Pattern.compile("^Merge ([-/\\w]+):([-\\w]+$)");
+    private final Pattern mergeSourceFullPattern = Pattern.compile("^Merge ([-/\\w]+):([-\\w]+)$");
+    private final Pattern mergeSourceBranchOnlyPattern = Pattern.compile("^Merge ([-\\w]+)$");
     private final Set<String> newLabels;
 
     private CheckRun(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments,
                      List<Review> allReviews, List<Review> activeReviews, Set<String> labels,
                      CensusInstance censusInstance, boolean ignoreStaleReviews) {
@@ -105,25 +106,31 @@
         }
 
         return ((names.size() == 1) && emails.size() == 1);
     }
 
-    private Optional<String> mergeSourceRepository() {
-        var repoMatcher = mergeSourcePattern.matcher(pr.title());
-        if (!repoMatcher.matches()) {
-            return Optional.empty();
+    private static class MergeSource {
+        private final String repositoryName;
+        private final String branchName;
+
+        private MergeSource(String repositoryName, String branchName) {
+            this.repositoryName = repositoryName;
+            this.branchName = branchName;
         }
-        return Optional.of(repoMatcher.group(1));
     }
 
-    private Optional<String> mergeSourceBranch() {
-        var branchMatcher = mergeSourcePattern.matcher(pr.title());
-        if (!branchMatcher.matches()) {
-            return Optional.empty();
+    private Optional<MergeSource> mergeSource() {
+        var repoMatcher = mergeSourceFullPattern.matcher(pr.title());
+        if (!repoMatcher.matches()) {
+            var branchMatcher = mergeSourceBranchOnlyPattern.matcher(pr.title());
+            if (!branchMatcher.matches()) {
+                return Optional.empty();
+            }
+            return Optional.of(new MergeSource(pr.repository().name(), branchMatcher.group(1)));
         }
-        var mergeSourceBranch = branchMatcher.group(2);
-        return Optional.of(mergeSourceBranch);
+
+        return Optional.of(new MergeSource(repoMatcher.group(1), repoMatcher.group(2)));
     }
 
     // Additional bot-specific checks that are not handled by JCheck
     private List<String> botSpecificChecks() throws IOException {
         var ret = new ArrayList<String>();
@@ -153,29 +160,28 @@
             } else {
                 if (!commits.get(0).isMerge()) {
                     ret.add("The top commit must be a merge commit.");
                 }
 
-                var sourceRepo = mergeSourceRepository();
-                var sourceBranch = mergeSourceBranch();
-                if (sourceBranch.isPresent() && sourceRepo.isPresent()) {
+                var source = mergeSource();
+                if (source.isPresent()) {
                     try {
-                        var mergeSourceRepo = pr.repository().forge().repository(sourceRepo.get()).orElseThrow(() ->
-                                new RuntimeException("Could not find repository " + sourceRepo.get())
+                        var mergeSourceRepo = pr.repository().forge().repository(source.get().repositoryName).orElseThrow(() ->
+                                new RuntimeException("Could not find repository " + source.get().repositoryName)
                         );
                         try {
-                            var sourceHash = prInstance.localRepo().fetch(mergeSourceRepo.url(), sourceBranch.get());
+                            var sourceHash = prInstance.localRepo().fetch(mergeSourceRepo.url(), source.get().branchName);
                             if (!prInstance.localRepo().isAncestor(commits.get(1).hash(), sourceHash)) {
                                 ret.add("The merge contains commits that are not ancestors of the source");
                             }
                         } catch (IOException e) {
-                            ret.add("Could not fetch branch `" + sourceBranch.get() + "` from project `" +
-                                            sourceRepo.get() + "` - check that they are correct.");
+                            ret.add("Could not fetch branch `" + source.get().branchName + "` from project `" +
+                                            source.get().repositoryName + "` - check that they are correct.");
                         }
                     } catch (RuntimeException e) {
                         ret.add("Could not find project `" +
-                                        sourceRepo.get() + "` - check that it is correct.");
+                                        source.get().repositoryName + "` - check that it is correct.");
                     }
                 } else {
                     ret.add("Could not determine the source for this merge. A Merge PR title must be specified on the format: " +
                             "Merge `project`:`branch` to allow verification of the merge contents.");
                 }
