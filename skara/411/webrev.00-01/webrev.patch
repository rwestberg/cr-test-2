diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
@@ -146,12 +146,13 @@
                 log.info("Skipping check of integrated PR");
                 return;
             }
 
             try {
+                var seedPath = bot.seedStorage().orElse(scratchPath.resolve("seeds"));
                 var prInstance = new PullRequestInstance(scratchPath.resolve("pr"),
-                                                         bot.seedStorage().orElse(scratchPath.resolve("seeds")),
+                                                         new HostedRepositoryPool(seedPath),
                                                          pr,
                                                          bot.ignoreStaleReviews());
                 CheckRun.execute(this, pr, prInstance, comments, allReviews, activeReviews, labels, census);
             } catch (IOException e) {
                 throw new UncheckedIOException(e);
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
@@ -76,12 +76,13 @@
         // Run a final jcheck to ensure the change has been properly reviewed
         try {
             var sanitizedUrl = URLEncoder.encode(pr.repository().webUrl().toString(), StandardCharsets.UTF_8);
             var path = scratchPath.resolve("pr.integrate").resolve(sanitizedUrl);
 
+            var seedPath = bot.seedStorage().orElse(scratchPath.resolve("seeds"));
             var prInstance = new PullRequestInstance(path,
-                                                     bot.seedStorage().orElse(scratchPath.resolve("seeds")),
+                                                     new HostedRepositoryPool(seedPath),
                                                      pr,
                                                      bot.ignoreStaleReviews());
             var localHash = prInstance.commit(censusInstance.namespace(), censusInstance.configuration().census().domain(), null);
 
             // Validate the target hash if requested
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.forge.*;
 
 import java.io.*;
 import java.nio.file.Path;
 import java.util.*;
 import java.util.function.Consumer;
@@ -61,12 +61,13 @@
     public void run(Path scratchPath) {
         if (bot.currentLabels().containsKey(pr.headHash())) {
             return;
         }
         try {
+            var seedPath = bot.seedStorage().orElse(scratchPath.resolve("seeds"));
             var prInstance = new PullRequestInstance(scratchPath.resolve("labeler"),
-                                                     bot.seedStorage().orElse(scratchPath.resolve("seeds")),
+                                                     new HostedRepositoryPool(seedPath),
                                                      pr,
                                                      bot.ignoreStaleReviews());
             var newLabels = getLabels(prInstance);
             var currentLabels = pr.labels().stream()
                                   .filter(key -> bot.labelPatterns().containsKey(key))
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -41,19 +41,18 @@
     private final Hash targetHash;
     private final Hash headHash;
     private final Hash baseHash;
     private final boolean ignoreStaleReviews;
 
-    PullRequestInstance(Path localRepoPath, Path seedPath, PullRequest pr, boolean ignoreStaleReviews) throws IOException  {
+    PullRequestInstance(Path localRepoPath, HostedRepositoryPool hostedRepositoryPool, PullRequest pr, boolean ignoreStaleReviews) throws IOException  {
         this.pr = pr;
         this.ignoreStaleReviews = ignoreStaleReviews;
 
-        // Materialize the PR's target ref
+        // Materialize the PR's source and target ref
         var repository = pr.repository();
-        var hostedRepositoryInstance = new HostedRepositoryInstance(repository, seedPath, pr.targetRef());
-        localRepo = hostedRepositoryInstance.checkout(localRepoPath);
-        localRepo.fetch(repository.url(), "+" + pr.sourceRef() + ":pr_prinstance_" + pr.id());
+        localRepo = hostedRepositoryPool.checkout(pr, localRepoPath);
+        localRepo.fetch(repository.url(), "+" + pr.targetRef() + ":pr_prinstance");
 
         targetHash = pr.targetHash();
         headHash = pr.headHash();
         baseHash = localRepo.mergeBase(targetHash, headHash);
     }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.issuetracker.Comment;
 import org.openjdk.skara.vcs.Hash;
 
 import java.io.*;
 import java.net.URLEncoder;
@@ -71,12 +71,13 @@
         // Execute merge
         try {
             var sanitizedUrl = URLEncoder.encode(pr.repository().webUrl().toString(), StandardCharsets.UTF_8);
             var path = scratchPath.resolve("pr.sponsor").resolve(sanitizedUrl);
 
+            var seedPath = bot.seedStorage().orElse(scratchPath.resolve("seeds"));
             var prInstance = new PullRequestInstance(path,
-                                                     bot.seedStorage().orElse(scratchPath.resolve("seeds")),
+                                                     new HostedRepositoryPool(seedPath),
                                                      pr,
                                                      bot.ignoreStaleReviews());
             var localHash = prInstance.commit(censusInstance.namespace(), censusInstance.configuration().census().domain(),
                                          comment.author().id());
 
diff a/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryInstance.java b/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryInstance.java
--- a/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryInstance.java
+++ /dev/null
@@ -1,147 +0,0 @@
-/*
- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.forge;
-
-import org.openjdk.skara.vcs.*;
-
-import java.io.*;
-import java.nio.file.*;
-import java.util.*;
-import java.util.logging.Logger;
-
-public class HostedRepositoryInstance {
-    private final HostedRepository hostedRepository;
-    private final Path seed;
-    private final String ref;
-
-    private final Logger log = Logger.getLogger("org.openjdk.skara.forge");
-
-    public HostedRepositoryInstance(HostedRepository hostedRepository, Path seedStorage, String ref) {
-        this.hostedRepository = hostedRepository;
-        this.seed = seedStorage.resolve(hostedRepository.name());
-        this.ref = ref;
-    }
-
-    private static class NewClone {
-        private final Repository repository;
-        private final Hash fetchHead;
-
-        NewClone(Repository repository, Hash fetchHead) {
-            this.repository = repository;
-            this.fetchHead = fetchHead;
-        }
-
-        Repository repository() {
-            return repository;
-        }
-
-        Hash fetchHead() {
-            return fetchHead;
-        }
-    }
-
-    private void clearDirectory(Path directory) {
-        try {
-            Files.walk(directory)
-                 .map(Path::toFile)
-                 .sorted(Comparator.reverseOrder())
-                 .forEach(File::delete);
-        } catch (IOException io) {
-            throw new RuntimeException(io);
-        }
-    }
-
-    private void initializeSeed() throws IOException {
-        if (!Files.exists(seed)) {
-            Files.createDirectories(seed.getParent());
-            var tmpSeedFolder = seed.resolveSibling(seed.getFileName().toString() + "-" + UUID.randomUUID());
-            Repository.clone(hostedRepository.url(), tmpSeedFolder, true);
-            try {
-                Files.move(tmpSeedFolder, seed);
-                log.info("Seeded repository " + hostedRepository.name() + " into " + seed);
-            } catch (IOException e) {
-                log.info("Failed to populate seed folder " + seed + " - perhaps due to a benign race. Ignoring..");
-                clearDirectory(tmpSeedFolder);
-            }
-        }
-    }
-
-    private Repository cloneSeeded(Path path) throws IOException {
-        initializeSeed();
-        log.info("Using seed folder " + seed + " when cloning into " + path);
-        return Repository.clone(hostedRepository.url(), path, false, seed);
-    }
-
-    private NewClone fetchRef(Repository repository) throws IOException {
-        var fetchHead = repository.fetch(hostedRepository.url(), "+" + ref + ":" + ref);
-        return new NewClone(repository, fetchHead);
-    }
-
-    private NewClone materializeClone(Path path) throws IOException {
-        var localRepo = Repository.get(path);
-        if (localRepo.isEmpty()) {
-            return fetchRef(cloneSeeded(path));
-        }
-        else {
-            var localRepoInstance = localRepo.get();
-            if (!localRepoInstance.isHealthy()) {
-                var preserveUnhealthy = seed.resolveSibling(seed.getFileName().toString() + "-unhealthy-" + UUID.randomUUID());
-                log.severe("Unhealthy local repository detected - preserved in: " + preserveUnhealthy);
-                Files.move(localRepoInstance.root(), preserveUnhealthy);
-                return fetchRef(cloneSeeded(path));
-            }
-            else {
-                try {
-                    localRepoInstance.clean();
-                    return fetchRef(localRepoInstance);
-                } catch (IOException e) {
-                    var preserveUnclean = seed.resolveSibling(seed.getFileName().toString() + "-unclean-" + UUID.randomUUID());
-                    log.severe("Uncleanable local repository detected - preserved in: " + preserveUnclean);
-                    Files.move(localRepoInstance.root(), preserveUnclean);
-                    return fetchRef(cloneSeeded(path));
-                }
-            }
-        }
-    }
-
-    public Repository materialize(Path path) throws IOException {
-        var clone = materializeClone(path);
-        return clone.repository();
-    }
-
-    public Repository checkout(Path path) throws IOException {
-        var clone = materializeClone(path);
-        var localRepo = clone.repository();
-        try {
-            localRepo.checkout(clone.fetchHead(), true);
-        } catch (IOException e) {
-            var preserveUnchecked = seed.resolveSibling(seed.getFileName().toString() + "-unchecked-" + UUID.randomUUID());
-            log.severe("Uncheckoutable local repository detected - preserved in: " + preserveUnchecked);
-            Files.move(localRepo.root(), preserveUnchecked);
-            clone = fetchRef(cloneSeeded(path));
-            localRepo = clone.repository();
-            localRepo.checkout(clone.fetchHead(), true);
-        }
-        return localRepo;
-    }
-}
diff a/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java b/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java
@@ -0,0 +1,163 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.vcs.*;
+
+import java.io.*;
+import java.nio.file.*;
+import java.util.*;
+import java.util.logging.Logger;
+
+public class HostedRepositoryPool {
+    private final Path seedStorage;
+    private final Logger log = Logger.getLogger("org.openjdk.skara.forge");
+
+    public HostedRepositoryPool(Path seedStorage) {
+        this.seedStorage = seedStorage;
+    }
+
+    private class HostedRepositoryInstance {
+        private final HostedRepository hostedRepository;
+        private final Path seed;
+        private final String ref;
+
+        private HostedRepositoryInstance(HostedRepository hostedRepository, String ref) {
+            this.hostedRepository = hostedRepository;
+            this.seed = seedStorage.resolve(hostedRepository.name());
+            this.ref = ref;
+        }
+
+        private class NewClone {
+            private final Repository repository;
+            private final Hash fetchHead;
+
+            NewClone(Repository repository, Hash fetchHead) {
+                this.repository = repository;
+                this.fetchHead = fetchHead;
+            }
+
+            Repository repository() {
+                return repository;
+            }
+
+            Hash fetchHead() {
+                return fetchHead;
+            }
+        }
+
+        private void clearDirectory(Path directory) {
+            try {
+                Files.walk(directory)
+                     .map(Path::toFile)
+                     .sorted(Comparator.reverseOrder())
+                     .forEach(File::delete);
+            } catch (IOException io) {
+                throw new RuntimeException(io);
+            }
+        }
+
+        private void initializeSeed() throws IOException {
+            if (!Files.exists(seed)) {
+                Files.createDirectories(seed.getParent());
+                var tmpSeedFolder = seed.resolveSibling(seed.getFileName().toString() + "-" + UUID.randomUUID());
+                Repository.clone(hostedRepository.url(), tmpSeedFolder, true);
+                try {
+                    Files.move(tmpSeedFolder, seed);
+                    log.info("Seeded repository " + hostedRepository.name() + " into " + seed);
+                } catch (IOException e) {
+                    log.info("Failed to populate seed folder " + seed + " - perhaps due to a benign race. Ignoring..");
+                    clearDirectory(tmpSeedFolder);
+                }
+            }
+        }
+
+        private Repository cloneSeeded(Path path) throws IOException {
+            initializeSeed();
+            log.info("Using seed folder " + seed + " when cloning into " + path);
+            return Repository.clone(hostedRepository.url(), path, false, seed);
+        }
+
+        private NewClone fetchRef(Repository repository) throws IOException {
+            var fetchHead = repository.fetch(hostedRepository.url(), "+" + ref + ":" + ref);
+            return new NewClone(repository, fetchHead);
+        }
+
+        private NewClone materializeClone(Path path) throws IOException {
+            var localRepo = Repository.get(path);
+            if (localRepo.isEmpty()) {
+                return fetchRef(cloneSeeded(path));
+            } else {
+                var localRepoInstance = localRepo.get();
+                if (!localRepoInstance.isHealthy()) {
+                    var preserveUnhealthy = seed.resolveSibling(seed.getFileName().toString() + "-unhealthy-" + UUID.randomUUID());
+                    log.severe("Unhealthy local repository detected - preserved in: " + preserveUnhealthy);
+                    Files.move(localRepoInstance.root(), preserveUnhealthy);
+                    return fetchRef(cloneSeeded(path));
+                } else {
+                    try {
+                        localRepoInstance.clean();
+                        return fetchRef(localRepoInstance);
+                    } catch (IOException e) {
+                        var preserveUnclean = seed.resolveSibling(seed.getFileName().toString() + "-unclean-" + UUID.randomUUID());
+                        log.severe("Uncleanable local repository detected - preserved in: " + preserveUnclean);
+                        Files.move(localRepoInstance.root(), preserveUnclean);
+                        return fetchRef(cloneSeeded(path));
+                    }
+                }
+            }
+        }
+    }
+
+    public Repository materialize(HostedRepository hostedRepository, String ref, Path path) throws IOException {
+        var hostedRepositoryInstance = new HostedRepositoryInstance(hostedRepository, ref);
+        var clone = hostedRepositoryInstance.materializeClone(path);
+        return clone.repository();
+    }
+
+    public Repository materialize(PullRequest pr, Path path) throws IOException {
+        return materialize(pr.repository(), pr.sourceRef(), path);
+    }
+
+    public Repository checkout(HostedRepository hostedRepository, String ref, Path path) throws IOException {
+        var hostedRepositoryInstance = new HostedRepositoryInstance(hostedRepository, ref);
+        var clone = hostedRepositoryInstance.materializeClone(path);
+        var localRepo = clone.repository();
+        try {
+            localRepo.checkout(clone.fetchHead(), true);
+        } catch (IOException e) {
+            var preserveUnchecked = hostedRepositoryInstance.seed.resolveSibling(
+                    hostedRepositoryInstance.seed.getFileName().toString() + "-unchecked-" + UUID.randomUUID());
+            log.severe("Uncheckoutable local repository detected - preserved in: " + preserveUnchecked);
+            Files.move(localRepo.root(), preserveUnchecked);
+            clone = hostedRepositoryInstance.fetchRef(hostedRepositoryInstance.cloneSeeded(path));
+            localRepo = clone.repository();
+            localRepo.checkout(clone.fetchHead(), true);
+        }
+        return localRepo;
+    }
+
+    public Repository checkout(PullRequest pr, Path path) throws IOException {
+        return checkout(pr.repository(), pr.sourceRef(), path);
+    }
+}
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
@@ -58,10 +58,15 @@
 
     public List<Branch> branches() throws IOException {
         return branches;
     }
 
+    @Override
+    public List<Branch> branches(String remote) throws IOException {
+        return branches;
+    }
+
     void setBranches(List<Branch> branches) {
         this.branches = branches;
     }
 
     public Optional<Tag> defaultTag() throws IOException {
