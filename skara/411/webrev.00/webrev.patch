diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
@@ -146,11 +146,14 @@
                 log.info("Skipping check of integrated PR");
                 return;
             }
 
             try {
-                var prInstance = new PullRequestInstance(scratchPath.resolve("pr"), pr, bot.ignoreStaleReviews());
+                var prInstance = new PullRequestInstance(scratchPath.resolve("pr"),
+                                                         bot.seedStorage().orElse(scratchPath.resolve("seeds")),
+                                                         pr,
+                                                         bot.ignoreStaleReviews());
                 CheckRun.execute(this, pr, prInstance, comments, allReviews, activeReviews, labels, census);
             } catch (IOException e) {
                 throw new UncheckedIOException(e);
             }
         }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
@@ -76,11 +76,14 @@
         // Run a final jcheck to ensure the change has been properly reviewed
         try {
             var sanitizedUrl = URLEncoder.encode(pr.repository().webUrl().toString(), StandardCharsets.UTF_8);
             var path = scratchPath.resolve("pr.integrate").resolve(sanitizedUrl);
 
-            var prInstance = new PullRequestInstance(path, pr, bot.ignoreStaleReviews());
+            var prInstance = new PullRequestInstance(path,
+                                                     bot.seedStorage().orElse(scratchPath.resolve("seeds")),
+                                                     pr,
+                                                     bot.ignoreStaleReviews());
             var localHash = prInstance.commit(censusInstance.namespace(), censusInstance.configuration().census().domain(), null);
 
             // Validate the target hash if requested
             var rebaseMessage = new StringWriter();
             if (!args.isBlank()) {
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
@@ -61,11 +61,14 @@
     public void run(Path scratchPath) {
         if (bot.currentLabels().containsKey(pr.headHash())) {
             return;
         }
         try {
-            var prInstance = new PullRequestInstance(scratchPath.resolve("labeler"), pr, bot.ignoreStaleReviews());
+            var prInstance = new PullRequestInstance(scratchPath.resolve("labeler"),
+                                                     bot.seedStorage().orElse(scratchPath.resolve("seeds")),
+                                                     pr,
+                                                     bot.ignoreStaleReviews());
             var newLabels = getLabels(prInstance);
             var currentLabels = pr.labels().stream()
                                   .filter(key -> bot.labelPatterns().containsKey(key))
                                   .collect(Collectors.toSet());
 
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
@@ -26,10 +26,11 @@
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.issuetracker.IssueProject;
 import org.openjdk.skara.json.JSONValue;
 import org.openjdk.skara.vcs.Hash;
 
+import java.nio.file.Path;
 import java.util.*;
 import java.util.concurrent.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
@@ -43,19 +44,20 @@
     private final Set<String> readyLabels;
     private final Map<String, Pattern> readyComments;
     private final IssueProject issueProject;
     private final boolean ignoreStaleReviews;
     private final Pattern allowedTargetBranches;
+    private final Path seedStorage;
     private final ConcurrentMap<Hash, Boolean> currentLabels;
     private final PullRequestUpdateCache updateCache;
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
     PullRequestBot(HostedRepository repo, HostedRepository censusRepo, String censusRef,
                    Map<String, List<Pattern>> labelPatterns, Map<String, String> externalCommands,
                    Map<String, String> blockingLabels, Set<String> readyLabels,
                    Map<String, Pattern> readyComments, IssueProject issueProject, boolean ignoreStaleReviews,
-                   Pattern allowedTargetBranches) {
+                   Pattern allowedTargetBranches, Path seedStorage) {
         remoteRepo = repo;
         this.censusRepo = censusRepo;
         this.censusRef = censusRef;
         this.labelPatterns = labelPatterns;
         this.externalCommands = externalCommands;
@@ -63,10 +65,11 @@
         this.readyLabels = readyLabels;
         this.issueProject = issueProject;
         this.readyComments = readyComments;
         this.ignoreStaleReviews = ignoreStaleReviews;
         this.allowedTargetBranches = allowedTargetBranches;
+        this.seedStorage = seedStorage;
 
         this.currentLabels = new ConcurrentHashMap<>();
         this.updateCache = new PullRequestUpdateCache();
     }
 
@@ -178,6 +181,10 @@
     }
 
     Pattern allowedTargetBranches() {
         return allowedTargetBranches;
     }
+
+    Optional<Path> seedStorage() {
+        return Optional.ofNullable(seedStorage);
+    }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotBuilder.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotBuilder.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotBuilder.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotBuilder.java
@@ -23,10 +23,11 @@
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.issuetracker.IssueProject;
 
+import java.nio.file.Path;
 import java.util.*;
 import java.util.regex.Pattern;
 
 public class PullRequestBotBuilder {
     private HostedRepository repo;
@@ -38,10 +39,11 @@
     private Set<String> readyLabels = Set.of();
     private Map<String, Pattern> readyComments = Map.of();
     private IssueProject issueProject = null;
     private boolean ignoreStaleReviews = false;
     private Pattern allowedTargetBranches = Pattern.compile(".*");
+    private Path seedStorage = null;
 
     PullRequestBotBuilder() {
     }
 
     public PullRequestBotBuilder repo(HostedRepository repo) {
@@ -97,10 +99,16 @@
     public PullRequestBotBuilder allowedTargetBranches(String allowedTargetBranches) {
         this.allowedTargetBranches = Pattern.compile(allowedTargetBranches);
         return this;
     }
 
+    public PullRequestBotBuilder seedStorage(Path seedStorage) {
+        this.seedStorage = seedStorage;
+        return this;
+    }
+
     public PullRequestBot build() {
         return new PullRequestBot(repo, censusRepo, censusRef, labelPatterns, externalCommands, blockingLabels,
-                                  readyLabels, readyComments, issueProject, ignoreStaleReviews, allowedTargetBranches);
+                                  readyLabels, readyComments, issueProject, ignoreStaleReviews, allowedTargetBranches,
+                                  seedStorage);
     }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
@@ -71,11 +71,12 @@
                                            .censusRepo(censusRepo)
                                            .censusRef(censusRef)
                                            .blockingLabels(blockers)
                                            .readyLabels(readyLabels)
                                            .readyComments(readyComments)
-                                           .externalCommands(external);
+                                           .externalCommands(external)
+                                           .seedStorage(configuration.storageFolder().resolve("seeds"));
 
             if (repo.value().contains("labels")) {
                 var labelPatterns = new HashMap<String, List<Pattern>>();
                 for (var label : repo.value().get("labels").fields()) {
                     var patterns = label.value().stream()
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -41,20 +41,22 @@
     private final Hash targetHash;
     private final Hash headHash;
     private final Hash baseHash;
     private final boolean ignoreStaleReviews;
 
-    PullRequestInstance(Path localRepoPath, PullRequest pr, boolean ignoreStaleReviews) throws IOException  {
+    PullRequestInstance(Path localRepoPath, Path seedPath, PullRequest pr, boolean ignoreStaleReviews) throws IOException  {
         this.pr = pr;
         this.ignoreStaleReviews = ignoreStaleReviews;
-        var repository = pr.repository();
 
         // Materialize the PR's target ref
-        localRepo = Repository.materialize(localRepoPath, repository.url(),
-                                           "+" + pr.targetRef() + ":pr_prinstance_" + repository.name());
-        targetHash = localRepo.fetch(repository.url(), pr.targetRef());
-        headHash = localRepo.fetch(repository.url(), pr.headHash().hex());
+        var repository = pr.repository();
+        var hostedRepositoryInstance = new HostedRepositoryInstance(repository, seedPath, pr.targetRef());
+        localRepo = hostedRepositoryInstance.checkout(localRepoPath);
+        localRepo.fetch(repository.url(), "+" + pr.sourceRef() + ":pr_prinstance_" + pr.id());
+
+        targetHash = pr.targetHash();
+        headHash = pr.headHash();
         baseHash = localRepo.mergeBase(targetHash, headHash);
     }
 
     /**
      * The Review list is in chronological order, the latest one from a particular reviewer is the
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
@@ -71,11 +71,14 @@
         // Execute merge
         try {
             var sanitizedUrl = URLEncoder.encode(pr.repository().webUrl().toString(), StandardCharsets.UTF_8);
             var path = scratchPath.resolve("pr.sponsor").resolve(sanitizedUrl);
 
-            var prInstance = new PullRequestInstance(path, pr, bot.ignoreStaleReviews());
+            var prInstance = new PullRequestInstance(path,
+                                                     bot.seedStorage().orElse(scratchPath.resolve("seeds")),
+                                                     pr,
+                                                     bot.ignoreStaleReviews());
             var localHash = prInstance.commit(censusInstance.namespace(), censusInstance.configuration().census().domain(),
                                          comment.author().id());
 
             // Validate the target hash if requested
             var rebaseMessage = new StringWriter();
diff a/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryInstance.java b/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryInstance.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryInstance.java
@@ -0,0 +1,147 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.vcs.*;
+
+import java.io.*;
+import java.nio.file.*;
+import java.util.*;
+import java.util.logging.Logger;
+
+public class HostedRepositoryInstance {
+    private final HostedRepository hostedRepository;
+    private final Path seed;
+    private final String ref;
+
+    private final Logger log = Logger.getLogger("org.openjdk.skara.forge");
+
+    public HostedRepositoryInstance(HostedRepository hostedRepository, Path seedStorage, String ref) {
+        this.hostedRepository = hostedRepository;
+        this.seed = seedStorage.resolve(hostedRepository.name());
+        this.ref = ref;
+    }
+
+    private static class NewClone {
+        private final Repository repository;
+        private final Hash fetchHead;
+
+        NewClone(Repository repository, Hash fetchHead) {
+            this.repository = repository;
+            this.fetchHead = fetchHead;
+        }
+
+        Repository repository() {
+            return repository;
+        }
+
+        Hash fetchHead() {
+            return fetchHead;
+        }
+    }
+
+    private void clearDirectory(Path directory) {
+        try {
+            Files.walk(directory)
+                 .map(Path::toFile)
+                 .sorted(Comparator.reverseOrder())
+                 .forEach(File::delete);
+        } catch (IOException io) {
+            throw new RuntimeException(io);
+        }
+    }
+
+    private void initializeSeed() throws IOException {
+        if (!Files.exists(seed)) {
+            Files.createDirectories(seed.getParent());
+            var tmpSeedFolder = seed.resolveSibling(seed.getFileName().toString() + "-" + UUID.randomUUID());
+            Repository.clone(hostedRepository.url(), tmpSeedFolder, true);
+            try {
+                Files.move(tmpSeedFolder, seed);
+                log.info("Seeded repository " + hostedRepository.name() + " into " + seed);
+            } catch (IOException e) {
+                log.info("Failed to populate seed folder " + seed + " - perhaps due to a benign race. Ignoring..");
+                clearDirectory(tmpSeedFolder);
+            }
+        }
+    }
+
+    private Repository cloneSeeded(Path path) throws IOException {
+        initializeSeed();
+        log.info("Using seed folder " + seed + " when cloning into " + path);
+        return Repository.clone(hostedRepository.url(), path, false, seed);
+    }
+
+    private NewClone fetchRef(Repository repository) throws IOException {
+        var fetchHead = repository.fetch(hostedRepository.url(), "+" + ref + ":" + ref);
+        return new NewClone(repository, fetchHead);
+    }
+
+    private NewClone materializeClone(Path path) throws IOException {
+        var localRepo = Repository.get(path);
+        if (localRepo.isEmpty()) {
+            return fetchRef(cloneSeeded(path));
+        }
+        else {
+            var localRepoInstance = localRepo.get();
+            if (!localRepoInstance.isHealthy()) {
+                var preserveUnhealthy = seed.resolveSibling(seed.getFileName().toString() + "-unhealthy-" + UUID.randomUUID());
+                log.severe("Unhealthy local repository detected - preserved in: " + preserveUnhealthy);
+                Files.move(localRepoInstance.root(), preserveUnhealthy);
+                return fetchRef(cloneSeeded(path));
+            }
+            else {
+                try {
+                    localRepoInstance.clean();
+                    return fetchRef(localRepoInstance);
+                } catch (IOException e) {
+                    var preserveUnclean = seed.resolveSibling(seed.getFileName().toString() + "-unclean-" + UUID.randomUUID());
+                    log.severe("Uncleanable local repository detected - preserved in: " + preserveUnclean);
+                    Files.move(localRepoInstance.root(), preserveUnclean);
+                    return fetchRef(cloneSeeded(path));
+                }
+            }
+        }
+    }
+
+    public Repository materialize(Path path) throws IOException {
+        var clone = materializeClone(path);
+        return clone.repository();
+    }
+
+    public Repository checkout(Path path) throws IOException {
+        var clone = materializeClone(path);
+        var localRepo = clone.repository();
+        try {
+            localRepo.checkout(clone.fetchHead(), true);
+        } catch (IOException e) {
+            var preserveUnchecked = seed.resolveSibling(seed.getFileName().toString() + "-unchecked-" + UUID.randomUUID());
+            log.severe("Uncheckoutable local repository detected - preserved in: " + preserveUnchecked);
+            Files.move(localRepo.root(), preserveUnchecked);
+            clone = fetchRef(cloneSeeded(path));
+            localRepo = clone.repository();
+            localRepo.checkout(clone.fetchHead(), true);
+        }
+        return localRepo;
+    }
+}
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
@@ -26,11 +26,10 @@
 import org.openjdk.skara.vcs.hg.HgRepository;
 
 import java.io.IOException;
 import java.net.URI;
 import java.nio.file.Path;
-import java.nio.file.Files;
 import java.time.ZonedDateTime;
 import java.util.*;
 
 public interface Repository extends ReadOnlyRepository {
     Repository init() throws IOException;
@@ -191,15 +190,19 @@
     static Repository clone(URI from, Path to) throws IOException {
         return clone(from, to, false);
     }
 
     static Repository clone(URI from, Path to, boolean isBare) throws IOException {
-        return from.getPath().toString().endsWith(".git") ?
-            GitRepository.clone(from, to, isBare) : HgRepository.clone(from, to, isBare);
+        return clone(from, to, isBare, null);
+    }
+
+    static Repository clone(URI from, Path to, boolean isBare, Path seed) throws IOException {
+        return from.getPath().endsWith(".git") ?
+            GitRepository.clone(from, to, isBare, seed) : HgRepository.clone(from, to, isBare, seed);
     }
 
     static Repository mirror(URI from, Path to) throws IOException {
         return from.getPath().toString().endsWith(".git") ?
             GitRepository.mirror(from, to) :
-            HgRepository.clone(from, to, true); // hg does not have concept of "mirror"
+            HgRepository.clone(from, to, true, null); // hg does not have concept of "mirror"
     }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -1036,18 +1036,22 @@
             var lines = await(p).stdout();
             return lines.size() == 1 && !lines.get(0).isEmpty()? Optional.of(lines.get(0)) : Optional.empty();
         }
     }
 
-    public static Repository clone(URI from, Path to, boolean isBare) throws IOException {
+    public static Repository clone(URI from, Path to, boolean isBare, Path seed) throws IOException {
         var cmd = new ArrayList<String>();
         cmd.addAll(List.of("git", "clone"));
         if (isBare) {
             cmd.add("--bare");
         } else {
             cmd.add("--recurse-submodules");
         }
+        if (seed != null) {
+            cmd.add("--reference-if-able");
+            cmd.add(seed.toString());
+        }
         cmd.addAll(List.of(from.toString(), to.toString()));
         try (var p = capture(Path.of("").toAbsolutePath(), cmd)) {
             await(p);
         }
         return new GitRepository(to);
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -1075,11 +1075,11 @@
         // Mercurial doesn't have the concept of remotes like git,
         // a local branch must have the same name (if present) on the remote
         return Optional.of(b.name());
     }
 
-    public static Repository clone(URI from, Path to, boolean isBare) throws IOException {
+    public static Repository clone(URI from, Path to, boolean isBare, Path seed) throws IOException {
         var cmd = new ArrayList<String>();
         cmd.addAll(List.of("hg", "clone"));
         if (isBare) {
             cmd.add("--noupdate");
         }
@@ -1164,11 +1164,11 @@
     }
 
     @Override
     public void addSubmodule(String pullPath, Path path) throws IOException {
         var uri = Files.exists(Path.of(pullPath)) ? Path.of(pullPath).toUri().toString() : pullPath;
-        HgRepository.clone(URI.create(uri), root().resolve(path).toAbsolutePath(), false);
+        HgRepository.clone(URI.create(uri), root().resolve(path).toAbsolutePath(), false, null);
         var hgSub = root().resolve(".hgsub");
         Files.writeString(hgSub, path.toString() + " = " + pullPath + "\n",
                           StandardOpenOption.WRITE, StandardOpenOption.APPEND, StandardOpenOption.CREATE);
         add(List.of(hgSub));
     }
