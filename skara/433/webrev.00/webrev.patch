diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
@@ -28,10 +28,11 @@
 
 import java.net.URI;
 import java.nio.file.Path;
 import java.time.*;
 import java.util.*;
+import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 public class MailingListBridgeBot implements Bot {
     private final EmailAddress emailAddress;
     private final HostedRepository codeRepo;
@@ -53,10 +54,15 @@
     private final Duration sendInterval;
     private final Duration cooldown;
     private final Path seedStorage;
     private final CooldownQuarantine cooldownQuarantine;
 
+    private final Logger log = Logger.getLogger("org.openjdk.skara.bots.mlbridge");
+
+    private ZonedDateTime lastPartialUpdate;
+    private ZonedDateTime lastFullUpdate;
+
     MailingListBridgeBot(EmailAddress from, HostedRepository repo, HostedRepository archive, String archiveRef,
                          HostedRepository censusRepo, String censusRef, EmailAddress list,
                          Set<String> ignoredUsers, Set<Pattern> ignoredComments, URI listArchive, String smtpServer,
                          HostedRepository webrevStorageRepository, String webrevStorageRef,
                          Path webrevStorageBase, URI webrevStorageBaseUri, Set<String> readyLabels,
@@ -168,12 +174,24 @@
     }
 
     @Override
     public List<WorkItem> getPeriodicItems() {
         List<WorkItem> ret = new LinkedList<>();
+        List<PullRequest> prs;
+
+        if (lastFullUpdate == null || lastFullUpdate.isBefore(ZonedDateTime.now().minus(Duration.ofMinutes(10)))) {
+            lastFullUpdate = ZonedDateTime.now();
+            lastPartialUpdate = lastFullUpdate;
+            log.info("Fetching all open pull requests");
+            prs = codeRepo.pullRequests();
+        } else {
+            log.info("Fetching only pull requests updated after " + lastPartialUpdate.minus(cooldown));
+            prs = codeRepo.pullRequests(lastPartialUpdate.minus(cooldown));
+            lastPartialUpdate = ZonedDateTime.now();
+        }
 
-        for (var pr : codeRepo.pullRequests()) {
+        for (var pr : prs) {
             var quarantineStatus = cooldownQuarantine.status(pr);
             if (quarantineStatus == CooldownQuarantine.Status.IN_QUARANTINE) {
                 continue;
             }
             if ((quarantineStatus == CooldownQuarantine.Status.JUST_RELEASED) ||
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -1640,30 +1640,40 @@
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
 
             // Make a comment and run the check within the cooldown period
             int counter;
+            boolean noMailReceived = false;
             for (counter = 1; counter < 10; ++counter) {
                 var start = Instant.now();
                 pr.addComment("Looks good - " + counter + " -");
 
                 // The bot should not bridge the comment due to cooldown
                 TestBotRunner.runPeriodicItems(mlBot);
+                try {
+                    noMailReceived = false;
+                    listServer.processIncoming(Duration.ofMillis(1));
+                } catch (RuntimeException e) {
+                    noMailReceived = true;
+                }
                 var elapsed = Duration.between(start, Instant.now());
                 if (elapsed.compareTo(cooldown) < 0) {
                     break;
                 } else {
                     log.info("Didn't do the test in time - retrying (elapsed: " + elapsed + " required: " + cooldown + ")");
-                    // Make sure to run the bot once more after the cooldown has expired to reset the state
+                    // Ensure that the cooldown expires
                     Thread.sleep(cooldown.toMillis());
-                    TestBotRunner.runPeriodicItems(mlBot);
-                    listServer.processIncoming();
+                    // If no mail was received, we have to flush it out
+                    if (noMailReceived) {
+                        TestBotRunner.runPeriodicItems(mlBot);
+                        listServer.processIncoming();
+                    }
                     cooldown = cooldown.multipliedBy(2);
                     mlBot = mlBotBuilder.cooldown(cooldown).build();
                 }
             }
-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
+            assertTrue(noMailReceived);
 
             // But after the cooldown period has passed, it should
             Thread.sleep(cooldown.toMillis());
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
@@ -1722,31 +1732,41 @@
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
 
             // Make a new revision and run the check within the cooldown period
             int counter;
+            boolean noMailReceived = false;
             for (counter = 1; counter < 10; ++counter) {
                 var start = Instant.now();
                 var revHash = CheckableRepository.appendAndCommit(localRepo, "more stuff", "Update number - " + counter + " -");
                 localRepo.push(revHash, author.url(), "edit");
 
                 // The bot should not bridge the new revision due to cooldown
                 TestBotRunner.runPeriodicItems(mlBot);
+                try {
+                    noMailReceived = false;
+                    listServer.processIncoming(Duration.ofMillis(1));
+                } catch (RuntimeException e) {
+                    noMailReceived = true;
+                }
                 var elapsed = Duration.between(start, Instant.now());
                 if (elapsed.compareTo(cooldown) < 0) {
                     break;
                 } else {
                     log.info("Didn't do the test in time - retrying (elapsed: " + elapsed + " required: " + cooldown + ")");
-                    // Make sure to run the bot once more after the cooldown has expired to reset the state
+                    // Ensure that the cooldown expires
                     Thread.sleep(cooldown.toMillis());
-                    TestBotRunner.runPeriodicItems(mlBot);
-                    listServer.processIncoming();
+                    // If no mail was received, we have to flush it out
+                    if (noMailReceived) {
+                        TestBotRunner.runPeriodicItems(mlBot);
+                        listServer.processIncoming();
+                    }
                     cooldown = cooldown.multipliedBy(2);
                     mlBot = mlBotBuilder.cooldown(cooldown).build();
                 }
             }
-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
+            assertTrue(noMailReceived);
 
             // But after the cooldown period has passed, it should
             Thread.sleep(cooldown.toMillis());
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java
--- a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java
@@ -25,10 +25,11 @@
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.json.JSONValue;
 import org.openjdk.skara.vcs.*;
 
 import java.net.URI;
+import java.time.ZonedDateTime;
 import java.util.*;
 
 class InMemoryHostedRepository implements HostedRepository {
     Forge host;
     URI webUrl;
@@ -58,10 +59,15 @@
     @Override
     public List<PullRequest> pullRequests() {
         return null;
     }
 
+    @Override
+    public List<PullRequest> pullRequests(ZonedDateTime updatedAfter) {
+        return null;
+    }
+
     @Override
     public Optional<PullRequest> parsePullRequestUrl(String url) {
         return null;
     }
 
diff a/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java b/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java
@@ -24,10 +24,11 @@
 
 import org.openjdk.skara.json.JSONValue;
 import org.openjdk.skara.vcs.*;
 
 import java.net.URI;
+import java.time.ZonedDateTime;
 import java.util.*;
 
 public interface HostedRepository {
     Forge forge();
     PullRequest createPullRequest(HostedRepository target,
@@ -35,11 +36,22 @@
                                   String sourceRef,
                                   String title,
                                   List<String> body,
                                   boolean draft);
     PullRequest pullRequest(String id);
+
+    /**
+     * Returns a list of all open pull requests.
+     */
     List<PullRequest> pullRequests();
+
+    /**
+     * Returns a list of all pull requests (both open and closed) that have been updated after the
+     * provided time, ordered by latest updated first. If there are many pull requests that
+     * match, the list may have been truncated.
+     */
+    List<PullRequest> pullRequests(ZonedDateTime updatedAfter);
     List<PullRequest> findPullRequestsWithComment(String author, String body);
     Optional<PullRequest> parsePullRequestUrl(String url);
     String name();
     Optional<HostedRepository> parent();
     URI url();
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
@@ -27,10 +27,11 @@
 import org.openjdk.skara.network.*;
 import org.openjdk.skara.vcs.*;
 
 import java.net.URI;
 import java.nio.charset.StandardCharsets;
+import java.time.ZonedDateTime;
 import java.util.*;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 public class GitHubRepository implements HostedRepository {
@@ -127,10 +128,23 @@
         return request.get("pulls").execute().asArray().stream()
                       .map(jsonValue -> new GitHubPullRequest(this, jsonValue, request))
                       .collect(Collectors.toList());
     }
 
+    @Override
+    public List<PullRequest> pullRequests(ZonedDateTime updatedAfter) {
+        return request.get("pulls")
+                      .param("state", "all")
+                      .param("sort", "updated")
+                      .param("direction", "desc")
+                      .maxPages(1)
+                      .execute().asArray().stream()
+                      .map(jsonValue -> new GitHubPullRequest(this, jsonValue, request))
+                      .filter(pr -> pr.updatedAt().isAfter(updatedAfter))
+                      .collect(Collectors.toList());
+    }
+
     @Override
     public List<PullRequest> findPullRequestsWithComment(String author, String body) {
         var query = "\"" + body + "\" in:comments type:pr repo:" + repository;
         if (author != null) {
             query += " commenter:" + author;
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
@@ -27,11 +27,12 @@
 import org.openjdk.skara.network.*;
 import org.openjdk.skara.vcs.*;
 
 import java.net.*;
 import java.nio.charset.StandardCharsets;
-import java.time.Duration;
+import java.time.*;
+import java.time.format.DateTimeFormatter;
 import java.util.*;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 public class GitLabRepository implements HostedRepository {
@@ -110,10 +111,20 @@
                       .execute().stream()
                       .map(value -> new GitLabMergeRequest(this, value, request))
                       .collect(Collectors.toList());
     }
 
+    @Override
+    public List<PullRequest> pullRequests(ZonedDateTime updatedAfter) {
+        return request.get("merge_requests")
+                      .param("order_by", "updated_at")
+                      .param("updated_after", updatedAfter.format(DateTimeFormatter.ISO_DATE_TIME))
+                      .execute().stream()
+                      .map(value -> new GitLabMergeRequest(this, value, request))
+                      .collect(Collectors.toList());
+    }
+
     @Override
     public List<PullRequest> findPullRequestsWithComment(String author, String body) {
         throw new RuntimeException("not implemented yet");
     }
 
diff a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
@@ -27,10 +27,11 @@
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
 import java.net.*;
 import java.nio.file.Path;
+import java.time.ZonedDateTime;
 import java.util.*;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 public class TestHostedRepository extends TestIssueProject implements HostedRepository {
@@ -70,10 +71,18 @@
     @Override
     public List<PullRequest> pullRequests() {
         return new ArrayList<>(host.getPullRequests(this));
     }
 
+    @Override
+    public List<PullRequest> pullRequests(ZonedDateTime updatedAfter) {
+        return host.getPullRequests(this).stream()
+                   .filter(pr -> pr.updatedAt().isAfter(updatedAfter))
+                   .sorted(Comparator.comparing(PullRequest::updatedAt).reversed())
+                   .collect(Collectors.toList());
+    }
+
     @Override
     public List<PullRequest> findPullRequestsWithComment(String author, String body) {
         return pullRequests().stream()
                              .filter(pr -> pr.comments().stream()
                                                 .filter(comment -> author == null || comment.author().userName().equals(author))
