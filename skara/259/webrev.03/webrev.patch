diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -38,32 +38,24 @@
 import java.nio.charset.StandardCharsets;
 import java.nio.file.*;
 import java.util.*;
 import java.util.regex.Pattern;
 import java.util.concurrent.TimeUnit;
-import java.util.function.Supplier;
 import java.util.logging.Level;
+import java.util.regex.Matcher;
 import java.util.stream.Collectors;
 
 public class GitPr {
-    private static final StandardOpenOption APPEND = StandardOpenOption.APPEND;
     private static final Pattern ISSUE_ID_PATTERN = Pattern.compile("([A-Za-z][A-Za-z0-9]+)?-([0-9]+)");
     private static final Pattern ISSUE_MARKDOWN_PATTERN =
         Pattern.compile("^\\[([A-Z]+-[0-9]+)\\]\\(https:\\/\\/bugs.openjdk.java.net\\/browse\\/[A-Z]+-[0-9]+\\): .*$");
 
     private static void exit(String fmt, Object...args) {
         System.err.println(String.format(fmt, args));
         System.exit(1);
     }
 
-    private static <T> Supplier<T> die(String fmt, Object... args) {
-        return () -> {
-            exit(fmt, args);
-            return null;
-        };
-    }
-
     private static String gitConfig(String key) {
         try {
             var pb = new ProcessBuilder("git", "config", key);
             pb.redirectOutput(ProcessBuilder.Redirect.PIPE);
             pb.redirectError(ProcessBuilder.Redirect.DISCARD);
@@ -302,11 +294,21 @@
         }
         if (editor == null) {
             editor = "vi";
         }
 
-        var pb = new ProcessBuilder(editor, file.toString());
+        // As an editor command may have multiple arguments, we need to add each single one
+        // to the ProcessBuilder. Arguments are split by whitespace and can be quoted.
+        // e.g. I found core.editor =
+        // \"C:\\\\Program Files\\\\Notepad++\\\\notepad++.exe\" -multiInst -notabbar -nosession -noPlugin
+        List<String> editorParts = new ArrayList<>();
+        Matcher em = Pattern.compile("([^\"]\\S*|\".+?\")\\s*").matcher(editor);
+        while (em.find()) {
+            editorParts.add(em.group(1));
+        }
+        editorParts.add(file.toString());
+        var pb = new ProcessBuilder(editorParts);
         pb.inheritIO();
         var p = pb.start();
         try {
             return p.waitFor() == 0;
         } catch (InterruptedException e) {
