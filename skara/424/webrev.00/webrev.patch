diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
@@ -147,11 +147,11 @@
                 return;
             }
 
             try {
                 var seedPath = bot.seedStorage().orElse(scratchPath.resolve("seeds"));
-                var prInstance = new PullRequestInstance(scratchPath.resolve("pr"),
+                var prInstance = new PullRequestInstance(scratchPath.resolve("pr").resolve("check"),
                                                          new HostedRepositoryPool(seedPath),
                                                          pr,
                                                          bot.ignoreStaleReviews());
                 CheckRun.execute(this, pr, prInstance, comments, allReviews, activeReviews, labels, census);
             } catch (IOException e) {
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
@@ -145,11 +145,11 @@
             HelpCommand.external = bot.externalCommands();
         }
 
         var census = CensusInstance.create(bot.censusRepo(), bot.censusRef(), scratchPath.resolve("census"), pr);
         for (var entry : unprocessedCommands) {
-            processCommand(pr, census, scratchPath.resolve("pr"), entry.getKey(), entry.getValue(), comments);
+            processCommand(pr, census, scratchPath.resolve("pr").resolve("command"), entry.getKey(), entry.getValue(), comments);
         }
     }
 
     @Override
     public String toString() {
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
@@ -74,11 +74,11 @@
         }
 
         // Run a final jcheck to ensure the change has been properly reviewed
         try {
             var sanitizedUrl = URLEncoder.encode(pr.repository().webUrl().toString(), StandardCharsets.UTF_8);
-            var path = scratchPath.resolve("pr.integrate").resolve(sanitizedUrl);
+            var path = scratchPath.resolve("integrate").resolve(sanitizedUrl);
 
             var seedPath = bot.seedStorage().orElse(scratchPath.resolve("seeds"));
             var prInstance = new PullRequestInstance(path,
                                                      new HostedRepositoryPool(seedPath),
                                                      pr,
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
@@ -62,11 +62,11 @@
         if (bot.currentLabels().containsKey(pr.headHash())) {
             return;
         }
         try {
             var seedPath = bot.seedStorage().orElse(scratchPath.resolve("seeds"));
-            var prInstance = new PullRequestInstance(scratchPath.resolve("labeler"),
+            var prInstance = new PullRequestInstance(scratchPath.resolve("pr").resolve("labeler"),
                                                      new HostedRepositoryPool(seedPath),
                                                      pr,
                                                      bot.ignoreStaleReviews());
             var newLabels = getLabels(prInstance);
             var currentLabels = pr.labels().stream()
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
@@ -69,11 +69,11 @@
         reply.print("@" + pr.author().userName() + " ");
 
         // Execute merge
         try {
             var sanitizedUrl = URLEncoder.encode(pr.repository().webUrl().toString(), StandardCharsets.UTF_8);
-            var path = scratchPath.resolve("pr.sponsor").resolve(sanitizedUrl);
+            var path = scratchPath.resolve("sponsor").resolve(sanitizedUrl);
 
             var seedPath = bot.seedStorage().orElse(scratchPath.resolve("seeds"));
             var prInstance = new PullRequestInstance(path,
                                                      new HostedRepositoryPool(seedPath),
                                                      pr,
diff a/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java b/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java
--- a/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java
@@ -110,27 +110,30 @@
                 } catch (IOException e) {
                     log.severe("Failed to create seed parent folder: " + seed.getParent());
                     log.throwing("HostedRepositoryInstance", "preserveOldClone", e);
                 }
             }
-            var preserved = seed.resolveSibling(seed.getFileName().toString() + "-" + reason + "-" + UUID.randomUUID());
-            log.severe("Invalid local repository detected (" + reason + ") - preserved in: " + preserved);
-            try {
-                Files.move(path, preserved);
-            } catch (IOException e) {
-                log.severe("Failed to preserve old clone at " + path);
-                log.throwing("HostedRepositoryInstance", "preserveOldClone", e);
-            } finally {
-                if (Files.exists(path)) {
-                    clearDirectory(path);
+            if (Files.exists(path)) {
+                var preserved = seed.resolveSibling(seed.getFileName().toString() + "-" + reason + "-" + UUID.randomUUID());
+                log.severe("Invalid local repository detected (" + reason + ") - preserved in: " + preserved);
+                try {
+                    Files.move(path, preserved);
+                } catch (IOException e) {
+                    log.severe("Failed to preserve old clone at " + path);
+                    log.throwing("HostedRepositoryInstance", "preserveOldClone", e);
+                } finally {
+                    if (Files.exists(path)) {
+                        clearDirectory(path);
+                    }
                 }
             }
         }
 
         private NewClone materializeClone(Path path) throws IOException {
             var localRepo = Repository.get(path);
             if (localRepo.isEmpty()) {
+                removeOldClone(path, "norepo");
                 return fetchRef(cloneSeeded(path));
             } else {
                 var localRepoInstance = localRepo.get();
                 if (!localRepoInstance.isHealthy()) {
                     removeOldClone(path, "unhealthy");
