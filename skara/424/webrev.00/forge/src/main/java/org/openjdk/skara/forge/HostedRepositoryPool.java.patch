diff a/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java b/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java
--- a/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/HostedRepositoryPool.java
@@ -110,27 +110,30 @@
                 } catch (IOException e) {
                     log.severe("Failed to create seed parent folder: " + seed.getParent());
                     log.throwing("HostedRepositoryInstance", "preserveOldClone", e);
                 }
             }
-            var preserved = seed.resolveSibling(seed.getFileName().toString() + "-" + reason + "-" + UUID.randomUUID());
-            log.severe("Invalid local repository detected (" + reason + ") - preserved in: " + preserved);
-            try {
-                Files.move(path, preserved);
-            } catch (IOException e) {
-                log.severe("Failed to preserve old clone at " + path);
-                log.throwing("HostedRepositoryInstance", "preserveOldClone", e);
-            } finally {
-                if (Files.exists(path)) {
-                    clearDirectory(path);
+            if (Files.exists(path)) {
+                var preserved = seed.resolveSibling(seed.getFileName().toString() + "-" + reason + "-" + UUID.randomUUID());
+                log.severe("Invalid local repository detected (" + reason + ") - preserved in: " + preserved);
+                try {
+                    Files.move(path, preserved);
+                } catch (IOException e) {
+                    log.severe("Failed to preserve old clone at " + path);
+                    log.throwing("HostedRepositoryInstance", "preserveOldClone", e);
+                } finally {
+                    if (Files.exists(path)) {
+                        clearDirectory(path);
+                    }
                 }
             }
         }
 
         private NewClone materializeClone(Path path) throws IOException {
             var localRepo = Repository.get(path);
             if (localRepo.isEmpty()) {
+                removeOldClone(path, "norepo");
                 return fetchRef(cloneSeeded(path));
             } else {
                 var localRepoInstance = localRepo.get();
                 if (!localRepoInstance.isHealthy()) {
                     removeOldClone(path, "unhealthy");
