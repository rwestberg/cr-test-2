diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
@@ -39,10 +39,11 @@
     private final Pattern webUriPattern;
     private final String webUriReplacement;
     private final GitHubApplication application;
     private final Credential pat;
     private final RestRequest request;
+    private final RestRequest graphQL;
     private HostUser currentUser;
     private final Logger log = Logger.getLogger("org.openjdk.skara.forge.github");
 
     public GitHubHost(URI uri, GitHubApplication application, Pattern webUriPattern, String webUriReplacement) {
         this.uri = uri;
@@ -58,10 +59,29 @@
 
         request = new RestRequest(baseApi, () -> Arrays.asList(
                 "Authorization", "token " + getInstallationToken().orElseThrow(),
                 "Accept", "application/vnd.github.machine-man-preview+json",
                 "Accept", "application/vnd.github.antiope-preview+json"));
+
+        var graphQLAPI = URIBuilder.base(uri)
+                .appendSubDomain("api")
+                .setPath("/graphql")
+                .build();
+        graphQL = new RestRequest(graphQLAPI, () -> Arrays.asList(
+                "Authorization", "bearer " + getInstallationToken().orElseThrow(),
+                "Accept", "application/vnd.github.machine-man-preview+json",
+                "Accept", "application/vnd.github.antiope-preview+json",
+                "Accept", "application/vnd.github.shadow-cat-preview+json",
+                "Accept", "application/vnd.github.comfort-fade-preview+json"
+        ));
+    }
+
+    RestRequest graphQL() {
+        if (graphQL == null) {
+            throw new IllegalStateException("Cannot use GraphQL API without authorization");
+        }
+        return graphQL;
     }
 
     public GitHubHost(URI uri, Credential pat, Pattern webUriPattern, String webUriReplacement) {
         this.uri = uri;
         this.webUriPattern = webUriPattern;
@@ -74,10 +94,22 @@
                                 .setPath("/")
                                 .build();
 
         request = new RestRequest(baseApi, () -> Arrays.asList(
                 "Authorization", "token " + getInstallationToken().orElseThrow()));
+
+        var graphQLAPI = URIBuilder.base(uri)
+                .appendSubDomain("api")
+                .setPath("/graphql")
+                .build();
+        graphQL = new RestRequest(graphQLAPI, () -> Arrays.asList(
+                "Authorization", "bearer " + getInstallationToken().orElseThrow(),
+                "Accept", "application/vnd.github.machine-man-preview+json",
+                "Accept", "application/vnd.github.antiope-preview+json",
+                "Accept", "application/vnd.github.shadow-cat-preview+json",
+                "Accept", "application/vnd.github.comfort-fade-preview+json"
+        ));
     }
 
     GitHubHost(URI uri, Pattern webUriPattern, String webUriReplacement) {
         this.uri = uri;
         this.webUriPattern = webUriPattern;
@@ -89,10 +121,11 @@
                                 .appendSubDomain("api")
                                 .setPath("/")
                                 .build();
 
         request = new RestRequest(baseApi);
+        graphQL = null;
     }
 
     public URI getURI() {
         return uri;
     }
