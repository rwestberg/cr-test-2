diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -1394,20 +1394,31 @@
                 exit("error: missing pull request identifier");
             }
 
             var remoteRepo = getHostedRepositoryFor(uri, repo, host);
             var pr = remoteRepo.pullRequest(prId.asString());
+
+            var setDraft = getSwitch("draft", "set", arguments);
+            if (!pr.isDraft() && setDraft) {
+                exit("error: cannot transition non-draft pull request to draft");
+            }
+
             var assigneesOption = getOption("assignees", "set", arguments);
             if (assigneesOption != null) {
                 var usernames = Arrays.asList(assigneesOption.split(","));
                 var assignees = usernames.stream()
                     .map(u -> host.user(u))
                     .filter(Optional::isPresent)
                     .map(Optional::get)
                     .collect(Collectors.toList());
                 pr.setAssignees(assignees);
             }
+
+            var setNoDraft = getSwitch("no-draft", "set", arguments);
+            if (setNoDraft) {
+                pr.makeNotDraft();
+            }
         } else if (action.equals("status")) {
             String id = pullRequestIdArgument(arguments, repo);
             var pr = getPullRequest(uri, repo, host, id);
             var noDecoration = getSwitch("no-decoration", "status", arguments);
             var decoration = noDecoration ? "" : "Status: ";
diff a/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java
@@ -133,6 +133,7 @@
     /**
      * Returns true if the request is in draft mode.
      * @return
      */
     boolean isDraft();
+    void makeNotDraft();
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
@@ -39,10 +39,11 @@
     private final Pattern webUriPattern;
     private final String webUriReplacement;
     private final GitHubApplication application;
     private final Credential pat;
     private final RestRequest request;
+    private final RestRequest graphQL;
     private HostUser currentUser;
     private final Logger log = Logger.getLogger("org.openjdk.skara.forge.github");
 
     public GitHubHost(URI uri, GitHubApplication application, Pattern webUriPattern, String webUriReplacement) {
         this.uri = uri;
@@ -58,10 +59,29 @@
 
         request = new RestRequest(baseApi, () -> Arrays.asList(
                 "Authorization", "token " + getInstallationToken().orElseThrow(),
                 "Accept", "application/vnd.github.machine-man-preview+json",
                 "Accept", "application/vnd.github.antiope-preview+json"));
+
+        var graphQLAPI = URIBuilder.base(uri)
+                .appendSubDomain("api")
+                .setPath("/graphql")
+                .build();
+        graphQL = new RestRequest(graphQLAPI, () -> Arrays.asList(
+                "Authorization", "bearer " + getInstallationToken().orElseThrow(),
+                "Accept", "application/vnd.github.machine-man-preview+json",
+                "Accept", "application/vnd.github.antiope-preview+json",
+                "Accept", "application/vnd.github.shadow-cat-preview+json",
+                "Accept", "application/vnd.github.comfort-fade-preview+json"
+        ));
+    }
+
+    RestRequest graphQL() {
+        if (graphQL == null) {
+            throw new IllegalStateException("Cannot use GraphQL API without authorization");
+        }
+        return graphQL;
     }
 
     public GitHubHost(URI uri, Credential pat, Pattern webUriPattern, String webUriReplacement) {
         this.uri = uri;
         this.webUriPattern = webUriPattern;
@@ -74,10 +94,22 @@
                                 .setPath("/")
                                 .build();
 
         request = new RestRequest(baseApi, () -> Arrays.asList(
                 "Authorization", "token " + getInstallationToken().orElseThrow()));
+
+        var graphQLAPI = URIBuilder.base(uri)
+                .appendSubDomain("api")
+                .setPath("/graphql")
+                .build();
+        graphQL = new RestRequest(graphQLAPI, () -> Arrays.asList(
+                "Authorization", "bearer " + getInstallationToken().orElseThrow(),
+                "Accept", "application/vnd.github.machine-man-preview+json",
+                "Accept", "application/vnd.github.antiope-preview+json",
+                "Accept", "application/vnd.github.shadow-cat-preview+json",
+                "Accept", "application/vnd.github.comfort-fade-preview+json"
+        ));
     }
 
     GitHubHost(URI uri, Pattern webUriPattern, String webUriReplacement) {
         this.uri = uri;
         this.webUriPattern = webUriPattern;
@@ -89,10 +121,11 @@
                                 .appendSubDomain("api")
                                 .setPath("/")
                                 .build();
 
         request = new RestRequest(baseApi);
+        graphQL = null;
     }
 
     public URI getURI() {
         return uri;
     }
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
@@ -545,6 +545,53 @@
 
     @Override
     public void removeProperty(String name) {
         throw new RuntimeException("not implemented yet");
     }
+
+    @Override
+    public void makeNotDraft() {
+        if (!isDraft()) {
+            return;
+        }
+
+        var parts = repository.name().split("/");
+        var owner = parts[0];
+        var name = parts[1];
+        var number = id();
+
+        var query = String.join("\n", List.of(
+            "query {",
+            "    repository(owner: \"" + owner + "\", name: \"" + name + "\") {",
+            "        pullRequest(number: " + number + ") {",
+            "            id",
+            "        }",
+            "    }",
+            "}"
+        ));
+        var data = host.graphQL()
+                       .post()
+                       .body(JSON.object().put("query", query))
+                       .execute()
+                       .get("data");
+        var prId = data.get("repository")
+                            .get("pullRequest")
+                            .get("id").asString();
+
+        var input = "{pullRequestId:\"" + prId + "\"}";
+        // Do not care about the returned PR id, but the markPullRequestReadyForReview
+        // mutation requires non-nullable selection.
+        var mutation = String.join("\n", List.of(
+            "mutation {",
+            "    markPullRequestReadyForReview(input: " + input + ") {",
+            "        pullRequest {",
+            "            id",
+            "        }",
+            "    }",
+            "}"
+        ));
+        host.graphQL()
+            .post()
+            .body(JSON.object().put("query", mutation))
+            .execute();
+    }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
@@ -672,6 +672,15 @@
 
     @Override
     public void removeProperty(String name) {
         throw new RuntimeException("not implemented yet");
     }
+
+    @Override
+    public void makeNotDraft() {
+        var title = title();
+        var draftPrefix = "WIP:";
+        if (title.startsWith(draftPrefix)) {
+            setTitle(title.substring(draftPrefix.length()).stripLeading());
+        }
+    }
 }
