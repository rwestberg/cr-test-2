diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Type.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Type.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Type.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Type.java
@@ -24,21 +24,19 @@
  *
  */
 
 package jdk.incubator.jextract;
 
-import jdk.incubator.foreign.FunctionDescriptor;
-import jdk.incubator.foreign.MemoryLayout;
-import jdk.internal.jextract.impl.LayoutUtils;
-import jdk.internal.jextract.impl.TypeImpl;
-
 import java.util.List;
 import java.util.Optional;
 import java.util.OptionalLong;
-import java.util.function.Supplier;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
+import jdk.incubator.foreign.FunctionDescriptor;
+import jdk.incubator.foreign.MemoryLayout;
+import jdk.internal.jextract.impl.LayoutUtils;
+import jdk.internal.jextract.impl.TypeImpl;
 
 /**
  * Instances of this class are used to model types in the foreign language.
  * Instances of this class support the <em>visitor</em> pattern (see {@link Type#accept(Type.Visitor, Object)} and
  * {@link Type.Visitor}).
@@ -404,28 +402,19 @@
     /**
      * Creates a new pointer type with no associated pointee information.
      * @return a new pointer type with no associated pointee information.
      */
     static Type.Delegated pointer() {
-        return new TypeImpl.PointerImpl(() -> new TypeImpl.PrimitiveImpl(Type.Primitive.Kind.Void));
+        return new TypeImpl.PointerImpl(void_());
     }
 
     /**
      * Creates a new pointer type with given pointee type.
      * @param pointee the pointee type.
      * @return a new pointer type with given pointee type.
      */
     static Type.Delegated pointer(Type pointee) {
-        return new TypeImpl.PointerImpl(() -> pointee);
-    }
-
-    /**
-     * Creates a new pointer type with given pointee type.
-     * @param pointee factory to (lazily) build the pointee type.
-     * @return a new pointer type with given pointee type (lazily built from factory).
-     */
-    static Type.Delegated pointer(Supplier<Type> pointee) {
         return new TypeImpl.PointerImpl(pointee);
     }
 
     /**
      * Creates a new function type with given parameter types and return type.
