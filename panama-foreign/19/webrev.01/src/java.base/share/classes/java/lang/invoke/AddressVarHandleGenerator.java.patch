diff a/src/java.base/share/classes/java/lang/invoke/AddressVarHandleGenerator.java b/src/java.base/share/classes/java/lang/invoke/AddressVarHandleGenerator.java
--- a/src/java.base/share/classes/java/lang/invoke/AddressVarHandleGenerator.java
+++ b/src/java.base/share/classes/java/lang/invoke/AddressVarHandleGenerator.java
@@ -93,11 +93,11 @@
         helperClassCache.put(char.class, VarHandleMemoryAddressAsChars.class);
         helperClassCache.put(int.class, VarHandleMemoryAddressAsInts.class);
         helperClassCache.put(long.class, VarHandleMemoryAddressAsLongs.class);
         helperClassCache.put(float.class, VarHandleMemoryAddressAsFloats.class);
         helperClassCache.put(double.class, VarHandleMemoryAddressAsDoubles.class);
-        helperClassCache.put(MemoryAddressProxy.class, VarHandleMemoryAddressAsMemoryAddresses.class);
+        helperClassCache.put(MemoryAddressProxy.class, VarHandleMemoryAddressAsLongs.class);
 
         OFFSET_OP_TYPE = MethodType.methodType(long.class, long.class, long.class, MemoryAddressProxy.class);
 
         try {
             ADD_OFFSETS_HANDLE = MethodHandles.Lookup.IMPL_LOOKUP.findStatic(MemoryAddressProxy.class, "addOffsets", OFFSET_OP_TYPE);
@@ -129,18 +129,19 @@
     AddressVarHandleGenerator(Class<?> carrier, int dims) {
         this.dimensions = dims;
         this.carrier = carrier;
         Class<?>[] components = new Class<?>[dimensions];
         Arrays.fill(components, long.class);
-        this.form = new VarForm(BASE_CLASS, MemoryAddressProxy.class, this.carrier, components);
+        this.form = new VarForm(BASE_CLASS, MemoryAddressProxy.class, lower(carrier), components);
         this.helperClass = helperClassCache.get(carrier);
         this.implClassName = helperClass.getName().replace('.', '/') + dimensions;
     }
 
-    static Class<?> erase(Class<?> type) {
-            return type.isPrimitive() ? type : Object.class;
-        }
+    static Class<?> lower(Class<?> type) {
+        return type == MemoryAddressProxy.class ?
+                long.class : type;
+    }
 
     /*
      * Generate a VarHandle memory access factory.
      * The factory has type (ZJJ[J)VarHandle.
      */
@@ -148,11 +149,11 @@
         Class<?> implCls = generateClass();
         try {
             Class<?>[] components = new Class<?>[dimensions];
             Arrays.fill(components, long.class);
 
-            VarForm form = new VarForm(implCls, MemoryAddressProxy.class, carrier, components);
+            VarForm form = new VarForm(implCls, MemoryAddressProxy.class, lower(carrier), components);
 
             MethodType constrType = MethodType.methodType(void.class, VarForm.class, boolean.class, long.class, long.class, long.class, long[].class);
             MethodHandle constr = MethodHandles.Lookup.IMPL_LOOKUP.findConstructor(implCls, constrType);
             constr = MethodHandles.insertArguments(constr, 0, form);
             return constr;
@@ -230,11 +231,11 @@
         mv.visitCode();
         mv.visitVarInsn(ALOAD, 1);
         mv.visitFieldInsn(GETFIELD, Type.getInternalName(VarHandle.AccessMode.class), "at", Type.getDescriptor(VarHandle.AccessType.class));
         mv.visitLdcInsn(cw.makeConstantPoolPatch(MemoryAddressProxy.class));
         mv.visitTypeInsn(CHECKCAST, Type.getInternalName(Class.class));
-        mv.visitLdcInsn(cw.makeConstantPoolPatch(erase(carrier)));
+        mv.visitLdcInsn(cw.makeConstantPoolPatch(lower(carrier)));
         mv.visitTypeInsn(CHECKCAST, Type.getInternalName(Class.class));
 
         Class<?>[] dims = new Class<?>[dimensions];
         Arrays.fill(dims, long.class);
         mv.visitLdcInsn(cw.makeConstantPoolPatch(dims));
