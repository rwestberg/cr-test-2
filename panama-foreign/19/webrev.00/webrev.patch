diff a/make/gensrc/GensrcVarHandles.gmk b/make/gensrc/GensrcVarHandles.gmk
--- a/make/gensrc/GensrcVarHandles.gmk
+++ b/make/gensrc/GensrcVarHandles.gmk
@@ -165,10 +165,12 @@
 # Param 2 - Type with first letter capitalized
 define GenerateVarHandleMemoryAddress
 
   $1_Type := $2
 
+  $1_FILENAME := $(VARHANDLES_GENSRC_DIR)/VarHandleMemoryAddressAs$$($1_Type)s.java
+
   ifeq ($$($1_Type), Byte)
     $1_type := byte
     $1_BoxType := $$($1_Type)
 
     $1_rawType := $$($1_type)
@@ -244,25 +246,10 @@
 
     $1_ARGS += -KCAS
     $1_ARGS += -KfloatingPoint
   endif
 
-  ifeq ($$($1_Type), MemoryAddress)
-    $1_type := Object
-    $1_BoxType := Object
-
-    $1_rawType := long
-    $1_RawType := Long
-    $1_RawBoxType := Long
-
-    $1_ARGS += -KMemoryAddressProxy
-
-    $1_FILENAME := $(VARHANDLES_GENSRC_DIR)/VarHandleMemoryAddressAs$$($1_Type)es.java
-  else
-    $1_FILENAME := $(VARHANDLES_GENSRC_DIR)/VarHandleMemoryAddressAs$$($1_Type)s.java
-  endif
-
   $$($1_FILENAME): $(VARHANDLES_SRC_DIR)/X-VarHandleMemoryAddressView.java.template $(BUILD_TOOLS_JDK)
 	$$(call MakeDir, $$(@D))
 	$(RM) $$@
 	$(TOOL_SPP) -nel -K$$($1_type) \
 	    -Dtype=$$($1_type) -DType=$$($1_Type) -DBoxType=$$($1_BoxType) \
@@ -283,11 +270,11 @@
 VARHANDLES_BYTE_ARRAY_TYPES := Short Char Int Long Float Double
 $(foreach t, $(VARHANDLES_BYTE_ARRAY_TYPES), \
   $(eval $(call GenerateVarHandleByteArray,VAR_HANDLE_BYTE_ARRAY_$t,$t)))
 
 # List the types to generate source for, with capitalized first letter
-VARHANDLES_MEMORY_ADDRESS_TYPES := Byte Short Char Int Long Float Double MemoryAddress
+VARHANDLES_MEMORY_ADDRESS_TYPES := Byte Short Char Int Long Float Double
 $(foreach t, $(VARHANDLES_MEMORY_ADDRESS_TYPES), \
   $(eval $(call GenerateVarHandleMemoryAddress,VAR_HANDLE_MEMORY_ADDRESS_$t,$t)))
 
 GENSRC_JAVA_BASE += $(GENSRC_VARHANDLES)
 
diff a/src/java.base/share/classes/java/lang/invoke/AddressVarHandleGenerator.java b/src/java.base/share/classes/java/lang/invoke/AddressVarHandleGenerator.java
--- a/src/java.base/share/classes/java/lang/invoke/AddressVarHandleGenerator.java
+++ b/src/java.base/share/classes/java/lang/invoke/AddressVarHandleGenerator.java
@@ -93,11 +93,11 @@
         helperClassCache.put(char.class, VarHandleMemoryAddressAsChars.class);
         helperClassCache.put(int.class, VarHandleMemoryAddressAsInts.class);
         helperClassCache.put(long.class, VarHandleMemoryAddressAsLongs.class);
         helperClassCache.put(float.class, VarHandleMemoryAddressAsFloats.class);
         helperClassCache.put(double.class, VarHandleMemoryAddressAsDoubles.class);
-        helperClassCache.put(MemoryAddressProxy.class, VarHandleMemoryAddressAsMemoryAddresses.class);
+        helperClassCache.put(MemoryAddressProxy.class, VarHandleMemoryAddressAsLongs.class);
 
         OFFSET_OP_TYPE = MethodType.methodType(long.class, long.class, long.class, MemoryAddressProxy.class);
 
         try {
             ADD_OFFSETS_HANDLE = MethodHandles.Lookup.IMPL_LOOKUP.findStatic(MemoryAddressProxy.class, "addOffsets", OFFSET_OP_TYPE);
@@ -129,18 +129,19 @@
     AddressVarHandleGenerator(Class<?> carrier, int dims) {
         this.dimensions = dims;
         this.carrier = carrier;
         Class<?>[] components = new Class<?>[dimensions];
         Arrays.fill(components, long.class);
-        this.form = new VarForm(BASE_CLASS, MemoryAddressProxy.class, this.carrier, components);
+        this.form = new VarForm(BASE_CLASS, MemoryAddressProxy.class, lower(carrier), components);
         this.helperClass = helperClassCache.get(carrier);
         this.implClassName = helperClass.getName().replace('.', '/') + dimensions;
     }
 
-    static Class<?> erase(Class<?> type) {
-            return type.isPrimitive() ? type : Object.class;
-        }
+    static Class<?> lower(Class<?> type) {
+        return type == MemoryAddressProxy.class ?
+                long.class : type;
+    }
 
     /*
      * Generate a VarHandle memory access factory.
      * The factory has type (ZJJ[J)VarHandle.
      */
@@ -148,11 +149,11 @@
         Class<?> implCls = generateClass();
         try {
             Class<?>[] components = new Class<?>[dimensions];
             Arrays.fill(components, long.class);
 
-            VarForm form = new VarForm(implCls, MemoryAddressProxy.class, carrier, components);
+            VarForm form = new VarForm(implCls, MemoryAddressProxy.class, lower(carrier), components);
 
             MethodType constrType = MethodType.methodType(void.class, VarForm.class, boolean.class, long.class, long.class, long.class, long[].class);
             MethodHandle constr = MethodHandles.Lookup.IMPL_LOOKUP.findConstructor(implCls, constrType);
             constr = MethodHandles.insertArguments(constr, 0, form);
             return constr;
@@ -230,11 +231,11 @@
         mv.visitCode();
         mv.visitVarInsn(ALOAD, 1);
         mv.visitFieldInsn(GETFIELD, Type.getInternalName(VarHandle.AccessMode.class), "at", Type.getDescriptor(VarHandle.AccessType.class));
         mv.visitLdcInsn(cw.makeConstantPoolPatch(MemoryAddressProxy.class));
         mv.visitTypeInsn(CHECKCAST, Type.getInternalName(Class.class));
-        mv.visitLdcInsn(cw.makeConstantPoolPatch(erase(carrier)));
+        mv.visitLdcInsn(cw.makeConstantPoolPatch(lower(carrier)));
         mv.visitTypeInsn(CHECKCAST, Type.getInternalName(Class.class));
 
         Class<?>[] dims = new Class<?>[dimensions];
         Arrays.fill(dims, long.class);
         mv.visitLdcInsn(cw.makeConstantPoolPatch(dims));
diff a/src/java.base/share/classes/java/lang/invoke/X-VarHandleMemoryAddressView.java.template b/src/java.base/share/classes/java/lang/invoke/X-VarHandleMemoryAddressView.java.template
--- a/src/java.base/share/classes/java/lang/invoke/X-VarHandleMemoryAddressView.java.template
+++ b/src/java.base/share/classes/java/lang/invoke/X-VarHandleMemoryAddressView.java.template
@@ -31,36 +31,15 @@
 
 import static java.lang.invoke.MethodHandleStatics.UNSAFE;
 
 #warn
 
-#if[MemoryAddressProxy]
-final class VarHandleMemoryAddressAs$Type$es {
-#else[MemoryAddressProxy]
 final class VarHandleMemoryAddressAs$Type$s {
-#end[MemoryAddressProxy]
 
     static final boolean BE = UNSAFE.isBigEndian();
 
-#if[MemoryAddressProxy]
-    static final int VM_ALIGN = Long.BYTES - 1;
-
-    static final MemoryAddressProxy NULL_ADDRESS;
-    static final MemberName MEMORY_ADDRESS_OF_LONG_MEMBER_NAME;
-
-    static {
-        try {
-            Class<?> addrClass = Class.forName("jdk.incubator.foreign.MemoryAddress");
-            NULL_ADDRESS = (MemoryAddressProxy)addrClass.getDeclaredField("NULL").get(null);
-            MEMORY_ADDRESS_OF_LONG_MEMBER_NAME = new MemberName(addrClass.getMethod("ofLong", long.class));
-        } catch (Exception ex) {
-            throw new ExceptionInInitializerError(ex);
-        }
-    }
-#else[MemoryAddressProxy]
     static final int VM_ALIGN = $BoxType$.BYTES - 1;
-#end[MemoryAddressProxy]
 
 #if[floatingPoint]
     @ForceInline
     static $rawType$ convEndian(boolean big, $type$ v) {
         $rawType$ rv = $Type$.$type$ToRaw$RawType$Bits(v);
@@ -77,48 +56,14 @@
     @ForceInline
     static $type$ convEndian(boolean big, $type$ n) {
         return n;
     }
 #else[byte]
-#if[MemoryAddressProxy]
-    @ForceInline
-    static $type$ convEndian(boolean big, $rawType$ n) {
-        long value = big == BE ? n : Long.reverseBytes(n);
-        return long2addr(value);
-    }
-
-    @ForceInline
-    static $rawType$ convEndian(boolean big, $type$ addr) {
-        long n = addr2long(addr);
-        return big == BE ? n : Long.reverseBytes(n);
-    }
-
-    @ForceInline
-    static $type$ long2addr($rawType$ value) {
-        try {
-            return value == 0L ?
-                NULL_ADDRESS :
-                MethodHandle.linkToStatic(value, MEMORY_ADDRESS_OF_LONG_MEMBER_NAME);
-        } catch (Throwable ex) {
-            throw new IllegalStateException(ex);
-        }
-    }
-
-    @ForceInline
-    static $rawType$ addr2long($type$ ob) {
-        MemoryAddressProxy addr = (MemoryAddressProxy)ob;
-        if (addr.unsafeGetBase() != null) {
-           throw new UnsupportedOperationException("Heap address!");
-        }
-        return addr.unsafeGetOffset();
-    }
-#else[MemoryAddressProxy]
     @ForceInline
     static $type$ convEndian(boolean big, $type$ n) {
         return big == BE ? n : $BoxType$.reverseBytes(n);
     }
-#end[MemoryAddressProxy]
 #end[byte]
 #end[floatingPoint]
 
     @ForceInline
     static MemoryAddressProxy checkAddress(Object obb, long offset, long length, boolean ro) {
@@ -161,21 +106,14 @@
 #if[byte]
         return UNSAFE.get$Type$(
                 bb.unsafeGetBase(),
                 offsetNoVMAlignCheck(bb, base, handle.alignmentMask));
 #else[byte]
-#if[MemoryAddressProxy]
-        return long2addr(UNSAFE.getLongUnaligned(
-                bb.unsafeGetBase(),
-                offset(bb, base, handle.alignmentMask),
-                handle.be));
-#else[MemoryAddressProxy]
         return UNSAFE.get$Type$Unaligned(
                 bb.unsafeGetBase(),
                 offsetNoVMAlignCheck(bb, base, handle.alignmentMask),
                 handle.be);
-#end[MemoryAddressProxy]
 #end[byte]
 #end[floatingPoint]
     }
 
     @ForceInline
@@ -193,23 +131,15 @@
         UNSAFE.put$Type$(
                 bb.unsafeGetBase(),
                 offsetNoVMAlignCheck(bb, base, handle.alignmentMask),
                 value);
 #else[byte]
-#if[MemoryAddressProxy]
-        UNSAFE.putLongUnaligned(
-                bb.unsafeGetBase(),
-                offset(bb, base, handle.alignmentMask),
-                addr2long(value),
-                handle.be);
-#else[MemoryAddressProxy]
         UNSAFE.put$Type$Unaligned(
                 bb.unsafeGetBase(),
                 offsetNoVMAlignCheck(bb, base, handle.alignmentMask),
                 value,
                 handle.be);
-#end[MemoryAddressProxy]
 #end[byte]
 #end[floatingPoint]
     }
 
     @ForceInline
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
@@ -30,10 +30,11 @@
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.foreign.ValueLayout;
+import jdk.internal.access.JavaLangInvokeAccess;
 import jdk.internal.access.JavaNioAccess;
 import jdk.internal.access.SharedSecrets;
 import jdk.internal.access.foreign.MemoryAddressProxy;
 import jdk.internal.access.foreign.UnmapperProxy;
 import jdk.internal.foreign.abi.aarch64.AArch64ABI;
@@ -65,15 +66,21 @@
 public final class Utils {
 
     private static Unsafe unsafe = Unsafe.getUnsafe();
 
     private static final MethodHandle ADDRESS_FILTER;
+    private static final MethodHandle LONG_TO_ADDRESS;
+    private static final MethodHandle ADDRESS_TO_LONG;
 
     static {
         try {
             ADDRESS_FILTER = MethodHandles.lookup().findStatic(Utils.class, "filterAddress",
                     MethodType.methodType(MemoryAddressProxy.class, MemoryAddress.class));
+            LONG_TO_ADDRESS = MethodHandles.lookup().findStatic(Utils.class, "longToAddress",
+                    MethodType.methodType(MemoryAddressProxy.class, long.class));
+            ADDRESS_TO_LONG = MethodHandles.lookup().findStatic(Utils.class, "addressToLong",
+                    MethodType.methodType(long.class, MemoryAddressProxy.class));
         } catch (Throwable ex) {
             throw new ExceptionInInitializerError(ex);
         }
     }
 
@@ -83,10 +90,11 @@
 
     // the memory address var handle assumes that addresses have same size as a Java long
     private final static long POINTER_SIZE = 8;
 
     private static final JavaNioAccess javaNioAccess = SharedSecrets.getJavaNioAccess();
+    private static final JavaLangInvokeAccess javaLangInvokeAccess = SharedSecrets.getJavaLangInvokeAccess();
 
     private static final boolean skipZeroMemory = GetBooleanAction.privilegedGetProperty("jdk.internal.foreign.skipZeroMemory");
 
     public static long alignUp(long n, long alignment) {
         return (n + alignment - 1) & -alignment;
@@ -258,12 +266,25 @@
     }
 
     public static VarHandle fixUpVarHandle(VarHandle handle) {
         // This adaptation is required, otherwise the memory access var handle will have type MemoryAddressProxy,
         // and not MemoryAddress (which the user expects), which causes performance issues with asType() adaptations.
-        return MethodHandles.filterCoordinates(handle, 0, ADDRESS_FILTER);
+        handle = MethodHandles.filterCoordinates(handle, 0, ADDRESS_FILTER);
+        return (javaLangInvokeAccess.memoryAddressCarrier(handle) == MemoryAddressProxy.class) ?
+                MethodHandles.filterValue(handle, ADDRESS_TO_LONG, LONG_TO_ADDRESS) :
+                handle;
     }
 
     private static MemoryAddressProxy filterAddress(MemoryAddress addr) {
         return (MemoryAddressImpl)addr;
     }
+
+    private static MemoryAddressProxy longToAddress(long value) {
+        return value == 0L ?
+                (MemoryAddressImpl)MemoryAddress.NULL :
+                (MemoryAddressImpl)MemoryAddress.ofLong(value);
+    }
+
+    private static long addressToLong(MemoryAddressProxy value) {
+        return value.unsafeGetOffset();
+    }
 }
diff a/test/jdk/java/foreign/TestTypeAccess.java b/test/jdk/java/foreign/TestTypeAccess.java
--- a/test/jdk/java/foreign/TestTypeAccess.java
+++ b/test/jdk/java/foreign/TestTypeAccess.java
@@ -69,18 +69,18 @@
         try (MemorySegment s = MemorySegment.allocateNative(8)) {
             ADDR_HANDLE.set(s.baseAddress(), "string");
         }
     }
 
-    @Test(expectedExceptions=ClassCastException.class)
+    @Test(expectedExceptions=WrongMethodTypeException.class)
     public void testMemoryAddressValueGetAsPrimitive() {
         try (MemorySegment s = MemorySegment.allocateNative(8)) {
             int address = (int)ADDR_HANDLE.get(s.baseAddress());
         }
     }
 
-    @Test(expectedExceptions=ClassCastException.class)
+    @Test(expectedExceptions=WrongMethodTypeException.class)
     public void testMemoryAddressValueSetAsPrimitive() {
         try (MemorySegment s = MemorySegment.allocateNative(8)) {
             ADDR_HANDLE.set(s.baseAddress(), 1);
         }
     }
