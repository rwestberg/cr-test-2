diff a/src/java.base/share/classes/java/lang/invoke/X-VarHandleMemoryAddressView.java.template b/src/java.base/share/classes/java/lang/invoke/X-VarHandleMemoryAddressView.java.template
--- a/src/java.base/share/classes/java/lang/invoke/X-VarHandleMemoryAddressView.java.template
+++ b/src/java.base/share/classes/java/lang/invoke/X-VarHandleMemoryAddressView.java.template
@@ -31,36 +31,15 @@
 
 import static java.lang.invoke.MethodHandleStatics.UNSAFE;
 
 #warn
 
-#if[MemoryAddressProxy]
-final class VarHandleMemoryAddressAs$Type$es {
-#else[MemoryAddressProxy]
 final class VarHandleMemoryAddressAs$Type$s {
-#end[MemoryAddressProxy]
 
     static final boolean BE = UNSAFE.isBigEndian();
 
-#if[MemoryAddressProxy]
-    static final int VM_ALIGN = Long.BYTES - 1;
-
-    static final MemoryAddressProxy NULL_ADDRESS;
-    static final MemberName MEMORY_ADDRESS_OF_LONG_MEMBER_NAME;
-
-    static {
-        try {
-            Class<?> addrClass = Class.forName("jdk.incubator.foreign.MemoryAddress");
-            NULL_ADDRESS = (MemoryAddressProxy)addrClass.getDeclaredField("NULL").get(null);
-            MEMORY_ADDRESS_OF_LONG_MEMBER_NAME = new MemberName(addrClass.getMethod("ofLong", long.class));
-        } catch (Exception ex) {
-            throw new ExceptionInInitializerError(ex);
-        }
-    }
-#else[MemoryAddressProxy]
     static final int VM_ALIGN = $BoxType$.BYTES - 1;
-#end[MemoryAddressProxy]
 
 #if[floatingPoint]
     @ForceInline
     static $rawType$ convEndian(boolean big, $type$ v) {
         $rawType$ rv = $Type$.$type$ToRaw$RawType$Bits(v);
@@ -77,48 +56,14 @@
     @ForceInline
     static $type$ convEndian(boolean big, $type$ n) {
         return n;
     }
 #else[byte]
-#if[MemoryAddressProxy]
-    @ForceInline
-    static $type$ convEndian(boolean big, $rawType$ n) {
-        long value = big == BE ? n : Long.reverseBytes(n);
-        return long2addr(value);
-    }
-
-    @ForceInline
-    static $rawType$ convEndian(boolean big, $type$ addr) {
-        long n = addr2long(addr);
-        return big == BE ? n : Long.reverseBytes(n);
-    }
-
-    @ForceInline
-    static $type$ long2addr($rawType$ value) {
-        try {
-            return value == 0L ?
-                NULL_ADDRESS :
-                MethodHandle.linkToStatic(value, MEMORY_ADDRESS_OF_LONG_MEMBER_NAME);
-        } catch (Throwable ex) {
-            throw new IllegalStateException(ex);
-        }
-    }
-
-    @ForceInline
-    static $rawType$ addr2long($type$ ob) {
-        MemoryAddressProxy addr = (MemoryAddressProxy)ob;
-        if (addr.unsafeGetBase() != null) {
-           throw new UnsupportedOperationException("Heap address!");
-        }
-        return addr.unsafeGetOffset();
-    }
-#else[MemoryAddressProxy]
     @ForceInline
     static $type$ convEndian(boolean big, $type$ n) {
         return big == BE ? n : $BoxType$.reverseBytes(n);
     }
-#end[MemoryAddressProxy]
 #end[byte]
 #end[floatingPoint]
 
     @ForceInline
     static MemoryAddressProxy checkAddress(Object obb, long offset, long length, boolean ro) {
@@ -161,21 +106,14 @@
 #if[byte]
         return UNSAFE.get$Type$(
                 bb.unsafeGetBase(),
                 offsetNoVMAlignCheck(bb, base, handle.alignmentMask));
 #else[byte]
-#if[MemoryAddressProxy]
-        return long2addr(UNSAFE.getLongUnaligned(
-                bb.unsafeGetBase(),
-                offset(bb, base, handle.alignmentMask),
-                handle.be));
-#else[MemoryAddressProxy]
         return UNSAFE.get$Type$Unaligned(
                 bb.unsafeGetBase(),
                 offsetNoVMAlignCheck(bb, base, handle.alignmentMask),
                 handle.be);
-#end[MemoryAddressProxy]
 #end[byte]
 #end[floatingPoint]
     }
 
     @ForceInline
@@ -193,23 +131,15 @@
         UNSAFE.put$Type$(
                 bb.unsafeGetBase(),
                 offsetNoVMAlignCheck(bb, base, handle.alignmentMask),
                 value);
 #else[byte]
-#if[MemoryAddressProxy]
-        UNSAFE.putLongUnaligned(
-                bb.unsafeGetBase(),
-                offset(bb, base, handle.alignmentMask),
-                addr2long(value),
-                handle.be);
-#else[MemoryAddressProxy]
         UNSAFE.put$Type$Unaligned(
                 bb.unsafeGetBase(),
                 offsetNoVMAlignCheck(bb, base, handle.alignmentMask),
                 value,
                 handle.be);
-#end[MemoryAddressProxy]
 #end[byte]
 #end[floatingPoint]
     }
 
     @ForceInline
