diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/CallingSequenceBuilder.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/CallingSequenceBuilder.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/CallingSequenceBuilder.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/CallingSequenceBuilder.java
@@ -104,43 +104,41 @@
         Deque<Class<?>> stack = new ArrayDeque<>();
         stack.push(inType);
 
         for (Binding b : bindings) {
             switch (b.tag()) {
-                case Binding.MOVE_TAG: {
+                case MOVE -> {
                     Class<?> actualType = stack.pop();
                     Class<?> expectedType = ((Binding.Move) b).type();
                     checkType(actualType, expectedType);
-                } break;
-                case Binding.DEREFERENCE_TAG: {
+                }
+                case DEREFERENCE -> {
                     Class<?> actualType = stack.pop();
                     checkType(actualType, MemorySegment.class);
                     Class<?> newType = ((Binding.Dereference) b).type();
                     stack.push(newType);
-                } break;
-                case Binding.BASE_ADDRESS_TAG: {
+                }
+                case BASE_ADDRESS -> {
                     Class<?> actualType = stack.pop();
                     checkType(actualType, MemorySegment.class);
                     stack.push(MemoryAddress.class);
-                } break;
-                case Binding.BOX_ADDRESS_TAG: {
+                }
+                case CONVERT_ADDRESS -> {
                     Class<?> actualType = stack.pop();
                     checkType(actualType, MemoryAddress.class);
                     stack.push(long.class);
-                } break;
-                case Binding.ALLOC_BUFFER_TAG: {
-                    stack.push(MemorySegment.class);
-                } break;
-                case Binding.COPY_BUFFER_TAG: {
+                }
+                case ALLOC_BUFFER ->
+                    throw new UnsupportedOperationException();
+                case COPY_BUFFER -> {
                     Class<?> actualType = stack.pop();
                     checkType(actualType, MemorySegment.class);
                     stack.push(MemorySegment.class);
-                } break;
-                case Binding.DUP_TAG: {
+                }
+                case DUP ->
                     stack.push(stack.peekLast());
-                } break;
-                default: throw new IllegalArgumentException("Unknown binding: " + b);
+                default -> throw new IllegalArgumentException("Unknown binding: " + b);
             }
         }
 
         if (!stack.isEmpty()) {
             throw new IllegalArgumentException("Stack must be empty after recipe");
@@ -150,42 +148,41 @@
     private static void verifyBoxBindings(Class<?> outType, List<Binding> bindings) {
         Deque<Class<?>> stack = new ArrayDeque<>();
 
         for (Binding b : bindings) {
             switch (b.tag()) {
-                case Binding.MOVE_TAG: {
+                case MOVE -> {
                     Class<?> newType = ((Binding.Move) b).type();
                     stack.push(newType);
-                } break;
-                case Binding.DEREFERENCE_TAG: {
+                }
+                case DEREFERENCE -> {
                     Class<?> storeType = stack.pop();
                     checkType(storeType, ((Binding.Dereference) b).type());
                     Class<?> segmentType = stack.pop();
                     checkType(segmentType, MemorySegment.class);
-                } break;
-                case Binding.BOX_ADDRESS_TAG: {
+                }
+                case CONVERT_ADDRESS -> {
                     Class<?> actualType = stack.pop();
                     checkType(actualType, long.class);
                     stack.push(MemoryAddress.class);
-                } break;
-                case Binding.BASE_ADDRESS_TAG: {
+                }
+                case BASE_ADDRESS -> {
                     Class<?> actualType = stack.pop();
                     checkType(actualType, MemorySegment.class);
                     stack.push(MemoryAddress.class);
-                } break;
-                case Binding.ALLOC_BUFFER_TAG: {
+                }
+                case ALLOC_BUFFER -> {
                     stack.push(MemorySegment.class);
-                } break;
-                case Binding.COPY_BUFFER_TAG: {
+                }
+                case COPY_BUFFER -> {
                     Class<?> actualType = stack.pop();
                     checkType(actualType, MemoryAddress.class);
                     stack.push(MemorySegment.class);
-                } break;
-                case Binding.DUP_TAG: {
+                }
+                case DUP ->
                     stack.push(stack.peekLast());
-                } break;
-                default: throw new IllegalArgumentException("Unknown binding: " + b);
+                default -> throw new IllegalArgumentException("Unknown binding: " + b);
             }
         }
 
         if (stack.size() != 1) {
             throw new IllegalArgumentException("Stack must contain exactly 1 value");
