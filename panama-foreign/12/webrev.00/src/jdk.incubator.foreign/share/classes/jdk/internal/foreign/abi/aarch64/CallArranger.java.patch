diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java
@@ -42,11 +42,10 @@
 import jdk.internal.foreign.abi.VMStorage;
 import jdk.internal.foreign.abi.SharedUtils;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodType;
-import java.util.ArrayList;
 import java.util.List;
 import java.util.Optional;
 
 import static jdk.internal.foreign.abi.aarch64.AArch64Architecture.*;
 
@@ -299,11 +298,11 @@
 
         protected BindingCalculator(boolean forArguments) {
             this.storageCalculator = new StorageCalculator(forArguments);
         }
 
-        protected void spillStructUnbox(List<Binding> bindings, MemoryLayout layout) {
+        protected void spillStructUnbox(Binding.Builder bindings, MemoryLayout layout) {
             // If a struct has been assigned register or HFA class but
             // there are not enough free registers to hold the entire
             // struct, it must be passed on the stack. I.e. not split
             // between registers and stack.
 
@@ -311,32 +310,32 @@
             while (offset < layout.byteSize()) {
                 long copy = Math.min(layout.byteSize() - offset, STACK_SLOT_SIZE);
                 VMStorage storage =
                     storageCalculator.stackAlloc(copy, STACK_SLOT_SIZE);
                 if (offset + STACK_SLOT_SIZE < layout.byteSize()) {
-                    bindings.add(new Binding.Dup());
+                    bindings.dup();
                 }
-                bindings.add(new Binding.Dereference(offset, long.class));
-                bindings.add(new Binding.Move(storage, long.class));
+                bindings.dereference(offset, long.class)
+                        .move(storage, long.class);
                 offset += STACK_SLOT_SIZE;
             }
         }
 
-        protected void spillStructBox(List<Binding> bindings, MemoryLayout layout) {
+        protected void spillStructBox(Binding.Builder bindings, MemoryLayout layout) {
             // If a struct has been assigned register or HFA class but
             // there are not enough free registers to hold the entire
             // struct, it must be passed on the stack. I.e. not split
             // between registers and stack.
 
             long offset = 0;
             while (offset < layout.byteSize()) {
                 long copy = Math.min(layout.byteSize() - offset, STACK_SLOT_SIZE);
                 VMStorage storage =
                     storageCalculator.stackAlloc(copy, STACK_SLOT_SIZE);
-                bindings.add(new Binding.Dup());
-                bindings.add(new Binding.Move(storage, long.class));
-                bindings.add(new Binding.Dereference(offset, long.class));
+                bindings.dup()
+                        .move(storage, long.class)
+                        .dereference(offset, long.class);
                 offset += STACK_SLOT_SIZE;
             }
         }
 
         abstract List<Binding> getBindings(Class<?> carrier, MemoryLayout layout);
@@ -349,20 +348,20 @@
             super(forArguments);
         }
 
         @Override
         List<Binding> getIndirectBindings() {
-            List<Binding> bindings = new ArrayList<>();
-            bindings.add(new Binding.BoxAddress());
-            bindings.add(new Binding.Move(INDIRECT_RESULT, long.class));
-            return bindings;
+            return Binding.builder()
+                .convertAddress()
+                .move(INDIRECT_RESULT, long.class)
+                .build();
         }
 
         @Override
         List<Binding> getBindings(Class<?> carrier, MemoryLayout layout) {
             TypeClass argumentClass = classifyType(layout);
-            List<Binding> bindings = new ArrayList<>();
+            Binding.Builder bindings = Binding.builder();
             switch (argumentClass) {
                 case STRUCT_REGISTER: {
                     assert carrier == MemorySegment.class;
                     VMStorage[] regs = storageCalculator.regAlloc(
                         StorageClasses.INTEGER, layout);
@@ -372,29 +371,29 @@
                         while (offset < layout.byteSize()) {
                             final long copy = Math.min(layout.byteSize() - offset, 8);
                             VMStorage storage = regs[regIndex++];
                             Class<?> type = SharedUtils.primitiveCarrierForSize(copy);
                             if (offset + copy < layout.byteSize()) {
-                                bindings.add(new Binding.Dup());
+                                bindings.dup();
                             }
-                            bindings.add(new Binding.Dereference(offset, type));
-                            bindings.add(new Binding.Move(storage, type));
+                            bindings.dereference(offset, type)
+                                    .move(storage, type);
                             offset += copy;
                         }
                     } else {
                         spillStructUnbox(bindings, layout);
                     }
                     break;
                 }
                 case STRUCT_REFERENCE: {
                     assert carrier == MemorySegment.class;
-                    bindings.add(new Binding.Copy(layout.byteSize(), layout.byteAlignment()));
-                    bindings.add(new Binding.BaseAddress());
-                    bindings.add(new Binding.BoxAddress());
+                    bindings.copy(layout)
+                            .baseAddress()
+                            .convertAddress();
                     VMStorage storage = storageCalculator.nextStorage(
                         StorageClasses.INTEGER, layout);
-                    bindings.add(new Binding.Move(storage, long.class));
+                    bindings.move(storage, long.class);
                     break;
                 }
                 case STRUCT_HFA: {
                     assert carrier == MemorySegment.class;
                     GroupLayout group = (GroupLayout)layout;
@@ -405,141 +404,141 @@
                         for (int i = 0; i < group.memberLayouts().size(); i++) {
                             VMStorage storage = regs[i];
                             final long size = group.memberLayouts().get(i).byteSize();
                             Class<?> type = SharedUtils.primitiveCarrierForSize(size);
                             if (i + 1 < group.memberLayouts().size()) {
-                                bindings.add(new Binding.Dup());
+                                bindings.dup();
                             }
-                            bindings.add(new Binding.Dereference(offset, type));
-                            bindings.add(new Binding.Move(storage, type));
+                            bindings.dereference(offset, type)
+                                    .move(storage, type);
                             offset += size;
                         }
                     } else {
                         spillStructUnbox(bindings, layout);
                     }
                     break;
                 }
                 case POINTER: {
-                    bindings.add(new Binding.BoxAddress());
+                    bindings.convertAddress();
                     VMStorage storage =
                         storageCalculator.nextStorage(StorageClasses.INTEGER, layout);
-                    bindings.add(new Binding.Move(storage, long.class));
+                    bindings.move(storage, long.class);
                     break;
                 }
                 case INTEGER: {
                     VMStorage storage =
                         storageCalculator.nextStorage(StorageClasses.INTEGER, layout);
-                    bindings.add(new Binding.Move(storage, carrier));
+                    bindings.move(storage, carrier);
                     break;
                 }
                 case FLOAT: {
                     VMStorage storage =
                         storageCalculator.nextStorage(StorageClasses.VECTOR, layout);
-                    bindings.add(new Binding.Move(storage, carrier));
+                    bindings.move(storage, carrier);
                     break;
                 }
                 default:
                     throw new UnsupportedOperationException("Unhandled class " + argumentClass);
             }
-            return bindings;
+            return bindings.build();
         }
     }
 
     static class BoxBindingCalculator extends BindingCalculator{
         BoxBindingCalculator(boolean forArguments) {
             super(forArguments);
         }
 
         @Override
         List<Binding> getIndirectBindings() {
-            List<Binding> bindings = new ArrayList<>();
-            bindings.add(new Binding.Move(INDIRECT_RESULT, long.class));
-            bindings.add(new Binding.BoxAddress());
-            return bindings;
+            return Binding.builder()
+                .move(INDIRECT_RESULT, long.class)
+                .convertAddress()
+                .build();
         }
 
         @SuppressWarnings("fallthrough")
         @Override
         List<Binding> getBindings(Class<?> carrier, MemoryLayout layout) {
             TypeClass argumentClass = classifyType(layout);
-            List<Binding> bindings = new ArrayList<>();
+            Binding.Builder bindings = Binding.builder();
             switch (argumentClass) {
                 case STRUCT_REGISTER: {
                     assert carrier == MemorySegment.class;
-                    bindings.add(new Binding.AllocateBuffer(layout));
+                    bindings.allocate(layout);
                     VMStorage[] regs = storageCalculator.regAlloc(
                         StorageClasses.INTEGER, layout);
                     if (regs != null) {
                         int regIndex = 0;
                         long offset = 0;
                         while (offset < layout.byteSize()) {
                             final long copy = Math.min(layout.byteSize() - offset, 8);
                             VMStorage storage = regs[regIndex++];
-                            bindings.add(new Binding.Dup());
+                            bindings.dup();
                             Class<?> type = SharedUtils.primitiveCarrierForSize(copy);
-                            bindings.add(new Binding.Move(storage, type));
-                            bindings.add(new Binding.Dereference(offset, type));
+                            bindings.move(storage, type)
+                                    .dereference(offset, type);
                             offset += copy;
                         }
                     } else {
                         spillStructBox(bindings, layout);
                     }
                     break;
                 }
                 case STRUCT_REFERENCE: {
                     assert carrier == MemorySegment.class;
                     VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER, layout);
-                    bindings.add(new Binding.Move(storage, long.class));
-                    bindings.add(new Binding.BoxAddress());
+                    bindings.move(storage, long.class)
+                            .convertAddress();
                     // ASSERT SCOPE OF BOXED ADDRESS HERE
                     // caveat. buffer should instead go out of scope after call
-                    bindings.add(new Binding.Copy(layout.byteSize(), layout.byteAlignment()));
+                    bindings.copy(layout);
                     break;
                 }
                 case STRUCT_HFA: {
                     assert carrier == MemorySegment.class;
-                    bindings.add(new Binding.AllocateBuffer(layout));
+                    bindings.allocate(layout);
                     GroupLayout group = (GroupLayout)layout;
                     VMStorage[] regs = storageCalculator.regAlloc(
                         StorageClasses.VECTOR, group.memberLayouts().size());
                     if (regs != null) {
                         long offset = 0;
                         for (int i = 0; i < group.memberLayouts().size(); i++) {
                             VMStorage storage = regs[i];
                             final long size = group.memberLayouts().get(i).byteSize();
                             Class<?> type = SharedUtils.primitiveCarrierForSize(size);
-                            bindings.add(new Binding.Dup());
-                            bindings.add(new Binding.Move(storage, type));
-                            bindings.add(new Binding.Dereference(offset, type));
+                            bindings.dup()
+                                    .move(storage, type)
+                                    .dereference(offset, type);
                             offset += size;
                         }
                     } else {
                         spillStructBox(bindings, layout);
                     }
                     break;
                 }
                 case POINTER: {
                     VMStorage storage =
                         storageCalculator.nextStorage(StorageClasses.INTEGER, layout);
-                    bindings.add(new Binding.Move(storage, long.class));
-                    bindings.add(new Binding.BoxAddress());
+                    bindings.move(storage, long.class)
+                            .convertAddress();
                     break;
                 }
                 case INTEGER: {
                     VMStorage storage =
                         storageCalculator.nextStorage(StorageClasses.INTEGER, layout);
-                    bindings.add(new Binding.Move(storage, carrier));
+                    bindings.move(storage, carrier);
                     break;
                 }
                 case FLOAT: {
                     VMStorage storage =
                         storageCalculator.nextStorage(StorageClasses.VECTOR, layout);
-                    bindings.add(new Binding.Move(storage, carrier));
+                    bindings.move(storage, carrier);
                     break;
                 }
                 default:
                     throw new UnsupportedOperationException("Unhandled class " + argumentClass);
             }
-            return bindings;
+            return bindings.build();
         }
     }
 }
