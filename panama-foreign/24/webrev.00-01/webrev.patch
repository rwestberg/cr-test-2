diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayouts.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayouts.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayouts.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayouts.java
@@ -140,11 +140,11 @@
     /**
      * A value layout constant whose size is the same as that of a Java {@code double}, and byte order set to {@link ByteOrder#nativeOrder()}.
      */
     public static final ValueLayout JAVA_DOUBLE = MemoryLayout.ofValueBits(64, ByteOrder.nativeOrder());
 
-/**
+    /**
      * The {@code _Bool} native type.
      */
     public static final ValueLayout C_BOOL;
 
     /**
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java
@@ -161,15 +161,13 @@
         FLOAT,
     }
 
     private static TypeClass classifyValueType(ValueLayout type) {
         var optAbiType = type.abiType();
-        if (!optAbiType.isPresent()) {
-            //padding not allowed here
-            throw new IllegalStateException("Unexpected value layout: could not determine ABI class");
-        }
-        ArgumentClassImpl clazz = AArch64ABI.argumentClassFor(optAbiType.get());
+        //padding not allowed here
+        ArgumentClassImpl clazz = optAbiType.map(AArch64ABI::argumentClassFor).
+            orElseThrow(()->new IllegalStateException("Unexpected value layout: could not determine ABI class"));
         if (clazz == null) {
             //padding not allowed here
             throw new IllegalStateException("Unexpected value layout: could not determine ABI class");
         }
 
@@ -201,17 +199,17 @@
 
         if (!(baseType instanceof ValueLayout))
             return false;
 
         var optAbiType = baseType.abiType();
-        ArgumentClassImpl baseArgClass = optAbiType.isPresent()? AArch64ABI.argumentClassFor(optAbiType.get()) : null;
+        ArgumentClassImpl baseArgClass = optAbiType.map(AArch64ABI::argumentClassFor).orElse(null);
         if (baseArgClass != ArgumentClassImpl.VECTOR)
            return false;
 
         for (MemoryLayout elem : groupLayout.memberLayouts()) {
             optAbiType = elem.abiType();
-            ArgumentClassImpl argClass = optAbiType.isPresent()? AArch64ABI.argumentClassFor(optAbiType.get()) : null;
+            ArgumentClassImpl argClass = optAbiType.map(AArch64ABI::argumentClassFor).orElse(null);
             if (!(elem instanceof ValueLayout) ||
                     elem.bitSize() != baseType.bitSize() ||
                     elem.bitAlignment() != baseType.bitAlignment() ||
                     baseArgClass != argClass) {
                 return false;
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
@@ -428,16 +428,13 @@
 
 
     private static List<ArgumentClassImpl> classifyValueType(ValueLayout type) {
         ArrayList<ArgumentClassImpl> classes = new ArrayList<>();
         var optAbiType = type.abiType();
-        if (!optAbiType.isPresent()) {
-            //padding not allowed here
-            throw new IllegalStateException("Unexpected value layout: could not determine ABI class");
-        }
-
-        ArgumentClassImpl clazz = SysVx64ABI.argumentClassFor(optAbiType.get());
+        //padding not allowed here
+        ArgumentClassImpl clazz = optAbiType.map(SysVx64ABI::argumentClassFor).
+            orElseThrow(()->new IllegalStateException("Unexpected value layout: could not determine ABI class"));
         if (clazz == null) {
             //padding not allowed here
             throw new IllegalStateException("Unexpected value layout: could not determine ABI class");
         }
         if (clazz == ArgumentClassImpl.POINTER) {
@@ -525,15 +522,13 @@
 
     // TODO: handle zero length arrays
     // TODO: Handle nested structs (and primitives)
     private static List<ArgumentClassImpl> classifyStructType(GroupLayout type) {
         var optAbiType = type.abiType();
-        if (optAbiType.isPresent()) {
-            ArgumentClassImpl clazz = SysVx64ABI.argumentClassFor(optAbiType.get());
-            if (clazz == ArgumentClassImpl.COMPLEX_X87) {
-                return COMPLEX_X87_CLASSES;
-            }
+        var clazz = optAbiType.map(SysVx64ABI::argumentClassFor).orElse(null);
+        if (clazz == ArgumentClassImpl.COMPLEX_X87) {
+            return COMPLEX_X87_CLASSES;
         }
 
         long nWords = Utils.alignUp((type.byteSize()), 8) / 8;
         if (nWords > MAX_AGGREGATE_REGS_SIZE) {
             return createMemoryClassArray(nWords);
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/CallArranger.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/CallArranger.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/CallArranger.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/CallArranger.java
@@ -160,15 +160,13 @@
         VARARG_FLOAT
     }
 
     private static TypeClass classifyValueType(ValueLayout type) {
         var optAbiType = type.abiType();
-        if (!optAbiType.isPresent()) {
-            //padding not allowed here
-            throw new IllegalStateException("Unexpected value layout: could not determine ABI class");
-        }
-        ArgumentClassImpl clazz = Windowsx64ABI.argumentClassFor(optAbiType.get());
+        //padding not allowed here
+        ArgumentClassImpl clazz = optAbiType.map(Windowsx64ABI::argumentClassFor).
+            orElseThrow(()->new IllegalStateException("Unexpected value layout: could not determine ABI class"));
         if (clazz == null) {
             //padding not allowed here
             throw new IllegalStateException("Unexpected value layout: could not determine ABI class");
         }
 
diff a/test/jdk/java/foreign/NativeTestHelper.java b/test/jdk/java/foreign/NativeTestHelper.java
--- a/test/jdk/java/foreign/NativeTestHelper.java
+++ b/test/jdk/java/foreign/NativeTestHelper.java
@@ -26,10 +26,11 @@
 import jdk.incubator.foreign.MemoryLayouts.WinABI;
 import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.foreign.SystemABI.Type;
 import jdk.incubator.foreign.ValueLayout;
 import jdk.internal.foreign.Utils;
+import java.util.function.Predicate;
 
 import static jdk.incubator.foreign.SystemABI.ABI_WINDOWS;
 
 public class NativeTestHelper {
 
@@ -46,12 +47,11 @@
             default -> false;
         };
     }
 
     public static boolean isPointer(MemoryLayout layout) {
-        var optAbiType = layout.abiType();
-        return optAbiType.isPresent()? optAbiType.get() == Type.POINTER : false;
+        return layout.abiType().filter(Predicate.isEqual(Type.POINTER)).isPresent();
     }
 
     public static ValueLayout asVarArg(ValueLayout layout) {
         return ABI.name().equals(ABI_WINDOWS) ? WinABI.asVarArg(layout) : layout;
     }
