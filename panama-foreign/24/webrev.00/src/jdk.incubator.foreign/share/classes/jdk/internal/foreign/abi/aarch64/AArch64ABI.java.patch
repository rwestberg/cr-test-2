diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/AArch64ABI.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/AArch64ABI.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/AArch64ABI.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/AArch64ABI.java
@@ -25,10 +25,11 @@
  */
 package jdk.internal.foreign.abi.aarch64;
 
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SystemABI;
 import jdk.internal.foreign.MemoryAddressImpl;
 import jdk.internal.foreign.abi.*;
@@ -38,12 +39,15 @@
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodType;
 import java.lang.invoke.VarHandle;
 import java.util.function.Function;
 import java.util.List;
+import java.util.Objects;
+import java.util.Optional;
 
 import static sun.security.action.GetPropertyAction.privilegedGetProperty;
+import static jdk.incubator.foreign.MemoryLayouts.AArch64ABI.*;
 
 /**
  * ABI implementation based on ARM document "Procedure Call Standard for
  * the ARM 64-bit Architecture".
  */
@@ -70,7 +74,38 @@
     @Override
     public String name() {
         return SystemABI.ABI_AARCH64;
     }
 
+    @Override
+    public Optional<MemoryLayout> layoutFor(Type type) {
+        return switch (Objects.requireNonNull(type)) {
+            case BOOL -> Optional.of(C_BOOL);
+            case UNSIGNED_CHAR -> Optional.of(C_UCHAR);
+            case SIGNED_CHAR -> Optional.of(C_SCHAR);
+            case CHAR -> Optional.of(C_CHAR);
+            case SHORT -> Optional.of(C_SHORT);
+            case UNSIGNED_SHORT -> Optional.of(C_USHORT);
+            case INT -> Optional.of(C_INT);
+            case UNSIGNED_INT -> Optional.of(C_UINT);
+            case LONG -> Optional.of(C_LONG);
+            case UNSIGNED_LONG -> Optional.of(C_ULONG);
+            case LONG_LONG -> Optional.of(C_LONGLONG);
+            case UNSIGNED_LONG_LONG -> Optional.of(C_ULONGLONG);
+            case FLOAT -> Optional.of(C_FLOAT);
+            case DOUBLE -> Optional.of(C_DOUBLE);
+            case POINTER -> Optional.of(C_POINTER);
+            default -> Optional.empty();
+        };
+    }
 
+    static ArgumentClassImpl argumentClassFor(Type type) {
+        return switch (Objects.requireNonNull(type)) {
+            case BOOL, UNSIGNED_CHAR, SIGNED_CHAR, CHAR, SHORT, UNSIGNED_SHORT,
+                INT, UNSIGNED_INT, LONG, UNSIGNED_LONG, LONG_LONG, UNSIGNED_LONG_LONG ->
+                    ArgumentClassImpl.INTEGER;
+            case FLOAT, DOUBLE -> ArgumentClassImpl.VECTOR;
+            case POINTER -> ArgumentClassImpl.POINTER;
+            default -> null;
+        };
+    }
 }
