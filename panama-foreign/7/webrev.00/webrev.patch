diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
@@ -58,25 +58,23 @@
 
     private final Set<String> constants = new HashSet<>();
     protected final JavaSourceBuilder builder = new JavaSourceBuilder();
     protected final TypeTranslator typeTranslator = new TypeTranslator();
     private final List<String> libraryNames;
-    private final List<String> libraryPaths;
     private final String clsName;
     private final String pkgName;
 
-    static JavaFileObject[] generateRaw(Declaration.Scoped decl, String clsName, String pkgName, List<String> libraryNames, List<String> libraryPaths) {
-        return new HandleSourceFactory(clsName, pkgName, libraryNames, libraryPaths).generate(decl);
+    static JavaFileObject[] generateRaw(Declaration.Scoped decl, String clsName, String pkgName, List<String> libraryNames) {
+        return new HandleSourceFactory(clsName, pkgName, libraryNames).generate(decl);
     }
 
-    static JavaFileObject[] generateWrapped(Declaration.Scoped decl, String clsName, String pkgName, List<String> libraryNames, List<String> libraryPaths) {
-        return new StaticWrapperSourceFactory(clsName, pkgName, libraryNames, libraryPaths).generate(decl);
+    static JavaFileObject[] generateWrapped(Declaration.Scoped decl, String clsName, String pkgName, List<String> libraryNames) {
+        return new StaticWrapperSourceFactory(clsName, pkgName, libraryNames).generate(decl);
     }
 
-    public HandleSourceFactory(String clsName, String pkgName, List<String> libraryNames, List<String> libraryPaths) {
+    public HandleSourceFactory(String clsName, String pkgName, List<String> libraryNames) {
         this.libraryNames = libraryNames;
-        this.libraryPaths = libraryPaths;
         this.clsName = clsName;
         this.pkgName = pkgName;
     }
 
     private static String getCLangConstantsHolder() {
@@ -97,12 +95,11 @@
     private static final String C_LANG_CONSTANTS_HOLDER = getCLangConstantsHolder();
 
     public JavaFileObject[] generate(Declaration.Scoped decl) {
         builder.addPackagePrefix(pkgName);
         builder.classBegin(clsName);
-        builder.addLibraries(libraryNames.toArray(new String[0]),
-                libraryPaths != null ? libraryPaths.toArray(new String[0]) : null);
+        builder.addLibraries(libraryNames.toArray(new String[0]));
         //generate all decls
         decl.members().forEach(this::generateDecl);
 
         //generate functional interfaces
         generateFunctionalInterfaces(decl);
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
@@ -98,15 +98,15 @@
     protected void classEnd() {
         indent();
         sb.append("}\n\n");
     }
 
-    protected void addLibraries(String[] libraryNames, String[] libraryPaths) {
+    protected void addLibraries(String[] libraryNames) {
         incrAlign();
         indent();
         sb.append(PRI_MODS + "LibraryLookup[] LIBRARIES = RuntimeHelper.libraries(");
-        sb.append(stringArray(libraryNames) + ", " + stringArray(libraryPaths) + ");\n");
+        sb.append(stringArray(libraryNames) + ");\n");
         decrAlign();
     }
 
     private String stringArray(String[] elements) {
         return Stream.of(elements)
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Main.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Main.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Main.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Main.java
@@ -99,15 +99,14 @@
 
     private int run(String[] args) {
         OptionParser parser = new OptionParser(false);
         parser.accepts("C", format("help.C")).withRequiredArg();
         parser.accepts("I", format("help.I")).withRequiredArg();
-        parser.acceptsAll(List.of("L", "library-path"), format("help.L")).withRequiredArg();
-        parser.accepts("compile", format("help.compile"));
+        parser.accepts("d", format("help.d")).withRequiredArg();
         parser.accepts("filter", format("help.filter")).withRequiredArg();
         parser.accepts("l", format("help.l")).withRequiredArg();
-        parser.accepts("output", format("help.output")).withRequiredArg();
+        parser.accepts("source", format("help.source"));
         parser.acceptsAll(List.of("t", "target-package"), format("help.t")).withRequiredArg();
         parser.acceptsAll(List.of("?", "h", "help"), format("help.h")).forHelp();
         parser.nonOptions(format("help.non.option"));
 
         OptionSet optionSet;
@@ -139,16 +138,16 @@
 
         if (optionSet.has("filter")) {
             optionSet.valuesOf("filter").forEach(p -> builder.addFilter((String) p));
         }
 
-        if (optionSet.has("output")) {
-            builder.setOutputDir(optionSet.valueOf("output").toString());
+        if (optionSet.has("d")) {
+            builder.setOutputDir(optionSet.valueOf("d").toString());
         }
 
-        if (optionSet.has("compile")) {
-            builder.setCompile();
+        if (optionSet.has("source")) {
+            builder.setGenerateSource();
         }
 
         boolean librariesSpecified = optionSet.has("l");
         if (librariesSpecified) {
             for (Object arg : optionSet.valuesOf("l")) {
@@ -159,20 +158,10 @@
                 }
                 builder.addLibraryName(lib);
             }
         }
 
-        if (optionSet.has("L")) {
-            List<?> libpaths = optionSet.valuesOf("L");
-            if (librariesSpecified) {
-                libpaths.forEach(p -> builder.addLibraryPath((String) p));
-            } else {
-                // "L" with no "l" option!
-                err.println(format("warn.L.without.l"));
-            }
-        }
-
         String targetPackage = optionSet.has("t") ? (String) optionSet.valueOf("t") : "";
         builder.setTargetPackage(targetPackage);
 
         Options options = builder.build();
 
@@ -181,11 +170,11 @@
             err.println(format("cannot.read.header.file", header));
             return INPUT_ERROR;
         }
 
         //parse
-        JextractTask jextractTask = JextractTask.newTask(options.compile, header);
+        JextractTask jextractTask = JextractTask.newTask(!options.source, header);
         Declaration.Scoped toplevel = jextractTask.parse(options.clangArgs.toArray(new String[0]));
 
         //filter
         if (!options.filters.isEmpty()) {
             toplevel = Filter.filter(toplevel, options.filters.toArray(new String[0]));
@@ -200,12 +189,11 @@
         try {
             JavaFileObject[] files = HandleSourceFactory.generateWrapped(
                 toplevel,
                 header.getFileName().toString().replace(".h", "_h"),
                 options.targetPackage,
-                options.libraryNames,
-                options.libraryPaths);
+                options.libraryNames);
             jextractTask.write(output, files);
         } catch (RuntimeException re) {
             err.println(re);
             if (Main.DEBUG) {
                 re.printStackTrace(err);
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Options.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Options.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Options.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Options.java
@@ -33,29 +33,26 @@
 public class Options {
     // The args for parsing C
     public final List<String> clangArgs;
     // The list of library names
     public final List<String> libraryNames;
-    // The list of library paths
-    public final List<String> libraryPaths;
     public final List<String> filters;
     // target package
     public final String targetPackage;
     // output directory
     public final String outputDir;
-    public final boolean compile;
+    public final boolean source;
 
     private Options(List<String> clangArgs, List<String> libraryNames,
-            List<String> libraryPaths, List<String> filters, String targetPackage,
-            String outputDir, boolean compile) {
+            List<String> filters, String targetPackage,
+            String outputDir, boolean source) {
         this.clangArgs = clangArgs;
         this.libraryNames = libraryNames;
-        this.libraryPaths = libraryPaths;
         this.filters = filters;
         this.targetPackage = targetPackage;
         this.outputDir = outputDir;
-        this.compile = compile;
+        this.source = source;
     }
 
     public static Builder builder() {
         return new Builder();
     }
@@ -65,33 +62,30 @@
     }
 
     public static class Builder {
         private final List<String> clangArgs;
         private final List<String> libraryNames;
-        private final List<String> libraryPaths;
         private final List<String> filters;
         private String targetPackage;
         private String outputDir;
-        private boolean compile;
+        private boolean source;
 
         public Builder() {
             this.clangArgs = new ArrayList<>();
             this.libraryNames = new ArrayList<>();
-            this.libraryPaths = new ArrayList<>();
             this.filters = new ArrayList<>();
             this.targetPackage = "";
-            this.outputDir = "gensrc";
-            this.compile = false;
+            this.outputDir = ".";
+            this.source = source;
         }
 
         public Options build() {
             return new Options(
                     Collections.unmodifiableList(clangArgs),
                     Collections.unmodifiableList(libraryNames),
-                    Collections.unmodifiableList(libraryPaths),
                     Collections.unmodifiableList(filters),
-                    targetPackage, outputDir, compile
+                    targetPackage, outputDir, source
             );
         }
 
         public void addClangArg(String arg) {
             clangArgs.add(arg);
@@ -99,14 +93,10 @@
 
         public void addLibraryName(String name) {
             libraryNames.add(name);
         }
 
-        public void addLibraryPath(String path) {
-            libraryPaths.add(path);
-        }
-
         public void setOutputDir(String outputDir) {
             this.outputDir = outputDir;
         }
 
         public void setTargetPackage(String pkg) {
@@ -115,10 +105,10 @@
 
         public void addFilter(String filter) {
             filters.add(filter);
         }
 
-        public void setCompile() {
-            compile = true;
+        public void setGenerateSource() {
+            source = true;
         }
     }
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StaticWrapperSourceFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StaticWrapperSourceFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StaticWrapperSourceFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StaticWrapperSourceFactory.java
@@ -35,12 +35,12 @@
 import java.lang.invoke.MethodType;
 import java.util.List;
 import java.util.stream.Collectors;
 
 public class StaticWrapperSourceFactory extends HandleSourceFactory {
-    public StaticWrapperSourceFactory(String clsName, String pkgName, List<String> libraryNames, List<String> libraryPaths) {
-        super(clsName, pkgName, libraryNames, libraryPaths);
+    public StaticWrapperSourceFactory(String clsName, String pkgName, List<String> libraryNames) {
+        super(clsName, pkgName, libraryNames);
     }
 
     @Override
     protected void generateFunctionalInterfaces(Declaration.Scoped decl) {
         //do nothing
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Messages.properties b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Messages.properties
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Messages.properties
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Messages.properties
@@ -19,25 +19,19 @@
 #  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 #  or visit www.oracle.com if you need additional information or have any
 #  questions.
 #
 
-# warning messages
-warn.L.without.l=option L specified without option l
-
 # error message
 cannot.read.header.file=cannot read header file: {0}
 l.name.should.not.be.path=option value for -l option cannot be a path
 
 # help messages for options
-help.compile=compile the generated java sources
-help.filter=header files to filter
 help.C=pass through argument for clang
 help.I=specify include files path
-help.L=specify library path
-help.d=specify where to place generated class files
+help.d=specify where to place generated files
+help.filter=header files to filter
 help.h=print help
 help.l=specify a library
-help.log=specify log level in java.util.logging.Level name
-help.output=specify output source dump directory
+help.source=generate java sources
 help.t=target package for specified header files
 help.non.option=header file
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.template
@@ -8,13 +8,10 @@
 import jdk.incubator.foreign.SystemABI;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
 import java.util.Arrays;
 import java.util.Optional;
 
 import static ${C_LANG}.*;
 
@@ -24,30 +21,20 @@
 
     private final static ClassLoader LOADER = RuntimeHelper.class.getClassLoader();
 
     private final static MethodHandles.Lookup MH_LOOKUP = MethodHandles.lookup();
 
-    static final LibraryLookup[] libraries(String[] libNames, String[] libPaths) {
+    static final LibraryLookup[] libraries(String[] libNames) {
         if (libNames.length == 0) {
-            return new LibraryLookup[]{LibraryLookup.ofDefault()};
+            return new LibraryLookup[] { LibraryLookup.ofDefault() };
         } else {
-            Path[] paths = Arrays.stream(libPaths).map(Paths::get).toArray(Path[]::new);
-            return Arrays.stream(libNames).map(libName -> {
-                Optional<Path> absPath = findLibraryPath(paths, libName);
-                return absPath.isPresent() ?
-                        LibraryLookup.ofPath(MH_LOOKUP, absPath.get().toString()) :
-                        LibraryLookup.ofLibrary(MH_LOOKUP, libName);
-            }).toArray(LibraryLookup[]::new);
+            return Arrays.stream(libNames)
+                .map(libName -> LibraryLookup.ofLibrary(MH_LOOKUP, libName))
+                .toArray(LibraryLookup[]::new);
         }
     }
 
-    private static final Optional<Path> findLibraryPath(Path[] paths, String libName) {
-        return Arrays.stream(paths).
-                map(p -> p.resolve(System.mapLibraryName(libName))).
-                filter(Files::isRegularFile).map(Path::toAbsolutePath).findFirst();
-    }
-
     private static final Optional<MemoryAddress> lookup(LibraryLookup[] LIBRARIES, String sym) {
         for (LibraryLookup l : LIBRARIES) {
             try {
                 return Optional.of(l.lookup(sym));
             } catch (Throwable t) {
diff a/test/jdk/tools/jextract/JextractToolProviderTest.java b/test/jdk/tools/jextract/JextractToolProviderTest.java
--- a/test/jdk/tools/jextract/JextractToolProviderTest.java
+++ b/test/jdk/tools/jextract/JextractToolProviderTest.java
@@ -58,11 +58,11 @@
 
     @Test
     public void testOutputClass() {
         Path helloOutput = getOutputFilePath("hellogen");
         Path helloH = getInputFilePath("hello.h");
-        run("--compile", "--output", helloOutput.toString(), helloH.toString()).checkSuccess();
+        run("-d", helloOutput.toString(), helloH.toString()).checkSuccess();
         try(Loader loader = classLoader(helloOutput)) {
             Class<?> cls = loader.loadClass("hello_h");
             // check a method for "void func(int)"
             assertNotNull(findMethod(cls, "func", int.class));
             // check a method for "int printf(MemoryAddress, Object[])"
@@ -73,11 +73,11 @@
     }
 
     private void testTargetPackage(String targetPkgOption) {
         Path helloOutput = getOutputFilePath("hellogen");
         Path helloH = getInputFilePath("hello.h");
-        run(targetPkgOption, "com.acme", "--compile", "--output",
+        run(targetPkgOption, "com.acme", "-d",
             helloOutput.toString(), helloH.toString()).checkSuccess();
         try(Loader loader = classLoader(helloOutput)) {
             Class<?> cls = loader.loadClass("com.acme.hello_h");
             // check a method for "void func(int)"
             assertNotNull(findMethod(cls, "func", int.class));
diff a/test/jdk/tools/jextract/JtregJextract.java b/test/jdk/tools/jextract/JtregJextract.java
--- a/test/jdk/tools/jextract/JtregJextract.java
+++ b/test/jdk/tools/jextract/JtregJextract.java
@@ -52,22 +52,21 @@
 
         jextrOpts.clear();
         jextrOpts.add("-C-nostdinc");
         jextrOpts.add("-I");
         jextrOpts.add(inputDir.toAbsolutePath().toString());
-        jextrOpts.add("--output");
+        jextrOpts.add("-d");
         jextrOpts.add(outputDir.toAbsolutePath().toString());
-        jextrOpts.add("--compile");
 
         int i = 0;
         while (i < args.length) {
             String opt = args[i++];
             if ("--".equals(opt)) {
                 break;
             }
 
-            if ("--compile".equals(opt) || "--output".equals(opt)) {
+            if ("-d".equals(opt)) {
                 i++;
                 continue;
             }
             // Pattern $(system.property.name) is replaced with the
             // value of the System property of that name.
