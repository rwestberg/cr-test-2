diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.template
@@ -8,13 +8,10 @@
 import jdk.incubator.foreign.SystemABI;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
 import java.util.Arrays;
 import java.util.Optional;
 
 import static ${C_LANG}.*;
 
@@ -24,30 +21,20 @@
 
     private final static ClassLoader LOADER = RuntimeHelper.class.getClassLoader();
 
     private final static MethodHandles.Lookup MH_LOOKUP = MethodHandles.lookup();
 
-    static final LibraryLookup[] libraries(String[] libNames, String[] libPaths) {
+    static final LibraryLookup[] libraries(String[] libNames) {
         if (libNames.length == 0) {
-            return new LibraryLookup[]{LibraryLookup.ofDefault()};
+            return new LibraryLookup[] { LibraryLookup.ofDefault() };
         } else {
-            Path[] paths = Arrays.stream(libPaths).map(Paths::get).toArray(Path[]::new);
-            return Arrays.stream(libNames).map(libName -> {
-                Optional<Path> absPath = findLibraryPath(paths, libName);
-                return absPath.isPresent() ?
-                        LibraryLookup.ofPath(MH_LOOKUP, absPath.get().toString()) :
-                        LibraryLookup.ofLibrary(MH_LOOKUP, libName);
-            }).toArray(LibraryLookup[]::new);
+            return Arrays.stream(libNames)
+                .map(libName -> LibraryLookup.ofLibrary(MH_LOOKUP, libName))
+                .toArray(LibraryLookup[]::new);
         }
     }
 
-    private static final Optional<Path> findLibraryPath(Path[] paths, String libName) {
-        return Arrays.stream(paths).
-                map(p -> p.resolve(System.mapLibraryName(libName))).
-                filter(Files::isRegularFile).map(Path::toAbsolutePath).findFirst();
-    }
-
     private static final Optional<MemoryAddress> lookup(LibraryLookup[] LIBRARIES, String sym) {
         for (LibraryLookup l : LIBRARIES) {
             try {
                 return Optional.of(l.lookup(sym));
             } catch (Throwable t) {
