diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Main.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Main.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Main.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Main.java
@@ -99,15 +99,14 @@
 
     private int run(String[] args) {
         OptionParser parser = new OptionParser(false);
         parser.accepts("C", format("help.C")).withRequiredArg();
         parser.accepts("I", format("help.I")).withRequiredArg();
-        parser.acceptsAll(List.of("L", "library-path"), format("help.L")).withRequiredArg();
-        parser.accepts("compile", format("help.compile"));
+        parser.accepts("d", format("help.d")).withRequiredArg();
         parser.accepts("filter", format("help.filter")).withRequiredArg();
         parser.accepts("l", format("help.l")).withRequiredArg();
-        parser.accepts("output", format("help.output")).withRequiredArg();
+        parser.accepts("source", format("help.source"));
         parser.acceptsAll(List.of("t", "target-package"), format("help.t")).withRequiredArg();
         parser.acceptsAll(List.of("?", "h", "help"), format("help.h")).forHelp();
         parser.nonOptions(format("help.non.option"));
 
         OptionSet optionSet;
@@ -139,16 +138,16 @@
 
         if (optionSet.has("filter")) {
             optionSet.valuesOf("filter").forEach(p -> builder.addFilter((String) p));
         }
 
-        if (optionSet.has("output")) {
-            builder.setOutputDir(optionSet.valueOf("output").toString());
+        if (optionSet.has("d")) {
+            builder.setOutputDir(optionSet.valueOf("d").toString());
         }
 
-        if (optionSet.has("compile")) {
-            builder.setCompile();
+        if (optionSet.has("source")) {
+            builder.setGenerateSource();
         }
 
         boolean librariesSpecified = optionSet.has("l");
         if (librariesSpecified) {
             for (Object arg : optionSet.valuesOf("l")) {
@@ -159,20 +158,10 @@
                 }
                 builder.addLibraryName(lib);
             }
         }
 
-        if (optionSet.has("L")) {
-            List<?> libpaths = optionSet.valuesOf("L");
-            if (librariesSpecified) {
-                libpaths.forEach(p -> builder.addLibraryPath((String) p));
-            } else {
-                // "L" with no "l" option!
-                err.println(format("warn.L.without.l"));
-            }
-        }
-
         String targetPackage = optionSet.has("t") ? (String) optionSet.valueOf("t") : "";
         builder.setTargetPackage(targetPackage);
 
         Options options = builder.build();
 
@@ -181,11 +170,11 @@
             err.println(format("cannot.read.header.file", header));
             return INPUT_ERROR;
         }
 
         //parse
-        JextractTask jextractTask = JextractTask.newTask(options.compile, header);
+        JextractTask jextractTask = JextractTask.newTask(!options.source, header);
         Declaration.Scoped toplevel = jextractTask.parse(options.clangArgs.toArray(new String[0]));
 
         //filter
         if (!options.filters.isEmpty()) {
             toplevel = Filter.filter(toplevel, options.filters.toArray(new String[0]));
@@ -200,12 +189,11 @@
         try {
             JavaFileObject[] files = HandleSourceFactory.generateWrapped(
                 toplevel,
                 header.getFileName().toString().replace(".h", "_h"),
                 options.targetPackage,
-                options.libraryNames,
-                options.libraryPaths);
+                options.libraryNames);
             jextractTask.write(output, files);
         } catch (RuntimeException re) {
             err.println(re);
             if (Main.DEBUG) {
                 re.printStackTrace(err);
