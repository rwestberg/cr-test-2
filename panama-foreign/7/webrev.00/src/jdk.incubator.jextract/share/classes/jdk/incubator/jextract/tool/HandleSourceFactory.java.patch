diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
@@ -58,25 +58,23 @@
 
     private final Set<String> constants = new HashSet<>();
     protected final JavaSourceBuilder builder = new JavaSourceBuilder();
     protected final TypeTranslator typeTranslator = new TypeTranslator();
     private final List<String> libraryNames;
-    private final List<String> libraryPaths;
     private final String clsName;
     private final String pkgName;
 
-    static JavaFileObject[] generateRaw(Declaration.Scoped decl, String clsName, String pkgName, List<String> libraryNames, List<String> libraryPaths) {
-        return new HandleSourceFactory(clsName, pkgName, libraryNames, libraryPaths).generate(decl);
+    static JavaFileObject[] generateRaw(Declaration.Scoped decl, String clsName, String pkgName, List<String> libraryNames) {
+        return new HandleSourceFactory(clsName, pkgName, libraryNames).generate(decl);
     }
 
-    static JavaFileObject[] generateWrapped(Declaration.Scoped decl, String clsName, String pkgName, List<String> libraryNames, List<String> libraryPaths) {
-        return new StaticWrapperSourceFactory(clsName, pkgName, libraryNames, libraryPaths).generate(decl);
+    static JavaFileObject[] generateWrapped(Declaration.Scoped decl, String clsName, String pkgName, List<String> libraryNames) {
+        return new StaticWrapperSourceFactory(clsName, pkgName, libraryNames).generate(decl);
     }
 
-    public HandleSourceFactory(String clsName, String pkgName, List<String> libraryNames, List<String> libraryPaths) {
+    public HandleSourceFactory(String clsName, String pkgName, List<String> libraryNames) {
         this.libraryNames = libraryNames;
-        this.libraryPaths = libraryPaths;
         this.clsName = clsName;
         this.pkgName = pkgName;
     }
 
     private static String getCLangConstantsHolder() {
@@ -97,12 +95,11 @@
     private static final String C_LANG_CONSTANTS_HOLDER = getCLangConstantsHolder();
 
     public JavaFileObject[] generate(Declaration.Scoped decl) {
         builder.addPackagePrefix(pkgName);
         builder.classBegin(clsName);
-        builder.addLibraries(libraryNames.toArray(new String[0]),
-                libraryPaths != null ? libraryPaths.toArray(new String[0]) : null);
+        builder.addLibraries(libraryNames.toArray(new String[0]));
         //generate all decls
         decl.members().forEach(this::generateDecl);
 
         //generate functional interfaces
         generateFunctionalInterfaces(decl);
