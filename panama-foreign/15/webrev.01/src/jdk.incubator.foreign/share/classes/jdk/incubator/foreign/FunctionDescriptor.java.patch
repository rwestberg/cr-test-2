diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/FunctionDescriptor.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/FunctionDescriptor.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/FunctionDescriptor.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/FunctionDescriptor.java
@@ -40,15 +40,13 @@
  */
 public final class FunctionDescriptor implements Constable {
     
     private final MemoryLayout resLayout;
     private final MemoryLayout[] argLayouts;
-    private final boolean variadic;
 
-    private FunctionDescriptor(MemoryLayout resLayout, boolean variadic, MemoryLayout... argLayouts) {
+    private FunctionDescriptor(MemoryLayout resLayout, MemoryLayout... argLayouts) {
         this.resLayout = resLayout;
-        this.variadic = variadic;
         this.argLayouts = argLayouts;
     }
 
     /**
      * Returns the return foreign.layout associated with this function.
@@ -64,50 +62,60 @@
      */
     public List<MemoryLayout> argumentLayouts() {
         return Arrays.asList(argLayouts);
     }
 
-    /**
-     * Does this function accept a variable-arity argument list?
-     * @return true, if the function models a variadic function.
-     */
-    public boolean isVariadic() {
-        return variadic;
-    }
-
     /**
      * Create a function descriptor with given return and argument layouts.
-     * @param varargs is this a variadic function
      * @param resLayout the return
      * @param argLayouts the argument layouts.
      * @return the new function descriptor.
      */
-    public static FunctionDescriptor of(MemoryLayout resLayout, boolean varargs, MemoryLayout... argLayouts) {
-        return new FunctionDescriptor(resLayout, varargs, argLayouts);
+    public static FunctionDescriptor of(MemoryLayout resLayout, MemoryLayout... argLayouts) {
+        return new FunctionDescriptor(resLayout, argLayouts);
     }
 
     /**
      * Create a void function descriptor with given argument layouts.
-     * @param varargs is this a variadic function
      * @param argLayouts the argument layouts.
      * @return the new function descriptor.
      */
-    public static FunctionDescriptor ofVoid(boolean varargs, MemoryLayout... argLayouts) {
-        return new FunctionDescriptor(null, varargs, argLayouts);
+    public static FunctionDescriptor ofVoid(MemoryLayout... argLayouts) {
+        return new FunctionDescriptor(null, argLayouts);
+    }
+
+    /**
+     * Create a new function descriptor with the given argument layouts appended to the argument layout array
+     * of this function descriptor.
+     * @param addedLayouts the layouts to append
+     * @return the new function descriptor
+     */
+    public FunctionDescriptor appendArgumentLayouts(MemoryLayout... addedLayouts) {
+        MemoryLayout[] newLayouts = Arrays.copyOf(argLayouts, argLayouts.length + addedLayouts.length);
+        System.arraycopy(addedLayouts, 0, newLayouts, argLayouts.length, addedLayouts.length);
+        return new FunctionDescriptor(resLayout, newLayouts);
+    }
+
+    /**
+     * Create a new function descriptor with the given memory layout as the new return layout.
+     * @param newReturn the new return layout
+     * @return the new function descriptor
+     */
+    public FunctionDescriptor changeReturnLayout(MemoryLayout newReturn) {
+        return new FunctionDescriptor(newReturn, argLayouts);
     }
 
     /**
      * Returns a string representation of this function descriptor.
      * @return a string representation of this function descriptor.
      */
     @Override
     public String toString() {
-        return String.format("(%s%s)%s",
+        return String.format("(%s)%s",
                 Stream.of(argLayouts)
                         .map(Object::toString)
                         .collect(Collectors.joining()),
-                variadic ? "*" : "",
                 returnLayout().map(Object::toString).orElse("v"));
     }
 
     /**
      * Compares the specified object with this function descriptor for equality. Returns {@code true} if and only if the specified
@@ -123,32 +131,30 @@
         }
         if (!(other instanceof FunctionDescriptor)) {
             return false;
         }
         FunctionDescriptor f = (FunctionDescriptor) other;
-        return Objects.equals(resLayout, f.resLayout) && Arrays.equals(argLayouts, f.argLayouts) &&
-            variadic == f.variadic;
+        return Objects.equals(resLayout, f.resLayout) && Arrays.equals(argLayouts, f.argLayouts);
     }
 
     /**
      * Returns the hash code value for this function descriptor.
      * @return the hash code value for this function descriptor.
      */
     @Override
     public int hashCode() {
-        int hashCode = Arrays.hashCode(argLayouts) ^ Boolean.hashCode(variadic);
+        int hashCode = Arrays.hashCode(argLayouts);
         return resLayout == null ? hashCode : resLayout.hashCode() ^ hashCode;
     }
 
     @Override
     public Optional<DynamicConstantDesc<FunctionDescriptor>> describeConstable() {
         List<ConstantDesc> constants = new ArrayList<>();
         constants.add(resLayout == null ? AbstractLayout.MH_VOID_FUNCTION : AbstractLayout.MH_FUNCTION);
         if (resLayout != null) {
             constants.add(resLayout.describeConstable().get());
         }
-        constants.add(variadic ? AbstractLayout.TRUE : AbstractLayout.FALSE);
         for (int i = 0 ; i < argLayouts.length ; i++) {
             constants.add(argLayouts[i].describeConstable().get());
         }
         return Optional.of(DynamicConstantDesc.ofNamed(
                     ConstantDescs.BSM_INVOKE, "function", AbstractLayout.CD_FUNCTION_DESC, constants.toArray(new ConstantDesc[0])));
