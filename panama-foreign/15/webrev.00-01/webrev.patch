diff a/test/jdk/java/foreign/StdLibTest.java b/test/jdk/java/foreign/StdLibTest.java
--- a/test/jdk/java/foreign/StdLibTest.java
+++ b/test/jdk/java/foreign/StdLibTest.java
@@ -173,10 +173,11 @@
         final static MethodHandle qsort;
         final static MethodHandle qsortCompar;
         final static FunctionDescriptor qsortComparFunction;
         final static MethodHandle rand;
         final static MemoryAddress printfAddr;
+        final static FunctionDescriptor printfBase;
 
         static {
             try {
                 LibraryLookup lookup = LibraryLookup.ofDefault();
 
@@ -213,10 +214,12 @@
                 rand = abi.downcallHandle(lookup.lookup("rand"),
                         MethodType.methodType(int.class),
                         FunctionDescriptor.of(C_INT));
 
                 printfAddr = lookup.lookup("printf");
+
+                printfBase = FunctionDescriptor.of(C_INT, C_POINTER);
             } catch (Throwable ex) {
                 throw new IllegalStateException(ex);
             }
         }
 
@@ -344,18 +347,13 @@
             //method type
             MethodType mt = MethodType.methodType(int.class, MemoryAddress.class);
             for (PrintfArg arg : args) {
                 mt = mt.appendParameterTypes(arg.carrier);
             }
-            //function
-            List<MemoryLayout> argLayouts = new ArrayList<>();
-            argLayouts.add(C_POINTER); //format
-            for (PrintfArg arg : args) {
-                argLayouts.add(arg.layout);
-            }
-            MethodHandle mh = abi.downcallHandle(printfAddr, mt,
-                    FunctionDescriptor.of(C_INT, argLayouts.toArray(new MemoryLayout[0])));
+            FunctionDescriptor printfSpec = StdLibHelper.printfBase.appendArgumentLayouts(
+                    args.stream().map(a -> a.layout).toArray(MemoryLayout[]::new));
+            MethodHandle mh = abi.downcallHandle(printfAddr, mt, printfSpec);
             return mh.asSpreader(1, Object[].class, args.size());
         }
     }
 
     /*** data providers ***/
