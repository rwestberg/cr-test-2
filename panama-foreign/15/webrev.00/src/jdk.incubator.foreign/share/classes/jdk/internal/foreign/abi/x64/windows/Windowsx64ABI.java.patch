diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/Windowsx64ABI.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/Windowsx64ABI.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/Windowsx64ABI.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/Windowsx64ABI.java
@@ -45,11 +45,11 @@
     public static final int MAX_VECTOR_ARGUMENT_REGISTERS = 4;
     public static final int MAX_VECTOR_RETURN_REGISTERS = 1;
     public static final int MAX_REGISTER_ARGUMENTS = 4;
     public static final int MAX_REGISTER_RETURNS = 1;
 
-    public static final String VARARGS_ANNOTATION_NAME = "isVarArg";
+    public static final String VARARGS_ANNOTATION_NAME = "abi/windows/varargs";
 
     private static Windowsx64ABI instance;
 
     public static Windowsx64ABI getInstance() {
         if (instance == null) {
@@ -58,23 +58,15 @@
         return instance;
     }
 
     @Override
     public MethodHandle downcallHandle(MemoryAddress symbol, MethodType type, FunctionDescriptor function) {
-        if (function.isVariadic()) {
-            throw new IllegalArgumentException("Variadic function: " + function);
-        }
-
         return CallArranger.arrangeDowncall(MemoryAddressImpl.addressof(symbol), type, function);
     }
 
     @Override
     public MemoryAddress upcallStub(MethodHandle target, FunctionDescriptor function) {
-        if (function.isVariadic()) {
-            throw new IllegalArgumentException("Variadic function: " + function);
-        }
-
         return UpcallStubs.upcallAddress(CallArranger.arrangeUpcall(target, target.type(), function));
     }
 
     @Override
     public String name() {
