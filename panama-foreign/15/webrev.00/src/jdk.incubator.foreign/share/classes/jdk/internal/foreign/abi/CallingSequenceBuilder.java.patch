diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/CallingSequenceBuilder.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/CallingSequenceBuilder.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/CallingSequenceBuilder.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/CallingSequenceBuilder.java
@@ -41,43 +41,31 @@
     private final boolean forUpcall;
     private final List<List<Binding>> inputBindings = new ArrayList<>();
     private List<Binding> ouputBindings = List.of();
 
     private MethodType mt = MethodType.methodType(void.class);
-    private FunctionDescriptor desc = FunctionDescriptor.ofVoid(false);
+    private FunctionDescriptor desc = FunctionDescriptor.ofVoid();
 
     public CallingSequenceBuilder(boolean forUpcall) {
         this.forUpcall = forUpcall;
     }
 
     public final CallingSequenceBuilder addArgumentBindings(Class<?> carrier, MemoryLayout layout,
                                                             List<Binding> bindings) {
         verifyBindings(true, carrier, bindings);
         inputBindings.add(bindings);
         mt = mt.appendParameterTypes(carrier);
-        descAddArgument(layout);
+        desc = desc.appendArgumentLayouts(layout);
         return this;
     }
 
-    private void descAddArgument(MemoryLayout layout) {
-        boolean isVoid = desc.returnLayout().isEmpty();
-        var args = new ArrayList<>(desc.argumentLayouts());
-        args.add(layout);
-        var argsArray = args.toArray(MemoryLayout[]::new);
-        if (isVoid) {
-            desc = FunctionDescriptor.ofVoid(false, argsArray);
-        } else {
-            desc = FunctionDescriptor.of(desc.returnLayout().get(), false, argsArray);
-        }
-    }
-
     public CallingSequenceBuilder setReturnBindings(Class<?> carrier, MemoryLayout layout,
                                                     List<Binding> bindings) {
         verifyBindings(false, carrier, bindings);
         this.ouputBindings = bindings;
         mt = mt.changeReturnType(carrier);
-        desc = FunctionDescriptor.of(layout, false, desc.argumentLayouts().toArray(MemoryLayout[]::new));
+        desc = desc.changeReturnLayout(layout);
         return this;
     }
 
     public CallingSequence build() {
         return new CallingSequence(mt, desc, inputBindings, ouputBindings);
