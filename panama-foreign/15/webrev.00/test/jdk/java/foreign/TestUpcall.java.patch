diff a/test/jdk/java/foreign/TestUpcall.java b/test/jdk/java/foreign/TestUpcall.java
--- a/test/jdk/java/foreign/TestUpcall.java
+++ b/test/jdk/java/foreign/TestUpcall.java
@@ -73,11 +73,11 @@
     static {
         try {
             DUMMY = MethodHandles.lookup().findStatic(TestUpcall.class, "dummy", MethodType.methodType(void.class));
             PASS_AND_SAVE = MethodHandles.lookup().findStatic(TestUpcall.class, "passAndSave", MethodType.methodType(Object.class, Object[].class, AtomicReference.class));
 
-            dummyAddress = abi.upcallStub(DUMMY, FunctionDescriptor.ofVoid(false));
+            dummyAddress = abi.upcallStub(DUMMY, FunctionDescriptor.ofVoid());
             cleaner.register(dummyAddress, () -> abi.freeUpcallStub(dummyAddress));
         } catch (Throwable ex) {
             throw new IllegalStateException(ex);
         }
     }
@@ -114,12 +114,12 @@
     static FunctionDescriptor function(Ret ret, List<ParamType> params, List<StructFieldType> fields) {
         List<MemoryLayout> paramLayouts = params.stream().map(p -> p.layout(fields)).collect(Collectors.toList());
         paramLayouts.add(C_POINTER); // the callback
         MemoryLayout[] layouts = paramLayouts.toArray(new MemoryLayout[0]);
         return ret == Ret.VOID ?
-                FunctionDescriptor.ofVoid(false, layouts) :
-                FunctionDescriptor.of(layouts[0], false, layouts);
+                FunctionDescriptor.ofVoid(layouts) :
+                FunctionDescriptor.of(layouts[0], layouts);
     }
 
     static Object[] makeArgs(Ret ret, List<ParamType> params, List<StructFieldType> fields, List<Consumer<Object>> checks, List<Consumer<Object[]>> argChecks) throws ReflectiveOperationException {
         Object[] args = new Object[params.size() + 1];
         for (int i = 0 ; i < params.size() ; i++) {
@@ -165,12 +165,12 @@
 
         mh = mh.asType(mh.type().changeReturnType(ret == Ret.VOID ? void.class : firstCarrier));
 
         MemoryLayout[] paramLayouts = params.stream().map(p -> p.layout(fields)).toArray(MemoryLayout[]::new);
         FunctionDescriptor func = ret != Ret.VOID
-                ? FunctionDescriptor.of(firstlayout, false, paramLayouts)
-                : FunctionDescriptor.ofVoid(false, paramLayouts);
+                ? FunctionDescriptor.of(firstlayout, paramLayouts)
+                : FunctionDescriptor.ofVoid(paramLayouts);
         MemoryAddress stub = abi.upcallStub(mh, func);
         cleaner.register(stub, () -> abi.freeUpcallStub(stub));
         return stub;
     }
 
