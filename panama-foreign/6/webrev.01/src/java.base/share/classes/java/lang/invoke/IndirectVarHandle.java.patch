diff a/src/java.base/share/classes/java/lang/invoke/IndirectVarHandle.java b/src/java.base/share/classes/java/lang/invoke/IndirectVarHandle.java
--- a/src/java.base/share/classes/java/lang/invoke/IndirectVarHandle.java
+++ b/src/java.base/share/classes/java/lang/invoke/IndirectVarHandle.java
@@ -27,10 +27,11 @@
 package java.lang.invoke;
 
 import jdk.internal.vm.annotation.ForceInline;
 import jdk.internal.vm.annotation.Stable;
 
+import java.util.List;
 import java.util.function.BiFunction;
 
 /**
  * An indirect var handle can be thought of as an aggregate of the method handles implementing its supported access modes.
  * Its varform contains no method name table (given that some of the method handles composing a bound var handle might
@@ -46,21 +47,35 @@
     @Stable
     private final MethodHandle[] handleMap = new MethodHandle[AccessMode.values().length];
     private final VarHandle directTarget; // cache, for performance reasons
     private final VarHandle target;
     private final BiFunction<AccessMode, MethodHandle, MethodHandle> handleFactory;
+    private final Class<?> value;
+    private final Class<?>[] coordinates;
 
     IndirectVarHandle(VarHandle target, Class<?> value, Class<?>[] coordinates, BiFunction<AccessMode, MethodHandle, MethodHandle> handleFactory) {
         super(new VarForm(value, coordinates));
         this.handleFactory = handleFactory;
         this.target = target;
         this.directTarget = target.asDirect();
+        this.value = value;
+        this.coordinates = coordinates;
+    }
+
+    @Override
+    public Class<?> varType() {
+        return value;
+    }
+
+    @Override
+    public List<Class<?>> coordinateTypes() {
+        return List.of(coordinates);
     }
 
     @Override
     MethodType accessModeTypeUncached(AccessMode accessMode) {
-        return getMethodHandle(accessMode.ordinal()).type().dropParameterTypes(0, 1);
+        return accessMode.at.accessModeType(directTarget.getClass(), value, coordinates);
     }
 
     @Override
     boolean isDirect() {
         return false;
@@ -82,8 +97,8 @@
         return handle;
     }
 
     @Override
     public MethodHandle toMethodHandle(AccessMode accessMode) {
-        return getMethodHandle(accessMode.ordinal()).bindTo(this.directTarget);
+        return getMethodHandle(accessMode.ordinal()).bindTo(directTarget);
     }
 }
