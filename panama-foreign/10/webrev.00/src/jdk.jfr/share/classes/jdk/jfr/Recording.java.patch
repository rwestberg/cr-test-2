diff a/src/jdk.jfr/share/classes/jdk/jfr/Recording.java b/src/jdk.jfr/share/classes/jdk/jfr/Recording.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/Recording.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/Recording.java
@@ -97,23 +97,27 @@
      * Creates a recording with settings from a map of name-value pairs.
      * <p>
      * A newly created recording is in the {@link RecordingState#NEW} state. To start
      * the recording, invoke the {@link Recording#start()} method.
      *
+     * @param settings settings as a map of name-value pairs, not {@code null}
+     *
      * @throws IllegalStateException if Flight Recorder can't be created (for
      *         example, if the Java Virtual Machine (JVM) lacks Flight Recorder
      *         support, or if the file repository can't be created or accessed)
      *
      * @throws SecurityException If a security manager is used and
      *         FlightRecorderPermission "accessFlightRecorder" is not set.
      *
      * @see jdk.jfr
      */
     public Recording(Map<String, String> settings) {
+        Objects.requireNonNull(settings);
+        Map<String, String> sanitized = Utils.sanitizeNullFreeStringMap(settings);
         PlatformRecorder r = FlightRecorder.getFlightRecorder().getInternal();
         synchronized (r) {
-            this.internal = r.newRecording(settings);
+            this.internal = r.newRecording(sanitized);
             this.internal.setRecording(this);
             if (internal.getRecording() != this) {
                 throw new InternalError("Internal recording not properly setup");
             }
         }
