diff a/src/java.base/share/classes/java/lang/reflect/Proxy.java b/src/java.base/share/classes/java/lang/reflect/Proxy.java
--- a/src/java.base/share/classes/java/lang/reflect/Proxy.java
+++ b/src/java.base/share/classes/java/lang/reflect/Proxy.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -295,17 +295,10 @@
      * {@link Constructor#setAccessible(boolean) accessible} flag already set
      */
     private static final ClassLoaderValue<Constructor<?>> proxyCache =
         new ClassLoaderValue<>();
 
-    /**
-     * System property to revert to generation of proxy class files for version 1.5 (V49).
-     * Set to "true" to generate v49 class file format.
-     */
-    private static final boolean PROXY_GENERATOR_V49 =
-            GetBooleanAction.privilegedGetProperty("jdk.proxy.ProxyGenerator.v49");
-
     /**
      * the invocation handler for this proxy instance.
      * @serial
      */
     @SuppressWarnings("serial") // Not statically typed as Serializable
@@ -539,13 +532,11 @@
             trace(proxyName, m, loader, interfaces);
 
             /*
              * Generate the specified proxy class.
              */
-            byte[] proxyClassFile = PROXY_GENERATOR_V49
-                    ? ProxyGenerator_v49.generateProxyClass(proxyName, interfaces, accessFlags)
-                    : ProxyGenerator.generateProxyClass(loader, proxyName, interfaces, accessFlags);
+            byte[] proxyClassFile = ProxyGenerator.generateProxyClass(loader, proxyName, interfaces, accessFlags);
             try {
                 Class<?> pc = JLA.defineClass(loader, proxyName, proxyClassFile,
                                               null, "__dynamic_proxy__");
                 reverseProxyCache.sub(pc).putIfAbsent(loader, Boolean.TRUE);
                 return pc;
