diff a/src/java.base/share/classes/java/net/DatagramSocket.java b/src/java.base/share/classes/java/net/DatagramSocket.java
--- a/src/java.base/share/classes/java/net/DatagramSocket.java
+++ b/src/java.base/share/classes/java/net/DatagramSocket.java
@@ -116,11 +116,12 @@
     /**
      * Various states of this socket.
      */
     private boolean bound = false;
     private boolean closed = false;
-    private Object closeLock = new Object();
+    private volatile boolean created;
+    private final Object closeLock = new Object();
 
     /*
      * The implementation of this DatagramSocket.
      */
     private final DatagramSocketImpl impl;
@@ -290,10 +291,13 @@
         }
 
         // create a datagram socket.
         boolean multicast = (this instanceof MulticastSocket);
         this.impl = createImpl(multicast);
+        // creates the udp socket
+        impl.create();
+        created = true;
         this.oldImpl = checkOldImpl(impl);
         if (bindaddr != null) {
             try {
                 bind(bindaddr);
             } finally {
@@ -390,24 +394,31 @@
         if (factory != null) {
             impl = factory.createDatagramSocketImpl();
         } else {
             impl = DefaultDatagramSocketImplFactory.createDatagramSocketImpl(multicast);
         }
-        // creates a udp socket
-        impl.create();
         return impl;
     }
 
     /**
-     * Return the {@code DatagramSocketImpl} attached to this socket.
+     * Return the {@code DatagramSocketImpl} attached to this socket,
+     * creating the socket if not already created.
      *
      * @return  the {@code DatagramSocketImpl} attached to that
      *          DatagramSocket
-     * @throws SocketException never thrown
+     * @throws SocketException if creating the socket fails
      * @since 1.4
      */
-    DatagramSocketImpl getImpl() throws SocketException {
+    final DatagramSocketImpl getImpl() throws SocketException {
+        if (!created) {
+            synchronized (this) {
+                if (!created)  {
+                    impl.create();
+                    created = true;
+                }
+            }
+        }
         return impl;
     }
 
     /**
      * Binds this DatagramSocket to a specific address and port.
