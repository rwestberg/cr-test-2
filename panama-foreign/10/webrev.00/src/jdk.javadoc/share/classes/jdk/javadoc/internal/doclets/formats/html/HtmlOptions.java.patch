diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlOptions.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlOptions.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlOptions.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlOptions.java
@@ -26,18 +26,15 @@
 package jdk.javadoc.internal.doclets.formats.html;
 
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.ArrayList;
-import java.util.LinkedHashMap;
 import java.util.List;
-import java.util.Map;
 import java.util.Set;
 import java.util.TreeSet;
 
 import com.sun.tools.doclint.DocLint;
-import jdk.javadoc.doclet.Doclet;
 import jdk.javadoc.doclet.Reporter;
 import jdk.javadoc.internal.doclets.toolkit.BaseOptions;
 import jdk.javadoc.internal.doclets.toolkit.Resources;
 import jdk.javadoc.internal.doclets.toolkit.util.DocFile;
 import jdk.javadoc.internal.doclets.toolkit.util.Utils;
@@ -103,11 +100,11 @@
 
     /**
      * Arguments for command-line option {@code -Xdoclint} and friends.
      * Collected set of doclint options.
      */
-    private Map<Doclet.Option, String> doclintOpts = new LinkedHashMap<>();
+    private List<String> doclintOpts = new ArrayList<>();
 
     /**
      * Argument for command-line option {@code -Xdocrootparent}.
      */
     private String docrootParent = "";
@@ -409,55 +406,55 @@
                 },
 
                 new XOption(resources, "-Xdoclint") {
                     @Override
                     public boolean process(String opt,  List<String> args) {
-                        doclintOpts.put(this, DocLint.XMSGS_OPTION);
-                        return true;
-                    }
-                },
-
-                new XOption(resources, "-Xdocrootparent", 1) {
-                    @Override
-                    public boolean process(String opt, List<String> args) {
-                        docrootParent = args.get(0);
-                        try {
-                            new URL(docrootParent);
-                        } catch (MalformedURLException e) {
-                            reporter.print(ERROR, resources.getText("doclet.MalformedURL", docrootParent));
-                            return false;
-                        }
+                        doclintOpts.add(DocLint.XMSGS_OPTION);
                         return true;
                     }
                 },
 
                 new XOption(resources, "doclet.usage.xdoclint-extended", "-Xdoclint:", 0) {
                     @Override
                     public boolean process(String opt,  List<String> args) {
                         String dopt = opt.replace("-Xdoclint:", DocLint.XMSGS_CUSTOM_PREFIX);
-                        doclintOpts.put(this, dopt);
                         if (dopt.contains("/")) {
                             reporter.print(ERROR, resources.getText("doclet.Option_doclint_no_qualifiers"));
                             return false;
                         }
                         if (!DocLint.isValidOption(dopt)) {
                             reporter.print(ERROR, resources.getText("doclet.Option_doclint_invalid_arg"));
                             return false;
                         }
+                        doclintOpts.add(dopt);
                         return true;
                     }
                 },
 
                 new XOption(resources, "doclet.usage.xdoclint-package", "-Xdoclint/package:", 0) {
                     @Override
                     public boolean process(String opt,  List<String> args) {
                         String dopt = opt.replace("-Xdoclint/package:", DocLint.XCHECK_PACKAGE);
-                        doclintOpts.put(this, dopt);
                         if (!DocLint.isValidOption(dopt)) {
                             reporter.print(ERROR, resources.getText("doclet.Option_doclint_package_invalid_arg"));
                             return false;
                         }
+                        doclintOpts.add(dopt);
+                        return true;
+                    }
+                },
+
+                new XOption(resources, "-Xdocrootparent", 1) {
+                    @Override
+                    public boolean process(String opt, List<String> args) {
+                        docrootParent = args.get(0);
+                        try {
+                            new URL(docrootParent);
+                        } catch (MalformedURLException e) {
+                            reporter.print(ERROR, resources.getText("doclet.MalformedURL", docrootParent));
+                            return false;
+                        }
                         return true;
                     }
                 },
 
                 new XOption(resources, "--no-frames") {
@@ -587,11 +584,11 @@
 
     /**
      * Arguments for command-line option {@code -Xdoclint} and friends.
      * Collected set of doclint options.
      */
-    Map<Doclet.Option, String> doclintOpts() {
+    List<String> doclintOpts() {
         return doclintOpts;
     }
 
     /**
      * Argument for command-line option {@code -Xdocrootparent}.
