diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SerializedFormWriterImpl.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SerializedFormWriterImpl.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SerializedFormWriterImpl.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SerializedFormWriterImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -70,10 +70,11 @@
      * Get the given header.
      *
      * @param header the header to write
      * @return the body content tree
      */
+    @Override
     public Content getHeader(String header) {
         HtmlTree bodyTree = getBody(getWindowTitle(header));
         Content headerContent = new ContentBuilder();
         addTop(headerContent);
         navBar.setUserHeader(getUserHeaderFooter(true));
@@ -90,10 +91,11 @@
     /**
      * Get the serialized form summaries header.
      *
      * @return the serialized form summary header tree
      */
+    @Override
     public Content getSerializedSummariesHeader() {
         HtmlTree ul = new HtmlTree(HtmlTag.UL);
         ul.setStyle(HtmlStyle.blockList);
         return ul;
     }
@@ -101,20 +103,22 @@
     /**
      * Get the package serialized form header.
      *
      * @return the package serialized form header tree
      */
+    @Override
     public Content getPackageSerializedHeader() {
         return HtmlTree.SECTION(HtmlStyle.serializedPackageContainer);
     }
 
     /**
      * Get the given package header.
      *
      * @param packageName the package header to write
      * @return a content tree for the package header
      */
+    @Override
     public Content getPackageHeader(String packageName) {
         Content heading = HtmlTree.HEADING(Headings.SerializedForm.PACKAGE_HEADING, true,
                 contents.packageLabel);
         heading.add(Entity.NO_BREAK_SPACE);
         heading.add(packageName);
@@ -124,10 +128,11 @@
     /**
      * Get the serialized class header.
      *
      * @return a content tree for the serialized class header
      */
+    @Override
     public Content getClassSerializedHeader() {
         HtmlTree ul = new HtmlTree(HtmlTag.UL);
         ul.setStyle(HtmlStyle.blockList);
         return ul;
     }
@@ -146,10 +151,11 @@
      * Get the serializable class heading.
      *
      * @param typeElement the class being processed
      * @return a content tree for the class header
      */
+    @Override
     public Content getClassHeader(TypeElement typeElement) {
         Content classLink = (isVisibleClass(typeElement))
                 ? getLink(new LinkInfoImpl(configuration, LinkInfoImpl.Kind.DEFAULT, typeElement)
                         .label(configuration.getClassName(typeElement)))
                 : new StringContent(utils.getFullyQualifiedName(typeElement));
@@ -174,10 +180,11 @@
     /**
      * Get the serial UID info header.
      *
      * @return a content tree for the serial uid info header
      */
+    @Override
     public Content getSerialUIDInfoHeader() {
         HtmlTree dl = new HtmlTree(HtmlTag.DL);
         dl.setStyle(HtmlStyle.nameValue);
         return dl;
     }
@@ -188,10 +195,11 @@
      * @param header the header that will show up before the UID.
      * @param serialUID the serial UID to print.
      * @param serialUidTree the serial UID content tree to which the serial UID
      *                      content will be added
      */
+    @Override
     public void addSerialUIDInfo(String header, String serialUID,
             Content serialUidTree) {
         Content headerContent = new StringContent(header);
         serialUidTree.add(HtmlTree.DT(headerContent));
         Content serialContent = new StringContent(serialUID);
@@ -201,10 +209,11 @@
     /**
      * Get the class serialize content header.
      *
      * @return a content tree for the class serialize content header
      */
+    @Override
     public Content getClassContentHeader() {
         HtmlTree ul = new HtmlTree(HtmlTag.UL);
         ul.setStyle(HtmlStyle.blockList);
         return ul;
     }
@@ -212,38 +221,35 @@
     /**
      * Add the serialized content tree section.
      *
      * @param serializedTreeContent the serialized content tree to be added
      */
+    @Override
     public void addSerializedContent(Content serializedTreeContent) {
         HtmlTree divContent = HtmlTree.DIV(HtmlStyle.serializedFormContainer,
                 serializedTreeContent);
         bodyContents.addMainContent(divContent);
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     public void addPackageSerializedTree(Content serializedSummariesTree,
             Content packageSerializedTree) {
         serializedSummariesTree.add(HtmlTree.LI(HtmlStyle.blockList, packageSerializedTree));
     }
 
     /**
      * Add the footer.
      */
+    @Override
     public void addFooter() {
         Content htmlTree = HtmlTree.FOOTER();
         navBar.setUserFooter(getUserHeaderFooter(false));
         htmlTree.add(navBar.getContent(false));
         addBottom(htmlTree);
         bodyContents.setFooter(htmlTree);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public void printDocument(Content serializedTree) throws DocFileIOException {
         serializedTree.add(bodyContents.toContent());
         printHtmlDocument(null, "serialized forms", serializedTree);
     }
@@ -251,18 +257,20 @@
     /**
      * Return an instance of a SerialFieldWriter.
      *
      * @return an instance of a SerialFieldWriter.
      */
+    @Override
     public SerialFieldWriter getSerialFieldWriter(TypeElement typeElement) {
         return new HtmlSerialFieldWriter(this, typeElement);
     }
 
     /**
      * Return an instance of a SerialMethodWriter.
      *
      * @return an instance of a SerialMethodWriter.
      */
+    @Override
     public SerialMethodWriter getSerialMethodWriter(TypeElement typeElement) {
         return new HtmlSerialMethodWriter(this, typeElement);
     }
 }
