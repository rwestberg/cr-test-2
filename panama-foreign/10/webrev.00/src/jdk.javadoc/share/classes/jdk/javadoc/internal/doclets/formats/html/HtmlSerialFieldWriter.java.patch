diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlSerialFieldWriter.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlSerialFieldWriter.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlSerialFieldWriter.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlSerialFieldWriter.java
@@ -68,10 +68,11 @@
     /**
      * Return the header for serializable fields section.
      *
      * @return a content tree for the header
      */
+    @Override
     public Content getSerializableFieldsHeader() {
         HtmlTree ul = new HtmlTree(HtmlTag.UL);
         ul.setStyle(HtmlStyle.blockList);
         return ul;
     }
@@ -80,10 +81,11 @@
      * Return the header for serializable fields content section.
      *
      * @param isLastContent true if the content being documented is the last content.
      * @return a content tree for the header
      */
+    @Override
     public Content getFieldsContentHeader(boolean isLastContent) {
         HtmlTree li = new HtmlTree(HtmlTag.LI);
         li.setStyle(HtmlStyle.blockList);
         return li;
     }
@@ -94,10 +96,11 @@
      * @param heading the heading for the section
      * @param serializableFieldsTree the tree to be added to the serializable fields
      *        content tree
      * @return a content tree for the serializable fields content
      */
+    @Override
     public Content getSerializableFields(String heading, Content serializableFieldsTree) {
         HtmlTree section = HtmlTree.SECTION(HtmlStyle.detail);
         if (serializableFieldsTree.isValid()) {
             Content headingContent = new StringContent(heading);
             Content serialHeading = HtmlTree.HEADING(Headings.SerializedForm.CLASS_SUBHEADING, headingContent);
@@ -144,20 +147,22 @@
      * Add the deprecated information for this member.
      *
      * @param field the field to document.
      * @param contentTree the tree to which the deprecated info will be added
      */
+    @Override
     public void addMemberDeprecatedInfo(VariableElement field, Content contentTree) {
         addDeprecatedInfo(field, contentTree);
     }
 
     /**
      * Add the description text for this member.
      *
      * @param field the field to document.
      * @param contentTree the tree to which the deprecated info will be added
      */
+    @Override
     public void addMemberDescription(VariableElement field, Content contentTree) {
         if (!utils.getFullBody(field).isEmpty()) {
             writer.addInlineComment(field, contentTree);
         }
         List<? extends DocTree> tags = utils.getBlockTags(field, DocTree.Kind.SERIAL);
@@ -170,10 +175,11 @@
      * Add the description text for this member represented by the tag.
      *
      * @param serialFieldTag the field to document (represented by tag)
      * @param contentTree the tree to which the deprecated info will be added
      */
+    @Override
     public void addMemberDescription(VariableElement field, DocTree serialFieldTag, Content contentTree) {
         CommentHelper ch = utils.getCommentHelper(field);
         List<? extends DocTree> description = ch.getDescription(configuration, serialFieldTag);
         if (!description.isEmpty()) {
             Content serialFieldContent = new RawHtml(ch.getText(description));
@@ -186,10 +192,11 @@
      * Add the tag information for this member.
      *
      * @param field the field to document.
      * @param contentTree the tree to which the member tags info will be added
      */
+    @Override
     public void addMemberTags(VariableElement field, Content contentTree) {
         Content tagContent = new ContentBuilder();
         TagletWriter.genTagOutput(configuration.tagletManager, field,
                 configuration.tagletManager.getBlockTaglets(field),
                 writer.getTagletWriterInstance(false), tagContent);
@@ -204,10 +211,11 @@
      * for deprecation info, comment or tags, do not print overview details.
      *
      * @param field the field to check overview details for.
      * @return true if overview details need to be printed
      */
+    @Override
     public boolean shouldPrintOverview(VariableElement field) {
         if (!options.noComment()) {
             if(!utils.getFullBody(field).isEmpty() ||
                     writer.hasSerializationOverviewTags(field))
                 return true;
