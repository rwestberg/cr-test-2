diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/WriterFactoryImpl.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/WriterFactoryImpl.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/WriterFactoryImpl.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/WriterFactoryImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -59,128 +59,87 @@
     private final HtmlConfiguration configuration;
     public WriterFactoryImpl(HtmlConfiguration configuration) {
         this.configuration = configuration;
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public ConstantsSummaryWriter getConstantsSummaryWriter() {
         return new ConstantsSummaryWriterImpl(configuration);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public PackageSummaryWriter getPackageSummaryWriter(PackageElement packageElement) {
         return new PackageWriterImpl(configuration, packageElement);
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     public ModuleSummaryWriter getModuleSummaryWriter(ModuleElement mdle) {
         return new ModuleWriterImpl(configuration, mdle);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public ClassWriter getClassWriter(TypeElement typeElement, ClassTree classTree) {
         return new ClassWriterImpl(configuration, typeElement, classTree);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public AnnotationTypeWriter getAnnotationTypeWriter(TypeElement annotationType) {
         return new AnnotationTypeWriterImpl(configuration, annotationType);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public AnnotationTypeFieldWriter getAnnotationTypeFieldWriter(
             AnnotationTypeWriter annotationTypeWriter) {
         TypeElement te = annotationTypeWriter.getAnnotationTypeElement();
         return new AnnotationTypeFieldWriterImpl(
             (SubWriterHolderWriter) annotationTypeWriter, te);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public AnnotationTypeOptionalMemberWriter getAnnotationTypeOptionalMemberWriter(
         AnnotationTypeWriter annotationTypeWriter) {
         TypeElement te = annotationTypeWriter.getAnnotationTypeElement();
         return new AnnotationTypeOptionalMemberWriterImpl(
             (SubWriterHolderWriter) annotationTypeWriter, te);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public AnnotationTypeRequiredMemberWriter getAnnotationTypeRequiredMemberWriter(
             AnnotationTypeWriter annotationTypeWriter) {
         TypeElement te = annotationTypeWriter.getAnnotationTypeElement();
         return new AnnotationTypeRequiredMemberWriterImpl(
             (SubWriterHolderWriter) annotationTypeWriter, te);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public EnumConstantWriterImpl getEnumConstantWriter(ClassWriter classWriter) {
         return new EnumConstantWriterImpl((SubWriterHolderWriter) classWriter,
                 classWriter.getTypeElement());
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public FieldWriterImpl getFieldWriter(ClassWriter classWriter) {
         return new FieldWriterImpl((SubWriterHolderWriter) classWriter, classWriter.getTypeElement());
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public PropertyWriterImpl getPropertyWriter(ClassWriter classWriter) {
         return new PropertyWriterImpl((SubWriterHolderWriter) classWriter,
                 classWriter.getTypeElement());
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public MethodWriterImpl getMethodWriter(ClassWriter classWriter) {
         return new MethodWriterImpl((SubWriterHolderWriter) classWriter, classWriter.getTypeElement());
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public ConstructorWriterImpl getConstructorWriter(ClassWriter classWriter) {
         return new ConstructorWriterImpl((SubWriterHolderWriter) classWriter,
                 classWriter.getTypeElement());
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public MemberSummaryWriter getMemberSummaryWriter(ClassWriter classWriter,
             VisibleMemberTable.Kind memberType) {
         switch (memberType) {
             case CONSTRUCTORS:
@@ -199,13 +158,10 @@
             default:
                 return null;
         }
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public MemberSummaryWriter getMemberSummaryWriter(AnnotationTypeWriter annotationTypeWriter,
             VisibleMemberTable.Kind memberType) {
         switch (memberType) {
             case ANNOTATION_TYPE_FIELDS:
@@ -220,21 +176,15 @@
             default:
                 return null;
         }
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public SerializedFormWriter getSerializedFormWriter() {
         return new SerializedFormWriterImpl(configuration);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public DocFilesHandler getDocFilesHandler(Element element) {
         return new DocFilesHandlerImpl(configuration, element);
     }
 }
