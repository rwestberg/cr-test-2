diff a/test/jdk/jdk/jfr/event/io/TestRandomAccessFileThread.java b/test/jdk/jdk/jfr/event/io/TestRandomAccessFileThread.java
--- a/test/jdk/jdk/jfr/event/io/TestRandomAccessFileThread.java
+++ b/test/jdk/jdk/jfr/event/io/TestRandomAccessFileThread.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -62,30 +62,29 @@
     private static final int OP_COUNT = 100;    // Total number of read/write operations.
     private static volatile int writeCount = 0; // Number of writes executed.
 
     public static void main(String[] args) throws Throwable {
         File tmp = Utils.createTempFile("TestRandomAccessFileThread", ".tmp").toFile();
-
-        Recording recording = new Recording();
-        recording.enable(IOEvent.EVENT_FILE_READ).withThreshold(Duration.ofMillis(0));
-        recording.enable(IOEvent.EVENT_FILE_WRITE).withThreshold(Duration.ofMillis(0));
-        recording.start();
-
-        TestThread writerThread = new TestThread(new XRun() {
-            @Override
-            public void xrun() throws IOException {
-                final byte[] buf = new byte[OP_COUNT];
-                for (int i = 0; i < buf.length; ++i) {
-                    buf[i] = (byte)((i + 'a') % 255);
-                }
-                try (RandomAccessFile raf = new RandomAccessFile(tmp, "rwd")) {
-                    for(int i = 0; i < OP_COUNT; ++i) {
-                        raf.write(buf, 0, i + 1);
-                        writeCount++;
+        try (Recording recording = new Recording()) {
+            recording.enable(IOEvent.EVENT_FILE_READ).withThreshold(Duration.ofMillis(0));
+            recording.enable(IOEvent.EVENT_FILE_WRITE).withThreshold(Duration.ofMillis(0));
+            recording.start();
+
+            TestThread writerThread = new TestThread(new XRun() {
+                @Override
+                public void xrun() throws IOException {
+                    final byte[] buf = new byte[OP_COUNT];
+                    for (int i = 0; i < buf.length; ++i) {
+                        buf[i] = (byte)((i + 'a') % 255);
                     }
-                }
-            }}, "TestWriterThread");
+                    try (RandomAccessFile raf = new RandomAccessFile(tmp, "rwd")) {
+                        for(int i = 0; i < OP_COUNT; ++i) {
+                            raf.write(buf, 0, i + 1);
+                            writeCount++;
+                        }
+                    }
+                }}, "TestWriterThread");
 
             TestThread readerThread = new TestThread(new XRun() {
             @Override
             public void xrun() throws IOException {
                 try (RandomAccessFile raf = new RandomAccessFile(tmp, "r")) {
@@ -116,11 +115,11 @@
             for (RecordedEvent event : events) {
                 if (!isOurEvent(event, tmp)) {
                     continue;
                 }
                 logEventSummary(event);
-                if (Events.isEventType(event,IOEvent.EVENT_FILE_READ)) {
+                if (Events.isEventType(event, IOEvent.EVENT_FILE_READ)) {
                     readEvents.add(event);
                 } else {
                     writeEvents.add(event);
                 }
             }
@@ -134,10 +133,11 @@
             verifyReadWriteTimes(readEvents, writeEvents);
 
             Asserts.assertEquals(readEvents.size(), OP_COUNT, "Wrong number of read events");
             Asserts.assertEquals(writeEvents.size(), OP_COUNT, "Wrong number of write events");
         }
+    }
 
         private static void logEventSummary(RecordedEvent event) {
             boolean isRead = Events.isEventType(event, IOEvent.EVENT_FILE_READ);
             String name = isRead ? "read " : "write";
             String bytesField = isRead ? "bytesRead" : "bytesWritten";
