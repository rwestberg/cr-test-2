diff a/test/jdk/jdk/jfr/event/io/IOHelper.java b/test/jdk/jdk/jfr/event/io/IOHelper.java
--- a/test/jdk/jdk/jfr/event/io/IOHelper.java
+++ b/test/jdk/jdk/jfr/event/io/IOHelper.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -26,10 +26,12 @@
 package jdk.jfr.event.io;
 
 import static jdk.test.lib.Asserts.assertEquals;
 import static jdk.test.lib.Asserts.assertTrue;
 
+import java.util.Collections;
+import java.util.Comparator;
 import java.util.List;
 import java.util.stream.Collectors;
 
 import jdk.jfr.event.io.IOEvent.EventType;
 
@@ -39,17 +41,21 @@
 
 // Helper class to match actual RecordedEvents to expected events.
 public class IOHelper {
 
     public static void verifyEqualsInOrder(List<RecordedEvent> events, List<IOEvent> expectedEvents) throws Throwable {
+        Collections.sort(events, Comparator.comparing(RecordedEvent::getStartTime));
         List<IOEvent> actualEvents = getTestEvents(events, expectedEvents);
         try {
             assertEquals(actualEvents.size(), expectedEvents.size(), "Wrong number of events.");
             for (int i = 0; i < actualEvents.size(); ++i) {
                 assertEquals(actualEvents.get(i), expectedEvents.get(i), "Wrong event at pos " + i);
             }
         } catch (Throwable t) {
+            for (RecordedEvent e: events) {
+                System.out.println(e);
+            }
             logEvents(actualEvents, expectedEvents);
             throw t;
         }
     }
 
