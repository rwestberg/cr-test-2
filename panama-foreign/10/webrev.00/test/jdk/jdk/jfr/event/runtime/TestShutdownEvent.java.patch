diff a/test/jdk/jdk/jfr/event/runtime/TestShutdownEvent.java b/test/jdk/jdk/jfr/event/runtime/TestShutdownEvent.java
--- a/test/jdk/jdk/jfr/event/runtime/TestShutdownEvent.java
+++ b/test/jdk/jdk/jfr/event/runtime/TestShutdownEvent.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -66,15 +66,29 @@
              new TestSig("INT")
     };
 
     public static void main(String[] args) throws Throwable {
         for (int i = 0; i < subTests.length; ++i) {
-            if (subTests[i].isApplicable()) {
-                runSubtest(i);
-            } else {
+            int attempts = subTests[i].attempts();
+            if (attempts == 0) {
                 System.out.println("Skipping non-applicable test: " + i);
             }
+            for (int j = 0; j < attempts -1; j++) {
+                try {
+                    runSubtest(i);
+                    return;
+                } catch (Exception e) {
+                    System.out.println("Failed: " + e.getMessage());
+                    System.out.println();
+                    System.out.println("Retry " + i + 1);
+                } catch (OutOfMemoryError | StackOverflowError e) {
+                    System.out.println("Error");
+                    // Can happen when parsing corrupt file. Abort test.
+                    return;
+                }
+            }
+            runSubtest(i);
         }
     }
 
     private static void runSubtest(int subTestIndex) throws Exception {
         ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true,
@@ -113,12 +127,12 @@
             subTest.runTest();
         }
     }
 
     private interface ShutdownEventSubTest {
-        default boolean isApplicable() {
-            return true;
+        default int attempts() {
+            return 1;
         }
         void runTest();
         void verifyEvents(RecordedEvent event, int exitCode);
     }
 
@@ -172,10 +186,15 @@
             // for now avoid validating the stack trace, in case of compiled code
             // the vframeStream based solution will not work in this special VMCrash case
             // see 8219082 for details (running the crashed VM with -Xint would solve the issue too)
             //validateStackTrace(event.getStackTrace());
         }
+
+        @Override
+        public int attempts() {
+            return 3;
+        }
     }
 
     private static class TestUnhandledException implements ShutdownEventSubTest {
         @Override
         public void runTest() {
@@ -205,18 +224,18 @@
     private static class TestSig implements ShutdownEventSubTest {
 
         private final String signalName;
 
         @Override
-        public boolean isApplicable() {
+        public int  attempts() {
             if (Platform.isWindows()) {
-                return false;
+                return 0;
             }
             if (signalName.equals("HUP") && Platform.isSolaris()) {
-                return false;
+                return 0;
             }
-            return true;
+            return 1;
         }
 
         public TestSig(String signalName) {
             this.signalName = signalName;
         }
