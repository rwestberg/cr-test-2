diff a/test/jdk/jdk/jfr/event/io/TestSocketChannelEvents.java b/test/jdk/jdk/jfr/event/io/TestSocketChannelEvents.java
--- a/test/jdk/jdk/jfr/event/io/TestSocketChannelEvents.java
+++ b/test/jdk/jdk/jfr/event/io/TestSocketChannelEvents.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -51,80 +51,82 @@
 public class TestSocketChannelEvents {
     private static final int bufSizeA = 10;
     private static final int bufSizeB = 20;
 
     private List<IOEvent> expectedEvents = new ArrayList<>();
+
     private synchronized void addExpectedEvent(IOEvent event) {
         expectedEvents.add(event);
     }
 
     public static void main(String[] args) throws Throwable {
         new TestSocketChannelEvents().test();
     }
 
     public void test() throws Throwable {
-        Recording recording = new Recording();
-
-        try (ServerSocketChannel ss = ServerSocketChannel.open()) {
-            recording.enable(IOEvent.EVENT_SOCKET_READ).withThreshold(Duration.ofMillis(0));
-            recording.enable(IOEvent.EVENT_SOCKET_WRITE).withThreshold(Duration.ofMillis(0));
-            recording.start();
-
-            ss.socket().setReuseAddress(true);
-            ss.socket().bind(null);
-
-            TestThread readerThread = new TestThread(new XRun() {
-                @Override
-                public void xrun() throws IOException {
-                    ByteBuffer bufA = ByteBuffer.allocate(bufSizeA);
-                    ByteBuffer bufB = ByteBuffer.allocate(bufSizeB);
-                    try (SocketChannel sc = ss.accept()) {
-                        int readSize = sc.read(bufA);
-                        assertEquals(readSize, bufSizeA, "Wrong readSize bufA");
-                        addExpectedEvent(IOEvent.createSocketReadEvent(bufSizeA, sc.socket()));
-
-                        bufA.clear();
-                        bufA.limit(1);
-                        readSize = (int)sc.read(new ByteBuffer[] { bufA, bufB });
-                        assertEquals(readSize, 1 + bufSizeB, "Wrong readSize 1+bufB");
-                        addExpectedEvent(IOEvent.createSocketReadEvent(readSize, sc.socket()));
-
-                        // We try to read, but client have closed. Should get EOF.
-                        bufA.clear();
-                        bufA.limit(1);
-                        readSize = sc.read(bufA);
-                        assertEquals(readSize, -1, "Wrong readSize at EOF");
-                        addExpectedEvent(IOEvent.createSocketReadEvent(-1, sc.socket()));
+        try (Recording recording = new Recording()) {
+            try (ServerSocketChannel ss = ServerSocketChannel.open()) {
+                recording.enable(IOEvent.EVENT_SOCKET_READ).withThreshold(Duration.ofMillis(0));
+                recording.enable(IOEvent.EVENT_SOCKET_WRITE).withThreshold(Duration.ofMillis(0));
+                recording.start();
+
+                ss.socket().setReuseAddress(true);
+                ss.socket().bind(null);
+
+                TestThread readerThread = new TestThread(new XRun() {
+                    @Override
+                    public void xrun() throws IOException {
+                        ByteBuffer bufA = ByteBuffer.allocate(bufSizeA);
+                        ByteBuffer bufB = ByteBuffer.allocate(bufSizeB);
+                        try (SocketChannel sc = ss.accept()) {
+                            int readSize = sc.read(bufA);
+                            assertEquals(readSize, bufSizeA, "Wrong readSize bufA");
+                            addExpectedEvent(IOEvent.createSocketReadEvent(bufSizeA, sc.socket()));
+
+                            bufA.clear();
+                            bufA.limit(1);
+                            readSize = (int) sc.read(new ByteBuffer[] { bufA, bufB });
+                            assertEquals(readSize, 1 + bufSizeB, "Wrong readSize 1+bufB");
+                            addExpectedEvent(IOEvent.createSocketReadEvent(readSize, sc.socket()));
+
+                            // We try to read, but client have closed. Should
+                            // get EOF.
+                            bufA.clear();
+                            bufA.limit(1);
+                            readSize = sc.read(bufA);
+                            assertEquals(readSize, -1, "Wrong readSize at EOF");
+                            addExpectedEvent(IOEvent.createSocketReadEvent(-1, sc.socket()));
+                        }
                     }
-                }
-            });
-            readerThread.start();
-
-            try (SocketChannel sc = SocketChannel.open(ss.socket().getLocalSocketAddress())) {
-                ByteBuffer bufA = ByteBuffer.allocateDirect(bufSizeA);
-                ByteBuffer bufB = ByteBuffer.allocateDirect(bufSizeB);
-                for (int i = 0; i < bufSizeA; ++i) {
-                    bufA.put((byte)('a' + (i % 20)));
-                }
-                for (int i = 0; i < bufSizeB; ++i) {
-                    bufB.put((byte)('A' + (i % 20)));
-                }
-                bufA.flip();
-                bufB.flip();
+                });
+                readerThread.start();
+
+                try (SocketChannel sc = SocketChannel.open(ss.socket().getLocalSocketAddress())) {
+                    ByteBuffer bufA = ByteBuffer.allocateDirect(bufSizeA);
+                    ByteBuffer bufB = ByteBuffer.allocateDirect(bufSizeB);
+                    for (int i = 0; i < bufSizeA; ++i) {
+                        bufA.put((byte) ('a' + (i % 20)));
+                    }
+                    for (int i = 0; i < bufSizeB; ++i) {
+                        bufB.put((byte) ('A' + (i % 20)));
+                    }
+                    bufA.flip();
+                    bufB.flip();
 
-                sc.write(bufA);
-                addExpectedEvent(IOEvent.createSocketWriteEvent(bufSizeA, sc.socket()));
+                    sc.write(bufA);
+                    addExpectedEvent(IOEvent.createSocketWriteEvent(bufSizeA, sc.socket()));
 
-                bufA.clear();
-                bufA.limit(1);
-                int bytesWritten = (int)sc.write(new ByteBuffer[] { bufA, bufB });
-                assertEquals(bytesWritten, 1 + bufSizeB, "Wrong bytesWritten 1+bufB");
-                addExpectedEvent(IOEvent.createSocketWriteEvent(bytesWritten, sc.socket()));
-            }
+                    bufA.clear();
+                    bufA.limit(1);
+                    int bytesWritten = (int) sc.write(new ByteBuffer[] { bufA, bufB });
+                    assertEquals(bytesWritten, 1 + bufSizeB, "Wrong bytesWritten 1+bufB");
+                    addExpectedEvent(IOEvent.createSocketWriteEvent(bytesWritten, sc.socket()));
+                }
 
-            readerThread.joinAndThrow();
-            recording.stop();
-            List<RecordedEvent> events= Events.fromRecording(recording);
-            IOHelper.verifyEquals(events, expectedEvents);
+                readerThread.joinAndThrow();
+                recording.stop();
+                List<RecordedEvent> events = Events.fromRecording(recording);
+                IOHelper.verifyEquals(events, expectedEvents);
+            }
         }
     }
 }
