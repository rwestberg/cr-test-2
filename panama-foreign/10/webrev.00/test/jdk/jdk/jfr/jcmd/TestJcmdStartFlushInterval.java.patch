diff a/test/jdk/jdk/jfr/jcmd/TestJcmdStartFlushInterval.java b/test/jdk/jdk/jfr/jcmd/TestJcmdStartFlushInterval.java
--- a/test/jdk/jdk/jfr/jcmd/TestJcmdStartFlushInterval.java
+++ b/test/jdk/jdk/jfr/jcmd/TestJcmdStartFlushInterval.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,10 +23,11 @@
  * questions.
  */
 
 package jdk.jfr.jcmd;
 
+import java.lang.reflect.Method;
 import java.time.Duration;
 
 import jdk.jfr.FlightRecorder;
 import jdk.jfr.Recording;
 
@@ -34,19 +35,22 @@
  * @test
  * @summary Start a recording with a flush interval
  * @key jfr
  * @requires vm.hasJFR
  * @library /test/lib /test/jdk
- * @run main/othervm jdk.jfr.jcmd.TestJcmdStartReadOnlyFile
+ * @modules jdk.jfr/jdk.jfr:open
+ * @run main/othervm jdk.jfr.jcmd.TestJcmdStartFlushInterval
  */
 public class TestJcmdStartFlushInterval {
 
     public static void main(String[] args) throws Exception {
-        JcmdHelper.jcmd("JFR.start","flush-interval=1s");
+        JcmdHelper.jcmd("JFR.start", "flush-interval=2s");
+        Method getFlushIntervalMethod = Recording.class.getDeclaredMethod("getFlushInterval");
+        getFlushIntervalMethod.setAccessible(true);
         for (Recording r : FlightRecorder.getFlightRecorder().getRecordings()) {
-            Duration d = r.getFlushInterval();
-            if (d.equals(Duration.ofSeconds(1))) {
+            Duration d = (Duration)getFlushIntervalMethod.invoke(r);
+            if (d.equals(Duration.ofSeconds(2))) {
                 return; //OK
             } else {
                 throw new Exception("Unexpected flush-interval=" + d);
             }
         }
