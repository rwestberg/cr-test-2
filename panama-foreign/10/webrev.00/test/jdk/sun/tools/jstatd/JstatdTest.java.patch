diff a/test/jdk/sun/tools/jstatd/JstatdTest.java b/test/jdk/sun/tools/jstatd/JstatdTest.java
--- a/test/jdk/sun/tools/jstatd/JstatdTest.java
+++ b/test/jdk/sun/tools/jstatd/JstatdTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -63,23 +63,30 @@
     private static final int JSTAT_GCUTIL_SAMPLES = 5;
     private static final int JSTAT_GCUTIL_INTERVAL_MS = 250;
     private static final String JPS_OUTPUT_REGEX = "^\\d+\\s*.*";
 
     private boolean useDefaultPort = true;
+    private boolean useDefaultRmiPort = true;
     private String port;
+    private String rmiPort;
     private String serverName;
     private Long jstatdPid;
     private boolean withExternalRegistry = false;
+    private boolean useShortCommandSyntax = false;
 
     public void setServerName(String serverName) {
         this.serverName = serverName;
     }
 
     public void setUseDefaultPort(boolean useDefaultPort) {
         this.useDefaultPort = useDefaultPort;
     }
 
+    public void setUseDefaultRmiPort(boolean useDefaultRmiPort) {
+        this.useDefaultRmiPort = useDefaultRmiPort;
+    }
+
     public void setWithExternalRegistry(boolean withExternalRegistry) {
         this.withExternalRegistry = withExternalRegistry;
     }
 
     private Long waitOnTool(ProcessThread thread) throws Throwable {
@@ -243,10 +250,11 @@
     /**
      * Depending on test settings command line can look like:
      *
      * jstatd -J-XX:+UsePerfData -J-Djava.security.policy=all.policy
      * jstatd -J-XX:+UsePerfData -J-Djava.security.policy=all.policy -p port
+     * jstatd -J-XX:+UsePerfData -J-Djava.security.policy=all.policy -p port -r rmiport
      * jstatd -J-XX:+UsePerfData -J-Djava.security.policy=all.policy -n serverName
      * jstatd -J-XX:+UsePerfData -J-Djava.security.policy=all.policy -p port -n serverName
      */
     private String[] getJstatdCmd() throws Exception {
         JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK("jstatd");
@@ -255,26 +263,35 @@
         File policy = new File(testSrc, "all.policy");
         assertTrue(policy.exists() && policy.isFile(),
                 "Security policy " + policy.getAbsolutePath() + " does not exist or not a file");
         launcher.addVMArg("-Djava.security.policy=" + policy.getAbsolutePath());
         if (port != null) {
-            launcher.addToolArg("-p");
-            launcher.addToolArg(port);
+            addToolArg(launcher,"-p", port);
+        }
+        if (rmiPort != null) {
+            addToolArg(launcher,"-r", rmiPort);
         }
         if (serverName != null) {
-            launcher.addToolArg("-n");
-            launcher.addToolArg(serverName);
+            addToolArg(launcher,"-n", serverName);
         }
         if (withExternalRegistry) {
             launcher.addToolArg("-nr");
         }
-
         String[] cmd = launcher.getCommand();
         log("Start jstatd", cmd);
         return cmd;
     }
 
+    private void addToolArg(JDKToolLauncher launcher, String name, String value) {
+        if (useShortCommandSyntax) {
+            launcher.addToolArg(name + value);
+        } else {
+            launcher.addToolArg(name);
+            launcher.addToolArg(value);
+        }
+    }
+
     private ProcessThread tryToSetupJstatdProcess() throws Throwable {
         ProcessThread jstatdThread = new ProcessThread("Jstatd-Thread",
                 JstatdTest::isJstadReady, getJstatdCmd());
         try {
             jstatdThread.start();
@@ -298,10 +315,16 @@
     private static boolean isJstadReady(String line) {
         return line.startsWith("jstatd started (bound to ");
     }
 
     public void doTest() throws Throwable {
+        runTest(false);
+        runTest(true);
+    }
+
+    private void runTest(boolean useShortSyntax) throws Throwable {
+        useShortCommandSyntax = useShortSyntax;
         if (useDefaultPort) {
             verifyNoRmiRegistryOnDefaultPort();
         }
 
         ProcessThread jstatdThread = null;
@@ -309,10 +332,14 @@
             while (jstatdThread == null) {
                 if (!useDefaultPort) {
                     port = String.valueOf(Utils.getFreePort());
                 }
 
+                if (!useDefaultRmiPort) {
+                    rmiPort = String.valueOf(Utils.getFreePort());
+                }
+
                 if (withExternalRegistry) {
                     Registry registry = startRegistry();
                     if (registry == null) {
                         // The port is already in use. Cancel and try with a new one.
                         continue;
