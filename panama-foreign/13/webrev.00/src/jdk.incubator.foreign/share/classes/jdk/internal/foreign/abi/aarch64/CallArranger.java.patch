diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java
@@ -312,12 +312,13 @@
                 VMStorage storage =
                     storageCalculator.stackAlloc(copy, STACK_SLOT_SIZE);
                 if (offset + STACK_SLOT_SIZE < layout.byteSize()) {
                     bindings.dup();
                 }
-                bindings.dereference(offset, long.class)
-                        .move(storage, long.class);
+                Class<?> type = SharedUtils.primitiveCarrierForSize(copy);
+                bindings.dereference(offset, type)
+                        .move(storage, type);
                 offset += STACK_SLOT_SIZE;
             }
         }
 
         protected void spillStructBox(Binding.Builder bindings, MemoryLayout layout) {
@@ -329,13 +330,14 @@
             long offset = 0;
             while (offset < layout.byteSize()) {
                 long copy = Math.min(layout.byteSize() - offset, STACK_SLOT_SIZE);
                 VMStorage storage =
                     storageCalculator.stackAlloc(copy, STACK_SLOT_SIZE);
+                Class<?> type = SharedUtils.primitiveCarrierForSize(copy);
                 bindings.dup()
-                        .move(storage, long.class)
-                        .dereference(offset, long.class);
+                        .move(storage, type)
+                        .dereference(offset, type);
                 offset += STACK_SLOT_SIZE;
             }
         }
 
         abstract List<Binding> getBindings(Class<?> carrier, MemoryLayout layout);
