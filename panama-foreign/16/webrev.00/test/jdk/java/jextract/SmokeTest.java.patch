diff a/test/jdk/java/jextract/SmokeTest.java b/test/jdk/java/jextract/SmokeTest.java
--- a/test/jdk/java/jextract/SmokeTest.java
+++ b/test/jdk/java/jextract/SmokeTest.java
@@ -27,33 +27,61 @@
 /*
  * @test
  * @run testng SmokeTest
  */
 
-import java.io.File;
-
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.Optional;
+import java.util.function.Predicate;
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.JextractTask;
 import jdk.incubator.jextract.Type;
-import org.testng.annotations.*;
-import static org.testng.Assert.*;
+import org.testng.annotations.Test;
+
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
+import static org.testng.Assert.fail;
 
 public class SmokeTest {
 
     @Test
     public void testParser() {
-        var task = JextractTask.newTask(false, new File(System.getProperty("test.src.path"), "smoke.h").toPath());
+        Path header = Paths.get(System.getProperty("test.src.path", "."), "smoke.h");
+        var task = JextractTask.newTask(false, header);
         Declaration.Scoped d = task.parse("");
         Declaration.Scoped pointDecl = checkStruct(d, "Point", "x", "y");
         Type intType = ((Declaration.Variable)pointDecl.members().get(0)).type();
         checkGlobal(d, "p", Type.declared(pointDecl));
         checkFunction(d, "distance", intType, Type.declared(pointDecl), Type.declared(pointDecl));
         Declaration.Variable ch_ptr_ptr = findDecl(d, "ch_ptr_ptr", Declaration.Variable.class);
         checkFunction(d, "pointers", ch_ptr_ptr.type(), ch_ptr_ptr.type(), ch_ptr_ptr.type());
         checkConstant(d, "ZERO", intType, 0L);
     }
 
+    @Test
+    public void test8238712() {
+        Path header = Paths.get(System.getProperty("test.src.path", "."), "Test8238712.h");
+        var task = JextractTask.newTask(false, header);
+        Declaration.Scoped d = task.parse();
+        Declaration.Scoped structFoo = checkStruct(d, "foo", "n", "ptr");
+        Type intType = ((Declaration.Variable) structFoo.members().get(0)).type();
+        Type fooType = Type.declared(structFoo);
+        checkFunction(d, "withRecordTypeArg", intType, intType, fooType);
+        checkFunction(d, "returnRecordType", fooType);
+        // Opaque struct, have no field
+        Declaration.Scoped structBar = checkStruct(d, "bar");
+        assertTrue(structBar.layout().isEmpty());
+        Type barType = Type.declared(structBar);
+        // Function with opaque struct won't work but should have cursor for tool to handle
+        checkFunction(d, "returnBar", barType);
+        checkFunction(d, "withBar", Type.void_(), barType);
+        // Function use pointer to opaque struct should be OK
+        Type barPointer = Type.pointer(barType);
+        checkFunction(d, "nextBar", barPointer, barPointer);
+    }
+
     Declaration.Scoped checkStruct(Declaration.Scoped toplevel, String name, String... fields) {
         Declaration.Scoped struct = findDecl(toplevel, name, Declaration.Scoped.class);
         assertEquals(struct.members().size(), fields.length);
         for (int i = 0 ; i < fields.length ; i++) {
             assertEquals(struct.members().get(i).name(), fields[i]);
@@ -88,19 +116,30 @@
         assertTypeEquals(type, constant.type());
         assertEquals(value, constant.value());
         return constant;
     }
 
+    Predicate<Declaration> byName(final String name) {
+        return d -> d.name().equals(name);
+    }
+
+    Predicate<Declaration> byNameAndType(final String name, Class<? extends Declaration> declType) {
+        return d -> declType.isAssignableFrom(d.getClass()) && d.name().equals(name);
+    }
+
+    Optional<Declaration> findDecl(Declaration.Scoped toplevel, Predicate<Declaration> filter) {
+        return toplevel.members().stream().filter(filter).findAny();
+    }
+
     @SuppressWarnings("unchecked")
     <D extends Declaration> D findDecl(Declaration.Scoped toplevel, String name, Class<D> declType) {
-        for (Declaration d : toplevel.members()) {
-            if (declType.isAssignableFrom(d.getClass()) && d.name().equals(name)) {
-                return (D)d;
-            }
+        Optional<Declaration> d = findDecl(toplevel, byNameAndType(name, declType));
+        if (d.isEmpty()) {
+            fail("No declaration with name " + name + " found in " + toplevel);
+            return null;
         }
-        fail("No declaration with name " + name + " found in " + toplevel);
-        return null;
+        return (D) d.get();
     }
 
     void assertTypeEquals(Type expected, Type found) {
         assertEquals(expected.getClass(), found.getClass());
         if (expected instanceof Type.Primitive) {
