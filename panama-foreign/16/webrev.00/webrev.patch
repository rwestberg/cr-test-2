diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StaticWrapperSourceFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StaticWrapperSourceFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StaticWrapperSourceFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StaticWrapperSourceFactory.java
@@ -23,20 +23,18 @@
  * questions.
  */
 
 package jdk.incubator.jextract.tool;
 
-import jdk.incubator.jextract.Declaration;
-import jdk.incubator.jextract.Type;
+import java.lang.invoke.MethodType;
+import java.util.List;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
-
-import java.lang.invoke.MethodType;
-import java.util.List;
-import java.util.stream.Collectors;
+import jdk.incubator.jextract.Declaration;
+import jdk.incubator.jextract.Type;
 
 public class StaticWrapperSourceFactory extends HandleSourceFactory {
     public StaticWrapperSourceFactory(String clsName, String pkgName, List<String> libraryNames) {
         super(clsName, pkgName, libraryNames);
     }
@@ -50,10 +48,11 @@
     public Void visitFunction(Declaration.Function funcTree, Declaration parent) {
         MethodType mtype = typeTranslator.getMethodType(funcTree.type());
         FunctionDescriptor descriptor = Type.descriptorFor(funcTree.type()).orElse(null);
         if (descriptor == null) {
             //abort
+            return null;
         }
         builder.addMethodHandle(funcTree, mtype, descriptor);
         //generate static wrapper for function
         builder.addStaticFunctionWrapper(funcTree, mtype);
         int i = 0;
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
@@ -23,40 +23,51 @@
  *  questions.
  *
  */
 package jdk.internal.jextract.impl;
 
-import jdk.incubator.foreign.GroupLayout;
-import jdk.incubator.foreign.MemoryLayout;
-import jdk.incubator.jextract.Declaration;
-import jdk.incubator.jextract.Position;
-import jdk.incubator.jextract.Type;
-import jdk.internal.clang.Cursor;
-import jdk.internal.clang.CursorKind;
-import jdk.internal.clang.SourceLocation;
-
 import java.nio.ByteOrder;
 import java.nio.file.Path;
 import java.util.ArrayList;
+import java.util.ConcurrentModificationException;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
+import jdk.incubator.foreign.GroupLayout;
+import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.jextract.Declaration;
+import jdk.incubator.jextract.Position;
+import jdk.incubator.jextract.Type;
+import jdk.internal.clang.Cursor;
+import jdk.internal.clang.CursorKind;
+import jdk.internal.clang.SourceLocation;
 
 class TreeMaker {
     private final Map<Cursor, Declaration> treeCache = new HashMap<>();
 
     public TreeMaker() {}
 
     TypeMaker typeMaker = new TypeMaker(this);
 
     private <T extends Declaration> T checkCache(Cursor c, Class<T> clazz, Supplier<Declaration> factory) {
-        return clazz.cast(treeCache.computeIfAbsent(c, cx->factory.get()));
+        // The supplier function may lead to adding some other type, which will cause CME using computeIfAbsent.
+        // This implementation relax the constraint a bit only check for same key
+        Declaration rv;
+        if (treeCache.containsKey(c)) {
+            rv = treeCache.get(c);
+        } else {
+            rv = factory.get();
+            if (null != rv && treeCache.put(c, rv) != null) {
+                throw new ConcurrentModificationException();
+            }
+        }
+        return clazz.cast(rv);
     }
 
     interface ScopedFactoryLayout {
         Declaration.Scoped make(Position pos, String name, MemoryLayout layout, Declaration... decls);
     }
diff a/test/jdk/java/jextract/SmokeTest.java b/test/jdk/java/jextract/SmokeTest.java
--- a/test/jdk/java/jextract/SmokeTest.java
+++ b/test/jdk/java/jextract/SmokeTest.java
@@ -27,33 +27,61 @@
 /*
  * @test
  * @run testng SmokeTest
  */
 
-import java.io.File;
-
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.Optional;
+import java.util.function.Predicate;
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.JextractTask;
 import jdk.incubator.jextract.Type;
-import org.testng.annotations.*;
-import static org.testng.Assert.*;
+import org.testng.annotations.Test;
+
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
+import static org.testng.Assert.fail;
 
 public class SmokeTest {
 
     @Test
     public void testParser() {
-        var task = JextractTask.newTask(false, new File(System.getProperty("test.src.path"), "smoke.h").toPath());
+        Path header = Paths.get(System.getProperty("test.src.path", "."), "smoke.h");
+        var task = JextractTask.newTask(false, header);
         Declaration.Scoped d = task.parse("");
         Declaration.Scoped pointDecl = checkStruct(d, "Point", "x", "y");
         Type intType = ((Declaration.Variable)pointDecl.members().get(0)).type();
         checkGlobal(d, "p", Type.declared(pointDecl));
         checkFunction(d, "distance", intType, Type.declared(pointDecl), Type.declared(pointDecl));
         Declaration.Variable ch_ptr_ptr = findDecl(d, "ch_ptr_ptr", Declaration.Variable.class);
         checkFunction(d, "pointers", ch_ptr_ptr.type(), ch_ptr_ptr.type(), ch_ptr_ptr.type());
         checkConstant(d, "ZERO", intType, 0L);
     }
 
+    @Test
+    public void test8238712() {
+        Path header = Paths.get(System.getProperty("test.src.path", "."), "Test8238712.h");
+        var task = JextractTask.newTask(false, header);
+        Declaration.Scoped d = task.parse();
+        Declaration.Scoped structFoo = checkStruct(d, "foo", "n", "ptr");
+        Type intType = ((Declaration.Variable) structFoo.members().get(0)).type();
+        Type fooType = Type.declared(structFoo);
+        checkFunction(d, "withRecordTypeArg", intType, intType, fooType);
+        checkFunction(d, "returnRecordType", fooType);
+        // Opaque struct, have no field
+        Declaration.Scoped structBar = checkStruct(d, "bar");
+        assertTrue(structBar.layout().isEmpty());
+        Type barType = Type.declared(structBar);
+        // Function with opaque struct won't work but should have cursor for tool to handle
+        checkFunction(d, "returnBar", barType);
+        checkFunction(d, "withBar", Type.void_(), barType);
+        // Function use pointer to opaque struct should be OK
+        Type barPointer = Type.pointer(barType);
+        checkFunction(d, "nextBar", barPointer, barPointer);
+    }
+
     Declaration.Scoped checkStruct(Declaration.Scoped toplevel, String name, String... fields) {
         Declaration.Scoped struct = findDecl(toplevel, name, Declaration.Scoped.class);
         assertEquals(struct.members().size(), fields.length);
         for (int i = 0 ; i < fields.length ; i++) {
             assertEquals(struct.members().get(i).name(), fields[i]);
@@ -88,19 +116,30 @@
         assertTypeEquals(type, constant.type());
         assertEquals(value, constant.value());
         return constant;
     }
 
+    Predicate<Declaration> byName(final String name) {
+        return d -> d.name().equals(name);
+    }
+
+    Predicate<Declaration> byNameAndType(final String name, Class<? extends Declaration> declType) {
+        return d -> declType.isAssignableFrom(d.getClass()) && d.name().equals(name);
+    }
+
+    Optional<Declaration> findDecl(Declaration.Scoped toplevel, Predicate<Declaration> filter) {
+        return toplevel.members().stream().filter(filter).findAny();
+    }
+
     @SuppressWarnings("unchecked")
     <D extends Declaration> D findDecl(Declaration.Scoped toplevel, String name, Class<D> declType) {
-        for (Declaration d : toplevel.members()) {
-            if (declType.isAssignableFrom(d.getClass()) && d.name().equals(name)) {
-                return (D)d;
-            }
+        Optional<Declaration> d = findDecl(toplevel, byNameAndType(name, declType));
+        if (d.isEmpty()) {
+            fail("No declaration with name " + name + " found in " + toplevel);
+            return null;
         }
-        fail("No declaration with name " + name + " found in " + toplevel);
-        return null;
+        return (D) d.get();
     }
 
     void assertTypeEquals(Type expected, Type found) {
         assertEquals(expected.getClass(), found.getClass());
         if (expected instanceof Type.Primitive) {
diff a/test/jdk/java/jextract/Test8238712.h b/test/jdk/java/jextract/Test8238712.h
--- /dev/null
+++ b/test/jdk/java/jextract/Test8238712.h
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ *
+ */
+
+// Forward reference of struct to cause ConcurrentModificationException
+struct foo;
+
+// Declaration above is required, without it, the argument s cause
+// a C warning as struct foo only visible to the function.
+int withRecordTypeArg(int n, struct foo s);
+struct foo returnRecordType(void);
+
+// Improper header may write such with definition in other file
+struct bar returnBar(void);
+void withBar(struct bar s);
+
+struct bar *nextBar(struct bar *current);
+
+struct foo {
+    int n;
+    struct foo *ptr;
+};
